(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendor"],{

/***/ "./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/animations.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/animations.js ***!
  \******************************************************************************/
/*! exports provided: AUTO_STYLE, AnimationBuilder, AnimationFactory, NoopAnimationPlayer, animate, animateChild, animation, group, keyframes, query, sequence, stagger, state, style, transition, trigger, useAnimation, ɵAnimationGroupPlayer, ɵPRE_STYLE */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AUTO_STYLE", function() { return AUTO_STYLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationBuilder", function() { return AnimationBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationFactory", function() { return AnimationFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoopAnimationPlayer", function() { return NoopAnimationPlayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animate", function() { return animate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animateChild", function() { return animateChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animation", function() { return animation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "group", function() { return group; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function() { return keyframes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "query", function() { return query; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequence", function() { return sequence; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stagger", function() { return stagger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "state", function() { return state; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "style", function() { return style; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return transition; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "trigger", function() { return trigger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "useAnimation", function() { return useAnimation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationGroupPlayer", function() { return AnimationGroupPlayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPRE_STYLE", function() { return ɵPRE_STYLE; });
/**
 * @license Angular v9.0.7
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/src/animation_builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An injectable service that produces an animation sequence programmatically within an
 * Angular component or directive.
 * Provided by the `BrowserAnimationsModule` or `NoopAnimationsModule`.
 *
 * \@usageNotes
 *
 * To use this service, add it to your component or directive as a dependency.
 * The service is instantiated along with your component.
 *
 * Apps do not typically need to create their own animation players, but if you
 * do need to, follow these steps:
 *
 * 1. Use the `build()` method to create a programmatic animation using the
 * `animate()` function. The method returns an `AnimationFactory` instance.
 *
 * 2. Use the factory object to create an `AnimationPlayer` and attach it to a DOM element.
 *
 * 3. Use the player object to control the animation programmatically.
 *
 * For example:
 *
 * ```ts
 * // import the service from BrowserAnimationsModule
 * import {AnimationBuilder} from '\@angular/animations';
 * // require the service as a dependency
 * class MyCmp {
 *   constructor(private _builder: AnimationBuilder) {}
 *
 *   makeAnimation(element: any) {
 *     // first define a reusable animation
 *     const myAnimation = this._builder.build([
 *       style({ width: 0 }),
 *       animate(1000, style({ width: '100px' }))
 *     ]);
 *
 *     // use the returned factory object to create a player
 *     const player = myAnimation.create(element);
 *
 *     player.play();
 *   }
 * }
 * ```
 *
 * \@publicApi
 * @abstract
 */
class AnimationBuilder {
}
if (false) {}
/**
 * A factory object returned from the `AnimationBuilder`.`build()` method.
 *
 * \@publicApi
 * @abstract
 */
class AnimationFactory {
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/src/animation_metadata.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents a set of CSS styles for use in an animation style.
 * @record
 */
function ɵStyleData() { }
/** @enum {number} */
const AnimationMetadataType = {
    /**
     * Associates a named animation state with a set of CSS styles.
     * See `state()`
     */
    State: 0,
    /**
     * Data for a transition from one animation state to another.
     * See `transition()`
     */
    Transition: 1,
    /**
     * Contains a set of animation steps.
     * See `sequence()`
     */
    Sequence: 2,
    /**
     * Contains a set of animation steps.
     * See `{@link animations/group group()}`
     */
    Group: 3,
    /**
     * Contains an animation step.
     * See `animate()`
     */
    Animate: 4,
    /**
     * Contains a set of animation steps.
     * See `keyframes()`
     */
    Keyframes: 5,
    /**
     * Contains a set of CSS property-value pairs into a named style.
     * See `style()`
     */
    Style: 6,
    /**
     * Associates an animation with an entry trigger that can be attached to an element.
     * See `trigger()`
     */
    Trigger: 7,
    /**
     * Contains a re-usable animation.
     * See `animation()`
     */
    Reference: 8,
    /**
     * Contains data to use in executing child animations returned by a query.
     * See `animateChild()`
     */
    AnimateChild: 9,
    /**
     * Contains animation parameters for a re-usable animation.
     * See `useAnimation()`
     */
    AnimateRef: 10,
    /**
     * Contains child-animation query data.
     * See `query()`
     */
    Query: 11,
    /**
     * Contains data for staggering an animation sequence.
     * See `stagger()`
     */
    Stagger: 12,
};
/**
 * Specifies automatic styling.
 *
 * \@publicApi
 * @type {?}
 */
const AUTO_STYLE = '*';
/**
 * Base for animation data structures.
 *
 * \@publicApi
 * @record
 */
function AnimationMetadata() { }
if (false) {}
/**
 * Contains an animation trigger. Instantiated and returned by the
 * `trigger()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationTriggerMetadata() { }
if (false) {}
/**
 * Encapsulates an animation state by associating a state name with a set of CSS styles.
 * Instantiated and returned by the `state()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationStateMetadata() { }
if (false) {}
/**
 * Encapsulates an animation transition. Instantiated and returned by the
 * `transition()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationTransitionMetadata() { }
if (false) {}
/**
 * Encapsulates a reusable animation, which is a collection of individual animation steps.
 * Instantiated and returned by the `animation()` function, and
 * passed to the `useAnimation()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationReferenceMetadata() { }
if (false) {}
/**
 * Encapsulates an animation query. Instantiated and returned by
 * the `query()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationQueryMetadata() { }
if (false) {}
/**
 * Encapsulates a keyframes sequence. Instantiated and returned by
 * the `keyframes()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationKeyframesSequenceMetadata() { }
if (false) {}
/**
 * Encapsulates an animation style. Instantiated and returned by
 * the `style()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationStyleMetadata() { }
if (false) {}
/**
 * Encapsulates an animation step. Instantiated and returned by
 * the `animate()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationAnimateMetadata() { }
if (false) {}
/**
 * Encapsulates a child animation, that can be run explicitly when the parent is run.
 * Instantiated and returned by the `animateChild` function.
 *
 * \@publicApi
 * @record
 */
function AnimationAnimateChildMetadata() { }
if (false) {}
/**
 * Encapsulates a reusable animation.
 * Instantiated and returned by the `useAnimation()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationAnimateRefMetadata() { }
if (false) {}
/**
 * Encapsulates an animation sequence.
 * Instantiated and returned by the `sequence()` function.
 *
 * \@publicApi
 * @record
 */
function AnimationSequenceMetadata() { }
if (false) {}
/**
 * Encapsulates an animation group.
 * Instantiated and returned by the `{\@link animations/group group()}` function.
 *
 * \@publicApi
 * @record
 */
function AnimationGroupMetadata() { }
if (false) {}
/**
 * Encapsulates parameters for staggering the start times of a set of animation steps.
 * Instantiated and returned by the `stagger()` function.
 *
 * \@publicApi
 *
 * @record
 */
function AnimationStaggerMetadata() { }
if (false) {}
/**
 * Creates a named animation trigger, containing a  list of `state()`
 * and `transition()` entries to be evaluated when the expression
 * bound to the trigger changes.
 *
 * \@usageNotes
 * Define an animation trigger in the `animations` section of `\@Component` metadata.
 * In the template, reference the trigger by name and bind it to a trigger expression that
 * evaluates to a defined animation state, using the following format:
 *
 * `[\@triggerName]="expression"`
 *
 * Animation trigger bindings convert all values to strings, and then match the
 * previous and current values against any linked transitions.
 * Booleans can be specified as `1` or `true` and `0` or `false`.
 *
 * ### Usage Example
 *
 * The following example creates an animation trigger reference based on the provided
 * name value.
 * The provided animation value is expected to be an array consisting of state and
 * transition declarations.
 *
 * ```typescript
 * \@Component({
 *   selector: "my-component",
 *   templateUrl: "my-component-tpl.html",
 *   animations: [
 *     trigger("myAnimationTrigger", [
 *       state(...),
 *       state(...),
 *       transition(...),
 *       transition(...)
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "something";
 * }
 * ```
 *
 * The template associated with this component makes use of the defined trigger
 * by binding to an element within its template code.
 *
 * ```html
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * ### Using an inline function
 * The `transition` animation method also supports reading an inline function which can decide
 * if its associated animation should be run.
 *
 * ```typescript
 * // this method is run each time the `myAnimationTrigger` trigger value changes.
 * function myInlineMatcherFn(fromState: string, toState: string, element: any, params: {[key:
 * string]: any}): boolean {
 *   // notice that `element` and `params` are also available here
 *   return toState == 'yes-please-animate';
 * }
 *  /
 *   selector: 'my-component',
 *   templateUrl: 'my-component-tpl.html',
 *   animations: [
 *     trigger('myAnimationTrigger', [
 *       transition(myInlineMatcherFn, [
 *         // the animation sequence code
 *       ]),
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   myStatusExp = "yes-please-animate";
 * }
 * ```
 *
 * ### Disabling Animations
 * When true, the special animation control binding `\@.disabled` binding prevents
 * all animations from rendering.
 * Place the  `\@.disabled` binding on an element to disable
 * animations on the element itself, as well as any inner animation triggers
 * within the element.
 *
 * The following example shows how to use this feature:
 *
 * ```typescript /
 *   selector: 'my-component',
 *   template: `
 *     <div [\@.disabled]="isDisabled">
 *       <div [\@childAnimation]="exp"></div>
 *     </div>
 *   `,
 *   animations: [
 *     trigger("childAnimation", [
 *       // ...
 *     ])
 *   ]
 * })
 * class MyComponent {
 *   isDisabled = true;
 *   exp = '...';
 * }
 * ```
 *
 * When `\@.disabled` is true, it prevents the `\@childAnimation` trigger from animating,
 * along with any inner animations.
 *
 * ### Disable animations application-wide
 * When an area of the template is set to have animations disabled,
 * **all** inner components have their animations disabled as well.
 * This means that you can disable all animations for an app
 * by placing a host binding set on `\@.disabled` on the topmost Angular component.
 *
 * ```typescript
 * import {Component, HostBinding} from '\@angular/core';
 *  /
 *   selector: 'app-component',
 *   templateUrl: 'app.component.html',
 * })
 * class AppComponent {
 * \@HostBinding('@.disabled')
 *   public animationsDisabled = true;
 * }
 * ```
 *
 * ### Overriding disablement of inner animations
 * Despite inner animations being disabled, a parent animation can `query()`
 * for inner elements located in disabled areas of the template and still animate
 * them if needed. This is also the case for when a sub animation is
 * queried by a parent and then later animated using `animateChild()`.
 *
 * ### Detecting when an animation is disabled
 * If a region of the DOM (or the entire application) has its animations disabled, the animation
 * trigger callbacks still fire, but for zero seconds. When the callback fires, it provides
 * an instance of an `AnimationEvent`. If animations are disabled,
 * the `.disabled` flag on the event is true.
 *
 * \@publicApi
 * @param {?} name An identifying string.
 * @param {?} definitions  An animation definition object, containing an array of `state()`
 * and `transition()` declarations.
 *
 * @return {?} An object that encapsulates the trigger data.
 *
 */
function trigger(name, definitions) {
    return { type: 7 /* Trigger */, name, definitions, options: {} };
}
/**
 * Defines an animation step that combines styling information with timing information.
 *
 * \@usageNotes
 * Call within an animation `sequence()`, `{\@link animations/group group()}`, or
 * `transition()` call to specify an animation step
 * that applies given style data to the parent animation for a given amount of time.
 *
 * ### Syntax Examples
 * **Timing examples**
 *
 * The following examples show various `timings` specifications.
 * - `animate(500)` : Duration is 500 milliseconds.
 * - `animate("1s")` : Duration is 1000 milliseconds.
 * - `animate("100ms 0.5s")` : Duration is 100 milliseconds, delay is 500 milliseconds.
 * - `animate("5s ease-in")` : Duration is 5000 milliseconds, easing in.
 * - `animate("5s 10ms cubic-bezier(.17,.67,.88,.1)")` : Duration is 5000 milliseconds, delay is 10
 * milliseconds, easing according to a bezier curve.
 *
 * **Style examples**
 *
 * The following example calls `style()` to set a single CSS style.
 * ```typescript
 * animate(500, style({ background: "red" }))
 * ```
 * The following example calls `keyframes()` to set a CSS style
 * to different values for successive keyframes.
 * ```typescript
 * animate(500, keyframes(
 *  [
 *   style({ background: "blue" })),
 *   style({ background: "red" }))
 *  ])
 * ```
 *
 * \@publicApi
 * @param {?} timings Sets `AnimateTimings` for the parent animation.
 * A string in the format "duration [delay] [easing]".
 *  - Duration and delay are expressed as a number and optional time unit,
 * such as "1s" or "10ms" for one second and 10 milliseconds, respectively.
 * The default unit is milliseconds.
 *  - The easing value controls how the animation accelerates and decelerates
 * during its runtime. Value is one of  `ease`, `ease-in`, `ease-out`,
 * `ease-in-out`, or a `cubic-bezier()` function call.
 * If not supplied, no easing is applied.
 *
 * For example, the string "1s 100ms ease-out" specifies a duration of
 * 1000 milliseconds, and delay of 100 ms, and the "ease-out" easing style,
 * which decelerates near the end of the duration.
 * @param {?=} styles Sets AnimationStyles for the parent animation.
 * A function call to either `style()` or `keyframes()`
 * that returns a collection of CSS style entries to be applied to the parent animation.
 * When null, uses the styles from the destination state.
 * This is useful when describing an animation step that will complete an animation;
 * see "Animating to the final state" in `transitions()`.
 * @return {?} An object that encapsulates the animation step.
 *
 */
function animate(timings, styles = null) {
    return { type: 4 /* Animate */, styles, timings };
}
/**
 * \@description Defines a list of animation steps to be run in parallel.
 *
 * \@usageNotes
 * Grouped animations are useful when a series of styles must be
 * animated at different starting times and closed off at different ending times.
 *
 * When called within a `sequence()` or a
 * `transition()` call, does not continue to the next
 * instruction until all of the inner animation steps have completed.
 *
 * \@publicApi
 * @param {?} steps An array of animation step objects.
 * - When steps are defined by `style()` or `animate()`
 * function calls, each call within the group is executed instantly.
 * - To specify offset styles to be applied at a later time, define steps with
 * `keyframes()`, or use `animate()` calls with a delay value.
 * For example:
 *
 * ```typescript
 * group([
 *   animate("1s", style({ background: "black" })),
 *   animate("2s", style({ color: "white" }))
 * ])
 * ```
 *
 * @param {?=} options An options object containing a delay and
 * developer-defined parameters that provide styling defaults and
 * can be overridden on invocation.
 *
 * @return {?} An object that encapsulates the group data.
 *
 */
function group(steps, options = null) {
    return { type: 3 /* Group */, steps, options };
}
/**
 * Defines a list of animation steps to be run sequentially, one by one.
 *
 * \@usageNotes
 * When you pass an array of steps to a
 * `transition()` call, the steps run sequentially by default.
 * Compare this to the `{\@link animations/group group()}` call, which runs animation steps in parallel.
 *
 * When a sequence is used within a `{\@link animations/group group()}` or a `transition()` call,
 * execution continues to the next instruction only after each of the inner animation
 * steps have completed.
 *
 * \@publicApi
 *
 * @param {?} steps An array of animation step objects.
 * - Steps defined by `style()` calls apply the styling data immediately.
 * - Steps defined by `animate()` calls apply the styling data over time
 *   as specified by the timing data.
 *
 * ```typescript
 * sequence([
 *   style({ opacity: 0 }),
 *   animate("1s", style({ opacity: 1 }))
 * ])
 * ```
 *
 * @param {?=} options An options object containing a delay and
 * developer-defined parameters that provide styling defaults and
 * can be overridden on invocation.
 *
 * @return {?} An object that encapsulates the sequence data.
 *
 */
function sequence(steps, options = null) {
    return { type: 2 /* Sequence */, steps, options };
}
/**
 * Declares a key/value object containing CSS properties/styles that
 * can then be used for an animation `state`, within an animation `sequence`,
 * or as styling data for calls to `animate()` and `keyframes()`.
 *
 * \@usageNotes
 * The following examples create animation styles that collect a set of
 * CSS property values:
 *
 * ```typescript
 * // string values for CSS properties
 * style({ background: "red", color: "blue" })
 *
 * // numerical pixel values
 * style({ width: 100, height: 0 })
 * ```
 *
 * The following example uses auto-styling to allow a component to animate from
 * a height of 0 up to the height of the parent element:
 *
 * ```
 * style({ height: 0 }),
 * animate("1s", style({ height: "*" }))
 * ```
 *
 * \@publicApi
 *
 * @param {?} tokens A set of CSS styles or HTML styles associated with an animation state.
 * The value can be any of the following:
 * - A key-value style pair associating a CSS property with a value.
 * - An array of key-value style pairs.
 * - An asterisk (*), to use auto-styling, where styles are derived from the element
 * being animated and applied to the animation when it starts.
 *
 * Auto-styling can be used to define a state that depends on layout or other
 * environmental factors.
 *
 * @return {?} An object that encapsulates the style data.
 *
 */
function style(tokens) {
    return { type: 6 /* Style */, styles: tokens, offset: null };
}
/**
 * Declares an animation state within a trigger attached to an element.
 *
 * \@usageNotes
 * Use the `trigger()` function to register states to an animation trigger.
 * Use the `transition()` function to animate between states.
 * When a state is active within a component, its associated styles persist on the element,
 * even when the animation ends.
 *
 * \@publicApi
 *
 * @param {?} name One or more names for the defined state in a comma-separated string.
 * The following reserved state names can be supplied to define a style for specific use
 * cases:
 *
 * - `void` You can associate styles with this name to be used when
 * the element is detached from the application. For example, when an `ngIf` evaluates
 * to false, the state of the associated element is void.
 *  - `*` (asterisk) Indicates the default state. You can associate styles with this name
 * to be used as the fallback when the state that is being animated is not declared
 * within the trigger.
 *
 * @param {?} styles A set of CSS styles associated with this state, created using the
 * `style()` function.
 * This set of styles persists on the element once the state has been reached.
 * @param {?=} options Parameters that can be passed to the state when it is invoked.
 * 0 or more key-value pairs.
 * @return {?} An object that encapsulates the new state data.
 *
 */
function state(name, styles, options) {
    return { type: 0 /* State */, name, styles, options };
}
/**
 * Defines a set of animation styles, associating each style with an optional `offset` value.
 *
 * \@usageNotes
 * Use with the `animate()` call. Instead of applying animations
 * from the current state
 * to the destination state, keyframes describe how each style entry is applied and at what point
 * within the animation arc.
 * Compare [CSS Keyframe Animations](https://www.w3schools.com/css/css3_animations.asp).
 *
 * ### Usage
 *
 * In the following example, the offset values describe
 * when each `backgroundColor` value is applied. The color is red at the start, and changes to
 * blue when 20% of the total time has elapsed.
 *
 * ```typescript
 * // the provided offset values
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red", offset: 0 }),
 *   style({ backgroundColor: "blue", offset: 0.2 }),
 *   style({ backgroundColor: "orange", offset: 0.3 }),
 *   style({ backgroundColor: "black", offset: 1 })
 * ]))
 * ```
 *
 * If there are no `offset` values specified in the style entries, the offsets
 * are calculated automatically.
 *
 * ```typescript
 * animate("5s", keyframes([
 *   style({ backgroundColor: "red" }) // offset = 0
 *   style({ backgroundColor: "blue" }) // offset = 0.33
 *   style({ backgroundColor: "orange" }) // offset = 0.66
 *   style({ backgroundColor: "black" }) // offset = 1
 * ]))
 * ```
 * \@publicApi
 * @param {?} steps A set of animation styles with optional offset data.
 * The optional `offset` value for a style specifies a percentage of the total animation
 * time at which that style is applied.
 * @return {?} An object that encapsulates the keyframes data.
 *
 */
function keyframes(steps) {
    return { type: 5 /* Keyframes */, steps };
}
/**
 * Declares an animation transition as a sequence of animation steps to run when a given
 * condition is satisfied. The condition is a Boolean expression or function that compares
 * the previous and current animation states, and returns true if this transition should occur.
 * When the state criteria of a defined transition are met, the associated animation is
 * triggered.
 *
 * \@usageNotes
 * The template associated with a component binds an animation trigger to an element.
 *
 * ```HTML
 * <!-- somewhere inside of my-component-tpl.html -->
 * <div [\@myAnimationTrigger]="myStatusExp">...</div>
 * ```
 *
 * All transitions are defined within an animation trigger,
 * along with named states that the transitions change to and from.
 *
 * ```typescript
 * trigger("myAnimationTrigger", [
 *  // define states
 *  state("on", style({ background: "green" })),
 *  state("off", style({ background: "grey" })),
 *  ...]
 * ```
 *
 * Note that when you call the `sequence()` function within a `{\@link animations/group group()}`
 * or a `transition()` call, execution does not continue to the next instruction
 * until each of the inner animation steps have completed.
 *
 * ### Syntax examples
 *
 * The following examples define transitions between the two defined states (and default states),
 * using various options:
 *
 * ```typescript
 * // Transition occurs when the state value
 * // bound to "myAnimationTrigger" changes from "on" to "off"
 * transition("on => off", animate(500))
 * // Run the same animation for both directions
 * transition("on <=> off", animate(500))
 * // Define multiple state-change pairs separated by commas
 * transition("on => off, off => void", animate(500))
 * ```
 *
 * ### Special values for state-change expressions
 *
 * - Catch-all state change for when an element is inserted into the page and the
 * destination state is unknown:
 *
 * ```typescript
 * transition("void => *", [
 *  style({ opacity: 0 }),
 *  animate(500)
 *  ])
 * ```
 *
 * - Capture a state change between any states:
 *
 *  `transition("* => *", animate("1s 0s"))`
 *
 * - Entry and exit transitions:
 *
 * ```typescript
 * transition(":enter", [
 *   style({ opacity: 0 }),
 *   animate(500, style({ opacity: 1 }))
 *   ]),
 * transition(":leave", [
 *   animate(500, style({ opacity: 0 }))
 *   ])
 * ```
 *
 * - Use `:increment` and `:decrement` to initiate transitions:
 *
 * ```typescript
 * transition(":increment", group([
 *  query(':enter', [
 *     style({ left: '100%' }),
 *     animate('0.5s ease-out', style('*'))
 *   ]),
 *  query(':leave', [
 *     animate('0.5s ease-out', style({ left: '-100%' }))
 *  ])
 * ]))
 *
 * transition(":decrement", group([
 *  query(':enter', [
 *     style({ left: '100%' }),
 *     animate('0.5s ease-out', style('*'))
 *   ]),
 *  query(':leave', [
 *     animate('0.5s ease-out', style({ left: '-100%' }))
 *  ])
 * ]))
 * ```
 *
 * ### State-change functions
 *
 * Here is an example of a `fromState` specified as a state-change function that invokes an
 * animation when true:
 *
 * ```typescript
 * transition((fromState, toState) =>
 *  {
 *   return fromState == "off" && toState == "on";
 *  },
 *  animate("1s 0s"))
 * ```
 *
 * ### Animating to the final state
 *
 * If the final step in a transition is a call to `animate()` that uses a timing value
 * with no style data, that step is automatically considered the final animation arc,
 * for the element to reach the final state. Angular automatically adds or removes
 * CSS styles to ensure that the element is in the correct final state.
 *
 * The following example defines a transition that starts by hiding the element,
 * then makes sure that it animates properly to whatever state is currently active for trigger:
 *
 * ```typescript
 * transition("void => *", [
 *   style({ opacity: 0 }),
 *   animate(500)
 *  ])
 * ```
 * ### Boolean value matching
 * If a trigger binding value is a Boolean, it can be matched using a transition expression
 * that compares true and false or 1 and 0. For example:
 *
 * ```
 * // in the template
 * <div [\@openClose]="open ? true : false">...</div>
 * // in the component metadata
 * trigger('openClose', [
 *   state('true', style({ height: '*' })),
 *   state('false', style({ height: '0px' })),
 *   transition('false <=> true', animate(500))
 * ])
 * ```
 *
 * \@publicApi
 *
 * @param {?} stateChangeExpr A Boolean expression or function that compares the previous and current
 * animation states, and returns true if this transition should occur. Note that  "true" and "false"
 * match 1 and 0, respectively. An expression is evaluated each time a state change occurs in the
 * animation trigger element.
 * The animation steps run when the expression evaluates to true.
 *
 * - A state-change string takes the form "state1 => state2", where each side is a defined animation
 * state, or an asterix (*) to refer to a dynamic start or end state.
 *   - The expression string can contain multiple comma-separated statements;
 * for example "state1 => state2, state3 => state4".
 *   - Special values `:enter` and `:leave` initiate a transition on the entry and exit states,
 * equivalent to  "void => *"  and "* => void".
 *   - Special values `:increment` and `:decrement` initiate a transition when a numeric value has
 * increased or decreased in value.
 * - A function is executed each time a state change occurs in the animation trigger element.
 * The animation steps run when the function returns true.
 *
 * @param {?} steps One or more animation objects, as returned by the `animate()` or
 * `sequence()` function, that form a transformation from one state to another.
 * A sequence is used by default when you pass an array.
 * @param {?=} options An options object that can contain a delay value for the start of the animation,
 * and additional developer-defined parameters. Provided values for additional parameters are used
 * as defaults, and override values can be passed to the caller on invocation.
 * @return {?} An object that encapsulates the transition data.
 *
 */
function transition(stateChangeExpr, steps, options = null) {
    return { type: 1 /* Transition */, expr: stateChangeExpr, animation: steps, options };
}
/**
 * Produces a reusable animation that can be invoked in another animation or sequence,
 * by calling the `useAnimation()` function.
 *
 * \@usageNotes
 * The following example defines a reusable animation, providing some default parameter
 * values.
 *
 * ```typescript
 * var fadeAnimation = animation([
 *   style({ opacity: '{{ start }}' }),
 *   animate('{{ time }}',
 *   style({ opacity: '{{ end }}'}))
 *   ],
 *   { params: { time: '1000ms', start: 0, end: 1 }});
 * ```
 *
 * The following invokes the defined animation with a call to `useAnimation()`,
 * passing in override parameter values.
 *
 * ```js
 * useAnimation(fadeAnimation, {
 *   params: {
 *     time: '2s',
 *     start: 1,
 *     end: 0
 *   }
 * })
 * ```
 *
 * If any of the passed-in parameter values are missing from this call,
 * the default values are used. If one or more parameter values are missing before a step is
 * animated, `useAnimation()` throws an error.
 *
 * \@publicApi
 * @param {?} steps One or more animation objects, as returned by the `animate()`
 * or `sequence()` function, that form a transformation from one state to another.
 * A sequence is used by default when you pass an array.
 * @param {?=} options An options object that can contain a delay value for the start of the
 * animation, and additional developer-defined parameters.
 * Provided values for additional parameters are used as defaults,
 * and override values can be passed to the caller on invocation.
 * @return {?} An object that encapsulates the animation data.
 *
 */
function animation(steps, options = null) {
    return { type: 8 /* Reference */, animation: steps, options };
}
/**
 * Executes a queried inner animation element within an animation sequence.
 *
 * \@usageNotes
 * Each time an animation is triggered in Angular, the parent animation
 * has priority and any child animations are blocked. In order
 * for a child animation to run, the parent animation must query each of the elements
 * containing child animations, and run them using this function.
 *
 * Note that this feature is designed to be used with `query()` and it will only work
 * with animations that are assigned using the Angular animation library. CSS keyframes
 * and transitions are not handled by this API.
 *
 * \@publicApi
 * @param {?=} options An options object that can contain a delay value for the start of the
 * animation, and additional override values for developer-defined parameters.
 * @return {?} An object that encapsulates the child animation data.
 *
 */
function animateChild(options = null) {
    return { type: 9 /* AnimateChild */, options };
}
/**
 * Starts a reusable animation that is created using the `animation()` function.
 *
 * \@publicApi
 * @param {?} animation The reusable animation to start.
 * @param {?=} options An options object that can contain a delay value for the start of
 * the animation, and additional override values for developer-defined parameters.
 * @return {?} An object that contains the animation parameters.
 *
 */
function useAnimation(animation, options = null) {
    return { type: 10 /* AnimateRef */, animation, options };
}
/**
 * Finds one or more inner elements within the current element that is
 * being animated within a sequence. Use with `animate()`.
 *
 * \@usageNotes
 * Tokens can be merged into a combined query selector string. For example:
 *
 * ```typescript
 *  query(':self, .record:enter, .record:leave, \@subTrigger', [...])
 * ```
 *
 * The `query()` function collects multiple elements and works internally by using
 * `element.querySelectorAll`. Use the `limit` field of an options object to limit
 * the total number of items to be collected. For example:
 *
 * ```js
 * query('div', [
 *   animate(...),
 *   animate(...)
 * ], { limit: 1 })
 * ```
 *
 * By default, throws an error when zero items are found. Set the
 * `optional` flag to ignore this error. For example:
 *
 * ```js
 * query('.some-element-that-may-not-be-there', [
 *   animate(...),
 *   animate(...)
 * ], { optional: true })
 * ```
 *
 * ### Usage Example
 *
 * The following example queries for inner elements and animates them
 * individually using `animate()`.
 *
 * ```typescript
 * \@Component({
 *   selector: 'inner',
 *   template: `
 *     <div [\@queryAnimation]="exp">
 *       <h1>Title</h1>
 *       <div class="content">
 *         Blah blah blah
 *       </div>
 *     </div>
 *   `,
 *   animations: [
 *    trigger('queryAnimation', [
 *      transition('* => goAnimate', [
 *        // hide the inner elements
 *        query('h1', style({ opacity: 0 })),
 *        query('.content', style({ opacity: 0 })),
 *
 *        // animate the inner elements in, one by one
 *        query('h1', animate(1000, style({ opacity: 1 }))),
 *        query('.content', animate(1000, style({ opacity: 1 }))),
 *      ])
 *    ])
 *  ]
 * })
 * class Cmp {
 *   exp = '';
 *
 *   goAnimate() {
 *     this.exp = 'goAnimate';
 *   }
 * }
 * ```
 *
 * \@publicApi
 * @param {?} selector The element to query, or a set of elements that contain Angular-specific
 * characteristics, specified with one or more of the following tokens.
 *  - `query(":enter")` or `query(":leave")` : Query for newly inserted/removed elements.
 *  - `query(":animating")` : Query all currently animating elements.
 *  - `query("\@triggerName")` : Query elements that contain an animation trigger.
 *  - `query("\@*")` : Query all elements that contain an animation triggers.
 *  - `query(":self")` : Include the current element into the animation sequence.
 *
 * @param {?} animation One or more animation steps to apply to the queried element or elements.
 * An array is treated as an animation sequence.
 * @param {?=} options An options object. Use the 'limit' field to limit the total number of
 * items to collect.
 * @return {?} An object that encapsulates the query data.
 *
 */
function query(selector, animation, options = null) {
    return { type: 11 /* Query */, selector, animation, options };
}
/**
 * Use within an animation `query()` call to issue a timing gap after
 * each queried item is animated.
 *
 * \@usageNotes
 * In the following example, a container element wraps a list of items stamped out
 * by an `ngFor`. The container element contains an animation trigger that will later be set
 * to query for each of the inner items.
 *
 * Each time items are added, the opacity fade-in animation runs,
 * and each removed item is faded out.
 * When either of these animations occur, the stagger effect is
 * applied after each item's animation is started.
 *
 * ```html
 * <!-- list.component.html -->
 * <button (click)="toggle()">Show / Hide Items</button>
 * <hr />
 * <div [\@listAnimation]="items.length">
 *   <div *ngFor="let item of items">
 *     {{ item }}
 *   </div>
 * </div>
 * ```
 *
 * Here is the component code:
 *
 * ```typescript
 * import {trigger, transition, style, animate, query, stagger} from '\@angular/animations';
 * \@Component({
 *   templateUrl: 'list.component.html',
 *   animations: [
 *     trigger('listAnimation', [
 *     ...
 *     ])
 *   ]
 * })
 * class ListComponent {
 *   items = [];
 *
 *   showItems() {
 *     this.items = [0,1,2,3,4];
 *   }
 *
 *   hideItems() {
 *     this.items = [];
 *   }
 *
 *   toggle() {
 *     this.items.length ? this.hideItems() : this.showItems();
 *    }
 *  }
 * ```
 *
 * Here is the animation trigger code:
 *
 * ```typescript
 * trigger('listAnimation', [
 *   transition('* => *', [ // each time the binding value changes
 *     query(':leave', [
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 0 }))
 *       ])
 *     ]),
 *     query(':enter', [
 *       style({ opacity: 0 }),
 *       stagger(100, [
 *         animate('0.5s', style({ opacity: 1 }))
 *       ])
 *     ])
 *   ])
 * ])
 * ```
 *
 * \@publicApi
 * @param {?} timings A delay value.
 * @param {?} animation One ore more animation steps.
 * @return {?} An object that encapsulates the stagger data.
 *
 */
function stagger(timings, animation) {
    return { type: 12 /* Stagger */, timings, animation };
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/src/util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @param {?} cb
 * @return {?}
 */
function scheduleMicroTask(cb) {
    Promise.resolve(null).then(cb);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/src/players/animation_player.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Provides programmatic control of a reusable animation sequence,
 * built using the `build()` method of `AnimationBuilder`. The `build()` method
 * returns a factory, whose `create()` method instantiates and initializes this interface.
 *
 * @see `AnimationBuilder`
 * @see `AnimationFactory`
 * @see `animate()`
 *
 * \@publicApi
 * @record
 */
function AnimationPlayer() { }
if (false) {}
/**
 * An empty programmatic controller for reusable animations.
 * Used internally when animations are disabled, to avoid
 * checking for the null case when an animation player is expected.
 *
 * @see `animate()`
 * @see `AnimationPlayer`
 * @see `GroupPlayer`
 *
 * \@publicApi
 */
class NoopAnimationPlayer {
    /**
     * @param {?=} duration
     * @param {?=} delay
     */
    constructor(duration = 0, delay = 0) {
        this._onDoneFns = [];
        this._onStartFns = [];
        this._onDestroyFns = [];
        this._started = false;
        this._destroyed = false;
        this._finished = false;
        this.parentPlayer = null;
        this.totalTime = duration + delay;
    }
    /**
     * @private
     * @return {?}
     */
    _onFinish() {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._onDoneFns = [];
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onStart(fn) { this._onStartFns.push(fn); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDone(fn) { this._onDoneFns.push(fn); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDestroy(fn) { this._onDestroyFns.push(fn); }
    /**
     * @return {?}
     */
    hasStarted() { return this._started; }
    /**
     * @return {?}
     */
    init() { }
    /**
     * @return {?}
     */
    play() {
        if (!this.hasStarted()) {
            this._onStart();
            this.triggerMicrotask();
        }
        this._started = true;
    }
    /**
     * \@internal
     * @return {?}
     */
    triggerMicrotask() { scheduleMicroTask((/**
     * @return {?}
     */
    () => this._onFinish())); }
    /**
     * @private
     * @return {?}
     */
    _onStart() {
        this._onStartFns.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        this._onStartFns = [];
    }
    /**
     * @return {?}
     */
    pause() { }
    /**
     * @return {?}
     */
    restart() { }
    /**
     * @return {?}
     */
    finish() { this._onFinish(); }
    /**
     * @return {?}
     */
    destroy() {
        if (!this._destroyed) {
            this._destroyed = true;
            if (!this.hasStarted()) {
                this._onStart();
            }
            this.finish();
            this._onDestroyFns.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._onDestroyFns = [];
        }
    }
    /**
     * @return {?}
     */
    reset() { }
    /**
     * @param {?} position
     * @return {?}
     */
    setPosition(position) { }
    /**
     * @return {?}
     */
    getPosition() { return 0; }
    /**
     * \@internal
     * @param {?} phaseName
     * @return {?}
     */
    triggerCallback(phaseName) {
        /** @type {?} */
        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
        methods.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        methods.length = 0;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/src/players/animation_group_player.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A programmatic controller for a group of reusable animations.
 * Used internally to control animations.
 *
 * @see `AnimationPlayer`
 * @see `{\@link animations/group group()}`
 *
 */
class AnimationGroupPlayer {
    /**
     * @param {?} _players
     */
    constructor(_players) {
        this._onDoneFns = [];
        this._onStartFns = [];
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this._onDestroyFns = [];
        this.parentPlayer = null;
        this.totalTime = 0;
        this.players = _players;
        /** @type {?} */
        let doneCount = 0;
        /** @type {?} */
        let destroyCount = 0;
        /** @type {?} */
        let startCount = 0;
        /** @type {?} */
        const total = this.players.length;
        if (total == 0) {
            scheduleMicroTask((/**
             * @return {?}
             */
            () => this._onFinish()));
        }
        else {
            this.players.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => {
                player.onDone((/**
                 * @return {?}
                 */
                () => {
                    if (++doneCount == total) {
                        this._onFinish();
                    }
                }));
                player.onDestroy((/**
                 * @return {?}
                 */
                () => {
                    if (++destroyCount == total) {
                        this._onDestroy();
                    }
                }));
                player.onStart((/**
                 * @return {?}
                 */
                () => {
                    if (++startCount == total) {
                        this._onStart();
                    }
                }));
            }));
        }
        this.totalTime = this.players.reduce((/**
         * @param {?} time
         * @param {?} player
         * @return {?}
         */
        (time, player) => Math.max(time, player.totalTime)), 0);
    }
    /**
     * @private
     * @return {?}
     */
    _onFinish() {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._onDoneFns = [];
        }
    }
    /**
     * @return {?}
     */
    init() { this.players.forEach((/**
     * @param {?} player
     * @return {?}
     */
    player => player.init())); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onStart(fn) { this._onStartFns.push(fn); }
    /**
     * @private
     * @return {?}
     */
    _onStart() {
        if (!this.hasStarted()) {
            this._started = true;
            this._onStartFns.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._onStartFns = [];
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDone(fn) { this._onDoneFns.push(fn); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDestroy(fn) { this._onDestroyFns.push(fn); }
    /**
     * @return {?}
     */
    hasStarted() { return this._started; }
    /**
     * @return {?}
     */
    play() {
        if (!this.parentPlayer) {
            this.init();
        }
        this._onStart();
        this.players.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => player.play()));
    }
    /**
     * @return {?}
     */
    pause() { this.players.forEach((/**
     * @param {?} player
     * @return {?}
     */
    player => player.pause())); }
    /**
     * @return {?}
     */
    restart() { this.players.forEach((/**
     * @param {?} player
     * @return {?}
     */
    player => player.restart())); }
    /**
     * @return {?}
     */
    finish() {
        this._onFinish();
        this.players.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => player.finish()));
    }
    /**
     * @return {?}
     */
    destroy() { this._onDestroy(); }
    /**
     * @private
     * @return {?}
     */
    _onDestroy() {
        if (!this._destroyed) {
            this._destroyed = true;
            this._onFinish();
            this.players.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => player.destroy()));
            this._onDestroyFns.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._onDestroyFns = [];
        }
    }
    /**
     * @return {?}
     */
    reset() {
        this.players.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => player.reset()));
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    }
    /**
     * @param {?} p
     * @return {?}
     */
    setPosition(p) {
        /** @type {?} */
        const timeAtPosition = p * this.totalTime;
        this.players.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            /** @type {?} */
            const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
            player.setPosition(position);
        }));
    }
    /**
     * @return {?}
     */
    getPosition() {
        /** @type {?} */
        let min = 0;
        this.players.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            /** @type {?} */
            const p = player.getPosition();
            min = Math.min(p, min);
        }));
        return min;
    }
    /**
     * @return {?}
     */
    beforeDestroy() {
        this.players.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            if (player.beforeDestroy) {
                player.beforeDestroy();
            }
        }));
    }
    /**
     * \@internal
     * @param {?} phaseName
     * @return {?}
     */
    triggerCallback(phaseName) {
        /** @type {?} */
        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
        methods.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        methods.length = 0;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/src/private_export.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ɵPRE_STYLE = '!';

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/src/animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=animations.js.map

/***/ }),

/***/ "./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/browser.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/browser.js ***!
  \***************************************************************************/
/*! exports provided: AnimationDriver, ɵAnimation, ɵAnimationEngine, ɵAnimationStyleNormalizer, ɵCssKeyframesDriver, ɵCssKeyframesPlayer, ɵNoopAnimationDriver, ɵNoopAnimationStyleNormalizer, ɵWebAnimationsDriver, ɵWebAnimationsPlayer, ɵWebAnimationsStyleNormalizer, ɵallowPreviousPlayerStylesMerge, ɵangular_packages_animations_browser_browser_a, ɵcontainsElement, ɵinvokeQuery, ɵmatchesElement, ɵsupportsWebAnimations, ɵvalidateStyleProperty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationDriver", function() { return AnimationDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimation", function() { return Animation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationEngine", function() { return AnimationEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationStyleNormalizer", function() { return AnimationStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵCssKeyframesDriver", function() { return CssKeyframesDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵCssKeyframesPlayer", function() { return CssKeyframesPlayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNoopAnimationDriver", function() { return NoopAnimationDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNoopAnimationStyleNormalizer", function() { return NoopAnimationStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵWebAnimationsDriver", function() { return WebAnimationsDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵWebAnimationsPlayer", function() { return WebAnimationsPlayer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵWebAnimationsStyleNormalizer", function() { return WebAnimationsStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵallowPreviousPlayerStylesMerge", function() { return allowPreviousPlayerStylesMerge; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_animations_browser_browser_a", function() { return SpecialCasedStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcontainsElement", function() { return containsElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinvokeQuery", function() { return invokeQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵmatchesElement", function() { return matchesElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵsupportsWebAnimations", function() { return supportsWebAnimations; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵvalidateStyleProperty", function() { return validateStyleProperty; });
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/animations.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/**
 * @license Angular v9.0.7
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */




/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/shared.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */

function isBrowser() {
    return (typeof window !== 'undefined' && typeof window.document !== 'undefined');
}
/**
 * @return {?}
 */
function isNode() {
    // Checking only for `process` isn't enough to identify whether or not we're in a Node
    // environment, because Webpack by default will polyfill the `process`. While we can discern
    // that Webpack polyfilled it by looking at `process.browser`, it's very Webpack-specific and
    // might not be future-proof. Instead we look at the stringified version of `process` which
    // is `[object process]` in Node and `[object Object]` when polyfilled.
    return typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';
}
/**
 * @param {?} players
 * @return {?}
 */
function optimizeGroupPlayer(players) {
    switch (players.length) {
        case 0:
            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"]();
        case 1:
            return players[0];
        default:
            return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵAnimationGroupPlayer"](players);
    }
}
/**
 * @param {?} driver
 * @param {?} normalizer
 * @param {?} element
 * @param {?} keyframes
 * @param {?=} preStyles
 * @param {?=} postStyles
 * @return {?}
 */
function normalizeKeyframes(driver, normalizer, element, keyframes, preStyles = {}, postStyles = {}) {
    /** @type {?} */
    const errors = [];
    /** @type {?} */
    const normalizedKeyframes = [];
    /** @type {?} */
    let previousOffset = -1;
    /** @type {?} */
    let previousKeyframe = null;
    keyframes.forEach((/**
     * @param {?} kf
     * @return {?}
     */
    kf => {
        /** @type {?} */
        const offset = (/** @type {?} */ (kf['offset']));
        /** @type {?} */
        const isSameOffset = offset == previousOffset;
        /** @type {?} */
        const normalizedKeyframe = (isSameOffset && previousKeyframe) || {};
        Object.keys(kf).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            let normalizedProp = prop;
            /** @type {?} */
            let normalizedValue = kf[prop];
            if (prop !== 'offset') {
                normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);
                switch (normalizedValue) {
                    case _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵPRE_STYLE"]:
                        normalizedValue = preStyles[prop];
                        break;
                    case _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]:
                        normalizedValue = postStyles[prop];
                        break;
                    default:
                        normalizedValue =
                            normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
                        break;
                }
            }
            normalizedKeyframe[normalizedProp] = normalizedValue;
        }));
        if (!isSameOffset) {
            normalizedKeyframes.push(normalizedKeyframe);
        }
        previousKeyframe = normalizedKeyframe;
        previousOffset = offset;
    }));
    if (errors.length) {
        /** @type {?} */
        const LINE_START = '\n - ';
        throw new Error(`Unable to animate due to the following errors:${LINE_START}${errors.join(LINE_START)}`);
    }
    return normalizedKeyframes;
}
/**
 * @param {?} player
 * @param {?} eventName
 * @param {?} event
 * @param {?} callback
 * @return {?}
 */
function listenOnPlayer(player, eventName, event, callback) {
    switch (eventName) {
        case 'start':
            player.onStart((/**
             * @return {?}
             */
            () => callback(event && copyAnimationEvent(event, 'start', player))));
            break;
        case 'done':
            player.onDone((/**
             * @return {?}
             */
            () => callback(event && copyAnimationEvent(event, 'done', player))));
            break;
        case 'destroy':
            player.onDestroy((/**
             * @return {?}
             */
            () => callback(event && copyAnimationEvent(event, 'destroy', player))));
            break;
    }
}
/**
 * @param {?} e
 * @param {?} phaseName
 * @param {?} player
 * @return {?}
 */
function copyAnimationEvent(e, phaseName, player) {
    /** @type {?} */
    const totalTime = player.totalTime;
    /** @type {?} */
    const disabled = ((/** @type {?} */ (player))).disabled ? true : false;
    /** @type {?} */
    const event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == undefined ? e.totalTime : totalTime, disabled);
    /** @type {?} */
    const data = ((/** @type {?} */ (e)))['_data'];
    if (data != null) {
        ((/** @type {?} */ (event)))['_data'] = data;
    }
    return event;
}
/**
 * @param {?} element
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?=} phaseName
 * @param {?=} totalTime
 * @param {?=} disabled
 * @return {?}
 */
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName = '', totalTime = 0, disabled) {
    return { element, triggerName, fromState, toState, phaseName, totalTime, disabled: !!disabled };
}
/**
 * @param {?} map
 * @param {?} key
 * @param {?} defaultValue
 * @return {?}
 */
function getOrSetAsInMap(map, key, defaultValue) {
    /** @type {?} */
    let value;
    if (map instanceof Map) {
        value = map.get(key);
        if (!value) {
            map.set(key, value = defaultValue);
        }
    }
    else {
        value = map[key];
        if (!value) {
            value = map[key] = defaultValue;
        }
    }
    return value;
}
/**
 * @param {?} command
 * @return {?}
 */
function parseTimelineCommand(command) {
    /** @type {?} */
    const separatorPos = command.indexOf(':');
    /** @type {?} */
    const id = command.substring(1, separatorPos);
    /** @type {?} */
    const action = command.substr(separatorPos + 1);
    return [id, action];
}
/** @type {?} */
let _contains = (/**
 * @param {?} elm1
 * @param {?} elm2
 * @return {?}
 */
(elm1, elm2) => false);
const ɵ0 = _contains;
/** @type {?} */
let _matches = (/**
 * @param {?} element
 * @param {?} selector
 * @return {?}
 */
(element, selector) => false);
const ɵ1 = _matches;
/** @type {?} */
let _query = (/**
 * @param {?} element
 * @param {?} selector
 * @param {?} multi
 * @return {?}
 */
(element, selector, multi) => {
    return [];
});
const ɵ2 = _query;
// Define utility methods for browsers and platform-server(domino) where Element
// and utility methods exist.
/** @type {?} */
const _isNode = isNode();
if (_isNode || typeof Element !== 'undefined') {
    // this is well supported in all browsers
    _contains = (/**
     * @param {?} elm1
     * @param {?} elm2
     * @return {?}
     */
    (elm1, elm2) => { return (/** @type {?} */ (elm1.contains(elm2))); });
    _matches = ((/**
     * @return {?}
     */
    () => {
        if (_isNode || Element.prototype.matches) {
            return (/**
             * @param {?} element
             * @param {?} selector
             * @return {?}
             */
            (element, selector) => element.matches(selector));
        }
        else {
            /** @type {?} */
            const proto = (/** @type {?} */ (Element.prototype));
            /** @type {?} */
            const fn = proto.matchesSelector || proto.mozMatchesSelector || proto.msMatchesSelector ||
                proto.oMatchesSelector || proto.webkitMatchesSelector;
            if (fn) {
                return (/**
                 * @param {?} element
                 * @param {?} selector
                 * @return {?}
                 */
                (element, selector) => fn.apply(element, [selector]));
            }
            else {
                return _matches;
            }
        }
    }))();
    _query = (/**
     * @param {?} element
     * @param {?} selector
     * @param {?} multi
     * @return {?}
     */
    (element, selector, multi) => {
        /** @type {?} */
        let results = [];
        if (multi) {
            results.push(...element.querySelectorAll(selector));
        }
        else {
            /** @type {?} */
            const elm = element.querySelector(selector);
            if (elm) {
                results.push(elm);
            }
        }
        return results;
    });
}
/**
 * @param {?} prop
 * @return {?}
 */
function containsVendorPrefix(prop) {
    // Webkit is the only real popular vendor prefix nowadays
    // cc: http://shouldiprefix.com/
    return prop.substring(1, 6) == 'ebkit'; // webkit or Webkit
}
/** @type {?} */
let _CACHED_BODY = null;
/** @type {?} */
let _IS_WEBKIT = false;
/**
 * @param {?} prop
 * @return {?}
 */
function validateStyleProperty(prop) {
    if (!_CACHED_BODY) {
        _CACHED_BODY = getBodyNode() || {};
        _IS_WEBKIT = (/** @type {?} */ (_CACHED_BODY)).style ? ('WebkitAppearance' in (/** @type {?} */ (_CACHED_BODY)).style) : false;
    }
    /** @type {?} */
    let result = true;
    if ((/** @type {?} */ (_CACHED_BODY)).style && !containsVendorPrefix(prop)) {
        result = prop in (/** @type {?} */ (_CACHED_BODY)).style;
        if (!result && _IS_WEBKIT) {
            /** @type {?} */
            const camelProp = 'Webkit' + prop.charAt(0).toUpperCase() + prop.substr(1);
            result = camelProp in (/** @type {?} */ (_CACHED_BODY)).style;
        }
    }
    return result;
}
/**
 * @return {?}
 */
function getBodyNode() {
    if (typeof document != 'undefined') {
        return document.body;
    }
    return null;
}
/** @type {?} */
const matchesElement = _matches;
/** @type {?} */
const containsElement = _contains;
/** @type {?} */
const invokeQuery = _query;
/**
 * @param {?} object
 * @return {?}
 */
function hypenatePropsObject(object) {
    /** @type {?} */
    const newObj = {};
    Object.keys(object).forEach((/**
     * @param {?} prop
     * @return {?}
     */
    prop => {
        /** @type {?} */
        const newProp = prop.replace(/([a-z])([A-Z])/g, '$1-$2');
        newObj[newProp] = object[prop];
    }));
    return newObj;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/animation_driver.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@publicApi
 */
class NoopAnimationDriver {
    /**
     * @param {?} prop
     * @return {?}
     */
    validateStyleProperty(prop) { return validateStyleProperty(prop); }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    matchesElement(element, selector) {
        return matchesElement(element, selector);
    }
    /**
     * @param {?} elm1
     * @param {?} elm2
     * @return {?}
     */
    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }
    /**
     * @param {?} element
     * @param {?} selector
     * @param {?} multi
     * @return {?}
     */
    query(element, selector, multi) {
        return invokeQuery(element, selector, multi);
    }
    /**
     * @param {?} element
     * @param {?} prop
     * @param {?=} defaultValue
     * @return {?}
     */
    computeStyle(element, prop, defaultValue) {
        return defaultValue || '';
    }
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @param {?=} scrubberAccessRequested
     * @return {?}
     */
    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {
        return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"](duration, delay);
    }
}
NoopAnimationDriver.ɵfac = function NoopAnimationDriver_Factory(t) { return new (t || NoopAnimationDriver)(); };
NoopAnimationDriver.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: NoopAnimationDriver, factory: NoopAnimationDriver.ɵfac });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](NoopAnimationDriver, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], null, null); })();
/**
 * \@publicApi
 * @abstract
 */
class AnimationDriver {
}
AnimationDriver.NOOP = new NoopAnimationDriver();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ONE_SECOND = 1000;
/** @type {?} */
const SUBSTITUTION_EXPR_START = '{{';
/** @type {?} */
const SUBSTITUTION_EXPR_END = '}}';
/** @type {?} */
const ENTER_CLASSNAME = 'ng-enter';
/** @type {?} */
const LEAVE_CLASSNAME = 'ng-leave';
/** @type {?} */
const ENTER_SELECTOR = '.ng-enter';
/** @type {?} */
const LEAVE_SELECTOR = '.ng-leave';
/** @type {?} */
const NG_TRIGGER_CLASSNAME = 'ng-trigger';
/** @type {?} */
const NG_TRIGGER_SELECTOR = '.ng-trigger';
/** @type {?} */
const NG_ANIMATING_CLASSNAME = 'ng-animating';
/** @type {?} */
const NG_ANIMATING_SELECTOR = '.ng-animating';
/**
 * @param {?} value
 * @return {?}
 */
function resolveTimingValue(value) {
    if (typeof value == 'number')
        return value;
    /** @type {?} */
    const matches = value.match(/^(-?[\.\d]+)(m?s)/);
    if (!matches || matches.length < 2)
        return 0;
    return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
}
/**
 * @param {?} value
 * @param {?} unit
 * @return {?}
 */
function _convertTimeValueToMS(value, unit) {
    switch (unit) {
        case 's':
            return value * ONE_SECOND;
        default: // ms or something else
            return value;
    }
}
/**
 * @param {?} timings
 * @param {?} errors
 * @param {?=} allowNegativeValues
 * @return {?}
 */
function resolveTiming(timings, errors, allowNegativeValues) {
    return timings.hasOwnProperty('duration') ?
        (/** @type {?} */ (timings)) :
        parseTimeExpression((/** @type {?} */ (timings)), errors, allowNegativeValues);
}
/**
 * @param {?} exp
 * @param {?} errors
 * @param {?=} allowNegativeValues
 * @return {?}
 */
function parseTimeExpression(exp, errors, allowNegativeValues) {
    /** @type {?} */
    const regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
    /** @type {?} */
    let duration;
    /** @type {?} */
    let delay = 0;
    /** @type {?} */
    let easing = '';
    if (typeof exp === 'string') {
        /** @type {?} */
        const matches = exp.match(regex);
        if (matches === null) {
            errors.push(`The provided timing value "${exp}" is invalid.`);
            return { duration: 0, delay: 0, easing: '' };
        }
        duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
        /** @type {?} */
        const delayMatch = matches[3];
        if (delayMatch != null) {
            delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
        }
        /** @type {?} */
        const easingVal = matches[5];
        if (easingVal) {
            easing = easingVal;
        }
    }
    else {
        duration = exp;
    }
    if (!allowNegativeValues) {
        /** @type {?} */
        let containsErrors = false;
        /** @type {?} */
        let startIndex = errors.length;
        if (duration < 0) {
            errors.push(`Duration values below 0 are not allowed for this animation step.`);
            containsErrors = true;
        }
        if (delay < 0) {
            errors.push(`Delay values below 0 are not allowed for this animation step.`);
            containsErrors = true;
        }
        if (containsErrors) {
            errors.splice(startIndex, 0, `The provided timing value "${exp}" is invalid.`);
        }
    }
    return { duration, delay, easing };
}
/**
 * @param {?} obj
 * @param {?=} destination
 * @return {?}
 */
function copyObj(obj, destination = {}) {
    Object.keys(obj).forEach((/**
     * @param {?} prop
     * @return {?}
     */
    prop => { destination[prop] = obj[prop]; }));
    return destination;
}
/**
 * @param {?} styles
 * @return {?}
 */
function normalizeStyles(styles) {
    /** @type {?} */
    const normalizedStyles = {};
    if (Array.isArray(styles)) {
        styles.forEach((/**
         * @param {?} data
         * @return {?}
         */
        data => copyStyles(data, false, normalizedStyles)));
    }
    else {
        copyStyles(styles, false, normalizedStyles);
    }
    return normalizedStyles;
}
/**
 * @param {?} styles
 * @param {?} readPrototype
 * @param {?=} destination
 * @return {?}
 */
function copyStyles(styles, readPrototype, destination = {}) {
    if (readPrototype) {
        // we make use of a for-in loop so that the
        // prototypically inherited properties are
        // revealed from the backFill map
        for (let prop in styles) {
            destination[prop] = styles[prop];
        }
    }
    else {
        copyObj(styles, destination);
    }
    return destination;
}
/**
 * @param {?} element
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function getStyleAttributeString(element, key, value) {
    // Return the key-value pair string to be added to the style attribute for the
    // given CSS style key.
    if (value) {
        return key + ':' + value + ';';
    }
    else {
        return '';
    }
}
/**
 * @param {?} element
 * @return {?}
 */
function writeStyleAttribute(element) {
    // Read the style property of the element and manually reflect it to the
    // style attribute. This is needed because Domino on platform-server doesn't
    // understand the full set of allowed CSS properties and doesn't reflect some
    // of them automatically.
    /** @type {?} */
    let styleAttrValue = '';
    for (let i = 0; i < element.style.length; i++) {
        /** @type {?} */
        const key = element.style.item(i);
        styleAttrValue += getStyleAttributeString(element, key, element.style.getPropertyValue(key));
    }
    for (const key in element.style) {
        // Skip internal Domino properties that don't need to be reflected.
        if (!element.style.hasOwnProperty(key) || key.startsWith('_')) {
            continue;
        }
        /** @type {?} */
        const dashKey = camelCaseToDashCase(key);
        styleAttrValue += getStyleAttributeString(element, dashKey, element.style[key]);
    }
    element.setAttribute('style', styleAttrValue);
}
/**
 * @param {?} element
 * @param {?} styles
 * @param {?=} formerStyles
 * @return {?}
 */
function setStyles(element, styles, formerStyles) {
    if (element['style']) {
        Object.keys(styles).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            const camelProp = dashCaseToCamelCase(prop);
            if (formerStyles && !formerStyles.hasOwnProperty(prop)) {
                formerStyles[prop] = element.style[camelProp];
            }
            element.style[camelProp] = styles[prop];
        }));
        // On the server set the 'style' attribute since it's not automatically reflected.
        if (isNode()) {
            writeStyleAttribute(element);
        }
    }
}
/**
 * @param {?} element
 * @param {?} styles
 * @return {?}
 */
function eraseStyles(element, styles) {
    if (element['style']) {
        Object.keys(styles).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            const camelProp = dashCaseToCamelCase(prop);
            element.style[camelProp] = '';
        }));
        // On the server set the 'style' attribute since it's not automatically reflected.
        if (isNode()) {
            writeStyleAttribute(element);
        }
    }
}
/**
 * @param {?} steps
 * @return {?}
 */
function normalizeAnimationEntry(steps) {
    if (Array.isArray(steps)) {
        if (steps.length == 1)
            return steps[0];
        return Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["sequence"])(steps);
    }
    return (/** @type {?} */ (steps));
}
/**
 * @param {?} value
 * @param {?} options
 * @param {?} errors
 * @return {?}
 */
function validateStyleParams(value, options, errors) {
    /** @type {?} */
    const params = options.params || {};
    /** @type {?} */
    const matches = extractStyleParams(value);
    if (matches.length) {
        matches.forEach((/**
         * @param {?} varName
         * @return {?}
         */
        varName => {
            if (!params.hasOwnProperty(varName)) {
                errors.push(`Unable to resolve the local animation param ${varName} in the given list of values`);
            }
        }));
    }
}
/** @type {?} */
const PARAM_REGEX = new RegExp(`${SUBSTITUTION_EXPR_START}\\s*(.+?)\\s*${SUBSTITUTION_EXPR_END}`, 'g');
/**
 * @param {?} value
 * @return {?}
 */
function extractStyleParams(value) {
    /** @type {?} */
    let params = [];
    if (typeof value === 'string') {
        /** @type {?} */
        let match;
        while (match = PARAM_REGEX.exec(value)) {
            params.push((/** @type {?} */ (match[1])));
        }
        PARAM_REGEX.lastIndex = 0;
    }
    return params;
}
/**
 * @param {?} value
 * @param {?} params
 * @param {?} errors
 * @return {?}
 */
function interpolateParams(value, params, errors) {
    /** @type {?} */
    const original = value.toString();
    /** @type {?} */
    const str = original.replace(PARAM_REGEX, (/**
     * @param {?} _
     * @param {?} varName
     * @return {?}
     */
    (_, varName) => {
        /** @type {?} */
        let localVal = params[varName];
        // this means that the value was never overridden by the data passed in by the user
        if (!params.hasOwnProperty(varName)) {
            errors.push(`Please provide a value for the animation param ${varName}`);
            localVal = '';
        }
        return localVal.toString();
    }));
    // we do this to assert that numeric values stay as they are
    return str == original ? value : str;
}
/**
 * @param {?} iterator
 * @return {?}
 */
function iteratorToArray(iterator) {
    /** @type {?} */
    const arr = [];
    /** @type {?} */
    let item = iterator.next();
    while (!item.done) {
        arr.push(item.value);
        item = iterator.next();
    }
    return arr;
}
/**
 * @param {?} source
 * @param {?} destination
 * @return {?}
 */
function mergeAnimationOptions(source, destination) {
    if (source.params) {
        /** @type {?} */
        const p0 = source.params;
        if (!destination.params) {
            destination.params = {};
        }
        /** @type {?} */
        const p1 = destination.params;
        Object.keys(p0).forEach((/**
         * @param {?} param
         * @return {?}
         */
        param => {
            if (!p1.hasOwnProperty(param)) {
                p1[param] = p0[param];
            }
        }));
    }
    return destination;
}
/** @type {?} */
const DASH_CASE_REGEXP = /-+([a-z0-9])/g;
/**
 * @param {?} input
 * @return {?}
 */
function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, (/**
     * @param {...?} m
     * @return {?}
     */
    (...m) => m[1].toUpperCase()));
}
/**
 * @param {?} input
 * @return {?}
 */
function camelCaseToDashCase(input) {
    return input.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
}
/**
 * @param {?} duration
 * @param {?} delay
 * @return {?}
 */
function allowPreviousPlayerStylesMerge(duration, delay) {
    return duration === 0 || delay === 0;
}
/**
 * @param {?} element
 * @param {?} keyframes
 * @param {?} previousStyles
 * @return {?}
 */
function balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {
    /** @type {?} */
    const previousStyleProps = Object.keys(previousStyles);
    if (previousStyleProps.length && keyframes.length) {
        /** @type {?} */
        let startingKeyframe = keyframes[0];
        /** @type {?} */
        let missingStyleProps = [];
        previousStyleProps.forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            if (!startingKeyframe.hasOwnProperty(prop)) {
                missingStyleProps.push(prop);
            }
            startingKeyframe[prop] = previousStyles[prop];
        }));
        if (missingStyleProps.length) {
            // tslint:disable-next-line
            for (var i = 1; i < keyframes.length; i++) {
                /** @type {?} */
                let kf = keyframes[i];
                missingStyleProps.forEach((/**
                 * @param {?} prop
                 * @return {?}
                 */
                function (prop) { kf[prop] = computeStyle(element, prop); }));
            }
        }
    }
    return keyframes;
}
/**
 * @param {?} visitor
 * @param {?} node
 * @param {?} context
 * @return {?}
 */
function visitDslNode(visitor, node, context) {
    switch (node.type) {
        case 7 /* Trigger */:
            return visitor.visitTrigger(node, context);
        case 0 /* State */:
            return visitor.visitState(node, context);
        case 1 /* Transition */:
            return visitor.visitTransition(node, context);
        case 2 /* Sequence */:
            return visitor.visitSequence(node, context);
        case 3 /* Group */:
            return visitor.visitGroup(node, context);
        case 4 /* Animate */:
            return visitor.visitAnimate(node, context);
        case 5 /* Keyframes */:
            return visitor.visitKeyframes(node, context);
        case 6 /* Style */:
            return visitor.visitStyle(node, context);
        case 8 /* Reference */:
            return visitor.visitReference(node, context);
        case 9 /* AnimateChild */:
            return visitor.visitAnimateChild(node, context);
        case 10 /* AnimateRef */:
            return visitor.visitAnimateRef(node, context);
        case 11 /* Query */:
            return visitor.visitQuery(node, context);
        case 12 /* Stagger */:
            return visitor.visitStagger(node, context);
        default:
            throw new Error(`Unable to resolve animation metadata node #${node.type}`);
    }
}
/**
 * @param {?} element
 * @param {?} prop
 * @return {?}
 */
function computeStyle(element, prop) {
    return ((/** @type {?} */ (window.getComputedStyle(element))))[prop];
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/animation_transition_expr.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @type {?}
 */
const ANY_STATE = '*';
/**
 * @param {?} transitionValue
 * @param {?} errors
 * @return {?}
 */
function parseTransitionExpr(transitionValue, errors) {
    /** @type {?} */
    const expressions = [];
    if (typeof transitionValue == 'string') {
        transitionValue.split(/\s*,\s*/).forEach((/**
         * @param {?} str
         * @return {?}
         */
        str => parseInnerTransitionStr(str, expressions, errors)));
    }
    else {
        expressions.push((/** @type {?} */ (transitionValue)));
    }
    return expressions;
}
/**
 * @param {?} eventStr
 * @param {?} expressions
 * @param {?} errors
 * @return {?}
 */
function parseInnerTransitionStr(eventStr, expressions, errors) {
    if (eventStr[0] == ':') {
        /** @type {?} */
        const result = parseAnimationAlias(eventStr, errors);
        if (typeof result == 'function') {
            expressions.push(result);
            return;
        }
        eventStr = result;
    }
    /** @type {?} */
    const match = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
    if (match == null || match.length < 4) {
        errors.push(`The provided transition expression "${eventStr}" is not supported`);
        return expressions;
    }
    /** @type {?} */
    const fromState = match[1];
    /** @type {?} */
    const separator = match[2];
    /** @type {?} */
    const toState = match[3];
    expressions.push(makeLambdaFromStates(fromState, toState));
    /** @type {?} */
    const isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
    if (separator[0] == '<' && !isFullAnyStateExpr) {
        expressions.push(makeLambdaFromStates(toState, fromState));
    }
}
/**
 * @param {?} alias
 * @param {?} errors
 * @return {?}
 */
function parseAnimationAlias(alias, errors) {
    switch (alias) {
        case ':enter':
            return 'void => *';
        case ':leave':
            return '* => void';
        case ':increment':
            return (/**
             * @param {?} fromState
             * @param {?} toState
             * @return {?}
             */
            (fromState, toState) => parseFloat(toState) > parseFloat(fromState));
        case ':decrement':
            return (/**
             * @param {?} fromState
             * @param {?} toState
             * @return {?}
             */
            (fromState, toState) => parseFloat(toState) < parseFloat(fromState));
        default:
            errors.push(`The transition alias value "${alias}" is not supported`);
            return '* => *';
    }
}
// DO NOT REFACTOR ... keep the follow set instantiations
// with the values intact (closure compiler for some reason
// removes follow-up lines that add the values outside of
// the constructor...
/** @type {?} */
const TRUE_BOOLEAN_VALUES = new Set(['true', '1']);
/** @type {?} */
const FALSE_BOOLEAN_VALUES = new Set(['false', '0']);
/**
 * @param {?} lhs
 * @param {?} rhs
 * @return {?}
 */
function makeLambdaFromStates(lhs, rhs) {
    /** @type {?} */
    const LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
    /** @type {?} */
    const RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
    return (/**
     * @param {?} fromState
     * @param {?} toState
     * @return {?}
     */
    (fromState, toState) => {
        /** @type {?} */
        let lhsMatch = lhs == ANY_STATE || lhs == fromState;
        /** @type {?} */
        let rhsMatch = rhs == ANY_STATE || rhs == toState;
        if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === 'boolean') {
            lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
        }
        if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === 'boolean') {
            rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
        }
        return lhsMatch && rhsMatch;
    });
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/animation_ast_builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const SELF_TOKEN = ':self';
/** @type {?} */
const SELF_TOKEN_REGEX = new RegExp(`\s*${SELF_TOKEN}\s*,?`, 'g');
/*
 * [Validation]
 * The visitor code below will traverse the animation AST generated by the animation verb functions
 * (the output is a tree of objects) and attempt to perform a series of validations on the data. The
 * following corner-cases will be validated:
 *
 * 1. Overlap of animations
 * Given that a CSS property cannot be animated in more than one place at the same time, it's
 * important that this behavior is detected and validated. The way in which this occurs is that
 * each time a style property is examined, a string-map containing the property will be updated with
 * the start and end times for when the property is used within an animation step.
 *
 * If there are two or more parallel animations that are currently running (these are invoked by the
 * group()) on the same element then the validator will throw an error. Since the start/end timing
 * values are collected for each property then if the current animation step is animating the same
 * property and its timing values fall anywhere into the window of time that the property is
 * currently being animated within then this is what causes an error.
 *
 * 2. Timing values
 * The validator will validate to see if a timing value of `duration delay easing` or
 * `durationNumber` is valid or not.
 *
 * (note that upon validation the code below will replace the timing data with an object containing
 * {duration,delay,easing}.
 *
 * 3. Offset Validation
 * Each of the style() calls are allowed to have an offset value when placed inside of keyframes().
 * Offsets within keyframes() are considered valid when:
 *
 *   - No offsets are used at all
 *   - Each style() entry contains an offset value
 *   - Each offset is between 0 and 1
 *   - Each offset is greater to or equal than the previous one
 *
 * Otherwise an error will be thrown.
 */
/**
 * @param {?} driver
 * @param {?} metadata
 * @param {?} errors
 * @return {?}
 */
function buildAnimationAst(driver, metadata, errors) {
    return new AnimationAstBuilderVisitor(driver).build(metadata, errors);
}
/** @type {?} */
const ROOT_SELECTOR = '';
class AnimationAstBuilderVisitor {
    /**
     * @param {?} _driver
     */
    constructor(_driver) {
        this._driver = _driver;
    }
    /**
     * @param {?} metadata
     * @param {?} errors
     * @return {?}
     */
    build(metadata, errors) {
        /** @type {?} */
        const context = new AnimationAstBuilderContext(errors);
        this._resetContextStyleTimingState(context);
        return (/** @type {?} */ (visitDslNode(this, normalizeAnimationEntry(metadata), context)));
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    _resetContextStyleTimingState(context) {
        context.currentQuerySelector = ROOT_SELECTOR;
        context.collectedStyles = {};
        context.collectedStyles[ROOT_SELECTOR] = {};
        context.currentTime = 0;
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitTrigger(metadata, context) {
        /** @type {?} */
        let queryCount = context.queryCount = 0;
        /** @type {?} */
        let depCount = context.depCount = 0;
        /** @type {?} */
        const states = [];
        /** @type {?} */
        const transitions = [];
        if (metadata.name.charAt(0) == '@') {
            context.errors.push('animation triggers cannot be prefixed with an `@` sign (e.g. trigger(\'@foo\', [...]))');
        }
        metadata.definitions.forEach((/**
         * @param {?} def
         * @return {?}
         */
        def => {
            this._resetContextStyleTimingState(context);
            if (def.type == 0 /* State */) {
                /** @type {?} */
                const stateDef = (/** @type {?} */ (def));
                /** @type {?} */
                const name = stateDef.name;
                name.toString().split(/\s*,\s*/).forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    stateDef.name = n;
                    states.push(this.visitState(stateDef, context));
                }));
                stateDef.name = name;
            }
            else if (def.type == 1 /* Transition */) {
                /** @type {?} */
                const transition = this.visitTransition((/** @type {?} */ (def)), context);
                queryCount += transition.queryCount;
                depCount += transition.depCount;
                transitions.push(transition);
            }
            else {
                context.errors.push('only state() and transition() definitions can sit inside of a trigger()');
            }
        }));
        return {
            type: 7 /* Trigger */,
            name: metadata.name, states, transitions, queryCount, depCount,
            options: null
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitState(metadata, context) {
        /** @type {?} */
        const styleAst = this.visitStyle(metadata.styles, context);
        /** @type {?} */
        const astParams = (metadata.options && metadata.options.params) || null;
        if (styleAst.containsDynamicStyles) {
            /** @type {?} */
            const missingSubs = new Set();
            /** @type {?} */
            const params = astParams || {};
            styleAst.styles.forEach((/**
             * @param {?} value
             * @return {?}
             */
            value => {
                if (isObject(value)) {
                    /** @type {?} */
                    const stylesObj = (/** @type {?} */ (value));
                    Object.keys(stylesObj).forEach((/**
                     * @param {?} prop
                     * @return {?}
                     */
                    prop => {
                        extractStyleParams(stylesObj[prop]).forEach((/**
                         * @param {?} sub
                         * @return {?}
                         */
                        sub => {
                            if (!params.hasOwnProperty(sub)) {
                                missingSubs.add(sub);
                            }
                        }));
                    }));
                }
            }));
            if (missingSubs.size) {
                /** @type {?} */
                const missingSubsArr = iteratorToArray(missingSubs.values());
                context.errors.push(`state("${metadata.name}", ...) must define default values for all the following style substitutions: ${missingSubsArr.join(', ')}`);
            }
        }
        return {
            type: 0 /* State */,
            name: metadata.name,
            style: styleAst,
            options: astParams ? { params: astParams } : null
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitTransition(metadata, context) {
        context.queryCount = 0;
        context.depCount = 0;
        /** @type {?} */
        const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
        /** @type {?} */
        const matchers = parseTransitionExpr(metadata.expr, context.errors);
        return {
            type: 1 /* Transition */,
            matchers,
            animation,
            queryCount: context.queryCount,
            depCount: context.depCount,
            options: normalizeAnimationOptions(metadata.options)
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitSequence(metadata, context) {
        return {
            type: 2 /* Sequence */,
            steps: metadata.steps.map((/**
             * @param {?} s
             * @return {?}
             */
            s => visitDslNode(this, s, context))),
            options: normalizeAnimationOptions(metadata.options)
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitGroup(metadata, context) {
        /** @type {?} */
        const currentTime = context.currentTime;
        /** @type {?} */
        let furthestTime = 0;
        /** @type {?} */
        const steps = metadata.steps.map((/**
         * @param {?} step
         * @return {?}
         */
        step => {
            context.currentTime = currentTime;
            /** @type {?} */
            const innerAst = visitDslNode(this, step, context);
            furthestTime = Math.max(furthestTime, context.currentTime);
            return innerAst;
        }));
        context.currentTime = furthestTime;
        return {
            type: 3 /* Group */,
            steps,
            options: normalizeAnimationOptions(metadata.options)
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitAnimate(metadata, context) {
        /** @type {?} */
        const timingAst = constructTimingAst(metadata.timings, context.errors);
        context.currentAnimateTimings = timingAst;
        /** @type {?} */
        let styleAst;
        /** @type {?} */
        let styleMetadata = metadata.styles ? metadata.styles : Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])({});
        if (styleMetadata.type == 5 /* Keyframes */) {
            styleAst = this.visitKeyframes((/** @type {?} */ (styleMetadata)), context);
        }
        else {
            /** @type {?} */
            let styleMetadata = (/** @type {?} */ (metadata.styles));
            /** @type {?} */
            let isEmpty = false;
            if (!styleMetadata) {
                isEmpty = true;
                /** @type {?} */
                const newStyleData = {};
                if (timingAst.easing) {
                    newStyleData['easing'] = timingAst.easing;
                }
                styleMetadata = Object(_angular_animations__WEBPACK_IMPORTED_MODULE_0__["style"])(newStyleData);
            }
            context.currentTime += timingAst.duration + timingAst.delay;
            /** @type {?} */
            const _styleAst = this.visitStyle(styleMetadata, context);
            _styleAst.isEmptyStep = isEmpty;
            styleAst = _styleAst;
        }
        context.currentAnimateTimings = null;
        return {
            type: 4 /* Animate */,
            timings: timingAst,
            style: styleAst,
            options: null
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitStyle(metadata, context) {
        /** @type {?} */
        const ast = this._makeStyleAst(metadata, context);
        this._validateStyleAst(ast, context);
        return ast;
    }
    /**
     * @private
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    _makeStyleAst(metadata, context) {
        /** @type {?} */
        const styles = [];
        if (Array.isArray(metadata.styles)) {
            ((/** @type {?} */ (metadata.styles))).forEach((/**
             * @param {?} styleTuple
             * @return {?}
             */
            styleTuple => {
                if (typeof styleTuple == 'string') {
                    if (styleTuple == _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]) {
                        styles.push(styleTuple);
                    }
                    else {
                        context.errors.push(`The provided style string value ${styleTuple} is not allowed.`);
                    }
                }
                else {
                    styles.push(styleTuple);
                }
            }));
        }
        else {
            styles.push(metadata.styles);
        }
        /** @type {?} */
        let containsDynamicStyles = false;
        /** @type {?} */
        let collectedEasing = null;
        styles.forEach((/**
         * @param {?} styleData
         * @return {?}
         */
        styleData => {
            if (isObject(styleData)) {
                /** @type {?} */
                const styleMap = (/** @type {?} */ (styleData));
                /** @type {?} */
                const easing = styleMap['easing'];
                if (easing) {
                    collectedEasing = (/** @type {?} */ (easing));
                    delete styleMap['easing'];
                }
                if (!containsDynamicStyles) {
                    for (let prop in styleMap) {
                        /** @type {?} */
                        const value = styleMap[prop];
                        if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
                            containsDynamicStyles = true;
                            break;
                        }
                    }
                }
            }
        }));
        return {
            type: 6 /* Style */,
            styles,
            easing: collectedEasing,
            offset: metadata.offset, containsDynamicStyles,
            options: null
        };
    }
    /**
     * @private
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    _validateStyleAst(ast, context) {
        /** @type {?} */
        const timings = context.currentAnimateTimings;
        /** @type {?} */
        let endTime = context.currentTime;
        /** @type {?} */
        let startTime = context.currentTime;
        if (timings && startTime > 0) {
            startTime -= timings.duration + timings.delay;
        }
        ast.styles.forEach((/**
         * @param {?} tuple
         * @return {?}
         */
        tuple => {
            if (typeof tuple == 'string')
                return;
            Object.keys(tuple).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                if (!this._driver.validateStyleProperty(prop)) {
                    context.errors.push(`The provided animation property "${prop}" is not a supported CSS property for animations`);
                    return;
                }
                /** @type {?} */
                const collectedStyles = context.collectedStyles[(/** @type {?} */ (context.currentQuerySelector))];
                /** @type {?} */
                const collectedEntry = collectedStyles[prop];
                /** @type {?} */
                let updateCollectedStyle = true;
                if (collectedEntry) {
                    if (startTime != endTime && startTime >= collectedEntry.startTime &&
                        endTime <= collectedEntry.endTime) {
                        context.errors.push(`The CSS property "${prop}" that exists between the times of "${collectedEntry.startTime}ms" and "${collectedEntry.endTime}ms" is also being animated in a parallel animation between the times of "${startTime}ms" and "${endTime}ms"`);
                        updateCollectedStyle = false;
                    }
                    // we always choose the smaller start time value since we
                    // want to have a record of the entire animation window where
                    // the style property is being animated in between
                    startTime = collectedEntry.startTime;
                }
                if (updateCollectedStyle) {
                    collectedStyles[prop] = { startTime, endTime };
                }
                if (context.options) {
                    validateStyleParams(tuple[prop], context.options, context.errors);
                }
            }));
        }));
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitKeyframes(metadata, context) {
        /** @type {?} */
        const ast = { type: 5 /* Keyframes */, styles: [], options: null };
        if (!context.currentAnimateTimings) {
            context.errors.push(`keyframes() must be placed inside of a call to animate()`);
            return ast;
        }
        /** @type {?} */
        const MAX_KEYFRAME_OFFSET = 1;
        /** @type {?} */
        let totalKeyframesWithOffsets = 0;
        /** @type {?} */
        const offsets = [];
        /** @type {?} */
        let offsetsOutOfOrder = false;
        /** @type {?} */
        let keyframesOutOfRange = false;
        /** @type {?} */
        let previousOffset = 0;
        /** @type {?} */
        const keyframes = metadata.steps.map((/**
         * @param {?} styles
         * @return {?}
         */
        styles => {
            /** @type {?} */
            const style = this._makeStyleAst(styles, context);
            /** @type {?} */
            let offsetVal = style.offset != null ? style.offset : consumeOffset(style.styles);
            /** @type {?} */
            let offset = 0;
            if (offsetVal != null) {
                totalKeyframesWithOffsets++;
                offset = style.offset = offsetVal;
            }
            keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
            offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
            previousOffset = offset;
            offsets.push(offset);
            return style;
        }));
        if (keyframesOutOfRange) {
            context.errors.push(`Please ensure that all keyframe offsets are between 0 and 1`);
        }
        if (offsetsOutOfOrder) {
            context.errors.push(`Please ensure that all keyframe offsets are in order`);
        }
        /** @type {?} */
        const length = metadata.steps.length;
        /** @type {?} */
        let generatedOffset = 0;
        if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
            context.errors.push(`Not all style() steps within the declared keyframes() contain offsets`);
        }
        else if (totalKeyframesWithOffsets == 0) {
            generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
        }
        /** @type {?} */
        const limit = length - 1;
        /** @type {?} */
        const currentTime = context.currentTime;
        /** @type {?} */
        const currentAnimateTimings = (/** @type {?} */ (context.currentAnimateTimings));
        /** @type {?} */
        const animateDuration = currentAnimateTimings.duration;
        keyframes.forEach((/**
         * @param {?} kf
         * @param {?} i
         * @return {?}
         */
        (kf, i) => {
            /** @type {?} */
            const offset = generatedOffset > 0 ? (i == limit ? 1 : (generatedOffset * i)) : offsets[i];
            /** @type {?} */
            const durationUpToThisFrame = offset * animateDuration;
            context.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
            currentAnimateTimings.duration = durationUpToThisFrame;
            this._validateStyleAst(kf, context);
            kf.offset = offset;
            ast.styles.push(kf);
        }));
        return ast;
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitReference(metadata, context) {
        return {
            type: 8 /* Reference */,
            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context),
            options: normalizeAnimationOptions(metadata.options)
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitAnimateChild(metadata, context) {
        context.depCount++;
        return {
            type: 9 /* AnimateChild */,
            options: normalizeAnimationOptions(metadata.options)
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitAnimateRef(metadata, context) {
        return {
            type: 10 /* AnimateRef */,
            animation: this.visitReference(metadata.animation, context),
            options: normalizeAnimationOptions(metadata.options)
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitQuery(metadata, context) {
        /** @type {?} */
        const parentSelector = (/** @type {?} */ (context.currentQuerySelector));
        /** @type {?} */
        const options = (/** @type {?} */ ((metadata.options || {})));
        context.queryCount++;
        context.currentQuery = metadata;
        const [selector, includeSelf] = normalizeSelector(metadata.selector);
        context.currentQuerySelector =
            parentSelector.length ? (parentSelector + ' ' + selector) : selector;
        getOrSetAsInMap(context.collectedStyles, context.currentQuerySelector, {});
        /** @type {?} */
        const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context);
        context.currentQuery = null;
        context.currentQuerySelector = parentSelector;
        return {
            type: 11 /* Query */,
            selector,
            limit: options.limit || 0,
            optional: !!options.optional, includeSelf, animation,
            originalSelector: metadata.selector,
            options: normalizeAnimationOptions(metadata.options)
        };
    }
    /**
     * @param {?} metadata
     * @param {?} context
     * @return {?}
     */
    visitStagger(metadata, context) {
        if (!context.currentQuery) {
            context.errors.push(`stagger() can only be used inside of query()`);
        }
        /** @type {?} */
        const timings = metadata.timings === 'full' ?
            { duration: 0, delay: 0, easing: 'full' } :
            resolveTiming(metadata.timings, context.errors, true);
        return {
            type: 12 /* Stagger */,
            animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context), timings,
            options: null
        };
    }
}
if (false) {}
/**
 * @param {?} selector
 * @return {?}
 */
function normalizeSelector(selector) {
    /** @type {?} */
    const hasAmpersand = selector.split(/\s*,\s*/).find((/**
     * @param {?} token
     * @return {?}
     */
    token => token == SELF_TOKEN)) ? true : false;
    if (hasAmpersand) {
        selector = selector.replace(SELF_TOKEN_REGEX, '');
    }
    // the :enter and :leave selectors are filled in at runtime during timeline building
    selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR)
        .replace(/@\w+/g, (/**
     * @param {?} match
     * @return {?}
     */
    match => NG_TRIGGER_SELECTOR + '-' + match.substr(1)))
        .replace(/:animating/g, NG_ANIMATING_SELECTOR);
    return [selector, hasAmpersand];
}
/**
 * @param {?} obj
 * @return {?}
 */
function normalizeParams(obj) {
    return obj ? copyObj(obj) : null;
}
class AnimationAstBuilderContext {
    /**
     * @param {?} errors
     */
    constructor(errors) {
        this.errors = errors;
        this.queryCount = 0;
        this.depCount = 0;
        this.currentTransition = null;
        this.currentQuery = null;
        this.currentQuerySelector = null;
        this.currentAnimateTimings = null;
        this.currentTime = 0;
        this.collectedStyles = {};
        this.options = null;
    }
}
if (false) {}
/**
 * @param {?} styles
 * @return {?}
 */
function consumeOffset(styles) {
    if (typeof styles == 'string')
        return null;
    /** @type {?} */
    let offset = null;
    if (Array.isArray(styles)) {
        styles.forEach((/**
         * @param {?} styleTuple
         * @return {?}
         */
        styleTuple => {
            if (isObject(styleTuple) && styleTuple.hasOwnProperty('offset')) {
                /** @type {?} */
                const obj = (/** @type {?} */ (styleTuple));
                offset = parseFloat((/** @type {?} */ (obj['offset'])));
                delete obj['offset'];
            }
        }));
    }
    else if (isObject(styles) && styles.hasOwnProperty('offset')) {
        /** @type {?} */
        const obj = styles;
        offset = parseFloat((/** @type {?} */ (obj['offset'])));
        delete obj['offset'];
    }
    return offset;
}
/**
 * @param {?} value
 * @return {?}
 */
function isObject(value) {
    return !Array.isArray(value) && typeof value == 'object';
}
/**
 * @param {?} value
 * @param {?} errors
 * @return {?}
 */
function constructTimingAst(value, errors) {
    /** @type {?} */
    let timings = null;
    if (value.hasOwnProperty('duration')) {
        timings = (/** @type {?} */ (value));
    }
    else if (typeof value == 'number') {
        /** @type {?} */
        const duration = resolveTiming(value, errors).duration;
        return makeTimingAst(duration, 0, '');
    }
    /** @type {?} */
    const strValue = (/** @type {?} */ (value));
    /** @type {?} */
    const isDynamic = strValue.split(/\s+/).some((/**
     * @param {?} v
     * @return {?}
     */
    v => v.charAt(0) == '{' && v.charAt(1) == '{'));
    if (isDynamic) {
        /** @type {?} */
        const ast = (/** @type {?} */ (makeTimingAst(0, 0, '')));
        ast.dynamic = true;
        ast.strValue = strValue;
        return (/** @type {?} */ (ast));
    }
    timings = timings || resolveTiming(strValue, errors);
    return makeTimingAst(timings.duration, timings.delay, timings.easing);
}
/**
 * @param {?} options
 * @return {?}
 */
function normalizeAnimationOptions(options) {
    if (options) {
        options = copyObj(options);
        if (options['params']) {
            options['params'] = (/** @type {?} */ (normalizeParams(options['params'])));
        }
    }
    else {
        options = {};
    }
    return options;
}
/**
 * @param {?} duration
 * @param {?} delay
 * @param {?} easing
 * @return {?}
 */
function makeTimingAst(duration, delay, easing) {
    return { duration, delay, easing };
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/animation_timeline_instruction.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function AnimationTimelineInstruction() { }
if (false) {}
/**
 * @param {?} element
 * @param {?} keyframes
 * @param {?} preStyleProps
 * @param {?} postStyleProps
 * @param {?} duration
 * @param {?} delay
 * @param {?=} easing
 * @param {?=} subTimeline
 * @return {?}
 */
function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing = null, subTimeline = false) {
    return {
        type: 1 /* TimelineAnimation */,
        element,
        keyframes,
        preStyleProps,
        postStyleProps,
        duration,
        delay,
        totalTime: duration + delay, easing, subTimeline
    };
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/element_instruction_map.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ElementInstructionMap {
    constructor() {
        this._map = new Map();
    }
    /**
     * @param {?} element
     * @return {?}
     */
    consume(element) {
        /** @type {?} */
        let instructions = this._map.get(element);
        if (instructions) {
            this._map.delete(element);
        }
        else {
            instructions = [];
        }
        return instructions;
    }
    /**
     * @param {?} element
     * @param {?} instructions
     * @return {?}
     */
    append(element, instructions) {
        /** @type {?} */
        let existingInstructions = this._map.get(element);
        if (!existingInstructions) {
            this._map.set(element, existingInstructions = []);
        }
        existingInstructions.push(...instructions);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    has(element) { return this._map.has(element); }
    /**
     * @return {?}
     */
    clear() { this._map.clear(); }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/animation_timeline_builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ONE_FRAME_IN_MILLISECONDS = 1;
/** @type {?} */
const ENTER_TOKEN = ':enter';
/** @type {?} */
const ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, 'g');
/** @type {?} */
const LEAVE_TOKEN = ':leave';
/** @type {?} */
const LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, 'g');
/*
 * The code within this file aims to generate web-animations-compatible keyframes from Angular's
 * animation DSL code.
 *
 * The code below will be converted from:
 *
 * ```
 * sequence([
 *   style({ opacity: 0 }),
 *   animate(1000, style({ opacity: 0 }))
 * ])
 * ```
 *
 * To:
 * ```
 * keyframes = [{ opacity: 0, offset: 0 }, { opacity: 1, offset: 1 }]
 * duration = 1000
 * delay = 0
 * easing = ''
 * ```
 *
 * For this operation to cover the combination of animation verbs (style, animate, group, etc...) a
 * combination of prototypical inheritance, AST traversal and merge-sort-like algorithms are used.
 *
 * [AST Traversal]
 * Each of the animation verbs, when executed, will return an string-map object representing what
 * type of action it is (style, animate, group, etc...) and the data associated with it. This means
 * that when functional composition mix of these functions is evaluated (like in the example above)
 * then it will end up producing a tree of objects representing the animation itself.
 *
 * When this animation object tree is processed by the visitor code below it will visit each of the
 * verb statements within the visitor. And during each visit it will build the context of the
 * animation keyframes by interacting with the `TimelineBuilder`.
 *
 * [TimelineBuilder]
 * This class is responsible for tracking the styles and building a series of keyframe objects for a
 * timeline between a start and end time. The builder starts off with an initial timeline and each
 * time the AST comes across a `group()`, `keyframes()` or a combination of the two wihtin a
 * `sequence()` then it will generate a sub timeline for each step as well as a new one after
 * they are complete.
 *
 * As the AST is traversed, the timing state on each of the timelines will be incremented. If a sub
 * timeline was created (based on one of the cases above) then the parent timeline will attempt to
 * merge the styles used within the sub timelines into itself (only with group() this will happen).
 * This happens with a merge operation (much like how the merge works in mergesort) and it will only
 * copy the most recently used styles from the sub timelines into the parent timeline. This ensures
 * that if the styles are used later on in another phase of the animation then they will be the most
 * up-to-date values.
 *
 * [How Missing Styles Are Updated]
 * Each timeline has a `backFill` property which is responsible for filling in new styles into
 * already processed keyframes if a new style shows up later within the animation sequence.
 *
 * ```
 * sequence([
 *   style({ width: 0 }),
 *   animate(1000, style({ width: 100 })),
 *   animate(1000, style({ width: 200 })),
 *   animate(1000, style({ width: 300 }))
 *   animate(1000, style({ width: 400, height: 400 })) // notice how `height` doesn't exist anywhere
 * else
 * ])
 * ```
 *
 * What is happening here is that the `height` value is added later in the sequence, but is missing
 * from all previous animation steps. Therefore when a keyframe is created it would also be missing
 * from all previous keyframes up until where it is first used. For the timeline keyframe generation
 * to properly fill in the style it will place the previous value (the value from the parent
 * timeline) or a default value of `*` into the backFill object. Given that each of the keyframe
 * styles are objects that prototypically inhert from the backFill object, this means that if a
 * value is added into the backFill then it will automatically propagate any missing values to all
 * keyframes. Therefore the missing `height` value will be properly filled into the already
 * processed keyframes.
 *
 * When a sub-timeline is created it will have its own backFill property. This is done so that
 * styles present within the sub-timeline do not accidentally seep into the previous/future timeline
 * keyframes
 *
 * (For prototypically-inherited contents to be detected a `for(i in obj)` loop must be used.)
 *
 * [Validation]
 * The code in this file is not responsible for validation. That functionality happens with within
 * the `AnimationValidatorVisitor` code.
 */
/**
 * @param {?} driver
 * @param {?} rootElement
 * @param {?} ast
 * @param {?} enterClassName
 * @param {?} leaveClassName
 * @param {?=} startingStyles
 * @param {?=} finalStyles
 * @param {?=} options
 * @param {?=} subInstructions
 * @param {?=} errors
 * @return {?}
 */
function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles = {}, finalStyles = {}, options, subInstructions, errors = []) {
    return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
}
class AnimationTimelineBuilderVisitor {
    /**
     * @param {?} driver
     * @param {?} rootElement
     * @param {?} ast
     * @param {?} enterClassName
     * @param {?} leaveClassName
     * @param {?} startingStyles
     * @param {?} finalStyles
     * @param {?} options
     * @param {?=} subInstructions
     * @param {?=} errors
     * @return {?}
     */
    buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors = []) {
        subInstructions = subInstructions || new ElementInstructionMap();
        /** @type {?} */
        const context = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
        context.options = options;
        context.currentTimeline.setStyles([startingStyles], null, context.errors, options);
        visitDslNode(this, ast, context);
        // this checks to see if an actual animation happened
        /** @type {?} */
        const timelines = context.timelines.filter((/**
         * @param {?} timeline
         * @return {?}
         */
        timeline => timeline.containsAnimation()));
        if (timelines.length && Object.keys(finalStyles).length) {
            /** @type {?} */
            const tl = timelines[timelines.length - 1];
            if (!tl.allowOnlyTimelineStyles()) {
                tl.setStyles([finalStyles], null, context.errors, options);
            }
        }
        return timelines.length ? timelines.map((/**
         * @param {?} timeline
         * @return {?}
         */
        timeline => timeline.buildKeyframes())) :
            [createTimelineInstruction(rootElement, [], [], [], 0, 0, '', false)];
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitTrigger(ast, context) {
        // these values are not visited in this AST
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitState(ast, context) {
        // these values are not visited in this AST
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitTransition(ast, context) {
        // these values are not visited in this AST
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitAnimateChild(ast, context) {
        /** @type {?} */
        const elementInstructions = context.subInstructions.consume(context.element);
        if (elementInstructions) {
            /** @type {?} */
            const innerContext = context.createSubContext(ast.options);
            /** @type {?} */
            const startTime = context.currentTimeline.currentTime;
            /** @type {?} */
            const endTime = this._visitSubInstructions(elementInstructions, innerContext, (/** @type {?} */ (innerContext.options)));
            if (startTime != endTime) {
                // we do this on the upper context because we created a sub context for
                // the sub child animations
                context.transformIntoNewTimeline(endTime);
            }
        }
        context.previousNode = ast;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitAnimateRef(ast, context) {
        /** @type {?} */
        const innerContext = context.createSubContext(ast.options);
        innerContext.transformIntoNewTimeline();
        this.visitReference(ast.animation, innerContext);
        context.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
        context.previousNode = ast;
    }
    /**
     * @private
     * @param {?} instructions
     * @param {?} context
     * @param {?} options
     * @return {?}
     */
    _visitSubInstructions(instructions, context, options) {
        /** @type {?} */
        const startTime = context.currentTimeline.currentTime;
        /** @type {?} */
        let furthestTime = startTime;
        // this is a special-case for when a user wants to skip a sub
        // animation from being fired entirely.
        /** @type {?} */
        const duration = options.duration != null ? resolveTimingValue(options.duration) : null;
        /** @type {?} */
        const delay = options.delay != null ? resolveTimingValue(options.delay) : null;
        if (duration !== 0) {
            instructions.forEach((/**
             * @param {?} instruction
             * @return {?}
             */
            instruction => {
                /** @type {?} */
                const instructionTimings = context.appendInstructionToTimeline(instruction, duration, delay);
                furthestTime =
                    Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
            }));
        }
        return furthestTime;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitReference(ast, context) {
        context.updateOptions(ast.options, true);
        visitDslNode(this, ast.animation, context);
        context.previousNode = ast;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitSequence(ast, context) {
        /** @type {?} */
        const subContextCount = context.subContextCount;
        /** @type {?} */
        let ctx = context;
        /** @type {?} */
        const options = ast.options;
        if (options && (options.params || options.delay)) {
            ctx = context.createSubContext(options);
            ctx.transformIntoNewTimeline();
            if (options.delay != null) {
                if (ctx.previousNode.type == 6 /* Style */) {
                    ctx.currentTimeline.snapshotCurrentStyles();
                    ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
                }
                /** @type {?} */
                const delay = resolveTimingValue(options.delay);
                ctx.delayNextStep(delay);
            }
        }
        if (ast.steps.length) {
            ast.steps.forEach((/**
             * @param {?} s
             * @return {?}
             */
            s => visitDslNode(this, s, ctx)));
            // this is here just incase the inner steps only contain or end with a style() call
            ctx.currentTimeline.applyStylesToKeyframe();
            // this means that some animation function within the sequence
            // ended up creating a sub timeline (which means the current
            // timeline cannot overlap with the contents of the sequence)
            if (ctx.subContextCount > subContextCount) {
                ctx.transformIntoNewTimeline();
            }
        }
        context.previousNode = ast;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitGroup(ast, context) {
        /** @type {?} */
        const innerTimelines = [];
        /** @type {?} */
        let furthestTime = context.currentTimeline.currentTime;
        /** @type {?} */
        const delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
        ast.steps.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            /** @type {?} */
            const innerContext = context.createSubContext(ast.options);
            if (delay) {
                innerContext.delayNextStep(delay);
            }
            visitDslNode(this, s, innerContext);
            furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
            innerTimelines.push(innerContext.currentTimeline);
        }));
        // this operation is run after the AST loop because otherwise
        // if the parent timeline's collected styles were updated then
        // it would pass in invalid data into the new-to-be forked items
        innerTimelines.forEach((/**
         * @param {?} timeline
         * @return {?}
         */
        timeline => context.currentTimeline.mergeTimelineCollectedStyles(timeline)));
        context.transformIntoNewTimeline(furthestTime);
        context.previousNode = ast;
    }
    /**
     * @private
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    _visitTiming(ast, context) {
        if (((/** @type {?} */ (ast))).dynamic) {
            /** @type {?} */
            const strValue = ((/** @type {?} */ (ast))).strValue;
            /** @type {?} */
            const timingValue = context.params ? interpolateParams(strValue, context.params, context.errors) : strValue;
            return resolveTiming(timingValue, context.errors);
        }
        else {
            return { duration: ast.duration, delay: ast.delay, easing: ast.easing };
        }
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitAnimate(ast, context) {
        /** @type {?} */
        const timings = context.currentAnimateTimings = this._visitTiming(ast.timings, context);
        /** @type {?} */
        const timeline = context.currentTimeline;
        if (timings.delay) {
            context.incrementTime(timings.delay);
            timeline.snapshotCurrentStyles();
        }
        /** @type {?} */
        const style = ast.style;
        if (style.type == 5 /* Keyframes */) {
            this.visitKeyframes(style, context);
        }
        else {
            context.incrementTime(timings.duration);
            this.visitStyle((/** @type {?} */ (style)), context);
            timeline.applyStylesToKeyframe();
        }
        context.currentAnimateTimings = null;
        context.previousNode = ast;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitStyle(ast, context) {
        /** @type {?} */
        const timeline = context.currentTimeline;
        /** @type {?} */
        const timings = (/** @type {?} */ (context.currentAnimateTimings));
        // this is a special case for when a style() call
        // directly follows  an animate() call (but not inside of an animate() call)
        if (!timings && timeline.getCurrentStyleProperties().length) {
            timeline.forwardFrame();
        }
        /** @type {?} */
        const easing = (timings && timings.easing) || ast.easing;
        if (ast.isEmptyStep) {
            timeline.applyEmptyStep(easing);
        }
        else {
            timeline.setStyles(ast.styles, easing, context.errors, context.options);
        }
        context.previousNode = ast;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitKeyframes(ast, context) {
        /** @type {?} */
        const currentAnimateTimings = (/** @type {?} */ (context.currentAnimateTimings));
        /** @type {?} */
        const startTime = ((/** @type {?} */ (context.currentTimeline))).duration;
        /** @type {?} */
        const duration = currentAnimateTimings.duration;
        /** @type {?} */
        const innerContext = context.createSubContext();
        /** @type {?} */
        const innerTimeline = innerContext.currentTimeline;
        innerTimeline.easing = currentAnimateTimings.easing;
        ast.styles.forEach((/**
         * @param {?} step
         * @return {?}
         */
        step => {
            /** @type {?} */
            const offset = step.offset || 0;
            innerTimeline.forwardTime(offset * duration);
            innerTimeline.setStyles(step.styles, step.easing, context.errors, context.options);
            innerTimeline.applyStylesToKeyframe();
        }));
        // this will ensure that the parent timeline gets all the styles from
        // the child even if the new timeline below is not used
        context.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
        // we do this because the window between this timeline and the sub timeline
        // should ensure that the styles within are exactly the same as they were before
        context.transformIntoNewTimeline(startTime + duration);
        context.previousNode = ast;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitQuery(ast, context) {
        // in the event that the first step before this is a style step we need
        // to ensure the styles are applied before the children are animated
        /** @type {?} */
        const startTime = context.currentTimeline.currentTime;
        /** @type {?} */
        const options = (/** @type {?} */ ((ast.options || {})));
        /** @type {?} */
        const delay = options.delay ? resolveTimingValue(options.delay) : 0;
        if (delay && (context.previousNode.type === 6 /* Style */ ||
            (startTime == 0 && context.currentTimeline.getCurrentStyleProperties().length))) {
            context.currentTimeline.snapshotCurrentStyles();
            context.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        }
        /** @type {?} */
        let furthestTime = startTime;
        /** @type {?} */
        const elms = context.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context.errors);
        context.currentQueryTotal = elms.length;
        /** @type {?} */
        let sameElementTimeline = null;
        elms.forEach((/**
         * @param {?} element
         * @param {?} i
         * @return {?}
         */
        (element, i) => {
            context.currentQueryIndex = i;
            /** @type {?} */
            const innerContext = context.createSubContext(ast.options, element);
            if (delay) {
                innerContext.delayNextStep(delay);
            }
            if (element === context.element) {
                sameElementTimeline = innerContext.currentTimeline;
            }
            visitDslNode(this, ast.animation, innerContext);
            // this is here just incase the inner steps only contain or end
            // with a style() call (which is here to signal that this is a preparatory
            // call to style an element before it is animated again)
            innerContext.currentTimeline.applyStylesToKeyframe();
            /** @type {?} */
            const endTime = innerContext.currentTimeline.currentTime;
            furthestTime = Math.max(furthestTime, endTime);
        }));
        context.currentQueryIndex = 0;
        context.currentQueryTotal = 0;
        context.transformIntoNewTimeline(furthestTime);
        if (sameElementTimeline) {
            context.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
            context.currentTimeline.snapshotCurrentStyles();
        }
        context.previousNode = ast;
    }
    /**
     * @param {?} ast
     * @param {?} context
     * @return {?}
     */
    visitStagger(ast, context) {
        /** @type {?} */
        const parentContext = (/** @type {?} */ (context.parentContext));
        /** @type {?} */
        const tl = context.currentTimeline;
        /** @type {?} */
        const timings = ast.timings;
        /** @type {?} */
        const duration = Math.abs(timings.duration);
        /** @type {?} */
        const maxTime = duration * (context.currentQueryTotal - 1);
        /** @type {?} */
        let delay = duration * context.currentQueryIndex;
        /** @type {?} */
        let staggerTransformer = timings.duration < 0 ? 'reverse' : timings.easing;
        switch (staggerTransformer) {
            case 'reverse':
                delay = maxTime - delay;
                break;
            case 'full':
                delay = parentContext.currentStaggerTime;
                break;
        }
        /** @type {?} */
        const timeline = context.currentTimeline;
        if (delay) {
            timeline.delayNextStep(delay);
        }
        /** @type {?} */
        const startingTime = timeline.currentTime;
        visitDslNode(this, ast.animation, context);
        context.previousNode = ast;
        // time = duration + delay
        // the reason why this computation is so complex is because
        // the inner timeline may either have a delay value or a stretched
        // keyframe depending on if a subtimeline is not used or is used.
        parentContext.currentStaggerTime =
            (tl.currentTime - startingTime) + (tl.startTime - parentContext.currentTimeline.startTime);
    }
}
/** @type {?} */
const DEFAULT_NOOP_PREVIOUS_NODE = (/** @type {?} */ ({}));
class AnimationTimelineContext {
    /**
     * @param {?} _driver
     * @param {?} element
     * @param {?} subInstructions
     * @param {?} _enterClassName
     * @param {?} _leaveClassName
     * @param {?} errors
     * @param {?} timelines
     * @param {?=} initialTimeline
     */
    constructor(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
        this._driver = _driver;
        this.element = element;
        this.subInstructions = subInstructions;
        this._enterClassName = _enterClassName;
        this._leaveClassName = _leaveClassName;
        this.errors = errors;
        this.timelines = timelines;
        this.parentContext = null;
        this.currentAnimateTimings = null;
        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        this.subContextCount = 0;
        this.options = {};
        this.currentQueryIndex = 0;
        this.currentQueryTotal = 0;
        this.currentStaggerTime = 0;
        this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
        timelines.push(this.currentTimeline);
    }
    /**
     * @return {?}
     */
    get params() { return this.options.params; }
    /**
     * @param {?} options
     * @param {?=} skipIfExists
     * @return {?}
     */
    updateOptions(options, skipIfExists) {
        if (!options)
            return;
        /** @type {?} */
        const newOptions = (/** @type {?} */ (options));
        /** @type {?} */
        let optionsToUpdate = this.options;
        // NOTE: this will get patched up when other animation methods support duration overrides
        if (newOptions.duration != null) {
            ((/** @type {?} */ (optionsToUpdate))).duration = resolveTimingValue(newOptions.duration);
        }
        if (newOptions.delay != null) {
            optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
        }
        /** @type {?} */
        const newParams = newOptions.params;
        if (newParams) {
            /** @type {?} */
            let paramsToUpdate = (/** @type {?} */ (optionsToUpdate.params));
            if (!paramsToUpdate) {
                paramsToUpdate = this.options.params = {};
            }
            Object.keys(newParams).forEach((/**
             * @param {?} name
             * @return {?}
             */
            name => {
                if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {
                    paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);
                }
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    _copyOptions() {
        /** @type {?} */
        const options = {};
        if (this.options) {
            /** @type {?} */
            const oldParams = this.options.params;
            if (oldParams) {
                /** @type {?} */
                const params = options['params'] = {};
                Object.keys(oldParams).forEach((/**
                 * @param {?} name
                 * @return {?}
                 */
                name => { params[name] = oldParams[name]; }));
            }
        }
        return options;
    }
    /**
     * @param {?=} options
     * @param {?=} element
     * @param {?=} newTime
     * @return {?}
     */
    createSubContext(options = null, element, newTime) {
        /** @type {?} */
        const target = element || this.element;
        /** @type {?} */
        const context = new AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
        context.previousNode = this.previousNode;
        context.currentAnimateTimings = this.currentAnimateTimings;
        context.options = this._copyOptions();
        context.updateOptions(options);
        context.currentQueryIndex = this.currentQueryIndex;
        context.currentQueryTotal = this.currentQueryTotal;
        context.parentContext = this;
        this.subContextCount++;
        return context;
    }
    /**
     * @param {?=} newTime
     * @return {?}
     */
    transformIntoNewTimeline(newTime) {
        this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
        this.timelines.push(this.currentTimeline);
        return this.currentTimeline;
    }
    /**
     * @param {?} instruction
     * @param {?} duration
     * @param {?} delay
     * @return {?}
     */
    appendInstructionToTimeline(instruction, duration, delay) {
        /** @type {?} */
        const updatedTimings = {
            duration: duration != null ? duration : instruction.duration,
            delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
            easing: ''
        };
        /** @type {?} */
        const builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
        this.timelines.push(builder);
        return updatedTimings;
    }
    /**
     * @param {?} time
     * @return {?}
     */
    incrementTime(time) {
        this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
    }
    /**
     * @param {?} delay
     * @return {?}
     */
    delayNextStep(delay) {
        // negative delays are not yet supported
        if (delay > 0) {
            this.currentTimeline.delayNextStep(delay);
        }
    }
    /**
     * @param {?} selector
     * @param {?} originalSelector
     * @param {?} limit
     * @param {?} includeSelf
     * @param {?} optional
     * @param {?} errors
     * @return {?}
     */
    invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {
        /** @type {?} */
        let results = [];
        if (includeSelf) {
            results.push(this.element);
        }
        if (selector.length > 0) { // if :self is only used then the selector is empty
            selector = selector.replace(ENTER_TOKEN_REGEX, '.' + this._enterClassName);
            selector = selector.replace(LEAVE_TOKEN_REGEX, '.' + this._leaveClassName);
            /** @type {?} */
            const multi = limit != 1;
            /** @type {?} */
            let elements = this._driver.query(this.element, selector, multi);
            if (limit !== 0) {
                elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) :
                    elements.slice(0, limit);
            }
            results.push(...elements);
        }
        if (!optional && results.length == 0) {
            errors.push(`\`query("${originalSelector}")\` returned zero elements. (Use \`query("${originalSelector}", { optional: true })\` if you wish to allow this.)`);
        }
        return results;
    }
}
if (false) {}
class TimelineBuilder {
    /**
     * @param {?} _driver
     * @param {?} element
     * @param {?} startTime
     * @param {?=} _elementTimelineStylesLookup
     */
    constructor(_driver, element, startTime, _elementTimelineStylesLookup) {
        this._driver = _driver;
        this.element = element;
        this.startTime = startTime;
        this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
        this.duration = 0;
        this._previousKeyframe = {};
        this._currentKeyframe = {};
        this._keyframes = new Map();
        this._styleSummary = {};
        this._pendingStyles = {};
        this._backFill = {};
        this._currentEmptyStepKeyframe = null;
        if (!this._elementTimelineStylesLookup) {
            this._elementTimelineStylesLookup = new Map();
        }
        this._localTimelineStyles = Object.create(this._backFill, {});
        this._globalTimelineStyles = (/** @type {?} */ (this._elementTimelineStylesLookup.get(element)));
        if (!this._globalTimelineStyles) {
            this._globalTimelineStyles = this._localTimelineStyles;
            this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
        }
        this._loadKeyframe();
    }
    /**
     * @return {?}
     */
    containsAnimation() {
        switch (this._keyframes.size) {
            case 0:
                return false;
            case 1:
                return this.getCurrentStyleProperties().length > 0;
            default:
                return true;
        }
    }
    /**
     * @return {?}
     */
    getCurrentStyleProperties() { return Object.keys(this._currentKeyframe); }
    /**
     * @return {?}
     */
    get currentTime() { return this.startTime + this.duration; }
    /**
     * @param {?} delay
     * @return {?}
     */
    delayNextStep(delay) {
        // in the event that a style() step is placed right before a stagger()
        // and that style() step is the very first style() value in the animation
        // then we need to make a copy of the keyframe [0, copy, 1] so that the delay
        // properly applies the style() values to work with the stagger...
        /** @type {?} */
        const hasPreStyleStep = this._keyframes.size == 1 && Object.keys(this._pendingStyles).length;
        if (this.duration || hasPreStyleStep) {
            this.forwardTime(this.currentTime + delay);
            if (hasPreStyleStep) {
                this.snapshotCurrentStyles();
            }
        }
        else {
            this.startTime += delay;
        }
    }
    /**
     * @param {?} element
     * @param {?=} currentTime
     * @return {?}
     */
    fork(element, currentTime) {
        this.applyStylesToKeyframe();
        return new TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
    }
    /**
     * @private
     * @return {?}
     */
    _loadKeyframe() {
        if (this._currentKeyframe) {
            this._previousKeyframe = this._currentKeyframe;
        }
        this._currentKeyframe = (/** @type {?} */ (this._keyframes.get(this.duration)));
        if (!this._currentKeyframe) {
            this._currentKeyframe = Object.create(this._backFill, {});
            this._keyframes.set(this.duration, this._currentKeyframe);
        }
    }
    /**
     * @return {?}
     */
    forwardFrame() {
        this.duration += ONE_FRAME_IN_MILLISECONDS;
        this._loadKeyframe();
    }
    /**
     * @param {?} time
     * @return {?}
     */
    forwardTime(time) {
        this.applyStylesToKeyframe();
        this.duration = time;
        this._loadKeyframe();
    }
    /**
     * @private
     * @param {?} prop
     * @param {?} value
     * @return {?}
     */
    _updateStyle(prop, value) {
        this._localTimelineStyles[prop] = value;
        this._globalTimelineStyles[prop] = value;
        this._styleSummary[prop] = { time: this.currentTime, value };
    }
    /**
     * @return {?}
     */
    allowOnlyTimelineStyles() { return this._currentEmptyStepKeyframe !== this._currentKeyframe; }
    /**
     * @param {?} easing
     * @return {?}
     */
    applyEmptyStep(easing) {
        if (easing) {
            this._previousKeyframe['easing'] = easing;
        }
        // special case for animate(duration):
        // all missing styles are filled with a `*` value then
        // if any destination styles are filled in later on the same
        // keyframe then they will override the overridden styles
        // We use `_globalTimelineStyles` here because there may be
        // styles in previous keyframes that are not present in this timeline
        Object.keys(this._globalTimelineStyles).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            this._backFill[prop] = this._globalTimelineStyles[prop] || _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"];
            this._currentKeyframe[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"];
        }));
        this._currentEmptyStepKeyframe = this._currentKeyframe;
    }
    /**
     * @param {?} input
     * @param {?} easing
     * @param {?} errors
     * @param {?=} options
     * @return {?}
     */
    setStyles(input, easing, errors, options) {
        if (easing) {
            this._previousKeyframe['easing'] = easing;
        }
        /** @type {?} */
        const params = (options && options.params) || {};
        /** @type {?} */
        const styles = flattenStyles(input, this._globalTimelineStyles);
        Object.keys(styles).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            const val = interpolateParams(styles[prop], params, errors);
            this._pendingStyles[prop] = val;
            if (!this._localTimelineStyles.hasOwnProperty(prop)) {
                this._backFill[prop] = this._globalTimelineStyles.hasOwnProperty(prop) ?
                    this._globalTimelineStyles[prop] :
                    _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"];
            }
            this._updateStyle(prop, val);
        }));
    }
    /**
     * @return {?}
     */
    applyStylesToKeyframe() {
        /** @type {?} */
        const styles = this._pendingStyles;
        /** @type {?} */
        const props = Object.keys(styles);
        if (props.length == 0)
            return;
        this._pendingStyles = {};
        props.forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            const val = styles[prop];
            this._currentKeyframe[prop] = val;
        }));
        Object.keys(this._localTimelineStyles).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            if (!this._currentKeyframe.hasOwnProperty(prop)) {
                this._currentKeyframe[prop] = this._localTimelineStyles[prop];
            }
        }));
    }
    /**
     * @return {?}
     */
    snapshotCurrentStyles() {
        Object.keys(this._localTimelineStyles).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            const val = this._localTimelineStyles[prop];
            this._pendingStyles[prop] = val;
            this._updateStyle(prop, val);
        }));
    }
    /**
     * @return {?}
     */
    getFinalKeyframe() { return this._keyframes.get(this.duration); }
    /**
     * @return {?}
     */
    get properties() {
        /** @type {?} */
        const properties = [];
        for (let prop in this._currentKeyframe) {
            properties.push(prop);
        }
        return properties;
    }
    /**
     * @param {?} timeline
     * @return {?}
     */
    mergeTimelineCollectedStyles(timeline) {
        Object.keys(timeline._styleSummary).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            const details0 = this._styleSummary[prop];
            /** @type {?} */
            const details1 = timeline._styleSummary[prop];
            if (!details0 || details1.time > details0.time) {
                this._updateStyle(prop, details1.value);
            }
        }));
    }
    /**
     * @return {?}
     */
    buildKeyframes() {
        this.applyStylesToKeyframe();
        /** @type {?} */
        const preStyleProps = new Set();
        /** @type {?} */
        const postStyleProps = new Set();
        /** @type {?} */
        const isEmpty = this._keyframes.size === 1 && this.duration === 0;
        /** @type {?} */
        let finalKeyframes = [];
        this._keyframes.forEach((/**
         * @param {?} keyframe
         * @param {?} time
         * @return {?}
         */
        (keyframe, time) => {
            /** @type {?} */
            const finalKeyframe = copyStyles(keyframe, true);
            Object.keys(finalKeyframe).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                /** @type {?} */
                const value = finalKeyframe[prop];
                if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵPRE_STYLE"]) {
                    preStyleProps.add(prop);
                }
                else if (value == _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]) {
                    postStyleProps.add(prop);
                }
            }));
            if (!isEmpty) {
                finalKeyframe['offset'] = time / this.duration;
            }
            finalKeyframes.push(finalKeyframe);
        }));
        /** @type {?} */
        const preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];
        /** @type {?} */
        const postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];
        // special case for a 0-second animation (which is designed just to place styles onscreen)
        if (isEmpty) {
            /** @type {?} */
            const kf0 = finalKeyframes[0];
            /** @type {?} */
            const kf1 = copyObj(kf0);
            kf0['offset'] = 0;
            kf1['offset'] = 1;
            finalKeyframes = [kf0, kf1];
        }
        return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
    }
}
if (false) {}
class SubTimelineBuilder extends TimelineBuilder {
    /**
     * @param {?} driver
     * @param {?} element
     * @param {?} keyframes
     * @param {?} preStyleProps
     * @param {?} postStyleProps
     * @param {?} timings
     * @param {?=} _stretchStartingKeyframe
     */
    constructor(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe = false) {
        super(driver, element, timings.delay);
        this.element = element;
        this.keyframes = keyframes;
        this.preStyleProps = preStyleProps;
        this.postStyleProps = postStyleProps;
        this._stretchStartingKeyframe = _stretchStartingKeyframe;
        this.timings = { duration: timings.duration, delay: timings.delay, easing: timings.easing };
    }
    /**
     * @return {?}
     */
    containsAnimation() { return this.keyframes.length > 1; }
    /**
     * @return {?}
     */
    buildKeyframes() {
        /** @type {?} */
        let keyframes = this.keyframes;
        let { delay, duration, easing } = this.timings;
        if (this._stretchStartingKeyframe && delay) {
            /** @type {?} */
            const newKeyframes = [];
            /** @type {?} */
            const totalTime = duration + delay;
            /** @type {?} */
            const startingGap = delay / totalTime;
            // the original starting keyframe now starts once the delay is done
            /** @type {?} */
            const newFirstKeyframe = copyStyles(keyframes[0], false);
            newFirstKeyframe['offset'] = 0;
            newKeyframes.push(newFirstKeyframe);
            /** @type {?} */
            const oldFirstKeyframe = copyStyles(keyframes[0], false);
            oldFirstKeyframe['offset'] = roundOffset(startingGap);
            newKeyframes.push(oldFirstKeyframe);
            /*
                    When the keyframe is stretched then it means that the delay before the animation
                    starts is gone. Instead the first keyframe is placed at the start of the animation
                    and it is then copied to where it starts when the original delay is over. This basically
                    means nothing animates during that delay, but the styles are still renderered. For this
                    to work the original offset values that exist in the original keyframes must be "warped"
                    so that they can take the new keyframe + delay into account.
            
                    delay=1000, duration=1000, keyframes = 0 .5 1
            
                    turns into
            
                    delay=0, duration=2000, keyframes = 0 .33 .66 1
                   */
            // offsets between 1 ... n -1 are all warped by the keyframe stretch
            /** @type {?} */
            const limit = keyframes.length - 1;
            for (let i = 1; i <= limit; i++) {
                /** @type {?} */
                let kf = copyStyles(keyframes[i], false);
                /** @type {?} */
                const oldOffset = (/** @type {?} */ (kf['offset']));
                /** @type {?} */
                const timeAtKeyframe = delay + oldOffset * duration;
                kf['offset'] = roundOffset(timeAtKeyframe / totalTime);
                newKeyframes.push(kf);
            }
            // the new starting keyframe should be added at the start
            duration = totalTime;
            delay = 0;
            easing = '';
            keyframes = newKeyframes;
        }
        return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
    }
}
if (false) {}
/**
 * @param {?} offset
 * @param {?=} decimalPoints
 * @return {?}
 */
function roundOffset(offset, decimalPoints = 3) {
    /** @type {?} */
    const mult = Math.pow(10, decimalPoints - 1);
    return Math.round(offset * mult) / mult;
}
/**
 * @param {?} input
 * @param {?} allStyles
 * @return {?}
 */
function flattenStyles(input, allStyles) {
    /** @type {?} */
    const styles = {};
    /** @type {?} */
    let allProperties;
    input.forEach((/**
     * @param {?} token
     * @return {?}
     */
    token => {
        if (token === '*') {
            allProperties = allProperties || Object.keys(allStyles);
            allProperties.forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => { styles[prop] = _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]; }));
        }
        else {
            copyStyles((/** @type {?} */ (token)), false, styles);
        }
    }));
    return styles;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/animation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Animation {
    /**
     * @param {?} _driver
     * @param {?} input
     */
    constructor(_driver, input) {
        this._driver = _driver;
        /** @type {?} */
        const errors = [];
        /** @type {?} */
        const ast = buildAnimationAst(_driver, input, errors);
        if (errors.length) {
            /** @type {?} */
            const errorMessage = `animation validation failed:\n${errors.join("\n")}`;
            throw new Error(errorMessage);
        }
        this._animationAst = ast;
    }
    /**
     * @param {?} element
     * @param {?} startingStyles
     * @param {?} destinationStyles
     * @param {?} options
     * @param {?=} subInstructions
     * @return {?}
     */
    buildTimelines(element, startingStyles, destinationStyles, options, subInstructions) {
        /** @type {?} */
        const start = Array.isArray(startingStyles) ? normalizeStyles(startingStyles) :
            (/** @type {?} */ (startingStyles));
        /** @type {?} */
        const dest = Array.isArray(destinationStyles) ? normalizeStyles(destinationStyles) :
            (/** @type {?} */ (destinationStyles));
        /** @type {?} */
        const errors = [];
        subInstructions = subInstructions || new ElementInstructionMap();
        /** @type {?} */
        const result = buildAnimationTimelines(this._driver, element, this._animationAst, ENTER_CLASSNAME, LEAVE_CLASSNAME, start, dest, options, subInstructions, errors);
        if (errors.length) {
            /** @type {?} */
            const errorMessage = `animation building failed:\n${errors.join("\n")}`;
            throw new Error(errorMessage);
        }
        return result;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/style_normalization/animation_style_normalizer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@publicApi
 * @abstract
 */
class AnimationStyleNormalizer {
}
if (false) {}
/**
 * \@publicApi
 */
class NoopAnimationStyleNormalizer {
    /**
     * @param {?} propertyName
     * @param {?} errors
     * @return {?}
     */
    normalizePropertyName(propertyName, errors) { return propertyName; }
    /**
     * @param {?} userProvidedProperty
     * @param {?} normalizedProperty
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
        return (/** @type {?} */ (value));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/style_normalization/web_animations_style_normalizer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WebAnimationsStyleNormalizer extends AnimationStyleNormalizer {
    /**
     * @param {?} propertyName
     * @param {?} errors
     * @return {?}
     */
    normalizePropertyName(propertyName, errors) {
        return dashCaseToCamelCase(propertyName);
    }
    /**
     * @param {?} userProvidedProperty
     * @param {?} normalizedProperty
     * @param {?} value
     * @param {?} errors
     * @return {?}
     */
    normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
        /** @type {?} */
        let unit = '';
        /** @type {?} */
        const strVal = value.toString().trim();
        if (DIMENSIONAL_PROP_MAP[normalizedProperty] && value !== 0 && value !== '0') {
            if (typeof value === 'number') {
                unit = 'px';
            }
            else {
                /** @type {?} */
                const valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
                if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
                    errors.push(`Please provide a CSS unit value for ${userProvidedProperty}:${value}`);
                }
            }
        }
        return strVal + unit;
    }
}
const ɵ0$1 = /**
 * @return {?}
 */
() => makeBooleanMap('width,height,minWidth,minHeight,maxWidth,maxHeight,left,top,bottom,right,fontSize,outlineWidth,outlineOffset,paddingTop,paddingLeft,paddingBottom,paddingRight,marginTop,marginLeft,marginBottom,marginRight,borderRadius,borderWidth,borderTopWidth,borderLeftWidth,borderRightWidth,borderBottomWidth,textIndent,perspective'
    .split(','));
/** @type {?} */
const DIMENSIONAL_PROP_MAP = ((ɵ0$1))();
/**
 * @param {?} keys
 * @return {?}
 */
function makeBooleanMap(keys) {
    /** @type {?} */
    const map = {};
    keys.forEach((/**
     * @param {?} key
     * @return {?}
     */
    key => map[key] = true));
    return map;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/animation_transition_instruction.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function AnimationTransitionInstruction() { }
if (false) {}
/**
 * @param {?} element
 * @param {?} triggerName
 * @param {?} fromState
 * @param {?} toState
 * @param {?} isRemovalTransition
 * @param {?} fromStyles
 * @param {?} toStyles
 * @param {?} timelines
 * @param {?} queriedElements
 * @param {?} preStyleProps
 * @param {?} postStyleProps
 * @param {?} totalTime
 * @param {?=} errors
 * @return {?}
 */
function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {
    return {
        type: 0 /* TransitionAnimation */,
        element,
        triggerName,
        isRemovalTransition,
        fromState,
        fromStyles,
        toState,
        toStyles,
        timelines,
        queriedElements,
        preStyleProps,
        postStyleProps,
        totalTime,
        errors
    };
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/animation_transition_factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const EMPTY_OBJECT = {};
class AnimationTransitionFactory {
    /**
     * @param {?} _triggerName
     * @param {?} ast
     * @param {?} _stateStyles
     */
    constructor(_triggerName, ast, _stateStyles) {
        this._triggerName = _triggerName;
        this.ast = ast;
        this._stateStyles = _stateStyles;
    }
    /**
     * @param {?} currentState
     * @param {?} nextState
     * @param {?} element
     * @param {?} params
     * @return {?}
     */
    match(currentState, nextState, element, params) {
        return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);
    }
    /**
     * @param {?} stateName
     * @param {?} params
     * @param {?} errors
     * @return {?}
     */
    buildStyles(stateName, params, errors) {
        /** @type {?} */
        const backupStateStyler = this._stateStyles['*'];
        /** @type {?} */
        const stateStyler = this._stateStyles[stateName];
        /** @type {?} */
        const backupStyles = backupStateStyler ? backupStateStyler.buildStyles(params, errors) : {};
        return stateStyler ? stateStyler.buildStyles(params, errors) : backupStyles;
    }
    /**
     * @param {?} driver
     * @param {?} element
     * @param {?} currentState
     * @param {?} nextState
     * @param {?} enterClassName
     * @param {?} leaveClassName
     * @param {?=} currentOptions
     * @param {?=} nextOptions
     * @param {?=} subInstructions
     * @param {?=} skipAstBuild
     * @return {?}
     */
    build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {
        /** @type {?} */
        const errors = [];
        /** @type {?} */
        const transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
        /** @type {?} */
        const currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
        /** @type {?} */
        const currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
        /** @type {?} */
        const nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
        /** @type {?} */
        const nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
        /** @type {?} */
        const queriedElements = new Set();
        /** @type {?} */
        const preStyleMap = new Map();
        /** @type {?} */
        const postStyleMap = new Map();
        /** @type {?} */
        const isRemoval = nextState === 'void';
        /** @type {?} */
        const animationOptions = { params: Object.assign(Object.assign({}, transitionAnimationParams), nextAnimationParams) };
        /** @type {?} */
        const timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
        /** @type {?} */
        let totalTime = 0;
        timelines.forEach((/**
         * @param {?} tl
         * @return {?}
         */
        tl => { totalTime = Math.max(tl.duration + tl.delay, totalTime); }));
        if (errors.length) {
            return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);
        }
        timelines.forEach((/**
         * @param {?} tl
         * @return {?}
         */
        tl => {
            /** @type {?} */
            const elm = tl.element;
            /** @type {?} */
            const preProps = getOrSetAsInMap(preStyleMap, elm, {});
            tl.preStyleProps.forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => preProps[prop] = true));
            /** @type {?} */
            const postProps = getOrSetAsInMap(postStyleMap, elm, {});
            tl.postStyleProps.forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => postProps[prop] = true));
            if (elm !== element) {
                queriedElements.add(elm);
            }
        }));
        /** @type {?} */
        const queriedElementsList = iteratorToArray(queriedElements.values());
        return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);
    }
}
if (false) {}
/**
 * @param {?} matchFns
 * @param {?} currentState
 * @param {?} nextState
 * @param {?} element
 * @param {?} params
 * @return {?}
 */
function oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {
    return matchFns.some((/**
     * @param {?} fn
     * @return {?}
     */
    fn => fn(currentState, nextState, element, params)));
}
class AnimationStateStyles {
    /**
     * @param {?} styles
     * @param {?} defaultParams
     */
    constructor(styles, defaultParams) {
        this.styles = styles;
        this.defaultParams = defaultParams;
    }
    /**
     * @param {?} params
     * @param {?} errors
     * @return {?}
     */
    buildStyles(params, errors) {
        /** @type {?} */
        const finalStyles = {};
        /** @type {?} */
        const combinedParams = copyObj(this.defaultParams);
        Object.keys(params).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const value = params[key];
            if (value != null) {
                combinedParams[key] = value;
            }
        }));
        this.styles.styles.forEach((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (typeof value !== 'string') {
                /** @type {?} */
                const styleObj = (/** @type {?} */ (value));
                Object.keys(styleObj).forEach((/**
                 * @param {?} prop
                 * @return {?}
                 */
                prop => {
                    /** @type {?} */
                    let val = styleObj[prop];
                    if (val.length > 1) {
                        val = interpolateParams(val, combinedParams, errors);
                    }
                    finalStyles[prop] = val;
                }));
            }
        }));
        return finalStyles;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/dsl/animation_trigger.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@publicApi
 * @param {?} name
 * @param {?} ast
 * @return {?}
 */
function buildTrigger(name, ast) {
    return new AnimationTrigger(name, ast);
}
/**
 * \@publicApi
 */
class AnimationTrigger {
    /**
     * @param {?} name
     * @param {?} ast
     */
    constructor(name, ast) {
        this.name = name;
        this.ast = ast;
        this.transitionFactories = [];
        this.states = {};
        ast.states.forEach((/**
         * @param {?} ast
         * @return {?}
         */
        ast => {
            /** @type {?} */
            const defaultParams = (ast.options && ast.options.params) || {};
            this.states[ast.name] = new AnimationStateStyles(ast.style, defaultParams);
        }));
        balanceProperties(this.states, 'true', '1');
        balanceProperties(this.states, 'false', '0');
        ast.transitions.forEach((/**
         * @param {?} ast
         * @return {?}
         */
        ast => {
            this.transitionFactories.push(new AnimationTransitionFactory(name, ast, this.states));
        }));
        this.fallbackTransition = createFallbackTransition(name, this.states);
    }
    /**
     * @return {?}
     */
    get containsQueries() { return this.ast.queryCount > 0; }
    /**
     * @param {?} currentState
     * @param {?} nextState
     * @param {?} element
     * @param {?} params
     * @return {?}
     */
    matchTransition(currentState, nextState, element, params) {
        /** @type {?} */
        const entry = this.transitionFactories.find((/**
         * @param {?} f
         * @return {?}
         */
        f => f.match(currentState, nextState, element, params)));
        return entry || null;
    }
    /**
     * @param {?} currentState
     * @param {?} params
     * @param {?} errors
     * @return {?}
     */
    matchStyles(currentState, params, errors) {
        return this.fallbackTransition.buildStyles(currentState, params, errors);
    }
}
if (false) {}
/**
 * @param {?} triggerName
 * @param {?} states
 * @return {?}
 */
function createFallbackTransition(triggerName, states) {
    /** @type {?} */
    const matchers = [(/**
         * @param {?} fromState
         * @param {?} toState
         * @return {?}
         */
        (fromState, toState) => true)];
    /** @type {?} */
    const animation = { type: 2 /* Sequence */, steps: [], options: null };
    /** @type {?} */
    const transition = {
        type: 1 /* Transition */,
        animation,
        matchers,
        options: null,
        queryCount: 0,
        depCount: 0
    };
    return new AnimationTransitionFactory(triggerName, transition, states);
}
/**
 * @param {?} obj
 * @param {?} key1
 * @param {?} key2
 * @return {?}
 */
function balanceProperties(obj, key1, key2) {
    if (obj.hasOwnProperty(key1)) {
        if (!obj.hasOwnProperty(key2)) {
            obj[key2] = obj[key1];
        }
    }
    else if (obj.hasOwnProperty(key2)) {
        obj[key1] = obj[key2];
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/timeline_animation_engine.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();
class TimelineAnimationEngine {
    /**
     * @param {?} bodyNode
     * @param {?} _driver
     * @param {?} _normalizer
     */
    constructor(bodyNode, _driver, _normalizer) {
        this.bodyNode = bodyNode;
        this._driver = _driver;
        this._normalizer = _normalizer;
        this._animations = {};
        this._playersById = {};
        this.players = [];
    }
    /**
     * @param {?} id
     * @param {?} metadata
     * @return {?}
     */
    register(id, metadata) {
        /** @type {?} */
        const errors = [];
        /** @type {?} */
        const ast = buildAnimationAst(this._driver, metadata, errors);
        if (errors.length) {
            throw new Error(`Unable to build the animation due to the following errors: ${errors.join("\n")}`);
        }
        else {
            this._animations[id] = ast;
        }
    }
    /**
     * @private
     * @param {?} i
     * @param {?} preStyles
     * @param {?=} postStyles
     * @return {?}
     */
    _buildPlayer(i, preStyles, postStyles) {
        /** @type {?} */
        const element = i.element;
        /** @type {?} */
        const keyframes = normalizeKeyframes(this._driver, this._normalizer, element, i.keyframes, preStyles, postStyles);
        return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);
    }
    /**
     * @param {?} id
     * @param {?} element
     * @param {?=} options
     * @return {?}
     */
    create(id, element, options = {}) {
        /** @type {?} */
        const errors = [];
        /** @type {?} */
        const ast = this._animations[id];
        /** @type {?} */
        let instructions;
        /** @type {?} */
        const autoStylesMap = new Map();
        if (ast) {
            instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, {}, {}, options, EMPTY_INSTRUCTION_MAP, errors);
            instructions.forEach((/**
             * @param {?} inst
             * @return {?}
             */
            inst => {
                /** @type {?} */
                const styles = getOrSetAsInMap(autoStylesMap, inst.element, {});
                inst.postStyleProps.forEach((/**
                 * @param {?} prop
                 * @return {?}
                 */
                prop => styles[prop] = null));
            }));
        }
        else {
            errors.push('The requested animation doesn\'t exist or has already been destroyed');
            instructions = [];
        }
        if (errors.length) {
            throw new Error(`Unable to create the animation due to the following errors: ${errors.join("\n")}`);
        }
        autoStylesMap.forEach((/**
         * @param {?} styles
         * @param {?} element
         * @return {?}
         */
        (styles, element) => {
            Object.keys(styles).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => { styles[prop] = this._driver.computeStyle(element, prop, _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]); }));
        }));
        /** @type {?} */
        const players = instructions.map((/**
         * @param {?} i
         * @return {?}
         */
        i => {
            /** @type {?} */
            const styles = autoStylesMap.get(i.element);
            return this._buildPlayer(i, {}, styles);
        }));
        /** @type {?} */
        const player = optimizeGroupPlayer(players);
        this._playersById[id] = player;
        player.onDestroy((/**
         * @return {?}
         */
        () => this.destroy(id)));
        this.players.push(player);
        return player;
    }
    /**
     * @param {?} id
     * @return {?}
     */
    destroy(id) {
        /** @type {?} */
        const player = this._getPlayer(id);
        player.destroy();
        delete this._playersById[id];
        /** @type {?} */
        const index = this.players.indexOf(player);
        if (index >= 0) {
            this.players.splice(index, 1);
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    _getPlayer(id) {
        /** @type {?} */
        const player = this._playersById[id];
        if (!player) {
            throw new Error(`Unable to find the timeline player referenced by ${id}`);
        }
        return player;
    }
    /**
     * @param {?} id
     * @param {?} element
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    listen(id, element, eventName, callback) {
        // triggerName, fromState, toState are all ignored for timeline animations
        /** @type {?} */
        const baseEvent = makeAnimationEvent(element, '', '', '');
        listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
        return (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @param {?} id
     * @param {?} element
     * @param {?} command
     * @param {?} args
     * @return {?}
     */
    command(id, element, command, args) {
        if (command == 'register') {
            this.register(id, (/** @type {?} */ (args[0])));
            return;
        }
        if (command == 'create') {
            /** @type {?} */
            const options = (/** @type {?} */ ((args[0] || {})));
            this.create(id, element, options);
            return;
        }
        /** @type {?} */
        const player = this._getPlayer(id);
        switch (command) {
            case 'play':
                player.play();
                break;
            case 'pause':
                player.pause();
                break;
            case 'reset':
                player.reset();
                break;
            case 'restart':
                player.restart();
                break;
            case 'finish':
                player.finish();
                break;
            case 'init':
                player.init();
                break;
            case 'setPosition':
                player.setPosition(parseFloat((/** @type {?} */ (args[0]))));
                break;
            case 'destroy':
                this.destroy(id);
                break;
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/transition_animation_engine.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const QUEUED_CLASSNAME = 'ng-animate-queued';
/** @type {?} */
const QUEUED_SELECTOR = '.ng-animate-queued';
/** @type {?} */
const DISABLED_CLASSNAME = 'ng-animate-disabled';
/** @type {?} */
const DISABLED_SELECTOR = '.ng-animate-disabled';
/** @type {?} */
const STAR_CLASSNAME = 'ng-star-inserted';
/** @type {?} */
const STAR_SELECTOR = '.ng-star-inserted';
/** @type {?} */
const EMPTY_PLAYER_ARRAY = [];
/** @type {?} */
const NULL_REMOVAL_STATE = {
    namespaceId: '',
    setForRemoval: false,
    setForMove: false,
    hasAnimation: false,
    removedBeforeQueried: false
};
/** @type {?} */
const NULL_REMOVED_QUERIED_STATE = {
    namespaceId: '',
    setForMove: false,
    setForRemoval: false,
    hasAnimation: false,
    removedBeforeQueried: true
};
/**
 * @record
 */
function TriggerListener() { }
if (false) {}
/**
 * @record
 */
function QueueInstruction() { }
if (false) {}
/** @type {?} */
const REMOVAL_FLAG = '__ng_removed';
/**
 * @record
 */
function ElementAnimationState() { }
if (false) {}
class StateValue {
    /**
     * @param {?} input
     * @param {?=} namespaceId
     */
    constructor(input, namespaceId = '') {
        this.namespaceId = namespaceId;
        /** @type {?} */
        const isObj = input && input.hasOwnProperty('value');
        /** @type {?} */
        const value = isObj ? input['value'] : input;
        this.value = normalizeTriggerValue(value);
        if (isObj) {
            /** @type {?} */
            const options = copyObj((/** @type {?} */ (input)));
            delete options['value'];
            this.options = (/** @type {?} */ (options));
        }
        else {
            this.options = {};
        }
        if (!this.options.params) {
            this.options.params = {};
        }
    }
    /**
     * @return {?}
     */
    get params() { return (/** @type {?} */ (this.options.params)); }
    /**
     * @param {?} options
     * @return {?}
     */
    absorbOptions(options) {
        /** @type {?} */
        const newParams = options.params;
        if (newParams) {
            /** @type {?} */
            const oldParams = (/** @type {?} */ (this.options.params));
            Object.keys(newParams).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                if (oldParams[prop] == null) {
                    oldParams[prop] = newParams[prop];
                }
            }));
        }
    }
}
if (false) {}
/** @type {?} */
const VOID_VALUE = 'void';
/** @type {?} */
const DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);
class AnimationTransitionNamespace {
    /**
     * @param {?} id
     * @param {?} hostElement
     * @param {?} _engine
     */
    constructor(id, hostElement, _engine) {
        this.id = id;
        this.hostElement = hostElement;
        this._engine = _engine;
        this.players = [];
        this._triggers = {};
        this._queue = [];
        this._elementListeners = new Map();
        this._hostClassName = 'ng-tns-' + id;
        addClass(hostElement, this._hostClassName);
    }
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} phase
     * @param {?} callback
     * @return {?}
     */
    listen(element, name, phase, callback) {
        if (!this._triggers.hasOwnProperty(name)) {
            throw new Error(`Unable to listen on the animation trigger event "${phase}" because the animation trigger "${name}" doesn\'t exist!`);
        }
        if (phase == null || phase.length == 0) {
            throw new Error(`Unable to listen on the animation trigger "${name}" because the provided event is undefined!`);
        }
        if (!isTriggerEventValid(phase)) {
            throw new Error(`The provided animation trigger event "${phase}" for the animation trigger "${name}" is not supported!`);
        }
        /** @type {?} */
        const listeners = getOrSetAsInMap(this._elementListeners, element, []);
        /** @type {?} */
        const data = { name, phase, callback };
        listeners.push(data);
        /** @type {?} */
        const triggersWithStates = getOrSetAsInMap(this._engine.statesByElement, element, {});
        if (!triggersWithStates.hasOwnProperty(name)) {
            addClass(element, NG_TRIGGER_CLASSNAME);
            addClass(element, NG_TRIGGER_CLASSNAME + '-' + name);
            triggersWithStates[name] = DEFAULT_STATE_VALUE;
        }
        return (/**
         * @return {?}
         */
        () => {
            // the event listener is removed AFTER the flush has occurred such
            // that leave animations callbacks can fire (otherwise if the node
            // is removed in between then the listeners would be deregistered)
            this._engine.afterFlush((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const index = listeners.indexOf(data);
                if (index >= 0) {
                    listeners.splice(index, 1);
                }
                if (!this._triggers[name]) {
                    delete triggersWithStates[name];
                }
            }));
        });
    }
    /**
     * @param {?} name
     * @param {?} ast
     * @return {?}
     */
    register(name, ast) {
        if (this._triggers[name]) {
            // throw
            return false;
        }
        else {
            this._triggers[name] = ast;
            return true;
        }
    }
    /**
     * @private
     * @param {?} name
     * @return {?}
     */
    _getTrigger(name) {
        /** @type {?} */
        const trigger = this._triggers[name];
        if (!trigger) {
            throw new Error(`The provided animation trigger "${name}" has not been registered!`);
        }
        return trigger;
    }
    /**
     * @param {?} element
     * @param {?} triggerName
     * @param {?} value
     * @param {?=} defaultToFallback
     * @return {?}
     */
    trigger(element, triggerName, value, defaultToFallback = true) {
        /** @type {?} */
        const trigger = this._getTrigger(triggerName);
        /** @type {?} */
        const player = new TransitionAnimationPlayer(this.id, triggerName, element);
        /** @type {?} */
        let triggersWithStates = this._engine.statesByElement.get(element);
        if (!triggersWithStates) {
            addClass(element, NG_TRIGGER_CLASSNAME);
            addClass(element, NG_TRIGGER_CLASSNAME + '-' + triggerName);
            this._engine.statesByElement.set(element, triggersWithStates = {});
        }
        /** @type {?} */
        let fromState = triggersWithStates[triggerName];
        /** @type {?} */
        const toState = new StateValue(value, this.id);
        /** @type {?} */
        const isObj = value && value.hasOwnProperty('value');
        if (!isObj && fromState) {
            toState.absorbOptions(fromState.options);
        }
        triggersWithStates[triggerName] = toState;
        if (!fromState) {
            fromState = DEFAULT_STATE_VALUE;
        }
        /** @type {?} */
        const isRemoval = toState.value === VOID_VALUE;
        // normally this isn't reached by here, however, if an object expression
        // is passed in then it may be a new object each time. Comparing the value
        // is important since that will stay the same despite there being a new object.
        // The removal arc here is special cased because the same element is triggered
        // twice in the event that it contains animations on the outer/inner portions
        // of the host container
        if (!isRemoval && fromState.value === toState.value) {
            // this means that despite the value not changing, some inner params
            // have changed which means that the animation final styles need to be applied
            if (!objEquals(fromState.params, toState.params)) {
                /** @type {?} */
                const errors = [];
                /** @type {?} */
                const fromStyles = trigger.matchStyles(fromState.value, fromState.params, errors);
                /** @type {?} */
                const toStyles = trigger.matchStyles(toState.value, toState.params, errors);
                if (errors.length) {
                    this._engine.reportError(errors);
                }
                else {
                    this._engine.afterFlush((/**
                     * @return {?}
                     */
                    () => {
                        eraseStyles(element, fromStyles);
                        setStyles(element, toStyles);
                    }));
                }
            }
            return;
        }
        /** @type {?} */
        const playersOnElement = getOrSetAsInMap(this._engine.playersByElement, element, []);
        playersOnElement.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            // only remove the player if it is queued on the EXACT same trigger/namespace
            // we only also deal with queued players here because if the animation has
            // started then we want to keep the player alive until the flush happens
            // (which is where the previousPlayers are passed into the new palyer)
            if (player.namespaceId == this.id && player.triggerName == triggerName && player.queued) {
                player.destroy();
            }
        }));
        /** @type {?} */
        let transition = trigger.matchTransition(fromState.value, toState.value, element, toState.params);
        /** @type {?} */
        let isFallbackTransition = false;
        if (!transition) {
            if (!defaultToFallback)
                return;
            transition = trigger.fallbackTransition;
            isFallbackTransition = true;
        }
        this._engine.totalQueuedPlayers++;
        this._queue.push({ element, triggerName, transition, fromState, toState, player, isFallbackTransition });
        if (!isFallbackTransition) {
            addClass(element, QUEUED_CLASSNAME);
            player.onStart((/**
             * @return {?}
             */
            () => { removeClass(element, QUEUED_CLASSNAME); }));
        }
        player.onDone((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let index = this.players.indexOf(player);
            if (index >= 0) {
                this.players.splice(index, 1);
            }
            /** @type {?} */
            const players = this._engine.playersByElement.get(element);
            if (players) {
                /** @type {?} */
                let index = players.indexOf(player);
                if (index >= 0) {
                    players.splice(index, 1);
                }
            }
        }));
        this.players.push(player);
        playersOnElement.push(player);
        return player;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    deregister(name) {
        delete this._triggers[name];
        this._engine.statesByElement.forEach((/**
         * @param {?} stateMap
         * @param {?} element
         * @return {?}
         */
        (stateMap, element) => { delete stateMap[name]; }));
        this._elementListeners.forEach((/**
         * @param {?} listeners
         * @param {?} element
         * @return {?}
         */
        (listeners, element) => {
            this._elementListeners.set(element, listeners.filter((/**
             * @param {?} entry
             * @return {?}
             */
            entry => { return entry.name != name; })));
        }));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    clearElementCache(element) {
        this._engine.statesByElement.delete(element);
        this._elementListeners.delete(element);
        /** @type {?} */
        const elementPlayers = this._engine.playersByElement.get(element);
        if (elementPlayers) {
            elementPlayers.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => player.destroy()));
            this._engine.playersByElement.delete(element);
        }
    }
    /**
     * @private
     * @param {?} rootElement
     * @param {?} context
     * @return {?}
     */
    _signalRemovalForInnerTriggers(rootElement, context) {
        /** @type {?} */
        const elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true);
        // emulate a leave animation for all inner nodes within this node.
        // If there are no animations found for any of the nodes then clear the cache
        // for the element.
        elements.forEach((/**
         * @param {?} elm
         * @return {?}
         */
        elm => {
            // this means that an inner remove() operation has already kicked off
            // the animation on this element...
            if (elm[REMOVAL_FLAG])
                return;
            /** @type {?} */
            const namespaces = this._engine.fetchNamespacesByElement(elm);
            if (namespaces.size) {
                namespaces.forEach((/**
                 * @param {?} ns
                 * @return {?}
                 */
                ns => ns.triggerLeaveAnimation(elm, context, false, true)));
            }
            else {
                this.clearElementCache(elm);
            }
        }));
        // If the child elements were removed along with the parent, their animations might not
        // have completed. Clear all the elements from the cache so we don't end up with a memory leak.
        this._engine.afterFlushAnimationsDone((/**
         * @return {?}
         */
        () => elements.forEach((/**
         * @param {?} elm
         * @return {?}
         */
        elm => this.clearElementCache(elm)))));
    }
    /**
     * @param {?} element
     * @param {?} context
     * @param {?=} destroyAfterComplete
     * @param {?=} defaultToFallback
     * @return {?}
     */
    triggerLeaveAnimation(element, context, destroyAfterComplete, defaultToFallback) {
        /** @type {?} */
        const triggerStates = this._engine.statesByElement.get(element);
        if (triggerStates) {
            /** @type {?} */
            const players = [];
            Object.keys(triggerStates).forEach((/**
             * @param {?} triggerName
             * @return {?}
             */
            triggerName => {
                // this check is here in the event that an element is removed
                // twice (both on the host level and the component level)
                if (this._triggers[triggerName]) {
                    /** @type {?} */
                    const player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);
                    if (player) {
                        players.push(player);
                    }
                }
            }));
            if (players.length) {
                this._engine.markElementAsRemoved(this.id, element, true, context);
                if (destroyAfterComplete) {
                    optimizeGroupPlayer(players).onDone((/**
                     * @return {?}
                     */
                    () => this._engine.processLeaveNode(element)));
                }
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} element
     * @return {?}
     */
    prepareLeaveAnimationListeners(element) {
        /** @type {?} */
        const listeners = this._elementListeners.get(element);
        if (listeners) {
            /** @type {?} */
            const visitedTriggers = new Set();
            listeners.forEach((/**
             * @param {?} listener
             * @return {?}
             */
            listener => {
                /** @type {?} */
                const triggerName = listener.name;
                if (visitedTriggers.has(triggerName))
                    return;
                visitedTriggers.add(triggerName);
                /** @type {?} */
                const trigger = this._triggers[triggerName];
                /** @type {?} */
                const transition = trigger.fallbackTransition;
                /** @type {?} */
                const elementStates = (/** @type {?} */ (this._engine.statesByElement.get(element)));
                /** @type {?} */
                const fromState = elementStates[triggerName] || DEFAULT_STATE_VALUE;
                /** @type {?} */
                const toState = new StateValue(VOID_VALUE);
                /** @type {?} */
                const player = new TransitionAnimationPlayer(this.id, triggerName, element);
                this._engine.totalQueuedPlayers++;
                this._queue.push({
                    element,
                    triggerName,
                    transition,
                    fromState,
                    toState,
                    player,
                    isFallbackTransition: true
                });
            }));
        }
    }
    /**
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    removeNode(element, context) {
        /** @type {?} */
        const engine = this._engine;
        if (element.childElementCount) {
            this._signalRemovalForInnerTriggers(element, context);
        }
        // this means that a * => VOID animation was detected and kicked off
        if (this.triggerLeaveAnimation(element, context, true))
            return;
        // find the player that is animating and make sure that the
        // removal is delayed until that player has completed
        /** @type {?} */
        let containsPotentialParentTransition = false;
        if (engine.totalAnimations) {
            /** @type {?} */
            const currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];
            // when this `if statement` does not continue forward it means that
            // a previous animation query has selected the current element and
            // is animating it. In this situation want to continue forwards and
            // allow the element to be queued up for animation later.
            if (currentPlayers && currentPlayers.length) {
                containsPotentialParentTransition = true;
            }
            else {
                /** @type {?} */
                let parent = element;
                while (parent = parent.parentNode) {
                    /** @type {?} */
                    const triggers = engine.statesByElement.get(parent);
                    if (triggers) {
                        containsPotentialParentTransition = true;
                        break;
                    }
                }
            }
        }
        // at this stage we know that the element will either get removed
        // during flush or will be picked up by a parent query. Either way
        // we need to fire the listeners for this element when it DOES get
        // removed (once the query parent animation is done or after flush)
        this.prepareLeaveAnimationListeners(element);
        // whether or not a parent has an animation we need to delay the deferral of the leave
        // operation until we have more information (which we do after flush() has been called)
        if (containsPotentialParentTransition) {
            engine.markElementAsRemoved(this.id, element, false, context);
        }
        else {
            /** @type {?} */
            const removalFlag = element[REMOVAL_FLAG];
            if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {
                // we do this after the flush has occurred such
                // that the callbacks can be fired
                engine.afterFlush((/**
                 * @return {?}
                 */
                () => this.clearElementCache(element)));
                engine.destroyInnerAnimations(element);
                engine._onRemovalComplete(element, context);
            }
        }
    }
    /**
     * @param {?} element
     * @param {?} parent
     * @return {?}
     */
    insertNode(element, parent) { addClass(element, this._hostClassName); }
    /**
     * @param {?} microtaskId
     * @return {?}
     */
    drainQueuedTransitions(microtaskId) {
        /** @type {?} */
        const instructions = [];
        this._queue.forEach((/**
         * @param {?} entry
         * @return {?}
         */
        entry => {
            /** @type {?} */
            const player = entry.player;
            if (player.destroyed)
                return;
            /** @type {?} */
            const element = entry.element;
            /** @type {?} */
            const listeners = this._elementListeners.get(element);
            if (listeners) {
                listeners.forEach((/**
                 * @param {?} listener
                 * @return {?}
                 */
                (listener) => {
                    if (listener.name == entry.triggerName) {
                        /** @type {?} */
                        const baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
                        ((/** @type {?} */ (baseEvent)))['_data'] = microtaskId;
                        listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
                    }
                }));
            }
            if (player.markedForDestroy) {
                this._engine.afterFlush((/**
                 * @return {?}
                 */
                () => {
                    // now we can destroy the element properly since the event listeners have
                    // been bound to the player
                    player.destroy();
                }));
            }
            else {
                instructions.push(entry);
            }
        }));
        this._queue = [];
        return instructions.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => {
            // if depCount == 0 them move to front
            // otherwise if a contains b then move back
            /** @type {?} */
            const d0 = a.transition.ast.depCount;
            /** @type {?} */
            const d1 = b.transition.ast.depCount;
            if (d0 == 0 || d1 == 0) {
                return d0 - d1;
            }
            return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
        }));
    }
    /**
     * @param {?} context
     * @return {?}
     */
    destroy(context) {
        this.players.forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => p.destroy()));
        this._signalRemovalForInnerTriggers(this.hostElement, context);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    elementContainsData(element) {
        /** @type {?} */
        let containsData = false;
        if (this._elementListeners.has(element))
            containsData = true;
        containsData =
            (this._queue.find((/**
             * @param {?} entry
             * @return {?}
             */
            entry => entry.element === element)) ? true : false) || containsData;
        return containsData;
    }
}
if (false) {}
/**
 * @record
 */
function QueuedTransition() { }
if (false) {}
class TransitionAnimationEngine {
    /**
     * @param {?} bodyNode
     * @param {?} driver
     * @param {?} _normalizer
     */
    constructor(bodyNode, driver, _normalizer) {
        this.bodyNode = bodyNode;
        this.driver = driver;
        this._normalizer = _normalizer;
        this.players = [];
        this.newHostElements = new Map();
        this.playersByElement = new Map();
        this.playersByQueriedElement = new Map();
        this.statesByElement = new Map();
        this.disabledNodes = new Set();
        this.totalAnimations = 0;
        this.totalQueuedPlayers = 0;
        this._namespaceLookup = {};
        this._namespaceList = [];
        this._flushFns = [];
        this._whenQuietFns = [];
        this.namespacesByHostElement = new Map();
        this.collectedEnterElements = [];
        this.collectedLeaveElements = [];
        // this method is designed to be overridden by the code that uses this engine
        this.onRemovalComplete = (/**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
        (element, context) => { });
    }
    /**
     * \@internal
     * @param {?} element
     * @param {?} context
     * @return {?}
     */
    _onRemovalComplete(element, context) { this.onRemovalComplete(element, context); }
    /**
     * @return {?}
     */
    get queuedPlayers() {
        /** @type {?} */
        const players = [];
        this._namespaceList.forEach((/**
         * @param {?} ns
         * @return {?}
         */
        ns => {
            ns.players.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => {
                if (player.queued) {
                    players.push(player);
                }
            }));
        }));
        return players;
    }
    /**
     * @param {?} namespaceId
     * @param {?} hostElement
     * @return {?}
     */
    createNamespace(namespaceId, hostElement) {
        /** @type {?} */
        const ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);
        if (hostElement.parentNode) {
            this._balanceNamespaceList(ns, hostElement);
        }
        else {
            // defer this later until flush during when the host element has
            // been inserted so that we know exactly where to place it in
            // the namespace list
            this.newHostElements.set(hostElement, ns);
            // given that this host element is apart of the animation code, it
            // may or may not be inserted by a parent node that is an of an
            // animation renderer type. If this happens then we can still have
            // access to this item when we query for :enter nodes. If the parent
            // is a renderer then the set data-structure will normalize the entry
            this.collectEnterElement(hostElement);
        }
        return this._namespaceLookup[namespaceId] = ns;
    }
    /**
     * @private
     * @param {?} ns
     * @param {?} hostElement
     * @return {?}
     */
    _balanceNamespaceList(ns, hostElement) {
        /** @type {?} */
        const limit = this._namespaceList.length - 1;
        if (limit >= 0) {
            /** @type {?} */
            let found = false;
            for (let i = limit; i >= 0; i--) {
                /** @type {?} */
                const nextNamespace = this._namespaceList[i];
                if (this.driver.containsElement(nextNamespace.hostElement, hostElement)) {
                    this._namespaceList.splice(i + 1, 0, ns);
                    found = true;
                    break;
                }
            }
            if (!found) {
                this._namespaceList.splice(0, 0, ns);
            }
        }
        else {
            this._namespaceList.push(ns);
        }
        this.namespacesByHostElement.set(hostElement, ns);
        return ns;
    }
    /**
     * @param {?} namespaceId
     * @param {?} hostElement
     * @return {?}
     */
    register(namespaceId, hostElement) {
        /** @type {?} */
        let ns = this._namespaceLookup[namespaceId];
        if (!ns) {
            ns = this.createNamespace(namespaceId, hostElement);
        }
        return ns;
    }
    /**
     * @param {?} namespaceId
     * @param {?} name
     * @param {?} trigger
     * @return {?}
     */
    registerTrigger(namespaceId, name, trigger) {
        /** @type {?} */
        let ns = this._namespaceLookup[namespaceId];
        if (ns && ns.register(name, trigger)) {
            this.totalAnimations++;
        }
    }
    /**
     * @param {?} namespaceId
     * @param {?} context
     * @return {?}
     */
    destroy(namespaceId, context) {
        if (!namespaceId)
            return;
        /** @type {?} */
        const ns = this._fetchNamespace(namespaceId);
        this.afterFlush((/**
         * @return {?}
         */
        () => {
            this.namespacesByHostElement.delete(ns.hostElement);
            delete this._namespaceLookup[namespaceId];
            /** @type {?} */
            const index = this._namespaceList.indexOf(ns);
            if (index >= 0) {
                this._namespaceList.splice(index, 1);
            }
        }));
        this.afterFlushAnimationsDone((/**
         * @return {?}
         */
        () => ns.destroy(context)));
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    _fetchNamespace(id) { return this._namespaceLookup[id]; }
    /**
     * @param {?} element
     * @return {?}
     */
    fetchNamespacesByElement(element) {
        // normally there should only be one namespace per element, however
        // if @triggers are placed on both the component element and then
        // its host element (within the component code) then there will be
        // two namespaces returned. We use a set here to simply the dedupe
        // of namespaces incase there are multiple triggers both the elm and host
        /** @type {?} */
        const namespaces = new Set();
        /** @type {?} */
        const elementStates = this.statesByElement.get(element);
        if (elementStates) {
            /** @type {?} */
            const keys = Object.keys(elementStates);
            for (let i = 0; i < keys.length; i++) {
                /** @type {?} */
                const nsId = elementStates[keys[i]].namespaceId;
                if (nsId) {
                    /** @type {?} */
                    const ns = this._fetchNamespace(nsId);
                    if (ns) {
                        namespaces.add(ns);
                    }
                }
            }
        }
        return namespaces;
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    trigger(namespaceId, element, name, value) {
        if (isElementNode(element)) {
            /** @type {?} */
            const ns = this._fetchNamespace(namespaceId);
            if (ns) {
                ns.trigger(element, name, value);
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} parent
     * @param {?} insertBefore
     * @return {?}
     */
    insertNode(namespaceId, element, parent, insertBefore) {
        if (!isElementNode(element))
            return;
        // special case for when an element is removed and reinserted (move operation)
        // when this occurs we do not want to use the element for deletion later
        /** @type {?} */
        const details = (/** @type {?} */ (element[REMOVAL_FLAG]));
        if (details && details.setForRemoval) {
            details.setForRemoval = false;
            details.setForMove = true;
            /** @type {?} */
            const index = this.collectedLeaveElements.indexOf(element);
            if (index >= 0) {
                this.collectedLeaveElements.splice(index, 1);
            }
        }
        // in the event that the namespaceId is blank then the caller
        // code does not contain any animation code in it, but it is
        // just being called so that the node is marked as being inserted
        if (namespaceId) {
            /** @type {?} */
            const ns = this._fetchNamespace(namespaceId);
            // This if-statement is a workaround for router issue #21947.
            // The router sometimes hits a race condition where while a route
            // is being instantiated a new navigation arrives, triggering leave
            // animation of DOM that has not been fully initialized, until this
            // is resolved, we need to handle the scenario when DOM is not in a
            // consistent state during the animation.
            if (ns) {
                ns.insertNode(element, parent);
            }
        }
        // only *directives and host elements are inserted before
        if (insertBefore) {
            this.collectEnterElement(element);
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    collectEnterElement(element) { this.collectedEnterElements.push(element); }
    /**
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    markElementAsDisabled(element, value) {
        if (value) {
            if (!this.disabledNodes.has(element)) {
                this.disabledNodes.add(element);
                addClass(element, DISABLED_CLASSNAME);
            }
        }
        else if (this.disabledNodes.has(element)) {
            this.disabledNodes.delete(element);
            removeClass(element, DISABLED_CLASSNAME);
        }
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} isHostElement
     * @param {?} context
     * @return {?}
     */
    removeNode(namespaceId, element, isHostElement, context) {
        if (isElementNode(element)) {
            /** @type {?} */
            const ns = namespaceId ? this._fetchNamespace(namespaceId) : null;
            if (ns) {
                ns.removeNode(element, context);
            }
            else {
                this.markElementAsRemoved(namespaceId, element, false, context);
            }
            if (isHostElement) {
                /** @type {?} */
                const hostNS = this.namespacesByHostElement.get(element);
                if (hostNS && hostNS.id !== namespaceId) {
                    hostNS.removeNode(element, context);
                }
            }
        }
        else {
            this._onRemovalComplete(element, context);
        }
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?=} hasAnimation
     * @param {?=} context
     * @return {?}
     */
    markElementAsRemoved(namespaceId, element, hasAnimation, context) {
        this.collectedLeaveElements.push(element);
        element[REMOVAL_FLAG] = {
            namespaceId,
            setForRemoval: context, hasAnimation,
            removedBeforeQueried: false
        };
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} name
     * @param {?} phase
     * @param {?} callback
     * @return {?}
     */
    listen(namespaceId, element, name, phase, callback) {
        if (isElementNode(element)) {
            return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
        }
        return (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @private
     * @param {?} entry
     * @param {?} subTimelines
     * @param {?} enterClassName
     * @param {?} leaveClassName
     * @param {?=} skipBuildAst
     * @return {?}
     */
    _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {
        return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);
    }
    /**
     * @param {?} containerElement
     * @return {?}
     */
    destroyInnerAnimations(containerElement) {
        /** @type {?} */
        let elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
        elements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => this.destroyActiveAnimationsForElement(element)));
        if (this.playersByQueriedElement.size == 0)
            return;
        elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
        elements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => this.finishActiveQueriedAnimationOnElement(element)));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    destroyActiveAnimationsForElement(element) {
        /** @type {?} */
        const players = this.playersByElement.get(element);
        if (players) {
            players.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => {
                // special case for when an element is set for destruction, but hasn't started.
                // in this situation we want to delay the destruction until the flush occurs
                // so that any event listeners attached to the player are triggered.
                if (player.queued) {
                    player.markedForDestroy = true;
                }
                else {
                    player.destroy();
                }
            }));
        }
    }
    /**
     * @param {?} element
     * @return {?}
     */
    finishActiveQueriedAnimationOnElement(element) {
        /** @type {?} */
        const players = this.playersByQueriedElement.get(element);
        if (players) {
            players.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => player.finish()));
        }
    }
    /**
     * @return {?}
     */
    whenRenderingDone() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        resolve => {
            if (this.players.length) {
                return optimizeGroupPlayer(this.players).onDone((/**
                 * @return {?}
                 */
                () => resolve()));
            }
            else {
                resolve();
            }
        }));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    processLeaveNode(element) {
        /** @type {?} */
        const details = (/** @type {?} */ (element[REMOVAL_FLAG]));
        if (details && details.setForRemoval) {
            // this will prevent it from removing it twice
            element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;
            if (details.namespaceId) {
                this.destroyInnerAnimations(element);
                /** @type {?} */
                const ns = this._fetchNamespace(details.namespaceId);
                if (ns) {
                    ns.clearElementCache(element);
                }
            }
            this._onRemovalComplete(element, details.setForRemoval);
        }
        if (this.driver.matchesElement(element, DISABLED_SELECTOR)) {
            this.markElementAsDisabled(element, false);
        }
        this.driver.query(element, DISABLED_SELECTOR, true).forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            this.markElementAsDisabled(node, false);
        }));
    }
    /**
     * @param {?=} microtaskId
     * @return {?}
     */
    flush(microtaskId = -1) {
        /** @type {?} */
        let players = [];
        if (this.newHostElements.size) {
            this.newHostElements.forEach((/**
             * @param {?} ns
             * @param {?} element
             * @return {?}
             */
            (ns, element) => this._balanceNamespaceList(ns, element)));
            this.newHostElements.clear();
        }
        if (this.totalAnimations && this.collectedEnterElements.length) {
            for (let i = 0; i < this.collectedEnterElements.length; i++) {
                /** @type {?} */
                const elm = this.collectedEnterElements[i];
                addClass(elm, STAR_CLASSNAME);
            }
        }
        if (this._namespaceList.length &&
            (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
            /** @type {?} */
            const cleanupFns = [];
            try {
                players = this._flushAnimations(cleanupFns, microtaskId);
            }
            finally {
                for (let i = 0; i < cleanupFns.length; i++) {
                    cleanupFns[i]();
                }
            }
        }
        else {
            for (let i = 0; i < this.collectedLeaveElements.length; i++) {
                /** @type {?} */
                const element = this.collectedLeaveElements[i];
                this.processLeaveNode(element);
            }
        }
        this.totalQueuedPlayers = 0;
        this.collectedEnterElements.length = 0;
        this.collectedLeaveElements.length = 0;
        this._flushFns.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        this._flushFns = [];
        if (this._whenQuietFns.length) {
            // we move these over to a variable so that
            // if any new callbacks are registered in another
            // flush they do not populate the existing set
            /** @type {?} */
            const quietFns = this._whenQuietFns;
            this._whenQuietFns = [];
            if (players.length) {
                optimizeGroupPlayer(players).onDone((/**
                 * @return {?}
                 */
                () => { quietFns.forEach((/**
                 * @param {?} fn
                 * @return {?}
                 */
                fn => fn())); }));
            }
            else {
                quietFns.forEach((/**
                 * @param {?} fn
                 * @return {?}
                 */
                fn => fn()));
            }
        }
    }
    /**
     * @param {?} errors
     * @return {?}
     */
    reportError(errors) {
        throw new Error(`Unable to process animations due to the following failed trigger transitions\n ${errors.join('\n')}`);
    }
    /**
     * @private
     * @param {?} cleanupFns
     * @param {?} microtaskId
     * @return {?}
     */
    _flushAnimations(cleanupFns, microtaskId) {
        /** @type {?} */
        const subTimelines = new ElementInstructionMap();
        /** @type {?} */
        const skippedPlayers = [];
        /** @type {?} */
        const skippedPlayersMap = new Map();
        /** @type {?} */
        const queuedInstructions = [];
        /** @type {?} */
        const queriedElements = new Map();
        /** @type {?} */
        const allPreStyleElements = new Map();
        /** @type {?} */
        const allPostStyleElements = new Map();
        /** @type {?} */
        const disabledElementsSet = new Set();
        this.disabledNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            disabledElementsSet.add(node);
            /** @type {?} */
            const nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);
            for (let i = 0; i < nodesThatAreDisabled.length; i++) {
                disabledElementsSet.add(nodesThatAreDisabled[i]);
            }
        }));
        /** @type {?} */
        const bodyNode = this.bodyNode;
        /** @type {?} */
        const allTriggerElements = Array.from(this.statesByElement.keys());
        /** @type {?} */
        const enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);
        // this must occur before the instructions are built below such that
        // the :enter queries match the elements (since the timeline queries
        // are fired during instruction building).
        /** @type {?} */
        const enterNodeMapIds = new Map();
        /** @type {?} */
        let i = 0;
        enterNodeMap.forEach((/**
         * @param {?} nodes
         * @param {?} root
         * @return {?}
         */
        (nodes, root) => {
            /** @type {?} */
            const className = ENTER_CLASSNAME + i++;
            enterNodeMapIds.set(root, className);
            nodes.forEach((/**
             * @param {?} node
             * @return {?}
             */
            node => addClass(node, className)));
        }));
        /** @type {?} */
        const allLeaveNodes = [];
        /** @type {?} */
        const mergedLeaveNodes = new Set();
        /** @type {?} */
        const leaveNodesWithoutAnimations = new Set();
        for (let i = 0; i < this.collectedLeaveElements.length; i++) {
            /** @type {?} */
            const element = this.collectedLeaveElements[i];
            /** @type {?} */
            const details = (/** @type {?} */ (element[REMOVAL_FLAG]));
            if (details && details.setForRemoval) {
                allLeaveNodes.push(element);
                mergedLeaveNodes.add(element);
                if (details.hasAnimation) {
                    this.driver.query(element, STAR_SELECTOR, true).forEach((/**
                     * @param {?} elm
                     * @return {?}
                     */
                    elm => mergedLeaveNodes.add(elm)));
                }
                else {
                    leaveNodesWithoutAnimations.add(element);
                }
            }
        }
        /** @type {?} */
        const leaveNodeMapIds = new Map();
        /** @type {?} */
        const leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
        leaveNodeMap.forEach((/**
         * @param {?} nodes
         * @param {?} root
         * @return {?}
         */
        (nodes, root) => {
            /** @type {?} */
            const className = LEAVE_CLASSNAME + i++;
            leaveNodeMapIds.set(root, className);
            nodes.forEach((/**
             * @param {?} node
             * @return {?}
             */
            node => addClass(node, className)));
        }));
        cleanupFns.push((/**
         * @return {?}
         */
        () => {
            enterNodeMap.forEach((/**
             * @param {?} nodes
             * @param {?} root
             * @return {?}
             */
            (nodes, root) => {
                /** @type {?} */
                const className = (/** @type {?} */ (enterNodeMapIds.get(root)));
                nodes.forEach((/**
                 * @param {?} node
                 * @return {?}
                 */
                node => removeClass(node, className)));
            }));
            leaveNodeMap.forEach((/**
             * @param {?} nodes
             * @param {?} root
             * @return {?}
             */
            (nodes, root) => {
                /** @type {?} */
                const className = (/** @type {?} */ (leaveNodeMapIds.get(root)));
                nodes.forEach((/**
                 * @param {?} node
                 * @return {?}
                 */
                node => removeClass(node, className)));
            }));
            allLeaveNodes.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => { this.processLeaveNode(element); }));
        }));
        /** @type {?} */
        const allPlayers = [];
        /** @type {?} */
        const erroneousTransitions = [];
        for (let i = this._namespaceList.length - 1; i >= 0; i--) {
            /** @type {?} */
            const ns = this._namespaceList[i];
            ns.drainQueuedTransitions(microtaskId).forEach((/**
             * @param {?} entry
             * @return {?}
             */
            entry => {
                /** @type {?} */
                const player = entry.player;
                /** @type {?} */
                const element = entry.element;
                allPlayers.push(player);
                if (this.collectedEnterElements.length) {
                    /** @type {?} */
                    const details = (/** @type {?} */ (element[REMOVAL_FLAG]));
                    // move animations are currently not supported...
                    if (details && details.setForMove) {
                        player.destroy();
                        return;
                    }
                }
                /** @type {?} */
                const nodeIsOrphaned = !bodyNode || !this.driver.containsElement(bodyNode, element);
                /** @type {?} */
                const leaveClassName = (/** @type {?} */ (leaveNodeMapIds.get(element)));
                /** @type {?} */
                const enterClassName = (/** @type {?} */ (enterNodeMapIds.get(element)));
                /** @type {?} */
                const instruction = (/** @type {?} */ (this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned)));
                if (instruction.errors && instruction.errors.length) {
                    erroneousTransitions.push(instruction);
                    return;
                }
                // even though the element may not be apart of the DOM, it may
                // still be added at a later point (due to the mechanics of content
                // projection and/or dynamic component insertion) therefore it's
                // important we still style the element.
                if (nodeIsOrphaned) {
                    player.onStart((/**
                     * @return {?}
                     */
                    () => eraseStyles(element, instruction.fromStyles)));
                    player.onDestroy((/**
                     * @return {?}
                     */
                    () => setStyles(element, instruction.toStyles)));
                    skippedPlayers.push(player);
                    return;
                }
                // if a unmatched transition is queued to go then it SHOULD NOT render
                // an animation and cancel the previously running animations.
                if (entry.isFallbackTransition) {
                    player.onStart((/**
                     * @return {?}
                     */
                    () => eraseStyles(element, instruction.fromStyles)));
                    player.onDestroy((/**
                     * @return {?}
                     */
                    () => setStyles(element, instruction.toStyles)));
                    skippedPlayers.push(player);
                    return;
                }
                // this means that if a parent animation uses this animation as a sub trigger
                // then it will instruct the timeline builder to not add a player delay, but
                // instead stretch the first keyframe gap up until the animation starts. The
                // reason this is important is to prevent extra initialization styles from being
                // required by the user in the animation.
                instruction.timelines.forEach((/**
                 * @param {?} tl
                 * @return {?}
                 */
                tl => tl.stretchStartingKeyframe = true));
                subTimelines.append(element, instruction.timelines);
                /** @type {?} */
                const tuple = { instruction, player, element };
                queuedInstructions.push(tuple);
                instruction.queriedElements.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => getOrSetAsInMap(queriedElements, element, []).push(player)));
                instruction.preStyleProps.forEach((/**
                 * @param {?} stringMap
                 * @param {?} element
                 * @return {?}
                 */
                (stringMap, element) => {
                    /** @type {?} */
                    const props = Object.keys(stringMap);
                    if (props.length) {
                        /** @type {?} */
                        let setVal = (/** @type {?} */ (allPreStyleElements.get(element)));
                        if (!setVal) {
                            allPreStyleElements.set(element, setVal = new Set());
                        }
                        props.forEach((/**
                         * @param {?} prop
                         * @return {?}
                         */
                        prop => setVal.add(prop)));
                    }
                }));
                instruction.postStyleProps.forEach((/**
                 * @param {?} stringMap
                 * @param {?} element
                 * @return {?}
                 */
                (stringMap, element) => {
                    /** @type {?} */
                    const props = Object.keys(stringMap);
                    /** @type {?} */
                    let setVal = (/** @type {?} */ (allPostStyleElements.get(element)));
                    if (!setVal) {
                        allPostStyleElements.set(element, setVal = new Set());
                    }
                    props.forEach((/**
                     * @param {?} prop
                     * @return {?}
                     */
                    prop => setVal.add(prop)));
                }));
            }));
        }
        if (erroneousTransitions.length) {
            /** @type {?} */
            const errors = [];
            erroneousTransitions.forEach((/**
             * @param {?} instruction
             * @return {?}
             */
            instruction => {
                errors.push(`@${instruction.triggerName} has failed due to:\n`);
                (/** @type {?} */ (instruction.errors)).forEach((/**
                 * @param {?} error
                 * @return {?}
                 */
                error => errors.push(`- ${error}\n`)));
            }));
            allPlayers.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => player.destroy()));
            this.reportError(errors);
        }
        /** @type {?} */
        const allPreviousPlayersMap = new Map();
        // this map works to tell which element in the DOM tree is contained by
        // which animation. Further down below this map will get populated once
        // the players are built and in doing so it can efficiently figure out
        // if a sub player is skipped due to a parent player having priority.
        /** @type {?} */
        const animationElementMap = new Map();
        queuedInstructions.forEach((/**
         * @param {?} entry
         * @return {?}
         */
        entry => {
            /** @type {?} */
            const element = entry.element;
            if (subTimelines.has(element)) {
                animationElementMap.set(element, element);
                this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
            }
        }));
        skippedPlayers.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            /** @type {?} */
            const element = player.element;
            /** @type {?} */
            const previousPlayers = this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);
            previousPlayers.forEach((/**
             * @param {?} prevPlayer
             * @return {?}
             */
            prevPlayer => {
                getOrSetAsInMap(allPreviousPlayersMap, element, []).push(prevPlayer);
                prevPlayer.destroy();
            }));
        }));
        // this is a special case for nodes that will be removed (either by)
        // having their own leave animations or by being queried in a container
        // that will be removed once a parent animation is complete. The idea
        // here is that * styles must be identical to ! styles because of
        // backwards compatibility (* is also filled in by default in many places).
        // Otherwise * styles will return an empty value or auto since the element
        // that is being getComputedStyle'd will not be visible (since * = destination)
        /** @type {?} */
        const replaceNodes = allLeaveNodes.filter((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
        }));
        // POST STAGE: fill the * styles
        /** @type {?} */
        const postStylesMap = new Map();
        /** @type {?} */
        const allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_0__["AUTO_STYLE"]);
        allLeaveQueriedNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
                replaceNodes.push(node);
            }
        }));
        // PRE STAGE: fill the ! styles
        /** @type {?} */
        const preStylesMap = new Map();
        enterNodeMap.forEach((/**
         * @param {?} nodes
         * @param {?} root
         * @return {?}
         */
        (nodes, root) => {
            cloakAndComputeStyles(preStylesMap, this.driver, new Set(nodes), allPreStyleElements, _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵPRE_STYLE"]);
        }));
        replaceNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            /** @type {?} */
            const post = postStylesMap.get(node);
            /** @type {?} */
            const pre = preStylesMap.get(node);
            postStylesMap.set(node, (/** @type {?} */ (Object.assign(Object.assign({}, post), pre))));
        }));
        /** @type {?} */
        const rootPlayers = [];
        /** @type {?} */
        const subPlayers = [];
        /** @type {?} */
        const NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
        queuedInstructions.forEach((/**
         * @param {?} entry
         * @return {?}
         */
        entry => {
            const { element, player, instruction } = entry;
            // this means that it was never consumed by a parent animation which
            // means that it is independent and therefore should be set for animation
            if (subTimelines.has(element)) {
                if (disabledElementsSet.has(element)) {
                    player.onDestroy((/**
                     * @return {?}
                     */
                    () => setStyles(element, instruction.toStyles)));
                    player.disabled = true;
                    player.overrideTotalTime(instruction.totalTime);
                    skippedPlayers.push(player);
                    return;
                }
                // this will flow up the DOM and query the map to figure out
                // if a parent animation has priority over it. In the situation
                // that a parent is detected then it will cancel the loop. If
                // nothing is detected, or it takes a few hops to find a parent,
                // then it will fill in the missing nodes and signal them as having
                // a detected parent (or a NO_PARENT value via a special constant).
                /** @type {?} */
                let parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;
                if (animationElementMap.size > 1) {
                    /** @type {?} */
                    let elm = element;
                    /** @type {?} */
                    const parentsToAdd = [];
                    while (elm = elm.parentNode) {
                        /** @type {?} */
                        const detectedParent = animationElementMap.get(elm);
                        if (detectedParent) {
                            parentWithAnimation = detectedParent;
                            break;
                        }
                        parentsToAdd.push(elm);
                    }
                    parentsToAdd.forEach((/**
                     * @param {?} parent
                     * @return {?}
                     */
                    parent => animationElementMap.set(parent, parentWithAnimation)));
                }
                /** @type {?} */
                const innerPlayer = this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);
                player.setRealPlayer(innerPlayer);
                if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
                    rootPlayers.push(player);
                }
                else {
                    /** @type {?} */
                    const parentPlayers = this.playersByElement.get(parentWithAnimation);
                    if (parentPlayers && parentPlayers.length) {
                        player.parentPlayer = optimizeGroupPlayer(parentPlayers);
                    }
                    skippedPlayers.push(player);
                }
            }
            else {
                eraseStyles(element, instruction.fromStyles);
                player.onDestroy((/**
                 * @return {?}
                 */
                () => setStyles(element, instruction.toStyles)));
                // there still might be a ancestor player animating this
                // element therefore we will still add it as a sub player
                // even if its animation may be disabled
                subPlayers.push(player);
                if (disabledElementsSet.has(element)) {
                    skippedPlayers.push(player);
                }
            }
        }));
        // find all of the sub players' corresponding inner animation player
        subPlayers.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            // even if any players are not found for a sub animation then it
            // will still complete itself after the next tick since it's Noop
            /** @type {?} */
            const playersForElement = skippedPlayersMap.get(player.element);
            if (playersForElement && playersForElement.length) {
                /** @type {?} */
                const innerPlayer = optimizeGroupPlayer(playersForElement);
                player.setRealPlayer(innerPlayer);
            }
        }));
        // the reason why we don't actually play the animation is
        // because all that a skipped player is designed to do is to
        // fire the start/done transition callback events
        skippedPlayers.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            if (player.parentPlayer) {
                player.syncPlayerEvents(player.parentPlayer);
            }
            else {
                player.destroy();
            }
        }));
        // run through all of the queued removals and see if they
        // were picked up by a query. If not then perform the removal
        // operation right away unless a parent animation is ongoing.
        for (let i = 0; i < allLeaveNodes.length; i++) {
            /** @type {?} */
            const element = allLeaveNodes[i];
            /** @type {?} */
            const details = (/** @type {?} */ (element[REMOVAL_FLAG]));
            removeClass(element, LEAVE_CLASSNAME);
            // this means the element has a removal animation that is being
            // taken care of and therefore the inner elements will hang around
            // until that animation is over (or the parent queried animation)
            if (details && details.hasAnimation)
                continue;
            /** @type {?} */
            let players = [];
            // if this element is queried or if it contains queried children
            // then we want for the element not to be removed from the page
            // until the queried animations have finished
            if (queriedElements.size) {
                /** @type {?} */
                let queriedPlayerResults = queriedElements.get(element);
                if (queriedPlayerResults && queriedPlayerResults.length) {
                    players.push(...queriedPlayerResults);
                }
                /** @type {?} */
                let queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);
                for (let j = 0; j < queriedInnerElements.length; j++) {
                    /** @type {?} */
                    let queriedPlayers = queriedElements.get(queriedInnerElements[j]);
                    if (queriedPlayers && queriedPlayers.length) {
                        players.push(...queriedPlayers);
                    }
                }
            }
            /** @type {?} */
            const activePlayers = players.filter((/**
             * @param {?} p
             * @return {?}
             */
            p => !p.destroyed));
            if (activePlayers.length) {
                removeNodesAfterAnimationDone(this, element, activePlayers);
            }
            else {
                this.processLeaveNode(element);
            }
        }
        // this is required so the cleanup method doesn't remove them
        allLeaveNodes.length = 0;
        rootPlayers.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            this.players.push(player);
            player.onDone((/**
             * @return {?}
             */
            () => {
                player.destroy();
                /** @type {?} */
                const index = this.players.indexOf(player);
                this.players.splice(index, 1);
            }));
            player.play();
        }));
        return rootPlayers;
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @return {?}
     */
    elementContainsData(namespaceId, element) {
        /** @type {?} */
        let containsData = false;
        /** @type {?} */
        const details = (/** @type {?} */ (element[REMOVAL_FLAG]));
        if (details && details.setForRemoval)
            containsData = true;
        if (this.playersByElement.has(element))
            containsData = true;
        if (this.playersByQueriedElement.has(element))
            containsData = true;
        if (this.statesByElement.has(element))
            containsData = true;
        return this._fetchNamespace(namespaceId).elementContainsData(element) || containsData;
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    afterFlush(callback) { this._flushFns.push(callback); }
    /**
     * @param {?} callback
     * @return {?}
     */
    afterFlushAnimationsDone(callback) { this._whenQuietFns.push(callback); }
    /**
     * @private
     * @param {?} element
     * @param {?} isQueriedElement
     * @param {?=} namespaceId
     * @param {?=} triggerName
     * @param {?=} toStateValue
     * @return {?}
     */
    _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {
        /** @type {?} */
        let players = [];
        if (isQueriedElement) {
            /** @type {?} */
            const queriedElementPlayers = this.playersByQueriedElement.get(element);
            if (queriedElementPlayers) {
                players = queriedElementPlayers;
            }
        }
        else {
            /** @type {?} */
            const elementPlayers = this.playersByElement.get(element);
            if (elementPlayers) {
                /** @type {?} */
                const isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;
                elementPlayers.forEach((/**
                 * @param {?} player
                 * @return {?}
                 */
                player => {
                    if (player.queued)
                        return;
                    if (!isRemovalAnimation && player.triggerName != triggerName)
                        return;
                    players.push(player);
                }));
            }
        }
        if (namespaceId || triggerName) {
            players = players.filter((/**
             * @param {?} player
             * @return {?}
             */
            player => {
                if (namespaceId && namespaceId != player.namespaceId)
                    return false;
                if (triggerName && triggerName != player.triggerName)
                    return false;
                return true;
            }));
        }
        return players;
    }
    /**
     * @private
     * @param {?} namespaceId
     * @param {?} instruction
     * @param {?} allPreviousPlayersMap
     * @return {?}
     */
    _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {
        /** @type {?} */
        const triggerName = instruction.triggerName;
        /** @type {?} */
        const rootElement = instruction.element;
        // when a removal animation occurs, ALL previous players are collected
        // and destroyed (even if they are outside of the current namespace)
        /** @type {?} */
        const targetNameSpaceId = instruction.isRemovalTransition ? undefined : namespaceId;
        /** @type {?} */
        const targetTriggerName = instruction.isRemovalTransition ? undefined : triggerName;
        for (const timelineInstruction of instruction.timelines) {
            /** @type {?} */
            const element = timelineInstruction.element;
            /** @type {?} */
            const isQueriedElement = element !== rootElement;
            /** @type {?} */
            const players = getOrSetAsInMap(allPreviousPlayersMap, element, []);
            /** @type {?} */
            const previousPlayers = this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);
            previousPlayers.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => {
                /** @type {?} */
                const realPlayer = (/** @type {?} */ (((/** @type {?} */ (player))).getRealPlayer()));
                if (realPlayer.beforeDestroy) {
                    realPlayer.beforeDestroy();
                }
                player.destroy();
                players.push(player);
            }));
        }
        // this needs to be done so that the PRE/POST styles can be
        // computed properly without interfering with the previous animation
        eraseStyles(rootElement, instruction.fromStyles);
    }
    /**
     * @private
     * @param {?} namespaceId
     * @param {?} instruction
     * @param {?} allPreviousPlayersMap
     * @param {?} skippedPlayersMap
     * @param {?} preStylesMap
     * @param {?} postStylesMap
     * @return {?}
     */
    _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
        /** @type {?} */
        const triggerName = instruction.triggerName;
        /** @type {?} */
        const rootElement = instruction.element;
        // we first run this so that the previous animation player
        // data can be passed into the successive animation players
        /** @type {?} */
        const allQueriedPlayers = [];
        /** @type {?} */
        const allConsumedElements = new Set();
        /** @type {?} */
        const allSubElements = new Set();
        /** @type {?} */
        const allNewPlayers = instruction.timelines.map((/**
         * @param {?} timelineInstruction
         * @return {?}
         */
        timelineInstruction => {
            /** @type {?} */
            const element = timelineInstruction.element;
            allConsumedElements.add(element);
            // FIXME (matsko): make sure to-be-removed animations are removed properly
            /** @type {?} */
            const details = element[REMOVAL_FLAG];
            if (details && details.removedBeforeQueried)
                return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"](timelineInstruction.duration, timelineInstruction.delay);
            /** @type {?} */
            const isQueriedElement = element !== rootElement;
            /** @type {?} */
            const previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY)
                .map((/**
             * @param {?} p
             * @return {?}
             */
            p => p.getRealPlayer())))
                .filter((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                // the `element` is not apart of the AnimationPlayer definition, but
                // Mock/WebAnimations
                // use the element within their implementation. This will be added in Angular5 to
                // AnimationPlayer
                /** @type {?} */
                const pp = (/** @type {?} */ (p));
                return pp.element ? pp.element === element : false;
            }));
            /** @type {?} */
            const preStyles = preStylesMap.get(element);
            /** @type {?} */
            const postStyles = postStylesMap.get(element);
            /** @type {?} */
            const keyframes = normalizeKeyframes(this.driver, this._normalizer, element, timelineInstruction.keyframes, preStyles, postStyles);
            /** @type {?} */
            const player = this._buildPlayer(timelineInstruction, keyframes, previousPlayers);
            // this means that this particular player belongs to a sub trigger. It is
            // important that we match this player up with the corresponding (@trigger.listener)
            if (timelineInstruction.subTimeline && skippedPlayersMap) {
                allSubElements.add(element);
            }
            if (isQueriedElement) {
                /** @type {?} */
                const wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
                wrappedPlayer.setRealPlayer(player);
                allQueriedPlayers.push(wrappedPlayer);
            }
            return player;
        }));
        allQueriedPlayers.forEach((/**
         * @param {?} player
         * @return {?}
         */
        player => {
            getOrSetAsInMap(this.playersByQueriedElement, player.element, []).push(player);
            player.onDone((/**
             * @return {?}
             */
            () => deleteOrUnsetInMap(this.playersByQueriedElement, player.element, player)));
        }));
        allConsumedElements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => addClass(element, NG_ANIMATING_CLASSNAME)));
        /** @type {?} */
        const player = optimizeGroupPlayer(allNewPlayers);
        player.onDestroy((/**
         * @return {?}
         */
        () => {
            allConsumedElements.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => removeClass(element, NG_ANIMATING_CLASSNAME)));
            setStyles(rootElement, instruction.toStyles);
        }));
        // this basically makes all of the callbacks for sub element animations
        // be dependent on the upper players for when they finish
        allSubElements.forEach((/**
         * @param {?} element
         * @return {?}
         */
        element => { getOrSetAsInMap(skippedPlayersMap, element, []).push(player); }));
        return player;
    }
    /**
     * @private
     * @param {?} instruction
     * @param {?} keyframes
     * @param {?} previousPlayers
     * @return {?}
     */
    _buildPlayer(instruction, keyframes, previousPlayers) {
        if (keyframes.length > 0) {
            return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
        }
        // special case for when an empty transition|definition is provided
        // ... there is no point in rendering an empty animation
        return new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"](instruction.duration, instruction.delay);
    }
}
if (false) {}
class TransitionAnimationPlayer {
    /**
     * @param {?} namespaceId
     * @param {?} triggerName
     * @param {?} element
     */
    constructor(namespaceId, triggerName, element) {
        this.namespaceId = namespaceId;
        this.triggerName = triggerName;
        this.element = element;
        this._player = new _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"]();
        this._containsRealPlayer = false;
        this._queuedCallbacks = {};
        this.destroyed = false;
        this.markedForDestroy = false;
        this.disabled = false;
        this.queued = true;
        this.totalTime = 0;
    }
    /**
     * @param {?} player
     * @return {?}
     */
    setRealPlayer(player) {
        if (this._containsRealPlayer)
            return;
        this._player = player;
        Object.keys(this._queuedCallbacks).forEach((/**
         * @param {?} phase
         * @return {?}
         */
        phase => {
            this._queuedCallbacks[phase].forEach((/**
             * @param {?} callback
             * @return {?}
             */
            callback => listenOnPlayer(player, phase, undefined, callback)));
        }));
        this._queuedCallbacks = {};
        this._containsRealPlayer = true;
        this.overrideTotalTime(player.totalTime);
        ((/** @type {?} */ (this))).queued = false;
    }
    /**
     * @return {?}
     */
    getRealPlayer() { return this._player; }
    /**
     * @param {?} totalTime
     * @return {?}
     */
    overrideTotalTime(totalTime) { ((/** @type {?} */ (this))).totalTime = totalTime; }
    /**
     * @param {?} player
     * @return {?}
     */
    syncPlayerEvents(player) {
        /** @type {?} */
        const p = (/** @type {?} */ (this._player));
        if (p.triggerCallback) {
            player.onStart((/**
             * @return {?}
             */
            () => (/** @type {?} */ (p.triggerCallback))('start')));
        }
        player.onDone((/**
         * @return {?}
         */
        () => this.finish()));
        player.onDestroy((/**
         * @return {?}
         */
        () => this.destroy()));
    }
    /**
     * @private
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    _queueEvent(name, callback) {
        getOrSetAsInMap(this._queuedCallbacks, name, []).push(callback);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDone(fn) {
        if (this.queued) {
            this._queueEvent('done', fn);
        }
        this._player.onDone(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onStart(fn) {
        if (this.queued) {
            this._queueEvent('start', fn);
        }
        this._player.onStart(fn);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDestroy(fn) {
        if (this.queued) {
            this._queueEvent('destroy', fn);
        }
        this._player.onDestroy(fn);
    }
    /**
     * @return {?}
     */
    init() { this._player.init(); }
    /**
     * @return {?}
     */
    hasStarted() { return this.queued ? false : this._player.hasStarted(); }
    /**
     * @return {?}
     */
    play() { !this.queued && this._player.play(); }
    /**
     * @return {?}
     */
    pause() { !this.queued && this._player.pause(); }
    /**
     * @return {?}
     */
    restart() { !this.queued && this._player.restart(); }
    /**
     * @return {?}
     */
    finish() { this._player.finish(); }
    /**
     * @return {?}
     */
    destroy() {
        ((/** @type {?} */ (this))).destroyed = true;
        this._player.destroy();
    }
    /**
     * @return {?}
     */
    reset() { !this.queued && this._player.reset(); }
    /**
     * @param {?} p
     * @return {?}
     */
    setPosition(p) {
        if (!this.queued) {
            this._player.setPosition(p);
        }
    }
    /**
     * @return {?}
     */
    getPosition() { return this.queued ? 0 : this._player.getPosition(); }
    /**
     * \@internal
     * @param {?} phaseName
     * @return {?}
     */
    triggerCallback(phaseName) {
        /** @type {?} */
        const p = (/** @type {?} */ (this._player));
        if (p.triggerCallback) {
            p.triggerCallback(phaseName);
        }
    }
}
if (false) {}
/**
 * @param {?} map
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function deleteOrUnsetInMap(map, key, value) {
    /** @type {?} */
    let currentValues;
    if (map instanceof Map) {
        currentValues = map.get(key);
        if (currentValues) {
            if (currentValues.length) {
                /** @type {?} */
                const index = currentValues.indexOf(value);
                currentValues.splice(index, 1);
            }
            if (currentValues.length == 0) {
                map.delete(key);
            }
        }
    }
    else {
        currentValues = map[key];
        if (currentValues) {
            if (currentValues.length) {
                /** @type {?} */
                const index = currentValues.indexOf(value);
                currentValues.splice(index, 1);
            }
            if (currentValues.length == 0) {
                delete map[key];
            }
        }
    }
    return currentValues;
}
/**
 * @param {?} value
 * @return {?}
 */
function normalizeTriggerValue(value) {
    // we use `!= null` here because it's the most simple
    // way to test against a "falsy" value without mixing
    // in empty strings or a zero value. DO NOT OPTIMIZE.
    return value != null ? value : null;
}
/**
 * @param {?} node
 * @return {?}
 */
function isElementNode(node) {
    return node && node['nodeType'] === 1;
}
/**
 * @param {?} eventName
 * @return {?}
 */
function isTriggerEventValid(eventName) {
    return eventName == 'start' || eventName == 'done';
}
/**
 * @param {?} element
 * @param {?=} value
 * @return {?}
 */
function cloakElement(element, value) {
    /** @type {?} */
    const oldValue = element.style.display;
    element.style.display = value != null ? value : 'none';
    return oldValue;
}
/**
 * @param {?} valuesMap
 * @param {?} driver
 * @param {?} elements
 * @param {?} elementPropsMap
 * @param {?} defaultStyle
 * @return {?}
 */
function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
    /** @type {?} */
    const cloakVals = [];
    elements.forEach((/**
     * @param {?} element
     * @return {?}
     */
    element => cloakVals.push(cloakElement(element))));
    /** @type {?} */
    const failedElements = [];
    elementPropsMap.forEach((/**
     * @param {?} props
     * @param {?} element
     * @return {?}
     */
    (props, element) => {
        /** @type {?} */
        const styles = {};
        props.forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            const value = styles[prop] = driver.computeStyle(element, prop, defaultStyle);
            // there is no easy way to detect this because a sub element could be removed
            // by a parent animation element being detached.
            if (!value || value.length == 0) {
                element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
                failedElements.push(element);
            }
        }));
        valuesMap.set(element, styles);
    }));
    // we use a index variable here since Set.forEach(a, i) does not return
    // an index value for the closure (but instead just the value)
    /** @type {?} */
    let i = 0;
    elements.forEach((/**
     * @param {?} element
     * @return {?}
     */
    element => cloakElement(element, cloakVals[i++])));
    return failedElements;
}
/*
Since the Angular renderer code will return a collection of inserted
nodes in all areas of a DOM tree, it's up to this algorithm to figure
out which nodes are roots for each animation @trigger.

By placing each inserted node into a Set and traversing upwards, it
is possible to find the @trigger elements and well any direct *star
insertion nodes, if a @trigger root is found then the enter element
is placed into the Map[@trigger] spot.
 */
/**
 * @param {?} roots
 * @param {?} nodes
 * @return {?}
 */
function buildRootMap(roots, nodes) {
    /** @type {?} */
    const rootMap = new Map();
    roots.forEach((/**
     * @param {?} root
     * @return {?}
     */
    root => rootMap.set(root, [])));
    if (nodes.length == 0)
        return rootMap;
    /** @type {?} */
    const NULL_NODE = 1;
    /** @type {?} */
    const nodeSet = new Set(nodes);
    /** @type {?} */
    const localRootMap = new Map();
    /**
     * @param {?} node
     * @return {?}
     */
    function getRoot(node) {
        if (!node)
            return NULL_NODE;
        /** @type {?} */
        let root = localRootMap.get(node);
        if (root)
            return root;
        /** @type {?} */
        const parent = node.parentNode;
        if (rootMap.has(parent)) { // ngIf inside @trigger
            root = parent;
        }
        else if (nodeSet.has(parent)) { // ngIf inside ngIf
            root = NULL_NODE;
        }
        else { // recurse upwards
            root = getRoot(parent);
        }
        localRootMap.set(node, root);
        return root;
    }
    nodes.forEach((/**
     * @param {?} node
     * @return {?}
     */
    node => {
        /** @type {?} */
        const root = getRoot(node);
        if (root !== NULL_NODE) {
            (/** @type {?} */ (rootMap.get(root))).push(node);
        }
    }));
    return rootMap;
}
/** @type {?} */
const CLASSES_CACHE_KEY = '$$classes';
/**
 * @param {?} element
 * @param {?} className
 * @return {?}
 */
function containsClass(element, className) {
    if (element.classList) {
        return element.classList.contains(className);
    }
    else {
        /** @type {?} */
        const classes = element[CLASSES_CACHE_KEY];
        return classes && classes[className];
    }
}
/**
 * @param {?} element
 * @param {?} className
 * @return {?}
 */
function addClass(element, className) {
    if (element.classList) {
        element.classList.add(className);
    }
    else {
        /** @type {?} */
        let classes = element[CLASSES_CACHE_KEY];
        if (!classes) {
            classes = element[CLASSES_CACHE_KEY] = {};
        }
        classes[className] = true;
    }
}
/**
 * @param {?} element
 * @param {?} className
 * @return {?}
 */
function removeClass(element, className) {
    if (element.classList) {
        element.classList.remove(className);
    }
    else {
        /** @type {?} */
        let classes = element[CLASSES_CACHE_KEY];
        if (classes) {
            delete classes[className];
        }
    }
}
/**
 * @param {?} engine
 * @param {?} element
 * @param {?} players
 * @return {?}
 */
function removeNodesAfterAnimationDone(engine, element, players) {
    optimizeGroupPlayer(players).onDone((/**
     * @return {?}
     */
    () => engine.processLeaveNode(element)));
}
/**
 * @param {?} players
 * @return {?}
 */
function flattenGroupPlayers(players) {
    /** @type {?} */
    const finalPlayers = [];
    _flattenGroupPlayersRecur(players, finalPlayers);
    return finalPlayers;
}
/**
 * @param {?} players
 * @param {?} finalPlayers
 * @return {?}
 */
function _flattenGroupPlayersRecur(players, finalPlayers) {
    for (let i = 0; i < players.length; i++) {
        /** @type {?} */
        const player = players[i];
        if (player instanceof _angular_animations__WEBPACK_IMPORTED_MODULE_0__["ɵAnimationGroupPlayer"]) {
            _flattenGroupPlayersRecur(player.players, finalPlayers);
        }
        else {
            finalPlayers.push(player);
        }
    }
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function objEquals(a, b) {
    /** @type {?} */
    const k1 = Object.keys(a);
    /** @type {?} */
    const k2 = Object.keys(b);
    if (k1.length != k2.length)
        return false;
    for (let i = 0; i < k1.length; i++) {
        /** @type {?} */
        const prop = k1[i];
        if (!b.hasOwnProperty(prop) || a[prop] !== b[prop])
            return false;
    }
    return true;
}
/**
 * @param {?} element
 * @param {?} allPreStyleElements
 * @param {?} allPostStyleElements
 * @return {?}
 */
function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
    /** @type {?} */
    const postEntry = allPostStyleElements.get(element);
    if (!postEntry)
        return false;
    /** @type {?} */
    let preEntry = allPreStyleElements.get(element);
    if (preEntry) {
        postEntry.forEach((/**
         * @param {?} data
         * @return {?}
         */
        data => (/** @type {?} */ (preEntry)).add(data)));
    }
    else {
        allPreStyleElements.set(element, postEntry);
    }
    allPostStyleElements.delete(element);
    return true;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/animation_engine_next.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AnimationEngine {
    /**
     * @param {?} bodyNode
     * @param {?} _driver
     * @param {?} normalizer
     */
    constructor(bodyNode, _driver, normalizer) {
        this.bodyNode = bodyNode;
        this._driver = _driver;
        this._triggerCache = {};
        // this method is designed to be overridden by the code that uses this engine
        this.onRemovalComplete = (/**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
        (element, context) => { });
        this._transitionEngine = new TransitionAnimationEngine(bodyNode, _driver, normalizer);
        this._timelineEngine = new TimelineAnimationEngine(bodyNode, _driver, normalizer);
        this._transitionEngine.onRemovalComplete = (/**
         * @param {?} element
         * @param {?} context
         * @return {?}
         */
        (element, context) => this.onRemovalComplete(element, context));
    }
    /**
     * @param {?} componentId
     * @param {?} namespaceId
     * @param {?} hostElement
     * @param {?} name
     * @param {?} metadata
     * @return {?}
     */
    registerTrigger(componentId, namespaceId, hostElement, name, metadata) {
        /** @type {?} */
        const cacheKey = componentId + '-' + name;
        /** @type {?} */
        let trigger = this._triggerCache[cacheKey];
        if (!trigger) {
            /** @type {?} */
            const errors = [];
            /** @type {?} */
            const ast = (/** @type {?} */ (buildAnimationAst(this._driver, (/** @type {?} */ (metadata)), errors)));
            if (errors.length) {
                throw new Error(`The animation trigger "${name}" has failed to build due to the following errors:\n - ${errors.join("\n - ")}`);
            }
            trigger = buildTrigger(name, ast);
            this._triggerCache[cacheKey] = trigger;
        }
        this._transitionEngine.registerTrigger(namespaceId, name, trigger);
    }
    /**
     * @param {?} namespaceId
     * @param {?} hostElement
     * @return {?}
     */
    register(namespaceId, hostElement) {
        this._transitionEngine.register(namespaceId, hostElement);
    }
    /**
     * @param {?} namespaceId
     * @param {?} context
     * @return {?}
     */
    destroy(namespaceId, context) {
        this._transitionEngine.destroy(namespaceId, context);
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} parent
     * @param {?} insertBefore
     * @return {?}
     */
    onInsert(namespaceId, element, parent, insertBefore) {
        this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} context
     * @param {?=} isHostElement
     * @return {?}
     */
    onRemove(namespaceId, element, context, isHostElement) {
        this._transitionEngine.removeNode(namespaceId, element, isHostElement || false, context);
    }
    /**
     * @param {?} element
     * @param {?} disable
     * @return {?}
     */
    disableAnimations(element, disable) {
        this._transitionEngine.markElementAsDisabled(element, disable);
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} property
     * @param {?} value
     * @return {?}
     */
    process(namespaceId, element, property, value) {
        if (property.charAt(0) == '@') {
            const [id, action] = parseTimelineCommand(property);
            /** @type {?} */
            const args = (/** @type {?} */ (value));
            this._timelineEngine.command(id, element, action, args);
        }
        else {
            this._transitionEngine.trigger(namespaceId, element, property, value);
        }
    }
    /**
     * @param {?} namespaceId
     * @param {?} element
     * @param {?} eventName
     * @param {?} eventPhase
     * @param {?} callback
     * @return {?}
     */
    listen(namespaceId, element, eventName, eventPhase, callback) {
        // @@listen
        if (eventName.charAt(0) == '@') {
            const [id, action] = parseTimelineCommand(eventName);
            return this._timelineEngine.listen(id, element, action, callback);
        }
        return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
    }
    /**
     * @param {?=} microtaskId
     * @return {?}
     */
    flush(microtaskId = -1) { this._transitionEngine.flush(microtaskId); }
    /**
     * @return {?}
     */
    get players() {
        return ((/** @type {?} */ (this._transitionEngine.players)))
            .concat((/** @type {?} */ (this._timelineEngine.players)));
    }
    /**
     * @return {?}
     */
    whenRenderingDone() { return this._transitionEngine.whenRenderingDone(); }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/special_cased_styles.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Returns an instance of `SpecialCasedStyles` if and when any special (non animateable) styles are
 * detected.
 *
 * In CSS there exist properties that cannot be animated within a keyframe animation
 * (whether it be via CSS keyframes or web-animations) and the animation implementation
 * will ignore them. This function is designed to detect those special cased styles and
 * return a container that will be executed at the start and end of the animation.
 *
 * @param {?} element
 * @param {?} styles
 * @return {?} an instance of `SpecialCasedStyles` if any special styles are detected otherwise `null`
 */
function packageNonAnimatableStyles(element, styles) {
    /** @type {?} */
    let startStyles = null;
    /** @type {?} */
    let endStyles = null;
    if (Array.isArray(styles) && styles.length) {
        startStyles = filterNonAnimatableStyles(styles[0]);
        if (styles.length > 1) {
            endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);
        }
    }
    else if (styles) {
        startStyles = filterNonAnimatableStyles(styles);
    }
    return (startStyles || endStyles) ? new SpecialCasedStyles(element, startStyles, endStyles) :
        null;
}
/**
 * Designed to be executed during a keyframe-based animation to apply any special-cased styles.
 *
 * When started (when the `start()` method is run) then the provided `startStyles`
 * will be applied. When finished (when the `finish()` method is called) the
 * `endStyles` will be applied as well any any starting styles. Finally when
 * `destroy()` is called then all styles will be removed.
 */
class SpecialCasedStyles {
    /**
     * @param {?} _element
     * @param {?} _startStyles
     * @param {?} _endStyles
     */
    constructor(_element, _startStyles, _endStyles) {
        this._element = _element;
        this._startStyles = _startStyles;
        this._endStyles = _endStyles;
        this._state = 0 /* Pending */;
        /** @type {?} */
        let initialStyles = SpecialCasedStyles.initialStylesByElement.get(_element);
        if (!initialStyles) {
            SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = {});
        }
        this._initialStyles = initialStyles;
    }
    /**
     * @return {?}
     */
    start() {
        if (this._state < 1 /* Started */) {
            if (this._startStyles) {
                setStyles(this._element, this._startStyles, this._initialStyles);
            }
            this._state = 1 /* Started */;
        }
    }
    /**
     * @return {?}
     */
    finish() {
        this.start();
        if (this._state < 2 /* Finished */) {
            setStyles(this._element, this._initialStyles);
            if (this._endStyles) {
                setStyles(this._element, this._endStyles);
                this._endStyles = null;
            }
            this._state = 1 /* Started */;
        }
    }
    /**
     * @return {?}
     */
    destroy() {
        this.finish();
        if (this._state < 3 /* Destroyed */) {
            SpecialCasedStyles.initialStylesByElement.delete(this._element);
            if (this._startStyles) {
                eraseStyles(this._element, this._startStyles);
                this._endStyles = null;
            }
            if (this._endStyles) {
                eraseStyles(this._element, this._endStyles);
                this._endStyles = null;
            }
            setStyles(this._element, this._initialStyles);
            this._state = 3 /* Destroyed */;
        }
    }
}
SpecialCasedStyles.initialStylesByElement = new WeakMap();
if (false) {}
/** @enum {number} */
const SpecialCasedStylesState = {
    Pending: 0,
    Started: 1,
    Finished: 2,
    Destroyed: 3,
};
/**
 * @param {?} styles
 * @return {?}
 */
function filterNonAnimatableStyles(styles) {
    /** @type {?} */
    let result = null;
    /** @type {?} */
    const props = Object.keys(styles);
    for (let i = 0; i < props.length; i++) {
        /** @type {?} */
        const prop = props[i];
        if (isNonAnimatableStyle(prop)) {
            result = result || {};
            result[prop] = styles[prop];
        }
    }
    return result;
}
/**
 * @param {?} prop
 * @return {?}
 */
function isNonAnimatableStyle(prop) {
    return prop === 'display' || prop === 'position';
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/css_keyframes/element_animation_style_handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @type {?}
 */
const ELAPSED_TIME_MAX_DECIMAL_PLACES = 3;
/** @type {?} */
const ANIMATION_PROP = 'animation';
/** @type {?} */
const ANIMATIONEND_EVENT = 'animationend';
/** @type {?} */
const ONE_SECOND$1 = 1000;
class ElementAnimationStyleHandler {
    /**
     * @param {?} _element
     * @param {?} _name
     * @param {?} _duration
     * @param {?} _delay
     * @param {?} _easing
     * @param {?} _fillMode
     * @param {?} _onDoneFn
     */
    constructor(_element, _name, _duration, _delay, _easing, _fillMode, _onDoneFn) {
        this._element = _element;
        this._name = _name;
        this._duration = _duration;
        this._delay = _delay;
        this._easing = _easing;
        this._fillMode = _fillMode;
        this._onDoneFn = _onDoneFn;
        this._finished = false;
        this._destroyed = false;
        this._startTime = 0;
        this._position = 0;
        this._eventFn = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => this._handleCallback(e));
    }
    /**
     * @return {?}
     */
    apply() {
        applyKeyframeAnimation(this._element, `${this._duration}ms ${this._easing} ${this._delay}ms 1 normal ${this._fillMode} ${this._name}`);
        addRemoveAnimationEvent(this._element, this._eventFn, false);
        this._startTime = Date.now();
    }
    /**
     * @return {?}
     */
    pause() { playPauseAnimation(this._element, this._name, 'paused'); }
    /**
     * @return {?}
     */
    resume() { playPauseAnimation(this._element, this._name, 'running'); }
    /**
     * @param {?} position
     * @return {?}
     */
    setPosition(position) {
        /** @type {?} */
        const index = findIndexForAnimation(this._element, this._name);
        this._position = position * this._duration;
        setAnimationStyle(this._element, 'Delay', `-${this._position}ms`, index);
    }
    /**
     * @return {?}
     */
    getPosition() { return this._position; }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    _handleCallback(event) {
        /** @type {?} */
        const timestamp = event._ngTestManualTimestamp || Date.now();
        /** @type {?} */
        const elapsedTime = parseFloat(event.elapsedTime.toFixed(ELAPSED_TIME_MAX_DECIMAL_PLACES)) * ONE_SECOND$1;
        if (event.animationName == this._name &&
            Math.max(timestamp - this._startTime, 0) >= this._delay && elapsedTime >= this._duration) {
            this.finish();
        }
    }
    /**
     * @return {?}
     */
    finish() {
        if (this._finished)
            return;
        this._finished = true;
        this._onDoneFn();
        addRemoveAnimationEvent(this._element, this._eventFn, true);
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this._destroyed)
            return;
        this._destroyed = true;
        this.finish();
        removeKeyframeAnimation(this._element, this._name);
    }
}
if (false) {}
/**
 * @param {?} element
 * @param {?} name
 * @param {?} status
 * @return {?}
 */
function playPauseAnimation(element, name, status) {
    /** @type {?} */
    const index = findIndexForAnimation(element, name);
    setAnimationStyle(element, 'PlayState', status, index);
}
/**
 * @param {?} element
 * @param {?} value
 * @return {?}
 */
function applyKeyframeAnimation(element, value) {
    /** @type {?} */
    const anim = getAnimationStyle(element, '').trim();
    /** @type {?} */
    let index = 0;
    if (anim.length) {
        index = countChars(anim, ',') + 1;
        value = `${anim}, ${value}`;
    }
    setAnimationStyle(element, '', value);
    return index;
}
/**
 * @param {?} element
 * @param {?} name
 * @return {?}
 */
function removeKeyframeAnimation(element, name) {
    /** @type {?} */
    const anim = getAnimationStyle(element, '');
    /** @type {?} */
    const tokens = anim.split(',');
    /** @type {?} */
    const index = findMatchingTokenIndex(tokens, name);
    if (index >= 0) {
        tokens.splice(index, 1);
        /** @type {?} */
        const newValue = tokens.join(',');
        setAnimationStyle(element, '', newValue);
    }
}
/**
 * @param {?} element
 * @param {?} value
 * @return {?}
 */
function findIndexForAnimation(element, value) {
    /** @type {?} */
    const anim = getAnimationStyle(element, '');
    if (anim.indexOf(',') > 0) {
        /** @type {?} */
        const tokens = anim.split(',');
        return findMatchingTokenIndex(tokens, value);
    }
    return findMatchingTokenIndex([anim], value);
}
/**
 * @param {?} tokens
 * @param {?} searchToken
 * @return {?}
 */
function findMatchingTokenIndex(tokens, searchToken) {
    for (let i = 0; i < tokens.length; i++) {
        if (tokens[i].indexOf(searchToken) >= 0) {
            return i;
        }
    }
    return -1;
}
/**
 * @param {?} element
 * @param {?} fn
 * @param {?} doRemove
 * @return {?}
 */
function addRemoveAnimationEvent(element, fn, doRemove) {
    doRemove ? element.removeEventListener(ANIMATIONEND_EVENT, fn) :
        element.addEventListener(ANIMATIONEND_EVENT, fn);
}
/**
 * @param {?} element
 * @param {?} name
 * @param {?} value
 * @param {?=} index
 * @return {?}
 */
function setAnimationStyle(element, name, value, index) {
    /** @type {?} */
    const prop = ANIMATION_PROP + name;
    if (index != null) {
        /** @type {?} */
        const oldValue = element.style[prop];
        if (oldValue.length) {
            /** @type {?} */
            const tokens = oldValue.split(',');
            tokens[index] = value;
            value = tokens.join(',');
        }
    }
    element.style[prop] = value;
}
/**
 * @param {?} element
 * @param {?} name
 * @return {?}
 */
function getAnimationStyle(element, name) {
    return element.style[ANIMATION_PROP + name];
}
/**
 * @param {?} value
 * @param {?} char
 * @return {?}
 */
function countChars(value, char) {
    /** @type {?} */
    let count = 0;
    for (let i = 0; i < value.length; i++) {
        /** @type {?} */
        const c = value.charAt(i);
        if (c === char)
            count++;
    }
    return count;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/css_keyframes/css_keyframes_player.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const DEFAULT_FILL_MODE = 'forwards';
/** @type {?} */
const DEFAULT_EASING = 'linear';
/** @enum {number} */
const AnimatorControlState = {
    INITIALIZED: 1, STARTED: 2, FINISHED: 3, DESTROYED: 4,
};
class CssKeyframesPlayer {
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} animationName
     * @param {?} _duration
     * @param {?} _delay
     * @param {?} easing
     * @param {?} _finalStyles
     * @param {?=} _specialStyles
     */
    constructor(element, keyframes, animationName, _duration, _delay, easing, _finalStyles, _specialStyles) {
        this.element = element;
        this.keyframes = keyframes;
        this.animationName = animationName;
        this._duration = _duration;
        this._delay = _delay;
        this._finalStyles = _finalStyles;
        this._specialStyles = _specialStyles;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._onDestroyFns = [];
        this._started = false;
        this.currentSnapshot = {};
        this._state = 0;
        this.easing = easing || DEFAULT_EASING;
        this.totalTime = _duration + _delay;
        this._buildStyler();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onStart(fn) { this._onStartFns.push(fn); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDone(fn) { this._onDoneFns.push(fn); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDestroy(fn) { this._onDestroyFns.push(fn); }
    /**
     * @return {?}
     */
    destroy() {
        this.init();
        if (this._state >= 4 /* DESTROYED */)
            return;
        this._state = 4 /* DESTROYED */;
        this._styler.destroy();
        this._flushStartFns();
        this._flushDoneFns();
        if (this._specialStyles) {
            this._specialStyles.destroy();
        }
        this._onDestroyFns.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        this._onDestroyFns = [];
    }
    /**
     * @private
     * @return {?}
     */
    _flushDoneFns() {
        this._onDoneFns.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        this._onDoneFns = [];
    }
    /**
     * @private
     * @return {?}
     */
    _flushStartFns() {
        this._onStartFns.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        this._onStartFns = [];
    }
    /**
     * @return {?}
     */
    finish() {
        this.init();
        if (this._state >= 3 /* FINISHED */)
            return;
        this._state = 3 /* FINISHED */;
        this._styler.finish();
        this._flushStartFns();
        if (this._specialStyles) {
            this._specialStyles.finish();
        }
        this._flushDoneFns();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setPosition(value) { this._styler.setPosition(value); }
    /**
     * @return {?}
     */
    getPosition() { return this._styler.getPosition(); }
    /**
     * @return {?}
     */
    hasStarted() { return this._state >= 2 /* STARTED */; }
    /**
     * @return {?}
     */
    init() {
        if (this._state >= 1 /* INITIALIZED */)
            return;
        this._state = 1 /* INITIALIZED */;
        /** @type {?} */
        const elm = this.element;
        this._styler.apply();
        if (this._delay) {
            this._styler.pause();
        }
    }
    /**
     * @return {?}
     */
    play() {
        this.init();
        if (!this.hasStarted()) {
            this._flushStartFns();
            this._state = 2 /* STARTED */;
            if (this._specialStyles) {
                this._specialStyles.start();
            }
        }
        this._styler.resume();
    }
    /**
     * @return {?}
     */
    pause() {
        this.init();
        this._styler.pause();
    }
    /**
     * @return {?}
     */
    restart() {
        this.reset();
        this.play();
    }
    /**
     * @return {?}
     */
    reset() {
        this._styler.destroy();
        this._buildStyler();
        this._styler.apply();
    }
    /**
     * @private
     * @return {?}
     */
    _buildStyler() {
        this._styler = new ElementAnimationStyleHandler(this.element, this.animationName, this._duration, this._delay, this.easing, DEFAULT_FILL_MODE, (/**
         * @return {?}
         */
        () => this.finish()));
    }
    /**
     * \@internal
     * @param {?} phaseName
     * @return {?}
     */
    triggerCallback(phaseName) {
        /** @type {?} */
        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
        methods.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        methods.length = 0;
    }
    /**
     * @return {?}
     */
    beforeDestroy() {
        this.init();
        /** @type {?} */
        const styles = {};
        if (this.hasStarted()) {
            /** @type {?} */
            const finished = this._state >= 3 /* FINISHED */;
            Object.keys(this._finalStyles).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                if (prop != 'offset') {
                    styles[prop] = finished ? this._finalStyles[prop] : computeStyle(this.element, prop);
                }
            }));
        }
        this.currentSnapshot = styles;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/css_keyframes/direct_style_player.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DirectStylePlayer extends _angular_animations__WEBPACK_IMPORTED_MODULE_0__["NoopAnimationPlayer"] {
    /**
     * @param {?} element
     * @param {?} styles
     */
    constructor(element, styles) {
        super();
        this.element = element;
        this._startingStyles = {};
        this.__initialized = false;
        this._styles = hypenatePropsObject(styles);
    }
    /**
     * @return {?}
     */
    init() {
        if (this.__initialized || !this._startingStyles)
            return;
        this.__initialized = true;
        Object.keys(this._styles).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            (/** @type {?} */ (this._startingStyles))[prop] = this.element.style[prop];
        }));
        super.init();
    }
    /**
     * @return {?}
     */
    play() {
        if (!this._startingStyles)
            return;
        this.init();
        Object.keys(this._styles)
            .forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => this.element.style.setProperty(prop, this._styles[prop])));
        super.play();
    }
    /**
     * @return {?}
     */
    destroy() {
        if (!this._startingStyles)
            return;
        Object.keys(this._startingStyles).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        prop => {
            /** @type {?} */
            const value = (/** @type {?} */ (this._startingStyles))[prop];
            if (value) {
                this.element.style.setProperty(prop, value);
            }
            else {
                this.element.style.removeProperty(prop);
            }
        }));
        this._startingStyles = null;
        super.destroy();
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/css_keyframes/css_keyframes_driver.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const KEYFRAMES_NAME_PREFIX = 'gen_css_kf_';
/** @type {?} */
const TAB_SPACE = ' ';
class CssKeyframesDriver {
    constructor() {
        this._count = 0;
        this._head = document.querySelector('head');
        this._warningIssued = false;
    }
    /**
     * @param {?} prop
     * @return {?}
     */
    validateStyleProperty(prop) { return validateStyleProperty(prop); }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    matchesElement(element, selector) {
        return matchesElement(element, selector);
    }
    /**
     * @param {?} elm1
     * @param {?} elm2
     * @return {?}
     */
    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }
    /**
     * @param {?} element
     * @param {?} selector
     * @param {?} multi
     * @return {?}
     */
    query(element, selector, multi) {
        return invokeQuery(element, selector, multi);
    }
    /**
     * @param {?} element
     * @param {?} prop
     * @param {?=} defaultValue
     * @return {?}
     */
    computeStyle(element, prop, defaultValue) {
        return (/** @type {?} */ (((/** @type {?} */ (window.getComputedStyle(element))))[prop]));
    }
    /**
     * @param {?} element
     * @param {?} name
     * @param {?} keyframes
     * @return {?}
     */
    buildKeyframeElement(element, name, keyframes) {
        keyframes = keyframes.map((/**
         * @param {?} kf
         * @return {?}
         */
        kf => hypenatePropsObject(kf)));
        /** @type {?} */
        let keyframeStr = `@keyframes ${name} {\n`;
        /** @type {?} */
        let tab = '';
        keyframes.forEach((/**
         * @param {?} kf
         * @return {?}
         */
        kf => {
            tab = TAB_SPACE;
            /** @type {?} */
            const offset = parseFloat(kf['offset']);
            keyframeStr += `${tab}${offset * 100}% {\n`;
            tab += TAB_SPACE;
            Object.keys(kf).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                /** @type {?} */
                const value = kf[prop];
                switch (prop) {
                    case 'offset':
                        return;
                    case 'easing':
                        if (value) {
                            keyframeStr += `${tab}animation-timing-function: ${value};\n`;
                        }
                        return;
                    default:
                        keyframeStr += `${tab}${prop}: ${value};\n`;
                        return;
                }
            }));
            keyframeStr += `${tab}}\n`;
        }));
        keyframeStr += `}\n`;
        /** @type {?} */
        const kfElm = document.createElement('style');
        kfElm.innerHTML = keyframeStr;
        return kfElm;
    }
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @param {?=} scrubberAccessRequested
     * @return {?}
     */
    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {
        if (scrubberAccessRequested) {
            this._notifyFaultyScrubber();
        }
        /** @type {?} */
        const previousCssKeyframePlayers = (/** @type {?} */ (previousPlayers.filter((/**
         * @param {?} player
         * @return {?}
         */
        player => player instanceof CssKeyframesPlayer))));
        /** @type {?} */
        const previousStyles = {};
        if (allowPreviousPlayerStylesMerge(duration, delay)) {
            previousCssKeyframePlayers.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => {
                /** @type {?} */
                let styles = player.currentSnapshot;
                Object.keys(styles).forEach((/**
                 * @param {?} prop
                 * @return {?}
                 */
                prop => previousStyles[prop] = styles[prop]));
            }));
        }
        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
        /** @type {?} */
        const finalStyles = flattenKeyframesIntoStyles(keyframes);
        // if there is no animation then there is no point in applying
        // styles and waiting for an event to get fired. This causes lag.
        // It's better to just directly apply the styles to the element
        // via the direct styling animation player.
        if (duration == 0) {
            return new DirectStylePlayer(element, finalStyles);
        }
        /** @type {?} */
        const animationName = `${KEYFRAMES_NAME_PREFIX}${this._count++}`;
        /** @type {?} */
        const kfElm = this.buildKeyframeElement(element, animationName, keyframes);
        (/** @type {?} */ (document.querySelector('head'))).appendChild(kfElm);
        /** @type {?} */
        const specialStyles = packageNonAnimatableStyles(element, keyframes);
        /** @type {?} */
        const player = new CssKeyframesPlayer(element, keyframes, animationName, duration, delay, easing, finalStyles, specialStyles);
        player.onDestroy((/**
         * @return {?}
         */
        () => removeElement(kfElm)));
        return player;
    }
    /**
     * @private
     * @return {?}
     */
    _notifyFaultyScrubber() {
        if (!this._warningIssued) {
            console.warn('@angular/animations: please load the web-animations.js polyfill to allow programmatic access...\n', '  visit http://bit.ly/IWukam to learn more about using the web-animation-js polyfill.');
            this._warningIssued = true;
        }
    }
}
if (false) {}
/**
 * @param {?} keyframes
 * @return {?}
 */
function flattenKeyframesIntoStyles(keyframes) {
    /** @type {?} */
    let flatKeyframes = {};
    if (keyframes) {
        /** @type {?} */
        const kfs = Array.isArray(keyframes) ? keyframes : [keyframes];
        kfs.forEach((/**
         * @param {?} kf
         * @return {?}
         */
        kf => {
            Object.keys(kf).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                if (prop == 'offset' || prop == 'easing')
                    return;
                flatKeyframes[prop] = kf[prop];
            }));
        }));
    }
    return flatKeyframes;
}
/**
 * @param {?} node
 * @return {?}
 */
function removeElement(node) {
    node.parentNode.removeChild(node);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/web_animations/web_animations_player.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WebAnimationsPlayer {
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @param {?=} _specialStyles
     */
    constructor(element, keyframes, options, _specialStyles) {
        this.element = element;
        this.keyframes = keyframes;
        this.options = options;
        this._specialStyles = _specialStyles;
        this._onDoneFns = [];
        this._onStartFns = [];
        this._onDestroyFns = [];
        this._initialized = false;
        this._finished = false;
        this._started = false;
        this._destroyed = false;
        this.time = 0;
        this.parentPlayer = null;
        this.currentSnapshot = {};
        this._duration = (/** @type {?} */ (options['duration']));
        this._delay = (/** @type {?} */ (options['delay'])) || 0;
        this.time = this._duration + this._delay;
    }
    /**
     * @private
     * @return {?}
     */
    _onFinish() {
        if (!this._finished) {
            this._finished = true;
            this._onDoneFns.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._onDoneFns = [];
        }
    }
    /**
     * @return {?}
     */
    init() {
        this._buildPlayer();
        this._preparePlayerBeforeStart();
    }
    /**
     * @private
     * @return {?}
     */
    _buildPlayer() {
        if (this._initialized)
            return;
        this._initialized = true;
        /** @type {?} */
        const keyframes = this.keyframes;
        ((/** @type {?} */ (this))).domPlayer =
            this._triggerWebAnimation(this.element, keyframes, this.options);
        this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : {};
        this.domPlayer.addEventListener('finish', (/**
         * @return {?}
         */
        () => this._onFinish()));
    }
    /**
     * @private
     * @return {?}
     */
    _preparePlayerBeforeStart() {
        // this is required so that the player doesn't start to animate right away
        if (this._delay) {
            this._resetDomPlayerState();
        }
        else {
            this.domPlayer.pause();
        }
    }
    /**
     * \@internal
     * @param {?} element
     * @param {?} keyframes
     * @param {?} options
     * @return {?}
     */
    _triggerWebAnimation(element, keyframes, options) {
        // jscompiler doesn't seem to know animate is a native property because it's not fully
        // supported yet across common browsers (we polyfill it for Edge/Safari) [CL #143630929]
        return (/** @type {?} */ (element['animate'](keyframes, options)));
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onStart(fn) { this._onStartFns.push(fn); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDone(fn) { this._onDoneFns.push(fn); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDestroy(fn) { this._onDestroyFns.push(fn); }
    /**
     * @return {?}
     */
    play() {
        this._buildPlayer();
        if (!this.hasStarted()) {
            this._onStartFns.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._onStartFns = [];
            this._started = true;
            if (this._specialStyles) {
                this._specialStyles.start();
            }
        }
        this.domPlayer.play();
    }
    /**
     * @return {?}
     */
    pause() {
        this.init();
        this.domPlayer.pause();
    }
    /**
     * @return {?}
     */
    finish() {
        this.init();
        if (this._specialStyles) {
            this._specialStyles.finish();
        }
        this._onFinish();
        this.domPlayer.finish();
    }
    /**
     * @return {?}
     */
    reset() {
        this._resetDomPlayerState();
        this._destroyed = false;
        this._finished = false;
        this._started = false;
    }
    /**
     * @private
     * @return {?}
     */
    _resetDomPlayerState() {
        if (this.domPlayer) {
            this.domPlayer.cancel();
        }
    }
    /**
     * @return {?}
     */
    restart() {
        this.reset();
        this.play();
    }
    /**
     * @return {?}
     */
    hasStarted() { return this._started; }
    /**
     * @return {?}
     */
    destroy() {
        if (!this._destroyed) {
            this._destroyed = true;
            this._resetDomPlayerState();
            this._onFinish();
            if (this._specialStyles) {
                this._specialStyles.destroy();
            }
            this._onDestroyFns.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this._onDestroyFns = [];
        }
    }
    /**
     * @param {?} p
     * @return {?}
     */
    setPosition(p) { this.domPlayer.currentTime = p * this.time; }
    /**
     * @return {?}
     */
    getPosition() { return this.domPlayer.currentTime / this.time; }
    /**
     * @return {?}
     */
    get totalTime() { return this._delay + this._duration; }
    /**
     * @return {?}
     */
    beforeDestroy() {
        /** @type {?} */
        const styles = {};
        if (this.hasStarted()) {
            Object.keys(this._finalKeyframe).forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                if (prop != 'offset') {
                    styles[prop] =
                        this._finished ? this._finalKeyframe[prop] : computeStyle(this.element, prop);
                }
            }));
        }
        this.currentSnapshot = styles;
    }
    /**
     * \@internal
     * @param {?} phaseName
     * @return {?}
     */
    triggerCallback(phaseName) {
        /** @type {?} */
        const methods = phaseName == 'start' ? this._onStartFns : this._onDoneFns;
        methods.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        methods.length = 0;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/render/web_animations/web_animations_driver.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WebAnimationsDriver {
    constructor() {
        this._isNativeImpl = /\{\s*\[native\s+code\]\s*\}/.test(getElementAnimateFn().toString());
        this._cssKeyframesDriver = new CssKeyframesDriver();
    }
    /**
     * @param {?} prop
     * @return {?}
     */
    validateStyleProperty(prop) { return validateStyleProperty(prop); }
    /**
     * @param {?} element
     * @param {?} selector
     * @return {?}
     */
    matchesElement(element, selector) {
        return matchesElement(element, selector);
    }
    /**
     * @param {?} elm1
     * @param {?} elm2
     * @return {?}
     */
    containsElement(elm1, elm2) { return containsElement(elm1, elm2); }
    /**
     * @param {?} element
     * @param {?} selector
     * @param {?} multi
     * @return {?}
     */
    query(element, selector, multi) {
        return invokeQuery(element, selector, multi);
    }
    /**
     * @param {?} element
     * @param {?} prop
     * @param {?=} defaultValue
     * @return {?}
     */
    computeStyle(element, prop, defaultValue) {
        return (/** @type {?} */ (((/** @type {?} */ (window.getComputedStyle(element))))[prop]));
    }
    /**
     * @param {?} supported
     * @return {?}
     */
    overrideWebAnimationsSupport(supported) { this._isNativeImpl = supported; }
    /**
     * @param {?} element
     * @param {?} keyframes
     * @param {?} duration
     * @param {?} delay
     * @param {?} easing
     * @param {?=} previousPlayers
     * @param {?=} scrubberAccessRequested
     * @return {?}
     */
    animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {
        /** @type {?} */
        const useKeyframes = !scrubberAccessRequested && !this._isNativeImpl;
        if (useKeyframes) {
            return this._cssKeyframesDriver.animate(element, keyframes, duration, delay, easing, previousPlayers);
        }
        /** @type {?} */
        const fill = delay == 0 ? 'both' : 'forwards';
        /** @type {?} */
        const playerOptions = { duration, delay, fill };
        // we check for this to avoid having a null|undefined value be present
        // for the easing (which results in an error for certain browsers #9752)
        if (easing) {
            playerOptions['easing'] = easing;
        }
        /** @type {?} */
        const previousStyles = {};
        /** @type {?} */
        const previousWebAnimationPlayers = (/** @type {?} */ (previousPlayers.filter((/**
         * @param {?} player
         * @return {?}
         */
        player => player instanceof WebAnimationsPlayer))));
        if (allowPreviousPlayerStylesMerge(duration, delay)) {
            previousWebAnimationPlayers.forEach((/**
             * @param {?} player
             * @return {?}
             */
            player => {
                /** @type {?} */
                let styles = player.currentSnapshot;
                Object.keys(styles).forEach((/**
                 * @param {?} prop
                 * @return {?}
                 */
                prop => previousStyles[prop] = styles[prop]));
            }));
        }
        keyframes = keyframes.map((/**
         * @param {?} styles
         * @return {?}
         */
        styles => copyStyles(styles, false)));
        keyframes = balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles);
        /** @type {?} */
        const specialStyles = packageNonAnimatableStyles(element, keyframes);
        return new WebAnimationsPlayer(element, keyframes, playerOptions, specialStyles);
    }
}
if (false) {}
/**
 * @return {?}
 */
function supportsWebAnimations() {
    return typeof getElementAnimateFn() === 'function';
}
/**
 * @return {?}
 */
function getElementAnimateFn() {
    return (isBrowser() && ((/** @type {?} */ (Element))).prototype['animate']) || {};
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/private_export.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/src/browser.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/animations/browser/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=browser.js.map

/***/ }),

/***/ "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js ***!
  \**********************************************************************/
/*! exports provided: APP_BASE_HREF, AsyncPipe, CommonModule, CurrencyPipe, DOCUMENT, DatePipe, DecimalPipe, FormStyle, FormatWidth, HashLocationStrategy, I18nPluralPipe, I18nSelectPipe, JsonPipe, KeyValuePipe, LOCATION_INITIALIZED, Location, LocationStrategy, LowerCasePipe, NgClass, NgComponentOutlet, NgForOf, NgForOfContext, NgIf, NgIfContext, NgLocaleLocalization, NgLocalization, NgPlural, NgPluralCase, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgTemplateOutlet, NumberFormatStyle, NumberSymbol, PathLocationStrategy, PercentPipe, PlatformLocation, Plural, SlicePipe, TitleCasePipe, TranslationWidth, UpperCasePipe, VERSION, ViewportScroller, WeekDay, formatCurrency, formatDate, formatNumber, formatPercent, getCurrencySymbol, getLocaleCurrencyCode, getLocaleCurrencyName, getLocaleCurrencySymbol, getLocaleDateFormat, getLocaleDateTimeFormat, getLocaleDayNames, getLocaleDayPeriods, getLocaleEraNames, getLocaleExtraDayPeriodRules, getLocaleExtraDayPeriods, getLocaleFirstDayOfWeek, getLocaleId, getLocaleMonthNames, getLocaleNumberFormat, getLocaleNumberSymbol, getLocalePluralCase, getLocaleTimeFormat, getLocaleWeekEndRange, getNumberOfCurrencyDigits, isPlatformBrowser, isPlatformServer, isPlatformWorkerApp, isPlatformWorkerUi, registerLocaleData, ɵBrowserPlatformLocation, ɵDomAdapter, ɵNullViewportScroller, ɵPLATFORM_BROWSER_ID, ɵPLATFORM_SERVER_ID, ɵPLATFORM_WORKER_APP_ID, ɵPLATFORM_WORKER_UI_ID, ɵangular_packages_common_common_a, ɵangular_packages_common_common_b, ɵangular_packages_common_common_c, ɵangular_packages_common_common_d, ɵangular_packages_common_common_e, ɵangular_packages_common_common_f, ɵgetDOM, ɵparseCookieValue, ɵsetRootDomAdapter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_BASE_HREF", function() { return APP_BASE_HREF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncPipe", function() { return AsyncPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonModule", function() { return CommonModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurrencyPipe", function() { return CurrencyPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOCUMENT", function() { return DOCUMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DatePipe", function() { return DatePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DecimalPipe", function() { return DecimalPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormStyle", function() { return FormStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FormatWidth", function() { return FormatWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashLocationStrategy", function() { return HashLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I18nPluralPipe", function() { return I18nPluralPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "I18nSelectPipe", function() { return I18nSelectPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonPipe", function() { return JsonPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyValuePipe", function() { return KeyValuePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOCATION_INITIALIZED", function() { return LOCATION_INITIALIZED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Location", function() { return Location; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocationStrategy", function() { return LocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LowerCasePipe", function() { return LowerCasePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgClass", function() { return NgClass; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgComponentOutlet", function() { return NgComponentOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgForOf", function() { return NgForOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgForOfContext", function() { return NgForOfContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgIf", function() { return NgIf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgIfContext", function() { return NgIfContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgLocaleLocalization", function() { return NgLocaleLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgLocalization", function() { return NgLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgPlural", function() { return NgPlural; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgPluralCase", function() { return NgPluralCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgStyle", function() { return NgStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSwitch", function() { return NgSwitch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSwitchCase", function() { return NgSwitchCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgSwitchDefault", function() { return NgSwitchDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgTemplateOutlet", function() { return NgTemplateOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberFormatStyle", function() { return NumberFormatStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NumberSymbol", function() { return NumberSymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PathLocationStrategy", function() { return PathLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PercentPipe", function() { return PercentPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformLocation", function() { return PlatformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Plural", function() { return Plural; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SlicePipe", function() { return SlicePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TitleCasePipe", function() { return TitleCasePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TranslationWidth", function() { return TranslationWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UpperCasePipe", function() { return UpperCasePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewportScroller", function() { return ViewportScroller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WeekDay", function() { return WeekDay; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatCurrency", function() { return formatCurrency; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatDate", function() { return formatDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatNumber", function() { return formatNumber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatPercent", function() { return formatPercent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getCurrencySymbol", function() { return getCurrencySymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleCurrencyCode", function() { return getLocaleCurrencyCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleCurrencyName", function() { return getLocaleCurrencyName; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleCurrencySymbol", function() { return getLocaleCurrencySymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleDateFormat", function() { return getLocaleDateFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleDateTimeFormat", function() { return getLocaleDateTimeFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleDayNames", function() { return getLocaleDayNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleDayPeriods", function() { return getLocaleDayPeriods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleEraNames", function() { return getLocaleEraNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleExtraDayPeriodRules", function() { return getLocaleExtraDayPeriodRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleExtraDayPeriods", function() { return getLocaleExtraDayPeriods; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleFirstDayOfWeek", function() { return getLocaleFirstDayOfWeek; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleId", function() { return getLocaleId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleMonthNames", function() { return getLocaleMonthNames; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleNumberFormat", function() { return getLocaleNumberFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleNumberSymbol", function() { return getLocaleNumberSymbol; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocalePluralCase", function() { return getLocalePluralCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleTimeFormat", function() { return getLocaleTimeFormat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLocaleWeekEndRange", function() { return getLocaleWeekEndRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNumberOfCurrencyDigits", function() { return getNumberOfCurrencyDigits; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformBrowser", function() { return isPlatformBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformServer", function() { return isPlatformServer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformWorkerApp", function() { return isPlatformWorkerApp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPlatformWorkerUi", function() { return isPlatformWorkerUi; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerLocaleData", function() { return registerLocaleData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserPlatformLocation", function() { return BrowserPlatformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomAdapter", function() { return DomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNullViewportScroller", function() { return NullViewportScroller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_BROWSER_ID", function() { return PLATFORM_BROWSER_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_SERVER_ID", function() { return PLATFORM_SERVER_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_APP_ID", function() { return PLATFORM_WORKER_APP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵPLATFORM_WORKER_UI_ID", function() { return PLATFORM_WORKER_UI_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_a", function() { return useBrowserPlatformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_b", function() { return createBrowserPlatformLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_c", function() { return createLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_d", function() { return provideLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_e", function() { return COMMON_DIRECTIVES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_common_f", function() { return COMMON_PIPES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetDOM", function() { return getDOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵparseCookieValue", function() { return parseCookieValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵsetRootDomAdapter", function() { return setRootDomAdapter; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/**
 * @license Angular v9.0.7
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */



/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/dom_adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @type {?} */

let _DOM = (/** @type {?} */ (null));
/**
 * @return {?}
 */
function getDOM() {
    return _DOM;
}
/**
 * @param {?} adapter
 * @return {?}
 */
function setDOM(adapter) {
    _DOM = adapter;
}
/**
 * @param {?} adapter
 * @return {?}
 */
function setRootDomAdapter(adapter) {
    if (!_DOM) {
        _DOM = adapter;
    }
}
/* tslint:disable:requireParameterType */
/**
 * Provides DOM operations in an environment-agnostic way.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */
class DomAdapter {
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/dom_tokens.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A DI Token representing the main rendering context. In a browser this is the DOM Document.
 *
 * Note: Document might not be available in the Application Context when Application and Rendering
 * Contexts are not the same (e.g. when running the application in a Web Worker).
 *
 * \@publicApi
 * @type {?}
 */
const DOCUMENT = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('DocumentToken');

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/location/platform_location.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 *
 * `PlatformLocation` encapsulates all calls to DOM apis, which allows the Router to be platform
 * agnostic.
 * This means that we can have different implementation of `PlatformLocation` for the different
 * platforms that angular supports. For example, `\@angular/platform-browser` provides an
 * implementation specific to the browser environment, while `\@angular/platform-webworker` provides
 * one suitable for use with web workers.
 *
 * The `PlatformLocation` class is used directly by all implementations of {\@link LocationStrategy}
 * when they need to interact with the DOM apis like pushState, popState, etc...
 *
 * {\@link LocationStrategy} in turn is used by the {\@link Location} service which is used directly
 * by the {\@link Router} in order to navigate between routes. Since all interactions between {\@link
 * Router} /
 * {\@link Location} / {\@link LocationStrategy} and DOM apis flow through the `PlatformLocation`
 * class they are all platform independent.
 *
 * \@publicApi
 * @abstract
 */
class PlatformLocation {
}
PlatformLocation.ɵfac = function PlatformLocation_Factory(t) { return new (t || PlatformLocation)(); };
/** @nocollapse */ PlatformLocation.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: useBrowserPlatformLocation, token: PlatformLocation, providedIn: "platform" });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PlatformLocation, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
        args: [{
                providedIn: 'platform',
                // See #23917
                useFactory: useBrowserPlatformLocation
            }]
    }], null, null); })();
if (false) {}
/**
 * @return {?}
 */
function useBrowserPlatformLocation() {
    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BrowserPlatformLocation);
}
/**
 * \@description
 * Indicates when a location is initialized.
 *
 * \@publicApi
 * @type {?}
 */
const LOCATION_INITIALIZED = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('Location Initialized');
/**
 * \@description
 * A serializable version of the event from `onPopState` or `onHashChange`
 *
 * \@publicApi
 * @record
 */
function LocationChangeEvent() { }
if (false) {}
/**
 * \@publicApi
 * @record
 */
function LocationChangeListener() { }
/**
 * `PlatformLocation` encapsulates all of the direct calls to platform APIs.
 * This class should not be used directly by an application developer. Instead, use
 * {\@link Location}.
 */
class BrowserPlatformLocation extends PlatformLocation {
    /**
     * @param {?} _doc
     */
    constructor(_doc) {
        super();
        this._doc = _doc;
        this._init();
    }
    // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it
    /**
     * \@internal
     * @return {?}
     */
    _init() {
        ((/** @type {?} */ (this))).location = getDOM().getLocation();
        this._history = getDOM().getHistory();
    }
    /**
     * @return {?}
     */
    getBaseHrefFromDOM() { return (/** @type {?} */ (getDOM().getBaseHref(this._doc))); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onPopState(fn) {
        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onHashChange(fn) {
        getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);
    }
    /**
     * @return {?}
     */
    get href() { return this.location.href; }
    /**
     * @return {?}
     */
    get protocol() { return this.location.protocol; }
    /**
     * @return {?}
     */
    get hostname() { return this.location.hostname; }
    /**
     * @return {?}
     */
    get port() { return this.location.port; }
    /**
     * @return {?}
     */
    get pathname() { return this.location.pathname; }
    /**
     * @return {?}
     */
    get search() { return this.location.search; }
    /**
     * @return {?}
     */
    get hash() { return this.location.hash; }
    /**
     * @param {?} newPath
     * @return {?}
     */
    set pathname(newPath) { this.location.pathname = newPath; }
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    pushState(state, title, url) {
        if (supportsState()) {
            this._history.pushState(state, title, url);
        }
        else {
            this.location.hash = url;
        }
    }
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @return {?}
     */
    replaceState(state, title, url) {
        if (supportsState()) {
            this._history.replaceState(state, title, url);
        }
        else {
            this.location.hash = url;
        }
    }
    /**
     * @return {?}
     */
    forward() { this._history.forward(); }
    /**
     * @return {?}
     */
    back() { this._history.back(); }
    /**
     * @return {?}
     */
    getState() { return this._history.state; }
}
BrowserPlatformLocation.ɵfac = function BrowserPlatformLocation_Factory(t) { return new (t || BrowserPlatformLocation)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](DOCUMENT)); };
/** @nocollapse */
BrowserPlatformLocation.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [DOCUMENT,] }] }
];
/** @nocollapse */ BrowserPlatformLocation.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: createBrowserPlatformLocation, token: BrowserPlatformLocation, providedIn: "platform" });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserPlatformLocation, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
        args: [{
                providedIn: 'platform',
                // See #23917
                useFactory: createBrowserPlatformLocation
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [DOCUMENT]
            }] }]; }, null); })();
if (false) {}
/**
 * @return {?}
 */
function supportsState() {
    return !!window.history.pushState;
}
/**
 * @return {?}
 */
function createBrowserPlatformLocation() {
    return new BrowserPlatformLocation(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT));
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/private_export.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/location/util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Joins two parts of a URL with a slash if needed.
 *
 * @param {?} start  URL string
 * @param {?} end    URL string
 *
 *
 * @return {?} The joined URL string.
 */
function joinWithSlash(start, end) {
    if (start.length == 0) {
        return end;
    }
    if (end.length == 0) {
        return start;
    }
    /** @type {?} */
    let slashes = 0;
    if (start.endsWith('/')) {
        slashes++;
    }
    if (end.startsWith('/')) {
        slashes++;
    }
    if (slashes == 2) {
        return start + end.substring(1);
    }
    if (slashes == 1) {
        return start + end;
    }
    return start + '/' + end;
}
/**
 * Removes a trailing slash from a URL string if needed.
 * Looks for the first occurrence of either `#`, `?`, or the end of the
 * line as `/` characters and removes the trailing slash if one exists.
 *
 * @param {?} url URL string.
 *
 * @return {?} The URL string, modified if needed.
 */
function stripTrailingSlash(url) {
    /** @type {?} */
    const match = url.match(/#|\?|$/);
    /** @type {?} */
    const pathEndIdx = match && match.index || url.length;
    /** @type {?} */
    const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === '/' ? 1 : 0);
    return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
}
/**
 * Normalizes URL parameters by prepending with `?` if needed.
 *
 * @param {?} params String of URL parameters.
 *
 * @return {?} The normalized URL parameters string.
 */
function normalizeQueryParams(params) {
    return params && params[0] !== '?' ? '?' + params : params;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/location/location_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Enables the `Location` service to read route state from the browser's URL.
 * Angular provides two strategies:
 * `HashLocationStrategy` and `PathLocationStrategy`.
 *
 * Applications should use the `Router` or `Location` services to
 * interact with application route state.
 *
 * For instance, `HashLocationStrategy` produces URLs like
 * <code class="no-auto-link">http://example.com#/foo</code>,
 * and `PathLocationStrategy` produces
 * <code class="no-auto-link">http://example.com/foo</code> as an equivalent URL.
 *
 * See these two classes for more.
 *
 * \@publicApi
 * @abstract
 */
class LocationStrategy {
}
LocationStrategy.ɵfac = function LocationStrategy_Factory(t) { return new (t || LocationStrategy)(); };
/** @nocollapse */ LocationStrategy.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: provideLocationStrategy, token: LocationStrategy, providedIn: "root" });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LocationStrategy, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
        args: [{ providedIn: 'root', useFactory: provideLocationStrategy }]
    }], null, null); })();
if (false) {}
/**
 * @param {?} platformLocation
 * @return {?}
 */
function provideLocationStrategy(platformLocation) {
    // See #23917
    /** @type {?} */
    const location = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT).location;
    return new PathLocationStrategy(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])((/** @type {?} */ (PlatformLocation))), location && location.origin || '');
}
/**
 * A predefined [DI token](guide/glossary#di-token) for the base href
 * to be used with the `PathLocationStrategy`.
 * The base href is the URL prefix that should be preserved when generating
 * and recognizing URLs.
 *
 * \@usageNotes
 *
 * The following example shows how to use this token to configure the root app injector
 * with a base href value, so that the DI framework can supply the dependency anywhere in the app.
 *
 * ```typescript
 * import {Component, NgModule} from '\@angular/core';
 * import {APP_BASE_HREF} from '\@angular/common';
 *
 * \@NgModule({
 *   providers: [{provide: APP_BASE_HREF, useValue: '/my/app'}]
 * })
 * class AppModule {}
 * ```
 *
 * \@publicApi
 * @type {?}
 */
const APP_BASE_HREF = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('appBaseHref');
/**
 * \@description
 * A {\@link LocationStrategy} used to configure the {\@link Location} service to
 * represent its state in the
 * [path](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax) of the
 * browser's URL.
 *
 * If you're using `PathLocationStrategy`, you must provide a {\@link APP_BASE_HREF}
 * or add a base element to the document. This URL prefix that will be preserved
 * when generating and recognizing URLs.
 *
 * For instance, if you provide an `APP_BASE_HREF` of `'/my/app'` and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * Similarly, if you add `<base href='/my/app'/>` to the document and call
 * `location.go('/foo')`, the browser's URL will become
 * `example.com/my/app/foo`.
 *
 * \@usageNotes
 *
 * ### Example
 *
 * {\@example common/location/ts/path_location_component.ts region='LocationComponent'}
 *
 * \@publicApi
 */
class PathLocationStrategy extends LocationStrategy {
    /**
     * @param {?} _platformLocation
     * @param {?=} href
     */
    constructor(_platformLocation, href) {
        super();
        this._platformLocation = _platformLocation;
        if (href == null) {
            href = this._platformLocation.getBaseHrefFromDOM();
        }
        if (href == null) {
            throw new Error(`No base href set. Please provide a value for the APP_BASE_HREF token or add a base element to the document.`);
        }
        this._baseHref = href;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onPopState(fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    }
    /**
     * @return {?}
     */
    getBaseHref() { return this._baseHref; }
    /**
     * @param {?} internal
     * @return {?}
     */
    prepareExternalUrl(internal) { return joinWithSlash(this._baseHref, internal); }
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    path(includeHash = false) {
        /** @type {?} */
        const pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
        /** @type {?} */
        const hash = this._platformLocation.hash;
        return hash && includeHash ? `${pathname}${hash}` : pathname;
    }
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    pushState(state, title, url, queryParams) {
        /** @type {?} */
        const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
        this._platformLocation.pushState(state, title, externalUrl);
    }
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} url
     * @param {?} queryParams
     * @return {?}
     */
    replaceState(state, title, url, queryParams) {
        /** @type {?} */
        const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
        this._platformLocation.replaceState(state, title, externalUrl);
    }
    /**
     * @return {?}
     */
    forward() { this._platformLocation.forward(); }
    /**
     * @return {?}
     */
    back() { this._platformLocation.back(); }
}
PathLocationStrategy.ɵfac = function PathLocationStrategy_Factory(t) { return new (t || PathLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](APP_BASE_HREF, 8)); };
PathLocationStrategy.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: PathLocationStrategy, factory: PathLocationStrategy.ɵfac });
/** @nocollapse */
PathLocationStrategy.ctorParameters = () => [
    { type: PlatformLocation },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [APP_BASE_HREF,] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PathLocationStrategy, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: PlatformLocation }, { type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [APP_BASE_HREF]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/location/hash_location_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 * A {\@link LocationStrategy} used to configure the {\@link Location} service to
 * represent its state in the
 * [hash fragment](https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax)
 * of the browser's URL.
 *
 * For instance, if you call `location.go('/foo')`, the browser's URL will become
 * `example.com#/foo`.
 *
 * \@usageNotes
 *
 * ### Example
 *
 * {\@example common/location/ts/hash_location_component.ts region='LocationComponent'}
 *
 * \@publicApi
 */
class HashLocationStrategy extends LocationStrategy {
    /**
     * @param {?} _platformLocation
     * @param {?=} _baseHref
     */
    constructor(_platformLocation, _baseHref) {
        super();
        this._platformLocation = _platformLocation;
        this._baseHref = '';
        if (_baseHref != null) {
            this._baseHref = _baseHref;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onPopState(fn) {
        this._platformLocation.onPopState(fn);
        this._platformLocation.onHashChange(fn);
    }
    /**
     * @return {?}
     */
    getBaseHref() { return this._baseHref; }
    /**
     * @param {?=} includeHash
     * @return {?}
     */
    path(includeHash = false) {
        // the hash value is always prefixed with a `#`
        // and if it is empty then it will stay empty
        /** @type {?} */
        let path = this._platformLocation.hash;
        if (path == null)
            path = '#';
        return path.length > 0 ? path.substring(1) : path;
    }
    /**
     * @param {?} internal
     * @return {?}
     */
    prepareExternalUrl(internal) {
        /** @type {?} */
        const url = joinWithSlash(this._baseHref, internal);
        return url.length > 0 ? ('#' + url) : url;
    }
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    pushState(state, title, path, queryParams) {
        /** @type {?} */
        let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.pushState(state, title, url);
    }
    /**
     * @param {?} state
     * @param {?} title
     * @param {?} path
     * @param {?} queryParams
     * @return {?}
     */
    replaceState(state, title, path, queryParams) {
        /** @type {?} */
        let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
        if (url.length == 0) {
            url = this._platformLocation.pathname;
        }
        this._platformLocation.replaceState(state, title, url);
    }
    /**
     * @return {?}
     */
    forward() { this._platformLocation.forward(); }
    /**
     * @return {?}
     */
    back() { this._platformLocation.back(); }
}
HashLocationStrategy.ɵfac = function HashLocationStrategy_Factory(t) { return new (t || HashLocationStrategy)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](APP_BASE_HREF, 8)); };
HashLocationStrategy.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: HashLocationStrategy, factory: HashLocationStrategy.ɵfac });
/** @nocollapse */
HashLocationStrategy.ctorParameters = () => [
    { type: PlatformLocation },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [APP_BASE_HREF,] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HashLocationStrategy, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: PlatformLocation }, { type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"]
            }, {
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [APP_BASE_HREF]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/location/location.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@publicApi
 * @record
 */
function PopStateEvent() { }
if (false) {}
/**
 * \@description
 *
 * A service that applications can use to interact with a browser's URL.
 *
 * Depending on the `LocationStrategy` used, `Location` persists
 * to the URL's path or the URL's hash segment.
 *
 * \@usageNotes
 *
 * It's better to use the `Router#navigate` service to trigger route changes. Use
 * `Location` only if you need to interact with or create normalized URLs outside of
 * routing.
 *
 * `Location` is responsible for normalizing the URL against the application's base href.
 * A normalized URL is absolute from the URL host, includes the application's base href, and has no
 * trailing slash:
 * - `/my/app/user/123` is normalized
 * - `my/app/user/123` **is not** normalized
 * - `/my/app/user/123/` **is not** normalized
 *
 * ### Example
 *
 * <code-example path='common/location/ts/path_location_component.ts'
 * region='LocationComponent'></code-example>
 *
 * \@publicApi
 */
class Location {
    /**
     * @param {?} platformStrategy
     * @param {?} platformLocation
     */
    constructor(platformStrategy, platformLocation) {
        /**
         * \@internal
         */
        this._subject = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        /**
         * \@internal
         */
        this._urlChangeListeners = [];
        this._platformStrategy = platformStrategy;
        /** @type {?} */
        const browserBaseHref = this._platformStrategy.getBaseHref();
        this._platformLocation = platformLocation;
        this._baseHref = stripTrailingSlash(_stripIndexHtml(browserBaseHref));
        this._platformStrategy.onPopState((/**
         * @param {?} ev
         * @return {?}
         */
        (ev) => {
            this._subject.emit({
                'url': this.path(true),
                'pop': true,
                'state': ev.state,
                'type': ev.type,
            });
        }));
    }
    /**
     * Normalizes the URL path for this location.
     *
     * @param {?=} includeHash True to include an anchor fragment in the path.
     *
     * @return {?} The normalized URL path.
     */
    // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
    // removed.
    path(includeHash = false) {
        return this.normalize(this._platformStrategy.path(includeHash));
    }
    /**
     * Reports the current state of the location history.
     * @return {?} The current value of the `history.state` object.
     */
    getState() { return this._platformLocation.getState(); }
    /**
     * Normalizes the given path and compares to the current normalized path.
     *
     * @param {?} path The given URL path.
     * @param {?=} query Query parameters.
     *
     * @return {?} True if the given URL path is equal to the current normalized path, false
     * otherwise.
     */
    isCurrentPathEqualTo(path, query = '') {
        return this.path() == this.normalize(path + normalizeQueryParams(query));
    }
    /**
     * Normalizes a URL path by stripping any trailing slashes.
     *
     * @param {?} url String representing a URL.
     *
     * @return {?} The normalized URL string.
     */
    normalize(url) {
        return Location.stripTrailingSlash(_stripBaseHref(this._baseHref, _stripIndexHtml(url)));
    }
    /**
     * Normalizes an external URL path.
     * If the given URL doesn't begin with a leading slash (`'/'`), adds one
     * before normalizing. Adds a hash if `HashLocationStrategy` is
     * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
     *
     * @param {?} url String representing a URL.
     *
     * @return {?} A normalized platform-specific URL.
     */
    prepareExternalUrl(url) {
        if (url && url[0] !== '/') {
            url = '/' + url;
        }
        return this._platformStrategy.prepareExternalUrl(url);
    }
    // TODO: rename this method to pushState
    /**
     * Changes the browser's URL to a normalized version of a given URL, and pushes a
     * new item onto the platform's history.
     *
     * @param {?} path  URL path to normalize.
     * @param {?=} query Query parameters.
     * @param {?=} state Location history state.
     *
     * @return {?}
     */
    go(path, query = '', state = null) {
        this._platformStrategy.pushState(state, '', path, query);
        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
    }
    /**
     * Changes the browser's URL to a normalized version of the given URL, and replaces
     * the top item on the platform's history stack.
     *
     * @param {?} path  URL path to normalize.
     * @param {?=} query Query parameters.
     * @param {?=} state Location history state.
     * @return {?}
     */
    replaceState(path, query = '', state = null) {
        this._platformStrategy.replaceState(state, '', path, query);
        this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query)), state);
    }
    /**
     * Navigates forward in the platform's history.
     * @return {?}
     */
    forward() { this._platformStrategy.forward(); }
    /**
     * Navigates back in the platform's history.
     * @return {?}
     */
    back() { this._platformStrategy.back(); }
    /**
     * Registers a URL change listener. Use to catch updates performed by the Angular
     * framework that are not detectible through "popstate" or "hashchange" events.
     *
     * @param {?} fn The change handler function, which take a URL and a location history state.
     * @return {?}
     */
    onUrlChange(fn) {
        this._urlChangeListeners.push(fn);
        this.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => { this._notifyUrlChangeListeners(v.url, v.state); }));
    }
    /**
     * \@internal
     * @param {?=} url
     * @param {?=} state
     * @return {?}
     */
    _notifyUrlChangeListeners(url = '', state) {
        this._urlChangeListeners.forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn(url, state)));
    }
    /**
     * Subscribes to the platform's `popState` events.
     *
     * @param {?} onNext
     * @param {?=} onThrow
     * @param {?=} onReturn
     * @return {?} Subscribed events.
     */
    subscribe(onNext, onThrow, onReturn) {
        return this._subject.subscribe({ next: onNext, error: onThrow, complete: onReturn });
    }
}
Location.ɵfac = function Location_Factory(t) { return new (t || Location)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](LocationStrategy), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](PlatformLocation)); };
/**
 * Normalizes URL parameters by prepending with `?` if needed.
 *
 * @param params String of URL parameters.
 *
 * @return The normalized URL parameters string.
 */
Location.normalizeQueryParams = normalizeQueryParams;
/**
 * Joins two parts of a URL with a slash if needed.
 *
 * @param start  URL string
 * @param end    URL string
 *
 *
 * @return The joined URL string.
 */
Location.joinWithSlash = joinWithSlash;
/**
 * Removes a trailing slash from a URL string if needed.
 * Looks for the first occurrence of either `#`, `?`, or the end of the
 * line as `/` characters and removes the trailing slash if one exists.
 *
 * @param url URL string.
 *
 * @return The URL string, modified if needed.
 */
Location.stripTrailingSlash = stripTrailingSlash;
/** @nocollapse */
Location.ctorParameters = () => [
    { type: LocationStrategy },
    { type: PlatformLocation }
];
/** @nocollapse */ Location.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: createLocation, token: Location, providedIn: "root" });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](Location, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
        args: [{
                providedIn: 'root',
                // See #23917
                useFactory: createLocation
            }]
    }], function () { return [{ type: LocationStrategy }, { type: PlatformLocation }]; }, null); })();
if (false) {}
/**
 * @return {?}
 */
function createLocation() {
    return new Location(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])((/** @type {?} */ (LocationStrategy))), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])((/** @type {?} */ (PlatformLocation))));
}
/**
 * @param {?} baseHref
 * @param {?} url
 * @return {?}
 */
function _stripBaseHref(baseHref, url) {
    return baseHref && url.startsWith(baseHref) ? url.substring(baseHref.length) : url;
}
/**
 * @param {?} url
 * @return {?}
 */
function _stripIndexHtml(url) {
    return url.replace(/\/index.html$/, '');
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/location/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/i18n/currencies.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// THIS CODE IS GENERATED - DO NOT MODIFY
// See angular/tools/gulp-tasks/cldr/extract.js
/**
 * \@internal
 * @type {?}
 */
const CURRENCIES_EN = {
    'ADP': [undefined, undefined, 0],
    'AFN': [undefined, undefined, 0],
    'ALL': [undefined, undefined, 0],
    'AMD': [undefined, undefined, 2],
    'AOA': [undefined, 'Kz'],
    'ARS': [undefined, '$'],
    'AUD': ['A$', '$'],
    'BAM': [undefined, 'KM'],
    'BBD': [undefined, '$'],
    'BDT': [undefined, '৳'],
    'BHD': [undefined, undefined, 3],
    'BIF': [undefined, undefined, 0],
    'BMD': [undefined, '$'],
    'BND': [undefined, '$'],
    'BOB': [undefined, 'Bs'],
    'BRL': ['R$'],
    'BSD': [undefined, '$'],
    'BWP': [undefined, 'P'],
    'BYN': [undefined, 'р.', 2],
    'BYR': [undefined, undefined, 0],
    'BZD': [undefined, '$'],
    'CAD': ['CA$', '$', 2],
    'CHF': [undefined, undefined, 2],
    'CLF': [undefined, undefined, 4],
    'CLP': [undefined, '$', 0],
    'CNY': ['CN¥', '¥'],
    'COP': [undefined, '$', 2],
    'CRC': [undefined, '₡', 2],
    'CUC': [undefined, '$'],
    'CUP': [undefined, '$'],
    'CZK': [undefined, 'Kč', 2],
    'DJF': [undefined, undefined, 0],
    'DKK': [undefined, 'kr', 2],
    'DOP': [undefined, '$'],
    'EGP': [undefined, 'E£'],
    'ESP': [undefined, '₧', 0],
    'EUR': ['€'],
    'FJD': [undefined, '$'],
    'FKP': [undefined, '£'],
    'GBP': ['£'],
    'GEL': [undefined, '₾'],
    'GIP': [undefined, '£'],
    'GNF': [undefined, 'FG', 0],
    'GTQ': [undefined, 'Q'],
    'GYD': [undefined, '$', 2],
    'HKD': ['HK$', '$'],
    'HNL': [undefined, 'L'],
    'HRK': [undefined, 'kn'],
    'HUF': [undefined, 'Ft', 2],
    'IDR': [undefined, 'Rp', 2],
    'ILS': ['₪'],
    'INR': ['₹'],
    'IQD': [undefined, undefined, 0],
    'IRR': [undefined, undefined, 0],
    'ISK': [undefined, 'kr', 0],
    'ITL': [undefined, undefined, 0],
    'JMD': [undefined, '$'],
    'JOD': [undefined, undefined, 3],
    'JPY': ['¥', undefined, 0],
    'KHR': [undefined, '៛'],
    'KMF': [undefined, 'CF', 0],
    'KPW': [undefined, '₩', 0],
    'KRW': ['₩', undefined, 0],
    'KWD': [undefined, undefined, 3],
    'KYD': [undefined, '$'],
    'KZT': [undefined, '₸'],
    'LAK': [undefined, '₭', 0],
    'LBP': [undefined, 'L£', 0],
    'LKR': [undefined, 'Rs'],
    'LRD': [undefined, '$'],
    'LTL': [undefined, 'Lt'],
    'LUF': [undefined, undefined, 0],
    'LVL': [undefined, 'Ls'],
    'LYD': [undefined, undefined, 3],
    'MGA': [undefined, 'Ar', 0],
    'MGF': [undefined, undefined, 0],
    'MMK': [undefined, 'K', 0],
    'MNT': [undefined, '₮', 2],
    'MRO': [undefined, undefined, 0],
    'MUR': [undefined, 'Rs', 2],
    'MXN': ['MX$', '$'],
    'MYR': [undefined, 'RM'],
    'NAD': [undefined, '$'],
    'NGN': [undefined, '₦'],
    'NIO': [undefined, 'C$'],
    'NOK': [undefined, 'kr', 2],
    'NPR': [undefined, 'Rs'],
    'NZD': ['NZ$', '$'],
    'OMR': [undefined, undefined, 3],
    'PHP': [undefined, '₱'],
    'PKR': [undefined, 'Rs', 2],
    'PLN': [undefined, 'zł'],
    'PYG': [undefined, '₲', 0],
    'RON': [undefined, 'lei'],
    'RSD': [undefined, undefined, 0],
    'RUB': [undefined, '₽'],
    'RUR': [undefined, 'р.'],
    'RWF': [undefined, 'RF', 0],
    'SBD': [undefined, '$'],
    'SEK': [undefined, 'kr', 2],
    'SGD': [undefined, '$'],
    'SHP': [undefined, '£'],
    'SLL': [undefined, undefined, 0],
    'SOS': [undefined, undefined, 0],
    'SRD': [undefined, '$'],
    'SSP': [undefined, '£'],
    'STD': [undefined, undefined, 0],
    'STN': [undefined, 'Db'],
    'SYP': [undefined, '£', 0],
    'THB': [undefined, '฿'],
    'TMM': [undefined, undefined, 0],
    'TND': [undefined, undefined, 3],
    'TOP': [undefined, 'T$'],
    'TRL': [undefined, undefined, 0],
    'TRY': [undefined, '₺'],
    'TTD': [undefined, '$'],
    'TWD': ['NT$', '$', 2],
    'TZS': [undefined, undefined, 2],
    'UAH': [undefined, '₴'],
    'UGX': [undefined, undefined, 0],
    'USD': ['$'],
    'UYI': [undefined, undefined, 0],
    'UYU': [undefined, '$'],
    'UYW': [undefined, undefined, 4],
    'UZS': [undefined, undefined, 2],
    'VEF': [undefined, 'Bs', 2],
    'VND': ['₫', undefined, 0],
    'VUV': [undefined, undefined, 0],
    'XAF': ['FCFA', undefined, 0],
    'XCD': ['EC$', '$'],
    'XOF': ['CFA', undefined, 0],
    'XPF': ['CFPF', undefined, 0],
    'XXX': ['¤'],
    'YER': [undefined, undefined, 0],
    'ZAR': [undefined, 'R'],
    'ZMK': [undefined, undefined, 0],
    'ZMW': [undefined, 'ZK'],
    'ZWD': [undefined, undefined, 0]
};

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/i18n/locale_data_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const NumberFormatStyle = {
    Decimal: 0,
    Percent: 1,
    Currency: 2,
    Scientific: 3,
};
NumberFormatStyle[NumberFormatStyle.Decimal] = 'Decimal';
NumberFormatStyle[NumberFormatStyle.Percent] = 'Percent';
NumberFormatStyle[NumberFormatStyle.Currency] = 'Currency';
NumberFormatStyle[NumberFormatStyle.Scientific] = 'Scientific';
/** @enum {number} */
const Plural = {
    Zero: 0,
    One: 1,
    Two: 2,
    Few: 3,
    Many: 4,
    Other: 5,
};
Plural[Plural.Zero] = 'Zero';
Plural[Plural.One] = 'One';
Plural[Plural.Two] = 'Two';
Plural[Plural.Few] = 'Few';
Plural[Plural.Many] = 'Many';
Plural[Plural.Other] = 'Other';
/** @enum {number} */
const FormStyle = {
    Format: 0,
    Standalone: 1,
};
FormStyle[FormStyle.Format] = 'Format';
FormStyle[FormStyle.Standalone] = 'Standalone';
/** @enum {number} */
const TranslationWidth = {
    /** 1 character for `en-US`. For example: 'S' */
    Narrow: 0,
    /** 3 characters for `en-US`. For example: 'Sun' */
    Abbreviated: 1,
    /** Full length for `en-US`. For example: "Sunday" */
    Wide: 2,
    /** 2 characters for `en-US`, For example: "Su" */
    Short: 3,
};
TranslationWidth[TranslationWidth.Narrow] = 'Narrow';
TranslationWidth[TranslationWidth.Abbreviated] = 'Abbreviated';
TranslationWidth[TranslationWidth.Wide] = 'Wide';
TranslationWidth[TranslationWidth.Short] = 'Short';
/** @enum {number} */
const FormatWidth = {
    /**
     * For `en-US`, 'M/d/yy, h:mm a'`
     * (Example: `6/15/15, 9:03 AM`)
     */
    Short: 0,
    /**
     * For `en-US`, `'MMM d, y, h:mm:ss a'`
     * (Example: `Jun 15, 2015, 9:03:01 AM`)
     */
    Medium: 1,
    /**
     * For `en-US`, `'MMMM d, y, h:mm:ss a z'`
     * (Example: `June 15, 2015 at 9:03:01 AM GMT+1`)
     */
    Long: 2,
    /**
     * For `en-US`, `'EEEE, MMMM d, y, h:mm:ss a zzzz'`
     * (Example: `Monday, June 15, 2015 at 9:03:01 AM GMT+01:00`)
     */
    Full: 3,
};
FormatWidth[FormatWidth.Short] = 'Short';
FormatWidth[FormatWidth.Medium] = 'Medium';
FormatWidth[FormatWidth.Long] = 'Long';
FormatWidth[FormatWidth.Full] = 'Full';
/** @enum {number} */
const NumberSymbol = {
    /**
     * Decimal separator.
     * For `en-US`, the dot character.
     * Example : 2,345`.`67
     */
    Decimal: 0,
    /**
     * Grouping separator, typically for thousands.
     * For `en-US`, the comma character.
     * Example: 2`,`345.67
     */
    Group: 1,
    /**
     * List-item separator.
     * Example: "one, two, and three"
     */
    List: 2,
    /**
     * Sign for percentage (out of 100).
     * Example: 23.4%
     */
    PercentSign: 3,
    /**
     * Sign for positive numbers.
     * Example: +23
     */
    PlusSign: 4,
    /**
     * Sign for negative numbers.
     * Example: -23
     */
    MinusSign: 5,
    /**
     * Computer notation for exponential value (n times a power of 10).
     * Example: 1.2E3
     */
    Exponential: 6,
    /**
     * Human-readable format of exponential.
     * Example: 1.2x103
     */
    SuperscriptingExponent: 7,
    /**
     * Sign for permille (out of 1000).
     * Example: 23.4‰
     */
    PerMille: 8,
    /**
     * Infinity, can be used with plus and minus.
     * Example: ∞, +∞, -∞
     */
    Infinity: 9,
    /**
     * Not a number.
     * Example: NaN
     */
    NaN: 10,
    /**
     * Symbol used between time units.
     * Example: 10:52
     */
    TimeSeparator: 11,
    /**
     * Decimal separator for currency values (fallback to `Decimal`).
     * Example: $2,345.67
     */
    CurrencyDecimal: 12,
    /**
     * Group separator for currency values (fallback to `Group`).
     * Example: $2,345.67
     */
    CurrencyGroup: 13,
};
NumberSymbol[NumberSymbol.Decimal] = 'Decimal';
NumberSymbol[NumberSymbol.Group] = 'Group';
NumberSymbol[NumberSymbol.List] = 'List';
NumberSymbol[NumberSymbol.PercentSign] = 'PercentSign';
NumberSymbol[NumberSymbol.PlusSign] = 'PlusSign';
NumberSymbol[NumberSymbol.MinusSign] = 'MinusSign';
NumberSymbol[NumberSymbol.Exponential] = 'Exponential';
NumberSymbol[NumberSymbol.SuperscriptingExponent] = 'SuperscriptingExponent';
NumberSymbol[NumberSymbol.PerMille] = 'PerMille';
NumberSymbol[NumberSymbol.Infinity] = 'Infinity';
NumberSymbol[NumberSymbol.NaN] = 'NaN';
NumberSymbol[NumberSymbol.TimeSeparator] = 'TimeSeparator';
NumberSymbol[NumberSymbol.CurrencyDecimal] = 'CurrencyDecimal';
NumberSymbol[NumberSymbol.CurrencyGroup] = 'CurrencyGroup';
/** @enum {number} */
const WeekDay = {
    Sunday: 0,
    Monday: 1,
    Tuesday: 2,
    Wednesday: 3,
    Thursday: 4,
    Friday: 5,
    Saturday: 6,
};
WeekDay[WeekDay.Sunday] = 'Sunday';
WeekDay[WeekDay.Monday] = 'Monday';
WeekDay[WeekDay.Tuesday] = 'Tuesday';
WeekDay[WeekDay.Wednesday] = 'Wednesday';
WeekDay[WeekDay.Thursday] = 'Thursday';
WeekDay[WeekDay.Friday] = 'Friday';
WeekDay[WeekDay.Saturday] = 'Saturday';
/**
 * Retrieves the locale ID from the currently loaded locale.
 * The loaded locale could be, for example, a global one rather than a regional one.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code, such as `fr-FR`.
 * @return {?} The locale code. For example, `fr`.
 */
function getLocaleId(locale) {
    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale)[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId];
}
/**
 * Retrieves day period strings for the given locale.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} formStyle The required grammatical form.
 * @param {?} width The required character width.
 * @return {?} An array of localized period strings. For example, `[AM, PM]` for `en-US`.
 */
function getLocaleDayPeriods(locale, formStyle, width) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    /** @type {?} */
    const amPmData = (/** @type {?} */ ([data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DayPeriodsStandalone]]));
    /** @type {?} */
    const amPm = getLastDefinedValue(amPmData, formStyle);
    return getLastDefinedValue(amPm, width);
}
/**
 * Retrieves days of the week for the given locale, using the Gregorian calendar.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} formStyle The required grammatical form.
 * @param {?} width The required character width.
 * @return {?} An array of localized name strings.
 * For example,`[Sunday, Monday, ... Saturday]` for `en-US`.
 */
function getLocaleDayNames(locale, formStyle, width) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    /** @type {?} */
    const daysData = (/** @type {?} */ ([data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DaysStandalone]]));
    /** @type {?} */
    const days = getLastDefinedValue(daysData, formStyle);
    return getLastDefinedValue(days, width);
}
/**
 * Retrieves months of the year for the given locale, using the Gregorian calendar.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} formStyle The required grammatical form.
 * @param {?} width The required character width.
 * @return {?} An array of localized name strings.
 * For example,  `[January, February, ...]` for `en-US`.
 */
function getLocaleMonthNames(locale, formStyle, width) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    /** @type {?} */
    const monthsData = (/** @type {?} */ ([data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsFormat], data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].MonthsStandalone]]));
    /** @type {?} */
    const months = getLastDefinedValue(monthsData, formStyle);
    return getLastDefinedValue(months, width);
}
/**
 * Retrieves Gregorian-calendar eras for the given locale.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} width The required character width.
 * @return {?} An array of localized era strings.
 * For example, `[AD, BC]` for `en-US`.
 */
function getLocaleEraNames(locale, width) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    /** @type {?} */
    const erasData = (/** @type {?} */ (data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Eras]));
    return getLastDefinedValue(erasData, width);
}
/**
 * Retrieves the first day of the week for the given locale.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @return {?} A day index number, using the 0-based week-day index for `en-US`
 * (Sunday = 0, Monday = 1, ...).
 * For example, for `fr-FR`, returns 1 to indicate that the first day is Monday.
 */
function getLocaleFirstDayOfWeek(locale) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].FirstDayOfWeek];
}
/**
 * Range of week days that are considered the week-end for the given locale.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @return {?} The range of day values, `[startDay, endDay]`.
 */
function getLocaleWeekEndRange(locale) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].WeekendRange];
}
/**
 * Retrieves a localized date-value formating string.
 *
 * @see `FormatWidth` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} width The format type.
 * @return {?} The localized formating string.
 */
function getLocaleDateFormat(locale, width) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateFormat], width);
}
/**
 * Retrieves a localized time-value formatting string.
 *
 * @see `FormatWidth` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} width The format type.
 * @return {?} The localized formatting string.
 */
function getLocaleTimeFormat(locale, width) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    return getLastDefinedValue(data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].TimeFormat], width);
}
/**
 * Retrieves a localized date-time formatting string.
 *
 * @see `FormatWidth` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} width The format type.
 * @return {?} The localized formatting string.
 */
function getLocaleDateTimeFormat(locale, width) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    /** @type {?} */
    const dateTimeFormatData = (/** @type {?} */ (data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].DateTimeFormat]));
    return getLastDefinedValue(dateTimeFormatData, width);
}
/**
 * Retrieves a localized number symbol that can be used to replace placeholders in number formats.
 * @see `NumberSymbol` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale The locale code.
 * @param {?} symbol The symbol to localize.
 * @return {?} The character for the localized symbol.
 */
function getLocaleNumberSymbol(locale, symbol) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    /** @type {?} */
    const res = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][symbol];
    if (typeof res === 'undefined') {
        if (symbol === NumberSymbol.CurrencyDecimal) {
            return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Decimal];
        }
        else if (symbol === NumberSymbol.CurrencyGroup) {
            return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberSymbols][NumberSymbol.Group];
        }
    }
    return res;
}
/**
 * Retrieves a number format for a given locale.
 *
 * Numbers are formatted using patterns, like `#,###.00`. For example, the pattern `#,###.00`
 * when used to format the number 12345.678 could result in "12'345,678". That would happen if the
 * grouping separator for your language is an apostrophe, and the decimal separator is a comma.
 *
 * <b>Important:</b> The characters `.` `,` `0` `#` (and others below) are special placeholders
 * that stand for the decimal separator, and so on, and are NOT real characters.
 * You must NOT "translate" the placeholders. For example, don't change `.` to `,` even though in
 * your language the decimal point is written with a comma. The symbols should be replaced by the
 * local equivalents, using the appropriate `NumberSymbol` for your language.
 *
 * Here are the special characters used in number patterns:
 *
 * | Symbol | Meaning |
 * |--------|---------|
 * | . | Replaced automatically by the character used for the decimal point. |
 * | , | Replaced by the "grouping" (thousands) separator. |
 * | 0 | Replaced by a digit (or zero if there aren't enough digits). |
 * | # | Replaced by a digit (or nothing if there aren't enough). |
 * | ¤ | Replaced by a currency symbol, such as $ or USD. |
 * | % | Marks a percent format. The % symbol may change position, but must be retained. |
 * | E | Marks a scientific format. The E symbol may change position, but must be retained. |
 * | ' | Special characters used as literal characters are quoted with ASCII single quotes. |
 *
 * @see `NumberFormatStyle` / [CLDR website](http://cldr.unicode.org/translation/number-patterns) / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} type The type of numeric value to be formatted (such as `Decimal` or `Currency`.)
 * @return {?} The localized format string.
 */
function getLocaleNumberFormat(locale, type) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].NumberFormats][type];
}
/**
 * Retrieves the symbol used to represent the currency for the main country
 * corresponding to a given locale. For example, '$' for `en-US`.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @return {?} The localized symbol character,
 * or `null` if the main country cannot be determined.
 */
function getLocaleCurrencySymbol(locale) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencySymbol] || null;
}
/**
 * Retrieves the name of the currency for the main country corresponding
 * to a given locale. For example, 'US Dollar' for `en-US`.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @return {?} The currency name,
 * or `null` if the main country cannot be determined.
 */
function getLocaleCurrencyName(locale) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].CurrencyName] || null;
}
/**
 * Retrieves the default currency code for the given locale.
 *
 * The default is defined as the first currency which is still in use.
 *
 * \@publicApi
 * @param {?} locale The code of the locale whose currency code we want.
 * @return {?} The code of the default currency for the given locale.
 *
 */
function getLocaleCurrencyCode(locale) {
    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocaleCurrencyCode"])(locale);
}
/**
 * Retrieves the currency values for a given locale.
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 * @param {?} locale A locale code for the locale format rules to use.
 * @return {?} The currency values.
 */
function getLocaleCurrencies(locale) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    return data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].Currencies];
}
/**
 * \@alias core/ɵgetLocalePluralCase
 * \@publicApi
 * @type {?}
 */
const getLocalePluralCase = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵgetLocalePluralCase"];
/**
 * @param {?} data
 * @return {?}
 */
function checkFullData(data) {
    if (!data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData]) {
        throw new Error(`Missing extra locale data for the locale "${data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].LocaleId]}". Use "registerLocaleData" to load new data. See the "I18n guide" on angular.io to know more.`);
    }
}
/**
 * Retrieves locale-specific rules used to determine which day period to use
 * when more than one period is defined for a locale.
 *
 * There is a rule for each defined day period. The
 * first rule is applied to the first day period and so on.
 * Fall back to AM/PM when no rules are available.
 *
 * A rule can specify a period as time range, or as a single time value.
 *
 * This functionality is only available when you have loaded the full locale data.
 * See the ["I18n guide"](guide/i18n#i18n-pipes).
 *
 * @see `getLocaleExtraDayPeriods()` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @return {?} The rules for the locale, a single time value or array of *from-time, to-time*,
 * or null if no periods are available.
 *
 */
function getLocaleExtraDayPeriodRules(locale) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    checkFullData(data);
    /** @type {?} */
    const rules = data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][2 /* ExtraDayPeriodsRules */] || [];
    return rules.map((/**
     * @param {?} rule
     * @return {?}
     */
    (rule) => {
        if (typeof rule === 'string') {
            return extractTime(rule);
        }
        return [extractTime(rule[0]), extractTime(rule[1])];
    }));
}
/**
 * Retrieves locale-specific day periods, which indicate roughly how a day is broken up
 * in different languages.
 * For example, for `en-US`, periods are morning, noon, afternoon, evening, and midnight.
 *
 * This functionality is only available when you have loaded the full locale data.
 * See the ["I18n guide"](guide/i18n#i18n-pipes).
 *
 * @see `getLocaleExtraDayPeriodRules()` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} formStyle The required grammatical form.
 * @param {?} width The required character width.
 * @return {?} The translated day-period strings.
 */
function getLocaleExtraDayPeriods(locale, formStyle, width) {
    /** @type {?} */
    const data = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵfindLocaleData"])(locale);
    checkFullData(data);
    /** @type {?} */
    const dayPeriodsData = (/** @type {?} */ ([
        data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][0 /* ExtraDayPeriodFormats */],
        data[_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵLocaleDataIndex"].ExtraData][1 /* ExtraDayPeriodStandalone */]
    ]));
    /** @type {?} */
    const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
    return getLastDefinedValue(dayPeriods, width) || [];
}
/**
 * Retrieves the first value that is defined in an array, going backwards from an index position.
 *
 * To avoid repeating the same data (as when the "format" and "standalone" forms are the same)
 * add the first value to the locale data arrays, and add other values only if they are different.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @template T
 * @param {?} data The data array to retrieve from.
 * @param {?} index A 0-based index into the array to start from.
 * @return {?} The value immediately before the given index position.
 */
function getLastDefinedValue(data, index) {
    for (let i = index; i > -1; i--) {
        if (typeof data[i] !== 'undefined') {
            return data[i];
        }
    }
    throw new Error('Locale data API: locale data undefined');
}
/**
 * Extracts the hours and minutes from a string like "15:45"
 * @param {?} time
 * @return {?}
 */
function extractTime(time) {
    const [h, m] = time.split(':');
    return { hours: +h, minutes: +m };
}
/**
 * Retrieves the currency symbol for a given currency code.
 *
 * For example, for the default `en-US` locale, the code `USD` can
 * be represented by the narrow symbol `$` or the wide symbol `US$`.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} code The currency code.
 * @param {?} format The format, `wide` or `narrow`.
 * @param {?=} locale A locale code for the locale format rules to use.
 *
 * @return {?} The symbol, or the currency code if no symbol is available.
 */
function getCurrencySymbol(code, format, locale = 'en') {
    /** @type {?} */
    const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
    /** @type {?} */
    const symbolNarrow = currency[1 /* SymbolNarrow */];
    if (format === 'narrow' && typeof symbolNarrow === 'string') {
        return symbolNarrow;
    }
    return currency[0 /* Symbol */] || code;
}
// Most currencies have cents, that's why the default is 2
/** @type {?} */
const DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
/**
 * Reports the number of decimal digits for a given currency.
 * The value depends upon the presence of cents in that particular currency.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} code The currency code.
 * @return {?} The number of decimal digits, typically 0 or 2.
 */
function getNumberOfCurrencyDigits(code) {
    /** @type {?} */
    let digits;
    /** @type {?} */
    const currency = CURRENCIES_EN[code];
    if (currency) {
        digits = currency[2 /* NbOfDigits */];
    }
    return typeof digits === 'number' ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/i18n/format_date.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ISO8601_DATE_REGEX = /^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
//    1        2       3         4          5          6          7          8  9     10      11
/** @type {?} */
const NAMED_FORMATS = {};
/** @type {?} */
const DATE_FORMATS_SPLIT = /((?:[^GyMLwWdEabBhHmsSzZO']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
/** @enum {number} */
const ZoneWidth = {
    Short: 0,
    ShortGMT: 1,
    Long: 2,
    Extended: 3,
};
ZoneWidth[ZoneWidth.Short] = 'Short';
ZoneWidth[ZoneWidth.ShortGMT] = 'ShortGMT';
ZoneWidth[ZoneWidth.Long] = 'Long';
ZoneWidth[ZoneWidth.Extended] = 'Extended';
/** @enum {number} */
const DateType = {
    FullYear: 0,
    Month: 1,
    Date: 2,
    Hours: 3,
    Minutes: 4,
    Seconds: 5,
    FractionalSeconds: 6,
    Day: 7,
};
DateType[DateType.FullYear] = 'FullYear';
DateType[DateType.Month] = 'Month';
DateType[DateType.Date] = 'Date';
DateType[DateType.Hours] = 'Hours';
DateType[DateType.Minutes] = 'Minutes';
DateType[DateType.Seconds] = 'Seconds';
DateType[DateType.FractionalSeconds] = 'FractionalSeconds';
DateType[DateType.Day] = 'Day';
/** @enum {number} */
const TranslationType = {
    DayPeriods: 0,
    Days: 1,
    Months: 2,
    Eras: 3,
};
TranslationType[TranslationType.DayPeriods] = 'DayPeriods';
TranslationType[TranslationType.Days] = 'Days';
TranslationType[TranslationType.Months] = 'Months';
TranslationType[TranslationType.Eras] = 'Eras';
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Formats a date according to locale rules.
 *
 * @see `DatePipe` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} value The date to format, as a Date, or a number (milliseconds since UTC epoch)
 * or an [ISO date-time string](https://www.w3.org/TR/NOTE-datetime).
 * @param {?} format The date-time components to include. See `DatePipe` for details.
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?=} timezone The time zone. A time zone offset from GMT (such as `'+0430'`),
 * or a standard UTC/GMT or continental US time zone abbreviation.
 * If not specified, uses host system settings.
 *
 * @return {?} The formatted date string.
 *
 */
function formatDate(value, format, locale, timezone) {
    /** @type {?} */
    let date = toDate(value);
    /** @type {?} */
    const namedFormat = getNamedFormat(locale, format);
    format = namedFormat || format;
    /** @type {?} */
    let parts = [];
    /** @type {?} */
    let match;
    while (format) {
        match = DATE_FORMATS_SPLIT.exec(format);
        if (match) {
            parts = parts.concat(match.slice(1));
            /** @type {?} */
            const part = parts.pop();
            if (!part) {
                break;
            }
            format = part;
        }
        else {
            parts.push(format);
            break;
        }
    }
    /** @type {?} */
    let dateTimezoneOffset = date.getTimezoneOffset();
    if (timezone) {
        dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
        date = convertTimezoneToLocal(date, timezone, true);
    }
    /** @type {?} */
    let text = '';
    parts.forEach((/**
     * @param {?} value
     * @return {?}
     */
    value => {
        /** @type {?} */
        const dateFormatter = getDateFormatter(value);
        text += dateFormatter ?
            dateFormatter(date, locale, dateTimezoneOffset) :
            value === '\'\'' ? '\'' : value.replace(/(^'|'$)/g, '').replace(/''/g, '\'');
    }));
    return text;
}
/**
 * @param {?} locale
 * @param {?} format
 * @return {?}
 */
function getNamedFormat(locale, format) {
    /** @type {?} */
    const localeId = getLocaleId(locale);
    NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};
    if (NAMED_FORMATS[localeId][format]) {
        return NAMED_FORMATS[localeId][format];
    }
    /** @type {?} */
    let formatValue = '';
    switch (format) {
        case 'shortDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Short);
            break;
        case 'mediumDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Medium);
            break;
        case 'longDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Long);
            break;
        case 'fullDate':
            formatValue = getLocaleDateFormat(locale, FormatWidth.Full);
            break;
        case 'shortTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Short);
            break;
        case 'mediumTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Medium);
            break;
        case 'longTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Long);
            break;
        case 'fullTime':
            formatValue = getLocaleTimeFormat(locale, FormatWidth.Full);
            break;
        case 'short':
            /** @type {?} */
            const shortTime = getNamedFormat(locale, 'shortTime');
            /** @type {?} */
            const shortDate = getNamedFormat(locale, 'shortDate');
            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
            break;
        case 'medium':
            /** @type {?} */
            const mediumTime = getNamedFormat(locale, 'mediumTime');
            /** @type {?} */
            const mediumDate = getNamedFormat(locale, 'mediumDate');
            formatValue = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
            break;
        case 'long':
            /** @type {?} */
            const longTime = getNamedFormat(locale, 'longTime');
            /** @type {?} */
            const longDate = getNamedFormat(locale, 'longDate');
            formatValue =
                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
            break;
        case 'full':
            /** @type {?} */
            const fullTime = getNamedFormat(locale, 'fullTime');
            /** @type {?} */
            const fullDate = getNamedFormat(locale, 'fullDate');
            formatValue =
                formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
            break;
    }
    if (formatValue) {
        NAMED_FORMATS[localeId][format] = formatValue;
    }
    return formatValue;
}
/**
 * @param {?} str
 * @param {?} opt_values
 * @return {?}
 */
function formatDateTime(str, opt_values) {
    if (opt_values) {
        str = str.replace(/\{([^}]+)}/g, (/**
         * @param {?} match
         * @param {?} key
         * @return {?}
         */
        function (match, key) {
            return (opt_values != null && key in opt_values) ? opt_values[key] : match;
        }));
    }
    return str;
}
/**
 * @param {?} num
 * @param {?} digits
 * @param {?=} minusSign
 * @param {?=} trim
 * @param {?=} negWrap
 * @return {?}
 */
function padNumber(num, digits, minusSign = '-', trim, negWrap) {
    /** @type {?} */
    let neg = '';
    if (num < 0 || (negWrap && num <= 0)) {
        if (negWrap) {
            num = -num + 1;
        }
        else {
            num = -num;
            neg = minusSign;
        }
    }
    /** @type {?} */
    let strNum = String(num);
    while (strNum.length < digits) {
        strNum = '0' + strNum;
    }
    if (trim) {
        strNum = strNum.substr(strNum.length - digits);
    }
    return neg + strNum;
}
/**
 * @param {?} milliseconds
 * @param {?} digits
 * @return {?}
 */
function formatFractionalSeconds(milliseconds, digits) {
    /** @type {?} */
    const strMs = padNumber(milliseconds, 3);
    return strMs.substr(0, digits);
}
/**
 * Returns a date formatter that transforms a date into its locale digit representation
 * @param {?} name
 * @param {?} size
 * @param {?=} offset
 * @param {?=} trim
 * @param {?=} negWrap
 * @return {?}
 */
function dateGetter(name, size, offset = 0, trim = false, negWrap = false) {
    return (/**
     * @param {?} date
     * @param {?} locale
     * @return {?}
     */
    function (date, locale) {
        /** @type {?} */
        let part = getDatePart(name, date);
        if (offset > 0 || part > -offset) {
            part += offset;
        }
        if (name === DateType.Hours) {
            if (part === 0 && offset === -12) {
                part = 12;
            }
        }
        else if (name === DateType.FractionalSeconds) {
            return formatFractionalSeconds(part, size);
        }
        /** @type {?} */
        const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
        return padNumber(part, size, localeMinus, trim, negWrap);
    });
}
/**
 * @param {?} part
 * @param {?} date
 * @return {?}
 */
function getDatePart(part, date) {
    switch (part) {
        case DateType.FullYear:
            return date.getFullYear();
        case DateType.Month:
            return date.getMonth();
        case DateType.Date:
            return date.getDate();
        case DateType.Hours:
            return date.getHours();
        case DateType.Minutes:
            return date.getMinutes();
        case DateType.Seconds:
            return date.getSeconds();
        case DateType.FractionalSeconds:
            return date.getMilliseconds();
        case DateType.Day:
            return date.getDay();
        default:
            throw new Error(`Unknown DateType value "${part}".`);
    }
}
/**
 * Returns a date formatter that transforms a date into its locale string representation
 * @param {?} name
 * @param {?} width
 * @param {?=} form
 * @param {?=} extended
 * @return {?}
 */
function dateStrGetter(name, width, form = FormStyle.Format, extended = false) {
    return (/**
     * @param {?} date
     * @param {?} locale
     * @return {?}
     */
    function (date, locale) {
        return getDateTranslation(date, locale, name, width, form, extended);
    });
}
/**
 * Returns the locale translation of a date for a given form, type and width
 * @param {?} date
 * @param {?} locale
 * @param {?} name
 * @param {?} width
 * @param {?} form
 * @param {?} extended
 * @return {?}
 */
function getDateTranslation(date, locale, name, width, form, extended) {
    switch (name) {
        case TranslationType.Months:
            return getLocaleMonthNames(locale, form, width)[date.getMonth()];
        case TranslationType.Days:
            return getLocaleDayNames(locale, form, width)[date.getDay()];
        case TranslationType.DayPeriods:
            /** @type {?} */
            const currentHours = date.getHours();
            /** @type {?} */
            const currentMinutes = date.getMinutes();
            if (extended) {
                /** @type {?} */
                const rules = getLocaleExtraDayPeriodRules(locale);
                /** @type {?} */
                const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
                /** @type {?} */
                let result;
                rules.forEach((/**
                 * @param {?} rule
                 * @param {?} index
                 * @return {?}
                 */
                (rule, index) => {
                    if (Array.isArray(rule)) {
                        // morning, afternoon, evening, night
                        const { hours: hoursFrom, minutes: minutesFrom } = rule[0];
                        const { hours: hoursTo, minutes: minutesTo } = rule[1];
                        if (currentHours >= hoursFrom && currentMinutes >= minutesFrom &&
                            (currentHours < hoursTo ||
                                (currentHours === hoursTo && currentMinutes < minutesTo))) {
                            result = dayPeriods[index];
                        }
                    }
                    else { // noon or midnight
                        // noon or midnight
                        const { hours, minutes } = rule;
                        if (hours === currentHours && minutes === currentMinutes) {
                            result = dayPeriods[index];
                        }
                    }
                }));
                if (result) {
                    return result;
                }
            }
            // if no rules for the day periods, we use am/pm by default
            return getLocaleDayPeriods(locale, form, (/** @type {?} */ (width)))[currentHours < 12 ? 0 : 1];
        case TranslationType.Eras:
            return getLocaleEraNames(locale, (/** @type {?} */ (width)))[date.getFullYear() <= 0 ? 0 : 1];
        default:
            // This default case is not needed by TypeScript compiler, as the switch is exhaustive.
            // However Closure Compiler does not understand that and reports an error in typed mode.
            // The `throw new Error` below works around the problem, and the unexpected: never variable
            // makes sure tsc still checks this code is unreachable.
            /** @type {?} */
            const unexpected = name;
            throw new Error(`unexpected translation type ${unexpected}`);
    }
}
/**
 * Returns a date formatter that transforms a date and an offset into a timezone with ISO8601 or
 * GMT format depending on the width (eg: short = +0430, short:GMT = GMT+4, long = GMT+04:30,
 * extended = +04:30)
 * @param {?} width
 * @return {?}
 */
function timeZoneGetter(width) {
    return (/**
     * @param {?} date
     * @param {?} locale
     * @param {?} offset
     * @return {?}
     */
    function (date, locale, offset) {
        /** @type {?} */
        const zone = -1 * offset;
        /** @type {?} */
        const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
        /** @type {?} */
        const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);
        switch (width) {
            case ZoneWidth.Short:
                return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) +
                    padNumber(Math.abs(zone % 60), 2, minusSign);
            case ZoneWidth.ShortGMT:
                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 1, minusSign);
            case ZoneWidth.Long:
                return 'GMT' + ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +
                    padNumber(Math.abs(zone % 60), 2, minusSign);
            case ZoneWidth.Extended:
                if (offset === 0) {
                    return 'Z';
                }
                else {
                    return ((zone >= 0) ? '+' : '') + padNumber(hours, 2, minusSign) + ':' +
                        padNumber(Math.abs(zone % 60), 2, minusSign);
                }
            default:
                throw new Error(`Unknown zone width "${width}"`);
        }
    });
}
/** @type {?} */
const JANUARY = 0;
/** @type {?} */
const THURSDAY = 4;
/**
 * @param {?} year
 * @return {?}
 */
function getFirstThursdayOfYear(year) {
    /** @type {?} */
    const firstDayOfYear = (new Date(year, JANUARY, 1)).getDay();
    return new Date(year, 0, 1 + ((firstDayOfYear <= THURSDAY) ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
}
/**
 * @param {?} datetime
 * @return {?}
 */
function getThursdayThisWeek(datetime) {
    return new Date(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));
}
/**
 * @param {?} size
 * @param {?=} monthBased
 * @return {?}
 */
function weekGetter(size, monthBased = false) {
    return (/**
     * @param {?} date
     * @param {?} locale
     * @return {?}
     */
    function (date, locale) {
        /** @type {?} */
        let result;
        if (monthBased) {
            /** @type {?} */
            const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
            /** @type {?} */
            const today = date.getDate();
            result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
        }
        else {
            /** @type {?} */
            const firstThurs = getFirstThursdayOfYear(date.getFullYear());
            /** @type {?} */
            const thisThurs = getThursdayThisWeek(date);
            /** @type {?} */
            const diff = thisThurs.getTime() - firstThurs.getTime();
            result = 1 + Math.round(diff / 6.048e8); // 6.048e8 ms per week
        }
        return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    });
}
/** @type {?} */
const DATE_FORMATS = {};
// Based on CLDR formats:
// See complete list: http://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
// See also explanations: http://cldr.unicode.org/translation/date-time
// TODO(ocombe): support all missing cldr formats: Y, U, Q, D, F, e, c, j, J, C, A, v, V, X, x
/**
 * @param {?} format
 * @return {?}
 */
function getDateFormatter(format) {
    if (DATE_FORMATS[format]) {
        return DATE_FORMATS[format];
    }
    /** @type {?} */
    let formatter;
    switch (format) {
        // Era name (AD/BC)
        case 'G':
        case 'GG':
        case 'GGG':
            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
            break;
        case 'GGGG':
            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
            break;
        case 'GGGGG':
            formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
            break;
        // 1 digit representation of the year, e.g. (AD 1 => 1, AD 199 => 199)
        case 'y':
            formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
            break;
        // 2 digit representation of the year, padded (00-99). (e.g. AD 2001 => 01, AD 2010 => 10)
        case 'yy':
            formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
            break;
        // 3 digit representation of the year, padded (000-999). (e.g. AD 2001 => 01, AD 2010 => 10)
        case 'yyy':
            formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
            break;
        // 4 digit representation of the year (e.g. AD 1 => 0001, AD 2010 => 2010)
        case 'yyyy':
            formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
            break;
        // Month of the year (1-12), numeric
        case 'M':
        case 'L':
            formatter = dateGetter(DateType.Month, 1, 1);
            break;
        case 'MM':
        case 'LL':
            formatter = dateGetter(DateType.Month, 2, 1);
            break;
        // Month of the year (January, ...), string, format
        case 'MMM':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
            break;
        case 'MMMM':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
            break;
        case 'MMMMM':
            formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
            break;
        // Month of the year (January, ...), string, standalone
        case 'LLL':
            formatter =
                dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
            break;
        case 'LLLL':
            formatter =
                dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
            break;
        case 'LLLLL':
            formatter =
                dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
            break;
        // Week of the year (1, ... 52)
        case 'w':
            formatter = weekGetter(1);
            break;
        case 'ww':
            formatter = weekGetter(2);
            break;
        // Week of the month (1, ...)
        case 'W':
            formatter = weekGetter(1, true);
            break;
        // Day of the month (1-31)
        case 'd':
            formatter = dateGetter(DateType.Date, 1);
            break;
        case 'dd':
            formatter = dateGetter(DateType.Date, 2);
            break;
        // Day of the Week
        case 'E':
        case 'EE':
        case 'EEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
            break;
        case 'EEEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
            break;
        case 'EEEEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
            break;
        case 'EEEEEE':
            formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
            break;
        // Generic period of the day (am-pm)
        case 'a':
        case 'aa':
        case 'aaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
            break;
        case 'aaaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
            break;
        case 'aaaaa':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
            break;
        // Extended period of the day (midnight, at night, ...), standalone
        case 'b':
        case 'bb':
        case 'bbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
            break;
        case 'bbbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
            break;
        case 'bbbbb':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
            break;
        // Extended period of the day (midnight, night, ...), standalone
        case 'B':
        case 'BB':
        case 'BBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
            break;
        case 'BBBB':
            formatter =
                dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
            break;
        case 'BBBBB':
            formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
            break;
        // Hour in AM/PM, (1-12)
        case 'h':
            formatter = dateGetter(DateType.Hours, 1, -12);
            break;
        case 'hh':
            formatter = dateGetter(DateType.Hours, 2, -12);
            break;
        // Hour of the day (0-23)
        case 'H':
            formatter = dateGetter(DateType.Hours, 1);
            break;
        // Hour in day, padded (00-23)
        case 'HH':
            formatter = dateGetter(DateType.Hours, 2);
            break;
        // Minute of the hour (0-59)
        case 'm':
            formatter = dateGetter(DateType.Minutes, 1);
            break;
        case 'mm':
            formatter = dateGetter(DateType.Minutes, 2);
            break;
        // Second of the minute (0-59)
        case 's':
            formatter = dateGetter(DateType.Seconds, 1);
            break;
        case 'ss':
            formatter = dateGetter(DateType.Seconds, 2);
            break;
        // Fractional second
        case 'S':
            formatter = dateGetter(DateType.FractionalSeconds, 1);
            break;
        case 'SS':
            formatter = dateGetter(DateType.FractionalSeconds, 2);
            break;
        case 'SSS':
            formatter = dateGetter(DateType.FractionalSeconds, 3);
            break;
        // Timezone ISO8601 short format (-0430)
        case 'Z':
        case 'ZZ':
        case 'ZZZ':
            formatter = timeZoneGetter(ZoneWidth.Short);
            break;
        // Timezone ISO8601 extended format (-04:30)
        case 'ZZZZZ':
            formatter = timeZoneGetter(ZoneWidth.Extended);
            break;
        // Timezone GMT short format (GMT+4)
        case 'O':
        case 'OO':
        case 'OOO':
        // Should be location, but fallback to format O instead because we don't have the data yet
        case 'z':
        case 'zz':
        case 'zzz':
            formatter = timeZoneGetter(ZoneWidth.ShortGMT);
            break;
        // Timezone GMT long format (GMT+0430)
        case 'OOOO':
        case 'ZZZZ':
        // Should be location, but fallback to format O instead because we don't have the data yet
        case 'zzzz':
            formatter = timeZoneGetter(ZoneWidth.Long);
            break;
        default:
            return null;
    }
    DATE_FORMATS[format] = formatter;
    return formatter;
}
/**
 * @param {?} timezone
 * @param {?} fallback
 * @return {?}
 */
function timezoneToOffset(timezone, fallback) {
    // Support: IE 9-11 only, Edge 13-15+
    // IE/Edge do not "understand" colon (`:`) in timezone
    timezone = timezone.replace(/:/g, '');
    /** @type {?} */
    const requestedTimezoneOffset = Date.parse('Jan 01, 1970 00:00:00 ' + timezone) / 60000;
    return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}
/**
 * @param {?} date
 * @param {?} minutes
 * @return {?}
 */
function addDateMinutes(date, minutes) {
    date = new Date(date.getTime());
    date.setMinutes(date.getMinutes() + minutes);
    return date;
}
/**
 * @param {?} date
 * @param {?} timezone
 * @param {?} reverse
 * @return {?}
 */
function convertTimezoneToLocal(date, timezone, reverse) {
    /** @type {?} */
    const reverseValue = reverse ? -1 : 1;
    /** @type {?} */
    const dateTimezoneOffset = date.getTimezoneOffset();
    /** @type {?} */
    const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
}
/**
 * Converts a value to date.
 *
 * Supported input formats:
 * - `Date`
 * - number: timestamp
 * - string: numeric (e.g. "1234"), ISO and date strings in a format supported by
 *   [Date.parse()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse).
 *   Note: ISO strings without time return a date without timeoffset.
 *
 * Throws if unable to convert to a date.
 * @param {?} value
 * @return {?}
 */
function toDate(value) {
    if (isDate(value)) {
        return value;
    }
    if (typeof value === 'number' && !isNaN(value)) {
        return new Date(value);
    }
    if (typeof value === 'string') {
        value = value.trim();
        /** @type {?} */
        const parsedNb = parseFloat(value);
        // any string that only contains numbers, like "1234" but not like "1234hello"
        if (!isNaN((/** @type {?} */ (value)) - parsedNb)) {
            return new Date(parsedNb);
        }
        if (/^(\d{4}-\d{1,2}-\d{1,2})$/.test(value)) {
            /* For ISO Strings without time the day, month and year must be extracted from the ISO String
                  before Date creation to avoid time offset and errors in the new Date.
                  If we only replace '-' with ',' in the ISO String ("2015,01,01"), and try to create a new
                  date, some browsers (e.g. IE 9) will throw an invalid Date error.
                  If we leave the '-' ("2015-01-01") and try to create a new Date("2015-01-01") the timeoffset
                  is applied.
                  Note: ISO months are 0 for January, 1 for February, ... */
            const [y, m, d] = value.split('-').map((/**
             * @param {?} val
             * @return {?}
             */
            (val) => +val));
            return new Date(y, m - 1, d);
        }
        /** @type {?} */
        let match;
        if (match = value.match(ISO8601_DATE_REGEX)) {
            return isoStringToDate(match);
        }
    }
    /** @type {?} */
    const date = new Date((/** @type {?} */ (value)));
    if (!isDate(date)) {
        throw new Error(`Unable to convert "${value}" into a date`);
    }
    return date;
}
/**
 * Converts a date in ISO8601 to a Date.
 * Used instead of `Date.parse` because of browser discrepancies.
 * @param {?} match
 * @return {?}
 */
function isoStringToDate(match) {
    /** @type {?} */
    const date = new Date(0);
    /** @type {?} */
    let tzHour = 0;
    /** @type {?} */
    let tzMin = 0;
    // match[8] means that the string contains "Z" (UTC) or a timezone like "+01:00" or "+0100"
    /** @type {?} */
    const dateSetter = match[8] ? date.setUTCFullYear : date.setFullYear;
    /** @type {?} */
    const timeSetter = match[8] ? date.setUTCHours : date.setHours;
    // if there is a timezone defined like "+01:00" or "+0100"
    if (match[9]) {
        tzHour = Number(match[9] + match[10]);
        tzMin = Number(match[9] + match[11]);
    }
    dateSetter.call(date, Number(match[1]), Number(match[2]) - 1, Number(match[3]));
    /** @type {?} */
    const h = Number(match[4] || 0) - tzHour;
    /** @type {?} */
    const m = Number(match[5] || 0) - tzMin;
    /** @type {?} */
    const s = Number(match[6] || 0);
    /** @type {?} */
    const ms = Math.round(parseFloat('0.' + (match[7] || 0)) * 1000);
    timeSetter.call(date, h, m, s, ms);
    return date;
}
/**
 * @param {?} value
 * @return {?}
 */
function isDate(value) {
    return value instanceof Date && !isNaN(value.valueOf());
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/i18n/format_number.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
/** @type {?} */
const MAX_DIGITS = 22;
/** @type {?} */
const DECIMAL_SEP = '.';
/** @type {?} */
const ZERO_CHAR = '0';
/** @type {?} */
const PATTERN_SEP = ';';
/** @type {?} */
const GROUP_SEP = ',';
/** @type {?} */
const DIGIT_CHAR = '#';
/** @type {?} */
const CURRENCY_CHAR = '¤';
/** @type {?} */
const PERCENT_CHAR = '%';
/**
 * Transforms a number to a locale string based on a style and a format.
 * @param {?} value
 * @param {?} pattern
 * @param {?} locale
 * @param {?} groupSymbol
 * @param {?} decimalSymbol
 * @param {?=} digitsInfo
 * @param {?=} isPercent
 * @return {?}
 */
function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {
    /** @type {?} */
    let formattedText = '';
    /** @type {?} */
    let isZero = false;
    if (!isFinite(value)) {
        formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
    }
    else {
        /** @type {?} */
        let parsedNumber = parseNumber(value);
        if (isPercent) {
            parsedNumber = toPercent(parsedNumber);
        }
        /** @type {?} */
        let minInt = pattern.minInt;
        /** @type {?} */
        let minFraction = pattern.minFrac;
        /** @type {?} */
        let maxFraction = pattern.maxFrac;
        if (digitsInfo) {
            /** @type {?} */
            const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
            if (parts === null) {
                throw new Error(`${digitsInfo} is not a valid digit info`);
            }
            /** @type {?} */
            const minIntPart = parts[1];
            /** @type {?} */
            const minFractionPart = parts[3];
            /** @type {?} */
            const maxFractionPart = parts[5];
            if (minIntPart != null) {
                minInt = parseIntAutoRadix(minIntPart);
            }
            if (minFractionPart != null) {
                minFraction = parseIntAutoRadix(minFractionPart);
            }
            if (maxFractionPart != null) {
                maxFraction = parseIntAutoRadix(maxFractionPart);
            }
            else if (minFractionPart != null && minFraction > maxFraction) {
                maxFraction = minFraction;
            }
        }
        roundNumber(parsedNumber, minFraction, maxFraction);
        /** @type {?} */
        let digits = parsedNumber.digits;
        /** @type {?} */
        let integerLen = parsedNumber.integerLen;
        /** @type {?} */
        const exponent = parsedNumber.exponent;
        /** @type {?} */
        let decimals = [];
        isZero = digits.every((/**
         * @param {?} d
         * @return {?}
         */
        d => !d));
        // pad zeros for small numbers
        for (; integerLen < minInt; integerLen++) {
            digits.unshift(0);
        }
        // pad zeros for small numbers
        for (; integerLen < 0; integerLen++) {
            digits.unshift(0);
        }
        // extract decimals digits
        if (integerLen > 0) {
            decimals = digits.splice(integerLen, digits.length);
        }
        else {
            decimals = digits;
            digits = [0];
        }
        // format the integer digits with grouping separators
        /** @type {?} */
        const groups = [];
        if (digits.length >= pattern.lgSize) {
            groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(''));
        }
        while (digits.length > pattern.gSize) {
            groups.unshift(digits.splice(-pattern.gSize, digits.length).join(''));
        }
        if (digits.length) {
            groups.unshift(digits.join(''));
        }
        formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));
        // append the decimal digits
        if (decimals.length) {
            formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join('');
        }
        if (exponent) {
            formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + '+' + exponent;
        }
    }
    if (value < 0 && !isZero) {
        formattedText = pattern.negPre + formattedText + pattern.negSuf;
    }
    else {
        formattedText = pattern.posPre + formattedText + pattern.posSuf;
    }
    return formattedText;
}
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Formats a number as currency using locale rules.
 *
 * @see `formatNumber()` / `DecimalPipe` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} value The number to format.
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?} currency A string containing the currency symbol or its name,
 * such as "$" or "Canadian Dollar". Used in output string, but does not affect the operation
 * of the function.
 * @param {?=} currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217)
 * currency code, such as `USD` for the US dollar and `EUR` for the euro.
 * Used to determine the number of digits in the decimal part.
 * @param {?=} digitsInfo
 * @return {?} The formatted currency value.
 *
 */
function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
    /** @type {?} */
    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
    /** @type {?} */
    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    pattern.minFrac = getNumberOfCurrencyDigits((/** @type {?} */ (currencyCode)));
    pattern.maxFrac = pattern.minFrac;
    /** @type {?} */
    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
    return res
        .replace(CURRENCY_CHAR, currency)
        // if we have 2 time the currency character, the second one is ignored
        .replace(CURRENCY_CHAR, '')
        // If there is a spacing between currency character and the value and
        // the currency character is supressed by passing an empty string, the
        // spacing character would remain as part of the string. Then we
        // should remove it.
        .trim();
}
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Formats a number as a percentage according to locale rules.
 *
 * @see `formatNumber()` / `DecimalPipe` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 * \@publicApi
 *
 * @param {?} value The number to format.
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?=} digitsInfo
 * @return {?} The formatted percentage value.
 *
 */
function formatPercent(value, locale, digitsInfo) {
    /** @type {?} */
    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
    /** @type {?} */
    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    /** @type {?} */
    const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
    return res.replace(new RegExp(PERCENT_CHAR, 'g'), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
}
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Formats a number as text, with group sizing, separator, and other
 * parameters based on the locale.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 *
 * \@publicApi
 * @param {?} value The number to format.
 * @param {?} locale A locale code for the locale format rules to use.
 * @param {?=} digitsInfo
 * @return {?} The formatted text string.
 */
function formatNumber(value, locale, digitsInfo) {
    /** @type {?} */
    const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
    /** @type {?} */
    const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
    return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
}
/**
 * @record
 */
function ParsedNumberFormat() { }
if (false) {}
/**
 * @param {?} format
 * @param {?=} minusSign
 * @return {?}
 */
function parseNumberFormat(format, minusSign = '-') {
    /** @type {?} */
    const p = {
        minInt: 1,
        minFrac: 0,
        maxFrac: 0,
        posPre: '',
        posSuf: '',
        negPre: '',
        negSuf: '',
        gSize: 0,
        lgSize: 0
    };
    /** @type {?} */
    const patternParts = format.split(PATTERN_SEP);
    /** @type {?} */
    const positive = patternParts[0];
    /** @type {?} */
    const negative = patternParts[1];
    /** @type {?} */
    const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ?
        positive.split(DECIMAL_SEP) :
        [
            positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1),
            positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)
        ];
    /** @type {?} */
    const integer = positiveParts[0];
    /** @type {?} */
    const fraction = positiveParts[1] || '';
    p.posPre = integer.substr(0, integer.indexOf(DIGIT_CHAR));
    for (let i = 0; i < fraction.length; i++) {
        /** @type {?} */
        const ch = fraction.charAt(i);
        if (ch === ZERO_CHAR) {
            p.minFrac = p.maxFrac = i + 1;
        }
        else if (ch === DIGIT_CHAR) {
            p.maxFrac = i + 1;
        }
        else {
            p.posSuf += ch;
        }
    }
    /** @type {?} */
    const groups = integer.split(GROUP_SEP);
    p.gSize = groups[1] ? groups[1].length : 0;
    p.lgSize = (groups[2] || groups[1]) ? (groups[2] || groups[1]).length : 0;
    if (negative) {
        /** @type {?} */
        const trunkLen = positive.length - p.posPre.length - p.posSuf.length;
        /** @type {?} */
        const pos = negative.indexOf(DIGIT_CHAR);
        p.negPre = negative.substr(0, pos).replace(/'/g, '');
        p.negSuf = negative.substr(pos + trunkLen).replace(/'/g, '');
    }
    else {
        p.negPre = minusSign + p.posPre;
        p.negSuf = p.posSuf;
    }
    return p;
}
/**
 * @record
 */
function ParsedNumber() { }
if (false) {}
// Transforms a parsed number into a percentage by multiplying it by 100
/**
 * @param {?} parsedNumber
 * @return {?}
 */
function toPercent(parsedNumber) {
    // if the number is 0, don't do anything
    if (parsedNumber.digits[0] === 0) {
        return parsedNumber;
    }
    // Getting the current number of decimals
    /** @type {?} */
    const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;
    if (parsedNumber.exponent) {
        parsedNumber.exponent += 2;
    }
    else {
        if (fractionLen === 0) {
            parsedNumber.digits.push(0, 0);
        }
        else if (fractionLen === 1) {
            parsedNumber.digits.push(0);
        }
        parsedNumber.integerLen += 2;
    }
    return parsedNumber;
}
/**
 * Parses a number.
 * Significant bits of this parse algorithm came from https://github.com/MikeMcl/big.js/
 * @param {?} num
 * @return {?}
 */
function parseNumber(num) {
    /** @type {?} */
    let numStr = Math.abs(num) + '';
    /** @type {?} */
    let exponent = 0;
    /** @type {?} */
    let digits;
    /** @type {?} */
    let integerLen;
    /** @type {?} */
    let i;
    /** @type {?} */
    let j;
    /** @type {?} */
    let zeros;
    // Decimal point?
    if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
        numStr = numStr.replace(DECIMAL_SEP, '');
    }
    // Exponential form?
    if ((i = numStr.search(/e/i)) > 0) {
        // Work out the exponent.
        if (integerLen < 0)
            integerLen = i;
        integerLen += +numStr.slice(i + 1);
        numStr = numStr.substring(0, i);
    }
    else if (integerLen < 0) {
        // There was no decimal point or exponent so it is an integer.
        integerLen = numStr.length;
    }
    // Count the number of leading zeros.
    for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) { /* empty */
    }
    if (i === (zeros = numStr.length)) {
        // The digits are all zero.
        digits = [0];
        integerLen = 1;
    }
    else {
        // Count the number of trailing zeros
        zeros--;
        while (numStr.charAt(zeros) === ZERO_CHAR)
            zeros--;
        // Trailing zeros are insignificant so ignore them
        integerLen -= i;
        digits = [];
        // Convert string to array of digits without leading/trailing zeros.
        for (j = 0; i <= zeros; i++, j++) {
            digits[j] = Number(numStr.charAt(i));
        }
    }
    // If the number overflows the maximum allowed digits then use an exponent.
    if (integerLen > MAX_DIGITS) {
        digits = digits.splice(0, MAX_DIGITS - 1);
        exponent = integerLen - 1;
        integerLen = 1;
    }
    return { digits, exponent, integerLen };
}
/**
 * Round the parsed number to the specified number of decimal places
 * This function changes the parsedNumber in-place
 * @param {?} parsedNumber
 * @param {?} minFrac
 * @param {?} maxFrac
 * @return {?}
 */
function roundNumber(parsedNumber, minFrac, maxFrac) {
    if (minFrac > maxFrac) {
        throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);
    }
    /** @type {?} */
    let digits = parsedNumber.digits;
    /** @type {?} */
    let fractionLen = digits.length - parsedNumber.integerLen;
    /** @type {?} */
    const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);
    // The index of the digit to where rounding is to occur
    /** @type {?} */
    let roundAt = fractionSize + parsedNumber.integerLen;
    /** @type {?} */
    let digit = digits[roundAt];
    if (roundAt > 0) {
        // Drop fractional digits beyond `roundAt`
        digits.splice(Math.max(parsedNumber.integerLen, roundAt));
        // Set non-fractional digits beyond `roundAt` to 0
        for (let j = roundAt; j < digits.length; j++) {
            digits[j] = 0;
        }
    }
    else {
        // We rounded to zero so reset the parsedNumber
        fractionLen = Math.max(0, fractionLen);
        parsedNumber.integerLen = 1;
        digits.length = Math.max(1, roundAt = fractionSize + 1);
        digits[0] = 0;
        for (let i = 1; i < roundAt; i++)
            digits[i] = 0;
    }
    if (digit >= 5) {
        if (roundAt - 1 < 0) {
            for (let k = 0; k > roundAt; k--) {
                digits.unshift(0);
                parsedNumber.integerLen++;
            }
            digits.unshift(1);
            parsedNumber.integerLen++;
        }
        else {
            digits[roundAt - 1]++;
        }
    }
    // Pad out with zeros to get the required fraction length
    for (; fractionLen < Math.max(0, fractionSize); fractionLen++)
        digits.push(0);
    /** @type {?} */
    let dropTrailingZeros = fractionSize !== 0;
    // Minimal length = nb of decimals required + current nb of integers
    // Any number besides that is optional and can be removed if it's a trailing 0
    /** @type {?} */
    const minLen = minFrac + parsedNumber.integerLen;
    // Do any carrying, e.g. a digit was rounded up to 10
    /** @type {?} */
    const carry = digits.reduceRight((/**
     * @param {?} carry
     * @param {?} d
     * @param {?} i
     * @param {?} digits
     * @return {?}
     */
    function (carry, d, i, digits) {
        d = d + carry;
        digits[i] = d < 10 ? d : d - 10; // d % 10
        if (dropTrailingZeros) {
            // Do not keep meaningless fractional trailing zeros (e.g. 15.52000 --> 15.52)
            if (digits[i] === 0 && i >= minLen) {
                digits.pop();
            }
            else {
                dropTrailingZeros = false;
            }
        }
        return d >= 10 ? 1 : 0; // Math.floor(d / 10);
    }), 0);
    if (carry) {
        digits.unshift(carry);
        parsedNumber.integerLen++;
    }
}
/**
 * @param {?} text
 * @return {?}
 */
function parseIntAutoRadix(text) {
    /** @type {?} */
    const result = parseInt(text);
    if (isNaN(result)) {
        throw new Error('Invalid integer literal when parsing ' + text);
    }
    return result;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/i18n/localization.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@publicApi
 * @abstract
 */
class NgLocalization {
}
if (false) {}
/**
 * Returns the plural category for a given value.
 * - "=value" when the case exists,
 * - the plural category otherwise
 * @param {?} value
 * @param {?} cases
 * @param {?} ngLocalization
 * @param {?=} locale
 * @return {?}
 */
function getPluralCategory(value, cases, ngLocalization, locale) {
    /** @type {?} */
    let key = `=${value}`;
    if (cases.indexOf(key) > -1) {
        return key;
    }
    key = ngLocalization.getPluralCategory(value, locale);
    if (cases.indexOf(key) > -1) {
        return key;
    }
    if (cases.indexOf('other') > -1) {
        return 'other';
    }
    throw new Error(`No plural message found for value "${value}"`);
}
/**
 * Returns the plural case based on the locale
 *
 * \@publicApi
 */
class NgLocaleLocalization extends NgLocalization {
    /**
     * @param {?} locale
     */
    constructor(locale) {
        super();
        this.locale = locale;
    }
    /**
     * @param {?} value
     * @param {?=} locale
     * @return {?}
     */
    getPluralCategory(value, locale) {
        /** @type {?} */
        const plural = getLocalePluralCase(locale || this.locale)(value);
        switch (plural) {
            case Plural.Zero:
                return 'zero';
            case Plural.One:
                return 'one';
            case Plural.Two:
                return 'two';
            case Plural.Few:
                return 'few';
            case Plural.Many:
                return 'many';
            default:
                return 'other';
        }
    }
}
NgLocaleLocalization.ɵfac = function NgLocaleLocalization_Factory(t) { return new (t || NgLocaleLocalization)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"])); };
NgLocaleLocalization.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: NgLocaleLocalization, factory: NgLocaleLocalization.ɵfac });
/** @nocollapse */
NgLocaleLocalization.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgLocaleLocalization, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/i18n/locale_data.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Register global data to be used internally by Angular. See the
 * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
 *
 * The signature registerLocaleData(data: any, extraData?: any) is deprecated since v5.1
 *
 * \@publicApi
 * @param {?} data
 * @param {?=} localeId
 * @param {?=} extraData
 * @return {?}
 */
function registerLocaleData(data, localeId, extraData) {
    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵregisterLocaleData"])(data, localeId, extraData);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/cookie.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @param {?} cookieStr
 * @param {?} name
 * @return {?}
 */
function parseCookieValue(cookieStr, name) {
    name = encodeURIComponent(name);
    for (const cookie of cookieStr.split(';')) {
        /** @type {?} */
        const eqIndex = cookie.indexOf('=');
        const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ''] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];
        if (cookieName.trim() === name) {
            return decodeURIComponent(cookieValue);
        }
    }
    return null;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/directives/ng_class.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@ngModule CommonModule
 *
 * \@usageNotes
 * ```
 *     <some-element [ngClass]="'first second'">...</some-element>
 *
 *     <some-element [ngClass]="['first', 'second']">...</some-element>
 *
 *     <some-element [ngClass]="{'first': true, 'second': true, 'third': false}">...</some-element>
 *
 *     <some-element [ngClass]="stringExp|arrayExp|objExp">...</some-element>
 *
 *     <some-element [ngClass]="{'class1 class2 class3' : true}">...</some-element>
 * ```
 *
 * \@description
 *
 * Adds and removes CSS classes on an HTML element.
 *
 * The CSS classes are updated as follows, depending on the type of the expression evaluation:
 * - `string` - the CSS classes listed in the string (space delimited) are added,
 * - `Array` - the CSS classes declared as Array elements are added,
 * - `Object` - keys are CSS classes that get added when the expression given in the value
 *              evaluates to a truthy value, otherwise they are removed.
 *
 * \@publicApi
 */
class NgClass {
    /**
     * @param {?} _iterableDiffers
     * @param {?} _keyValueDiffers
     * @param {?} _ngEl
     * @param {?} _renderer
     */
    constructor(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
        this._iterableDiffers = _iterableDiffers;
        this._keyValueDiffers = _keyValueDiffers;
        this._ngEl = _ngEl;
        this._renderer = _renderer;
        this._iterableDiffer = null;
        this._keyValueDiffer = null;
        this._initialClasses = [];
        this._rawClass = null;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set klass(value) {
        this._removeClasses(this._initialClasses);
        this._initialClasses = typeof value === 'string' ? value.split(/\s+/) : [];
        this._applyClasses(this._initialClasses);
        this._applyClasses(this._rawClass);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ngClass(value) {
        this._removeClasses(this._rawClass);
        this._applyClasses(this._initialClasses);
        this._iterableDiffer = null;
        this._keyValueDiffer = null;
        this._rawClass = typeof value === 'string' ? value.split(/\s+/) : value;
        if (this._rawClass) {
            if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisListLikeIterable"])(this._rawClass)) {
                this._iterableDiffer = this._iterableDiffers.find(this._rawClass).create();
            }
            else {
                this._keyValueDiffer = this._keyValueDiffers.find(this._rawClass).create();
            }
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this._iterableDiffer) {
            /** @type {?} */
            const iterableChanges = this._iterableDiffer.diff((/** @type {?} */ (this._rawClass)));
            if (iterableChanges) {
                this._applyIterableChanges(iterableChanges);
            }
        }
        else if (this._keyValueDiffer) {
            /** @type {?} */
            const keyValueChanges = this._keyValueDiffer.diff((/** @type {?} */ (this._rawClass)));
            if (keyValueChanges) {
                this._applyKeyValueChanges(keyValueChanges);
            }
        }
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _applyKeyValueChanges(changes) {
        changes.forEachAddedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => this._toggleClass(record.key, record.currentValue)));
        changes.forEachChangedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => this._toggleClass(record.key, record.currentValue)));
        changes.forEachRemovedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => {
            if (record.previousValue) {
                this._toggleClass(record.key, false);
            }
        }));
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _applyIterableChanges(changes) {
        changes.forEachAddedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => {
            if (typeof record.item === 'string') {
                this._toggleClass(record.item, true);
            }
            else {
                throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(record.item)}`);
            }
        }));
        changes.forEachRemovedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => this._toggleClass(record.item, false)));
    }
    /**
     * Applies a collection of CSS classes to the DOM element.
     *
     * For argument of type Set and Array CSS class names contained in those collections are always
     * added.
     * For argument of type Map CSS class name in the map's key is toggled based on the value (added
     * for truthy and removed for falsy).
     * @private
     * @param {?} rawClassVal
     * @return {?}
     */
    _applyClasses(rawClassVal) {
        if (rawClassVal) {
            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                ((/** @type {?} */ (rawClassVal))).forEach((/**
                 * @param {?} klass
                 * @return {?}
                 */
                (klass) => this._toggleClass(klass, true)));
            }
            else {
                Object.keys(rawClassVal).forEach((/**
                 * @param {?} klass
                 * @return {?}
                 */
                klass => this._toggleClass(klass, !!rawClassVal[klass])));
            }
        }
    }
    /**
     * Removes a collection of CSS classes from the DOM element. This is mostly useful for cleanup
     * purposes.
     * @private
     * @param {?} rawClassVal
     * @return {?}
     */
    _removeClasses(rawClassVal) {
        if (rawClassVal) {
            if (Array.isArray(rawClassVal) || rawClassVal instanceof Set) {
                ((/** @type {?} */ (rawClassVal))).forEach((/**
                 * @param {?} klass
                 * @return {?}
                 */
                (klass) => this._toggleClass(klass, false)));
            }
            else {
                Object.keys(rawClassVal).forEach((/**
                 * @param {?} klass
                 * @return {?}
                 */
                klass => this._toggleClass(klass, false)));
            }
        }
    }
    /**
     * @private
     * @param {?} klass
     * @param {?} enabled
     * @return {?}
     */
    _toggleClass(klass, enabled) {
        klass = klass.trim();
        if (klass) {
            klass.split(/\s+/g).forEach((/**
             * @param {?} klass
             * @return {?}
             */
            klass => {
                if (enabled) {
                    this._renderer.addClass(this._ngEl.nativeElement, klass);
                }
                else {
                    this._renderer.removeClass(this._ngEl.nativeElement, klass);
                }
            }));
        }
    }
}
NgClass.ɵfac = function NgClass_Factory(t) { return new (t || NgClass)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"])); };
NgClass.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgClass, selectors: [["", "ngClass", ""]], inputs: { klass: ["class", "klass"], ngClass: "ngClass" } });
/** @nocollapse */
NgClass.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }
];
NgClass.propDecorators = {
    klass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['class',] }],
    ngClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngClass',] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgClass, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngClass]' }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }]; }, { klass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['class']
        }], ngClass: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngClass']
        }] }); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/directives/ng_component_outlet.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Instantiates a single {\@link Component} type and inserts its Host View into current View.
 * `NgComponentOutlet` provides a declarative approach for dynamic component creation.
 *
 * `NgComponentOutlet` requires a component type, if a falsy value is set the view will clear and
 * any existing component will get destroyed.
 *
 * \@usageNotes
 *
 * ### Fine tune control
 *
 * You can control the component creation process by using the following optional attributes:
 *
 * * `ngComponentOutletInjector`: Optional custom {\@link Injector} that will be used as parent for
 * the Component. Defaults to the injector of the current view container.
 *
 * * `ngComponentOutletContent`: Optional list of projectable nodes to insert into the content
 * section of the component, if exists.
 *
 * * `ngComponentOutletNgModuleFactory`: Optional module factory to allow dynamically loading other
 * module, then load a component from that module.
 *
 * ### Syntax
 *
 * Simple
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression"></ng-container>
 * ```
 *
 * Customized injector/content
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   injector: injectorExpression;
 *                                   content: contentNodesExpression;">
 * </ng-container>
 * ```
 *
 * Customized ngModuleFactory
 * ```
 * <ng-container *ngComponentOutlet="componentTypeExpression;
 *                                   ngModuleFactory: moduleFactory;">
 * </ng-container>
 * ```
 *
 * ### A simple example
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='SimpleExample'}
 *
 * A more complete example with additional options:
 *
 * {\@example common/ngComponentOutlet/ts/module.ts region='CompleteExample'}
 *
 * \@publicApi
 * \@ngModule CommonModule
 */
class NgComponentOutlet {
    /**
     * @param {?} _viewContainerRef
     */
    constructor(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
        this._componentRef = null;
        this._moduleRef = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this._viewContainerRef.clear();
        this._componentRef = null;
        if (this.ngComponentOutlet) {
            /** @type {?} */
            const elInjector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
            if (changes['ngComponentOutletNgModuleFactory']) {
                if (this._moduleRef)
                    this._moduleRef.destroy();
                if (this.ngComponentOutletNgModuleFactory) {
                    /** @type {?} */
                    const parentModule = elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModuleRef"]);
                    this._moduleRef = this.ngComponentOutletNgModuleFactory.create(parentModule.injector);
                }
                else {
                    this._moduleRef = null;
                }
            }
            /** @type {?} */
            const componentFactoryResolver = this._moduleRef ? this._moduleRef.componentFactoryResolver :
                elInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ComponentFactoryResolver"]);
            /** @type {?} */
            const componentFactory = componentFactoryResolver.resolveComponentFactory(this.ngComponentOutlet);
            this._componentRef = this._viewContainerRef.createComponent(componentFactory, this._viewContainerRef.length, elInjector, this.ngComponentOutletContent);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._moduleRef)
            this._moduleRef.destroy();
    }
}
NgComponentOutlet.ɵfac = function NgComponentOutlet_Factory(t) { return new (t || NgComponentOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"])); };
NgComponentOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgComponentOutlet, selectors: [["", "ngComponentOutlet", ""]], inputs: { ngComponentOutlet: "ngComponentOutlet", ngComponentOutletInjector: "ngComponentOutletInjector", ngComponentOutletContent: "ngComponentOutletContent", ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory" }, features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]] });
/** @nocollapse */
NgComponentOutlet.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
];
NgComponentOutlet.propDecorators = {
    ngComponentOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    ngComponentOutletInjector: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    ngComponentOutletContent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    ngComponentOutletNgModuleFactory: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgComponentOutlet, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngComponentOutlet]' }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }]; }, { ngComponentOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], ngComponentOutletInjector: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], ngComponentOutletContent: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], ngComponentOutletNgModuleFactory: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }] }); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/directives/ng_for_of.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@publicApi
 * @template T, U
 */
class NgForOfContext {
    /**
     * @param {?} $implicit
     * @param {?} ngForOf
     * @param {?} index
     * @param {?} count
     */
    constructor($implicit, ngForOf, index, count) {
        this.$implicit = $implicit;
        this.ngForOf = ngForOf;
        this.index = index;
        this.count = count;
    }
    /**
     * @return {?}
     */
    get first() { return this.index === 0; }
    /**
     * @return {?}
     */
    get last() { return this.index === this.count - 1; }
    /**
     * @return {?}
     */
    get even() { return this.index % 2 === 0; }
    /**
     * @return {?}
     */
    get odd() { return !this.even; }
}
if (false) {}
/**
 * A [structural directive](guide/structural-directives) that renders
 * a template for each item in a collection.
 * The directive is placed on an element, which becomes the parent
 * of the cloned templates.
 *
 * The `ngForOf` directive is generally used in the
 * [shorthand form](guide/structural-directives#the-asterisk--prefix) `*ngFor`.
 * In this form, the template to be rendered for each iteration is the content
 * of an anchor element containing the directive.
 *
 * The following example shows the shorthand syntax with some options,
 * contained in an `<li>` element.
 *
 * ```
 * <li *ngFor="let item of items; index as i; trackBy: trackByFn">...</li>
 * ```
 *
 * The shorthand form expands into a long form that uses the `ngForOf` selector
 * on an `<ng-template>` element.
 * The content of the `<ng-template>` element is the `<li>` element that held the
 * short-form directive.
 *
 * Here is the expanded version of the short-form example.
 *
 * ```
 * <ng-template ngFor let-item [ngForOf]="items" let-i="index" [ngForTrackBy]="trackByFn">
 *   <li>...</li>
 * </ng-template>
 * ```
 *
 * Angular automatically expands the shorthand syntax as it compiles the template.
 * The context for each embedded view is logically merged to the current component
 * context according to its lexical position.
 *
 * When using the shorthand syntax, Angular allows only [one structural directive
 * on an element](guide/structural-directives#one-structural-directive-per-host-element).
 * If you want to iterate conditionally, for example,
 * put the `*ngIf` on a container element that wraps the `*ngFor` element.
 * For futher discussion, see
 * [Structural Directives](guide/structural-directives#one-per-element).
 *
 * \@usageNotes
 *
 * ### Local variables
 *
 * `NgForOf` provides exported values that can be aliased to local variables.
 * For example:
 *
 *  ```
 * <li *ngFor="let user of users; index as i; first as isFirst">
 *    {{i}}/{{users.length}}. {{user}} <span *ngIf="isFirst">default</span>
 * </li>
 * ```
 *
 * The following exported values can be aliased to local variables:
 *
 * - `$implicit: T`: The value of the individual items in the iterable (`ngForOf`).
 * - `ngForOf: NgIterable<T>`: The value of the iterable expression. Useful when the expression is
 * more complex then a property access, for example when using the async pipe (`userStreams |
 * async`).
 * - `index: number`: The index of the current item in the iterable.
 * - `first: boolean`: True when the item is the first item in the iterable.
 * - `last: boolean`: True when the item is the last item in the iterable.
 * - `even: boolean`: True when the item has an even index in the iterable.
 * - `odd: boolean`: True when the item has an odd index in the iterable.
 *
 * ### Change propagation
 *
 * When the contents of the iterator changes, `NgForOf` makes the corresponding changes to the DOM:
 *
 * * When an item is added, a new instance of the template is added to the DOM.
 * * When an item is removed, its template instance is removed from the DOM.
 * * When items are reordered, their respective templates are reordered in the DOM.
 *
 * Angular uses object identity to track insertions and deletions within the iterator and reproduce
 * those changes in the DOM. This has important implications for animations and any stateful
 * controls that are present, such as `<input>` elements that accept user input. Inserted rows can
 * be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state
 * such as user input.
 * For more on animations, see [Transitions and Triggers](guide/transition-and-triggers).
 *
 * The identities of elements in the iterator can change while the data does not.
 * This can happen, for example, if the iterator is produced from an RPC to the server, and that
 * RPC is re-run. Even if the data hasn't changed, the second response produces objects with
 * different identities, and Angular must tear down the entire DOM and rebuild it (as if all old
 * elements were deleted and all new elements inserted).
 *
 * To avoid this expensive operation, you can customize the default tracking algorithm.
 * by supplying the `trackBy` option to `NgForOf`.
 * `trackBy` takes a function that has two arguments: `index` and `item`.
 * If `trackBy` is given, Angular tracks changes by the return value of the function.
 *
 * @see [Structural Directives](guide/structural-directives)
 * \@ngModule CommonModule
 * \@publicApi
 * @template T, U
 */
class NgForOf {
    /**
     * @param {?} _viewContainer
     * @param {?} _template
     * @param {?} _differs
     */
    constructor(_viewContainer, _template, _differs) {
        this._viewContainer = _viewContainer;
        this._template = _template;
        this._differs = _differs;
        this._ngForOf = null;
        this._ngForOfDirty = true;
        this._differ = null;
    }
    /**
     * The value of the iterable expression, which can be used as a
     * [template input variable](guide/structural-directives#template-input-variable).
     * @param {?} ngForOf
     * @return {?}
     */
    set ngForOf(ngForOf) {
        this._ngForOf = ngForOf;
        this._ngForOfDirty = true;
    }
    /**
     * A function that defines how to track changes for items in the iterable.
     *
     * When items are added, moved, or removed in the iterable,
     * the directive must re-render the appropriate DOM nodes.
     * To minimize churn in the DOM, only nodes that have changed
     * are re-rendered.
     *
     * By default, the change detector assumes that
     * the object instance identifies the node in the iterable.
     * When this function is supplied, the directive uses
     * the result of calling this function to identify the item node,
     * rather than the identity of the object itself.
     *
     * The function receives two inputs,
     * the iteration index and the node object ID.
     * @param {?} fn
     * @return {?}
     */
    set ngForTrackBy(fn) {
        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["isDevMode"])() && fn != null && typeof fn !== 'function') {
            // TODO(vicb): use a log service once there is a public one available
            if ((/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {
                console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. ` +
                    `See https://angular.io/api/common/NgForOf#change-propagation for more information.`);
            }
        }
        this._trackByFn = fn;
    }
    /**
     * @return {?}
     */
    get ngForTrackBy() { return this._trackByFn; }
    /**
     * A reference to the template that is stamped out for each item in the iterable.
     * @see [template reference variable](guide/template-syntax#template-reference-variables--var-)
     * @param {?} value
     * @return {?}
     */
    set ngForTemplate(value) {
        // TODO(TS2.1): make TemplateRef<Partial<NgForRowOf<T>>> once we move to TS v2.1
        // The current type is too restrictive; a template that just uses index, for example,
        // should be acceptable.
        if (value) {
            this._template = value;
        }
    }
    /**
     * Applies the changes when needed.
     * @return {?}
     */
    ngDoCheck() {
        if (this._ngForOfDirty) {
            this._ngForOfDirty = false;
            // React on ngForOf changes only once all inputs have been initialized
            /** @type {?} */
            const value = this._ngForOf;
            if (!this._differ && value) {
                try {
                    this._differ = this._differs.find(value).create(this.ngForTrackBy);
                }
                catch (_a) {
                    throw new Error(`Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables such as Arrays.`);
                }
            }
        }
        if (this._differ) {
            /** @type {?} */
            const changes = this._differ.diff(this._ngForOf);
            if (changes)
                this._applyChanges(changes);
        }
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _applyChanges(changes) {
        /** @type {?} */
        const insertTuples = [];
        changes.forEachOperation((/**
         * @param {?} item
         * @param {?} adjustedPreviousIndex
         * @param {?} currentIndex
         * @return {?}
         */
        (item, adjustedPreviousIndex, currentIndex) => {
            if (item.previousIndex == null) {
                // NgForOf is never "null" or "undefined" here because the differ detected
                // that a new item needs to be inserted from the iterable. This implies that
                // there is an iterable value for "_ngForOf".
                /** @type {?} */
                const view = this._viewContainer.createEmbeddedView(this._template, new NgForOfContext((/** @type {?} */ (null)), (/** @type {?} */ (this._ngForOf)), -1, -1), currentIndex === null ? undefined : currentIndex);
                /** @type {?} */
                const tuple = new RecordViewTuple(item, view);
                insertTuples.push(tuple);
            }
            else if (currentIndex == null) {
                this._viewContainer.remove(adjustedPreviousIndex === null ? undefined : adjustedPreviousIndex);
            }
            else if (adjustedPreviousIndex !== null) {
                /** @type {?} */
                const view = (/** @type {?} */ (this._viewContainer.get(adjustedPreviousIndex)));
                this._viewContainer.move(view, currentIndex);
                /** @type {?} */
                const tuple = new RecordViewTuple(item, (/** @type {?} */ (view)));
                insertTuples.push(tuple);
            }
        }));
        for (let i = 0; i < insertTuples.length; i++) {
            this._perViewChange(insertTuples[i].view, insertTuples[i].record);
        }
        for (let i = 0, ilen = this._viewContainer.length; i < ilen; i++) {
            /** @type {?} */
            const viewRef = (/** @type {?} */ (this._viewContainer.get(i)));
            viewRef.context.index = i;
            viewRef.context.count = ilen;
            viewRef.context.ngForOf = (/** @type {?} */ (this._ngForOf));
        }
        changes.forEachIdentityChange((/**
         * @param {?} record
         * @return {?}
         */
        (record) => {
            /** @type {?} */
            const viewRef = (/** @type {?} */ (this._viewContainer.get(record.currentIndex)));
            viewRef.context.$implicit = record.item;
        }));
    }
    /**
     * @private
     * @param {?} view
     * @param {?} record
     * @return {?}
     */
    _perViewChange(view, record) {
        view.context.$implicit = record.item;
    }
    /**
     * Asserts the correct type of the context for the template that `NgForOf` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `NgForOf` structural directive renders its template with a specific context type.
     * @template T, U
     * @param {?} dir
     * @param {?} ctx
     * @return {?}
     */
    static ngTemplateContextGuard(dir, ctx) {
        return true;
    }
}
NgForOf.ɵfac = function NgForOf_Factory(t) { return new (t || NgForOf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"])); };
NgForOf.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgForOf, selectors: [["", "ngFor", "", "ngForOf", ""]], inputs: { ngForOf: "ngForOf", ngForTrackBy: "ngForTrackBy", ngForTemplate: "ngForTemplate" } });
/** @nocollapse */
NgForOf.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"] }
];
NgForOf.propDecorators = {
    ngForOf: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    ngForTrackBy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    ngForTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgForOf, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngFor][ngForOf]' }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["IterableDiffers"] }]; }, { ngForOf: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], ngForTrackBy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], ngForTemplate: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }] }); })();
if (false) {}
/**
 * @template T, U
 */
class RecordViewTuple {
    /**
     * @param {?} record
     * @param {?} view
     */
    constructor(record, view) {
        this.record = record;
        this.view = view;
    }
}
if (false) {}
/**
 * @param {?} type
 * @return {?}
 */
function getTypeName(type) {
    return type['name'] || typeof type;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/directives/ng_if.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A structural directive that conditionally includes a template based on the value of
 * an expression coerced to Boolean.
 * When the expression evaluates to true, Angular renders the template
 * provided in a `then` clause, and when  false or null,
 * Angular renders the template provided in an optional `else` clause. The default
 * template for the `else` clause is blank.
 *
 * A [shorthand form](guide/structural-directives#the-asterisk--prefix) of the directive,
 * `*ngIf="condition"`, is generally used, provided
 * as an attribute of the anchor element for the inserted template.
 * Angular expands this into a more explicit version, in which the anchor element
 * is contained in an `<ng-template>` element.
 *
 * Simple form with shorthand syntax:
 *
 * ```
 * <div *ngIf="condition">Content to render when condition is true.</div>
 * ```
 *
 * Simple form with expanded syntax:
 *
 * ```
 * <ng-template [ngIf]="condition"><div>Content to render when condition is
 * true.</div></ng-template>
 * ```
 *
 * Form with an "else" block:
 *
 * ```
 * <div *ngIf="condition; else elseBlock">Content to render when condition is true.</div>
 * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
 * ```
 *
 * Shorthand form with "then" and "else" blocks:
 *
 * ```
 * <div *ngIf="condition; then thenBlock else elseBlock"></div>
 * <ng-template #thenBlock>Content to render when condition is true.</ng-template>
 * <ng-template #elseBlock>Content to render when condition is false.</ng-template>
 * ```
 *
 * Form with storing the value locally:
 *
 * ```
 * <div *ngIf="condition as value; else elseBlock">{{value}}</div>
 * <ng-template #elseBlock>Content to render when value is null.</ng-template>
 * ```
 *
 * \@usageNotes
 *
 * The `*ngIf` directive is most commonly used to conditionally show an inline template,
 * as seen in the following  example.
 * The default `else` template is blank.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfSimple'}
 *
 * ### Showing an alternative template using `else`
 *
 * To display a template when `expression` evaluates to false, use an `else` template
 * binding as shown in the following example.
 * The `else` binding points to an `<ng-template>`  element labeled `#elseBlock`.
 * The template can be defined anywhere in the component view, but is typically placed right after
 * `ngIf` for readability.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfElse'}
 *
 * ### Using an external `then` template
 *
 * In the previous example, the then-clause template is specified inline, as the content of the
 * tag that contains the `ngIf` directive. You can also specify a template that is defined
 * externally, by referencing a labeled `<ng-template>` element. When you do this, you can
 * change which template to use at runtime, as shown in the following example.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfThenElse'}
 *
 * ### Storing a conditional result in a variable
 *
 * You might want to show a set of properties from the same object. If you are waiting
 * for asynchronous data, the object can be undefined.
 * In this case, you can use `ngIf` and store the result of the condition in a local
 * variable as shown in the the following example.
 *
 * {\@example common/ngIf/ts/module.ts region='NgIfAs'}
 *
 * This code uses only one `AsyncPipe`, so only one subscription is created.
 * The conditional statement stores the result of `userStream|async` in the local variable `user`.
 * You can then bind the local `user` repeatedly.
 *
 * The conditional displays the data only if `userStream` returns a value,
 * so you don't need to use the
 * [safe-navigation-operator](guide/template-syntax#safe-navigation-operator) (`?.`)
 * to guard against null values when accessing properties.
 * You can display an alternative template while waiting for the data.
 *
 * ### Shorthand syntax
 *
 * The shorthand syntax `*ngIf` expands into two separate template specifications
 * for the "then" and "else" clauses. For example, consider the following shorthand statement,
 * that is meant to show a loading page while waiting for data to be loaded.
 *
 * ```
 * <div class="hero-list" *ngIf="heroes else loading">
 *  ...
 * </div>
 *
 * <ng-template #loading>
 *  <div>Loading...</div>
 * </ng-template>
 * ```
 *
 * You can see that the "else" clause references the `<ng-template>`
 * with the `#loading` label, and the template for the "then" clause
 * is provided as the content of the anchor element.
 *
 * However, when Angular expands the shorthand syntax, it creates
 * another `<ng-template>` tag, with `ngIf` and `ngIfElse` directives.
 * The anchor element containing the template for the "then" clause becomes
 * the content of this unlabeled `<ng-template>` tag.
 *
 * ```
 * <ng-template [ngIf]="heroes" [ngIfElse]="loading">
 *  <div class="hero-list">
 *   ...
 *  </div>
 * </ng-template>
 *
 * <ng-template #loading>
 *  <div>Loading...</div>
 * </ng-template>
 * ```
 *
 * The presence of the implicit template object has implications for the nesting of
 * structural directives. For more on this subject, see
 * [Structural Directives](https://angular.io/guide/structural-directives#one-per-element).
 *
 * \@ngModule CommonModule
 * \@publicApi
 * @template T
 */
class NgIf {
    /**
     * @param {?} _viewContainer
     * @param {?} templateRef
     */
    constructor(_viewContainer, templateRef) {
        this._viewContainer = _viewContainer;
        this._context = new NgIfContext();
        this._thenTemplateRef = null;
        this._elseTemplateRef = null;
        this._thenViewRef = null;
        this._elseViewRef = null;
        this._thenTemplateRef = templateRef;
    }
    /**
     * The Boolean expression to evaluate as the condition for showing a template.
     * @param {?} condition
     * @return {?}
     */
    set ngIf(condition) {
        this._context.$implicit = this._context.ngIf = condition;
        this._updateView();
    }
    /**
     * A template to show if the condition expression evaluates to true.
     * @param {?} templateRef
     * @return {?}
     */
    set ngIfThen(templateRef) {
        assertTemplate('ngIfThen', templateRef);
        this._thenTemplateRef = templateRef;
        this._thenViewRef = null; // clear previous view if any.
        this._updateView();
    }
    /**
     * A template to show if the condition expression evaluates to false.
     * @param {?} templateRef
     * @return {?}
     */
    set ngIfElse(templateRef) {
        assertTemplate('ngIfElse', templateRef);
        this._elseTemplateRef = templateRef;
        this._elseViewRef = null; // clear previous view if any.
        this._updateView();
    }
    /**
     * @private
     * @return {?}
     */
    _updateView() {
        if (this._context.$implicit) {
            if (!this._thenViewRef) {
                this._viewContainer.clear();
                this._elseViewRef = null;
                if (this._thenTemplateRef) {
                    this._thenViewRef =
                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                }
            }
        }
        else {
            if (!this._elseViewRef) {
                this._viewContainer.clear();
                this._thenViewRef = null;
                if (this._elseTemplateRef) {
                    this._elseViewRef =
                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                }
            }
        }
    }
    /**
     * Asserts the correct type of the context for the template that `NgIf` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `NgIf` structural directive renders its template with a specific context type.
     * @template T
     * @param {?} dir
     * @param {?} ctx
     * @return {?}
     */
    static ngTemplateContextGuard(dir, ctx) {
        return true;
    }
}
NgIf.ɵfac = function NgIf_Factory(t) { return new (t || NgIf)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"])); };
NgIf.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgIf, selectors: [["", "ngIf", ""]], inputs: { ngIf: "ngIf", ngIfThen: "ngIfThen", ngIfElse: "ngIfElse" } });
/** @nocollapse */
NgIf.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }
];
NgIf.propDecorators = {
    ngIf: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    ngIfThen: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    ngIfElse: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgIf, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngIf]' }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }]; }, { ngIf: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], ngIfThen: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], ngIfElse: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }] }); })();
if (false) {}
/**
 * \@publicApi
 * @template T
 */
class NgIfContext {
    constructor() {
        this.$implicit = (/** @type {?} */ (null));
        this.ngIf = (/** @type {?} */ (null));
    }
}
if (false) {}
/**
 * @param {?} property
 * @param {?} templateRef
 * @return {?}
 */
function assertTemplate(property, templateRef) {
    /** @type {?} */
    const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);
    if (!isTemplateRefOrNull) {
        throw new Error(`${property} must be a TemplateRef, but received '${Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(templateRef)}'.`);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/directives/ng_switch.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SwitchView {
    /**
     * @param {?} _viewContainerRef
     * @param {?} _templateRef
     */
    constructor(_viewContainerRef, _templateRef) {
        this._viewContainerRef = _viewContainerRef;
        this._templateRef = _templateRef;
        this._created = false;
    }
    /**
     * @return {?}
     */
    create() {
        this._created = true;
        this._viewContainerRef.createEmbeddedView(this._templateRef);
    }
    /**
     * @return {?}
     */
    destroy() {
        this._created = false;
        this._viewContainerRef.clear();
    }
    /**
     * @param {?} created
     * @return {?}
     */
    enforceState(created) {
        if (created && !this._created) {
            this.create();
        }
        else if (!created && this._created) {
            this.destroy();
        }
    }
}
if (false) {}
/**
 * \@ngModule CommonModule
 *
 * \@description A structural directive that adds or removes templates (displaying or hiding views)
 * when the next match expression matches the switch expression.
 *
 * The `[ngSwitch]` directive on a container specifies an expression to match against.
 * The expressions to match are provided by `ngSwitchCase` directives on views within the container.
 * - Every view that matches is rendered.
 * - If there are no matches, a view with the `ngSwitchDefault` directive is rendered.
 * - Elements within the `[NgSwitch]` statement but outside of any `NgSwitchCase`
 * or `ngSwitchDefault` directive are preserved at the location.
 *
 * \@usageNotes
 * Define a container element for the directive, and specify the switch expression
 * to match against as an attribute:
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 * ```
 *
 * Within the container, `*ngSwitchCase` statements specify the match expressions
 * as attributes. Include `*ngSwitchDefault` as the final case.
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *    <some-element *ngSwitchCase="match_expression_1">...</some-element>
 * ...
 *    <some-element *ngSwitchDefault>...</some-element>
 * </container-element>
 * ```
 *
 * ### Usage Examples
 *
 * The following example shows how to use more than one case to display the same view:
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <!-- the same view can be shown in more than one case -->
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *   <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *   <!--default case when there are no matches -->
 *   <some-element *ngSwitchDefault>...</some-element>
 * </container-element>
 * ```
 *
 * The following example shows how cases can be nested:
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *       <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *       <some-element *ngSwitchCase="match_expression_2">...</some-element>
 *       <some-other-element *ngSwitchCase="match_expression_3">...</some-other-element>
 *       <ng-container *ngSwitchCase="match_expression_3">
 *         <!-- use a ng-container to group multiple root nodes -->
 *         <inner-element></inner-element>
 *         <inner-other-element></inner-other-element>
 *       </ng-container>
 *       <some-element *ngSwitchDefault>...</some-element>
 *     </container-element>
 * ```
 *
 * \@publicApi
 * @see `NgSwitchCase`
 * @see `NgSwitchDefault`
 * @see [Structural Directives](guide/structural-directives)
 *
 */
class NgSwitch {
    constructor() {
        this._defaultUsed = false;
        this._caseCount = 0;
        this._lastCaseCheckIndex = 0;
        this._lastCasesMatched = false;
    }
    /**
     * @param {?} newValue
     * @return {?}
     */
    set ngSwitch(newValue) {
        this._ngSwitch = newValue;
        if (this._caseCount === 0) {
            this._updateDefaultCases(true);
        }
    }
    /**
     * \@internal
     * @return {?}
     */
    _addCase() { return this._caseCount++; }
    /**
     * \@internal
     * @param {?} view
     * @return {?}
     */
    _addDefault(view) {
        if (!this._defaultViews) {
            this._defaultViews = [];
        }
        this._defaultViews.push(view);
    }
    /**
     * \@internal
     * @param {?} value
     * @return {?}
     */
    _matchCase(value) {
        /** @type {?} */
        const matched = value == this._ngSwitch;
        this._lastCasesMatched = this._lastCasesMatched || matched;
        this._lastCaseCheckIndex++;
        if (this._lastCaseCheckIndex === this._caseCount) {
            this._updateDefaultCases(!this._lastCasesMatched);
            this._lastCaseCheckIndex = 0;
            this._lastCasesMatched = false;
        }
        return matched;
    }
    /**
     * @private
     * @param {?} useDefault
     * @return {?}
     */
    _updateDefaultCases(useDefault) {
        if (this._defaultViews && useDefault !== this._defaultUsed) {
            this._defaultUsed = useDefault;
            for (let i = 0; i < this._defaultViews.length; i++) {
                /** @type {?} */
                const defaultView = this._defaultViews[i];
                defaultView.enforceState(useDefault);
            }
        }
    }
}
NgSwitch.ɵfac = function NgSwitch_Factory(t) { return new (t || NgSwitch)(); };
NgSwitch.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgSwitch, selectors: [["", "ngSwitch", ""]], inputs: { ngSwitch: "ngSwitch" } });
NgSwitch.propDecorators = {
    ngSwitch: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgSwitch, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngSwitch]' }]
    }], function () { return []; }, { ngSwitch: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }] }); })();
if (false) {}
/**
 * \@ngModule CommonModule
 *
 * \@description
 * Provides a switch case expression to match against an enclosing `ngSwitch` expression.
 * When the expressions match, the given `NgSwitchCase` template is rendered.
 * If multiple match expressions match the switch expression value, all of them are displayed.
 *
 * \@usageNotes
 *
 * Within a switch container, `*ngSwitchCase` statements specify the match expressions
 * as attributes. Include `*ngSwitchDefault` as the final case.
 *
 * ```
 * <container-element [ngSwitch]="switch_expression">
 *   <some-element *ngSwitchCase="match_expression_1">...</some-element>
 *   ...
 *   <some-element *ngSwitchDefault>...</some-element>
 * </container-element>
 * ```
 *
 * Each switch-case statement contains an in-line HTML template or template reference
 * that defines the subtree to be selected if the value of the match expression
 * matches the value of the switch expression.
 *
 * Unlike JavaScript, which uses strict equality, Angular uses loose equality.
 * This means that the empty string, `""` matches 0.
 *
 * \@publicApi
 * @see `NgSwitch`
 * @see `NgSwitchDefault`
 *
 */
class NgSwitchCase {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} ngSwitch
     */
    constructor(viewContainer, templateRef, ngSwitch) {
        this.ngSwitch = ngSwitch;
        ngSwitch._addCase();
        this._view = new SwitchView(viewContainer, templateRef);
    }
    /**
     * Performs case matching. For internal use only.
     * @return {?}
     */
    ngDoCheck() { this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase)); }
}
NgSwitchCase.ɵfac = function NgSwitchCase_Factory(t) { return new (t || NgSwitchCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgSwitch, 1)); };
NgSwitchCase.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgSwitchCase, selectors: [["", "ngSwitchCase", ""]], inputs: { ngSwitchCase: "ngSwitchCase" } });
/** @nocollapse */
NgSwitchCase.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },
    { type: NgSwitch, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }] }
];
NgSwitchCase.propDecorators = {
    ngSwitchCase: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgSwitchCase, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngSwitchCase]' }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }, { type: NgSwitch, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }] }]; }, { ngSwitchCase: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }] }); })();
if (false) {}
/**
 * \@ngModule CommonModule
 *
 * \@description
 *
 * Creates a view that is rendered when no `NgSwitchCase` expressions
 * match the `NgSwitch` expression.
 * This statement should be the final case in an `NgSwitch`.
 *
 * \@publicApi
 * @see `NgSwitch`
 * @see `NgSwitchCase`
 *
 */
class NgSwitchDefault {
    /**
     * @param {?} viewContainer
     * @param {?} templateRef
     * @param {?} ngSwitch
     */
    constructor(viewContainer, templateRef, ngSwitch) {
        ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
    }
}
NgSwitchDefault.ɵfac = function NgSwitchDefault_Factory(t) { return new (t || NgSwitchDefault)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgSwitch, 1)); };
NgSwitchDefault.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgSwitchDefault, selectors: [["", "ngSwitchDefault", ""]] });
/** @nocollapse */
NgSwitchDefault.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },
    { type: NgSwitch, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgSwitchDefault, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngSwitchDefault]' }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }, { type: NgSwitch, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/directives/ng_plural.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@ngModule CommonModule
 *
 * \@usageNotes
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">there is nothing</ng-template>
 *   <ng-template ngPluralCase="=1">there is one</ng-template>
 *   <ng-template ngPluralCase="few">there are a few</ng-template>
 * </some-element>
 * ```
 *
 * \@description
 *
 * Adds / removes DOM sub-trees based on a numeric value. Tailored for pluralization.
 *
 * Displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees
 * that match the switch expression's pluralization category.
 *
 * To use this directive you must provide a container element that sets the `[ngPlural]` attribute
 * to a switch expression. Inner elements with a `[ngPluralCase]` will display based on their
 * expression:
 * - if `[ngPluralCase]` is set to a value starting with `=`, it will only display if the value
 *   matches the switch expression exactly,
 * - otherwise, the view will be treated as a "category match", and will only display if exact
 *   value matches aren't found and the value maps to its category for the defined locale.
 *
 * See http://cldr.unicode.org/index/cldr-spec/plural-rules
 *
 * \@publicApi
 */
class NgPlural {
    /**
     * @param {?} _localization
     */
    constructor(_localization) {
        this._localization = _localization;
        this._caseViews = {};
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set ngPlural(value) {
        this._switchValue = value;
        this._updateView();
    }
    /**
     * @param {?} value
     * @param {?} switchView
     * @return {?}
     */
    addCase(value, switchView) { this._caseViews[value] = switchView; }
    /**
     * @private
     * @return {?}
     */
    _updateView() {
        this._clearViews();
        /** @type {?} */
        const cases = Object.keys(this._caseViews);
        /** @type {?} */
        const key = getPluralCategory(this._switchValue, cases, this._localization);
        this._activateView(this._caseViews[key]);
    }
    /**
     * @private
     * @return {?}
     */
    _clearViews() {
        if (this._activeView)
            this._activeView.destroy();
    }
    /**
     * @private
     * @param {?} view
     * @return {?}
     */
    _activateView(view) {
        if (view) {
            this._activeView = view;
            this._activeView.create();
        }
    }
}
NgPlural.ɵfac = function NgPlural_Factory(t) { return new (t || NgPlural)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgLocalization)); };
NgPlural.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgPlural, selectors: [["", "ngPlural", ""]], inputs: { ngPlural: "ngPlural" } });
/** @nocollapse */
NgPlural.ctorParameters = () => [
    { type: NgLocalization }
];
NgPlural.propDecorators = {
    ngPlural: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgPlural, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngPlural]' }]
    }], function () { return [{ type: NgLocalization }]; }, { ngPlural: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }] }); })();
if (false) {}
/**
 * \@ngModule CommonModule
 *
 * \@description
 *
 * Creates a view that will be added/removed from the parent {\@link NgPlural} when the
 * given expression matches the plural expression according to CLDR rules.
 *
 * \@usageNotes
 * ```
 * <some-element [ngPlural]="value">
 *   <ng-template ngPluralCase="=0">...</ng-template>
 *   <ng-template ngPluralCase="other">...</ng-template>
 * </some-element>
 * ```
 *
 * See {\@link NgPlural} for more details and example.
 *
 * \@publicApi
 */
class NgPluralCase {
    /**
     * @param {?} value
     * @param {?} template
     * @param {?} viewContainer
     * @param {?} ngPlural
     */
    constructor(value, template, viewContainer, ngPlural) {
        this.value = value;
        /** @type {?} */
        const isANumber = !isNaN(Number(value));
        ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));
    }
}
NgPluralCase.ɵfac = function NgPluralCase_Factory(t) { return new (t || NgPluralCase)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectAttribute"]('ngPluralCase'), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgPlural, 1)); };
NgPluralCase.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgPluralCase, selectors: [["", "ngPluralCase", ""]] });
/** @nocollapse */
NgPluralCase.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"], args: ['ngPluralCase',] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] },
    { type: NgPlural, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgPluralCase, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngPluralCase]' }]
    }], function () { return [{ type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Attribute"],
                args: ['ngPluralCase']
            }] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["TemplateRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }, { type: NgPlural, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Host"]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/directives/ng_style.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@ngModule CommonModule
 *
 * \@usageNotes
 *
 * Set the font of the containing element to the result of an expression.
 *
 * ```
 * <some-element [ngStyle]="{'font-style': styleExp}">...</some-element>
 * ```
 *
 * Set the width of the containing element to a pixel value returned by an expression.
 *
 * ```
 * <some-element [ngStyle]="{'max-width.px': widthExp}">...</some-element>
 * ```
 *
 * Set a collection of style values using an expression that returns key-value pairs.
 *
 * ```
 * <some-element [ngStyle]="objExp">...</some-element>
 * ```
 *
 * \@description
 *
 * An attribute directive that updates styles for the containing HTML element.
 * Sets one or more style properties, specified as colon-separated key-value pairs.
 * The key is a style name, with an optional `.<unit>` suffix
 * (such as 'top.px', 'font-style.em').
 * The value is an expression to be evaluated.
 * The resulting non-null value, expressed in the given unit,
 * is assigned to the given style property.
 * If the result of evaluation is null, the corresponding style is removed.
 *
 * \@publicApi
 */
class NgStyle {
    /**
     * @param {?} _ngEl
     * @param {?} _differs
     * @param {?} _renderer
     */
    constructor(_ngEl, _differs, _renderer) {
        this._ngEl = _ngEl;
        this._differs = _differs;
        this._renderer = _renderer;
        this._ngStyle = null;
        this._differ = null;
    }
    /**
     * @param {?} values
     * @return {?}
     */
    set ngStyle(values) {
        this._ngStyle = values;
        if (!this._differ && values) {
            this._differ = this._differs.find(values).create();
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this._differ) {
            /** @type {?} */
            const changes = this._differ.diff((/** @type {?} */ (this._ngStyle)));
            if (changes) {
                this._applyChanges(changes);
            }
        }
    }
    /**
     * @private
     * @param {?} nameAndUnit
     * @param {?} value
     * @return {?}
     */
    _setStyle(nameAndUnit, value) {
        const [name, unit] = nameAndUnit.split('.');
        value = value != null && unit ? `${value}${unit}` : value;
        if (value != null) {
            this._renderer.setStyle(this._ngEl.nativeElement, name, (/** @type {?} */ (value)));
        }
        else {
            this._renderer.removeStyle(this._ngEl.nativeElement, name);
        }
    }
    /**
     * @private
     * @param {?} changes
     * @return {?}
     */
    _applyChanges(changes) {
        changes.forEachRemovedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => this._setStyle(record.key, null)));
        changes.forEachAddedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => this._setStyle(record.key, record.currentValue)));
        changes.forEachChangedItem((/**
         * @param {?} record
         * @return {?}
         */
        (record) => this._setStyle(record.key, record.currentValue)));
    }
}
NgStyle.ɵfac = function NgStyle_Factory(t) { return new (t || NgStyle)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"])); };
NgStyle.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgStyle, selectors: [["", "ngStyle", ""]], inputs: { ngStyle: "ngStyle" } });
/** @nocollapse */
NgStyle.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }
];
NgStyle.propDecorators = {
    ngStyle: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"], args: ['ngStyle',] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgStyle, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngStyle]' }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Renderer2"] }]; }, { ngStyle: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"],
            args: ['ngStyle']
        }] }); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/directives/ng_template_outlet.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@ngModule CommonModule
 *
 * \@description
 *
 * Inserts an embedded view from a prepared `TemplateRef`.
 *
 * You can attach a context object to the `EmbeddedViewRef` by setting `[ngTemplateOutletContext]`.
 * `[ngTemplateOutletContext]` should be an object, the object's keys will be available for binding
 * by the local template `let` declarations.
 *
 * \@usageNotes
 * ```
 * <ng-container *ngTemplateOutlet="templateRefExp; context: contextExp"></ng-container>
 * ```
 *
 * Using the key `$implicit` in the context object will set its value as default.
 *
 * ### Example
 *
 * {\@example common/ngTemplateOutlet/ts/module.ts region='NgTemplateOutlet'}
 *
 * \@publicApi
 */
class NgTemplateOutlet {
    /**
     * @param {?} _viewContainerRef
     */
    constructor(_viewContainerRef) {
        this._viewContainerRef = _viewContainerRef;
        this._viewRef = null;
        /**
         * A context object to attach to the {\@link EmbeddedViewRef}. This should be an
         * object, the object's keys will be available for binding by the local template `let`
         * declarations.
         * Using the key `$implicit` in the context object will set its value as default.
         */
        this.ngTemplateOutletContext = null;
        /**
         * A string defining the template reference and optionally the context object for the template.
         */
        this.ngTemplateOutlet = null;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const recreateView = this._shouldRecreateView(changes);
        if (recreateView) {
            /** @type {?} */
            const viewContainerRef = this._viewContainerRef;
            if (this._viewRef) {
                viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
            }
            this._viewRef = this.ngTemplateOutlet ?
                viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, this.ngTemplateOutletContext) :
                null;
        }
        else if (this._viewRef && this.ngTemplateOutletContext) {
            this._updateExistingContext(this.ngTemplateOutletContext);
        }
    }
    /**
     * We need to re-create existing embedded view if:
     * - templateRef has changed
     * - context has changes
     *
     * We mark context object as changed when the corresponding object
     * shape changes (new properties are added or existing properties are removed).
     * In other words we consider context with the same properties as "the same" even
     * if object reference changes (see https://github.com/angular/angular/issues/13407).
     * @private
     * @param {?} changes
     * @return {?}
     */
    _shouldRecreateView(changes) {
        /** @type {?} */
        const ctxChange = changes['ngTemplateOutletContext'];
        return !!changes['ngTemplateOutlet'] || (ctxChange && this._hasContextShapeChanged(ctxChange));
    }
    /**
     * @private
     * @param {?} ctxChange
     * @return {?}
     */
    _hasContextShapeChanged(ctxChange) {
        /** @type {?} */
        const prevCtxKeys = Object.keys(ctxChange.previousValue || {});
        /** @type {?} */
        const currCtxKeys = Object.keys(ctxChange.currentValue || {});
        if (prevCtxKeys.length === currCtxKeys.length) {
            for (let propName of currCtxKeys) {
                if (prevCtxKeys.indexOf(propName) === -1) {
                    return true;
                }
            }
            return false;
        }
        return true;
    }
    /**
     * @private
     * @param {?} ctx
     * @return {?}
     */
    _updateExistingContext(ctx) {
        for (let propName of Object.keys(ctx)) {
            ((/** @type {?} */ ((/** @type {?} */ (this._viewRef)).context)))[propName] = ((/** @type {?} */ (this.ngTemplateOutletContext)))[propName];
        }
    }
}
NgTemplateOutlet.ɵfac = function NgTemplateOutlet_Factory(t) { return new (t || NgTemplateOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"])); };
NgTemplateOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineDirective"]({ type: NgTemplateOutlet, selectors: [["", "ngTemplateOutlet", ""]], inputs: { ngTemplateOutletContext: "ngTemplateOutletContext", ngTemplateOutlet: "ngTemplateOutlet" }, features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]] });
/** @nocollapse */
NgTemplateOutlet.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }
];
NgTemplateOutlet.propDecorators = {
    ngTemplateOutletContext: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    ngTemplateOutlet: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NgTemplateOutlet, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"],
        args: [{ selector: '[ngTemplateOutlet]' }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewContainerRef"] }]; }, { ngTemplateOutletContext: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], ngTemplateOutlet: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }] }); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/directives/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A collection of Angular directives that are likely to be used in each and every Angular
 * application.
 * @type {?}
 */
const COMMON_DIRECTIVES = [
    NgClass,
    NgComponentOutlet,
    NgForOf,
    NgIf,
    NgTemplateOutlet,
    NgStyle,
    NgSwitch,
    NgSwitchCase,
    NgSwitchDefault,
    NgPlural,
    NgPluralCase,
];

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/invalid_pipe_argument_error.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} type
 * @param {?} value
 * @return {?}
 */
function invalidPipeArgumentError(type, value) {
    return Error(`InvalidPipeArgument: '${value}' for pipe '${Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵstringify"])(type)}'`);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/async_pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SubscriptionStrategy() { }
if (false) {}
class ObservableStrategy {
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    createSubscription(async, updateLatestValue) {
        return async.subscribe({ next: updateLatestValue, error: (/**
             * @param {?} e
             * @return {?}
             */
            (e) => { throw e; }) });
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    dispose(subscription) { subscription.unsubscribe(); }
    /**
     * @param {?} subscription
     * @return {?}
     */
    onDestroy(subscription) { subscription.unsubscribe(); }
}
class PromiseStrategy {
    /**
     * @param {?} async
     * @param {?} updateLatestValue
     * @return {?}
     */
    createSubscription(async, updateLatestValue) {
        return async.then(updateLatestValue, (/**
         * @param {?} e
         * @return {?}
         */
        e => { throw e; }));
    }
    /**
     * @param {?} subscription
     * @return {?}
     */
    dispose(subscription) { }
    /**
     * @param {?} subscription
     * @return {?}
     */
    onDestroy(subscription) { }
}
/** @type {?} */
const _promiseStrategy = new PromiseStrategy();
/** @type {?} */
const _observableStrategy = new ObservableStrategy();
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Unwraps a value from an asynchronous primitive.
 *
 * The `async` pipe subscribes to an `Observable` or `Promise` and returns the latest value it has
 * emitted. When a new value is emitted, the `async` pipe marks the component to be checked for
 * changes. When the component gets destroyed, the `async` pipe unsubscribes automatically to avoid
 * potential memory leaks.
 *
 * \@usageNotes
 *
 * ### Examples
 *
 * This example binds a `Promise` to the view. Clicking the `Resolve` button resolves the
 * promise.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipePromise'}
 *
 * It's also possible to use `async` with Observables. The example below binds the `time` Observable
 * to the view. The Observable continuously updates the view with the current time.
 *
 * {\@example common/pipes/ts/async_pipe.ts region='AsyncPipeObservable'}
 *
 * \@publicApi
 */
class AsyncPipe {
    /**
     * @param {?} _ref
     */
    constructor(_ref) {
        this._ref = _ref;
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
        this._strategy = (/** @type {?} */ (null));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._subscription) {
            this._dispose();
        }
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    transform(obj) {
        if (!this._obj) {
            if (obj) {
                this._subscribe(obj);
            }
            this._latestReturnedValue = this._latestValue;
            return this._latestValue;
        }
        if (obj !== this._obj) {
            this._dispose();
            return this.transform((/** @type {?} */ (obj)));
        }
        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵlooseIdentical"])(this._latestValue, this._latestReturnedValue)) {
            return this._latestReturnedValue;
        }
        this._latestReturnedValue = this._latestValue;
        return _angular_core__WEBPACK_IMPORTED_MODULE_0__["WrappedValue"].wrap(this._latestValue);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    _subscribe(obj) {
        this._obj = obj;
        this._strategy = this._selectStrategy(obj);
        this._subscription = this._strategy.createSubscription(obj, (/**
         * @param {?} value
         * @return {?}
         */
        (value) => this._updateLatestValue(obj, value)));
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    _selectStrategy(obj) {
        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisPromise"])(obj)) {
            return _promiseStrategy;
        }
        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵisObservable"])(obj)) {
            return _observableStrategy;
        }
        throw invalidPipeArgumentError(AsyncPipe, obj);
    }
    /**
     * @private
     * @return {?}
     */
    _dispose() {
        this._strategy.dispose((/** @type {?} */ (this._subscription)));
        this._latestValue = null;
        this._latestReturnedValue = null;
        this._subscription = null;
        this._obj = null;
    }
    /**
     * @private
     * @param {?} async
     * @param {?} value
     * @return {?}
     */
    _updateLatestValue(async, value) {
        if (async === this._obj) {
            this._latestValue = value;
            this._ref.markForCheck();
        }
    }
}
AsyncPipe.ɵfac = function AsyncPipe_Factory(t) { return new (t || AsyncPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinjectPipeChangeDetectorRef"]()); };
AsyncPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "async", type: AsyncPipe, pure: false });
/** @nocollapse */
AsyncPipe.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AsyncPipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'async', pure: false }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ChangeDetectorRef"] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/case_conversion_pipes.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Transforms text to all lower case.
 *
 * @see `UpperCasePipe`
 * @see `TitleCasePipe`
 * \@usageNotes
 *
 * The following example defines a view that allows the user to enter
 * text, and then uses the pipe to convert the input text to all lower case.
 *
 * <code-example path="common/pipes/ts/lowerupper_pipe.ts" region='LowerUpperPipe'></code-example>
 *
 * \@ngModule CommonModule
 * \@publicApi
 */
class LowerCasePipe {
    /**
     * @param {?} value The string to transform to lower case.
     * @return {?}
     */
    transform(value) {
        if (!value)
            return value;
        if (typeof value !== 'string') {
            throw invalidPipeArgumentError(LowerCasePipe, value);
        }
        return value.toLowerCase();
    }
}
LowerCasePipe.ɵfac = function LowerCasePipe_Factory(t) { return new (t || LowerCasePipe)(); };
LowerCasePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "lowercase", type: LowerCasePipe, pure: true });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](LowerCasePipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'lowercase' }]
    }], null, null); })();
//
// Regex below matches any Unicode word and compatible with ES5. In ES2018 the same result
// can be achieved by using /\p{L}\S*/gu and also known as Unicode Property Escapes
// (http://2ality.com/2017/07/regexp-unicode-property-escapes.html). Since there is no
// transpilation of this functionality down to ES5 without external tool, the only solution is
// to use already transpiled form. Example can be found here -
// https://mothereff.in/regexpu#input=var+regex+%3D+/%5Cp%7BL%7D/u%3B&unicodePropertyEscape=1
//
/** @type {?} */
const unicodeWordMatch = /(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D])\S*/g;
/**
 * Transforms text to title case.
 * Capitalizes the first letter of each word, and transforms the
 * rest of the word to lower case.
 * Words are delimited by any whitespace character, such as a space, tab, or line-feed character.
 *
 * @see `LowerCasePipe`
 * @see `UpperCasePipe`
 *
 * \@usageNotes
 * The following example shows the result of transforming various strings into title case.
 *
 * <code-example path="common/pipes/ts/titlecase_pipe.ts" region='TitleCasePipe'></code-example>
 *
 * \@ngModule CommonModule
 * \@publicApi
 */
class TitleCasePipe {
    /**
     * @param {?} value The string to transform to title case.
     * @return {?}
     */
    transform(value) {
        if (!value)
            return value;
        if (typeof value !== 'string') {
            throw invalidPipeArgumentError(TitleCasePipe, value);
        }
        return value.replace(unicodeWordMatch, ((/**
         * @param {?} txt
         * @return {?}
         */
        txt => txt[0].toUpperCase() + txt.substr(1).toLowerCase())));
    }
}
TitleCasePipe.ɵfac = function TitleCasePipe_Factory(t) { return new (t || TitleCasePipe)(); };
TitleCasePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "titlecase", type: TitleCasePipe, pure: true });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](TitleCasePipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'titlecase' }]
    }], null, null); })();
/**
 * Transforms text to all upper case.
 * @see `LowerCasePipe`
 * @see `TitleCasePipe`
 *
 * \@ngModule CommonModule
 * \@publicApi
 */
class UpperCasePipe {
    /**
     * @param {?} value The string to transform to upper case.
     * @return {?}
     */
    transform(value) {
        if (!value)
            return value;
        if (typeof value !== 'string') {
            throw invalidPipeArgumentError(UpperCasePipe, value);
        }
        return value.toUpperCase();
    }
}
UpperCasePipe.ɵfac = function UpperCasePipe_Factory(t) { return new (t || UpperCasePipe)(); };
UpperCasePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "uppercase", type: UpperCasePipe, pure: true });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](UpperCasePipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'uppercase' }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/date_pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// clang-format off
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Formats a date value according to locale rules.
 *
 * Only the `en-US` locale data comes with Angular. To localize dates
 * in another language, you must import the corresponding locale data.
 * See the [I18n guide](guide/i18n#i18n-pipes) for more information.
 *
 * @see `formatDate()`
 *
 *
 * \@usageNotes
 *
 * The result of this pipe is not reevaluated when the input is mutated. To avoid the need to
 * reformat the date on every change-detection cycle, treat the date as an immutable object
 * and change the reference when the pipe needs to run again.
 *
 * ### Pre-defined format options
 *
 * Examples are given in `en-US` locale.
 *
 * - `'short'`: equivalent to `'M/d/yy, h:mm a'` (`6/15/15, 9:03 AM`).
 * - `'medium'`: equivalent to `'MMM d, y, h:mm:ss a'` (`Jun 15, 2015, 9:03:01 AM`).
 * - `'long'`: equivalent to `'MMMM d, y, h:mm:ss a z'` (`June 15, 2015 at 9:03:01 AM
 * GMT+1`).
 * - `'full'`: equivalent to `'EEEE, MMMM d, y, h:mm:ss a zzzz'` (`Monday, June 15, 2015 at
 * 9:03:01 AM GMT+01:00`).
 * - `'shortDate'`: equivalent to `'M/d/yy'` (`6/15/15`).
 * - `'mediumDate'`: equivalent to `'MMM d, y'` (`Jun 15, 2015`).
 * - `'longDate'`: equivalent to `'MMMM d, y'` (`June 15, 2015`).
 * - `'fullDate'`: equivalent to `'EEEE, MMMM d, y'` (`Monday, June 15, 2015`).
 * - `'shortTime'`: equivalent to `'h:mm a'` (`9:03 AM`).
 * - `'mediumTime'`: equivalent to `'h:mm:ss a'` (`9:03:01 AM`).
 * - `'longTime'`: equivalent to `'h:mm:ss a z'` (`9:03:01 AM GMT+1`).
 * - `'fullTime'`: equivalent to `'h:mm:ss a zzzz'` (`9:03:01 AM GMT+01:00`).
 *
 * ### Custom format options
 *
 * You can construct a format string using symbols to specify the components
 * of a date-time value, as described in the following table.
 * Format details depend on the locale.
 * Fields marked with (*) are only available in the extra data set for the given locale.
 *
 *  | Field type         | Format      | Description                                                   | Example Value                                              |
 *  |--------------------|-------------|---------------------------------------------------------------|------------------------------------------------------------|
 *  | Era                | G, GG & GGG | Abbreviated                                                   | AD                                                         |
 *  |                    | GGGG        | Wide                                                          | Anno Domini                                                |
 *  |                    | GGGGG       | Narrow                                                        | A                                                          |
 *  | Year               | y           | Numeric: minimum digits                                       | 2, 20, 201, 2017, 20173                                    |
 *  |                    | yy          | Numeric: 2 digits + zero padded                               | 02, 20, 01, 17, 73                                         |
 *  |                    | yyy         | Numeric: 3 digits + zero padded                               | 002, 020, 201, 2017, 20173                                 |
 *  |                    | yyyy        | Numeric: 4 digits or more + zero padded                       | 0002, 0020, 0201, 2017, 20173                              |
 *  | Month              | M           | Numeric: 1 digit                                              | 9, 12                                                      |
 *  |                    | MM          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
 *  |                    | MMM         | Abbreviated                                                   | Sep                                                        |
 *  |                    | MMMM        | Wide                                                          | September                                                  |
 *  |                    | MMMMM       | Narrow                                                        | S                                                          |
 *  | Month standalone   | L           | Numeric: 1 digit                                              | 9, 12                                                      |
 *  |                    | LL          | Numeric: 2 digits + zero padded                               | 09, 12                                                     |
 *  |                    | LLL         | Abbreviated                                                   | Sep                                                        |
 *  |                    | LLLL        | Wide                                                          | September                                                  |
 *  |                    | LLLLL       | Narrow                                                        | S                                                          |
 *  | Week of year       | w           | Numeric: minimum digits                                       | 1... 53                                                    |
 *  |                    | ww          | Numeric: 2 digits + zero padded                               | 01... 53                                                   |
 *  | Week of month      | W           | Numeric: 1 digit                                              | 1... 5                                                     |
 *  | Day of month       | d           | Numeric: minimum digits                                       | 1                                                          |
 *  |                    | dd          | Numeric: 2 digits + zero padded                               | 01                                                          |
 *  | Week day           | E, EE & EEE | Abbreviated                                                   | Tue                                                        |
 *  |                    | EEEE        | Wide                                                          | Tuesday                                                    |
 *  |                    | EEEEE       | Narrow                                                        | T                                                          |
 *  |                    | EEEEEE      | Short                                                         | Tu                                                         |
 *  | Period             | a, aa & aaa | Abbreviated                                                   | am/pm or AM/PM                                             |
 *  |                    | aaaa        | Wide (fallback to `a` when missing)                           | ante meridiem/post meridiem                                |
 *  |                    | aaaaa       | Narrow                                                        | a/p                                                        |
 *  | Period*            | B, BB & BBB | Abbreviated                                                   | mid.                                                       |
 *  |                    | BBBB        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
 *  |                    | BBBBB       | Narrow                                                        | md                                                         |
 *  | Period standalone* | b, bb & bbb | Abbreviated                                                   | mid.                                                       |
 *  |                    | bbbb        | Wide                                                          | am, pm, midnight, noon, morning, afternoon, evening, night |
 *  |                    | bbbbb       | Narrow                                                        | md                                                         |
 *  | Hour 1-12          | h           | Numeric: minimum digits                                       | 1, 12                                                      |
 *  |                    | hh          | Numeric: 2 digits + zero padded                               | 01, 12                                                     |
 *  | Hour 0-23          | H           | Numeric: minimum digits                                       | 0, 23                                                      |
 *  |                    | HH          | Numeric: 2 digits + zero padded                               | 00, 23                                                     |
 *  | Minute             | m           | Numeric: minimum digits                                       | 8, 59                                                      |
 *  |                    | mm          | Numeric: 2 digits + zero padded                               | 08, 59                                                     |
 *  | Second             | s           | Numeric: minimum digits                                       | 0... 59                                                    |
 *  |                    | ss          | Numeric: 2 digits + zero padded                               | 00... 59                                                   |
 *  | Fractional seconds | S           | Numeric: 1 digit                                              | 0... 9                                                     |
 *  |                    | SS          | Numeric: 2 digits + zero padded                               | 00... 99                                                   |
 *  |                    | SSS         | Numeric: 3 digits + zero padded (= milliseconds)              | 000... 999                                                 |
 *  | Zone               | z, zz & zzz | Short specific non location format (fallback to O)            | GMT-8                                                      |
 *  |                    | zzzz        | Long specific non location format (fallback to OOOO)          | GMT-08:00                                                  |
 *  |                    | Z, ZZ & ZZZ | ISO8601 basic format                                          | -0800                                                      |
 *  |                    | ZZZZ        | Long localized GMT format                                     | GMT-8:00                                                   |
 *  |                    | ZZZZZ       | ISO8601 extended format + Z indicator for offset 0 (= XXXXX)  | -08:00                                                     |
 *  |                    | O, OO & OOO | Short localized GMT format                                    | GMT-8                                                      |
 *  |                    | OOOO        | Long localized GMT format                                     | GMT-08:00                                                  |
 *
 * Note that timezone correction is not applied to an ISO string that has no time component, such as "2016-09-19"
 *
 * ### Format examples
 *
 * These examples transform a date into various formats,
 * assuming that `dateObj` is a JavaScript `Date` object for
 * year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11,
 * given in the local time for the `en-US` locale.
 *
 * ```
 * {{ dateObj | date }}               // output is 'Jun 15, 2015'
 * {{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'
 * {{ dateObj | date:'shortTime' }}   // output is '9:43 PM'
 * {{ dateObj | date:'mm:ss' }}       // output is '43:11'
 * ```
 *
 * ### Usage example
 *
 * The following component uses a date pipe to display the current date in different formats.
 *
 * ```
 * \@Component({
 *  selector: 'date-pipe',
 *  template: `<div>
 *    <p>Today is {{today | date}}</p>
 *    <p>Or if you prefer, {{today | date:'fullDate'}}</p>
 *    <p>The time is {{today | date:'h:mm a z'}}</p>
 *  </div>`
 * })
 * // Get the current date and time as a date-time value.
 * export class DatePipeComponent {
 *   today: number = Date.now();
 * }
 * ```
 *
 * \@publicApi
 */
// clang-format on
class DatePipe {
    /**
     * @param {?} locale
     */
    constructor(locale) {
        this.locale = locale;
    }
    /**
     * @param {?} value The date expression: a `Date` object,  a number
     * (milliseconds since UTC epoch), or an ISO string (https://www.w3.org/TR/NOTE-datetime).
     * @param {?=} format The date/time components to include, using predefined options or a
     * custom format string.
     * @param {?=} timezone A timezone offset (such as `'+0430'`), or a standard
     * UTC/GMT or continental US timezone abbreviation.
     * When not supplied, uses the end-user's local system timezone.
     * @param {?=} locale A locale code for the locale format rules to use.
     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
     * @return {?} A date string in the desired format.
     */
    transform(value, format = 'mediumDate', timezone, locale) {
        if (value == null || value === '' || value !== value)
            return null;
        try {
            return formatDate(value, format, locale || this.locale, timezone);
        }
        catch (error) {
            throw invalidPipeArgumentError(DatePipe, error.message);
        }
    }
}
DatePipe.ɵfac = function DatePipe_Factory(t) { return new (t || DatePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"])); };
DatePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "date", type: DatePipe, pure: true });
/** @nocollapse */
DatePipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DatePipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'date', pure: true }]
    }], function () { return [{ type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/i18n_plural_pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const _INTERPOLATION_REGEXP = /#/g;
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Maps a value to a string that pluralizes the value according to locale rules.
 *
 * \@usageNotes
 *
 * ### Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nPluralPipeComponent'}
 *
 * \@publicApi
 */
class I18nPluralPipe {
    /**
     * @param {?} _localization
     */
    constructor(_localization) {
        this._localization = _localization;
    }
    /**
     * @param {?} value the number to be formatted
     * @param {?} pluralMap an object that mimics the ICU format, see
     * http://userguide.icu-project.org/formatparse/messages.
     * @param {?=} locale a `string` defining the locale to use (uses the current {\@link LOCALE_ID} by
     * default).
     * @return {?}
     */
    transform(value, pluralMap, locale) {
        if (value == null)
            return '';
        if (typeof pluralMap !== 'object' || pluralMap === null) {
            throw invalidPipeArgumentError(I18nPluralPipe, pluralMap);
        }
        /** @type {?} */
        const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
        return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
    }
}
I18nPluralPipe.ɵfac = function I18nPluralPipe_Factory(t) { return new (t || I18nPluralPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](NgLocalization)); };
I18nPluralPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "i18nPlural", type: I18nPluralPipe, pure: true });
/** @nocollapse */
I18nPluralPipe.ctorParameters = () => [
    { type: NgLocalization }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](I18nPluralPipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'i18nPlural', pure: true }]
    }], function () { return [{ type: NgLocalization }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/i18n_select_pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Generic selector that displays the string that matches the current value.
 *
 * If none of the keys of the `mapping` match the `value`, then the content
 * of the `other` key is returned when present, otherwise an empty string is returned.
 *
 * \@usageNotes
 *
 * ### Example
 *
 * {\@example common/pipes/ts/i18n_pipe.ts region='I18nSelectPipeComponent'}
 *
 * \@publicApi
 */
class I18nSelectPipe {
    /**
     * @param {?} value a string to be internationalized.
     * @param {?} mapping an object that indicates the text that should be displayed
     * for different values of the provided `value`.
     * @return {?}
     */
    transform(value, mapping) {
        if (value == null)
            return '';
        if (typeof mapping !== 'object' || typeof value !== 'string') {
            throw invalidPipeArgumentError(I18nSelectPipe, mapping);
        }
        if (mapping.hasOwnProperty(value)) {
            return mapping[value];
        }
        if (mapping.hasOwnProperty('other')) {
            return mapping['other'];
        }
        return '';
    }
}
I18nSelectPipe.ɵfac = function I18nSelectPipe_Factory(t) { return new (t || I18nSelectPipe)(); };
I18nSelectPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "i18nSelect", type: I18nSelectPipe, pure: true });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](I18nSelectPipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'i18nSelect', pure: true }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/json_pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Converts a value into its JSON-format representation.  Useful for debugging.
 *
 * \@usageNotes
 *
 * The following component uses a JSON pipe to convert an object
 * to JSON format, and displays the string in both formats for comparison.
 *
 * {\@example common/pipes/ts/json_pipe.ts region='JsonPipe'}
 *
 * \@publicApi
 */
class JsonPipe {
    /**
     * @param {?} value A value of any type to convert into a JSON-format string.
     * @return {?}
     */
    transform(value) { return JSON.stringify(value, null, 2); }
}
JsonPipe.ɵfac = function JsonPipe_Factory(t) { return new (t || JsonPipe)(); };
JsonPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "json", type: JsonPipe, pure: false });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](JsonPipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'json', pure: false }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/keyvalue_pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template K, V
 * @param {?} key
 * @param {?} value
 * @return {?}
 */
function makeKeyValuePair(key, value) {
    return { key: key, value: value };
}
/**
 * A key value pair.
 * Usually used to represent the key value pairs from a Map or Object.
 *
 * \@publicApi
 * @record
 * @template K, V
 */
function KeyValue() { }
if (false) {}
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Transforms Object or Map into an array of key value pairs.
 *
 * The output array will be ordered by keys.
 * By default the comparator will be by Unicode point value.
 * You can optionally pass a compareFn if your keys are complex types.
 *
 * \@usageNotes
 * ### Examples
 *
 * This examples show how an Object or a Map can be iterated by ngFor with the use of this keyvalue
 * pipe.
 *
 * {\@example common/pipes/ts/keyvalue_pipe.ts region='KeyValuePipe'}
 *
 * \@publicApi
 */
class KeyValuePipe {
    /**
     * @param {?} differs
     */
    constructor(differs) {
        this.differs = differs;
        this.keyValues = [];
    }
    /**
     * @template K, V
     * @param {?} input
     * @param {?=} compareFn
     * @return {?}
     */
    transform(input, compareFn = defaultComparator) {
        if (!input || (!(input instanceof Map) && typeof input !== 'object')) {
            return null;
        }
        if (!this.differ) {
            // make a differ for whatever type we've been passed in
            this.differ = this.differs.find(input).create();
        }
        /** @type {?} */
        const differChanges = this.differ.diff((/** @type {?} */ (input)));
        if (differChanges) {
            this.keyValues = [];
            differChanges.forEachItem((/**
             * @param {?} r
             * @return {?}
             */
            (r) => {
                this.keyValues.push(makeKeyValuePair(r.key, (/** @type {?} */ (r.currentValue))));
            }));
            this.keyValues.sort(compareFn);
        }
        return this.keyValues;
    }
}
KeyValuePipe.ɵfac = function KeyValuePipe_Factory(t) { return new (t || KeyValuePipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"])); };
KeyValuePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "keyvalue", type: KeyValuePipe, pure: false });
/** @nocollapse */
KeyValuePipe.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](KeyValuePipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'keyvalue', pure: false }]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["KeyValueDiffers"] }]; }, null); })();
if (false) {}
/**
 * @template K, V
 * @param {?} keyValueA
 * @param {?} keyValueB
 * @return {?}
 */
function defaultComparator(keyValueA, keyValueB) {
    /** @type {?} */
    const a = keyValueA.key;
    /** @type {?} */
    const b = keyValueB.key;
    // if same exit with 0;
    if (a === b)
        return 0;
    // make sure that undefined are at the end of the sort.
    if (a === undefined)
        return 1;
    if (b === undefined)
        return -1;
    // make sure that nulls are at the end of the sort.
    if (a === null)
        return 1;
    if (b === null)
        return -1;
    if (typeof a == 'string' && typeof b == 'string') {
        return a < b ? -1 : 1;
    }
    if (typeof a == 'number' && typeof b == 'number') {
        return a - b;
    }
    if (typeof a == 'boolean' && typeof b == 'boolean') {
        return a < b ? -1 : 1;
    }
    // `a` and `b` are of different types. Compare their string values.
    /** @type {?} */
    const aString = String(a);
    /** @type {?} */
    const bString = String(b);
    return aString == bString ? 0 : aString < bString ? -1 : 1;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/number_pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Transforms a number into a string,
 * formatted according to locale rules that determine group sizing and
 * separator, decimal-point character, and other locale-specific
 * configurations.
 *
 * If no parameters are specified, the function rounds off to the nearest value using this
 * [rounding method](https://en.wikibooks.org/wiki/Arithmetic/Rounding).
 * The behavior differs from that of the JavaScript ```Math.round()``` function.
 * In the following case for example, the pipe rounds down where
 * ```Math.round()``` rounds up:
 *
 * ```html
 * -2.5 | number:'1.0-0'
 * > -3
 * Math.round(-2.5)
 * > -2
 * ```
 *
 * @see `formatNumber()`
 *
 * \@usageNotes
 * The following code shows how the pipe transforms numbers
 * into text strings, according to various format specifications,
 * where the caller's default locale is `en-US`.
 *
 * ### Example
 *
 * <code-example path="common/pipes/ts/number_pipe.ts" region='NumberPipe'></code-example>
 *
 * \@publicApi
 */
class DecimalPipe {
    /**
     * @param {?} _locale
     */
    constructor(_locale) {
        this._locale = _locale;
    }
    /**
     * @param {?} value The number to be formatted.
     * @param {?=} digitsInfo Decimal representation options, specified by a string
     * in the following format:<br>
     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
     * Default is `1`.
     *   - `minFractionDigits`: The minimum number of digits after the decimal point.
     * Default is `0`.
     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
     * Default is `3`.
     * @param {?=} locale A locale code for the locale format rules to use.
     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
     * @return {?}
     */
    transform(value, digitsInfo, locale) {
        if (isEmpty(value))
            return null;
        locale = locale || this._locale;
        try {
            /** @type {?} */
            const num = strToNumber(value);
            return formatNumber(num, locale, digitsInfo);
        }
        catch (error) {
            throw invalidPipeArgumentError(DecimalPipe, error.message);
        }
    }
}
DecimalPipe.ɵfac = function DecimalPipe_Factory(t) { return new (t || DecimalPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"])); };
DecimalPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "number", type: DecimalPipe, pure: true });
/** @nocollapse */
DecimalPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](DecimalPipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'number' }]
    }], function () { return [{ type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }] }]; }, null); })();
if (false) {}
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Transforms a number to a percentage
 * string, formatted according to locale rules that determine group sizing and
 * separator, decimal-point character, and other locale-specific
 * configurations.
 *
 * @see `formatPercent()`
 *
 * \@usageNotes
 * The following code shows how the pipe transforms numbers
 * into text strings, according to various format specifications,
 * where the caller's default locale is `en-US`.
 *
 * <code-example path="common/pipes/ts/percent_pipe.ts" region='PercentPipe'></code-example>
 *
 * \@publicApi
 */
class PercentPipe {
    /**
     * @param {?} _locale
     */
    constructor(_locale) {
        this._locale = _locale;
    }
    /**
     *
     * @param {?} value The number to be formatted as a percentage.
     * @param {?=} digitsInfo Decimal representation options, specified by a string
     * in the following format:<br>
     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
     * Default is `1`.
     *   - `minFractionDigits`: The minimum number of digits after the decimal point.
     * Default is `0`.
     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
     * Default is `0`.
     * @param {?=} locale A locale code for the locale format rules to use.
     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
     * @return {?}
     */
    transform(value, digitsInfo, locale) {
        if (isEmpty(value))
            return null;
        locale = locale || this._locale;
        try {
            /** @type {?} */
            const num = strToNumber(value);
            return formatPercent(num, locale, digitsInfo);
        }
        catch (error) {
            throw invalidPipeArgumentError(PercentPipe, error.message);
        }
    }
}
PercentPipe.ɵfac = function PercentPipe_Factory(t) { return new (t || PercentPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"])); };
PercentPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "percent", type: PercentPipe, pure: true });
/** @nocollapse */
PercentPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](PercentPipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'percent' }]
    }], function () { return [{ type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }] }]; }, null); })();
if (false) {}
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Transforms a number to a currency string, formatted according to locale rules
 * that determine group sizing and separator, decimal-point character,
 * and other locale-specific configurations.
 *
 * {\@a currency-code-deprecation}
 * <div class="alert is-helpful">
 *
 * **Deprecation notice:**
 *
 * The default currency code is currently always `USD` but this is deprecated from v9.
 *
 * **In v11 the default currency code will be taken from the current locale identified by
 * the `LOCAL_ID` token. See the [i18n guide](guide/i18n#setting-up-the-locale-of-your-app) for
 * more information.**
 *
 * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
 * your application `NgModule`:
 *
 * ```ts
 * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
 * ```
 *
 * </div>
 *
 * @see `getCurrencySymbol()`
 * @see `formatCurrency()`
 *
 * \@usageNotes
 * The following code shows how the pipe transforms numbers
 * into text strings, according to various format specifications,
 * where the caller's default locale is `en-US`.
 *
 * <code-example path="common/pipes/ts/currency_pipe.ts" region='CurrencyPipe'></code-example>
 *
 * \@publicApi
 */
class CurrencyPipe {
    /**
     * @param {?} _locale
     * @param {?=} _defaultCurrencyCode
     */
    constructor(_locale, _defaultCurrencyCode = 'USD') {
        this._locale = _locale;
        this._defaultCurrencyCode = _defaultCurrencyCode;
    }
    /**
     *
     * @param {?} value The number to be formatted as currency.
     * @param {?=} currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
     * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be
     * configured using the `DEFAULT_CURRENCY_CODE` injection token.
     * @param {?=} display The format for the currency indicator. One of the following:
     *   - `code`: Show the code (such as `USD`).
     *   - `symbol`(default): Show the symbol (such as `$`).
     *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
     * currency.
     * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
     * locale has no narrow symbol, uses the standard symbol for the locale.
     *   - String: Use the given string value instead of a code or a symbol.
     * For example, an empty string will suppress the currency & symbol.
     *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
     *
     * @param {?=} digitsInfo Decimal representation options, specified by a string
     * in the following format:<br>
     * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
     *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
     * Default is `1`.
     *   - `minFractionDigits`: The minimum number of digits after the decimal point.
     * Default is `2`.
     *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
     * Default is `2`.
     * If not provided, the number will be formatted with the proper amount of digits,
     * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
     * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
     * @param {?=} locale A locale code for the locale format rules to use.
     * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
     * See [Setting your app locale](guide/i18n#setting-up-the-locale-of-your-app).
     * @return {?}
     */
    transform(value, currencyCode, display = 'symbol', digitsInfo, locale) {
        if (isEmpty(value))
            return null;
        locale = locale || this._locale;
        if (typeof display === 'boolean') {
            if ((/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {
                console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are "code", "symbol" or "symbol-narrow".`);
            }
            display = display ? 'symbol' : 'code';
        }
        /** @type {?} */
        let currency = currencyCode || this._defaultCurrencyCode;
        if (display !== 'code') {
            if (display === 'symbol' || display === 'symbol-narrow') {
                currency = getCurrencySymbol(currency, display === 'symbol' ? 'wide' : 'narrow', locale);
            }
            else {
                currency = display;
            }
        }
        try {
            /** @type {?} */
            const num = strToNumber(value);
            return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
        }
        catch (error) {
            throw invalidPipeArgumentError(CurrencyPipe, error.message);
        }
    }
}
CurrencyPipe.ɵfac = function CurrencyPipe_Factory(t) { return new (t || CurrencyPipe)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_CURRENCY_CODE"])); };
CurrencyPipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "currency", type: CurrencyPipe, pure: true });
/** @nocollapse */
CurrencyPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"],] }] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_CURRENCY_CODE"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CurrencyPipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'currency' }]
    }], function () { return [{ type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["LOCALE_ID"]]
            }] }, { type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["DEFAULT_CURRENCY_CODE"]]
            }] }]; }, null); })();
if (false) {}
/**
 * @param {?} value
 * @return {?}
 */
function isEmpty(value) {
    return value == null || value === '' || value !== value;
}
/**
 * Transforms a string into a number (if needed).
 * @param {?} value
 * @return {?}
 */
function strToNumber(value) {
    // Convert strings to numbers
    if (typeof value === 'string' && !isNaN(Number(value) - parseFloat(value))) {
        return Number(value);
    }
    if (typeof value !== 'number') {
        throw new Error(`${value} is not a number`);
    }
    return value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/slice_pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@ngModule CommonModule
 * \@description
 *
 * Creates a new `Array` or `String` containing a subset (slice) of the elements.
 *
 * \@usageNotes
 *
 * All behavior is based on the expected behavior of the JavaScript API `Array.prototype.slice()`
 * and `String.prototype.slice()`.
 *
 * When operating on an `Array`, the returned `Array` is always a copy even when all
 * the elements are being returned.
 *
 * When operating on a blank value, the pipe returns the blank value.
 *
 * ### List Example
 *
 * This `ngFor` example:
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_list'}
 *
 * produces the following:
 *
 * ```html
 * <li>b</li>
 * <li>c</li>
 * ```
 *
 * ### String Examples
 *
 * {\@example common/pipes/ts/slice_pipe.ts region='SlicePipe_string'}
 *
 * \@publicApi
 */
class SlicePipe {
    /**
     * @param {?} value
     * @param {?} start
     * @param {?=} end
     * @return {?}
     */
    transform(value, start, end) {
        if (value == null)
            return value;
        if (!this.supports(value)) {
            throw invalidPipeArgumentError(SlicePipe, value);
        }
        return value.slice(start, end);
    }
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    supports(obj) { return typeof obj === 'string' || Array.isArray(obj); }
}
SlicePipe.ɵfac = function SlicePipe_Factory(t) { return new (t || SlicePipe)(); };
SlicePipe.ɵpipe = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefinePipe"]({ name: "slice", type: SlicePipe, pure: false });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](SlicePipe, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Pipe"],
        args: [{ name: 'slice', pure: false }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/pipes/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A collection of Angular pipes that are likely to be used in each and every application.
 * @type {?}
 */
const COMMON_PIPES = [
    AsyncPipe,
    UpperCasePipe,
    LowerCasePipe,
    JsonPipe,
    SlicePipe,
    DecimalPipe,
    PercentPipe,
    TitleCasePipe,
    CurrencyPipe,
    DatePipe,
    I18nPluralPipe,
    I18nSelectPipe,
    KeyValuePipe,
];

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/common_module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Note: This does not contain the location providers,
// as they need some platform specific implementations to work.
/**
 * Exports all the basic Angular directives and pipes,
 * such as `NgIf`, `NgForOf`, `DecimalPipe`, and so on.
 * Re-exported by `BrowserModule`, which is included automatically in the root
 * `AppModule` when you create a new app with the CLI `new` command.
 *
 * * The `providers` options configure the NgModule's injector to provide
 * localization dependencies to members.
 * * The `exports` options make the declared directives and pipes available for import
 * by other NgModules.
 *
 * \@publicApi
 */
class CommonModule {
}
CommonModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: CommonModule });
CommonModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ factory: function CommonModule_Factory(t) { return new (t || CommonModule)(); }, providers: [
        { provide: NgLocalization, useClass: NgLocaleLocalization },
    ] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](CommonModule, { declarations: [NgClass,
        NgComponentOutlet,
        NgForOf,
        NgIf,
        NgTemplateOutlet,
        NgStyle,
        NgSwitch,
        NgSwitchCase,
        NgSwitchDefault,
        NgPlural,
        NgPluralCase,
        AsyncPipe,
        UpperCasePipe,
        LowerCasePipe,
        JsonPipe,
        SlicePipe,
        DecimalPipe,
        PercentPipe,
        TitleCasePipe,
        CurrencyPipe,
        DatePipe,
        I18nPluralPipe,
        I18nSelectPipe,
        KeyValuePipe], exports: [NgClass,
        NgComponentOutlet,
        NgForOf,
        NgIf,
        NgTemplateOutlet,
        NgStyle,
        NgSwitch,
        NgSwitchCase,
        NgSwitchDefault,
        NgPlural,
        NgPluralCase,
        AsyncPipe,
        UpperCasePipe,
        LowerCasePipe,
        JsonPipe,
        SlicePipe,
        DecimalPipe,
        PercentPipe,
        TitleCasePipe,
        CurrencyPipe,
        DatePipe,
        I18nPluralPipe,
        I18nSelectPipe,
        KeyValuePipe] }); })();
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](CommonModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
                declarations: [COMMON_DIRECTIVES, COMMON_PIPES],
                exports: [COMMON_DIRECTIVES, COMMON_PIPES],
                providers: [
                    { provide: NgLocalization, useClass: NgLocaleLocalization },
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/platform_id.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @type {?} */
const PLATFORM_BROWSER_ID = 'browser';
/** @type {?} */
const PLATFORM_SERVER_ID = 'server';
/** @type {?} */
const PLATFORM_WORKER_APP_ID = 'browserWorkerApp';
/** @type {?} */
const PLATFORM_WORKER_UI_ID = 'browserWorkerUi';
/**
 * Returns whether a platform id represents a browser platform.
 * \@publicApi
 * @param {?} platformId
 * @return {?}
 */
function isPlatformBrowser(platformId) {
    return platformId === PLATFORM_BROWSER_ID;
}
/**
 * Returns whether a platform id represents a server platform.
 * \@publicApi
 * @param {?} platformId
 * @return {?}
 */
function isPlatformServer(platformId) {
    return platformId === PLATFORM_SERVER_ID;
}
/**
 * Returns whether a platform id represents a web worker app platform.
 * \@publicApi
 * @param {?} platformId
 * @return {?}
 */
function isPlatformWorkerApp(platformId) {
    return platformId === PLATFORM_WORKER_APP_ID;
}
/**
 * Returns whether a platform id represents a web worker UI platform.
 * \@publicApi
 * @param {?} platformId
 * @return {?}
 */
function isPlatformWorkerUi(platformId) {
    return platformId === PLATFORM_WORKER_UI_ID;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/version.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@publicApi
 * @type {?}
 */
const VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["Version"]('9.0.7');

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/viewport_scroller.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Defines a scroll position manager. Implemented by `BrowserViewportScroller`.
 *
 * \@publicApi
 * @abstract
 */
class ViewportScroller {
}
// De-sugared tree-shakable injection
// See #23917
/** @nocollapse */
/** @nocollapse */ ViewportScroller.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({
    token: ViewportScroller,
    providedIn: 'root',
    factory: (/**
     * @nocollapse @return {?}
     */
    () => new BrowserViewportScroller(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DOCUMENT), window, Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ErrorHandler"])))
});
if (false) {}
/**
 * Manages the scroll position for a browser window.
 */
class BrowserViewportScroller {
    /**
     * @param {?} document
     * @param {?} window
     * @param {?} errorHandler
     */
    constructor(document, window, errorHandler) {
        this.document = document;
        this.window = window;
        this.errorHandler = errorHandler;
        this.offset = (/**
         * @return {?}
         */
        () => [0, 0]);
    }
    /**
     * Configures the top offset used when scrolling to an anchor.
     * @param {?} offset A position in screen coordinates (a tuple with x and y values)
     * or a function that returns the top offset position.
     *
     * @return {?}
     */
    setOffset(offset) {
        if (Array.isArray(offset)) {
            this.offset = (/**
             * @return {?}
             */
            () => offset);
        }
        else {
            this.offset = offset;
        }
    }
    /**
     * Retrieves the current scroll position.
     * @return {?} The position in screen coordinates.
     */
    getScrollPosition() {
        if (this.supportScrollRestoration()) {
            return [this.window.scrollX, this.window.scrollY];
        }
        else {
            return [0, 0];
        }
    }
    /**
     * Sets the scroll position.
     * @param {?} position The new position in screen coordinates.
     * @return {?}
     */
    scrollToPosition(position) {
        if (this.supportScrollRestoration()) {
            this.window.scrollTo(position[0], position[1]);
        }
    }
    /**
     * Scrolls to an anchor element.
     * @param {?} anchor The ID of the anchor element.
     * @return {?}
     */
    scrollToAnchor(anchor) {
        if (this.supportScrollRestoration()) {
            // Escape anything passed to `querySelector` as it can throw errors and stop the application
            // from working if invalid values are passed.
            if (this.window.CSS && this.window.CSS.escape) {
                anchor = this.window.CSS.escape(anchor);
            }
            else {
                anchor = anchor.replace(/(\"|\'\ |:|\.|\[|\]|,|=)/g, '\\$1');
            }
            try {
                /** @type {?} */
                const elSelectedById = this.document.querySelector(`#${anchor}`);
                if (elSelectedById) {
                    this.scrollToElement(elSelectedById);
                    return;
                }
                /** @type {?} */
                const elSelectedByName = this.document.querySelector(`[name='${anchor}']`);
                if (elSelectedByName) {
                    this.scrollToElement(elSelectedByName);
                    return;
                }
            }
            catch (e) {
                this.errorHandler.handleError(e);
            }
        }
    }
    /**
     * Disables automatic scroll restoration provided by the browser.
     * @param {?} scrollRestoration
     * @return {?}
     */
    setHistoryScrollRestoration(scrollRestoration) {
        if (this.supportScrollRestoration()) {
            /** @type {?} */
            const history = this.window.history;
            if (history && history.scrollRestoration) {
                history.scrollRestoration = scrollRestoration;
            }
        }
    }
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    scrollToElement(el) {
        /** @type {?} */
        const rect = el.getBoundingClientRect();
        /** @type {?} */
        const left = rect.left + this.window.pageXOffset;
        /** @type {?} */
        const top = rect.top + this.window.pageYOffset;
        /** @type {?} */
        const offset = this.offset();
        this.window.scrollTo(left - offset[0], top - offset[1]);
    }
    /**
     * We only support scroll restoration when we can get a hold of window.
     * This means that we do not support this behavior when running in a web worker.
     *
     * Lifting this restriction right now would require more changes in the dom adapter.
     * Since webworkers aren't widely used, we will lift it once RouterScroller is
     * battle-tested.
     * @private
     * @return {?}
     */
    supportScrollRestoration() {
        try {
            return !!this.window && !!this.window.scrollTo;
        }
        catch (_a) {
            return false;
        }
    }
}
if (false) {}
/**
 * Provides an empty implementation of the viewport scroller. This will
 * live in \@angular/common as it will be used by both platform-server and platform-webworker.
 */
class NullViewportScroller {
    /**
     * Empty implementation
     * @param {?} offset
     * @return {?}
     */
    setOffset(offset) { }
    /**
     * Empty implementation
     * @return {?}
     */
    getScrollPosition() { return [0, 0]; }
    /**
     * Empty implementation
     * @param {?} position
     * @return {?}
     */
    scrollToPosition(position) { }
    /**
     * Empty implementation
     * @param {?} anchor
     * @return {?}
     */
    scrollToAnchor(anchor) { }
    /**
     * Empty implementation
     * @param {?} scrollRestoration
     * @return {?}
     */
    setHistoryScrollRestoration(scrollRestoration) { }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/src/common.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=common.js.map

/***/ }),

/***/ "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js":
/*!********************************************************************!*\
  !*** ./node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js ***!
  \********************************************************************/
/*! exports provided: HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, ɵHttpInterceptingHandler, ɵangular_packages_common_http_http_a, ɵangular_packages_common_http_http_b, ɵangular_packages_common_http_http_c, ɵangular_packages_common_http_http_d, ɵangular_packages_common_http_http_e, ɵangular_packages_common_http_http_f, ɵangular_packages_common_http_http_g, ɵangular_packages_common_http_http_h */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HTTP_INTERCEPTORS", function() { return HTTP_INTERCEPTORS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpBackend", function() { return HttpBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpClient", function() { return HttpClient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpClientJsonpModule", function() { return HttpClientJsonpModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpClientModule", function() { return HttpClientModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpClientXsrfModule", function() { return HttpClientXsrfModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpErrorResponse", function() { return HttpErrorResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpEventType", function() { return HttpEventType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpHandler", function() { return HttpHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpHeaderResponse", function() { return HttpHeaderResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpHeaders", function() { return HttpHeaders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpParams", function() { return HttpParams; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpRequest", function() { return HttpRequest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpResponse", function() { return HttpResponse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpResponseBase", function() { return HttpResponseBase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpUrlEncodingCodec", function() { return HttpUrlEncodingCodec; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpXhrBackend", function() { return HttpXhrBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpXsrfTokenExtractor", function() { return HttpXsrfTokenExtractor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonpClientBackend", function() { return JsonpClientBackend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JsonpInterceptor", function() { return JsonpInterceptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XhrFactory", function() { return XhrFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵHttpInterceptingHandler", function() { return HttpInterceptingHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_a", function() { return NoopInterceptor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_b", function() { return JsonpCallbackContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_c", function() { return jsonpCallbackContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_d", function() { return BrowserXhr; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_e", function() { return XSRF_COOKIE_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_f", function() { return XSRF_HEADER_NAME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_g", function() { return HttpXsrfCookieExtractor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_common_http_http_h", function() { return HttpXsrfInterceptor; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
/**
 * @license Angular v9.0.7
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */






/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/backend.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a
 * `HttpResponse`.
 *
 * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the
 * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the
 * `HttpBackend`.
 *
 * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.
 *
 * \@publicApi
 * @abstract
 */

class HttpHandler {
}
if (false) {}
/**
 * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.
 *
 * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.
 *
 * When injected, `HttpBackend` dispatches requests directly to the backend, without going
 * through the interceptor chain.
 *
 * \@publicApi
 * @abstract
 */
class HttpBackend {
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/headers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @record
 */
function Update() { }
if (false) {}
/**
 * Represents the header configuration options for an HTTP request.
 * Instances are immutable. Modifying methods return a cloned
 * instance with the change. The original object is never changed.
 *
 * \@publicApi
 */
class HttpHeaders {
    /**
     * Constructs a new HTTP header object with the given values.
     * @param {?=} headers
     */
    constructor(headers) {
        /**
         * Internal map of lowercased header names to the normalized
         * form of the name (the form seen first).
         */
        this.normalizedNames = new Map();
        /**
         * Queued updates to be materialized the next initialization.
         */
        this.lazyUpdate = null;
        if (!headers) {
            this.headers = new Map();
        }
        else if (typeof headers === 'string') {
            this.lazyInit = (/**
             * @return {?}
             */
            () => {
                this.headers = new Map();
                headers.split('\n').forEach((/**
                 * @param {?} line
                 * @return {?}
                 */
                line => {
                    /** @type {?} */
                    const index = line.indexOf(':');
                    if (index > 0) {
                        /** @type {?} */
                        const name = line.slice(0, index);
                        /** @type {?} */
                        const key = name.toLowerCase();
                        /** @type {?} */
                        const value = line.slice(index + 1).trim();
                        this.maybeSetNormalizedName(name, key);
                        if (this.headers.has(key)) {
                            (/** @type {?} */ (this.headers.get(key))).push(value);
                        }
                        else {
                            this.headers.set(key, [value]);
                        }
                    }
                }));
            });
        }
        else {
            this.lazyInit = (/**
             * @return {?}
             */
            () => {
                this.headers = new Map();
                Object.keys(headers).forEach((/**
                 * @param {?} name
                 * @return {?}
                 */
                name => {
                    /** @type {?} */
                    let values = headers[name];
                    /** @type {?} */
                    const key = name.toLowerCase();
                    if (typeof values === 'string') {
                        values = [values];
                    }
                    if (values.length > 0) {
                        this.headers.set(key, values);
                        this.maybeSetNormalizedName(name, key);
                    }
                }));
            });
        }
    }
    /**
     * Checks for existence of a given header.
     *
     * @param {?} name The header name to check for existence.
     *
     * @return {?} True if the header exists, false otherwise.
     */
    has(name) {
        this.init();
        return this.headers.has(name.toLowerCase());
    }
    /**
     * Retrieves the first value of a given header.
     *
     * @param {?} name The header name.
     *
     * @return {?} The value string if the header exists, null otherwise
     */
    get(name) {
        this.init();
        /** @type {?} */
        const values = this.headers.get(name.toLowerCase());
        return values && values.length > 0 ? values[0] : null;
    }
    /**
     * Retrieves the names of the headers.
     *
     * @return {?} A list of header names.
     */
    keys() {
        this.init();
        return Array.from(this.normalizedNames.values());
    }
    /**
     * Retrieves a list of values for a given header.
     *
     * @param {?} name The header name from which to retrieve values.
     *
     * @return {?} A string of values if the header exists, null otherwise.
     */
    getAll(name) {
        this.init();
        return this.headers.get(name.toLowerCase()) || null;
    }
    /**
     * Appends a new value to the existing set of values for a header
     * and returns them in a clone of the original instance.
     *
     * @param {?} name The header name for which to append the values.
     * @param {?} value The value to append.
     *
     * @return {?} A clone of the HTTP headers object with the value appended to the given header.
     */
    append(name, value) {
        return this.clone({ name, value, op: 'a' });
    }
    /**
     * Sets or modifies a value for a given header in a clone of the original instance.
     * If the header already exists, its value is replaced with the given value
     * in the returned object.
     *
     * @param {?} name The header name.
     * @param {?} value The value or values to set or overide for the given header.
     *
     * @return {?} A clone of the HTTP headers object with the newly set header value.
     */
    set(name, value) {
        return this.clone({ name, value, op: 's' });
    }
    /**
     * Deletes values for a given header in a clone of the original instance.
     *
     * @param {?} name The header name.
     * @param {?=} value The value or values to delete for the given header.
     *
     * @return {?} A clone of the HTTP headers object with the given value deleted.
     */
    delete(name, value) {
        return this.clone({ name, value, op: 'd' });
    }
    /**
     * @private
     * @param {?} name
     * @param {?} lcName
     * @return {?}
     */
    maybeSetNormalizedName(name, lcName) {
        if (!this.normalizedNames.has(lcName)) {
            this.normalizedNames.set(lcName, name);
        }
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        if (!!this.lazyInit) {
            if (this.lazyInit instanceof HttpHeaders) {
                this.copyFrom(this.lazyInit);
            }
            else {
                this.lazyInit();
            }
            this.lazyInit = null;
            if (!!this.lazyUpdate) {
                this.lazyUpdate.forEach((/**
                 * @param {?} update
                 * @return {?}
                 */
                update => this.applyUpdate(update)));
                this.lazyUpdate = null;
            }
        }
    }
    /**
     * @private
     * @param {?} other
     * @return {?}
     */
    copyFrom(other) {
        other.init();
        Array.from(other.headers.keys()).forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            this.headers.set(key, (/** @type {?} */ (other.headers.get(key))));
            this.normalizedNames.set(key, (/** @type {?} */ (other.normalizedNames.get(key))));
        }));
    }
    /**
     * @private
     * @param {?} update
     * @return {?}
     */
    clone(update) {
        /** @type {?} */
        const clone = new HttpHeaders();
        clone.lazyInit =
            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;
        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
        return clone;
    }
    /**
     * @private
     * @param {?} update
     * @return {?}
     */
    applyUpdate(update) {
        /** @type {?} */
        const key = update.name.toLowerCase();
        switch (update.op) {
            case 'a':
            case 's':
                /** @type {?} */
                let value = (/** @type {?} */ (update.value));
                if (typeof value === 'string') {
                    value = [value];
                }
                if (value.length === 0) {
                    return;
                }
                this.maybeSetNormalizedName(update.name, key);
                /** @type {?} */
                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];
                base.push(...value);
                this.headers.set(key, base);
                break;
            case 'd':
                /** @type {?} */
                const toDelete = (/** @type {?} */ (update.value));
                if (!toDelete) {
                    this.headers.delete(key);
                    this.normalizedNames.delete(key);
                }
                else {
                    /** @type {?} */
                    let existing = this.headers.get(key);
                    if (!existing) {
                        return;
                    }
                    existing = existing.filter((/**
                     * @param {?} value
                     * @return {?}
                     */
                    value => toDelete.indexOf(value) === -1));
                    if (existing.length === 0) {
                        this.headers.delete(key);
                        this.normalizedNames.delete(key);
                    }
                    else {
                        this.headers.set(key, existing);
                    }
                }
                break;
        }
    }
    /**
     * \@internal
     * @param {?} fn
     * @return {?}
     */
    forEach(fn) {
        this.init();
        Array.from(this.normalizedNames.keys())
            .forEach((/**
         * @param {?} key
         * @return {?}
         */
        key => fn((/** @type {?} */ (this.normalizedNames.get(key))), (/** @type {?} */ (this.headers.get(key))))));
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/params.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A codec for encoding and decoding parameters in URLs.
 *
 * Used by `HttpParams`.
 *
 * \@publicApi
 *
 * @record
 */
function HttpParameterCodec() { }
if (false) {}
/**
 * Provides encoding and decoding of URL parameter and query-string values.
 *
 * Serializes and parses URL parameter keys and values to encode and decode them.
 * If you pass URL query parameters without encoding,
 * the query parameters can be misinterpreted at the receiving end.
 *
 *
 * \@publicApi
 */
class HttpUrlEncodingCodec {
    /**
     * Encodes a key name for a URL parameter or query-string.
     * @param {?} key The key name.
     * @return {?} The encoded key name.
     */
    encodeKey(key) { return standardEncoding(key); }
    /**
     * Encodes the value of a URL parameter or query-string.
     * @param {?} value The value.
     * @return {?} The encoded value.
     */
    encodeValue(value) { return standardEncoding(value); }
    /**
     * Decodes an encoded URL parameter or query-string key.
     * @param {?} key The encoded key name.
     * @return {?} The decoded key name.
     */
    decodeKey(key) { return decodeURIComponent(key); }
    /**
     * Decodes an encoded URL parameter or query-string value.
     * @param {?} value The encoded value.
     * @return {?} The decoded value.
     */
    decodeValue(value) { return decodeURIComponent(value); }
}
/**
 * @param {?} rawParams
 * @param {?} codec
 * @return {?}
 */
function paramParser(rawParams, codec) {
    /** @type {?} */
    const map = new Map();
    if (rawParams.length > 0) {
        /** @type {?} */
        const params = rawParams.split('&');
        params.forEach((/**
         * @param {?} param
         * @return {?}
         */
        (param) => {
            /** @type {?} */
            const eqIdx = param.indexOf('=');
            const [key, val] = eqIdx == -1 ?
                [codec.decodeKey(param), ''] :
                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];
            /** @type {?} */
            const list = map.get(key) || [];
            list.push(val);
            map.set(key, list);
        }));
    }
    return map;
}
/**
 * @param {?} v
 * @return {?}
 */
function standardEncoding(v) {
    return encodeURIComponent(v)
        .replace(/%40/gi, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/gi, '$')
        .replace(/%2C/gi, ',')
        .replace(/%3B/gi, ';')
        .replace(/%2B/gi, '+')
        .replace(/%3D/gi, '=')
        .replace(/%3F/gi, '?')
        .replace(/%2F/gi, '/');
}
/**
 * @record
 */
function Update$1() { }
if (false) {}
/**
 * Options used to construct an `HttpParams` instance.
 *
 * \@publicApi
 * @record
 */
function HttpParamsOptions() { }
if (false) {}
/**
 * An HTTP request/response body that represents serialized parameters,
 * per the MIME type `application/x-www-form-urlencoded`.
 *
 * This class is immutable; all mutation operations return a new instance.
 *
 * \@publicApi
 */
class HttpParams {
    /**
     * @param {?=} options
     */
    constructor(options = (/** @type {?} */ ({}))) {
        this.updates = null;
        this.cloneFrom = null;
        this.encoder = options.encoder || new HttpUrlEncodingCodec();
        if (!!options.fromString) {
            if (!!options.fromObject) {
                throw new Error(`Cannot specify both fromString and fromObject.`);
            }
            this.map = paramParser(options.fromString, this.encoder);
        }
        else if (!!options.fromObject) {
            this.map = new Map();
            Object.keys(options.fromObject).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                /** @type {?} */
                const value = ((/** @type {?} */ (options.fromObject)))[key];
                (/** @type {?} */ (this.map)).set(key, Array.isArray(value) ? value : [value]);
            }));
        }
        else {
            this.map = null;
        }
    }
    /**
     * Reports whether the body includes one or more values for a given parameter.
     * @param {?} param The parameter name.
     * @return {?} True if the parameter has one or more values,
     * false if it has no value or is not present.
     */
    has(param) {
        this.init();
        return (/** @type {?} */ (this.map)).has(param);
    }
    /**
     * Retrieves the first value for a parameter.
     * @param {?} param The parameter name.
     * @return {?} The first value of the given parameter,
     * or `null` if the parameter is not present.
     */
    get(param) {
        this.init();
        /** @type {?} */
        const res = (/** @type {?} */ (this.map)).get(param);
        return !!res ? res[0] : null;
    }
    /**
     * Retrieves all values for a  parameter.
     * @param {?} param The parameter name.
     * @return {?} All values in a string array,
     * or `null` if the parameter not present.
     */
    getAll(param) {
        this.init();
        return (/** @type {?} */ (this.map)).get(param) || null;
    }
    /**
     * Retrieves all the parameters for this body.
     * @return {?} The parameter names in a string array.
     */
    keys() {
        this.init();
        return Array.from((/** @type {?} */ (this.map)).keys());
    }
    /**
     * Appends a new value to existing values for a parameter.
     * @param {?} param The parameter name.
     * @param {?} value The new value to add.
     * @return {?} A new body with the appended value.
     */
    append(param, value) { return this.clone({ param, value, op: 'a' }); }
    /**
     * Replaces the value for a parameter.
     * @param {?} param The parameter name.
     * @param {?} value The new value.
     * @return {?} A new body with the new value.
     */
    set(param, value) { return this.clone({ param, value, op: 's' }); }
    /**
     * Removes a given value or all values from a parameter.
     * @param {?} param The parameter name.
     * @param {?=} value The value to remove, if provided.
     * @return {?} A new body with the given value removed, or with all values
     * removed if no value is specified.
     */
    delete(param, value) { return this.clone({ param, value, op: 'd' }); }
    /**
     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are
     * separated by `&`s.
     * @return {?}
     */
    toString() {
        this.init();
        return this.keys()
            .map((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            /** @type {?} */
            const eKey = this.encoder.encodeKey(key);
            // `a: ['1']` produces `'a=1'`
            // `b: []` produces `''`
            // `c: ['1', '2']` produces `'c=1&c=2'`
            return (/** @type {?} */ ((/** @type {?} */ (this.map)).get(key))).map((/**
             * @param {?} value
             * @return {?}
             */
            value => eKey + '=' + this.encoder.encodeValue(value)))
                .join('&');
        }))
            // filter out empty values because `b: []` produces `''`
            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't
            .filter((/**
         * @param {?} param
         * @return {?}
         */
        param => param !== ''))
            .join('&');
    }
    /**
     * @private
     * @param {?} update
     * @return {?}
     */
    clone(update) {
        /** @type {?} */
        const clone = new HttpParams((/** @type {?} */ ({ encoder: this.encoder })));
        clone.cloneFrom = this.cloneFrom || this;
        clone.updates = (this.updates || []).concat([update]);
        return clone;
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        if (this.map === null) {
            this.map = new Map();
        }
        if (this.cloneFrom !== null) {
            this.cloneFrom.init();
            this.cloneFrom.keys().forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => (/** @type {?} */ (this.map)).set(key, (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (this.cloneFrom)).map)).get(key))))));
            (/** @type {?} */ (this.updates)).forEach((/**
             * @param {?} update
             * @return {?}
             */
            update => {
                switch (update.op) {
                    case 'a':
                    case 's':
                        /** @type {?} */
                        const base = (update.op === 'a' ? (/** @type {?} */ (this.map)).get(update.param) : undefined) || [];
                        base.push((/** @type {?} */ (update.value)));
                        (/** @type {?} */ (this.map)).set(update.param, base);
                        break;
                    case 'd':
                        if (update.value !== undefined) {
                            /** @type {?} */
                            let base = (/** @type {?} */ (this.map)).get(update.param) || [];
                            /** @type {?} */
                            const idx = base.indexOf(update.value);
                            if (idx !== -1) {
                                base.splice(idx, 1);
                            }
                            if (base.length > 0) {
                                (/** @type {?} */ (this.map)).set(update.param, base);
                            }
                            else {
                                (/** @type {?} */ (this.map)).delete(update.param);
                            }
                        }
                        else {
                            (/** @type {?} */ (this.map)).delete(update.param);
                            break;
                        }
                }
            }));
            this.cloneFrom = this.updates = null;
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/request.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Construction interface for `HttpRequest`s.
 *
 * All values are optional and will override default values if provided.
 * @record
 */
function HttpRequestInit() { }
if (false) {}
/**
 * Determine whether the given HTTP method may include a body.
 * @param {?} method
 * @return {?}
 */
function mightHaveBody(method) {
    switch (method) {
        case 'DELETE':
        case 'GET':
        case 'HEAD':
        case 'OPTIONS':
        case 'JSONP':
            return false;
        default:
            return true;
    }
}
/**
 * Safely assert whether the given value is an ArrayBuffer.
 *
 * In some execution environments ArrayBuffer is not defined.
 * @param {?} value
 * @return {?}
 */
function isArrayBuffer(value) {
    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;
}
/**
 * Safely assert whether the given value is a Blob.
 *
 * In some execution environments Blob is not defined.
 * @param {?} value
 * @return {?}
 */
function isBlob(value) {
    return typeof Blob !== 'undefined' && value instanceof Blob;
}
/**
 * Safely assert whether the given value is a FormData instance.
 *
 * In some execution environments FormData is not defined.
 * @param {?} value
 * @return {?}
 */
function isFormData(value) {
    return typeof FormData !== 'undefined' && value instanceof FormData;
}
/**
 * An outgoing HTTP request with an optional typed body.
 *
 * `HttpRequest` represents an outgoing request, including URL, method,
 * headers, body, and other request configuration options. Instances should be
 * assumed to be immutable. To modify a `HttpRequest`, the `clone`
 * method should be used.
 *
 * \@publicApi
 * @template T
 */
class HttpRequest {
    /**
     * @param {?} method
     * @param {?} url
     * @param {?=} third
     * @param {?=} fourth
     */
    constructor(method, url, third, fourth) {
        this.url = url;
        /**
         * The request body, or `null` if one isn't set.
         *
         * Bodies are not enforced to be immutable, as they can include a reference to any
         * user-defined data type. However, interceptors should take care to preserve
         * idempotence by treating them as such.
         */
        this.body = null;
        /**
         * Whether this request should be made in a way that exposes progress events.
         *
         * Progress events are expensive (change detection runs on each event) and so
         * they should only be requested if the consumer intends to monitor them.
         */
        this.reportProgress = false;
        /**
         * Whether this request should be sent with outgoing credentials (cookies).
         */
        this.withCredentials = false;
        /**
         * The expected response type of the server.
         *
         * This is used to parse the response appropriately before returning it to
         * the requestee.
         */
        this.responseType = 'json';
        this.method = method.toUpperCase();
        // Next, need to figure out which argument holds the HttpRequestInit
        // options, if any.
        /** @type {?} */
        let options;
        // Check whether a body argument is expected. The only valid way to omit
        // the body argument is to use a known no-body method like GET.
        if (mightHaveBody(this.method) || !!fourth) {
            // Body is the third argument, options are the fourth.
            this.body = (third !== undefined) ? (/** @type {?} */ (third)) : null;
            options = fourth;
        }
        else {
            // No body required, options are the third argument. The body stays null.
            options = (/** @type {?} */ (third));
        }
        // If options have been passed, interpret them.
        if (options) {
            // Normalize reportProgress and withCredentials.
            this.reportProgress = !!options.reportProgress;
            this.withCredentials = !!options.withCredentials;
            // Override default response type of 'json' if one is provided.
            if (!!options.responseType) {
                this.responseType = options.responseType;
            }
            // Override headers if they're provided.
            if (!!options.headers) {
                this.headers = options.headers;
            }
            if (!!options.params) {
                this.params = options.params;
            }
        }
        // If no headers have been passed in, construct a new HttpHeaders instance.
        if (!this.headers) {
            this.headers = new HttpHeaders();
        }
        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.
        if (!this.params) {
            this.params = new HttpParams();
            this.urlWithParams = url;
        }
        else {
            // Encode the parameters to a string in preparation for inclusion in the URL.
            /** @type {?} */
            const params = this.params.toString();
            if (params.length === 0) {
                // No parameters, the visible URL is just the URL given at creation time.
                this.urlWithParams = url;
            }
            else {
                // Does the URL already have query parameters? Look for '?'.
                /** @type {?} */
                const qIdx = url.indexOf('?');
                // There are 3 cases to handle:
                // 1) No existing parameters -> append '?' followed by params.
                // 2) '?' exists and is followed by existing query string ->
                //    append '&' followed by params.
                // 3) '?' exists at the end of the url -> append params directly.
                // This basically amounts to determining the character, if any, with
                // which to join the URL and parameters.
                /** @type {?} */
                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');
                this.urlWithParams = url + sep + params;
            }
        }
    }
    /**
     * Transform the free-form body into a serialized format suitable for
     * transmission to the server.
     * @return {?}
     */
    serializeBody() {
        // If no body is present, no need to serialize it.
        if (this.body === null) {
            return null;
        }
        // Check whether the body is already in a serialized form. If so,
        // it can just be returned directly.
        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||
            typeof this.body === 'string') {
            return this.body;
        }
        // Check whether the body is an instance of HttpUrlEncodedParams.
        if (this.body instanceof HttpParams) {
            return this.body.toString();
        }
        // Check whether the body is an object or array, and serialize with JSON if so.
        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||
            Array.isArray(this.body)) {
            return JSON.stringify(this.body);
        }
        // Fall back on toString() for everything else.
        return ((/** @type {?} */ (this.body))).toString();
    }
    /**
     * Examine the body and attempt to infer an appropriate MIME type
     * for it.
     *
     * If no such type can be inferred, this method will return `null`.
     * @return {?}
     */
    detectContentTypeHeader() {
        // An empty body has no content type.
        if (this.body === null) {
            return null;
        }
        // FormData bodies rely on the browser's content type assignment.
        if (isFormData(this.body)) {
            return null;
        }
        // Blobs usually have their own content type. If it doesn't, then
        // no type can be inferred.
        if (isBlob(this.body)) {
            return this.body.type || null;
        }
        // Array buffers have unknown contents and thus no type can be inferred.
        if (isArrayBuffer(this.body)) {
            return null;
        }
        // Technically, strings could be a form of JSON data, but it's safe enough
        // to assume they're plain strings.
        if (typeof this.body === 'string') {
            return 'text/plain';
        }
        // `HttpUrlEncodedParams` has its own content-type.
        if (this.body instanceof HttpParams) {
            return 'application/x-www-form-urlencoded;charset=UTF-8';
        }
        // Arrays, objects, and numbers will be encoded as JSON.
        if (typeof this.body === 'object' || typeof this.body === 'number' ||
            Array.isArray(this.body)) {
            return 'application/json';
        }
        // No type could be inferred.
        return null;
    }
    /**
     * @param {?=} update
     * @return {?}
     */
    clone(update = {}) {
        // For method, url, and responseType, take the current value unless
        // it is overridden in the update hash.
        /** @type {?} */
        const method = update.method || this.method;
        /** @type {?} */
        const url = update.url || this.url;
        /** @type {?} */
        const responseType = update.responseType || this.responseType;
        // The body is somewhat special - a `null` value in update.body means
        // whatever current body is present is being overridden with an empty
        // body, whereas an `undefined` value in update.body implies no
        // override.
        /** @type {?} */
        const body = (update.body !== undefined) ? update.body : this.body;
        // Carefully handle the boolean options to differentiate between
        // `false` and `undefined` in the update args.
        /** @type {?} */
        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;
        /** @type {?} */
        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;
        // Headers and params may be appended to if `setHeaders` or
        // `setParams` are used.
        /** @type {?} */
        let headers = update.headers || this.headers;
        /** @type {?} */
        let params = update.params || this.params;
        // Check whether the caller has asked to add headers.
        if (update.setHeaders !== undefined) {
            // Set every requested header.
            headers =
                Object.keys(update.setHeaders)
                    .reduce((/**
                 * @param {?} headers
                 * @param {?} name
                 * @return {?}
                 */
                (headers, name) => headers.set(name, (/** @type {?} */ (update.setHeaders))[name])), headers);
        }
        // Check whether the caller has asked to set params.
        if (update.setParams) {
            // Set every requested param.
            params = Object.keys(update.setParams)
                .reduce((/**
             * @param {?} params
             * @param {?} param
             * @return {?}
             */
            (params, param) => params.set(param, (/** @type {?} */ (update.setParams))[param])), params);
        }
        // Finally, construct the new HttpRequest using the pieces from above.
        return new HttpRequest(method, url, body, {
            params, headers, reportProgress, responseType, withCredentials,
        });
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/response.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const HttpEventType = {
    /**
     * The request was sent out over the wire.
     */
    Sent: 0,
    /**
     * An upload progress event was received.
     */
    UploadProgress: 1,
    /**
     * The response status code and headers were received.
     */
    ResponseHeader: 2,
    /**
     * A download progress event was received.
     */
    DownloadProgress: 3,
    /**
     * The full response including the body was received.
     */
    Response: 4,
    /**
     * A custom event from an interceptor or a backend.
     */
    User: 5,
};
HttpEventType[HttpEventType.Sent] = 'Sent';
HttpEventType[HttpEventType.UploadProgress] = 'UploadProgress';
HttpEventType[HttpEventType.ResponseHeader] = 'ResponseHeader';
HttpEventType[HttpEventType.DownloadProgress] = 'DownloadProgress';
HttpEventType[HttpEventType.Response] = 'Response';
HttpEventType[HttpEventType.User] = 'User';
/**
 * Base interface for progress events.
 *
 * \@publicApi
 * @record
 */
function HttpProgressEvent() { }
if (false) {}
/**
 * A download progress event.
 *
 * \@publicApi
 * @record
 */
function HttpDownloadProgressEvent() { }
if (false) {}
/**
 * An upload progress event.
 *
 * \@publicApi
 * @record
 */
function HttpUploadProgressEvent() { }
if (false) {}
/**
 * An event indicating that the request was sent to the server. Useful
 * when a request may be retried multiple times, to distinguish between
 * retries on the final event stream.
 *
 * \@publicApi
 * @record
 */
function HttpSentEvent() { }
if (false) {}
/**
 * A user-defined event.
 *
 * Grouping all custom events under this type ensures they will be handled
 * and forwarded by all implementations of interceptors.
 *
 * \@publicApi
 * @record
 * @template T
 */
function HttpUserEvent() { }
if (false) {}
/**
 * An error that represents a failed attempt to JSON.parse text coming back
 * from the server.
 *
 * It bundles the Error object with the actual response body that failed to parse.
 *
 *
 * @record
 */
function HttpJsonParseError() { }
if (false) {}
/**
 * Base class for both `HttpResponse` and `HttpHeaderResponse`.
 *
 * \@publicApi
 * @abstract
 */
class HttpResponseBase {
    /**
     * Super-constructor for all responses.
     *
     * The single parameter accepted is an initialization hash. Any properties
     * of the response passed there will override the default values.
     * @param {?} init
     * @param {?=} defaultStatus
     * @param {?=} defaultStatusText
     */
    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {
        // If the hash has values passed, use them to initialize the response.
        // Otherwise use the default values.
        this.headers = init.headers || new HttpHeaders();
        this.status = init.status !== undefined ? init.status : defaultStatus;
        this.statusText = init.statusText || defaultStatusText;
        this.url = init.url || null;
        // Cache the ok value to avoid defining a getter.
        this.ok = this.status >= 200 && this.status < 300;
    }
}
if (false) {}
/**
 * A partial HTTP response which only includes the status and header data,
 * but no response body.
 *
 * `HttpHeaderResponse` is a `HttpEvent` available on the response
 * event stream, only when progress events are requested.
 *
 * \@publicApi
 */
class HttpHeaderResponse extends HttpResponseBase {
    /**
     * Create a new `HttpHeaderResponse` with the given parameters.
     * @param {?=} init
     */
    constructor(init = {}) {
        super(init);
        this.type = HttpEventType.ResponseHeader;
    }
    /**
     * Copy this `HttpHeaderResponse`, overriding its contents with the
     * given parameter hash.
     * @param {?=} update
     * @return {?}
     */
    clone(update = {}) {
        // Perform a straightforward initialization of the new HttpHeaderResponse,
        // overriding the current parameters with new ones if given.
        return new HttpHeaderResponse({
            headers: update.headers || this.headers,
            status: update.status !== undefined ? update.status : this.status,
            statusText: update.statusText || this.statusText,
            url: update.url || this.url || undefined,
        });
    }
}
if (false) {}
/**
 * A full HTTP response, including a typed response body (which may be `null`
 * if one was not returned).
 *
 * `HttpResponse` is a `HttpEvent` available on the response event
 * stream.
 *
 * \@publicApi
 * @template T
 */
class HttpResponse extends HttpResponseBase {
    /**
     * Construct a new `HttpResponse`.
     * @param {?=} init
     */
    constructor(init = {}) {
        super(init);
        this.type = HttpEventType.Response;
        this.body = init.body !== undefined ? init.body : null;
    }
    /**
     * @param {?=} update
     * @return {?}
     */
    clone(update = {}) {
        return new HttpResponse({
            body: (update.body !== undefined) ? update.body : this.body,
            headers: update.headers || this.headers,
            status: (update.status !== undefined) ? update.status : this.status,
            statusText: update.statusText || this.statusText,
            url: update.url || this.url || undefined,
        });
    }
}
if (false) {}
/**
 * A response that represents an error or failure, either from a
 * non-successful HTTP status, an error while executing the request,
 * or some other failure which occurred during the parsing of the response.
 *
 * Any error returned on the `Observable` response stream will be
 * wrapped in an `HttpErrorResponse` to provide additional context about
 * the state of the HTTP layer when the error occurred. The error property
 * will contain either a wrapped Error object or the error response returned
 * from the server.
 *
 * \@publicApi
 */
class HttpErrorResponse extends HttpResponseBase {
    /**
     * @param {?} init
     */
    constructor(init) {
        // Initialize with a default status of 0 / Unknown Error.
        super(init, 0, 'Unknown Error');
        this.name = 'HttpErrorResponse';
        /**
         * Errors are never okay, even when the status code is in the 2xx success range.
         */
        this.ok = false;
        // If the response was successful, then this was a parse error. Otherwise, it was
        // a protocol-level failure of some sort. Either the request failed in transit
        // or the server returned an unsuccessful status code.
        if (this.status >= 200 && this.status < 300) {
            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;
        }
        else {
            this.message =
                `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;
        }
        this.error = init.error || null;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/client.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and
 * the given `body`. This function clones the object and adds the body.
 *
 * Note that the `responseType` *options* value is a String that identifies the
 * single data type of the response.
 * A single overload version of the method handles each response type.
 * The value of `responseType` cannot be a union, as the combined signature could imply.
 *
 * @template T
 * @param {?} options
 * @param {?} body
 * @return {?}
 */
function addBody(options, body) {
    return {
        body,
        headers: options.headers,
        observe: options.observe,
        params: options.params,
        reportProgress: options.reportProgress,
        responseType: options.responseType,
        withCredentials: options.withCredentials,
    };
}
/**
 * Performs HTTP requests.
 * This service is available as an injectable class, with methods to perform HTTP requests.
 * Each request method has multiple signatures, and the return type varies based on
 * the signature that is called (mainly the values of `observe` and `responseType`).
 *
 * Note that the `responseType` *options* value is a String that identifies the
 * single data type of the response.
 * A single overload version of the method handles each response type.
 * The value of `responseType` cannot be a union, as the combined signature could imply.
 *
 * \@usageNotes
 * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.
 *
 * ### HTTP Request Example
 *
 * ```
 *  // GET heroes whose name contains search term
 * searchHeroes(term: string): observable<Hero[]>{
 *
 *  const params = new HttpParams({fromString: 'name=term'});
 *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});
 * }
 * ```
 * ### JSONP Example
 * ```
 * requestJsonp(url, callback = 'callback') {
 *  return this.httpClient.jsonp(this.heroesURL, callback);
 * }
 * ```
 *
 * ### PATCH Example
 * ```
 * // PATCH one of the heroes' name
 * patchHero (id: number, heroName: string): Observable<{}> {
 * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42
 *  return this.httpClient.patch(url, {name: heroName}, httpOptions)
 *    .pipe(catchError(this.handleError('patchHero')));
 * }
 * ```
 *
 * @see [HTTP Guide](guide/http)
 *
 * \@publicApi
 */
class HttpClient {
    /**
     * @param {?} handler
     */
    constructor(handler) {
        this.handler = handler;
    }
    /**
     * Constructs an observable for a generic HTTP request that, when subscribed,
     * fires the request through the chain of registered interceptors and on to the
     * server.
     *
     * You can pass an `HttpRequest` directly as the only parameter. In this case,
     * the call returns an observable of the raw `HttpEvent` stream.
     *
     * Alternatively you can pass an HTTP method as the first parameter,
     * a URL string as the second, and an options hash containing the request body as the third.
     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the
     * type of returned observable.
     *   * The `responseType` value determines how a successful response body is parsed.
     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting
     * object as a type parameter to the call.
     *
     * The `observe` value determines the return type, according to what you are interested in
     * observing.
     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including
     * progress events by default.
     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,
     * where the `T` parameter depends on the `responseType` and any optionally provided type
     * parameter.
     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.
     *
     * @param {?} first
     * @param {?=} url
     * @param {?=} options
     * @return {?}
     */
    request(first, url, options = {}) {
        /** @type {?} */
        let req;
        // First, check whether the primary argument is an instance of `HttpRequest`.
        if (first instanceof HttpRequest) {
            // It is. The other arguments must be undefined (per the signatures) and can be
            // ignored.
            req = first;
        }
        else {
            // It's a string, so it represents a URL. Construct a request based on it,
            // and incorporate the remaining arguments (assuming `GET` unless a method is
            // provided.
            // Figure out the headers.
            /** @type {?} */
            let headers = undefined;
            if (options.headers instanceof HttpHeaders) {
                headers = options.headers;
            }
            else {
                headers = new HttpHeaders(options.headers);
            }
            // Sort out parameters.
            /** @type {?} */
            let params = undefined;
            if (!!options.params) {
                if (options.params instanceof HttpParams) {
                    params = options.params;
                }
                else {
                    params = new HttpParams((/** @type {?} */ ({ fromObject: options.params })));
                }
            }
            // Construct the request.
            req = new HttpRequest(first, (/** @type {?} */ (url)), (options.body !== undefined ? options.body : null), {
                headers,
                params,
                reportProgress: options.reportProgress,
                // By default, JSON is assumed to be returned for all calls.
                responseType: options.responseType || 'json',
                withCredentials: options.withCredentials,
            });
        }
        // Start with an Observable.of() the initial request, and run the handler (which
        // includes all interceptors) inside a concatMap(). This way, the handler runs
        // inside an Observable chain, which causes interceptors to be re-run on every
        // subscription (this also makes retries re-run the handler, including interceptors).
        /** @type {?} */
        const events$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(req).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["concatMap"])((/**
         * @param {?} req
         * @return {?}
         */
        (req) => this.handler.handle(req))));
        // If coming via the API signature which accepts a previously constructed HttpRequest,
        // the only option is to get the event stream. Otherwise, return the event stream if
        // that is what was requested.
        if (first instanceof HttpRequest || options.observe === 'events') {
            return events$;
        }
        // The requested stream contains either the full response or the body. In either
        // case, the first step is to filter the event stream to extract a stream of
        // responses(s).
        /** @type {?} */
        const res$ = (/** @type {?} */ (events$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["filter"])((/**
         * @param {?} event
         * @return {?}
         */
        (event) => event instanceof HttpResponse)))));
        // Decide which stream to return.
        switch (options.observe || 'body') {
            case 'body':
                // The requested stream is the body. Map the response stream to the response
                // body. This could be done more simply, but a misbehaving interceptor might
                // transform the response body into a different format and ignore the requested
                // responseType. Guard against this by validating that the response is of the
                // requested type.
                switch (req.responseType) {
                    case 'arraybuffer':
                        return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])((/**
                         * @param {?} res
                         * @return {?}
                         */
                        (res) => {
                            // Validate that the body is an ArrayBuffer.
                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                                throw new Error('Response is not an ArrayBuffer.');
                            }
                            return res.body;
                        })));
                    case 'blob':
                        return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])((/**
                         * @param {?} res
                         * @return {?}
                         */
                        (res) => {
                            // Validate that the body is a Blob.
                            if (res.body !== null && !(res.body instanceof Blob)) {
                                throw new Error('Response is not a Blob.');
                            }
                            return res.body;
                        })));
                    case 'text':
                        return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])((/**
                         * @param {?} res
                         * @return {?}
                         */
                        (res) => {
                            // Validate that the body is a string.
                            if (res.body !== null && typeof res.body !== 'string') {
                                throw new Error('Response is not a string.');
                            }
                            return res.body;
                        })));
                    case 'json':
                    default:
                        // No validation needed for JSON responses, as they can be of any type.
                        return res$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])((/**
                         * @param {?} res
                         * @return {?}
                         */
                        (res) => res.body)));
                }
            case 'response':
                // The response stream was requested directly, so return it.
                return res$;
            default:
                // Guard against new future observe types being added.
                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);
        }
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `DELETE` request to execute on the server. See the individual overloads for
     * details on the return type.
     *
     * @param {?} url     The endpoint URL.
     * @param {?=} options The HTTP options to send with the request.
     *
     * @return {?}
     */
    delete(url, options = {}) {
        return this.request('DELETE', url, (/** @type {?} */ (options)));
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `GET` request to execute on the server. See the individual overloads for
     * details on the return type.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    get(url, options = {}) {
        return this.request('GET', url, (/** @type {?} */ (options)));
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `HEAD` request to execute on the server. The `HEAD` method returns
     * meta information about the resource without transferring the
     * resource itself. See the individual overloads for
     * details on the return type.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    head(url, options = {}) {
        return this.request('HEAD', url, (/** @type {?} */ (options)));
    }
    /**
     * Constructs an `Observable` that, when subscribed, causes a request with the special method
     * `JSONP` to be dispatched via the interceptor pipeline.
     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain
     * API endpoints that don't support newer,
     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.
     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the
     * requests even if the API endpoint is not located on the same domain (origin) as the client-side
     * application making the request.
     * The endpoint API must support JSONP callback for JSONP requests to work.
     * The resource API returns the JSON response wrapped in a callback function.
     * You can pass the callback function name as one of the query parameters.
     * Note that JSONP requests can only be used with `GET` requests.
     *
     * @template T
     * @param {?} url The resource URL.
     * @param {?} callbackParam The callback function name.
     *
     * @return {?}
     */
    jsonp(url, callbackParam) {
        return this.request('JSONP', url, {
            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),
            observe: 'body',
            responseType: 'json',
        });
    }
    /**
     * Constructs an `Observable` that, when subscribed, causes the configured
     * `OPTIONS` request to execute on the server. This method allows the client
     * to determine the supported HTTP methods and other capabilites of an endpoint,
     * without implying a resource action. See the individual overloads for
     * details on the return type.
     * @param {?} url
     * @param {?=} options
     * @return {?}
     */
    options(url, options = {}) {
        return this.request('OPTIONS', url, (/** @type {?} */ (options)));
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `PATCH` request to execute on the server. See the individual overloads for
     * details on the return type.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    patch(url, body, options = {}) {
        return this.request('PATCH', url, addBody(options, body));
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `POST` request to execute on the server. The server responds with the location of
     * the replaced resource. See the individual overloads for
     * details on the return type.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    post(url, body, options = {}) {
        return this.request('POST', url, addBody(options, body));
    }
    /**
     * Constructs an observable that, when subscribed, causes the configured
     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource
     * with a new set of values.
     * See the individual overloads for details on the return type.
     * @param {?} url
     * @param {?} body
     * @param {?=} options
     * @return {?}
     */
    put(url, body, options = {}) {
        return this.request('PUT', url, addBody(options, body));
    }
}
HttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](HttpHandler)); };
HttpClient.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: HttpClient, factory: HttpClient.ɵfac });
/** @nocollapse */
HttpClient.ctorParameters = () => [
    { type: HttpHandler }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpClient, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: HttpHandler }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/interceptor.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Intercepts and handles an `HttpRequest` or `HttpResponse`.
 *
 * Most interceptors transform the outgoing request before passing it to the
 * next interceptor in the chain, by calling `next.handle(transformedReq)`.
 * An interceptor may transform the
 * response event stream as well, by applying additional RxJS operators on the stream
 * returned by `next.handle()`.
 *
 * More rarely, an interceptor may handle the request entirely,
 * and compose a new event stream instead of invoking `next.handle()`. This is an
 * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.
 *
 * It is also rare but valid for an interceptor to return multiple responses on the
 * event stream for a single request.
 *
 * \@publicApi
 *
 * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)
 *
 * \@usageNotes
 *
 * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`
 * only in your `AppModule`, and add the interceptors to the root application injector .
 * If you import `HttpClientModule` multiple times across different modules (for example, in lazy
 * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors
 * provided in the root module.
 *
 * @record
 */
function HttpInterceptor() { }
if (false) {}
/**
 * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.
 *
 *
 */
class HttpInterceptorHandler {
    /**
     * @param {?} next
     * @param {?} interceptor
     */
    constructor(next, interceptor) {
        this.next = next;
        this.interceptor = interceptor;
    }
    /**
     * @param {?} req
     * @return {?}
     */
    handle(req) {
        return this.interceptor.intercept(req, this.next);
    }
}
if (false) {}
/**
 * A multi-provider token that represents the array of registered
 * `HttpInterceptor` objects.
 *
 * \@publicApi
 * @type {?}
 */
const HTTP_INTERCEPTORS = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('HTTP_INTERCEPTORS');
class NoopInterceptor {
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        return next.handle(req);
    }
}
NoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };
NoopInterceptor.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NoopInterceptor, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/jsonp.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Every request made through JSONP needs a callback name that's unique across the
// whole page. Each request is assigned an id and the callback name is constructed
// from that. The next id to be assigned is tracked in a global variable here that
// is shared among all applications on the page.
/** @type {?} */
let nextRequestId = 0;
// Error text given when a JSONP script is injected, but doesn't invoke the callback
// passed in its URL.
/** @type {?} */
const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';
// Error text given when a request is passed to the JsonpClientBackend that doesn't
// have a request method JSONP.
/** @type {?} */
const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';
/** @type {?} */
const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';
/**
 * DI token/abstract type representing a map of JSONP callbacks.
 *
 * In the browser, this should always be the `window` object.
 *
 *
 * @abstract
 */
class JsonpCallbackContext {
}
/**
 * Processes an `HttpRequest` with the JSONP method,
 * by performing JSONP style requests.
 * @see `HttpHandler`
 * @see `HttpXhrBackend`
 *
 * \@publicApi
 */
class JsonpClientBackend {
    /**
     * @param {?} callbackMap
     * @param {?} document
     */
    constructor(callbackMap, document) {
        this.callbackMap = callbackMap;
        this.document = document;
    }
    /**
     * Get the name of the next callback method, by incrementing the global `nextRequestId`.
     * @private
     * @return {?}
     */
    nextCallback() { return `ng_jsonp_callback_${nextRequestId++}`; }
    /**
     * Processes a JSONP request and returns an event stream of the results.
     * @param {?} req The request object.
     * @return {?} An observable of the response events.
     *
     */
    handle(req) {
        // Firstly, check both the method and response type. If either doesn't match
        // then the request was improperly routed here and cannot be handled.
        if (req.method !== 'JSONP') {
            throw new Error(JSONP_ERR_WRONG_METHOD);
        }
        else if (req.responseType !== 'json') {
            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
        }
        // Everything else happens inside the Observable boundary.
        return new rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            // The first step to make a request is to generate the callback name, and replace the
            // callback placeholder in the URL with the name. Care has to be taken here to ensure
            // a trailing &, if matched, gets inserted back into the URL in the correct place.
            /** @type {?} */
            const callback = this.nextCallback();
            /** @type {?} */
            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);
            // Construct the <script> tag and point it at the URL.
            /** @type {?} */
            const node = this.document.createElement('script');
            node.src = url;
            // A JSONP request requires waiting for multiple callbacks. These variables
            // are closed over and track state across those callbacks.
            // The response object, if one has been received, or null otherwise.
            /** @type {?} */
            let body = null;
            // Whether the response callback has been called.
            /** @type {?} */
            let finished = false;
            // Whether the request has been cancelled (and thus any other callbacks)
            // should be ignored.
            /** @type {?} */
            let cancelled = false;
            // Set the response callback in this.callbackMap (which will be the window
            // object in the browser. The script being loaded via the <script> tag will
            // eventually call this callback.
            this.callbackMap[callback] = (/**
             * @param {?=} data
             * @return {?}
             */
            (data) => {
                // Data has been received from the JSONP script. Firstly, delete this callback.
                delete this.callbackMap[callback];
                // Next, make sure the request wasn't cancelled in the meantime.
                if (cancelled) {
                    return;
                }
                // Set state to indicate data was received.
                body = data;
                finished = true;
            });
            // cleanup() is a utility closure that removes the <script> from the page and
            // the response callback from the window. This logic is used in both the
            // success, error, and cancellation paths, so it's extracted out for convenience.
            /** @type {?} */
            const cleanup = (/**
             * @return {?}
             */
            () => {
                // Remove the <script> tag if it's still on the page.
                if (node.parentNode) {
                    node.parentNode.removeChild(node);
                }
                // Remove the response callback from the callbackMap (window object in the
                // browser).
                delete this.callbackMap[callback];
            });
            // onLoad() is the success callback which runs after the response callback
            // if the JSONP script loads successfully. The event itself is unimportant.
            // If something went wrong, onLoad() may run without the response callback
            // having been invoked.
            /** @type {?} */
            const onLoad = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                // Do nothing if the request has been cancelled.
                if (cancelled) {
                    return;
                }
                // Cleanup the page.
                cleanup();
                // Check whether the response callback has run.
                if (!finished) {
                    // It hasn't, something went wrong with the request. Return an error via
                    // the Observable error path. All JSONP errors have status 0.
                    observer.error(new HttpErrorResponse({
                        url,
                        status: 0,
                        statusText: 'JSONP Error',
                        error: new Error(JSONP_ERR_NO_CALLBACK),
                    }));
                    return;
                }
                // Success. body either contains the response body or null if none was
                // returned.
                observer.next(new HttpResponse({
                    body,
                    status: 200,
                    statusText: 'OK', url,
                }));
                // Complete the stream, the response is over.
                observer.complete();
            });
            // onError() is the error callback, which runs if the script returned generates
            // a Javascript error. It emits the error via the Observable error channel as
            // a HttpErrorResponse.
            /** @type {?} */
            const onError = (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                // If the request was already cancelled, no need to emit anything.
                if (cancelled) {
                    return;
                }
                cleanup();
                // Wrap the error in a HttpErrorResponse.
                observer.error(new HttpErrorResponse({
                    error,
                    status: 0,
                    statusText: 'JSONP Error', url,
                }));
            });
            // Subscribe to both the success (load) and error events on the <script> tag,
            // and add it to the page.
            node.addEventListener('load', onLoad);
            node.addEventListener('error', onError);
            this.document.body.appendChild(node);
            // The request has now been successfully sent.
            observer.next({ type: HttpEventType.Sent });
            // Cancellation handler.
            return (/**
             * @return {?}
             */
            () => {
                // Track the cancellation so event listeners won't do anything even if already scheduled.
                cancelled = true;
                // Remove the event listeners so they won't run if the events later fire.
                node.removeEventListener('load', onLoad);
                node.removeEventListener('error', onError);
                // And finally, clean up the page.
                cleanup();
            });
        }));
    }
}
JsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](JsonpCallbackContext), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"])); };
JsonpClientBackend.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });
/** @nocollapse */
JsonpClientBackend.ctorParameters = () => [
    { type: JsonpCallbackContext },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](JsonpClientBackend, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]]
            }] }]; }, null); })();
if (false) {}
/**
 * Identifies requests with the method JSONP and
 * shifts them to the `JsonpClientBackend`.
 *
 * @see `HttpInterceptor`
 *
 * \@publicApi
 */
class JsonpInterceptor {
    /**
     * @param {?} jsonp
     */
    constructor(jsonp) {
        this.jsonp = jsonp;
    }
    /**
     * Identifies and handles a given JSONP request.
     * @param {?} req The outgoing request object to handle.
     * @param {?} next The next interceptor in the chain, or the backend
     * if no interceptors remain in the chain.
     * @return {?} An observable of the event stream.
     */
    intercept(req, next) {
        if (req.method === 'JSONP') {
            return this.jsonp.handle((/** @type {?} */ (req)));
        }
        // Fall through for normal HTTP requests.
        return next.handle(req);
    }
}
JsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](JsonpClientBackend)); };
JsonpInterceptor.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });
/** @nocollapse */
JsonpInterceptor.ctorParameters = () => [
    { type: JsonpClientBackend }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](JsonpInterceptor, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/xhr.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const XSSI_PREFIX = /^\)\]\}',?\n/;
/**
 * Determine an appropriate URL for the response, by checking either
 * XMLHttpRequest.responseURL or the X-Request-URL header.
 * @param {?} xhr
 * @return {?}
 */
function getResponseUrl(xhr) {
    if ('responseURL' in xhr && xhr.responseURL) {
        return xhr.responseURL;
    }
    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
        return xhr.getResponseHeader('X-Request-URL');
    }
    return null;
}
/**
 * A wrapper around the `XMLHttpRequest` constructor.
 *
 * \@publicApi
 * @abstract
 */
class XhrFactory {
}
if (false) {}
/**
 * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.
 *
 */
class BrowserXhr {
    constructor() {
    }
    /**
     * @return {?}
     */
    build() { return (/** @type {?} */ ((new XMLHttpRequest()))); }
}
BrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };
BrowserXhr.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: BrowserXhr, factory: BrowserXhr.ɵfac });
/** @nocollapse */
BrowserXhr.ctorParameters = () => [];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserXhr, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return []; }, null); })();
/**
 * Tracks a response from the server that does not yet have a body.
 * @record
 */
function PartialResponse() { }
if (false) {}
/**
 * Uses `XMLHttpRequest` to send requests to a backend server.
 * @see `HttpHandler`
 * @see `JsonpClientBackend`
 *
 * \@publicApi
 */
class HttpXhrBackend {
    /**
     * @param {?} xhrFactory
     */
    constructor(xhrFactory) {
        this.xhrFactory = xhrFactory;
    }
    /**
     * Processes a request and returns a stream of response events.
     * @param {?} req The request object.
     * @return {?} An observable of the response events.
     */
    handle(req) {
        // Quick check to give a better error message when a user attempts to use
        // HttpClient.jsonp() without installing the JsonpClientModule
        if (req.method === 'JSONP') {
            throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);
        }
        // Everything happens on Observable subscription.
        return new rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            // Start by setting up the XHR object with request method, URL, and withCredentials flag.
            /** @type {?} */
            const xhr = this.xhrFactory.build();
            xhr.open(req.method, req.urlWithParams);
            if (!!req.withCredentials) {
                xhr.withCredentials = true;
            }
            // Add all the requested headers.
            req.headers.forEach((/**
             * @param {?} name
             * @param {?} values
             * @return {?}
             */
            (name, values) => xhr.setRequestHeader(name, values.join(','))));
            // Add an Accept header if one isn't present already.
            if (!req.headers.has('Accept')) {
                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');
            }
            // Auto-detect the Content-Type header if one isn't present already.
            if (!req.headers.has('Content-Type')) {
                /** @type {?} */
                const detectedType = req.detectContentTypeHeader();
                // Sometimes Content-Type detection fails.
                if (detectedType !== null) {
                    xhr.setRequestHeader('Content-Type', detectedType);
                }
            }
            // Set the responseType if one was requested.
            if (req.responseType) {
                /** @type {?} */
                const responseType = req.responseType.toLowerCase();
                // JSON responses need to be processed as text. This is because if the server
                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,
                // xhr.response will be null, and xhr.responseText cannot be accessed to
                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON
                // is parsed by first requesting text and then applying JSON.parse.
                xhr.responseType = (/** @type {?} */ (((responseType !== 'json') ? responseType : 'text')));
            }
            // Serialize the request body if one is present. If not, this will be set to null.
            /** @type {?} */
            const reqBody = req.serializeBody();
            // If progress events are enabled, response headers will be delivered
            // in two events - the HttpHeaderResponse event and the full HttpResponse
            // event. However, since response headers don't change in between these
            // two events, it doesn't make sense to parse them twice. So headerResponse
            // caches the data extracted from the response whenever it's first parsed,
            // to ensure parsing isn't duplicated.
            /** @type {?} */
            let headerResponse = null;
            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest
            // state, and memoizes it into headerResponse.
            /** @type {?} */
            const partialFromXhr = (/**
             * @return {?}
             */
            () => {
                if (headerResponse !== null) {
                    return headerResponse;
                }
                // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).
                /** @type {?} */
                const status = xhr.status === 1223 ? 204 : xhr.status;
                /** @type {?} */
                const statusText = xhr.statusText || 'OK';
                // Parse headers from XMLHttpRequest - this step is lazy.
                /** @type {?} */
                const headers = new HttpHeaders(xhr.getAllResponseHeaders());
                // Read the response URL from the XMLHttpResponse instance and fall back on the
                // request URL.
                /** @type {?} */
                const url = getResponseUrl(xhr) || req.url;
                // Construct the HttpHeaderResponse and memoize it.
                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });
                return headerResponse;
            });
            // Next, a few closures are defined for the various events which XMLHttpRequest can
            // emit. This allows them to be unregistered as event listeners later.
            // First up is the load event, which represents a response being fully available.
            /** @type {?} */
            const onLoad = (/**
             * @return {?}
             */
            () => {
                // Read response state from the memoized partial data.
                let { headers, status, statusText, url } = partialFromXhr();
                // The body will be read out if present.
                /** @type {?} */
                let body = null;
                if (status !== 204) {
                    // Use XMLHttpRequest.response if set, responseText otherwise.
                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;
                }
                // Normalize another potential bug (this one comes from CORS).
                if (status === 0) {
                    status = !!body ? 200 : 0;
                }
                // ok determines whether the response will be transmitted on the event or
                // error channel. Unsuccessful status codes (not 2xx) will always be errors,
                // but a successful status code can still result in an error if the user
                // asked for JSON data and the body cannot be parsed as such.
                /** @type {?} */
                let ok = status >= 200 && status < 300;
                // Check whether the body needs to be parsed as JSON (in many cases the browser
                // will have done that already).
                if (req.responseType === 'json' && typeof body === 'string') {
                    // Save the original body, before attempting XSSI prefix stripping.
                    /** @type {?} */
                    const originalBody = body;
                    body = body.replace(XSSI_PREFIX, '');
                    try {
                        // Attempt the parse. If it fails, a parse error should be delivered to the user.
                        body = body !== '' ? JSON.parse(body) : null;
                    }
                    catch (error) {
                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a
                        // JSON response. Restore the original body (including any XSSI prefix) to deliver
                        // a better error response.
                        body = originalBody;
                        // If this was an error request to begin with, leave it as a string, it probably
                        // just isn't JSON. Otherwise, deliver the parsing error to the user.
                        if (ok) {
                            // Even though the response status was 2xx, this is still an error.
                            ok = false;
                            // The parse error contains the text of the body that failed to parse.
                            body = (/** @type {?} */ ({ error, text: body }));
                        }
                    }
                }
                if (ok) {
                    // A successful response is delivered on the event stream.
                    observer.next(new HttpResponse({
                        body,
                        headers,
                        status,
                        statusText,
                        url: url || undefined,
                    }));
                    // The full body has been received and delivered, no further events
                    // are possible. This request is complete.
                    observer.complete();
                }
                else {
                    // An unsuccessful request is delivered on the error channel.
                    observer.error(new HttpErrorResponse({
                        // The error in this case is the response body (error from the server).
                        error: body,
                        headers,
                        status,
                        statusText,
                        url: url || undefined,
                    }));
                }
            });
            // The onError callback is called when something goes wrong at the network level.
            // Connection timeout, DNS error, offline, etc. These are actual errors, and are
            // transmitted on the error channel.
            /** @type {?} */
            const onError = (/**
             * @param {?} error
             * @return {?}
             */
            (error) => {
                const { url } = partialFromXhr();
                /** @type {?} */
                const res = new HttpErrorResponse({
                    error,
                    status: xhr.status || 0,
                    statusText: xhr.statusText || 'Unknown Error',
                    url: url || undefined,
                });
                observer.error(res);
            });
            // The sentHeaders flag tracks whether the HttpResponseHeaders event
            // has been sent on the stream. This is necessary to track if progress
            // is enabled since the event will be sent on only the first download
            // progerss event.
            /** @type {?} */
            let sentHeaders = false;
            // The download progress event handler, which is only registered if
            // progress events are enabled.
            /** @type {?} */
            const onDownProgress = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                // Send the HttpResponseHeaders event if it hasn't been sent already.
                if (!sentHeaders) {
                    observer.next(partialFromXhr());
                    sentHeaders = true;
                }
                // Start building the download progress event to deliver on the response
                // event stream.
                /** @type {?} */
                let progressEvent = {
                    type: HttpEventType.DownloadProgress,
                    loaded: event.loaded,
                };
                // Set the total number of bytes in the event if it's available.
                if (event.lengthComputable) {
                    progressEvent.total = event.total;
                }
                // If the request was for text content and a partial response is
                // available on XMLHttpRequest, include it in the progress event
                // to allow for streaming reads.
                if (req.responseType === 'text' && !!xhr.responseText) {
                    progressEvent.partialText = xhr.responseText;
                }
                // Finally, fire the event.
                observer.next(progressEvent);
            });
            // The upload progress event handler, which is only registered if
            // progress events are enabled.
            /** @type {?} */
            const onUpProgress = (/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                // Upload progress events are simpler. Begin building the progress
                // event.
                /** @type {?} */
                let progress = {
                    type: HttpEventType.UploadProgress,
                    loaded: event.loaded,
                };
                // If the total number of bytes being uploaded is available, include
                // it.
                if (event.lengthComputable) {
                    progress.total = event.total;
                }
                // Send the event.
                observer.next(progress);
            });
            // By default, register for load and error events.
            xhr.addEventListener('load', onLoad);
            xhr.addEventListener('error', onError);
            // Progress events are only enabled if requested.
            if (req.reportProgress) {
                // Download progress is always enabled if requested.
                xhr.addEventListener('progress', onDownProgress);
                // Upload progress depends on whether there is a body to upload.
                if (reqBody !== null && xhr.upload) {
                    xhr.upload.addEventListener('progress', onUpProgress);
                }
            }
            // Fire the request, and notify the event stream that it was fired.
            xhr.send((/** @type {?} */ (reqBody)));
            observer.next({ type: HttpEventType.Sent });
            // This is the return from the Observable function, which is the
            // request cancellation handler.
            return (/**
             * @return {?}
             */
            () => {
                // On a cancellation, remove all registered event listeners.
                xhr.removeEventListener('error', onError);
                xhr.removeEventListener('load', onLoad);
                if (req.reportProgress) {
                    xhr.removeEventListener('progress', onDownProgress);
                    if (reqBody !== null && xhr.upload) {
                        xhr.upload.removeEventListener('progress', onUpProgress);
                    }
                }
                // Finally, abort the in-flight request.
                xhr.abort();
            });
        }));
    }
}
HttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](XhrFactory)); };
HttpXhrBackend.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });
/** @nocollapse */
HttpXhrBackend.ctorParameters = () => [
    { type: XhrFactory }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpXhrBackend, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: XhrFactory }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/xsrf.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const XSRF_COOKIE_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('XSRF_COOKIE_NAME');
/** @type {?} */
const XSRF_HEADER_NAME = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('XSRF_HEADER_NAME');
/**
 * Retrieves the current XSRF token to use with the next outgoing request.
 *
 * \@publicApi
 * @abstract
 */
class HttpXsrfTokenExtractor {
}
if (false) {}
/**
 * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.
 */
class HttpXsrfCookieExtractor {
    /**
     * @param {?} doc
     * @param {?} platform
     * @param {?} cookieName
     */
    constructor(doc, platform, cookieName) {
        this.doc = doc;
        this.platform = platform;
        this.cookieName = cookieName;
        this.lastCookieString = '';
        this.lastToken = null;
        /**
         * \@internal for testing
         */
        this.parseCount = 0;
    }
    /**
     * @return {?}
     */
    getToken() {
        if (this.platform === 'server') {
            return null;
        }
        /** @type {?} */
        const cookieString = this.doc.cookie || '';
        if (cookieString !== this.lastCookieString) {
            this.parseCount++;
            this.lastToken = Object(_angular_common__WEBPACK_IMPORTED_MODULE_3__["ɵparseCookieValue"])(cookieString, this.cookieName);
            this.lastCookieString = cookieString;
        }
        return this.lastToken;
    }
}
HttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](XSRF_COOKIE_NAME)); };
HttpXsrfCookieExtractor.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });
/** @nocollapse */
HttpXsrfCookieExtractor.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"],] }] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"],] }] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [XSRF_COOKIE_NAME,] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpXsrfCookieExtractor, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_3__["DOCUMENT"]]
            }] }, { type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["PLATFORM_ID"]]
            }] }, { type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [XSRF_COOKIE_NAME]
            }] }]; }, null); })();
if (false) {}
/**
 * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.
 */
class HttpXsrfInterceptor {
    /**
     * @param {?} tokenService
     * @param {?} headerName
     */
    constructor(tokenService, headerName) {
        this.tokenService = tokenService;
        this.headerName = headerName;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        /** @type {?} */
        const lcUrl = req.url.toLowerCase();
        // Skip both non-mutating requests and absolute URLs.
        // Non-mutating requests don't require a token, and absolute URLs require special handling
        // anyway as the cookie set
        // on our origin is not the same as the token expected by another origin.
        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||
            lcUrl.startsWith('https://')) {
            return next.handle(req);
        }
        /** @type {?} */
        const token = this.tokenService.getToken();
        // Be careful not to overwrite an existing header of the same name.
        if (token !== null && !req.headers.has(this.headerName)) {
            req = req.clone({ headers: req.headers.set(this.headerName, token) });
        }
        return next.handle(req);
    }
}
HttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](HttpXsrfTokenExtractor), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](XSRF_HEADER_NAME)); };
HttpXsrfInterceptor.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });
/** @nocollapse */
HttpXsrfInterceptor.ctorParameters = () => [
    { type: HttpXsrfTokenExtractor },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [XSRF_HEADER_NAME,] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpXsrfInterceptor, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [XSRF_HEADER_NAME]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/src/module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An injectable `HttpHandler` that applies multiple interceptors
 * to a request before passing it to the given `HttpBackend`.
 *
 * The interceptors are loaded lazily from the injector, to allow
 * interceptors to themselves inject classes depending indirectly
 * on `HttpInterceptingHandler` itself.
 * @see `HttpInterceptor`
 */
class HttpInterceptingHandler {
    /**
     * @param {?} backend
     * @param {?} injector
     */
    constructor(backend, injector) {
        this.backend = backend;
        this.injector = injector;
        this.chain = null;
    }
    /**
     * @param {?} req
     * @return {?}
     */
    handle(req) {
        if (this.chain === null) {
            /** @type {?} */
            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);
            this.chain = interceptors.reduceRight((/**
             * @param {?} next
             * @param {?} interceptor
             * @return {?}
             */
            (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), this.backend);
        }
        return this.chain.handle(req);
    }
}
HttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](HttpBackend), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"])); };
HttpInterceptingHandler.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });
/** @nocollapse */
HttpInterceptingHandler.ctorParameters = () => [
    { type: HttpBackend },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpInterceptingHandler, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: HttpBackend }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injector"] }]; }, null); })();
if (false) {}
/**
 * Constructs an `HttpHandler` that applies interceptors
 * to a request before passing it to the given `HttpBackend`.
 *
 * Use as a factory function within `HttpClientModule`.
 *
 *
 * @param {?} backend
 * @param {?=} interceptors
 * @return {?}
 */
function interceptingHandler(backend, interceptors = []) {
    if (!interceptors) {
        return backend;
    }
    return interceptors.reduceRight((/**
     * @param {?} next
     * @param {?} interceptor
     * @return {?}
     */
    (next, interceptor) => new HttpInterceptorHandler(next, interceptor)), backend);
}
/**
 * Factory function that determines where to store JSONP callbacks.
 *
 * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist
 * in test environments. In that case, callbacks are stored on an anonymous object instead.
 *
 *
 * @return {?}
 */
function jsonpCallbackContext() {
    if (typeof window === 'object') {
        return window;
    }
    return {};
}
/**
 * Configures XSRF protection support for outgoing requests.
 *
 * For a server that supports a cookie-based XSRF protection system,
 * use directly to configure XSRF protection with the correct
 * cookie and header names.
 *
 * If no names are supplied, the default cookie name is `XSRF-TOKEN`
 * and the default header name is `X-XSRF-TOKEN`.
 *
 * \@publicApi
 */
class HttpClientXsrfModule {
    /**
     * Disable the default XSRF protection.
     * @return {?}
     */
    static disable() {
        return {
            ngModule: HttpClientXsrfModule,
            providers: [
                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },
            ],
        };
    }
    /**
     * Configure XSRF protection.
     * @param {?=} options An object that can specify either or both
     * cookie name or header name.
     * - Cookie name default is `XSRF-TOKEN`.
     * - Header name default is `X-XSRF-TOKEN`.
     *
     * @return {?}
     */
    static withOptions(options = {}) {
        return {
            ngModule: HttpClientXsrfModule,
            providers: [
                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],
                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],
            ],
        };
    }
}
HttpClientXsrfModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: HttpClientXsrfModule });
HttpClientXsrfModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ factory: function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); }, providers: [
        HttpXsrfInterceptor,
        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },
        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },
        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },
        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },
    ] });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpClientXsrfModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
                providers: [
                    HttpXsrfInterceptor,
                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },
                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },
                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },
                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },
                ]
            }]
    }], null, null); })();
/**
 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
 * with supporting services for XSRF. Automatically imported by `HttpClientModule`.
 *
 * You can add interceptors to the chain behind `HttpClient` by binding them to the
 * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
 *
 * \@publicApi
 */
class HttpClientModule {
}
HttpClientModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: HttpClientModule });
HttpClientModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ factory: function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); }, providers: [
        HttpClient,
        { provide: HttpHandler, useClass: HttpInterceptingHandler },
        HttpXhrBackend,
        { provide: HttpBackend, useExisting: HttpXhrBackend },
        BrowserXhr,
        { provide: XhrFactory, useExisting: BrowserXhr },
    ], imports: [[
            HttpClientXsrfModule.withOptions({
                cookieName: 'XSRF-TOKEN',
                headerName: 'X-XSRF-TOKEN'
            }),
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](HttpClientModule, { imports: [HttpClientXsrfModule] }); })();
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpClientModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
                /**
                 * Optional configuration for XSRF protection.
                 */
                imports: [
                    HttpClientXsrfModule.withOptions({
                        cookieName: 'XSRF-TOKEN',
                        headerName: 'X-XSRF-TOKEN'
                    }),
                ],
                /**
                 * Configures the [dependency injector](guide/glossary#injector) where it is imported
                 * with supporting services for HTTP communications.
                 */
                providers: [
                    HttpClient,
                    { provide: HttpHandler, useClass: HttpInterceptingHandler },
                    HttpXhrBackend,
                    { provide: HttpBackend, useExisting: HttpXhrBackend },
                    BrowserXhr,
                    { provide: XhrFactory, useExisting: BrowserXhr },
                ]
            }]
    }], null, null); })();
/**
 * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`
 * with supporting services for JSONP.
 * Without this module, Jsonp requests reach the backend
 * with method JSONP, where they are rejected.
 *
 * You can add interceptors to the chain behind `HttpClient` by binding them to the
 * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.
 *
 * \@publicApi
 */
class HttpClientJsonpModule {
}
HttpClientJsonpModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: HttpClientJsonpModule });
HttpClientJsonpModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ factory: function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); }, providers: [
        JsonpClientBackend,
        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },
        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },
    ] });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](HttpClientJsonpModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
                providers: [
                    JsonpClientBackend,
                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },
                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },
                ]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/common/http/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=http.js.map

/***/ }),

/***/ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js":
/*!******************************************************************!*\
  !*** ./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js ***!
  \******************************************************************/
/*! exports provided: ANALYZE_FOR_ENTRY_COMPONENTS, APP_BOOTSTRAP_LISTENER, APP_ID, APP_INITIALIZER, ApplicationInitStatus, ApplicationModule, ApplicationRef, Attribute, COMPILER_OPTIONS, CUSTOM_ELEMENTS_SCHEMA, ChangeDetectionStrategy, ChangeDetectorRef, Compiler, CompilerFactory, Component, ComponentFactory, ComponentFactoryResolver, ComponentRef, ContentChild, ContentChildren, DEFAULT_CURRENCY_CODE, DebugElement, DebugEventListener, DebugNode, DefaultIterableDiffer, Directive, ElementRef, EmbeddedViewRef, ErrorHandler, EventEmitter, Host, HostBinding, HostListener, INJECTOR, Inject, InjectFlags, Injectable, InjectionToken, Injector, Input, IterableDiffers, KeyValueDiffers, LOCALE_ID, MissingTranslationStrategy, ModuleWithComponentFactories, NO_ERRORS_SCHEMA, NgModule, NgModuleFactory, NgModuleFactoryLoader, NgModuleRef, NgProbeToken, NgZone, Optional, Output, PACKAGE_ROOT_URL, PLATFORM_ID, PLATFORM_INITIALIZER, Pipe, PlatformRef, Query, QueryList, ReflectiveInjector, ReflectiveKey, Renderer2, RendererFactory2, RendererStyleFlags2, ResolvedReflectiveFactory, Sanitizer, SecurityContext, Self, SimpleChange, SkipSelf, SystemJsNgModuleLoader, SystemJsNgModuleLoaderConfig, TRANSLATIONS, TRANSLATIONS_FORMAT, TemplateRef, Testability, TestabilityRegistry, Type, VERSION, Version, ViewChild, ViewChildren, ViewContainerRef, ViewEncapsulation, ViewRef, WrappedValue, asNativeElements, assertPlatform, createPlatform, createPlatformFactory, defineInjectable, destroyPlatform, enableProdMode, forwardRef, getDebugNode, getModuleFactory, getPlatform, inject, isDevMode, platformCore, resolveForwardRef, setTestabilityGetter, ɵALLOW_MULTIPLE_PLATFORMS, ɵAPP_ID_RANDOM_PROVIDER, ɵChangeDetectorStatus, ɵCodegenComponentFactoryResolver, ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__, ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__, ɵCompiler_compileModuleAsync__POST_R3__, ɵCompiler_compileModuleSync__POST_R3__, ɵComponentFactory, ɵConsole, ɵDEFAULT_LOCALE_ID, ɵEMPTY_ARRAY, ɵEMPTY_MAP, ɵINJECTOR_IMPL__POST_R3__, ɵINJECTOR_SCOPE, ɵLifecycleHooksFeature, ɵLocaleDataIndex, ɵNG_COMP_DEF, ɵNG_DIR_DEF, ɵNG_ELEMENT_ID, ɵNG_INJ_DEF, ɵNG_MOD_DEF, ɵNG_PIPE_DEF, ɵNG_PROV_DEF, ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, ɵNO_CHANGE, ɵNgModuleFactory, ɵNoopNgZone, ɵReflectionCapabilities, ɵRender3ComponentFactory, ɵRender3ComponentRef, ɵRender3NgModuleRef, ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__, ɵSWITCH_COMPILE_COMPONENT__POST_R3__, ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__, ɵSWITCH_COMPILE_INJECTABLE__POST_R3__, ɵSWITCH_COMPILE_NGMODULE__POST_R3__, ɵSWITCH_COMPILE_PIPE__POST_R3__, ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__, ɵSWITCH_IVY_ENABLED__POST_R3__, ɵSWITCH_RENDERER2_FACTORY__POST_R3__, ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__, ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__, ɵ_sanitizeHtml, ɵ_sanitizeStyle, ɵ_sanitizeUrl, ɵallowSanitizationBypassAndThrow, ɵand, ɵangular_packages_core_core_a, ɵangular_packages_core_core_b, ɵangular_packages_core_core_ba, ɵangular_packages_core_core_bb, ɵangular_packages_core_core_bc, ɵangular_packages_core_core_bd, ɵangular_packages_core_core_bf, ɵangular_packages_core_core_bg, ɵangular_packages_core_core_bh, ɵangular_packages_core_core_bi, ɵangular_packages_core_core_bj, ɵangular_packages_core_core_bk, ɵangular_packages_core_core_bl, ɵangular_packages_core_core_bm, ɵangular_packages_core_core_bn, ɵangular_packages_core_core_bo, ɵangular_packages_core_core_bq, ɵangular_packages_core_core_c, ɵangular_packages_core_core_d, ɵangular_packages_core_core_e, ɵangular_packages_core_core_f, ɵangular_packages_core_core_g, ɵangular_packages_core_core_h, ɵangular_packages_core_core_i, ɵangular_packages_core_core_j, ɵangular_packages_core_core_k, ɵangular_packages_core_core_l, ɵangular_packages_core_core_m, ɵangular_packages_core_core_n, ɵangular_packages_core_core_o, ɵangular_packages_core_core_p, ɵangular_packages_core_core_q, ɵangular_packages_core_core_r, ɵangular_packages_core_core_s, ɵangular_packages_core_core_t, ɵangular_packages_core_core_u, ɵangular_packages_core_core_v, ɵangular_packages_core_core_w, ɵangular_packages_core_core_x, ɵangular_packages_core_core_y, ɵangular_packages_core_core_z, ɵbypassSanitizationTrustHtml, ɵbypassSanitizationTrustResourceUrl, ɵbypassSanitizationTrustScript, ɵbypassSanitizationTrustStyle, ɵbypassSanitizationTrustUrl, ɵccf, ɵclearOverrides, ɵclearResolutionOfComponentResourcesQueue, ɵcmf, ɵcompileComponent, ɵcompileDirective, ɵcompileNgModule, ɵcompileNgModuleDefs, ɵcompileNgModuleFactory__POST_R3__, ɵcompilePipe, ɵcreateInjector, ɵcrt, ɵdefaultIterableDiffers, ɵdefaultKeyValueDiffers, ɵdetectChanges, ɵdevModeEqual, ɵdid, ɵeld, ɵfindLocaleData, ɵflushModuleScopingQueueAsMuchAsPossible, ɵgetComponentViewDefinitionFactory, ɵgetDebugNodeR2, ɵgetDebugNode__POST_R3__, ɵgetDirectives, ɵgetHostElement, ɵgetInjectableDef, ɵgetLContext, ɵgetLocaleCurrencyCode, ɵgetLocalePluralCase, ɵgetModuleFactory__POST_R3__, ɵgetSanitizationBypassType, ɵglobal, ɵinitServicesIfNeeded, ɵinlineInterpolate, ɵinterpolate, ɵisBoundToModule__POST_R3__, ɵisDefaultChangeDetectionStrategy, ɵisListLikeIterable, ɵisObservable, ɵisPromise, ɵivyEnabled, ɵlooseIdentical, ɵmakeDecorator, ɵmarkDirty, ɵmod, ɵmpd, ɵncd, ɵnov, ɵoverrideComponentView, ɵoverrideProvider, ɵpad, ɵpatchComponentDefWithScope, ɵpid, ɵpod, ɵppd, ɵprd, ɵpublishDefaultGlobalUtils, ɵpublishGlobalUtil, ɵqud, ɵregisterLocaleData, ɵregisterModuleFactory, ɵregisterNgModuleType, ɵrenderComponent, ɵresetCompiledComponents, ɵresolveComponentResources, ɵsetClassMetadata, ɵsetCurrentInjector, ɵsetDocument, ɵsetLocaleId, ɵstore, ɵstringify, ɵted, ɵtransitiveScopesFor, ɵunregisterLocaleData, ɵunv, ɵunwrapSafeValue, ɵvid, ɵwhenRendered, ɵɵCopyDefinitionFeature, ɵɵInheritDefinitionFeature, ɵɵNgOnChangesFeature, ɵɵProvidersFeature, ɵɵadvance, ɵɵattribute, ɵɵattributeInterpolate1, ɵɵattributeInterpolate2, ɵɵattributeInterpolate3, ɵɵattributeInterpolate4, ɵɵattributeInterpolate5, ɵɵattributeInterpolate6, ɵɵattributeInterpolate7, ɵɵattributeInterpolate8, ɵɵattributeInterpolateV, ɵɵclassMap, ɵɵclassMapInterpolate1, ɵɵclassMapInterpolate2, ɵɵclassMapInterpolate3, ɵɵclassMapInterpolate4, ɵɵclassMapInterpolate5, ɵɵclassMapInterpolate6, ɵɵclassMapInterpolate7, ɵɵclassMapInterpolate8, ɵɵclassMapInterpolateV, ɵɵclassProp, ɵɵcomponentHostSyntheticListener, ɵɵcontainer, ɵɵcontainerRefreshEnd, ɵɵcontainerRefreshStart, ɵɵcontentQuery, ɵɵdefaultStyleSanitizer, ɵɵdefineComponent, ɵɵdefineDirective, ɵɵdefineInjectable, ɵɵdefineInjector, ɵɵdefineNgModule, ɵɵdefinePipe, ɵɵdirectiveInject, ɵɵdisableBindings, ɵɵelement, ɵɵelementContainer, ɵɵelementContainerEnd, ɵɵelementContainerStart, ɵɵelementEnd, ɵɵelementStart, ɵɵembeddedViewEnd, ɵɵembeddedViewStart, ɵɵenableBindings, ɵɵgetCurrentView, ɵɵgetFactoryOf, ɵɵgetInheritedFactory, ɵɵhostProperty, ɵɵi18n, ɵɵi18nApply, ɵɵi18nAttributes, ɵɵi18nEnd, ɵɵi18nExp, ɵɵi18nPostprocess, ɵɵi18nStart, ɵɵinject, ɵɵinjectAttribute, ɵɵinjectPipeChangeDetectorRef, ɵɵinvalidFactory, ɵɵinvalidFactoryDep, ɵɵlistener, ɵɵloadQuery, ɵɵnamespaceHTML, ɵɵnamespaceMathML, ɵɵnamespaceSVG, ɵɵnextContext, ɵɵpipe, ɵɵpipeBind1, ɵɵpipeBind2, ɵɵpipeBind3, ɵɵpipeBind4, ɵɵpipeBindV, ɵɵprojection, ɵɵprojectionDef, ɵɵproperty, ɵɵpropertyInterpolate, ɵɵpropertyInterpolate1, ɵɵpropertyInterpolate2, ɵɵpropertyInterpolate3, ɵɵpropertyInterpolate4, ɵɵpropertyInterpolate5, ɵɵpropertyInterpolate6, ɵɵpropertyInterpolate7, ɵɵpropertyInterpolate8, ɵɵpropertyInterpolateV, ɵɵpureFunction0, ɵɵpureFunction1, ɵɵpureFunction2, ɵɵpureFunction3, ɵɵpureFunction4, ɵɵpureFunction5, ɵɵpureFunction6, ɵɵpureFunction7, ɵɵpureFunction8, ɵɵpureFunctionV, ɵɵqueryRefresh, ɵɵreference, ɵɵresolveBody, ɵɵresolveDocument, ɵɵresolveWindow, ɵɵrestoreView, ɵɵsanitizeHtml, ɵɵsanitizeResourceUrl, ɵɵsanitizeScript, ɵɵsanitizeStyle, ɵɵsanitizeUrl, ɵɵsanitizeUrlOrResourceUrl, ɵɵselect, ɵɵsetComponentScope, ɵɵsetNgModuleScope, ɵɵstaticContentQuery, ɵɵstaticViewQuery, ɵɵstyleMap, ɵɵstyleMapInterpolate1, ɵɵstyleMapInterpolate2, ɵɵstyleMapInterpolate3, ɵɵstyleMapInterpolate4, ɵɵstyleMapInterpolate5, ɵɵstyleMapInterpolate6, ɵɵstyleMapInterpolate7, ɵɵstyleMapInterpolate8, ɵɵstyleMapInterpolateV, ɵɵstyleProp, ɵɵstylePropInterpolate1, ɵɵstylePropInterpolate2, ɵɵstylePropInterpolate3, ɵɵstylePropInterpolate4, ɵɵstylePropInterpolate5, ɵɵstylePropInterpolate6, ɵɵstylePropInterpolate7, ɵɵstylePropInterpolate8, ɵɵstylePropInterpolateV, ɵɵstyleSanitizer, ɵɵtemplate, ɵɵtemplateRefExtractor, ɵɵtext, ɵɵtextInterpolate, ɵɵtextInterpolate1, ɵɵtextInterpolate2, ɵɵtextInterpolate3, ɵɵtextInterpolate4, ɵɵtextInterpolate5, ɵɵtextInterpolate6, ɵɵtextInterpolate7, ɵɵtextInterpolate8, ɵɵtextInterpolateV, ɵɵupdateSyntheticHostBinding, ɵɵviewQuery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANALYZE_FOR_ENTRY_COMPONENTS", function() { return ANALYZE_FOR_ENTRY_COMPONENTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_BOOTSTRAP_LISTENER", function() { return APP_BOOTSTRAP_LISTENER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_ID", function() { return APP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_INITIALIZER", function() { return APP_INITIALIZER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationInitStatus", function() { return ApplicationInitStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationModule", function() { return ApplicationModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationRef", function() { return ApplicationRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Attribute", function() { return Attribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMPILER_OPTIONS", function() { return COMPILER_OPTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_ELEMENTS_SCHEMA", function() { return CUSTOM_ELEMENTS_SCHEMA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeDetectionStrategy", function() { return ChangeDetectionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChangeDetectorRef", function() { return ChangeDetectorRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Compiler", function() { return Compiler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CompilerFactory", function() { return CompilerFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Component", function() { return Component; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentFactory", function() { return ComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentFactoryResolver", function() { return ComponentFactoryResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentRef", function() { return ComponentRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentChild", function() { return ContentChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContentChildren", function() { return ContentChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_CURRENCY_CODE", function() { return DEFAULT_CURRENCY_CODE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugElement", function() { return DebugElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugEventListener", function() { return DebugEventListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DebugNode", function() { return DebugNode$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultIterableDiffer", function() { return DefaultIterableDiffer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Directive", function() { return Directive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ElementRef", function() { return ElementRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmbeddedViewRef", function() { return EmbeddedViewRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorHandler", function() { return ErrorHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventEmitter", function() { return EventEmitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Host", function() { return Host; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HostBinding", function() { return HostBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HostListener", function() { return HostListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INJECTOR", function() { return INJECTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Inject", function() { return Inject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InjectFlags", function() { return InjectFlags; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Injectable", function() { return Injectable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InjectionToken", function() { return InjectionToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Injector", function() { return Injector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Input", function() { return Input; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "IterableDiffers", function() { return IterableDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "KeyValueDiffers", function() { return KeyValueDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOCALE_ID", function() { return LOCALE_ID$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MissingTranslationStrategy", function() { return MissingTranslationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuleWithComponentFactories", function() { return ModuleWithComponentFactories; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NO_ERRORS_SCHEMA", function() { return NO_ERRORS_SCHEMA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModule", function() { return NgModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModuleFactory", function() { return NgModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModuleFactoryLoader", function() { return NgModuleFactoryLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgModuleRef", function() { return NgModuleRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgProbeToken", function() { return NgProbeToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NgZone", function() { return NgZone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Optional", function() { return Optional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Output", function() { return Output; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PACKAGE_ROOT_URL", function() { return PACKAGE_ROOT_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLATFORM_ID", function() { return PLATFORM_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PLATFORM_INITIALIZER", function() { return PLATFORM_INITIALIZER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Pipe", function() { return Pipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlatformRef", function() { return PlatformRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Query", function() { return Query; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueryList", function() { return QueryList; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReflectiveInjector", function() { return ReflectiveInjector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReflectiveKey", function() { return ReflectiveKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Renderer2", function() { return Renderer2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RendererFactory2", function() { return RendererFactory2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RendererStyleFlags2", function() { return RendererStyleFlags2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResolvedReflectiveFactory", function() { return ResolvedReflectiveFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sanitizer", function() { return Sanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SecurityContext", function() { return SecurityContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Self", function() { return Self; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleChange", function() { return SimpleChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SkipSelf", function() { return SkipSelf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoader", function() { return SystemJsNgModuleLoader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SystemJsNgModuleLoaderConfig", function() { return SystemJsNgModuleLoaderConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSLATIONS", function() { return TRANSLATIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TRANSLATIONS_FORMAT", function() { return TRANSLATIONS_FORMAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TemplateRef", function() { return TemplateRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Testability", function() { return Testability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestabilityRegistry", function() { return TestabilityRegistry; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Type", function() { return Type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Version", function() { return Version; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewChild", function() { return ViewChild; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewChildren", function() { return ViewChildren; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewContainerRef", function() { return ViewContainerRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewEncapsulation", function() { return ViewEncapsulation$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewRef", function() { return ViewRef$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WrappedValue", function() { return WrappedValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asNativeElements", function() { return asNativeElements; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "assertPlatform", function() { return assertPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPlatform", function() { return createPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPlatformFactory", function() { return createPlatformFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defineInjectable", function() { return defineInjectable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "destroyPlatform", function() { return destroyPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableProdMode", function() { return enableProdMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forwardRef", function() { return forwardRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDebugNode", function() { return getDebugNode$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getModuleFactory", function() { return getModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPlatform", function() { return getPlatform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "inject", function() { return inject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDevMode", function() { return isDevMode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "platformCore", function() { return platformCore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolveForwardRef", function() { return resolveForwardRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setTestabilityGetter", function() { return setTestabilityGetter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵALLOW_MULTIPLE_PLATFORMS", function() { return ALLOW_MULTIPLE_PLATFORMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAPP_ID_RANDOM_PROVIDER", function() { return APP_ID_RANDOM_PROVIDER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵChangeDetectorStatus", function() { return ChangeDetectorStatus; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵCodegenComponentFactoryResolver", function() { return CodegenComponentFactoryResolver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleAndAllComponentsAsync__POST_R3__", function() { return Compiler_compileModuleAndAllComponentsAsync__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleAndAllComponentsSync__POST_R3__", function() { return Compiler_compileModuleAndAllComponentsSync__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleAsync__POST_R3__", function() { return Compiler_compileModuleAsync__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵCompiler_compileModuleSync__POST_R3__", function() { return Compiler_compileModuleSync__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵComponentFactory", function() { return ComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵConsole", function() { return Console; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDEFAULT_LOCALE_ID", function() { return DEFAULT_LOCALE_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵEMPTY_ARRAY", function() { return EMPTY_ARRAY$4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵEMPTY_MAP", function() { return EMPTY_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵINJECTOR_IMPL__POST_R3__", function() { return INJECTOR_IMPL__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵINJECTOR_SCOPE", function() { return INJECTOR_SCOPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵLifecycleHooksFeature", function() { return LifecycleHooksFeature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵLocaleDataIndex", function() { return LocaleDataIndex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNG_COMP_DEF", function() { return NG_COMP_DEF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNG_DIR_DEF", function() { return NG_DIR_DEF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNG_ELEMENT_ID", function() { return NG_ELEMENT_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNG_INJ_DEF", function() { return NG_INJ_DEF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNG_MOD_DEF", function() { return NG_MOD_DEF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNG_PIPE_DEF", function() { return NG_PIPE_DEF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNG_PROV_DEF", function() { return NG_PROV_DEF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR", function() { return NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNO_CHANGE", function() { return NO_CHANGE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNgModuleFactory", function() { return NgModuleFactory$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNoopNgZone", function() { return NoopNgZone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵReflectionCapabilities", function() { return ReflectionCapabilities; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵRender3ComponentFactory", function() { return ComponentFactory$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵRender3ComponentRef", function() { return ComponentRef$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵRender3NgModuleRef", function() { return NgModuleRef$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__", function() { return SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_COMPONENT__POST_R3__", function() { return SWITCH_COMPILE_COMPONENT__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_DIRECTIVE__POST_R3__", function() { return SWITCH_COMPILE_DIRECTIVE__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_INJECTABLE__POST_R3__", function() { return SWITCH_COMPILE_INJECTABLE__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_NGMODULE__POST_R3__", function() { return SWITCH_COMPILE_NGMODULE__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_COMPILE_PIPE__POST_R3__", function() { return SWITCH_COMPILE_PIPE__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_ELEMENT_REF_FACTORY__POST_R3__", function() { return SWITCH_ELEMENT_REF_FACTORY__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_IVY_ENABLED__POST_R3__", function() { return SWITCH_IVY_ENABLED__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_RENDERER2_FACTORY__POST_R3__", function() { return SWITCH_RENDERER2_FACTORY__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_TEMPLATE_REF_FACTORY__POST_R3__", function() { return SWITCH_TEMPLATE_REF_FACTORY__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__", function() { return SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵ_sanitizeHtml", function() { return _sanitizeHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵ_sanitizeStyle", function() { return _sanitizeStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵ_sanitizeUrl", function() { return _sanitizeUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵallowSanitizationBypassAndThrow", function() { return allowSanitizationBypassAndThrow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵand", function() { return anchorDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_a", function() { return isForwardRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_b", function() { return injectInjectorOnly; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_ba", function() { return getLView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bb", function() { return getPreviousOrParentTNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bc", function() { return getBindingRoot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bd", function() { return nextContextImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bf", function() { return pureFunction1Internal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bg", function() { return pureFunction2Internal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bh", function() { return pureFunction3Internal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bi", function() { return pureFunction4Internal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bj", function() { return pureFunctionVInternal; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bk", function() { return getUrlSanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bl", function() { return makeParamDecorator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bm", function() { return makePropDecorator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bn", function() { return getClosureSafeProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bo", function() { return noSideEffects; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_bq", function() { return getRootContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_c", function() { return NullInjector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_d", function() { return ReflectiveInjector_; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_e", function() { return ReflectiveDependency; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_f", function() { return resolveReflectiveProviders; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_g", function() { return _appIdRandomProviderFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_h", function() { return createElementRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_i", function() { return createTemplateRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_j", function() { return getModuleFactory__PRE_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_k", function() { return DebugNode__PRE_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_l", function() { return DebugElement__PRE_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_m", function() { return getDebugNodeR2__PRE_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_n", function() { return DefaultIterableDifferFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_o", function() { return DefaultKeyValueDifferFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_p", function() { return _iterableDiffersFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_q", function() { return _keyValueDiffersFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_r", function() { return _localeFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_s", function() { return APPLICATION_MODULE_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_t", function() { return zoneSchedulerFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_u", function() { return USD_CURRENCY_CODE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_v", function() { return _def; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_w", function() { return DebugContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_x", function() { return SCHEDULER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_y", function() { return injectAttributeImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_core_core_z", function() { return instructionState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustHtml", function() { return bypassSanitizationTrustHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustResourceUrl", function() { return bypassSanitizationTrustResourceUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustScript", function() { return bypassSanitizationTrustScript; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustStyle", function() { return bypassSanitizationTrustStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵbypassSanitizationTrustUrl", function() { return bypassSanitizationTrustUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵccf", function() { return createComponentFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵclearOverrides", function() { return clearOverrides; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵclearResolutionOfComponentResourcesQueue", function() { return clearResolutionOfComponentResourcesQueue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcmf", function() { return createNgModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcompileComponent", function() { return compileComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcompileDirective", function() { return compileDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcompileNgModule", function() { return compileNgModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcompileNgModuleDefs", function() { return compileNgModuleDefs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcompileNgModuleFactory__POST_R3__", function() { return compileNgModuleFactory__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcompilePipe", function() { return compilePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcreateInjector", function() { return createInjector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵcrt", function() { return createRendererType2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdefaultIterableDiffers", function() { return defaultIterableDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdefaultKeyValueDiffers", function() { return defaultKeyValueDiffers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdetectChanges", function() { return detectChanges; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdevModeEqual", function() { return devModeEqual$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵdid", function() { return directiveDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵeld", function() { return elementDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵfindLocaleData", function() { return findLocaleData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵflushModuleScopingQueueAsMuchAsPossible", function() { return flushModuleScopingQueueAsMuchAsPossible; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetComponentViewDefinitionFactory", function() { return getComponentViewDefinitionFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetDebugNodeR2", function() { return getDebugNodeR2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetDebugNode__POST_R3__", function() { return getDebugNode__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetDirectives", function() { return getDirectives; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetHostElement", function() { return getHostElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetInjectableDef", function() { return getInjectableDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetLContext", function() { return getLContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetLocaleCurrencyCode", function() { return getLocaleCurrencyCode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetLocalePluralCase", function() { return getLocalePluralCase; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetModuleFactory__POST_R3__", function() { return getModuleFactory__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵgetSanitizationBypassType", function() { return getSanitizationBypassType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵglobal", function() { return _global; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinitServicesIfNeeded", function() { return initServicesIfNeeded; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinlineInterpolate", function() { return inlineInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinterpolate", function() { return interpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisBoundToModule__POST_R3__", function() { return isBoundToModule__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisDefaultChangeDetectionStrategy", function() { return isDefaultChangeDetectionStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisListLikeIterable", function() { return isListLikeIterable$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisObservable", function() { return isObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵisPromise", function() { return isPromise; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵivyEnabled", function() { return ivyEnabled; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵlooseIdentical", function() { return looseIdentical; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵmakeDecorator", function() { return makeDecorator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵmarkDirty", function() { return markDirty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵmod", function() { return moduleDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵmpd", function() { return moduleProvideDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵncd", function() { return ngContentDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵnov", function() { return nodeValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵoverrideComponentView", function() { return overrideComponentView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵoverrideProvider", function() { return overrideProvider; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpad", function() { return pureArrayDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpatchComponentDefWithScope", function() { return patchComponentDefWithScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpid", function() { return pipeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpod", function() { return pureObjectDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵppd", function() { return purePipeDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵprd", function() { return providerDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpublishDefaultGlobalUtils", function() { return publishDefaultGlobalUtils; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵpublishGlobalUtil", function() { return publishGlobalUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵqud", function() { return queryDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵregisterLocaleData", function() { return registerLocaleData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵregisterModuleFactory", function() { return registerModuleFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵregisterNgModuleType", function() { return registerNgModuleType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵrenderComponent", function() { return renderComponent$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵresetCompiledComponents", function() { return resetCompiledComponents; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵresolveComponentResources", function() { return resolveComponentResources; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵsetClassMetadata", function() { return setClassMetadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵsetCurrentInjector", function() { return setCurrentInjector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵsetDocument", function() { return setDocument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵsetLocaleId", function() { return setLocaleId; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵstore", function() { return store; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵstringify", function() { return stringify; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵted", function() { return textDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵtransitiveScopesFor", function() { return transitiveScopesFor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵunregisterLocaleData", function() { return unregisterAllLocaleData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵunv", function() { return unwrapValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵunwrapSafeValue", function() { return unwrapSafeValue; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵvid", function() { return viewDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵwhenRendered", function() { return whenRendered; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵCopyDefinitionFeature", function() { return ɵɵCopyDefinitionFeature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵInheritDefinitionFeature", function() { return ɵɵInheritDefinitionFeature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵNgOnChangesFeature", function() { return ɵɵNgOnChangesFeature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵProvidersFeature", function() { return ɵɵProvidersFeature; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵadvance", function() { return ɵɵadvance; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattribute", function() { return ɵɵattribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate1", function() { return ɵɵattributeInterpolate1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate2", function() { return ɵɵattributeInterpolate2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate3", function() { return ɵɵattributeInterpolate3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate4", function() { return ɵɵattributeInterpolate4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate5", function() { return ɵɵattributeInterpolate5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate6", function() { return ɵɵattributeInterpolate6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate7", function() { return ɵɵattributeInterpolate7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolate8", function() { return ɵɵattributeInterpolate8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵattributeInterpolateV", function() { return ɵɵattributeInterpolateV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMap", function() { return ɵɵclassMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate1", function() { return ɵɵclassMapInterpolate1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate2", function() { return ɵɵclassMapInterpolate2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate3", function() { return ɵɵclassMapInterpolate3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate4", function() { return ɵɵclassMapInterpolate4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate5", function() { return ɵɵclassMapInterpolate5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate6", function() { return ɵɵclassMapInterpolate6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate7", function() { return ɵɵclassMapInterpolate7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolate8", function() { return ɵɵclassMapInterpolate8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassMapInterpolateV", function() { return ɵɵclassMapInterpolateV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵclassProp", function() { return ɵɵclassProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵcomponentHostSyntheticListener", function() { return ɵɵcomponentHostSyntheticListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵcontainer", function() { return ɵɵcontainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵcontainerRefreshEnd", function() { return ɵɵcontainerRefreshEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵcontainerRefreshStart", function() { return ɵɵcontainerRefreshStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵcontentQuery", function() { return ɵɵcontentQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵdefaultStyleSanitizer", function() { return ɵɵdefaultStyleSanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵdefineComponent", function() { return ɵɵdefineComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵdefineDirective", function() { return ɵɵdefineDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵdefineInjectable", function() { return ɵɵdefineInjectable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵdefineInjector", function() { return ɵɵdefineInjector; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵdefineNgModule", function() { return ɵɵdefineNgModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵdefinePipe", function() { return ɵɵdefinePipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵdirectiveInject", function() { return ɵɵdirectiveInject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵdisableBindings", function() { return ɵɵdisableBindings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵelement", function() { return ɵɵelement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵelementContainer", function() { return ɵɵelementContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵelementContainerEnd", function() { return ɵɵelementContainerEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵelementContainerStart", function() { return ɵɵelementContainerStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵelementEnd", function() { return ɵɵelementEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵelementStart", function() { return ɵɵelementStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵembeddedViewEnd", function() { return ɵɵembeddedViewEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵembeddedViewStart", function() { return ɵɵembeddedViewStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵenableBindings", function() { return ɵɵenableBindings; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵgetCurrentView", function() { return ɵɵgetCurrentView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵgetFactoryOf", function() { return ɵɵgetFactoryOf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵgetInheritedFactory", function() { return ɵɵgetInheritedFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵhostProperty", function() { return ɵɵhostProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵi18n", function() { return ɵɵi18n; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵi18nApply", function() { return ɵɵi18nApply; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵi18nAttributes", function() { return ɵɵi18nAttributes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵi18nEnd", function() { return ɵɵi18nEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵi18nExp", function() { return ɵɵi18nExp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵi18nPostprocess", function() { return ɵɵi18nPostprocess; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵi18nStart", function() { return ɵɵi18nStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵinject", function() { return ɵɵinject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵinjectAttribute", function() { return ɵɵinjectAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵinjectPipeChangeDetectorRef", function() { return ɵɵinjectPipeChangeDetectorRef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵinvalidFactory", function() { return ɵɵinvalidFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵinvalidFactoryDep", function() { return ɵɵinvalidFactoryDep; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵlistener", function() { return ɵɵlistener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵloadQuery", function() { return ɵɵloadQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵnamespaceHTML", function() { return ɵɵnamespaceHTML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵnamespaceMathML", function() { return ɵɵnamespaceMathML; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵnamespaceSVG", function() { return ɵɵnamespaceSVG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵnextContext", function() { return ɵɵnextContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpipe", function() { return ɵɵpipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind1", function() { return ɵɵpipeBind1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind2", function() { return ɵɵpipeBind2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind3", function() { return ɵɵpipeBind3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpipeBind4", function() { return ɵɵpipeBind4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpipeBindV", function() { return ɵɵpipeBindV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵprojection", function() { return ɵɵprojection; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵprojectionDef", function() { return ɵɵprojectionDef; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵproperty", function() { return ɵɵproperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate", function() { return ɵɵpropertyInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate1", function() { return ɵɵpropertyInterpolate1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate2", function() { return ɵɵpropertyInterpolate2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate3", function() { return ɵɵpropertyInterpolate3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate4", function() { return ɵɵpropertyInterpolate4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate5", function() { return ɵɵpropertyInterpolate5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate6", function() { return ɵɵpropertyInterpolate6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate7", function() { return ɵɵpropertyInterpolate7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolate8", function() { return ɵɵpropertyInterpolate8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpropertyInterpolateV", function() { return ɵɵpropertyInterpolateV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction0", function() { return ɵɵpureFunction0; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction1", function() { return ɵɵpureFunction1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction2", function() { return ɵɵpureFunction2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction3", function() { return ɵɵpureFunction3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction4", function() { return ɵɵpureFunction4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction5", function() { return ɵɵpureFunction5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction6", function() { return ɵɵpureFunction6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction7", function() { return ɵɵpureFunction7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunction8", function() { return ɵɵpureFunction8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵpureFunctionV", function() { return ɵɵpureFunctionV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵqueryRefresh", function() { return ɵɵqueryRefresh; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵreference", function() { return ɵɵreference; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵresolveBody", function() { return ɵɵresolveBody; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵresolveDocument", function() { return ɵɵresolveDocument; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵresolveWindow", function() { return ɵɵresolveWindow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵrestoreView", function() { return ɵɵrestoreView; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeHtml", function() { return ɵɵsanitizeHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeResourceUrl", function() { return ɵɵsanitizeResourceUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeScript", function() { return ɵɵsanitizeScript; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeStyle", function() { return ɵɵsanitizeStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeUrl", function() { return ɵɵsanitizeUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵsanitizeUrlOrResourceUrl", function() { return ɵɵsanitizeUrlOrResourceUrl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵselect", function() { return ɵɵselect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵsetComponentScope", function() { return ɵɵsetComponentScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵsetNgModuleScope", function() { return ɵɵsetNgModuleScope; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstaticContentQuery", function() { return ɵɵstaticContentQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstaticViewQuery", function() { return ɵɵstaticViewQuery; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMap", function() { return ɵɵstyleMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate1", function() { return ɵɵstyleMapInterpolate1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate2", function() { return ɵɵstyleMapInterpolate2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate3", function() { return ɵɵstyleMapInterpolate3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate4", function() { return ɵɵstyleMapInterpolate4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate5", function() { return ɵɵstyleMapInterpolate5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate6", function() { return ɵɵstyleMapInterpolate6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate7", function() { return ɵɵstyleMapInterpolate7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolate8", function() { return ɵɵstyleMapInterpolate8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleMapInterpolateV", function() { return ɵɵstyleMapInterpolateV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleProp", function() { return ɵɵstyleProp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate1", function() { return ɵɵstylePropInterpolate1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate2", function() { return ɵɵstylePropInterpolate2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate3", function() { return ɵɵstylePropInterpolate3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate4", function() { return ɵɵstylePropInterpolate4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate5", function() { return ɵɵstylePropInterpolate5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate6", function() { return ɵɵstylePropInterpolate6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate7", function() { return ɵɵstylePropInterpolate7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolate8", function() { return ɵɵstylePropInterpolate8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstylePropInterpolateV", function() { return ɵɵstylePropInterpolateV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵstyleSanitizer", function() { return ɵɵstyleSanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtemplate", function() { return ɵɵtemplate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtemplateRefExtractor", function() { return ɵɵtemplateRefExtractor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtext", function() { return ɵɵtext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate", function() { return ɵɵtextInterpolate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate1", function() { return ɵɵtextInterpolate1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate2", function() { return ɵɵtextInterpolate2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate3", function() { return ɵɵtextInterpolate3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate4", function() { return ɵɵtextInterpolate4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate5", function() { return ɵɵtextInterpolate5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate6", function() { return ɵɵtextInterpolate6; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate7", function() { return ɵɵtextInterpolate7; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolate8", function() { return ɵɵtextInterpolate8; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵtextInterpolateV", function() { return ɵɵtextInterpolateV; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵupdateSyntheticHostBinding", function() { return ɵɵupdateSyntheticHostBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵɵviewQuery", function() { return ɵɵviewQuery; });
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/**
 * @license Angular v9.0.7
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */




/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Convince closure compiler that the wrapped function has no side-effects.
 *
 * Closure compiler always assumes that `toString` has no side-effects. We use this quirk to
 * allow us to execute a function but have closure compiler mark the call as no-side-effects.
 * It is important that the return value for the `noSideEffects` function be assigned
 * to something which is retained otherwise the call to `noSideEffects` will be removed by closure
 * compiler.
 */
function noSideEffects(fn) {
    return { toString: fn }.toString();
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const ANNOTATIONS = '__annotations__';
const PARAMETERS = '__parameters__';
const PROP_METADATA = '__prop__metadata__';
/**
 * @suppress {globalThis}
 */
function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
    return noSideEffects(() => {
        const metaCtor = makeMetadataCtor(props);
        function DecoratorFactory(...args) {
            if (this instanceof DecoratorFactory) {
                metaCtor.call(this, ...args);
                return this;
            }
            const annotationInstance = new DecoratorFactory(...args);
            return function TypeDecorator(cls) {
                if (typeFn)
                    typeFn(cls, ...args);
                // Use of Object.defineProperty is important since it creates non-enumerable property which
                // prevents the property is copied during subclassing.
                const annotations = cls.hasOwnProperty(ANNOTATIONS) ?
                    cls[ANNOTATIONS] :
                    Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
                annotations.push(annotationInstance);
                if (additionalProcessing)
                    additionalProcessing(cls);
                return cls;
            };
        }
        if (parentClass) {
            DecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        DecoratorFactory.prototype.ngMetadataName = name;
        DecoratorFactory.annotationCls = DecoratorFactory;
        return DecoratorFactory;
    });
}
function makeMetadataCtor(props) {
    return function ctor(...args) {
        if (props) {
            const values = props(...args);
            for (const propName in values) {
                this[propName] = values[propName];
            }
        }
    };
}
function makeParamDecorator(name, props, parentClass) {
    return noSideEffects(() => {
        const metaCtor = makeMetadataCtor(props);
        function ParamDecoratorFactory(...args) {
            if (this instanceof ParamDecoratorFactory) {
                metaCtor.apply(this, args);
                return this;
            }
            const annotationInstance = new ParamDecoratorFactory(...args);
            ParamDecorator.annotation = annotationInstance;
            return ParamDecorator;
            function ParamDecorator(cls, unusedKey, index) {
                // Use of Object.defineProperty is important since it creates non-enumerable property which
                // prevents the property is copied during subclassing.
                const parameters = cls.hasOwnProperty(PARAMETERS) ?
                    cls[PARAMETERS] :
                    Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
                // there might be gaps if some in between parameters do not have annotations.
                // we pad with nulls.
                while (parameters.length <= index) {
                    parameters.push(null);
                }
                (parameters[index] = parameters[index] || []).push(annotationInstance);
                return cls;
            }
        }
        if (parentClass) {
            ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        ParamDecoratorFactory.prototype.ngMetadataName = name;
        ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
        return ParamDecoratorFactory;
    });
}
function makePropDecorator(name, props, parentClass, additionalProcessing) {
    return noSideEffects(() => {
        const metaCtor = makeMetadataCtor(props);
        function PropDecoratorFactory(...args) {
            if (this instanceof PropDecoratorFactory) {
                metaCtor.apply(this, args);
                return this;
            }
            const decoratorInstance = new PropDecoratorFactory(...args);
            function PropDecorator(target, name) {
                const constructor = target.constructor;
                // Use of Object.defineProperty is important since it creates non-enumerable property which
                // prevents the property is copied during subclassing.
                const meta = constructor.hasOwnProperty(PROP_METADATA) ?
                    constructor[PROP_METADATA] :
                    Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
                meta[name] = meta.hasOwnProperty(name) && meta[name] || [];
                meta[name].unshift(decoratorInstance);
                if (additionalProcessing)
                    additionalProcessing(target, name, ...args);
            }
            return PropDecorator;
        }
        if (parentClass) {
            PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
        }
        PropDecoratorFactory.prototype.ngMetadataName = name;
        PropDecoratorFactory.annotationCls = PropDecoratorFactory;
        return PropDecoratorFactory;
    });
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/metadata.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Type of the Inject decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function InjectDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ0 = /**
 * @param {?} token
 * @return {?}
 */
(token) => ({ token });
/**
 * Inject decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Inject = makeParamDecorator('Inject', (ɵ0));
/**
 * Type of the Optional decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function OptionalDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
/**
 * Optional decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Optional = makeParamDecorator('Optional');
/**
 * Type of the Self decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function SelfDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
/**
 * Self decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Self = makeParamDecorator('Self');
/**
 * Type of the SkipSelf decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function SkipSelfDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
/**
 * SkipSelf decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const SkipSelf = makeParamDecorator('SkipSelf');
/**
 * Type of the Host decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function HostDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
/**
 * Host decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Host = makeParamDecorator('Host');
/**
 * Type of the Attribute decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function AttributeDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ1 = /**
 * @param {?=} attributeName
 * @return {?}
 */
(attributeName) => ({ attributeName });
/**
 * Attribute decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Attribute = makeParamDecorator('Attribute', (ɵ1));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Injection flags for DI.
 *
 * @publicApi
 */
var InjectFlags;
(function (InjectFlags) {
    // TODO(alxhub): make this 'const' when ngc no longer writes exports of it into ngfactory files.
    /** Check self and check parent injector if needed */
    InjectFlags[InjectFlags["Default"] = 0] = "Default";
    /**
     * Specifies that an injector should retrieve a dependency from any injector until reaching the
     * host element of the current component. (Only used with Element Injector)
     */
    InjectFlags[InjectFlags["Host"] = 1] = "Host";
    /** Don't ascend to ancestors of the node requesting injection. */
    InjectFlags[InjectFlags["Self"] = 2] = "Self";
    /** Skip the node that is requesting injection. */
    InjectFlags[InjectFlags["SkipSelf"] = 4] = "SkipSelf";
    /** Inject `defaultValue` instead if token not found. */
    InjectFlags[InjectFlags["Optional"] = 8] = "Optional";
})(InjectFlags || (InjectFlags = {}));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function getClosureSafeProperty(objWithPropertyToExtract) {
    for (let key in objWithPropertyToExtract) {
        if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
            return key;
        }
    }
    throw Error('Could not find renamed property on target object.');
}
/**
 * Sets properties on a target object from a source object, but only if
 * the property doesn't already exist on the target object.
 * @param target The target to set properties on
 * @param source The source of the property keys and values to set
 */
function fillProperties(target, source) {
    for (const key in source) {
        if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
            target[key] = source[key];
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Construct an `InjectableDef` which defines how a token will be constructed by the DI system, and
 * in which injectors (if any) it will be available.
 *
 * This should be assigned to a static `ɵprov` field on a type, which will then be an
 * `InjectableType`.
 *
 * Options:
 * * `providedIn` determines which injectors will include the injectable, by either associating it
 *   with an `@NgModule` or other `InjectorType`, or by specifying that this injectable should be
 *   provided in the `'root'` injector, which will be the application-level injector in most apps.
 * * `factory` gives the zero argument function which will create an instance of the injectable.
 *   The factory can call `inject` to access the `Injector` and request injection of dependencies.
 *
 * @codeGenApi
 */
function ɵɵdefineInjectable(opts) {
    return {
        token: opts.token, providedIn: opts.providedIn || null, factory: opts.factory,
        value: undefined,
    };
}
/**
 * @deprecated in v8, delete after v10. This API should be used only be generated code, and that
 * code should now use ɵɵdefineInjectable instead.
 * @publicApi
 */
const defineInjectable = ɵɵdefineInjectable;
/**
 * Construct an `InjectorDef` which configures an injector.
 *
 * This should be assigned to a static injector def (`ɵinj`) field on a type, which will then be an
 * `InjectorType`.
 *
 * Options:
 *
 * * `factory`: an `InjectorType` is an instantiable type, so a zero argument `factory` function to
 *   create the type must be provided. If that factory function needs to inject arguments, it can
 *   use the `inject` function.
 * * `providers`: an optional array of providers to add to the injector. Each provider must
 *   either have a factory or point to a type which has a `ɵprov` static property (the
 *   type must be an `InjectableType`).
 * * `imports`: an optional array of imports of other `InjectorType`s or `InjectorTypeWithModule`s
 *   whose providers will also be added to the injector. Locally provided types will override
 *   providers from imports.
 *
 * @publicApi
 */
function ɵɵdefineInjector(options) {
    return {
        factory: options.factory, providers: options.providers || [], imports: options.imports || [],
    };
}
/**
 * Read the injectable def (`ɵprov`) for `type` in a way which is immune to accidentally reading
 * inherited value.
 *
 * @param type A type which may have its own (non-inherited) `ɵprov`.
 */
function getInjectableDef(type) {
    return getOwnDefinition(type, type[NG_PROV_DEF]) ||
        getOwnDefinition(type, type[NG_INJECTABLE_DEF]);
}
/**
 * Return `def` only if it is defined directly on `type` and is not inherited from a base
 * class of `type`.
 *
 * The function `Object.hasOwnProperty` is not sufficient to distinguish this case because in older
 * browsers (e.g. IE10) static property inheritance is implemented by copying the properties.
 *
 * Instead, the definition's `token` is compared to the `type`, and if they don't match then the
 * property was not defined directly on the type itself, and was likely inherited. The definition
 * is only returned if the `type` matches the `def.token`.
 */
function getOwnDefinition(type, def) {
    return def && def.token === type ? def : null;
}
/**
 * Read the injectable def (`ɵprov`) for `type` or read the `ɵprov` from one of its ancestors.
 *
 * @param type A type which may have `ɵprov`, via inheritance.
 *
 * @deprecated Will be removed in v10, where an error will occur in the scenario if we find the
 * `ɵprov` on an ancestor only.
 */
function getInheritedInjectableDef(type) {
    // See `jit/injectable.ts#compileInjectable` for context on NG_PROV_DEF_FALLBACK.
    const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF] ||
        (type[NG_PROV_DEF_FALLBACK] && type[NG_PROV_DEF_FALLBACK]()));
    if (def) {
        const typeName = getTypeName(type);
        // TODO(FW-1307): Re-add ngDevMode when closure can handle it
        // ngDevMode &&
        console.warn(`DEPRECATED: DI is instantiating a token "${typeName}" that inherits its @Injectable decorator but does not provide one itself.\n` +
            `This will become an error in v10. Please add @Injectable() to the "${typeName}" class.`);
        return def;
    }
    else {
        return null;
    }
}
/** Gets the name of a type, accounting for some cross-browser differences. */
function getTypeName(type) {
    // `Function.prototype.name` behaves differently between IE and other browsers. In most browsers
    // it'll always return the name of the function itself, no matter how many other functions it
    // inherits from. On IE the function doesn't have its own `name` property, but it takes it from
    // the lowest level in the prototype chain. E.g. if we have `class Foo extends Parent` most
    // browsers will evaluate `Foo.name` to `Foo` while IE will return `Parent`. We work around
    // the issue by converting the function to a string and parsing its name out that way via a regex.
    if (type.hasOwnProperty('name')) {
        return type.name;
    }
    const match = ('' + type).match(/^function\s*([^\s(]+)/);
    return match === null ? '' : match[1];
}
/**
 * Read the injector def type in a way which is immune to accidentally reading inherited value.
 *
 * @param type type which may have an injector def (`ɵinj`)
 */
function getInjectorDef(type) {
    return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ?
        type[NG_INJ_DEF] :
        null;
}
const NG_PROV_DEF = getClosureSafeProperty({ ɵprov: getClosureSafeProperty });
const NG_INJ_DEF = getClosureSafeProperty({ ɵinj: getClosureSafeProperty });
// On IE10 properties defined via `defineProperty` won't be inherited by child classes,
// which will break inheriting the injectable definition from a grandparent through an
// undecorated parent class. We work around it by defining a fallback method which will be
// used to retrieve the definition. This should only be a problem in JIT mode, because in
// AOT TypeScript seems to have a workaround for static properties. When inheriting from an
// undecorated parent is no longer supported in v10, this can safely be removed.
const NG_PROV_DEF_FALLBACK = getClosureSafeProperty({ ɵprovFallback: getClosureSafeProperty });
// We need to keep these around so we can read off old defs if new defs are unavailable
const NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });
const NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function stringify(token) {
    if (typeof token === 'string') {
        return token;
    }
    if (Array.isArray(token)) {
        return '[' + token.map(stringify).join(', ') + ']';
    }
    if (token == null) {
        return '' + token;
    }
    if (token.overriddenName) {
        return `${token.overriddenName}`;
    }
    if (token.name) {
        return `${token.name}`;
    }
    const res = token.toString();
    if (res == null) {
        return '' + res;
    }
    const newLineIndex = res.indexOf('\n');
    return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
/**
 * Concatenates two strings with separator, allocating new strings only when necessary.
 *
 * @param before before string.
 * @param separator separator string.
 * @param after after string.
 * @returns concatenated string.
 */
function concatStringsWithSpace(before, after) {
    return (before == null || before === '') ?
        (after === null ? '' : after) :
        ((after == null || after === '') ? before : before + ' ' + after);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/forward_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An interface that a function passed into {\@link forwardRef} has to implement.
 *
 * \@usageNotes
 * ### Example
 *
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref_fn'}
 * \@publicApi
 * @record
 */
function ForwardRefFn() { }
/** @type {?} */
const __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });
/**
 * Allows to refer to references which are not yet defined.
 *
 * For instance, `forwardRef` is used when the `token` which we need to refer to for the purposes of
 * DI is declared, but not yet defined. It is also used when the `token` which we use when creating
 * a query is not yet defined.
 *
 * \@usageNotes
 * ### Example
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='forward_ref'}
 * \@publicApi
 * @param {?} forwardRefFn
 * @return {?}
 */
function forwardRef(forwardRefFn) {
    ((/** @type {?} */ (forwardRefFn))).__forward_ref__ = forwardRef;
    ((/** @type {?} */ (forwardRefFn))).toString = (/**
     * @return {?}
     */
    function () { return stringify(this()); });
    return ((/** @type {?} */ ((/** @type {?} */ (forwardRefFn)))));
}
/**
 * Lazily retrieves the reference value from a forwardRef.
 *
 * Acts as the identity function when given a non-forward-ref value.
 *
 * \@usageNotes
 * ### Example
 *
 * {\@example core/di/ts/forward_ref/forward_ref_spec.ts region='resolve_forward_ref'}
 *
 * @see `forwardRef`
 * \@publicApi
 * @template T
 * @param {?} type
 * @return {?}
 */
function resolveForwardRef(type) {
    return isForwardRef(type) ? type() : type;
}
/**
 * Checks whether a function is wrapped by a `forwardRef`.
 * @param {?} fn
 * @return {?}
 */
function isForwardRef(fn) {
    return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&
        fn.__forward_ref__ === forwardRef;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const __globalThis = typeof globalThis !== 'undefined' && globalThis;
const __window = typeof window !== 'undefined' && window;
const __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&
    self instanceof WorkerGlobalScope && self;
const __global = typeof global !== 'undefined' && global;
// Always use __globalThis if available, which is the spec-defined global variable across all
// environments, then fallback to __global first, because in Node tests both __global and
// __window may be defined and _global should be __global in that case.
const _global = __globalThis || __global || __window || __self;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
var R3ResolvedDependencyType;
(function (R3ResolvedDependencyType) {
    R3ResolvedDependencyType[R3ResolvedDependencyType["Token"] = 0] = "Token";
    R3ResolvedDependencyType[R3ResolvedDependencyType["Attribute"] = 1] = "Attribute";
    R3ResolvedDependencyType[R3ResolvedDependencyType["ChangeDetectorRef"] = 2] = "ChangeDetectorRef";
    R3ResolvedDependencyType[R3ResolvedDependencyType["Invalid"] = 3] = "Invalid";
})(R3ResolvedDependencyType || (R3ResolvedDependencyType = {}));
var R3FactoryTarget;
(function (R3FactoryTarget) {
    R3FactoryTarget[R3FactoryTarget["Directive"] = 0] = "Directive";
    R3FactoryTarget[R3FactoryTarget["Component"] = 1] = "Component";
    R3FactoryTarget[R3FactoryTarget["Injectable"] = 2] = "Injectable";
    R3FactoryTarget[R3FactoryTarget["Pipe"] = 3] = "Pipe";
    R3FactoryTarget[R3FactoryTarget["NgModule"] = 4] = "NgModule";
})(R3FactoryTarget || (R3FactoryTarget = {}));
var ViewEncapsulation;
(function (ViewEncapsulation) {
    ViewEncapsulation[ViewEncapsulation["Emulated"] = 0] = "Emulated";
    ViewEncapsulation[ViewEncapsulation["Native"] = 1] = "Native";
    ViewEncapsulation[ViewEncapsulation["None"] = 2] = "None";
    ViewEncapsulation[ViewEncapsulation["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation || (ViewEncapsulation = {}));

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function getCompilerFacade() {
    const globalNg = _global['ng'];
    if (!globalNg || !globalNg.ɵcompilerFacade) {
        throw new Error(`Angular JIT compilation failed: '@angular/compiler' not loaded!\n` +
            `  - JIT compilation is discouraged for production use-cases! Consider AOT mode instead.\n` +
            `  - Did you bootstrap using '@angular/platform-browser-dynamic' or '@angular/platform-server'?\n` +
            `  - Alternatively provide the compiler with 'import "@angular/compiler";' before bootstrapping.`);
    }
    return globalNg.ɵcompilerFacade;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/fields.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NG_COMP_DEF = getClosureSafeProperty({ ɵcmp: getClosureSafeProperty });
/** @type {?} */
const NG_DIR_DEF = getClosureSafeProperty({ ɵdir: getClosureSafeProperty });
/** @type {?} */
const NG_PIPE_DEF = getClosureSafeProperty({ ɵpipe: getClosureSafeProperty });
/** @type {?} */
const NG_MOD_DEF = getClosureSafeProperty({ ɵmod: getClosureSafeProperty });
/** @type {?} */
const NG_LOC_ID_DEF = getClosureSafeProperty({ ɵloc: getClosureSafeProperty });
/** @type {?} */
const NG_FACTORY_DEF = getClosureSafeProperty({ ɵfac: getClosureSafeProperty });
// TODO(misko): This is wrong. The NG_ELEMENT_ID should never be minified.
/**
 * If a directive is diPublic, bloomAdd sets a property on the type with this constant as
 * the key and the directive's unique ID as the value. This allows us to map directives to their
 * bloom filter bit for DI.
 * @type {?}
 */
const NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function ngDevModeResetPerfCounters() {
    const locationString = typeof location !== 'undefined' ? location.toString() : '';
    const newCounters = {
        namedConstructors: locationString.indexOf('ngDevMode=namedConstructors') != -1,
        firstCreatePass: 0,
        tNode: 0,
        tView: 0,
        rendererCreateTextNode: 0,
        rendererSetText: 0,
        rendererCreateElement: 0,
        rendererAddEventListener: 0,
        rendererSetAttribute: 0,
        rendererRemoveAttribute: 0,
        rendererSetProperty: 0,
        rendererSetClassName: 0,
        rendererAddClass: 0,
        rendererRemoveClass: 0,
        rendererSetStyle: 0,
        rendererRemoveStyle: 0,
        rendererDestroy: 0,
        rendererDestroyNode: 0,
        rendererMoveNode: 0,
        rendererRemoveNode: 0,
        rendererAppendChild: 0,
        rendererInsertBefore: 0,
        rendererCreateComment: 0,
    };
    // Make sure to refer to ngDevMode as ['ngDevMode'] for closure.
    const allowNgDevModeTrue = locationString.indexOf('ngDevMode=false') === -1;
    _global['ngDevMode'] = allowNgDevModeTrue && newCounters;
    return newCounters;
}
/**
 * This function checks to see if the `ngDevMode` has been set. If yes,
 * then we honor it, otherwise we default to dev mode with additional checks.
 *
 * The idea is that unless we are doing production build where we explicitly
 * set `ngDevMode == false` we should be helping the developer by providing
 * as much early warning and errors as possible.
 *
 * `ɵɵdefineComponent` is guaranteed to have been called before any component template functions
 * (and thus Ivy instructions), so a single initialization there is sufficient to ensure ngDevMode
 * is defined for the entire instruction set.
 *
 * When using checking `ngDevMode` on toplevel, always init it before referencing it
 * (e.g. `((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode())`), otherwise you can
 *  get a `ReferenceError` like in https://github.com/angular/angular/issues/31595.
 *
 * Details on possible values for `ngDevMode` can be found on its docstring.
 *
 * NOTE:
 * - changes to the `ngDevMode` name must be synced with `compiler-cli/src/tooling.ts`.
 */
function initNgDevMode() {
    // The below checks are to ensure that calling `initNgDevMode` multiple times does not
    // reset the counters.
    // If the `ngDevMode` is not an object, then it means we have not created the perf counters
    // yet.
    if (typeof ngDevMode === 'undefined' || ngDevMode) {
        if (typeof ngDevMode !== 'object') {
            ngDevModeResetPerfCounters();
        }
        return !!ngDevMode;
    }
    return false;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/injection_token.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Creates a token that can be used in a DI Provider.
 *
 * Use an `InjectionToken` whenever the type you are injecting is not reified (does not have a
 * runtime representation) such as when injecting an interface, callable type, array or
 * parameterized type.
 *
 * `InjectionToken` is parameterized on `T` which is the type of object which will be returned by
 * the `Injector`. This provides additional level of type safety.
 *
 * ```
 * interface MyInterface {...}
 * var myInterface = injector.get(new InjectionToken<MyInterface>('SomeToken'));
 * // myInterface is inferred to be MyInterface.
 * ```
 *
 * When creating an `InjectionToken`, you can optionally specify a factory function which returns
 * (possibly by creating) a default value of the parameterized type `T`. This sets up the
 * `InjectionToken` using this factory as a provider as if it was defined explicitly in the
 * application's root injector. If the factory function, which takes zero arguments, needs to inject
 * dependencies, it can do so using the `inject` function. See below for an example.
 *
 * Additionally, if a `factory` is specified you can also specify the `providedIn` option, which
 * overrides the above behavior and marks the token as belonging to a particular `\@NgModule`. As
 * mentioned above, `'root'` is the default value for `providedIn`.
 *
 * \@usageNotes
 * ### Basic Example
 *
 * ### Plain InjectionToken
 *
 * {\@example core/di/ts/injector_spec.ts region='InjectionToken'}
 *
 * ### Tree-shakable InjectionToken
 *
 * {\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
 *
 *
 * \@publicApi
 * @template T
 */
class InjectionToken {
    /**
     * @param {?} _desc
     * @param {?=} options
     */
    constructor(_desc, options) {
        this._desc = _desc;
        /**
         * \@internal
         */
        this.ngMetadataName = 'InjectionToken';
        /** @nocollapse */ this.ɵprov = undefined;
        if (typeof options == 'number') {
            // This is a special hack to assign __NG_ELEMENT_ID__ to this instance.
            // __NG_ELEMENT_ID__ is Used by Ivy to determine bloom filter id.
            // We are using it to assign `-1` which is used to identify `Injector`.
            ((/** @type {?} */ (this))).__NG_ELEMENT_ID__ = options;
        }
        else if (options !== undefined) {
            /** @nocollapse */ this.ɵprov = ɵɵdefineInjectable({
                token: this,
                providedIn: options.providedIn || 'root',
                factory: options.factory,
            });
        }
    }
    /**
     * @return {?}
     */
    toString() { return `InjectionToken ${this._desc}`; }
}
if (false) {}
/**
 * @record
 * @template T
 */
function InjectableDefToken() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/injector_compatibility.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An InjectionToken that gets the current `Injector` for `createInjector()`-style injectors.
 *
 * Requesting this token instead of `Injector` allows `StaticInjector` to be tree-shaken from a
 * project.
 *
 * \@publicApi
 * @type {?}
 */
const INJECTOR = new InjectionToken('INJECTOR', (/** @type {?} */ (-1)));
/** @type {?} */
const _THROW_IF_NOT_FOUND = {};
/** @type {?} */
const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
/** @type {?} */
const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';
/** @type {?} */
const NG_TOKEN_PATH = 'ngTokenPath';
/** @type {?} */
const NEW_LINE = /\n/gm;
/** @type {?} */
const NO_NEW_LINE = 'ɵ';
/** @type {?} */
const SOURCE = '__source';
const ɵ0$1 = getClosureSafeProperty;
/** @type {?} */
const USE_VALUE = getClosureSafeProperty({ provide: String, useValue: ɵ0$1 });
/**
 * Current injector value used by `inject`.
 * - `undefined`: it is an error to call `inject`
 * - `null`: `inject` can be called but there is no injector (limp-mode).
 * - Injector instance: Use the injector for resolution.
 * @type {?}
 */
let _currentInjector = undefined;
/**
 * @param {?} injector
 * @return {?}
 */
function setCurrentInjector(injector) {
    /** @type {?} */
    const former = _currentInjector;
    _currentInjector = injector;
    return former;
}
/**
 * Current implementation of inject.
 *
 * By default, it is `injectInjectorOnly`, which makes it `Injector`-only aware. It can be changed
 * to `directiveInject`, which brings in the `NodeInjector` system of ivy. It is designed this
 * way for two reasons:
 *  1. `Injector` should not depend on ivy logic.
 *  2. To maintain tree shake-ability we don't want to bring in unnecessary code.
 * @type {?}
 */
let _injectImplementation;
/**
 * Sets the current inject implementation.
 * @param {?} impl
 * @return {?}
 */
function setInjectImplementation(impl) {
    /** @type {?} */
    const previous = _injectImplementation;
    _injectImplementation = impl;
    return previous;
}
/**
 * @template T
 * @param {?} token
 * @param {?=} flags
 * @return {?}
 */
function injectInjectorOnly(token, flags = InjectFlags.Default) {
    if (_currentInjector === undefined) {
        throw new Error(`inject() must be called from an injection context`);
    }
    else if (_currentInjector === null) {
        return injectRootLimpMode(token, undefined, flags);
    }
    else {
        return _currentInjector.get(token, flags & InjectFlags.Optional ? null : undefined, flags);
    }
}
/**
 * @template T
 * @param {?} token
 * @param {?=} flags
 * @return {?}
 */
function ɵɵinject(token, flags = InjectFlags.Default) {
    return (_injectImplementation || injectInjectorOnly)(resolveForwardRef(token), flags);
}
/**
 * Throws an error indicating that a factory function could not be generated by the compiler for a
 * particular class.
 *
 * This instruction allows the actual error message to be optimized away when ngDevMode is turned
 * off, saving bytes of generated code while still providing a good experience in dev mode.
 *
 * The name of the class is not mentioned here, but will be in the generated factory function name
 * and thus in the stack trace.
 *
 * \@codeGenApi
 * @param {?} index
 * @return {?}
 */
function ɵɵinvalidFactoryDep(index) {
    /** @type {?} */
    const msg = ngDevMode ?
        `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.
This can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.

Please check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.` :
        'invalid';
    throw new Error(msg);
}
/**
 * Injects a token from the currently active injector.
 *
 * Must be used in the context of a factory function such as one defined for an
 * `InjectionToken`. Throws an error if not called from such a context.
 *
 * Within such a factory function, using this function to request injection of a dependency
 * is faster and more type-safe than providing an additional array of dependencies
 * (as has been common with `useFactory` providers).
 *
 * \@param token The injection token for the dependency to be injected.
 * \@param flags Optional flags that control how injection is executed.
 * The flags correspond to injection strategies that can be specified with
 * parameter decorators `\@Host`, `\@Self`, `\@SkipSef`, and `\@Optional`.
 * \@return True if injection is successful, null otherwise.
 *
 * \@usageNotes
 *
 * ### Example
 *
 * {\@example core/di/ts/injector_spec.ts region='ShakableInjectionToken'}
 *
 * \@publicApi
 * @type {?}
 */
const inject = ɵɵinject;
/**
 * Injects `root` tokens in limp mode.
 *
 * If no injector exists, we can still inject tree-shakable providers which have `providedIn` set to
 * `"root"`. This is known as the limp mode injection. In such case the value is stored in the
 * `InjectableDef`.
 * @template T
 * @param {?} token
 * @param {?} notFoundValue
 * @param {?} flags
 * @return {?}
 */
function injectRootLimpMode(token, notFoundValue, flags) {
    /** @type {?} */
    const injectableDef = getInjectableDef(token);
    if (injectableDef && injectableDef.providedIn == 'root') {
        return injectableDef.value === undefined ? injectableDef.value = injectableDef.factory() :
            injectableDef.value;
    }
    if (flags & InjectFlags.Optional)
        return null;
    if (notFoundValue !== undefined)
        return notFoundValue;
    throw new Error(`Injector: NOT_FOUND [${stringify(token)}]`);
}
/**
 * @param {?} types
 * @return {?}
 */
function injectArgs(types) {
    /** @type {?} */
    const args = [];
    for (let i = 0; i < types.length; i++) {
        /** @type {?} */
        const arg = resolveForwardRef(types[i]);
        if (Array.isArray(arg)) {
            if (arg.length === 0) {
                throw new Error('Arguments array must have arguments.');
            }
            /** @type {?} */
            let type = undefined;
            /** @type {?} */
            let flags = InjectFlags.Default;
            for (let j = 0; j < arg.length; j++) {
                /** @type {?} */
                const meta = arg[j];
                if (meta instanceof Optional || meta.ngMetadataName === 'Optional' || meta === Optional) {
                    flags |= InjectFlags.Optional;
                }
                else if (meta instanceof SkipSelf || meta.ngMetadataName === 'SkipSelf' || meta === SkipSelf) {
                    flags |= InjectFlags.SkipSelf;
                }
                else if (meta instanceof Self || meta.ngMetadataName === 'Self' || meta === Self) {
                    flags |= InjectFlags.Self;
                }
                else if (meta instanceof Inject || meta === Inject) {
                    type = meta.token;
                }
                else {
                    type = meta;
                }
            }
            args.push(ɵɵinject((/** @type {?} */ (type)), flags));
        }
        else {
            args.push(ɵɵinject(arg));
        }
    }
    return args;
}
class NullInjector {
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    get(token, notFoundValue = THROW_IF_NOT_FOUND) {
        if (notFoundValue === THROW_IF_NOT_FOUND) {
            // Intentionally left behind: With dev tools open the debugger will stop here. There is no
            // reason why correctly written application should cause this exception.
            // TODO(misko): uncomment the next line once `ngDevMode` works with closure.
            // if (ngDevMode) debugger;
            /** @type {?} */
            const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);
            error.name = 'NullInjectorError';
            throw error;
        }
        return notFoundValue;
    }
}
/**
 * @param {?} e
 * @param {?} token
 * @param {?} injectorErrorName
 * @param {?} source
 * @return {?}
 */
function catchInjectorError(e, token, injectorErrorName, source) {
    /** @type {?} */
    const tokenPath = e[NG_TEMP_TOKEN_PATH];
    if (token[SOURCE]) {
        tokenPath.unshift(token[SOURCE]);
    }
    e.message = formatError('\n' + e.message, tokenPath, injectorErrorName, source);
    e[NG_TOKEN_PATH] = tokenPath;
    e[NG_TEMP_TOKEN_PATH] = null;
    throw e;
}
/**
 * @param {?} text
 * @param {?} obj
 * @param {?} injectorErrorName
 * @param {?=} source
 * @return {?}
 */
function formatError(text, obj, injectorErrorName, source = null) {
    text = text && text.charAt(0) === '\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;
    /** @type {?} */
    let context = stringify(obj);
    if (Array.isArray(obj)) {
        context = obj.map(stringify).join(' -> ');
    }
    else if (typeof obj === 'object') {
        /** @type {?} */
        let parts = (/** @type {?} */ ([]));
        for (let key in obj) {
            if (obj.hasOwnProperty(key)) {
                /** @type {?} */
                let value = obj[key];
                parts.push(key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));
            }
        }
        context = `{${parts.join(', ')}}`;
    }
    return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${text.replace(NEW_LINE, '\n  ')}`;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/jit/environment.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A mapping of the \@angular/core API surface used in generated expressions to the actual symbols.
 *
 * This should be kept up to date with the public exports of \@angular/core.
 * @type {?}
 */
const angularCoreDiEnv = {
    'ɵɵdefineInjectable': ɵɵdefineInjectable,
    'ɵɵdefineInjector': ɵɵdefineInjector,
    'ɵɵinject': ɵɵinject,
    'ɵɵgetFactoryOf': getFactoryOf,
    'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,
};
/**
 * @template T
 * @param {?} type
 * @return {?}
 */
function getFactoryOf(type) {
    /** @type {?} */
    const typeAny = (/** @type {?} */ (type));
    if (isForwardRef(type)) {
        return (/** @type {?} */ (((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const factory = getFactoryOf(resolveForwardRef(typeAny));
            return factory ? factory() : null;
        }))));
    }
    /** @type {?} */
    const def = getInjectableDef(typeAny) || getInjectorDef(typeAny);
    if (!def || def.factory === undefined) {
        return null;
    }
    return def.factory;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/ng_module_factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents an instance of an NgModule created via a {\@link NgModuleFactory}.
 *
 * `NgModuleRef` provides access to the NgModule Instance as well other objects related to this
 * NgModule Instance.
 *
 * \@publicApi
 * @abstract
 * @template T
 */
class NgModuleRef {
}
if (false) {}
/**
 * @record
 * @template T
 */
function InternalNgModuleRef() { }
if (false) {}
/**
 * \@publicApi
 * @abstract
 * @template T
 */
class NgModuleFactory {
}
if (false) {}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function assertNumber(actual, msg) {
    if (!(typeof actual === 'number')) {
        throwError(msg, typeof actual, 'number', '===');
    }
}
function assertNumberInRange(actual, minInclusive, maxInclusive) {
    assertNumber(actual, 'Expected a number');
    assertLessThanOrEqual(actual, maxInclusive, 'Expected number to be less than or equal to');
    assertGreaterThanOrEqual(actual, minInclusive, 'Expected number to be greater than or equal to');
}
function assertString(actual, msg) {
    if (!(typeof actual === 'string')) {
        throwError(msg, actual === null ? 'null' : typeof actual, 'string', '===');
    }
}
function assertEqual(actual, expected, msg) {
    if (!(actual == expected)) {
        throwError(msg, actual, expected, '==');
    }
}
function assertNotEqual(actual, expected, msg) {
    if (!(actual != expected)) {
        throwError(msg, actual, expected, '!=');
    }
}
function assertSame(actual, expected, msg) {
    if (!(actual === expected)) {
        throwError(msg, actual, expected, '===');
    }
}
function assertNotSame(actual, expected, msg) {
    if (!(actual !== expected)) {
        throwError(msg, actual, expected, '!==');
    }
}
function assertLessThan(actual, expected, msg) {
    if (!(actual < expected)) {
        throwError(msg, actual, expected, '<');
    }
}
function assertLessThanOrEqual(actual, expected, msg) {
    if (!(actual <= expected)) {
        throwError(msg, actual, expected, '<=');
    }
}
function assertGreaterThan(actual, expected, msg) {
    if (!(actual > expected)) {
        throwError(msg, actual, expected, '>');
    }
}
function assertGreaterThanOrEqual(actual, expected, msg) {
    if (!(actual >= expected)) {
        throwError(msg, actual, expected, '>=');
    }
}
function assertNotDefined(actual, msg) {
    if (actual != null) {
        throwError(msg, actual, null, '==');
    }
}
function assertDefined(actual, msg) {
    if (actual == null) {
        throwError(msg, actual, null, '!=');
    }
}
function throwError(msg, actual, expected, comparison) {
    throw new Error(`ASSERTION ERROR: ${msg}` +
        (comparison == null ? '' : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));
}
function assertDomNode(node) {
    // If we're in a worker, `Node` will not be defined.
    assertEqual((typeof Node !== 'undefined' && node instanceof Node) ||
        (typeof node === 'object' && node != null &&
            node.constructor.name === 'WebWorkerRenderNode'), true, `The provided value must be an instance of a DOM Node but got ${stringify(node)}`);
}
function assertDataInRange(arr, index) {
    const maxLen = arr ? arr.length : 0;
    assertLessThan(index, maxLen, `Index expected to be less than ${maxLen} but got ${index}`);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
* Equivalent to ES6 spread, add each item to an array.
*
* @param items The items to add
* @param arr The array to which you want to add the items
*/
function addAllToArray(items, arr) {
    for (let i = 0; i < items.length; i++) {
        arr.push(items[i]);
    }
}
/**
 * Flattens an array.
 */
function flatten(list, dst) {
    if (dst === undefined)
        dst = list;
    for (let i = 0; i < list.length; i++) {
        let item = list[i];
        if (Array.isArray(item)) {
            // we need to inline it.
            if (dst === list) {
                // Our assumption that the list was already flat was wrong and
                // we need to clone flat since we need to write to it.
                dst = list.slice(0, i);
            }
            flatten(item, dst);
        }
        else if (dst !== list) {
            dst.push(item);
        }
    }
    return dst;
}
function deepForEach(input, fn) {
    input.forEach(value => Array.isArray(value) ? deepForEach(value, fn) : fn(value));
}
function addToArray(arr, index, value) {
    // perf: array.push is faster than array.splice!
    if (index >= arr.length) {
        arr.push(value);
    }
    else {
        arr.splice(index, 0, value);
    }
}
function removeFromArray(arr, index) {
    // perf: array.pop is faster than array.splice!
    if (index >= arr.length - 1) {
        return arr.pop();
    }
    else {
        return arr.splice(index, 1)[0];
    }
}
function newArray(size, value) {
    const list = [];
    for (let i = 0; i < size; i++) {
        list.push(value);
    }
    return list;
}
/**
 * Remove item from array (Same as `Array.splice()` but faster.)
 *
 * `Array.splice()` is not as fast because it has to allocate an array for the elements which were
 * removed. This causes memory pressure and slows down code when most of the time we don't
 * care about the deleted items array.
 *
 * https://jsperf.com/fast-array-splice (About 20x faster)
 *
 * @param array Array to splice
 * @param index Index of element in array to remove.
 * @param count Number of items to remove.
 */
function arraySplice(array, index, count) {
    const length = array.length - count;
    while (index < length) {
        array[index] = array[index + count];
        index++;
    }
    while (count--) {
        array.pop(); // shrink the array
    }
}
/**
 * Same as `Array.splice(index, 0, value)` but faster.
 *
 * `Array.splice()` is not fast because it has to allocate an array for the elements which were
 * removed. This causes memory pressure and slows down code when most of the time we don't
 * care about the deleted items array.
 *
 * @param array Array to splice.
 * @param index Index in array where the `value` should be added.
 * @param value Value to add to array.
 */
function arrayInsert(array, index, value) {
    ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
    let end = array.length;
    while (end > index) {
        const previousEnd = end - 1;
        array[end] = array[previousEnd];
        end = previousEnd;
    }
    array[index] = value;
}
/**
 * Same as `Array.splice2(index, 0, value1, value2)` but faster.
 *
 * `Array.splice()` is not fast because it has to allocate an array for the elements which were
 * removed. This causes memory pressure and slows down code when most of the time we don't
 * care about the deleted items array.
 *
 * @param array Array to splice.
 * @param index Index in array where the `value` should be added.
 * @param value1 Value to add to array.
 * @param value2 Value to add to array.
 */
function arrayInsert2(array, index, value1, value2) {
    ngDevMode && assertLessThanOrEqual(index, array.length, 'Can\'t insert past array end.');
    let end = array.length;
    if (end == index) {
        // inserting at the end.
        array.push(value1, value2);
    }
    else if (end === 1) {
        // corner case when we have less items in array than we have items to insert.
        array.push(value2, array[0]);
        array[0] = value1;
    }
    else {
        end--;
        array.push(array[end - 1], array[end]);
        while (end > index) {
            const previousEnd = end - 2;
            array[end] = array[previousEnd];
            end--;
        }
        array[index] = value1;
        array[index + 1] = value2;
    }
}
/**
 * Insert a `value` into an `array` so that the array remains sorted.
 *
 * NOTE:
 * - Duplicates are not allowed, and are ignored.
 * - This uses binary search algorithm for fast inserts.
 *
 * @param array A sorted array to insert into.
 * @param value The value to insert.
 * @returns index of the inserted value.
 */
function arrayInsertSorted(array, value) {
    let index = arrayIndexOfSorted(array, value);
    if (index < 0) {
        // if we did not find it insert it.
        index = ~index;
        arrayInsert(array, index, value);
    }
    return index;
}
/**
 * Remove `value` from a sorted `array`.
 *
 * NOTE:
 * - This uses binary search algorithm for fast removals.
 *
 * @param array A sorted array to remove from.
 * @param value The value to remove.
 * @returns index of the removed value.
 *   - positive index if value found and removed.
 *   - negative index if value not found. (`~index` to get the value where it should have been
 *     inserted)
 */
function arrayRemoveSorted(array, value) {
    const index = arrayIndexOfSorted(array, value);
    if (index >= 0) {
        arraySplice(array, index, 1);
    }
    return index;
}
/**
 * Get an index of an `value` in a sorted `array`.
 *
 * NOTE:
 * - This uses binary search algorithm for fast removals.
 *
 * @param array A sorted array to binary search.
 * @param value The value to look for.
 * @returns index of the value.
 *   - positive index if value found.
 *   - negative index if value not found. (`~index` to get the value where it should have been
 *     located)
 */
function arrayIndexOfSorted(array, value) {
    return _arrayIndexOfSorted(array, value, 0);
}
/**
 * Set a `value` for a `key`.
 *
 * @param keyValueArray to modify.
 * @param key The key to locate or create.
 * @param value The value to set for a `key`.
 * @returns index (always even) of where the value vas set.
 */
function keyValueArraySet(keyValueArray, key, value) {
    let index = keyValueArrayIndexOf(keyValueArray, key);
    if (index >= 0) {
        // if we found it set it.
        keyValueArray[index | 1] = value;
    }
    else {
        index = ~index;
        arrayInsert2(keyValueArray, index, key, value);
    }
    return index;
}
/**
 * Retrieve a `value` for a `key` (on `undefined` if not found.)
 *
 * @param keyValueArray to search.
 * @param key The key to locate.
 * @return The `value` stored at the `key` location or `undefined if not found.
 */
function keyValueArrayGet(keyValueArray, key) {
    const index = keyValueArrayIndexOf(keyValueArray, key);
    if (index >= 0) {
        // if we found it retrieve it.
        return keyValueArray[index | 1];
    }
    return undefined;
}
/**
 * Retrieve a `key` index value in the array or `-1` if not found.
 *
 * @param keyValueArray to search.
 * @param key The key to locate.
 * @returns index of where the key is (or should have been.)
 *   - positive (even) index if key found.
 *   - negative index if key not found. (`~index` (even) to get the index where it should have
 *     been inserted.)
 */
function keyValueArrayIndexOf(keyValueArray, key) {
    return _arrayIndexOfSorted(keyValueArray, key, 1);
}
/**
 * Delete a `key` (and `value`) from the `KeyValueArray`.
 *
 * @param keyValueArray to modify.
 * @param key The key to locate or delete (if exist).
 * @returns index of where the key was (or should have been.)
 *   - positive (even) index if key found and deleted.
 *   - negative index if key not found. (`~index` (even) to get the index where it should have
 *     been.)
 */
function keyValueArrayDelete(keyValueArray, key) {
    const index = keyValueArrayIndexOf(keyValueArray, key);
    if (index >= 0) {
        // if we found it remove it.
        arraySplice(keyValueArray, index, 2);
    }
    return index;
}
/**
 * INTERNAL: Get an index of an `value` in a sorted `array` by grouping search by `shift`.
 *
 * NOTE:
 * - This uses binary search algorithm for fast removals.
 *
 * @param array A sorted array to binary search.
 * @param value The value to look for.
 * @param shift grouping shift.
 *   - `0` means look at every location
 *   - `1` means only look at every other (even) location (the odd locations are to be ignored as
 *         they are values.)
 * @returns index of the value.
 *   - positive index if value found.
 *   - negative index if value not found. (`~index` to get the value where it should have been
 * inserted)
 */
function _arrayIndexOfSorted(array, value, shift) {
    ngDevMode && assertEqual(Array.isArray(array), true, 'Expecting an array');
    let start = 0;
    let end = array.length >> shift;
    while (end !== start) {
        const middle = start + ((end - start) >> 1); // find the middle.
        const current = array[middle << shift];
        if (value === current) {
            return (middle << shift);
        }
        else if (current > value) {
            end = middle;
        }
        else {
            start = middle + 1; // We already searched middle so make it non-inclusive by adding 1
        }
    }
    return ~(end << shift);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/change_detection/constants.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
const ChangeDetectionStrategy = {
    /**
     * Use the `CheckOnce` strategy, meaning that automatic change detection is deactivated
     * until reactivated by setting the strategy to `Default` (`CheckAlways`).
     * Change detection can still be explicitly invoked.
     * This strategy applies to all child directives and cannot be overridden.
     */
    OnPush: 0,
    /**
     * Use the default `CheckAlways` strategy, in which change detection is automatic until
     * explicitly deactivated.
     */
    Default: 1,
};
ChangeDetectionStrategy[ChangeDetectionStrategy.OnPush] = 'OnPush';
ChangeDetectionStrategy[ChangeDetectionStrategy.Default] = 'Default';
/** @enum {number} */
const ChangeDetectorStatus = {
    /**
     * A state in which, after calling `detectChanges()`, the change detector
     * state becomes `Checked`, and must be explicitly invoked or reactivated.
     */
    CheckOnce: 0,
    /**
     * A state in which change detection is skipped until the change detector mode
     * becomes `CheckOnce`.
     */
    Checked: 1,
    /**
     * A state in which change detection continues automatically until explicitly
     * deactivated.
     */
    CheckAlways: 2,
    /**
     * A state in which a change detector sub tree is not a part of the main tree and
     * should be skipped.
     */
    Detached: 3,
    /**
     * Indicates that the change detector encountered an error checking a binding
     * or calling a directive lifecycle method and is now in an inconsistent state. Change
     * detectors in this state do not detect changes.
     */
    Errored: 4,
    /**
     * Indicates that the change detector has been destroyed.
     */
    Destroyed: 5,
};
ChangeDetectorStatus[ChangeDetectorStatus.CheckOnce] = 'CheckOnce';
ChangeDetectorStatus[ChangeDetectorStatus.Checked] = 'Checked';
ChangeDetectorStatus[ChangeDetectorStatus.CheckAlways] = 'CheckAlways';
ChangeDetectorStatus[ChangeDetectorStatus.Detached] = 'Detached';
ChangeDetectorStatus[ChangeDetectorStatus.Errored] = 'Errored';
ChangeDetectorStatus[ChangeDetectorStatus.Destroyed] = 'Destroyed';
/**
 * Reports whether a given strategy is currently the default for change detection.
 * @see `ChangeDetectorStatus` / `ChangeDetectorRef`
 * @param {?} changeDetectionStrategy The strategy to check.
 * @return {?} True if the given strategy is the current default, false otherwise.
 */
function isDefaultChangeDetectionStrategy(changeDetectionStrategy) {
    return changeDetectionStrategy == null ||
        changeDetectionStrategy === ChangeDetectionStrategy.Default;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/metadata/view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
const ViewEncapsulation$1 = {
    /**
     * Emulate `Native` scoping of styles by adding an attribute containing surrogate id to the Host
     * Element and pre-processing the style rules provided via {@link Component#styles styles} or
     * {@link Component#styleUrls styleUrls}, and adding the new Host Element attribute to all
     * selectors.
     *
     * This is the default option.
     */
    Emulated: 0,
    /**
     * @deprecated v6.1.0 - use {ViewEncapsulation.ShadowDom} instead.
     * Use the native encapsulation mechanism of the renderer.
     *
     * For the DOM this means using the deprecated [Shadow DOM
     * v0](https://w3c.github.io/webcomponents/spec/shadow/) and
     * creating a ShadowRoot for Component's Host Element.
     */
    Native: 1,
    /**
     * Don't provide any template or style encapsulation.
     */
    None: 2,
    /**
     * Use Shadow DOM to encapsulate styles.
     *
     * For the DOM this means using modern [Shadow
     * DOM](https://w3c.github.io/webcomponents/spec/shadow/) and
     * creating a ShadowRoot for Component's Host Element.
     */
    ShadowDom: 3,
};
ViewEncapsulation$1[ViewEncapsulation$1.Emulated] = 'Emulated';
ViewEncapsulation$1[ViewEncapsulation$1.Native] = 'Native';
ViewEncapsulation$1[ViewEncapsulation$1.None] = 'None';
ViewEncapsulation$1[ViewEncapsulation$1.ShadowDom] = 'ShadowDom';

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/empty.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This file contains reuseable "empty" symbols that can be used as default return values
 * in different parts of the rendering code. Because the same symbols are returned, this
 * allows for identity checks against these values to be consistently used by the framework
 * code.
 * @type {?}
 */
const EMPTY_OBJ = {};
/** @type {?} */
const EMPTY_ARRAY = [];
// freezing the values prevents any code from accidentally inserting new values in
if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {
    // These property accesses can be ignored because ngDevMode will be set to false
    // when optimizing code and the whole if statement will be dropped.
    // tslint:disable-next-line:no-toplevel-property-access
    Object.freeze(EMPTY_OBJ);
    // tslint:disable-next-line:no-toplevel-property-access
    Object.freeze(EMPTY_ARRAY);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/definition.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let _renderCompCount = 0;
/**
 * Create a component definition object.
 *
 *
 * # Example
 * ```
 * class MyDirective {
 *   // Generated by Angular Template Compiler
 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
 *   static ɵcmp = defineComponent({
 *     ...
 *   });
 * }
 * ```
 * \@codeGenApi
 * @template T
 * @param {?} componentDefinition
 * @return {?}
 */
function ɵɵdefineComponent(componentDefinition) {
    return noSideEffects((/**
     * @return {?}
     */
    () => {
        // Initialize ngDevMode. This must be the first statement in ɵɵdefineComponent.
        // See the `initNgDevMode` docstring for more information.
        (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
        /** @type {?} */
        const type = componentDefinition.type;
        /** @type {?} */
        const typePrototype = type.prototype;
        /** @type {?} */
        const declaredInputs = (/** @type {?} */ ({}));
        /** @type {?} */
        const def = {
            type: type,
            providersResolver: null,
            decls: componentDefinition.decls,
            vars: componentDefinition.vars,
            factory: null,
            template: componentDefinition.template || (/** @type {?} */ (null)),
            consts: componentDefinition.consts || null,
            ngContentSelectors: componentDefinition.ngContentSelectors,
            hostBindings: componentDefinition.hostBindings || null,
            hostVars: componentDefinition.hostVars || 0,
            hostAttrs: componentDefinition.hostAttrs || null,
            contentQueries: componentDefinition.contentQueries || null,
            declaredInputs: declaredInputs,
            inputs: (/** @type {?} */ (null)),
            // assigned in noSideEffects
            outputs: (/** @type {?} */ (null)),
            // assigned in noSideEffects
            exportAs: componentDefinition.exportAs || null,
            onChanges: null,
            onInit: typePrototype.ngOnInit || null,
            doCheck: typePrototype.ngDoCheck || null,
            afterContentInit: typePrototype.ngAfterContentInit || null,
            afterContentChecked: typePrototype.ngAfterContentChecked || null,
            afterViewInit: typePrototype.ngAfterViewInit || null,
            afterViewChecked: typePrototype.ngAfterViewChecked || null,
            onDestroy: typePrototype.ngOnDestroy || null,
            onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
            directiveDefs: (/** @type {?} */ (null)),
            // assigned in noSideEffects
            pipeDefs: (/** @type {?} */ (null)),
            // assigned in noSideEffects
            selectors: componentDefinition.selectors || EMPTY_ARRAY,
            viewQuery: componentDefinition.viewQuery || null,
            features: (/** @type {?} */ (componentDefinition.features)) || null,
            data: componentDefinition.data || {},
            // TODO(misko): convert ViewEncapsulation into const enum so that it can be used directly in
            // the next line. Also `None` should be 0 not 2.
            encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,
            id: 'c',
            styles: componentDefinition.styles || EMPTY_ARRAY,
            _: (/** @type {?} */ (null)),
            setInput: null,
            schemas: componentDefinition.schemas || null,
            tView: null,
        };
        /** @type {?} */
        const directiveTypes = (/** @type {?} */ (componentDefinition.directives));
        /** @type {?} */
        const feature = componentDefinition.features;
        /** @type {?} */
        const pipeTypes = (/** @type {?} */ (componentDefinition.pipes));
        def.id += _renderCompCount++;
        def.inputs = invertObject(componentDefinition.inputs, declaredInputs),
            def.outputs = invertObject(componentDefinition.outputs),
            feature && feature.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            (fn) => fn(def)));
        def.directiveDefs = directiveTypes ?
            (/**
             * @return {?}
             */
            () => (typeof directiveTypes === 'function' ? directiveTypes() : directiveTypes)
                .map(extractDirectiveDef)) :
            null;
        def.pipeDefs = pipeTypes ?
            (/**
             * @return {?}
             */
            () => (typeof pipeTypes === 'function' ? pipeTypes() : pipeTypes).map(extractPipeDef)) :
            null;
        return (/** @type {?} */ (def));
    }));
}
/**
 * \@codeGenApi
 * @param {?} type
 * @param {?} directives
 * @param {?} pipes
 * @return {?}
 */
function ɵɵsetComponentScope(type, directives, pipes) {
    /** @type {?} */
    const def = ((/** @type {?} */ (type.ɵcmp)));
    def.directiveDefs = (/**
     * @return {?}
     */
    () => directives.map(extractDirectiveDef));
    def.pipeDefs = (/**
     * @return {?}
     */
    () => pipes.map(extractPipeDef));
}
/**
 * @param {?} type
 * @return {?}
 */
function extractDirectiveDef(type) {
    /** @type {?} */
    const def = getComponentDef(type) || getDirectiveDef(type);
    if (ngDevMode && !def) {
        throw new Error(`'${type.name}' is neither 'ComponentType' or 'DirectiveType'.`);
    }
    return (/** @type {?} */ (def));
}
/**
 * @param {?} type
 * @return {?}
 */
function extractPipeDef(type) {
    /** @type {?} */
    const def = getPipeDef(type);
    if (ngDevMode && !def) {
        throw new Error(`'${type.name}' is not a 'PipeType'.`);
    }
    return (/** @type {?} */ (def));
}
/** @type {?} */
const autoRegisterModuleById = {};
/**
 * \@codeGenApi
 * @template T
 * @param {?} def
 * @return {?}
 */
function ɵɵdefineNgModule(def) {
    /** @type {?} */
    const res = {
        type: def.type,
        bootstrap: def.bootstrap || EMPTY_ARRAY,
        declarations: def.declarations || EMPTY_ARRAY,
        imports: def.imports || EMPTY_ARRAY,
        exports: def.exports || EMPTY_ARRAY,
        transitiveCompileScopes: null,
        schemas: def.schemas || null,
        id: def.id || null,
    };
    if (def.id != null) {
        noSideEffects((/**
         * @return {?}
         */
        () => { autoRegisterModuleById[(/** @type {?} */ (def.id))] = (/** @type {?} */ ((/** @type {?} */ (def.type)))); }));
    }
    return (/** @type {?} */ (res));
}
/**
 * Adds the module metadata that is necessary to compute the module's transitive scope to an
 * existing module definition.
 *
 * Scope metadata of modules is not used in production builds, so calls to this function can be
 * marked pure to tree-shake it from the bundle, allowing for all referenced declarations
 * to become eligible for tree-shaking as well.
 *
 * \@codeGenApi
 * @param {?} type
 * @param {?} scope
 * @return {?}
 */
function ɵɵsetNgModuleScope(type, scope) {
    return (/** @type {?} */ (noSideEffects((/**
     * @return {?}
     */
    () => {
        /** @type {?} */
        const ngModuleDef = getNgModuleDef(type, true);
        ngModuleDef.declarations = scope.declarations || EMPTY_ARRAY;
        ngModuleDef.imports = scope.imports || EMPTY_ARRAY;
        ngModuleDef.exports = scope.exports || EMPTY_ARRAY;
    }))));
}
/**
 * Inverts an inputs or outputs lookup such that the keys, which were the
 * minified keys, are part of the values, and the values are parsed so that
 * the publicName of the property is the new key
 *
 * e.g. for
 *
 * ```
 * class Comp {
 * \@Input()
 *   propName1: string;
 *
 * \@Input('publicName2')
 *   declaredPropName2: number;
 * }
 * ```
 *
 * will be serialized as
 *
 * ```
 * {
 *   propName1: 'propName1',
 *   declaredPropName2: ['publicName2', 'declaredPropName2'],
 * }
 * ```
 *
 * which is than translated by the minifier as:
 *
 * ```
 * {
 *   minifiedPropName1: 'propName1',
 *   minifiedPropName2: ['publicName2', 'declaredPropName2'],
 * }
 * ```
 *
 * becomes: (public name => minifiedName)
 *
 * ```
 * {
 *  'propName1': 'minifiedPropName1',
 *  'publicName2': 'minifiedPropName2',
 * }
 * ```
 *
 * Optionally the function can take `secondary` which will result in: (public name => declared name)
 *
 * ```
 * {
 *  'propName1': 'propName1',
 *  'publicName2': 'declaredPropName2',
 * }
 * ```
 *
 * @template T
 * @param {?=} obj
 * @param {?=} secondary
 * @return {?}
 */
function invertObject(obj, secondary) {
    if (obj == null)
        return (/** @type {?} */ (EMPTY_OBJ));
    /** @type {?} */
    const newLookup = {};
    for (const minifiedKey in obj) {
        if (obj.hasOwnProperty(minifiedKey)) {
            /** @type {?} */
            let publicName = (/** @type {?} */ (obj[minifiedKey]));
            /** @type {?} */
            let declaredName = publicName;
            if (Array.isArray(publicName)) {
                declaredName = publicName[1];
                publicName = publicName[0];
            }
            newLookup[publicName] = minifiedKey;
            if (secondary) {
                (secondary[publicName] = (/** @type {?} */ (declaredName)));
            }
        }
    }
    return newLookup;
}
/**
 * Create a directive definition object.
 *
 * # Example
 * ```ts
 * class MyDirective {
 *   // Generated by Angular Template Compiler
 *   // [Symbol] syntax will not be supported by TypeScript until v2.7
 *   static ɵdir = ɵɵdefineDirective({
 *     ...
 *   });
 * }
 * ```
 *
 * \@codeGenApi
 * @type {?}
 */
const ɵɵdefineDirective = (/** @type {?} */ ((/** @type {?} */ (ɵɵdefineComponent))));
/**
 * Create a pipe definition object.
 *
 * # Example
 * ```
 * class MyPipe implements PipeTransform {
 *   // Generated by Angular Template Compiler
 *   static ɵpipe = definePipe({
 *     ...
 *   });
 * }
 * ```
 * \@codeGenApi
 * @template T
 * @param {?} pipeDef Pipe definition generated by the compiler
 *
 * @return {?}
 */
function ɵɵdefinePipe(pipeDef) {
    return (/** @type {?} */ (((/** @type {?} */ ({
        type: pipeDef.type,
        name: pipeDef.name,
        factory: null,
        pure: pipeDef.pure !== false,
        onDestroy: pipeDef.type.prototype.ngOnDestroy || null
    })))));
}
/**
 * The following getter methods retrieve the definition form the type. Currently the retrieval
 * honors inheritance, but in the future we may change the rule to require that definitions are
 * explicit. This would require some sort of migration strategy.
 * @template T
 * @param {?} type
 * @return {?}
 */
function getComponentDef(type) {
    return type[NG_COMP_DEF] || null;
}
/**
 * @template T
 * @param {?} type
 * @return {?}
 */
function getDirectiveDef(type) {
    return type[NG_DIR_DEF] || null;
}
/**
 * @template T
 * @param {?} type
 * @return {?}
 */
function getPipeDef(type) {
    return type[NG_PIPE_DEF] || null;
}
/**
 * @template T
 * @param {?} type
 * @param {?=} throwNotFound
 * @return {?}
 */
function getFactoryDef(type, throwNotFound) {
    /** @type {?} */
    const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);
    if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
        throw new Error(`Type ${stringify(type)} does not have 'ɵfac' property.`);
    }
    return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
}
/**
 * @template T
 * @param {?} type
 * @param {?=} throwNotFound
 * @return {?}
 */
function getNgModuleDef(type, throwNotFound) {
    /** @type {?} */
    const ngModuleDef = type[NG_MOD_DEF] || null;
    if (!ngModuleDef && throwNotFound === true) {
        throw new Error(`Type ${stringify(type)} does not have 'ɵmod' property.`);
    }
    return ngModuleDef;
}
/**
 * @param {?} type
 * @return {?}
 */
function getNgLocaleIdDef(type) {
    return ((/** @type {?} */ (type)))[NG_LOC_ID_DEF] || null;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// Below are constants for LView indices to help us look up LView members
// without having to remember the specific indices.
// Uglify will inline these when minifying so there shouldn't be a cost.
/** @type {?} */
const HOST = 0;
/** @type {?} */
const TVIEW = 1;
/** @type {?} */
const FLAGS = 2;
/** @type {?} */
const PARENT = 3;
/** @type {?} */
const NEXT = 4;
/** @type {?} */
const QUERIES = 5;
/** @type {?} */
const T_HOST = 6;
/** @type {?} */
const CLEANUP = 7;
/** @type {?} */
const CONTEXT = 8;
/** @type {?} */
const INJECTOR$1 = 9;
/** @type {?} */
const RENDERER_FACTORY = 10;
/** @type {?} */
const RENDERER = 11;
/** @type {?} */
const SANITIZER = 12;
/** @type {?} */
const CHILD_HEAD = 13;
/** @type {?} */
const CHILD_TAIL = 14;
/** @type {?} */
const DECLARATION_VIEW = 15;
/** @type {?} */
const DECLARATION_COMPONENT_VIEW = 16;
/** @type {?} */
const DECLARATION_LCONTAINER = 17;
/** @type {?} */
const PREORDER_HOOK_FLAGS = 18;
/**
 * Size of LView's header. Necessary to adjust for it when setting slots.
 * @type {?}
 */
const HEADER_OFFSET = 19;
/**
 * @record
 */
function OpaqueViewState() { }
if (false) {}
/**
 * `LView` stores all of the information needed to process the instructions as
 * they are invoked from the template. Each embedded view and component view has its
 * own `LView`. When processing a particular view, we set the `viewData` to that
 * `LView`. When that view is done processing, the `viewData` is set back to
 * whatever the original `viewData` was before (the parent `LView`).
 *
 * Keeping separate state for each view facilities view insertion / deletion, so we
 * don't have to edit the data array based on which views are present.
 * @record
 */
function LView() { }
if (false) {}
/** @enum {number} */
const LViewFlags = {
    /** The state of the init phase on the first 2 bits */
    InitPhaseStateIncrementer: 1,
    InitPhaseStateMask: 3,
    /**
     * Whether or not the view is in creationMode.
     *
     * This must be stored in the view rather than using `data` as a marker so that
     * we can properly support embedded views. Otherwise, when exiting a child view
     * back into the parent view, `data` will be defined and `creationMode` will be
     * improperly reported as false.
     */
    CreationMode: 4,
    /**
     * Whether or not this LView instance is on its first processing pass.
     *
     * An LView instance is considered to be on its "first pass" until it
     * has completed one creation mode run and one update mode run. At this
     * time, the flag is turned off.
     */
    FirstLViewPass: 8,
    /** Whether this view has default change detection strategy (checks always) or onPush */
    CheckAlways: 16,
    /**
     * Whether or not manual change detection is turned on for onPush components.
     *
     * This is a special mode that only marks components dirty in two cases:
     * 1) There has been a change to an @Input property
     * 2) `markDirty()` has been called manually by the user
     *
     * Note that in this mode, the firing of events does NOT mark components
     * dirty automatically.
     *
     * Manual mode is turned off by default for backwards compatibility, as events
     * automatically mark OnPush components dirty in View Engine.
     *
     * TODO: Add a public API to ChangeDetectionStrategy to turn this mode on
     */
    ManualOnPush: 32,
    /** Whether or not this view is currently dirty (needing check) */
    Dirty: 64,
    /** Whether or not this view is currently attached to change detection tree. */
    Attached: 128,
    /** Whether or not this view is destroyed. */
    Destroyed: 256,
    /** Whether or not this view is the root view */
    IsRoot: 512,
    /**
     * Index of the current init phase on last 22 bits
     */
    IndexWithinInitPhaseIncrementer: 1024,
    IndexWithinInitPhaseShift: 10,
    IndexWithinInitPhaseReset: 1023,
};
/** @enum {number} */
const InitPhaseState = {
    OnInitHooksToBeRun: 0,
    AfterContentInitHooksToBeRun: 1,
    AfterViewInitHooksToBeRun: 2,
    InitPhaseCompleted: 3,
};
/** @enum {number} */
const PreOrderHookFlags = {
    /** The index of the next pre-order hook to be called in the hooks array, on the first 16
       bits */
    IndexOfTheNextPreOrderHookMaskMask: 65535,
    /**
     * The number of init hooks that have already been called, on the last 16 bits
     */
    NumberOfInitHooksCalledIncrementer: 65536,
    NumberOfInitHooksCalledShift: 16,
    NumberOfInitHooksCalledMask: 4294901760,
};
/**
 * Set of instructions used to process host bindings efficiently.
 *
 * See VIEW_DATA.md for more information.
 * @record
 */
function ExpandoInstructions() { }
/** @enum {number} */
const TViewType = {
    /**
     * Root `TView` is the used to bootstrap components into. It is used in conjunction with
     * `LView` which takes an existing DOM node not owned by Angular and wraps it in `TView`/`LView`
     * so that other components can be loaded into it.
     */
    Root: 0,
    /**
     * `TView` associated with a Component. This would be the `TView` directly associated with the
     * component view (as opposed an `Embedded` `TView` which would be a child of `Component` `TView`)
     */
    Component: 1,
    /**
     * `TView` associated with a template. Such as `*ngIf`, `<ng-template>` etc... A `Component`
     * can have zero or more `Embedede` `TView`s.
     */
    Embedded: 2,
};
/**
 * The static data for an LView (shared between all templates of a
 * given type).
 *
 * Stored on the `ComponentDef.tView`.
 * @record
 */
function TView() { }
if (false) {}
/** @enum {number} */
const RootContextFlags = {
    Empty: 0, DetectChanges: 1, FlushPlayers: 2,
};
/**
 * RootContext contains information which is shared for all components which
 * were bootstrapped with {\@link renderComponent}.
 * @record
 */
function RootContext() { }
if (false) {}
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
/** @type {?} */
const unusedValueExportToPlacateAjd = 1;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/container.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Special location which allows easy identification of type. If we have an array which was
 * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is
 * `LContainer`.
 * @type {?}
 */
const TYPE = 1;
/**
 * Below are constants for LContainer indices to help us look up LContainer members
 * without having to remember the specific indices.
 * Uglify will inline these when minifying so there shouldn't be a cost.
 * @type {?}
 */
const ACTIVE_INDEX = 2;
// PARENT and NEXT are indices 3 and 4
// As we already have these constants in LView, we don't need to re-create them.
/** @type {?} */
const MOVED_VIEWS = 5;
// T_HOST is index 6
// We already have this constants in LView, we don't need to re-create it.
/** @type {?} */
const NATIVE = 7;
/** @type {?} */
const VIEW_REFS = 8;
/**
 * Size of LContainer's header. Represents the index after which all views in the
 * container will be inserted. We need to keep a record of current views so we know
 * which views are already in the DOM (and don't need to be re-added) and so we can
 * remove views from the DOM when they are no longer required.
 * @type {?}
 */
const CONTAINER_HEADER_OFFSET = 9;
/** @enum {number} */
const ActiveIndexFlag = {
    /**
     * Flag which signifies that the `LContainer` does not have any inline embedded views.
     */
    DYNAMIC_EMBEDDED_VIEWS_ONLY: -1,
    /**
     * Flag to signify that this `LContainer` may have transplanted views which need to be change
     * detected. (see: `LView[DECLARATION_COMPONENT_VIEW])`.
     *
     * This flag once set is never unset for the `LContainer`. This means that when unset we can skip
     * a lot of work in `refreshDynamicEmbeddedViews`. But when set we still need to verify
     * that the `MOVED_VIEWS` are transplanted and on-push.
     */
    HAS_TRANSPLANTED_VIEWS: 1,
    /**
     * Number of bits to shift inline embedded views counter to make space for other flags.
     */
    SHIFT: 1,
    /**
     * When incrementing the active index for inline embedded views, the amount to increment to leave
     * space for other flags.
     */
    INCREMENT: 2,
};
/**
 * The state associated with a container.
 *
 * This is an array so that its structure is closer to LView. This helps
 * when traversing the view tree (which is a mix of containers and component
 * views), so we can jump to viewOrContainer[NEXT] in the same way regardless
 * of type.
 * @record
 */
function LContainer() { }
if (false) {}
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
/** @type {?} */
const unusedValueExportToPlacateAjd$1 = 1;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/type_checks.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * True if `value` is `LView`.
 * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`
 * @return {?}
 */
function isLView(value) {
    return Array.isArray(value) && typeof value[TYPE] === 'object';
}
/**
 * True if `value` is `LContainer`.
 * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`
 * @return {?}
 */
function isLContainer(value) {
    return Array.isArray(value) && value[TYPE] === true;
}
/**
 * @param {?} tNode
 * @return {?}
 */
function isContentQueryHost(tNode) {
    return (tNode.flags & 8 /* hasContentQuery */) !== 0;
}
/**
 * @param {?} tNode
 * @return {?}
 */
function isComponentHost(tNode) {
    return (tNode.flags & 2 /* isComponentHost */) === 2 /* isComponentHost */;
}
/**
 * @param {?} tNode
 * @return {?}
 */
function isDirectiveHost(tNode) {
    return (tNode.flags & 1 /* isDirectiveHost */) === 1 /* isDirectiveHost */;
}
/**
 * @template T
 * @param {?} def
 * @return {?}
 */
function isComponentDef(def) {
    return ((/** @type {?} */ (def))).template !== null;
}
/**
 * @param {?} target
 * @return {?}
 */
function isRootView(target) {
    return (target[FLAGS] & 512 /* IsRoot */) !== 0;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/assert.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// [Assert functions do not constraint type when they are guarded by a truthy
// expression.](https://github.com/microsoft/TypeScript/issues/37295)
/**
 * @param {?} tNode
 * @param {?} lView
 * @return {?}
 */
function assertTNodeForLView(tNode, lView) {
    tNode.hasOwnProperty('tView_') && assertEqual(((/** @type {?} */ ((/** @type {?} */ (tNode))))).tView_, lView[TVIEW], 'This TNode does not belong to this LView.');
}
/**
 * @param {?} actual
 * @param {?=} msg
 * @return {?}
 */
function assertComponentType(actual, msg = 'Type passed in is not ComponentType, it does not have \'ɵcmp\' property.') {
    if (!getComponentDef(actual)) {
        throwError(msg);
    }
}
/**
 * @param {?} actual
 * @param {?=} msg
 * @return {?}
 */
function assertNgModuleType(actual, msg = 'Type passed in is not NgModuleType, it does not have \'ɵmod\' property.') {
    if (!getNgModuleDef(actual)) {
        throwError(msg);
    }
}
/**
 * @param {?} isParent
 * @return {?}
 */
function assertPreviousIsParent(isParent) {
    assertEqual(isParent, true, 'previousOrParentTNode should be a parent');
}
/**
 * @param {?} tNode
 * @return {?}
 */
function assertHasParent(tNode) {
    assertDefined(tNode, 'previousOrParentTNode should exist!');
    assertDefined((/** @type {?} */ (tNode)).parent, 'previousOrParentTNode should have a parent');
}
/**
 * @param {?} lView
 * @param {?} index
 * @param {?=} arr
 * @return {?}
 */
function assertDataNext(lView, index, arr) {
    if (arr == null)
        arr = lView;
    assertEqual(arr.length, index, `index ${index} expected to be at the end of arr (length ${arr.length})`);
}
/**
 * @param {?} value
 * @return {?}
 */
function assertLContainerOrUndefined(value) {
    value && assertEqual(isLContainer(value), true, 'Expecting LContainer or undefined or null');
}
/**
 * @param {?} value
 * @return {?}
 */
function assertLContainer(value) {
    assertDefined(value, 'LContainer must be defined');
    assertEqual(isLContainer(value), true, 'Expecting LContainer');
}
/**
 * @param {?} value
 * @return {?}
 */
function assertLViewOrUndefined(value) {
    value && assertEqual(isLView(value), true, 'Expecting LView or undefined or null');
}
/**
 * @param {?} value
 * @return {?}
 */
function assertLView(value) {
    assertDefined(value, 'LView must be defined');
    assertEqual(isLView(value), true, 'Expecting LView');
}
/**
 * @param {?} tView
 * @param {?=} errMessage
 * @return {?}
 */
function assertFirstCreatePass(tView, errMessage) {
    assertEqual(tView.firstCreatePass, true, errMessage || 'Should only be called in first create pass.');
}
/**
 * @param {?} tView
 * @param {?=} errMessage
 * @return {?}
 */
function assertFirstUpdatePass(tView, errMessage) {
    assertEqual(tView.firstUpdatePass, true, errMessage || 'Should only be called in first update pass.');
}
/**
 * This is a basic sanity check that an object is probably a directive def. DirectiveDef is
 * an interface, so we can't do a direct instanceof check.
 * @template T
 * @param {?} obj
 * @return {?}
 */
function assertDirectiveDef(obj) {
    if (obj.type === undefined || obj.selectors == undefined || obj.inputs === undefined) {
        throwError(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/namespaces.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @type {?} */
const SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
/** @type {?} */
const MATH_ML_NAMESPACE = 'http://www.w3.org/1998/MathML/';

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/context.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This property will be monkey-patched on elements, components and directives
 * @type {?}
 */
const MONKEY_PATCH_KEY_NAME = '__ngContext__';
/**
 * The internal view context which is specific to a given DOM element, directive or
 * component instance. Each value in here (besides the LView and element node details)
 * can be present, null or undefined. If undefined then it implies the value has not been
 * looked up yet, otherwise, if null, then a lookup was executed and nothing was found.
 *
 * Each value will get filled when the respective value is examined within the getContext
 * function. The component, element and each directive instance will share the same instance
 * of the context.
 * @record
 */
function LContext() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/document.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Most of the use of `document` in Angular is from within the DI system so it is possible to simply
 * inject the `DOCUMENT` token and are done.
 *
 * Ivy is special because it does not rely upon the DI and must get hold of the document some other
 * way.
 *
 * The solution is to define `getDocument()` and `setDocument()` top-level functions for ivy.
 * Wherever ivy needs the global document, it calls `getDocument()` instead.
 *
 * When running ivy outside of a browser environment, it is necessary to call `setDocument()` to
 * tell ivy what the global `document` is.
 *
 * Angular does this for us in each of the standard platforms (`Browser`, `Server`, and `WebWorker`)
 * by calling `setDocument()` when providing the `DOCUMENT` token.
 * @type {?}
 */
let DOCUMENT = undefined;
/**
 * Tell ivy what the `document` is for this platform.
 *
 * It is only necessary to call this if the current platform is not a browser.
 *
 * @param {?} document The object representing the global `document` in this environment.
 * @return {?}
 */
function setDocument(document) {
    DOCUMENT = document;
}
/**
 * Access the object that represents the `document` for this platform.
 *
 * Ivy calls this whenever it needs to access the `document` object.
 * For example to create the renderer or to do sanitization.
 * @return {?}
 */
function getDocument() {
    if (DOCUMENT !== undefined) {
        return DOCUMENT;
    }
    else if (typeof document !== 'undefined') {
        return document;
    }
    // No "document" can be found. This should only happen if we are running ivy outside Angular and
    // the current platform is not a browser. Since this is not a supported scenario at the moment
    // this should not happen in Angular apps.
    // Once we support running ivy outside of Angular we will need to publish `setDocument()` as a
    // public API. Meanwhile we just return `undefined` and let the application fail.
    return (/** @type {?} */ (undefined));
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/renderer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const RendererStyleFlags3 = {
    Important: 1,
    DashCase: 2,
};
RendererStyleFlags3[RendererStyleFlags3.Important] = 'Important';
RendererStyleFlags3[RendererStyleFlags3.DashCase] = 'DashCase';
/**
 * Object Oriented style of API needed to create elements and text nodes.
 *
 * This is the native browser API style, e.g. operations are methods on individual objects
 * like HTMLElement. With this style, no additional code is needed as a facade
 * (reducing payload size).
 *
 * @record
 */
function ObjectOrientedRenderer3() { }
if (false) {}
/**
 * Returns whether the `renderer` is a `ProceduralRenderer3`
 * @param {?} renderer
 * @return {?}
 */
function isProceduralRenderer(renderer) {
    return !!(((/** @type {?} */ (renderer))).listen);
}
/**
 * Procedural style of API needed to create elements and text nodes.
 *
 * In non-native browser environments (e.g. platforms such as web-workers), this is the
 * facade that enables element manipulation. This also facilitates backwards compatibility
 * with Renderer2.
 * @record
 */
function ProceduralRenderer3() { }
if (false) {}
/**
 * @record
 */
function RendererFactory3() { }
if (false) {}
const ɵ0$2 = /**
 * @param {?} hostElement
 * @param {?} rendererType
 * @return {?}
 */
(hostElement, rendererType) => { return getDocument(); };
/** @type {?} */
const domRendererFactory3 = {
    createRenderer: (ɵ0$2)
};
/**
 * Subset of API needed for appending elements and text nodes.
 * @record
 */
function RNode() { }
if (false) {}
/**
 * Subset of API needed for writing attributes, properties, and setting up
 * listeners on Element.
 * @record
 */
function RElement() { }
if (false) {}
/**
 * @record
 */
function RCssStyleDeclaration() { }
if (false) {}
/**
 * @record
 */
function RDomTokenList() { }
if (false) {}
/**
 * @record
 */
function RText() { }
if (false) {}
/**
 * @record
 */
function RComment() { }
if (false) {}
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
/** @type {?} */
const unusedValueExportToPlacateAjd$2 = 1;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/util/view_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * For efficiency reasons we often put several different data types (`RNode`, `LView`, `LContainer`)
 * in same location in `LView`. This is because we don't want to pre-allocate space for it
 * because the storage is sparse. This file contains utilities for dealing with such data types.
 *
 * How do we know what is stored at a given location in `LView`.
 * - `Array.isArray(value) === false` => `RNode` (The normal storage value)
 * - `Array.isArray(value) === true` => then the `value[0]` represents the wrapped value.
 *   - `typeof value[TYPE] === 'object'` => `LView`
 *      - This happens when we have a component at a given location
 *   - `typeof value[TYPE] === true` => `LContainer`
 *      - This happens when we have `LContainer` binding at a given location.
 *
 *
 * NOTE: it is assumed that `Array.isArray` and `typeof` operations are very efficient.
 */
/**
 * Returns `RNode`.
 * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`
 * @return {?}
 */
function unwrapRNode(value) {
    while (Array.isArray(value)) {
        value = (/** @type {?} */ (value[HOST]));
    }
    return (/** @type {?} */ (value));
}
/**
 * Returns `LView` or `null` if not found.
 * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`
 * @return {?}
 */
function unwrapLView(value) {
    while (Array.isArray(value)) {
        // This check is same as `isLView()` but we don't call at as we don't want to call
        // `Array.isArray()` twice and give JITer more work for inlining.
        if (typeof value[TYPE] === 'object')
            return (/** @type {?} */ (value));
        value = (/** @type {?} */ (value[HOST]));
    }
    return null;
}
/**
 * Returns `LContainer` or `null` if not found.
 * @param {?} value wrapped value of `RNode`, `LView`, `LContainer`
 * @return {?}
 */
function unwrapLContainer(value) {
    while (Array.isArray(value)) {
        // This check is same as `isLContainer()` but we don't call at as we don't want to call
        // `Array.isArray()` twice and give JITer more work for inlining.
        if (value[TYPE] === true)
            return (/** @type {?} */ (value));
        value = (/** @type {?} */ (value[HOST]));
    }
    return null;
}
/**
 * Retrieves an element value from the provided `viewData`, by unwrapping
 * from any containers, component views, or style contexts.
 * @param {?} index
 * @param {?} lView
 * @return {?}
 */
function getNativeByIndex(index, lView) {
    return unwrapRNode(lView[index + HEADER_OFFSET]);
}
/**
 * Retrieve an `RNode` for a given `TNode` and `LView`.
 *
 * This function guarantees in dev mode to retrieve a non-null `RNode`.
 *
 * @param {?} tNode
 * @param {?} lView
 * @return {?}
 */
function getNativeByTNode(tNode, lView) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    ngDevMode && assertDataInRange(lView, tNode.index);
    /** @type {?} */
    const node = unwrapRNode(lView[tNode.index]);
    ngDevMode && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
    return node;
}
/**
 * Retrieve an `RNode` or `null` for a given `TNode` and `LView`.
 *
 * Some `TNode`s don't have associated `RNode`s. For example `Projection`
 *
 * @param {?} tNode
 * @param {?} lView
 * @return {?}
 */
function getNativeByTNodeOrNull(tNode, lView) {
    /** @type {?} */
    const index = tNode.index;
    if (index !== -1) {
        ngDevMode && assertTNodeForLView(tNode, lView);
        /** @type {?} */
        const node = unwrapRNode(lView[index]);
        ngDevMode && node !== null && !isProceduralRenderer(lView[RENDERER]) && assertDomNode(node);
        return node;
    }
    return null;
}
/**
 * @param {?} tView
 * @param {?} index
 * @return {?}
 */
function getTNode(tView, index) {
    ngDevMode && assertGreaterThan(index, -1, 'wrong index for TNode');
    ngDevMode && assertLessThan(index, tView.data.length, 'wrong index for TNode');
    return (/** @type {?} */ (tView.data[index + HEADER_OFFSET]));
}
/**
 * Retrieves a value from any `LView` or `TData`.
 * @template T
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function load(view, index) {
    ngDevMode && assertDataInRange(view, index + HEADER_OFFSET);
    return view[index + HEADER_OFFSET];
}
/**
 * @param {?} nodeIndex
 * @param {?} hostView
 * @return {?}
 */
function getComponentLViewByIndex(nodeIndex, hostView) {
    // Could be an LView or an LContainer. If LContainer, unwrap to find LView.
    ngDevMode && assertDataInRange(hostView, nodeIndex);
    /** @type {?} */
    const slotValue = hostView[nodeIndex];
    /** @type {?} */
    const lView = isLView(slotValue) ? slotValue : slotValue[HOST];
    return lView;
}
/**
 * Returns the monkey-patch value data present on the target (which could be
 * a component, directive or a DOM node).
 * @param {?} target
 * @return {?}
 */
function readPatchedData(target) {
    ngDevMode && assertDefined(target, 'Target expected');
    return target[MONKEY_PATCH_KEY_NAME] || null;
}
/**
 * @param {?} target
 * @return {?}
 */
function readPatchedLView(target) {
    /** @type {?} */
    const value = readPatchedData(target);
    if (value) {
        return Array.isArray(value) ? value : ((/** @type {?} */ (value))).lView;
    }
    return null;
}
/**
 * Checks whether a given view is in creation mode
 * @param {?} view
 * @return {?}
 */
function isCreationMode(view) {
    return (view[FLAGS] & 4 /* CreationMode */) === 4 /* CreationMode */;
}
/**
 * Returns a boolean for whether the view is attached to the change detection tree.
 *
 * Note: This determines whether a view should be checked, not whether it's inserted
 * into a container. For that, you'll want `viewAttachedToContainer` below.
 * @param {?} view
 * @return {?}
 */
function viewAttachedToChangeDetector(view) {
    return (view[FLAGS] & 128 /* Attached */) === 128 /* Attached */;
}
/**
 * Returns a boolean for whether the view is attached to a container.
 * @param {?} view
 * @return {?}
 */
function viewAttachedToContainer(view) {
    return isLContainer(view[PARENT]);
}
/**
 * Returns a constant from `TConstants` instance.
 * @template T
 * @param {?} consts
 * @param {?} index
 * @return {?}
 */
function getConstant(consts, index) {
    return consts === null || index == null ? null : (/** @type {?} */ ((/** @type {?} */ (consts[index]))));
}
/**
 * Resets the pre-order hook flags of the view.
 * @param {?} lView the LView on which the flags are reset
 * @return {?}
 */
function resetPreOrderHookFlags(lView) {
    lView[PREORDER_HOOK_FLAGS] = 0;
}
/**
 * @param {?} lContainer
 * @return {?}
 */
function getLContainerActiveIndex(lContainer) {
    return lContainer[ACTIVE_INDEX] >> 1 /* SHIFT */;
}
/**
 * @param {?} lContainer
 * @param {?} index
 * @return {?}
 */
function setLContainerActiveIndex(lContainer, index) {
    lContainer[ACTIVE_INDEX] = index << 1 /* SHIFT */;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * @record
 */
function LFrame() { }
if (false) {}
/**
 * All implicit instruction state is stored here.
 *
 * It is useful to have a single object where all of the state is stored as a mental model
 * (rather it being spread across many different variables.)
 *
 * PERF NOTE: Turns out that writing to a true global variable is slower than
 * having an intermediate object with properties.
 * @record
 */
function InstructionState() { }
if (false) {}
/** @type {?} */
const instructionState = {
    lFrame: createLFrame(null),
    bindingsEnabled: true,
    checkNoChangesMode: false,
};
/**
 * @return {?}
 */
function getElementDepthCount() {
    return instructionState.lFrame.elementDepthCount;
}
/**
 * @return {?}
 */
function increaseElementDepthCount() {
    instructionState.lFrame.elementDepthCount++;
}
/**
 * @return {?}
 */
function decreaseElementDepthCount() {
    instructionState.lFrame.elementDepthCount--;
}
/**
 * @return {?}
 */
function getBindingsEnabled() {
    return instructionState.bindingsEnabled;
}
/**
 * Enables directive matching on elements.
 *
 *  * Example:
 * ```
 * <my-comp my-directive>
 *   Should match component / directive.
 * </my-comp>
 * <div ngNonBindable>
 *   <!-- ɵɵdisableBindings() -->
 *   <my-comp my-directive>
 *     Should not match component / directive because we are in ngNonBindable.
 *   </my-comp>
 *   <!-- ɵɵenableBindings() -->
 * </div>
 * ```
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵenableBindings() {
    instructionState.bindingsEnabled = true;
}
/**
 * Disables directive matching on element.
 *
 *  * Example:
 * ```
 * <my-comp my-directive>
 *   Should match component / directive.
 * </my-comp>
 * <div ngNonBindable>
 *   <!-- ɵɵdisableBindings() -->
 *   <my-comp my-directive>
 *     Should not match component / directive because we are in ngNonBindable.
 *   </my-comp>
 *   <!-- ɵɵenableBindings() -->
 * </div>
 * ```
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵdisableBindings() {
    instructionState.bindingsEnabled = false;
}
/**
 * Return the current `LView`.
 * @return {?}
 */
function getLView() {
    return instructionState.lFrame.lView;
}
/**
 * Return the current `TView`.
 * @return {?}
 */
function getTView() {
    return instructionState.lFrame.tView;
}
/**
 * Restores `contextViewData` to the given OpaqueViewState instance.
 *
 * Used in conjunction with the getCurrentView() instruction to save a snapshot
 * of the current view and restore it when listeners are invoked. This allows
 * walking the declaration view tree in listeners to get vars from parent views.
 *
 * \@codeGenApi
 * @param {?} viewToRestore The OpaqueViewState instance to restore.
 *
 * @return {?}
 */
function ɵɵrestoreView(viewToRestore) {
    instructionState.lFrame.contextLView = (/** @type {?} */ ((/** @type {?} */ (viewToRestore))));
}
/**
 * @return {?}
 */
function getPreviousOrParentTNode() {
    return instructionState.lFrame.previousOrParentTNode;
}
/**
 * @param {?} tNode
 * @param {?} isParent
 * @return {?}
 */
function setPreviousOrParentTNode(tNode, isParent) {
    instructionState.lFrame.previousOrParentTNode = tNode;
    instructionState.lFrame.isParent = isParent;
}
/**
 * @return {?}
 */
function getIsParent() {
    return instructionState.lFrame.isParent;
}
/**
 * @return {?}
 */
function setIsNotParent() {
    instructionState.lFrame.isParent = false;
}
/**
 * @return {?}
 */
function setIsParent() {
    instructionState.lFrame.isParent = true;
}
/**
 * @return {?}
 */
function getContextLView() {
    return instructionState.lFrame.contextLView;
}
/**
 * @return {?}
 */
function getCheckNoChangesMode() {
    // TODO(misko): remove this from the LView since it is ngDevMode=true mode only.
    return instructionState.checkNoChangesMode;
}
/**
 * @param {?} mode
 * @return {?}
 */
function setCheckNoChangesMode(mode) {
    instructionState.checkNoChangesMode = mode;
}
// top level variables should not be exported for performance reasons (PERF_NOTES.md)
/**
 * @return {?}
 */
function getBindingRoot() {
    /** @type {?} */
    const lFrame = instructionState.lFrame;
    /** @type {?} */
    let index = lFrame.bindingRootIndex;
    if (index === -1) {
        index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
    }
    return index;
}
/**
 * @return {?}
 */
function getBindingIndex() {
    return instructionState.lFrame.bindingIndex;
}
/**
 * @param {?} value
 * @return {?}
 */
function setBindingIndex(value) {
    return instructionState.lFrame.bindingIndex = value;
}
/**
 * @return {?}
 */
function nextBindingIndex() {
    return instructionState.lFrame.bindingIndex++;
}
/**
 * @param {?} count
 * @return {?}
 */
function incrementBindingIndex(count) {
    /** @type {?} */
    const lFrame = instructionState.lFrame;
    /** @type {?} */
    const index = lFrame.bindingIndex;
    lFrame.bindingIndex = lFrame.bindingIndex + count;
    return index;
}
/**
 * Set a new binding root index so that host template functions can execute.
 *
 * Bindings inside the host template are 0 index. But because we don't know ahead of time
 * how many host bindings we have we can't pre-compute them. For this reason they are all
 * 0 index and we just shift the root so that they match next available location in the LView.
 *
 * @param {?} bindingRootIndex Root index for `hostBindings`
 * @param {?} currentDirectiveIndex `TData[currentDirectiveIndex]` will point to the current directive
 *        whose `hostBindings` are being processed.
 * @return {?}
 */
function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
    /** @type {?} */
    const lFrame = instructionState.lFrame;
    lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
    lFrame.currentDirectiveIndex = currentDirectiveIndex;
}
/**
 * When host binding is executing this points to the directive index.
 * `TView.data[getCurrentDirectiveIndex()]` is `DirectiveDef`
 * `LView[getCurrentDirectiveIndex()]` is directive instance.
 * @return {?}
 */
function getCurrentDirectiveIndex() {
    return instructionState.lFrame.currentDirectiveIndex;
}
/**
 * @return {?}
 */
function getCurrentQueryIndex() {
    return instructionState.lFrame.currentQueryIndex;
}
/**
 * @param {?} value
 * @return {?}
 */
function setCurrentQueryIndex(value) {
    instructionState.lFrame.currentQueryIndex = value;
}
/**
 * This is a light weight version of the `enterView` which is needed by the DI system.
 * @param {?} newView
 * @param {?} tNode
 * @return {?}
 */
function enterDI(newView, tNode) {
    ngDevMode && assertLViewOrUndefined(newView);
    /** @type {?} */
    const newLFrame = allocLFrame();
    instructionState.lFrame = newLFrame;
    newLFrame.previousOrParentTNode = (/** @type {?} */ (tNode));
    newLFrame.lView = newView;
}
/**
 * Swap the current lView with a new lView.
 *
 * For performance reasons we store the lView in the top level of the module.
 * This way we minimize the number of properties to read. Whenever a new view
 * is entered we have to store the lView for later, and when the view is
 * exited the state has to be restored
 *
 * @param {?} newView New lView to become active
 * @param {?} tNode Element to which the View is a child of
 * @return {?} the previously active lView;
 */
function enterView(newView, tNode) {
    ngDevMode && assertLViewOrUndefined(newView);
    /** @type {?} */
    const newLFrame = allocLFrame();
    if (ngDevMode) {
        assertEqual(newLFrame.isParent, true, 'Expected clean LFrame');
        assertEqual(newLFrame.lView, null, 'Expected clean LFrame');
        assertEqual(newLFrame.tView, null, 'Expected clean LFrame');
        assertEqual(newLFrame.selectedIndex, 0, 'Expected clean LFrame');
        assertEqual(newLFrame.elementDepthCount, 0, 'Expected clean LFrame');
        assertEqual(newLFrame.currentDirectiveIndex, -1, 'Expected clean LFrame');
        assertEqual(newLFrame.currentNamespace, null, 'Expected clean LFrame');
        assertEqual(newLFrame.currentSanitizer, null, 'Expected clean LFrame');
        assertEqual(newLFrame.bindingRootIndex, -1, 'Expected clean LFrame');
        assertEqual(newLFrame.currentQueryIndex, 0, 'Expected clean LFrame');
    }
    /** @type {?} */
    const tView = newView[TVIEW];
    instructionState.lFrame = newLFrame;
    newLFrame.previousOrParentTNode = (/** @type {?} */ (tNode));
    newLFrame.lView = newView;
    newLFrame.tView = tView;
    newLFrame.contextLView = (/** @type {?} */ (newView));
    newLFrame.bindingIndex = tView.bindingStartIndex;
}
/**
 * Allocates next free LFrame. This function tries to reuse the `LFrame`s to lower memory pressure.
 * @return {?}
 */
function allocLFrame() {
    /** @type {?} */
    const currentLFrame = instructionState.lFrame;
    /** @type {?} */
    const childLFrame = currentLFrame === null ? null : currentLFrame.child;
    /** @type {?} */
    const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
    return newLFrame;
}
/**
 * @param {?} parent
 * @return {?}
 */
function createLFrame(parent) {
    /** @type {?} */
    const lFrame = {
        previousOrParentTNode: (/** @type {?} */ (null)),
        //
        isParent: true,
        //
        lView: (/** @type {?} */ (null)),
        //
        tView: (/** @type {?} */ (null)),
        //
        selectedIndex: 0,
        //
        contextLView: (/** @type {?} */ (null)),
        //
        elementDepthCount: 0,
        //
        currentNamespace: null,
        //
        currentSanitizer: null,
        //
        currentDirectiveIndex: -1,
        //
        bindingRootIndex: -1,
        //
        bindingIndex: -1,
        //
        currentQueryIndex: 0,
        //
        parent: (/** @type {?} */ (parent)),
        //
        child: null,
    };
    parent !== null && (parent.child = lFrame); // link the new LFrame for reuse.
    return lFrame;
}
/**
 * A lightweight version of leave which is used with DI.
 *
 * This function only resets `previousOrParentTNode` and `LView` as those are the only properties
 * used with DI (`enterDI()`).
 *
 * NOTE: This function is reexported as `leaveDI`. However `leaveDI` has return type of `void` where
 * as `leaveViewLight` has `LFrame`. This is so that `leaveViewLight` can be used in `leaveView`.
 * @return {?}
 */
function leaveViewLight() {
    /** @type {?} */
    const oldLFrame = instructionState.lFrame;
    instructionState.lFrame = oldLFrame.parent;
    oldLFrame.previousOrParentTNode = (/** @type {?} */ (null));
    oldLFrame.lView = (/** @type {?} */ (null));
    return oldLFrame;
}
/**
 * This is a lightweight version of the `leaveView` which is needed by the DI system.
 *
 * NOTE: this function is an alias so that we can change the type of the function to have `void`
 * return type.
 * @type {?}
 */
const leaveDI = leaveViewLight;
/**
 * Leave the current `LView`
 *
 * This pops the `LFrame` with the associated `LView` from the stack.
 *
 * IMPORTANT: We must zero out the `LFrame` values here otherwise they will be retained. This is
 * because for performance reasons we don't release `LFrame` but rather keep it for next use.
 * @return {?}
 */
function leaveView() {
    /** @type {?} */
    const oldLFrame = leaveViewLight();
    oldLFrame.isParent = true;
    oldLFrame.tView = (/** @type {?} */ (null));
    oldLFrame.selectedIndex = 0;
    oldLFrame.contextLView = (/** @type {?} */ (null));
    oldLFrame.elementDepthCount = 0;
    oldLFrame.currentDirectiveIndex = -1;
    oldLFrame.currentNamespace = null;
    oldLFrame.currentSanitizer = null;
    oldLFrame.bindingRootIndex = -1;
    oldLFrame.bindingIndex = -1;
    oldLFrame.currentQueryIndex = 0;
}
/**
 * @template T
 * @param {?} level
 * @return {?}
 */
function nextContextImpl(level) {
    /** @type {?} */
    const contextLView = instructionState.lFrame.contextLView =
        walkUpViews(level, (/** @type {?} */ (instructionState.lFrame.contextLView)));
    return (/** @type {?} */ (contextLView[CONTEXT]));
}
/**
 * @param {?} nestingLevel
 * @param {?} currentView
 * @return {?}
 */
function walkUpViews(nestingLevel, currentView) {
    while (nestingLevel > 0) {
        ngDevMode && assertDefined(currentView[DECLARATION_VIEW], 'Declaration view should be defined if nesting level is greater than 0.');
        currentView = (/** @type {?} */ (currentView[DECLARATION_VIEW]));
        nestingLevel--;
    }
    return currentView;
}
/**
 * Gets the currently selected element index.
 *
 * Used with {\@link property} instruction (and more in the future) to identify the index in the
 * current `LView` to act on.
 * @return {?}
 */
function getSelectedIndex() {
    return instructionState.lFrame.selectedIndex;
}
/**
 * Sets the most recent index passed to {\@link select}
 *
 * Used with {\@link property} instruction (and more in the future) to identify the index in the
 * current `LView` to act on.
 *
 * (Note that if an "exit function" was set earlier (via `setElementExitFn()`) then that will be
 * run if and when the provided `index` value is different from the current selected index value.)
 * @param {?} index
 * @return {?}
 */
function setSelectedIndex(index) {
    instructionState.lFrame.selectedIndex = index;
}
/**
 * Gets the `tNode` that represents currently selected element.
 * @return {?}
 */
function getSelectedTNode() {
    /** @type {?} */
    const lFrame = instructionState.lFrame;
    return getTNode(lFrame.tView, lFrame.selectedIndex);
}
/**
 * Sets the namespace used to create elements to `'http://www.w3.org/2000/svg'` in global state.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵnamespaceSVG() {
    instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
}
/**
 * Sets the namespace used to create elements to `'http://www.w3.org/1998/MathML/'` in global state.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵnamespaceMathML() {
    instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
}
/**
 * Sets the namespace used to create elements to `null`, which forces element creation to use
 * `createElement` rather than `createElementNS`.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵnamespaceHTML() {
    namespaceHTMLInternal();
}
/**
 * Sets the namespace used to create elements to `null`, which forces element creation to use
 * `createElement` rather than `createElementNS`.
 * @return {?}
 */
function namespaceHTMLInternal() {
    instructionState.lFrame.currentNamespace = null;
}
/**
 * @return {?}
 */
function getNamespace() {
    return instructionState.lFrame.currentNamespace;
}
/**
 * @param {?} sanitizer
 * @return {?}
 */
function setCurrentStyleSanitizer(sanitizer) {
    instructionState.lFrame.currentSanitizer = sanitizer;
}
/**
 * @return {?}
 */
function resetCurrentStyleSanitizer() {
    setCurrentStyleSanitizer(null);
}
/**
 * @return {?}
 */
function getCurrentStyleSanitizer() {
    // TODO(misko): This should throw when there is no LView, but it turns out we can get here from
    // `NodeStyleDebug` hence we return `null`. This should be fixed
    /** @type {?} */
    const lFrame = instructionState.lFrame;
    return lFrame === null ? null : lFrame.currentSanitizer;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/hooks.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Adds all directive lifecycle hooks from the given `DirectiveDef` to the given `TView`.
 *
 * Must be run *only* on the first template pass.
 *
 * Sets up the pre-order hooks on the provided `tView`,
 * see {\@link HookData} for details about the data structure.
 *
 * @param {?} directiveIndex The index of the directive in LView
 * @param {?} directiveDef The definition containing the hooks to setup in tView
 * @param {?} tView The current TView
 * @return {?}
 */
function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
    ngDevMode && assertFirstCreatePass(tView);
    const { onChanges, onInit, doCheck } = directiveDef;
    if (onChanges) {
        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, onChanges);
        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, onChanges);
    }
    if (onInit) {
        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(-directiveIndex, onInit);
    }
    if (doCheck) {
        (tView.preOrderHooks || (tView.preOrderHooks = [])).push(directiveIndex, doCheck);
        (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(directiveIndex, doCheck);
    }
}
/**
 *
 * Loops through the directives on the provided `tNode` and queues hooks to be
 * run that are not initialization hooks.
 *
 * Should be executed during `elementEnd()` and similar to
 * preserve hook execution order. Content, view, and destroy hooks for projected
 * components and directives must be called *before* their hosts.
 *
 * Sets up the content, view, and destroy hooks on the provided `tView`,
 * see {\@link HookData} for details about the data structure.
 *
 * NOTE: This does not set up `onChanges`, `onInit` or `doCheck`, those are set up
 * separately at `elementStart`.
 *
 * @param {?} tView The current TView
 * @param {?} tNode The TNode whose directives are to be searched for hooks to queue
 * @return {?}
 */
function registerPostOrderHooks(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView);
    // It's necessary to loop through the directives at elementEnd() (rather than processing in
    // directiveCreate) so we can preserve the current hook order. Content, view, and destroy
    // hooks for projected components and directives must be called *before* their hosts.
    for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
        /** @type {?} */
        const directiveDef = (/** @type {?} */ (tView.data[i]));
        if (directiveDef.afterContentInit) {
            (tView.contentHooks || (tView.contentHooks = [])).push(-i, directiveDef.afterContentInit);
        }
        if (directiveDef.afterContentChecked) {
            (tView.contentHooks || (tView.contentHooks = [])).push(i, directiveDef.afterContentChecked);
            (tView.contentCheckHooks || (tView.contentCheckHooks = [])).push(i, directiveDef.afterContentChecked);
        }
        if (directiveDef.afterViewInit) {
            (tView.viewHooks || (tView.viewHooks = [])).push(-i, directiveDef.afterViewInit);
        }
        if (directiveDef.afterViewChecked) {
            (tView.viewHooks || (tView.viewHooks = [])).push(i, directiveDef.afterViewChecked);
            (tView.viewCheckHooks || (tView.viewCheckHooks = [])).push(i, directiveDef.afterViewChecked);
        }
        if (directiveDef.onDestroy != null) {
            (tView.destroyHooks || (tView.destroyHooks = [])).push(i, directiveDef.onDestroy);
        }
    }
}
/**
 * Executing hooks requires complex logic as we need to deal with 2 constraints.
 *
 * 1. Init hooks (ngOnInit, ngAfterContentInit, ngAfterViewInit) must all be executed once and only
 * once, across many change detection cycles. This must be true even if some hooks throw, or if
 * some recursively trigger a change detection cycle.
 * To solve that, it is required to track the state of the execution of these init hooks.
 * This is done by storing and maintaining flags in the view: the {@link InitPhaseState},
 * and the index within that phase. They can be seen as a cursor in the following structure:
 * [[onInit1, onInit2], [afterContentInit1], [afterViewInit1, afterViewInit2, afterViewInit3]]
 * They are are stored as flags in LView[FLAGS].
 *
 * 2. Pre-order hooks can be executed in batches, because of the select instruction.
 * To be able to pause and resume their execution, we also need some state about the hook's array
 * that is being processed:
 * - the index of the next hook to be executed
 * - the number of init hooks already found in the processed part of the  array
 * They are are stored as flags in LView[PREORDER_HOOK_FLAGS].
 */
/**
 * Executes pre-order check hooks ( OnChanges, DoChanges) given a view where all the init hooks were
 * executed once. This is a light version of executeInitAndCheckPreOrderHooks where we can skip read
 * / write of the init-hooks related flags.
 * @param {?} lView The LView where hooks are defined
 * @param {?} hooks Hooks to be run
 * @param {?=} nodeIndex 3 cases depending on the value:
 * - undefined: all hooks from the array should be executed (post-order case)
 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
 * flushing the remaining hooks)
 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
 * case, when executing select(number))
 * @return {?}
 */
function executeCheckHooks(lView, hooks, nodeIndex) {
    callHooks(lView, hooks, 3 /* InitPhaseCompleted */, nodeIndex);
}
/**
 * Executes post-order init and check hooks (one of AfterContentInit, AfterContentChecked,
 * AfterViewInit, AfterViewChecked) given a view where there are pending init hooks to be executed.
 * @param {?} lView The LView where hooks are defined
 * @param {?} hooks Hooks to be run
 * @param {?} initPhase A phase for which hooks should be run
 * @param {?=} nodeIndex 3 cases depending on the value:
 * - undefined: all hooks from the array should be executed (post-order case)
 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
 * flushing the remaining hooks)
 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
 * case, when executing select(number))
 * @return {?}
 */
function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
    ngDevMode && assertNotEqual(initPhase, 3 /* InitPhaseCompleted */, 'Init pre-order hooks should not be called more than once');
    if ((lView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {
        callHooks(lView, hooks, initPhase, nodeIndex);
    }
}
/**
 * @param {?} lView
 * @param {?} initPhase
 * @return {?}
 */
function incrementInitPhaseFlags(lView, initPhase) {
    ngDevMode &&
        assertNotEqual(initPhase, 3 /* InitPhaseCompleted */, 'Init hooks phase should not be incremented after all init hooks have been run.');
    /** @type {?} */
    let flags = lView[FLAGS];
    if ((flags & 3 /* InitPhaseStateMask */) === initPhase) {
        flags &= 1023 /* IndexWithinInitPhaseReset */;
        flags += 1 /* InitPhaseStateIncrementer */;
        lView[FLAGS] = flags;
    }
}
/**
 * Calls lifecycle hooks with their contexts, skipping init hooks if it's not
 * the first LView pass
 *
 * @param {?} currentView The current view
 * @param {?} arr The array in which the hooks are found
 * @param {?} initPhase
 * @param {?} currentNodeIndex 3 cases depending on the value:
 * - undefined: all hooks from the array should be executed (post-order case)
 * - null: execute hooks only from the saved index until the end of the array (pre-order case, when
 * flushing the remaining hooks)
 * - number: execute hooks only from the saved index until that node index exclusive (pre-order
 * case, when executing select(number))
 * @return {?}
 */
function callHooks(currentView, arr, initPhase, currentNodeIndex) {
    ngDevMode && assertEqual(getCheckNoChangesMode(), false, 'Hooks should never be run in the check no changes mode.');
    /** @type {?} */
    const startIndex = currentNodeIndex !== undefined ?
        (currentView[PREORDER_HOOK_FLAGS] & 65535 /* IndexOfTheNextPreOrderHookMaskMask */) :
        0;
    /** @type {?} */
    const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
    /** @type {?} */
    let lastNodeIndexFound = 0;
    for (let i = startIndex; i < arr.length; i++) {
        /** @type {?} */
        const hook = (/** @type {?} */ (arr[i + 1]));
        if (typeof hook === 'number') {
            lastNodeIndexFound = (/** @type {?} */ (arr[i]));
            if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
                break;
            }
        }
        else {
            /** @type {?} */
            const isInitHook = arr[i] < 0;
            if (isInitHook)
                currentView[PREORDER_HOOK_FLAGS] += 65536 /* NumberOfInitHooksCalledIncrementer */;
            if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
                callHook(currentView, initPhase, arr, i);
                currentView[PREORDER_HOOK_FLAGS] =
                    (currentView[PREORDER_HOOK_FLAGS] & 4294901760 /* NumberOfInitHooksCalledMask */) + i +
                        2;
            }
            i++;
        }
    }
}
/**
 * Execute one hook against the current `LView`.
 *
 * @param {?} currentView The current view
 * @param {?} initPhase
 * @param {?} arr The array in which the hooks are found
 * @param {?} i The current index within the hook data array
 * @return {?}
 */
function callHook(currentView, initPhase, arr, i) {
    /** @type {?} */
    const isInitHook = arr[i] < 0;
    /** @type {?} */
    const hook = (/** @type {?} */ (arr[i + 1]));
    /** @type {?} */
    const directiveIndex = isInitHook ? -arr[i] : (/** @type {?} */ (arr[i]));
    /** @type {?} */
    const directive = currentView[directiveIndex];
    if (isInitHook) {
        /** @type {?} */
        const indexWithintInitPhase = currentView[FLAGS] >> 10 /* IndexWithinInitPhaseShift */;
        // The init phase state must be always checked here as it may have been recursively
        // updated
        if (indexWithintInitPhase <
            (currentView[PREORDER_HOOK_FLAGS] >> 16 /* NumberOfInitHooksCalledShift */) &&
            (currentView[FLAGS] & 3 /* InitPhaseStateMask */) === initPhase) {
            currentView[FLAGS] += 1024 /* IndexWithinInitPhaseIncrementer */;
            hook.call(directive);
        }
    }
    else {
        hook.call(directive);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/injector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @type {?} */
const TNODE = 8;
/** @type {?} */
const PARENT_INJECTOR = 8;
/** @type {?} */
const INJECTOR_BLOOM_PARENT_SIZE = 9;
/**
 * Represents a relative location of parent injector.
 *
 * The interfaces encodes number of parents `LView`s to traverse and index in the `LView`
 * pointing to the parent injector.
 * @record
 */
function RelativeInjectorLocation() { }
if (false) {}
/** @enum {number} */
const RelativeInjectorLocationFlags = {
    InjectorIndexMask: 32767,
    ViewOffsetShift: 16,
    NO_PARENT: -1,
};
/** @type {?} */
const NO_PARENT_INJECTOR = (/** @type {?} */ (-1));
/**
 * Each injector is saved in 9 contiguous slots in `LView` and 9 contiguous slots in
 * `TView.data`. This allows us to store information about the current node's tokens (which
 * can be shared in `TView`) as well as the tokens of its ancestor nodes (which cannot be
 * shared, so they live in `LView`).
 *
 * Each of these slots (aside from the last slot) contains a bloom filter. This bloom filter
 * determines whether a directive is available on the associated node or not. This prevents us
 * from searching the directives array at this level unless it's probable the directive is in it.
 *
 * See: https://en.wikipedia.org/wiki/Bloom_filter for more about bloom filters.
 *
 * Because all injectors have been flattened into `LView` and `TViewData`, they cannot typed
 * using interfaces as they were previously. The start index of each `LInjector` and `TInjector`
 * will differ based on where it is flattened into the main array, so it's not possible to know
 * the indices ahead of time and save their types here. The interfaces are still included here
 * for documentation purposes.
 *
 * export interface LInjector extends Array<any> {
 *
 *    // Cumulative bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
 *    [0]: number;
 *
 *    // Cumulative bloom for directive IDs 32-63
 *    [1]: number;
 *
 *    // Cumulative bloom for directive IDs 64-95
 *    [2]: number;
 *
 *    // Cumulative bloom for directive IDs 96-127
 *    [3]: number;
 *
 *    // Cumulative bloom for directive IDs 128-159
 *    [4]: number;
 *
 *    // Cumulative bloom for directive IDs 160 - 191
 *    [5]: number;
 *
 *    // Cumulative bloom for directive IDs 192 - 223
 *    [6]: number;
 *
 *    // Cumulative bloom for directive IDs 224 - 255
 *    [7]: number;
 *
 *    // We need to store a reference to the injector's parent so DI can keep looking up
 *    // the injector tree until it finds the dependency it's looking for.
 *    [PARENT_INJECTOR]: number;
 * }
 *
 * export interface TInjector extends Array<any> {
 *
 *    // Shared node bloom for directive IDs 0-31  (IDs are % BLOOM_SIZE)
 *    [0]: number;
 *
 *    // Shared node bloom for directive IDs 32-63
 *    [1]: number;
 *
 *    // Shared node bloom for directive IDs 64-95
 *    [2]: number;
 *
 *    // Shared node bloom for directive IDs 96-127
 *    [3]: number;
 *
 *    // Shared node bloom for directive IDs 128-159
 *    [4]: number;
 *
 *    // Shared node bloom for directive IDs 160 - 191
 *    [5]: number;
 *
 *    // Shared node bloom for directive IDs 192 - 223
 *    [6]: number;
 *
 *    // Shared node bloom for directive IDs 224 - 255
 *    [7]: number;
 *
 *    // Necessary to find directive indices for a particular node.
 *    [TNODE]: TElementNode|TElementContainerNode|TContainerNode;
 *  }
 */
/**
 * Factory for creating instances of injectors in the NodeInjector.
 *
 * This factory is complicated by the fact that it can resolve `multi` factories as well.
 *
 * NOTE: Some of the fields are optional which means that this class has two hidden classes.
 * - One without `multi` support (most common)
 * - One with `multi` values, (rare).
 *
 * Since VMs can cache up to 4 inline hidden classes this is OK.
 *
 * - Single factory: Only `resolving` and `factory` is defined.
 * - `providers` factory: `componentProviders` is a number and `index = -1`.
 * - `viewProviders` factory: `componentProviders` is a number and `index` points to `providers`.
 */
class NodeInjectorFactory {
    /**
     * @param {?} factory
     * @param {?} isViewProvider
     * @param {?} injectImplementation
     */
    constructor(factory, 
    /**
     * Set to `true` if the token is declared in `viewProviders` (or if it is component).
     */
    isViewProvider, injectImplementation) {
        this.factory = factory;
        /**
         * Marker set to true during factory invocation to see if we get into recursive loop.
         * Recursive loop causes an error to be displayed.
         */
        this.resolving = false;
        this.canSeeViewProviders = isViewProvider;
        this.injectImpl = injectImplementation;
    }
}
if (false) {}
/**
 * @param {?} obj
 * @return {?}
 */
function isFactory(obj) {
    return obj instanceof NodeInjectorFactory;
}
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
/** @type {?} */
const unusedValueExportToPlacateAjd$3 = 1;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/node_assert.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} tNode
 * @param {?} type
 * @return {?}
 */
function assertNodeType(tNode, type) {
    assertDefined(tNode, 'should be called with a TNode');
    assertEqual(tNode.type, type, `should be a ${typeName(type)}`);
}
/**
 * @param {?} tNode
 * @param {...?} types
 * @return {?}
 */
function assertNodeOfPossibleTypes(tNode, ...types) {
    assertDefined(tNode, 'should be called with a TNode');
    /** @type {?} */
    const found = types.some((/**
     * @param {?} type
     * @return {?}
     */
    type => tNode.type === type));
    assertEqual(found, true, `Should be one of ${types.map(typeName).join(', ')} but got ${typeName(tNode.type)}`);
}
/**
 * @param {?} type
 * @return {?}
 */
function typeName(type) {
    if (type == 1 /* Projection */)
        return 'Projection';
    if (type == 0 /* Container */)
        return 'Container';
    if (type == 5 /* IcuContainer */)
        return 'IcuContainer';
    if (type == 2 /* View */)
        return 'View';
    if (type == 3 /* Element */)
        return 'Element';
    if (type == 4 /* ElementContainer */)
        return 'ElementContainer';
    return '<unknown>';
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/util/attrs_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Assigns all attribute values to the provided element via the inferred renderer.
 *
 * This function accepts two forms of attribute entries:
 *
 * default: (key, value):
 *  attrs = [key1, value1, key2, value2]
 *
 * namespaced: (NAMESPACE_MARKER, uri, name, value)
 *  attrs = [NAMESPACE_MARKER, uri, name, value, NAMESPACE_MARKER, uri, name, value]
 *
 * The `attrs` array can contain a mix of both the default and namespaced entries.
 * The "default" values are set without a marker, but if the function comes across
 * a marker value then it will attempt to set a namespaced value. If the marker is
 * not of a namespaced value then the function will quit and return the index value
 * where it stopped during the iteration of the attrs array.
 *
 * See [AttributeMarker] to understand what the namespace marker value is.
 *
 * Note that this instruction does not support assigning style and class values to
 * an element. See `elementStart` and `elementHostAttrs` to learn how styling values
 * are applied to an element.
 * @param {?} renderer The renderer to be used
 * @param {?} native The element that the attributes will be assigned to
 * @param {?} attrs The attribute array of values that will be assigned to the element
 * @return {?} the index value that was last accessed in the attributes array
 */
function setUpAttributes(renderer, native, attrs) {
    /** @type {?} */
    const isProc = isProceduralRenderer(renderer);
    /** @type {?} */
    let i = 0;
    while (i < attrs.length) {
        /** @type {?} */
        const value = attrs[i];
        if (typeof value === 'number') {
            // only namespaces are supported. Other value types (such as style/class
            // entries) are not supported in this function.
            if (value !== 0 /* NamespaceURI */) {
                break;
            }
            // we just landed on the marker value ... therefore
            // we should skip to the next entry
            i++;
            /** @type {?} */
            const namespaceURI = (/** @type {?} */ (attrs[i++]));
            /** @type {?} */
            const attrName = (/** @type {?} */ (attrs[i++]));
            /** @type {?} */
            const attrVal = (/** @type {?} */ (attrs[i++]));
            ngDevMode && ngDevMode.rendererSetAttribute++;
            isProc ?
                ((/** @type {?} */ (renderer))).setAttribute(native, attrName, attrVal, namespaceURI) :
                native.setAttributeNS(namespaceURI, attrName, attrVal);
        }
        else {
            // attrName is string;
            /** @type {?} */
            const attrName = (/** @type {?} */ (value));
            /** @type {?} */
            const attrVal = attrs[++i];
            // Standard attributes
            ngDevMode && ngDevMode.rendererSetAttribute++;
            if (isAnimationProp(attrName)) {
                if (isProc) {
                    ((/** @type {?} */ (renderer))).setProperty(native, attrName, attrVal);
                }
            }
            else {
                isProc ?
                    ((/** @type {?} */ (renderer))).setAttribute(native, attrName, (/** @type {?} */ (attrVal))) :
                    native.setAttribute(attrName, (/** @type {?} */ (attrVal)));
            }
            i++;
        }
    }
    // another piece of code may iterate over the same attributes array. Therefore
    // it may be helpful to return the exact spot where the attributes array exited
    // whether by running into an unsupported marker or if all the static values were
    // iterated over.
    return i;
}
/**
 * Test whether the given value is a marker that indicates that the following
 * attribute values in a `TAttributes` array are only the names of attributes,
 * and not name-value pairs.
 * @param {?} marker The attribute marker to test.
 * @return {?} true if the marker is a "name-only" marker (e.g. `Bindings`, `Template` or `I18n`).
 */
function isNameOnlyAttributeMarker(marker) {
    return marker === 3 /* Bindings */ || marker === 4 /* Template */ ||
        marker === 6 /* I18n */;
}
/**
 * @param {?} name
 * @return {?}
 */
function isAnimationProp(name) {
    // Perf note: accessing charCodeAt to check for the first character of a string is faster as
    // compared to accessing a character at index 0 (ex. name[0]). The main reason for this is that
    // charCodeAt doesn't allocate memory to return a substring.
    return name.charCodeAt(0) === 64 /* AT_SIGN */;
}
/**
 * Merges `src` `TAttributes` into `dst` `TAttributes` removing any duplicates in the process.
 *
 * This merge function keeps the order of attrs same.
 *
 * @param {?} dst Location of where the merged `TAttributes` should end up.
 * @param {?} src `TAttributes` which should be appended to `dst`
 * @return {?}
 */
function mergeHostAttrs(dst, src) {
    if (src === null || src.length === 0) {
        // do nothing
    }
    else if (dst === null || dst.length === 0) {
        // We have source, but dst is empty, just make a copy.
        dst = src.slice();
    }
    else {
        /** @type {?} */
        let srcMarker = -1 /* ImplicitAttributes */;
        for (let i = 0; i < src.length; i++) {
            /** @type {?} */
            const item = src[i];
            if (typeof item === 'number') {
                srcMarker = item;
            }
            else {
                if (srcMarker === 0 /* NamespaceURI */) {
                    // Case where we need to consume `key1`, `key2`, `value` items.
                }
                else if (srcMarker === -1 /* ImplicitAttributes */ ||
                    srcMarker === 2 /* Styles */) {
                    // Case where we have to consume `key1` and `value` only.
                    mergeHostAttribute(dst, srcMarker, (/** @type {?} */ (item)), null, (/** @type {?} */ (src[++i])));
                }
                else {
                    // Case where we have to consume `key1` only.
                    mergeHostAttribute(dst, srcMarker, (/** @type {?} */ (item)), null, null);
                }
            }
        }
    }
    return dst;
}
/**
 * Append `key`/`value` to existing `TAttributes` taking region marker and duplicates into account.
 *
 * @param {?} dst `TAttributes` to append to.
 * @param {?} marker Region where the `key`/`value` should be added.
 * @param {?} key1 Key to add to `TAttributes`
 * @param {?} key2 Key to add to `TAttributes` (in case of `AttributeMarker.NamespaceURI`)
 * @param {?} value Value to add or to overwrite to `TAttributes` Only used if `marker` is not Class.
 * @return {?}
 */
function mergeHostAttribute(dst, marker, key1, key2, value) {
    /** @type {?} */
    let i = 0;
    // Assume that new markers will be inserted at the end.
    /** @type {?} */
    let markerInsertPosition = dst.length;
    // scan until correct type.
    if (marker === -1 /* ImplicitAttributes */) {
        markerInsertPosition = -1;
    }
    else {
        while (i < dst.length) {
            /** @type {?} */
            const dstValue = dst[i++];
            if (typeof dstValue === 'number') {
                if (dstValue === marker) {
                    markerInsertPosition = -1;
                    break;
                }
                else if (dstValue > marker) {
                    // We need to save this as we want the markers to be inserted in specific order.
                    markerInsertPosition = i - 1;
                    break;
                }
            }
        }
    }
    // search until you find place of insertion
    while (i < dst.length) {
        /** @type {?} */
        const item = dst[i];
        if (typeof item === 'number') {
            // since `i` started as the index after the marker, we did not find it if we are at the next
            // marker
            break;
        }
        else if (item === key1) {
            // We already have same token
            if (key2 === null) {
                if (value !== null) {
                    dst[i + 1] = value;
                }
                return;
            }
            else if (key2 === dst[i + 1]) {
                dst[i + 2] = (/** @type {?} */ (value));
                return;
            }
        }
        // Increment counter.
        i++;
        if (key2 !== null)
            i++;
        if (value !== null)
            i++;
    }
    // insert at location.
    if (markerInsertPosition !== -1) {
        dst.splice(markerInsertPosition, 0, marker);
        i = markerInsertPosition + 1;
    }
    dst.splice(i++, 0, key1);
    if (key2 !== null) {
        dst.splice(i++, 0, key2);
    }
    if (value !== null) {
        dst.splice(i++, 0, value);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/util/injector_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/// Parent Injector Utils ///////////////////////////////////////////////////////////////
/**
 * @param {?} parentLocation
 * @return {?}
 */
function hasParentInjector(parentLocation) {
    return parentLocation !== NO_PARENT_INJECTOR;
}
/**
 * @param {?} parentLocation
 * @return {?}
 */
function getParentInjectorIndex(parentLocation) {
    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) & 32767 /* InjectorIndexMask */;
}
/**
 * @param {?} parentLocation
 * @return {?}
 */
function getParentInjectorViewOffset(parentLocation) {
    return ((/** @type {?} */ ((/** @type {?} */ (parentLocation))))) >> 16 /* ViewOffsetShift */;
}
/**
 * Unwraps a parent injector location number to find the view offset from the current injector,
 * then walks up the declaration view tree until the view is found that contains the parent
 * injector.
 *
 * @param {?} location The location of the parent injector, which contains the view offset
 * @param {?} startView The LView instance from which to start walking up the view tree
 * @return {?} The LView instance that contains the parent injector
 */
function getParentInjectorView(location, startView) {
    /** @type {?} */
    let viewOffset = getParentInjectorViewOffset(location);
    /** @type {?} */
    let parentView = startView;
    // For most cases, the parent injector can be found on the host node (e.g. for component
    // or container), but we must keep the loop here to support the rarer case of deeply nested
    // <ng-template> tags or inline views, where the parent injector might live many views
    // above the child injector.
    while (viewOffset > 0) {
        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));
        viewOffset--;
    }
    return parentView;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/util/misc_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Used for stringify render output in Ivy.
 * Important! This function is very performance-sensitive and we should
 * be extra careful not to introduce megamorphic reads in it.
 * @param {?} value
 * @return {?}
 */
function renderStringify(value) {
    if (typeof value === 'string')
        return value;
    if (value == null)
        return '';
    return '' + value;
}
/**
 * Used to stringify a value so that it can be displayed in an error message.
 * Important! This function contains a megamorphic read and should only be
 * used for error messages.
 * @param {?} value
 * @return {?}
 */
function stringifyForError(value) {
    if (typeof value === 'function')
        return value.name || value.toString();
    if (typeof value === 'object' && value != null && typeof value.type === 'function') {
        return value.type.name || value.type.toString();
    }
    return renderStringify(value);
}
const ɵ0$3 = /**
 * @return {?}
 */
() => (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame || // browser only
    setTimeout // everything else
).bind(_global);
/** @type {?} */
const defaultScheduler = ((ɵ0$3))();
/**
 *
 * \@codeGenApi
 * @param {?} element
 * @return {?}
 */
function ɵɵresolveWindow(element) {
    return { name: 'window', target: element.ownerDocument.defaultView };
}
/**
 *
 * \@codeGenApi
 * @param {?} element
 * @return {?}
 */
function ɵɵresolveDocument(element) {
    return { name: 'document', target: element.ownerDocument };
}
/**
 *
 * \@codeGenApi
 * @param {?} element
 * @return {?}
 */
function ɵɵresolveBody(element) {
    return { name: 'body', target: element.ownerDocument.body };
}
/**
 * The special delimiter we use to separate property names, prefixes, and suffixes
 * in property binding metadata. See storeBindingMetadata().
 *
 * We intentionally use the Unicode "REPLACEMENT CHARACTER" (U+FFFD) as a delimiter
 * because it is a very uncommon character that is unlikely to be part of a user's
 * property names or interpolation strings. If it is in fact used in a property
 * binding, DebugElement.properties will not return the correct value for that
 * binding. However, there should be no runtime effect for real applications.
 *
 * This character is typically rendered as a question mark inside of a diamond.
 * See https://en.wikipedia.org/wiki/Specials_(Unicode_block)
 *
 * @type {?}
 */
const INTERPOLATION_DELIMITER = `�`;
/**
 * Unwrap a value which might be behind a closure (for forward declaration reasons).
 * @template T
 * @param {?} value
 * @return {?}
 */
function maybeUnwrapFn(value) {
    if (value instanceof Function) {
        return value();
    }
    else {
        return value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/di.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Defines if the call to `inject` should include `viewProviders` in its resolution.
 *
 * This is set to true when we try to instantiate a component. This value is reset in
 * `getNodeInjectable` to a value which matches the declaration location of the token about to be
 * instantiated. This is done so that if we are injecting a token which was declared outside of
 * `viewProviders` we don't accidentally pull `viewProviders` in.
 *
 * Example:
 *
 * ```
 * \@Injectable()
 * class MyService {
 *   constructor(public value: String) {}
 * }
 *
 * \@Component({
 *   providers: [
 *     MyService,
 *     {provide: String, value: 'providers' }
 *   ]
 *   viewProviders: [
 *     {provide: String, value: 'viewProviders'}
 *   ]
 * })
 * class MyComponent {
 *   constructor(myService: MyService, value: String) {
 *     // We expect that Component can see into `viewProviders`.
 *     expect(value).toEqual('viewProviders');
 *     // `MyService` was not declared in `viewProviders` hence it can't see it.
 *     expect(myService.value).toEqual('providers');
 *   }
 * }
 *
 * ```
 * @type {?}
 */
let includeViewProviders = true;
/**
 * @param {?} v
 * @return {?}
 */
function setIncludeViewProviders(v) {
    /** @type {?} */
    const oldValue = includeViewProviders;
    includeViewProviders = v;
    return oldValue;
}
/**
 * The number of slots in each bloom filter (used by DI). The larger this number, the fewer
 * directives that will share slots, and thus, the fewer false positives when checking for
 * the existence of a directive.
 * @type {?}
 */
const BLOOM_SIZE = 256;
/** @type {?} */
const BLOOM_MASK = BLOOM_SIZE - 1;
/**
 * Counter used to generate unique IDs for directives.
 * @type {?}
 */
let nextNgElementId = 0;
/**
 * Registers this directive as present in its node's injector by flipping the directive's
 * corresponding bit in the injector's bloom filter.
 *
 * @param {?} injectorIndex The index of the node injector where this token should be registered
 * @param {?} tView The TView for the injector's bloom filters
 * @param {?} type The directive token to register
 * @return {?}
 */
function bloomAdd(injectorIndex, tView, type) {
    ngDevMode && assertEqual(tView.firstCreatePass, true, 'expected firstCreatePass to be true');
    /** @type {?} */
    let id = typeof type !== 'string' ? ((/** @type {?} */ (type)))[NG_ELEMENT_ID] : type.charCodeAt(0) || 0;
    // Set a unique ID on the directive type, so if something tries to inject the directive,
    // we can easily retrieve the ID and hash it into the bloom bit that should be checked.
    if (id == null) {
        id = ((/** @type {?} */ (type)))[NG_ELEMENT_ID] = nextNgElementId++;
    }
    // We only have BLOOM_SIZE (256) slots in our bloom filter (8 buckets * 32 bits each),
    // so all unique IDs must be modulo-ed into a number from 0 - 255 to fit into the filter.
    /** @type {?} */
    const bloomBit = id & BLOOM_MASK;
    // Create a mask that targets the specific bit associated with the directive.
    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
    // to bit positions 0 - 31 in a 32 bit integer.
    /** @type {?} */
    const mask = 1 << bloomBit;
    // Use the raw bloomBit number to determine which bloom filter bucket we should check
    // e.g: bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc
    /** @type {?} */
    const b7 = bloomBit & 0x80;
    /** @type {?} */
    const b6 = bloomBit & 0x40;
    /** @type {?} */
    const b5 = bloomBit & 0x20;
    /** @type {?} */
    const tData = (/** @type {?} */ (tView.data));
    if (b7) {
        b6 ? (b5 ? (tData[injectorIndex + 7] |= mask) : (tData[injectorIndex + 6] |= mask)) :
            (b5 ? (tData[injectorIndex + 5] |= mask) : (tData[injectorIndex + 4] |= mask));
    }
    else {
        b6 ? (b5 ? (tData[injectorIndex + 3] |= mask) : (tData[injectorIndex + 2] |= mask)) :
            (b5 ? (tData[injectorIndex + 1] |= mask) : (tData[injectorIndex] |= mask));
    }
}
/**
 * Creates (or gets an existing) injector for a given element or container.
 *
 * @param {?} tNode for which an injector should be retrieved / created.
 * @param {?} hostView View where the node is stored
 * @return {?} Node injector
 */
function getOrCreateNodeInjectorForNode(tNode, hostView) {
    /** @type {?} */
    const existingInjectorIndex = getInjectorIndex(tNode, hostView);
    if (existingInjectorIndex !== -1) {
        return existingInjectorIndex;
    }
    /** @type {?} */
    const tView = hostView[TVIEW];
    if (tView.firstCreatePass) {
        tNode.injectorIndex = hostView.length;
        insertBloom(tView.data, tNode); // foundation for node bloom
        insertBloom(hostView, null); // foundation for cumulative bloom
        insertBloom(tView.blueprint, null);
    }
    /** @type {?} */
    const parentLoc = getParentInjectorLocation(tNode, hostView);
    /** @type {?} */
    const injectorIndex = tNode.injectorIndex;
    // If a parent injector can't be found, its location is set to -1.
    // In that case, we don't need to set up a cumulative bloom
    if (hasParentInjector(parentLoc)) {
        /** @type {?} */
        const parentIndex = getParentInjectorIndex(parentLoc);
        /** @type {?} */
        const parentLView = getParentInjectorView(parentLoc, hostView);
        /** @type {?} */
        const parentData = (/** @type {?} */ (parentLView[TVIEW].data));
        // Creates a cumulative bloom filter that merges the parent's bloom filter
        // and its own cumulative bloom (which contains tokens for all ancestors)
        for (let i = 0; i < 8; i++) {
            hostView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
        }
    }
    hostView[injectorIndex + PARENT_INJECTOR] = parentLoc;
    return injectorIndex;
}
/**
 * @param {?} arr
 * @param {?} footer
 * @return {?}
 */
function insertBloom(arr, footer) {
    arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
}
/**
 * @param {?} tNode
 * @param {?} hostView
 * @return {?}
 */
function getInjectorIndex(tNode, hostView) {
    if (tNode.injectorIndex === -1 ||
        // If the injector index is the same as its parent's injector index, then the index has been
        // copied down from the parent node. No injector has been created yet on this node.
        (tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex) ||
        // After the first template pass, the injector index might exist but the parent values
        // might not have been calculated yet for this instance
        hostView[tNode.injectorIndex + PARENT_INJECTOR] == null) {
        return -1;
    }
    else {
        return tNode.injectorIndex;
    }
}
/**
 * Finds the index of the parent injector, with a view offset if applicable. Used to set the
 * parent injector initially.
 *
 * Returns a combination of number of `ViewData` we have to go up and index in that `Viewdata`
 * @param {?} tNode
 * @param {?} view
 * @return {?}
 */
function getParentInjectorLocation(tNode, view) {
    if (tNode.parent && tNode.parent.injectorIndex !== -1) {
        return (/** @type {?} */ (tNode.parent.injectorIndex)); // ViewOffset is 0
    }
    // For most cases, the parent injector index can be found on the host node (e.g. for component
    // or container), so this loop will be skipped, but we must keep the loop here to support
    // the rarer case of deeply nested <ng-template> tags or inline views.
    /** @type {?} */
    let hostTNode = view[T_HOST];
    /** @type {?} */
    let viewOffset = 1;
    while (hostTNode && hostTNode.injectorIndex === -1) {
        view = (/** @type {?} */ (view[DECLARATION_VIEW]));
        hostTNode = view ? view[T_HOST] : null;
        viewOffset++;
    }
    return hostTNode ?
        hostTNode.injectorIndex | (viewOffset << 16 /* ViewOffsetShift */) :
        (/** @type {?} */ (-1));
}
/**
 * Makes a type or an injection token public to the DI system by adding it to an
 * injector's bloom filter.
 *
 * @param {?} injectorIndex
 * @param {?} tView
 * @param {?} token The type or the injection token to be made public
 * @return {?}
 */
function diPublicInInjector(injectorIndex, tView, token) {
    bloomAdd(injectorIndex, tView, token);
}
/**
 * Inject static attribute value into directive constructor.
 *
 * This method is used with `factory` functions which are generated as part of
 * `defineDirective` or `defineComponent`. The method retrieves the static value
 * of an attribute. (Dynamic attributes are not supported since they are not resolved
 *  at the time of injection and can change over time.)
 *
 * # Example
 * Given:
 * ```
 * \@Component(...)
 * class MyComponent {
 *   constructor(\@Attribute('title') title: string) { ... }
 * }
 * ```
 * When instantiated with
 * ```
 * <my-component title="Hello"></my-component>
 * ```
 *
 * Then factory method generated is:
 * ```
 * MyComponent.ɵcmp = defineComponent({
 *   factory: () => new MyComponent(injectAttribute('title'))
 *   ...
 * })
 * ```
 *
 * \@publicApi
 * @param {?} tNode
 * @param {?} attrNameToInject
 * @return {?}
 */
function injectAttributeImpl(tNode, attrNameToInject) {
    ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);
    ngDevMode && assertDefined(tNode, 'expecting tNode');
    if (attrNameToInject === 'class') {
        return tNode.classes;
    }
    if (attrNameToInject === 'style') {
        return tNode.styles;
    }
    /** @type {?} */
    const attrs = tNode.attrs;
    if (attrs) {
        /** @type {?} */
        const attrsLength = attrs.length;
        /** @type {?} */
        let i = 0;
        while (i < attrsLength) {
            /** @type {?} */
            const value = attrs[i];
            // If we hit a `Bindings` or `Template` marker then we are done.
            if (isNameOnlyAttributeMarker(value))
                break;
            // Skip namespaced attributes
            if (value === 0 /* NamespaceURI */) {
                // we skip the next two values
                // as namespaced attributes looks like
                // [..., AttributeMarker.NamespaceURI, 'http://someuri.com/test', 'test:exist',
                // 'existValue', ...]
                i = i + 2;
            }
            else if (typeof value === 'number') {
                // Skip to the first value of the marked attribute.
                i++;
                while (i < attrsLength && typeof attrs[i] === 'string') {
                    i++;
                }
            }
            else if (value === attrNameToInject) {
                return (/** @type {?} */ (attrs[i + 1]));
            }
            else {
                i = i + 2;
            }
        }
    }
    return null;
}
/**
 * Returns the value associated to the given token from the NodeInjectors => ModuleInjector.
 *
 * Look for the injector providing the token by walking up the node injector tree and then
 * the module injector tree.
 *
 * This function patches `token` with `__NG_ELEMENT_ID__` which contains the id for the bloom
 * filter. Negative values are reserved for special objects.
 *   - `-1` is reserved for injecting `Injector` (implemented by `NodeInjector`)
 *
 * @template T
 * @param {?} tNode The Node where the search for the injector should start
 * @param {?} lView The `LView` that contains the `tNode`
 * @param {?} token The token to look for
 * @param {?=} flags Injection flags
 * @param {?=} notFoundValue The value to return when the injection flags is `InjectFlags.Optional`
 * @return {?} the value from the injector, `null` when not found, or `notFoundValue` if provided
 */
function getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {
    if (tNode !== null) {
        /** @type {?} */
        const bloomHash = bloomHashBitOrFactory(token);
        // If the ID stored here is a function, this is a special object like ElementRef or TemplateRef
        // so just call the factory function to create it.
        if (typeof bloomHash === 'function') {
            enterDI(lView, tNode);
            try {
                /** @type {?} */
                const value = bloomHash();
                if (value == null && !(flags & InjectFlags.Optional)) {
                    throw new Error(`No provider for ${stringifyForError(token)}!`);
                }
                else {
                    return value;
                }
            }
            finally {
                leaveDI();
            }
        }
        else if (typeof bloomHash == 'number') {
            if (bloomHash === -1) {
                // `-1` is a special value used to identify `Injector` types.
                return (/** @type {?} */ (new NodeInjector(tNode, lView)));
            }
            // If the token has a bloom hash, then it is a token which could be in NodeInjector.
            // A reference to the previous injector TView that was found while climbing the element
            // injector tree. This is used to know if viewProviders can be accessed on the current
            // injector.
            /** @type {?} */
            let previousTView = null;
            /** @type {?} */
            let injectorIndex = getInjectorIndex(tNode, lView);
            /** @type {?} */
            let parentLocation = NO_PARENT_INJECTOR;
            /** @type {?} */
            let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;
            // If we should skip this injector, or if there is no injector on this node, start by
            // searching
            // the parent injector.
            if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
                parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) :
                    lView[injectorIndex + PARENT_INJECTOR];
                if (!shouldSearchParent(flags, false)) {
                    injectorIndex = -1;
                }
                else {
                    previousTView = lView[TVIEW];
                    injectorIndex = getParentInjectorIndex(parentLocation);
                    lView = getParentInjectorView(parentLocation, lView);
                }
            }
            // Traverse up the injector tree until we find a potential match or until we know there
            // *isn't* a match.
            while (injectorIndex !== -1) {
                parentLocation = lView[injectorIndex + PARENT_INJECTOR];
                // Check the current injector. If it matches, see if it contains token.
                /** @type {?} */
                const tView = lView[TVIEW];
                if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
                    // At this point, we have an injector which *may* contain the token, so we step through
                    // the providers and directives associated with the injector's corresponding node to get
                    // the instance.
                    /** @type {?} */
                    const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);
                    if (instance !== NOT_FOUND) {
                        return instance;
                    }
                }
                if (shouldSearchParent(flags, lView[TVIEW].data[injectorIndex + TNODE] === hostTElementNode) &&
                    bloomHasToken(bloomHash, injectorIndex, lView)) {
                    // The def wasn't found anywhere on this node, so it was a false positive.
                    // Traverse up the tree and continue searching.
                    previousTView = tView;
                    injectorIndex = getParentInjectorIndex(parentLocation);
                    lView = getParentInjectorView(parentLocation, lView);
                }
                else {
                    // If we should not search parent OR If the ancestor bloom filter value does not have the
                    // bit corresponding to the directive we can give up on traversing up to find the specific
                    // injector.
                    injectorIndex = -1;
                }
            }
        }
    }
    if (flags & InjectFlags.Optional && notFoundValue === undefined) {
        // This must be set or the NullInjector will throw for optional deps
        notFoundValue = null;
    }
    if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
        /** @type {?} */
        const moduleInjector = lView[INJECTOR$1];
        // switch to `injectInjectorOnly` implementation for module injector, since module injector
        // should not have access to Component/Directive DI scope (that may happen through
        // `directiveInject` implementation)
        /** @type {?} */
        const previousInjectImplementation = setInjectImplementation(undefined);
        try {
            if (moduleInjector) {
                return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
            }
            else {
                return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
            }
        }
        finally {
            setInjectImplementation(previousInjectImplementation);
        }
    }
    if (flags & InjectFlags.Optional) {
        return notFoundValue;
    }
    else {
        throw new Error(`NodeInjector: NOT_FOUND [${stringifyForError(token)}]`);
    }
}
/** @type {?} */
const NOT_FOUND = {};
/**
 * @template T
 * @param {?} injectorIndex
 * @param {?} lView
 * @param {?} token
 * @param {?} previousTView
 * @param {?} flags
 * @param {?} hostTElementNode
 * @return {?}
 */
function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
    /** @type {?} */
    const currentTView = lView[TVIEW];
    /** @type {?} */
    const tNode = (/** @type {?} */ (currentTView.data[injectorIndex + TNODE]));
    // First, we need to determine if view providers can be accessed by the starting element.
    // There are two possibities
    /** @type {?} */
    const canAccessViewProviders = previousTView == null ?
        // 1) This is the first invocation `previousTView == null` which means that we are at the
        // `TNode` of where injector is starting to look. In such a case the only time we are allowed
        // to look into the ViewProviders is if:
        // - we are on a component
        // - AND the injector set `includeViewProviders` to true (implying that the token can see
        // ViewProviders because it is the Component or a Service which itself was declared in
        // ViewProviders)
        (isComponentHost(tNode) && includeViewProviders) :
        // 2) `previousTView != null` which means that we are now walking across the parent nodes.
        // In such a case we are only allowed to look into the ViewProviders if:
        // - We just crossed from child View to Parent View `previousTView != currentTView`
        // - AND the parent TNode is an Element.
        // This means that we just came from the Component's View and therefore are allowed to see
        // into the ViewProviders.
        (previousTView != currentTView && (tNode.type === 3 /* Element */));
    // This special case happens when there is a @host on the inject and when we are searching
    // on the host element node.
    /** @type {?} */
    const isHostSpecialCase = (flags & InjectFlags.Host) && hostTElementNode === tNode;
    /** @type {?} */
    const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);
    if (injectableIdx !== null) {
        return getNodeInjectable(lView, currentTView, injectableIdx, (/** @type {?} */ (tNode)));
    }
    else {
        return NOT_FOUND;
    }
}
/**
 * Searches for the given token among the node's directives and providers.
 *
 * @template T
 * @param {?} tNode TNode on which directives are present.
 * @param {?} tView The tView we are currently processing
 * @param {?} token Provider token or type of a directive to look for.
 * @param {?} canAccessViewProviders Whether view providers should be considered.
 * @param {?} isHostSpecialCase Whether the host special case applies.
 * @return {?} Index of a found directive or provider, or null when none found.
 */
function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
    /** @type {?} */
    const nodeProviderIndexes = tNode.providerIndexes;
    /** @type {?} */
    const tInjectables = tView.data;
    /** @type {?} */
    const injectablesStart = nodeProviderIndexes & 65535 /* ProvidersStartIndexMask */;
    /** @type {?} */
    const directivesStart = tNode.directiveStart;
    /** @type {?} */
    const directiveEnd = tNode.directiveEnd;
    /** @type {?} */
    const cptViewProvidersCount = nodeProviderIndexes >> 16 /* CptViewProvidersCountShift */;
    /** @type {?} */
    const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;
    // When the host special case applies, only the viewProviders and the component are visible
    /** @type {?} */
    const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;
    for (let i = startingIndex; i < endIndex; i++) {
        /** @type {?} */
        const providerTokenOrDef = (/** @type {?} */ (tInjectables[i]));
        if (i < directivesStart && token === providerTokenOrDef ||
            i >= directivesStart && ((/** @type {?} */ (providerTokenOrDef))).type === token) {
            return i;
        }
    }
    if (isHostSpecialCase) {
        /** @type {?} */
        const dirDef = (/** @type {?} */ (tInjectables[directivesStart]));
        if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
            return directivesStart;
        }
    }
    return null;
}
/**
 * Retrieve or instantiate the injectable from the `LView` at particular `index`.
 *
 * This function checks to see if the value has already been instantiated and if so returns the
 * cached `injectable`. Otherwise if it detects that the value is still a factory it
 * instantiates the `injectable` and caches the value.
 * @param {?} lView
 * @param {?} tView
 * @param {?} index
 * @param {?} tNode
 * @return {?}
 */
function getNodeInjectable(lView, tView, index, tNode) {
    /** @type {?} */
    let value = lView[index];
    /** @type {?} */
    const tData = tView.data;
    if (isFactory(value)) {
        /** @type {?} */
        const factory = value;
        if (factory.resolving) {
            throw new Error(`Circular dep for ${stringifyForError(tData[index])}`);
        }
        /** @type {?} */
        const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
        factory.resolving = true;
        /** @type {?} */
        let previousInjectImplementation;
        if (factory.injectImpl) {
            previousInjectImplementation = setInjectImplementation(factory.injectImpl);
        }
        enterDI(lView, tNode);
        try {
            value = lView[index] = factory.factory(undefined, tData, lView, tNode);
            // This code path is hit for both directives and providers.
            // For perf reasons, we want to avoid searching for hooks on providers.
            // It does no harm to try (the hooks just won't exist), but the extra
            // checks are unnecessary and this is a hot path. So we check to see
            // if the index of the dependency is in the directive range for this
            // tNode. If it's not, we know it's a provider and skip hook registration.
            if (tView.firstCreatePass && index >= tNode.directiveStart) {
                ngDevMode && assertDirectiveDef(tData[index]);
                registerPreOrderHooks(index, (/** @type {?} */ (tData[index])), tView);
            }
        }
        finally {
            if (factory.injectImpl)
                setInjectImplementation(previousInjectImplementation);
            setIncludeViewProviders(previousIncludeViewProviders);
            factory.resolving = false;
            leaveDI();
        }
    }
    return value;
}
/**
 * Returns the bit in an injector's bloom filter that should be used to determine whether or not
 * the directive might be provided by the injector.
 *
 * When a directive is public, it is added to the bloom filter and given a unique ID that can be
 * retrieved on the Type. When the directive isn't public or the token is not a directive `null`
 * is returned as the node injector can not possibly provide that token.
 *
 * @param {?} token the injection token
 * @return {?} the matching bit to check in the bloom filter or `null` if the token is not known.
 *   When the returned value is negative then it represents special values such as `Injector`.
 */
function bloomHashBitOrFactory(token) {
    ngDevMode && assertDefined(token, 'token must be defined');
    if (typeof token === 'string') {
        return token.charCodeAt(0) || 0;
    }
    /** @type {?} */
    const tokenId = ((/** @type {?} */ (token)))[NG_ELEMENT_ID];
    // Negative token IDs are used for special objects such as `Injector`
    return (typeof tokenId === 'number' && tokenId > 0) ? tokenId & BLOOM_MASK : tokenId;
}
/**
 * @param {?} bloomHash
 * @param {?} injectorIndex
 * @param {?} injectorView
 * @return {?}
 */
function bloomHasToken(bloomHash, injectorIndex, injectorView) {
    // Create a mask that targets the specific bit associated with the directive we're looking for.
    // JS bit operations are 32 bits, so this will be a number between 2^0 and 2^31, corresponding
    // to bit positions 0 - 31 in a 32 bit integer.
    /** @type {?} */
    const mask = 1 << bloomHash;
    /** @type {?} */
    const b7 = bloomHash & 0x80;
    /** @type {?} */
    const b6 = bloomHash & 0x40;
    /** @type {?} */
    const b5 = bloomHash & 0x20;
    // Our bloom filter size is 256 bits, which is eight 32-bit bloom filter buckets:
    // bf0 = [0 - 31], bf1 = [32 - 63], bf2 = [64 - 95], bf3 = [96 - 127], etc.
    // Get the bloom filter value from the appropriate bucket based on the directive's bloomBit.
    /** @type {?} */
    let value;
    if (b7) {
        value = b6 ? (b5 ? injectorView[injectorIndex + 7] : injectorView[injectorIndex + 6]) :
            (b5 ? injectorView[injectorIndex + 5] : injectorView[injectorIndex + 4]);
    }
    else {
        value = b6 ? (b5 ? injectorView[injectorIndex + 3] : injectorView[injectorIndex + 2]) :
            (b5 ? injectorView[injectorIndex + 1] : injectorView[injectorIndex]);
    }
    // If the bloom filter value has the bit corresponding to the directive's bloomBit flipped on,
    // this injector is a potential match.
    return !!(value & mask);
}
/**
 * Returns true if flags prevent parent injector from being searched for tokens
 * @param {?} flags
 * @param {?} isFirstHostTNode
 * @return {?}
 */
function shouldSearchParent(flags, isFirstHostTNode) {
    return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
}
class NodeInjector {
    /**
     * @param {?} _tNode
     * @param {?} _lView
     */
    constructor(_tNode, _lView) {
        this._tNode = _tNode;
        this._lView = _lView;
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    get(token, notFoundValue) {
        return getOrCreateInjectable(this._tNode, this._lView, token, undefined, notFoundValue);
    }
}
if (false) {}
/**
 * \@codeGenApi
 * @template T
 * @param {?} type
 * @return {?}
 */
function ɵɵgetFactoryOf(type) {
    /** @type {?} */
    const typeAny = (/** @type {?} */ (type));
    if (isForwardRef(type)) {
        return (/** @type {?} */ (((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const factory = ɵɵgetFactoryOf(resolveForwardRef(typeAny));
            return factory ? factory() : null;
        }))));
    }
    /** @type {?} */
    let factory = getFactoryDef(typeAny);
    if (factory === null) {
        /** @type {?} */
        const injectorDef = getInjectorDef(typeAny);
        factory = injectorDef && injectorDef.factory;
    }
    return factory || null;
}
/**
 * \@codeGenApi
 * @template T
 * @param {?} type
 * @return {?}
 */
function ɵɵgetInheritedFactory(type) {
    return noSideEffects((/**
     * @return {?}
     */
    () => {
        /** @type {?} */
        const proto = (/** @type {?} */ (Object.getPrototypeOf(type.prototype).constructor));
        /** @type {?} */
        const factory = ((/** @type {?} */ (proto)))[NG_FACTORY_DEF] || ɵɵgetFactoryOf(proto);
        if (factory !== null) {
            return factory;
        }
        else {
            // There is no factory defined. Either this was improper usage of inheritance
            // (no Angular decorator on the superclass) or there is no constructor at all
            // in the inheritance chain. Since the two cases cannot be distinguished, the
            // latter has to be assumed.
            return (/**
             * @param {?} t
             * @return {?}
             */
            (t) => new t());
        }
    }));
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const ERROR_TYPE = 'ngType';
const ERROR_DEBUG_CONTEXT = 'ngDebugContext';
const ERROR_ORIGINAL_ERROR = 'ngOriginalError';
const ERROR_LOGGER = 'ngErrorLogger';
function wrappedError(message, originalError) {
    const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;
    const error = Error(msg);
    error[ERROR_ORIGINAL_ERROR] = originalError;
    return error;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/errors.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} error
 * @return {?}
 */
function getType(error) {
    return ((/** @type {?} */ (error)))[ERROR_TYPE];
}
/**
 * @param {?} error
 * @return {?}
 */
function getDebugContext(error) {
    return ((/** @type {?} */ (error)))[ERROR_DEBUG_CONTEXT];
}
/**
 * @param {?} error
 * @return {?}
 */
function getOriginalError(error) {
    return ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR];
}
/**
 * @param {?} error
 * @return {?}
 */
function getErrorLogger(error) {
    return ((/** @type {?} */ (error)))[ERROR_LOGGER] || defaultErrorLogger;
}
/**
 * @param {?} console
 * @param {...?} values
 * @return {?}
 */
function defaultErrorLogger(console, ...values) {
    ((/** @type {?} */ (console.error)))(...values);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/error_handler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Provides a hook for centralized exception handling.
 *
 * The default implementation of `ErrorHandler` prints error messages to the `console`. To
 * intercept error handling, write a custom exception handler that replaces this default as
 * appropriate for your app.
 *
 * \@usageNotes
 * ### Example
 *
 * ```
 * class MyErrorHandler implements ErrorHandler {
 *   handleError(error) {
 *     // do something with the exception
 *   }
 * }
 *
 * \@NgModule({
 *   providers: [{provide: ErrorHandler, useClass: MyErrorHandler}]
 * })
 * class MyModule {}
 * ```
 *
 * \@publicApi
 */
class ErrorHandler {
    constructor() {
        /**
         * \@internal
         */
        this._console = console;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    handleError(error) {
        /** @type {?} */
        const originalError = this._findOriginalError(error);
        /** @type {?} */
        const context = this._findContext(error);
        // Note: Browser consoles show the place from where console.error was called.
        // We can use this to give users additional information about the error.
        /** @type {?} */
        const errorLogger = getErrorLogger(error);
        errorLogger(this._console, `ERROR`, error);
        if (originalError) {
            errorLogger(this._console, `ORIGINAL ERROR`, originalError);
        }
        if (context) {
            errorLogger(this._console, 'ERROR CONTEXT', context);
        }
    }
    /**
     * \@internal
     * @param {?} error
     * @return {?}
     */
    _findContext(error) {
        if (error) {
            return getDebugContext(error) ? getDebugContext(error) :
                this._findContext(getOriginalError(error));
        }
        return null;
    }
    /**
     * \@internal
     * @param {?} error
     * @return {?}
     */
    _findOriginalError(error) {
        /** @type {?} */
        let e = getOriginalError(error);
        while (e && getOriginalError(e)) {
            e = getOriginalError(e);
        }
        return e;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/metadata/schema.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * A schema definition associated with an NgModule.
 *
 * @see `\@NgModule`, `CUSTOM_ELEMENTS_SCHEMA`, `NO_ERRORS_SCHEMA`
 *
 * @param name The name of a defined schema.
 *
 * \@publicApi
 * @record
 */
function SchemaMetadata() { }
if (false) {}
/**
 * Defines a schema that allows an NgModule to contain the following:
 * - Non-Angular elements named with dash case (`-`).
 * - Element properties named with dash case (`-`).
 * Dash case is the naming convention for custom elements.
 *
 * \@publicApi
 * @type {?}
 */
const CUSTOM_ELEMENTS_SCHEMA = {
    name: 'custom-elements'
};
/**
 * Defines a schema that allows any property on any element.
 *
 * \@publicApi
 * @type {?}
 */
const NO_ERRORS_SCHEMA = {
    name: 'no-errors-schema'
};

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/sanitization/bypass.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {string} */
const BypassType = {
    Url: "URL",
    Html: "HTML",
    ResourceUrl: "ResourceURL",
    Script: "Script",
    Style: "Style",
};
/**
 * Marker interface for a value that's safe to use in a particular context.
 *
 * \@publicApi
 * @record
 */
function SafeValue() { }
/**
 * Marker interface for a value that's safe to use as HTML.
 *
 * \@publicApi
 * @record
 */
function SafeHtml() { }
/**
 * Marker interface for a value that's safe to use as style (CSS).
 *
 * \@publicApi
 * @record
 */
function SafeStyle() { }
/**
 * Marker interface for a value that's safe to use as JavaScript.
 *
 * \@publicApi
 * @record
 */
function SafeScript() { }
/**
 * Marker interface for a value that's safe to use as a URL linking to a document.
 *
 * \@publicApi
 * @record
 */
function SafeUrl() { }
/**
 * Marker interface for a value that's safe to use as a URL to load executable code from.
 *
 * \@publicApi
 * @record
 */
function SafeResourceUrl() { }
/**
 * @abstract
 */
class SafeValueImpl {
    /**
     * @param {?} changingThisBreaksApplicationSecurity
     */
    constructor(changingThisBreaksApplicationSecurity) {
        this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
    }
    /**
     * @return {?}
     */
    toString() {
        return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +
            ` (see http://g.co/ng/security#xss)`;
    }
}
if (false) {}
class SafeHtmlImpl extends SafeValueImpl {
    /**
     * @return {?}
     */
    getTypeName() { return "HTML" /* Html */; }
}
class SafeStyleImpl extends SafeValueImpl {
    /**
     * @return {?}
     */
    getTypeName() { return "Style" /* Style */; }
}
class SafeScriptImpl extends SafeValueImpl {
    /**
     * @return {?}
     */
    getTypeName() { return "Script" /* Script */; }
}
class SafeUrlImpl extends SafeValueImpl {
    /**
     * @return {?}
     */
    getTypeName() { return "URL" /* Url */; }
}
class SafeResourceUrlImpl extends SafeValueImpl {
    /**
     * @return {?}
     */
    getTypeName() { return "ResourceURL" /* ResourceUrl */; }
}
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function unwrapSafeValue(value) {
    return value instanceof SafeValueImpl ? (/** @type {?} */ ((/** @type {?} */ (value.changingThisBreaksApplicationSecurity)))) :
        (/** @type {?} */ ((/** @type {?} */ (value))));
}
/**
 * @param {?} value
 * @param {?} type
 * @return {?}
 */
function allowSanitizationBypassAndThrow(value, type) {
    /** @type {?} */
    const actualType = getSanitizationBypassType(value);
    if (actualType != null && actualType !== type) {
        // Allow ResourceURLs in URL contexts, they are strictly more trusted.
        if (actualType === "ResourceURL" /* ResourceUrl */ && type === "URL" /* Url */)
            return true;
        throw new Error(`Required a safe ${type}, got a ${actualType} (see http://g.co/ng/security#xss)`);
    }
    return actualType === type;
}
/**
 * @param {?} value
 * @return {?}
 */
function getSanitizationBypassType(value) {
    return value instanceof SafeValueImpl && (/** @type {?} */ (value.getTypeName())) || null;
}
/**
 * Mark `html` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {\@link htmlSanitizer} to be trusted implicitly.
 *
 * @param {?} trustedHtml `html` string which needs to be implicitly trusted.
 * @return {?} a `html` which has been branded to be implicitly trusted.
 */
function bypassSanitizationTrustHtml(trustedHtml) {
    return new SafeHtmlImpl(trustedHtml);
}
/**
 * Mark `style` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {\@link styleSanitizer} to be trusted implicitly.
 *
 * @param {?} trustedStyle `style` string which needs to be implicitly trusted.
 * @return {?} a `style` hich has been branded to be implicitly trusted.
 */
function bypassSanitizationTrustStyle(trustedStyle) {
    return new SafeStyleImpl(trustedStyle);
}
/**
 * Mark `script` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {\@link scriptSanitizer} to be trusted implicitly.
 *
 * @param {?} trustedScript `script` string which needs to be implicitly trusted.
 * @return {?} a `script` which has been branded to be implicitly trusted.
 */
function bypassSanitizationTrustScript(trustedScript) {
    return new SafeScriptImpl(trustedScript);
}
/**
 * Mark `url` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {\@link urlSanitizer} to be trusted implicitly.
 *
 * @param {?} trustedUrl `url` string which needs to be implicitly trusted.
 * @return {?} a `url`  which has been branded to be implicitly trusted.
 */
function bypassSanitizationTrustUrl(trustedUrl) {
    return new SafeUrlImpl(trustedUrl);
}
/**
 * Mark `url` string as trusted.
 *
 * This function wraps the trusted string in `String` and brands it in a way which makes it
 * recognizable to {\@link resourceUrlSanitizer} to be trusted implicitly.
 *
 * @param {?} trustedResourceUrl `url` string which needs to be implicitly trusted.
 * @return {?} a `url` which has been branded to be implicitly trusted.
 */
function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
    return new SafeResourceUrlImpl(trustedResourceUrl);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This file is used to control if the default rendering pipeline should be `ViewEngine` or `Ivy`.
 *
 * For more information on how to run and debug tests with either Ivy or View Engine (legacy),
 * please see [BAZEL.md](./docs/BAZEL.md).
 */
let _devMode = true;
let _runModeLocked = false;
/**
 * Returns whether Angular is in development mode. After called once,
 * the value is locked and won't change any more.
 *
 * By default, this is true, unless a user calls `enableProdMode` before calling this.
 *
 * @publicApi
 */
function isDevMode() {
    _runModeLocked = true;
    return _devMode;
}
/**
 * Disable Angular's development mode, which turns off assertions and other
 * checks within the framework.
 *
 * One important assertion this disables verifies that a change detection pass
 * does not result in additional changes to any bindings (also known as
 * unidirectional data flow).
 *
 * @publicApi
 */
function enableProdMode() {
    if (_runModeLocked) {
        throw new Error('Cannot enable prod mode after platform setup.');
    }
    _devMode = false;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/sanitization/inert_body.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * This helper class is used to get hold of an inert tree of DOM elements containing dirty HTML
 * that needs sanitizing.
 * Depending upon browser support we must use one of three strategies for doing this.
 * Support: Safari 10.x -> XHR strategy
 * Support: Firefox -> DomParser strategy
 * Default: InertDocument strategy
 */
class InertBodyHelper {
    /**
     * @param {?} defaultDoc
     */
    constructor(defaultDoc) {
        this.defaultDoc = defaultDoc;
        this.inertDocument = this.defaultDoc.implementation.createHTMLDocument('sanitization-inert');
        /** @type {?} */
        let inertBodyElement = this.inertDocument.body;
        if (inertBodyElement == null) {
            // usually there should be only one body element in the document, but IE doesn't have any, so
            // we need to create one.
            /** @type {?} */
            const inertHtml = this.inertDocument.createElement('html');
            this.inertDocument.appendChild(inertHtml);
            inertBodyElement = this.inertDocument.createElement('body');
            inertHtml.appendChild(inertBodyElement);
        }
        inertBodyElement.innerHTML = '<svg><g onload="this.parentNode.remove()"></g></svg>';
        if (inertBodyElement.querySelector && !inertBodyElement.querySelector('svg')) {
            // We just hit the Safari 10.1 bug - which allows JS to run inside the SVG G element
            // so use the XHR strategy.
            this.getInertBodyElement = this.getInertBodyElement_XHR;
            return;
        }
        inertBodyElement.innerHTML = '<svg><p><style><img src="</style><img src=x onerror=alert(1)//">';
        if (inertBodyElement.querySelector && inertBodyElement.querySelector('svg img')) {
            // We just hit the Firefox bug - which prevents the inner img JS from being sanitized
            // so use the DOMParser strategy, if it is available.
            // If the DOMParser is not available then we are not in Firefox (Server/WebWorker?) so we
            // fall through to the default strategy below.
            if (isDOMParserAvailable()) {
                this.getInertBodyElement = this.getInertBodyElement_DOMParser;
                return;
            }
        }
        // None of the bugs were hit so it is safe for us to use the default InertDocument strategy
        this.getInertBodyElement = this.getInertBodyElement_InertDocument;
    }
    /**
     * Use XHR to create and fill an inert body element (on Safari 10.1)
     * See
     * https://github.com/cure53/DOMPurify/blob/a992d3a75031cb8bb032e5ea8399ba972bdf9a65/src/purify.js#L439-L449
     * @private
     * @param {?} html
     * @return {?}
     */
    getInertBodyElement_XHR(html) {
        // We add these extra elements to ensure that the rest of the content is parsed as expected
        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
        // `<head>` tag.
        html = '<body><remove></remove>' + html + '</body>';
        try {
            html = encodeURI(html);
        }
        catch (_a) {
            return null;
        }
        /** @type {?} */
        const xhr = new XMLHttpRequest();
        xhr.responseType = 'document';
        xhr.open('GET', 'data:text/html;charset=utf-8,' + html, false);
        xhr.send(undefined);
        /** @type {?} */
        const body = xhr.response.body;
        body.removeChild((/** @type {?} */ (body.firstChild)));
        return body;
    }
    /**
     * Use DOMParser to create and fill an inert body element (on Firefox)
     * See https://github.com/cure53/DOMPurify/releases/tag/0.6.7
     *
     * @private
     * @param {?} html
     * @return {?}
     */
    getInertBodyElement_DOMParser(html) {
        // We add these extra elements to ensure that the rest of the content is parsed as expected
        // e.g. leading whitespace is maintained and tags like `<meta>` do not get hoisted to the
        // `<head>` tag.
        html = '<body><remove></remove>' + html + '</body>';
        try {
            /** @type {?} */
            const body = (/** @type {?} */ (new ((/** @type {?} */ (window)))
                .DOMParser()
                .parseFromString(html, 'text/html')
                .body));
            body.removeChild((/** @type {?} */ (body.firstChild)));
            return body;
        }
        catch (_a) {
            return null;
        }
    }
    /**
     * Use an HTML5 `template` element, if supported, or an inert body element created via
     * `createHtmlDocument` to create and fill an inert DOM element.
     * This is the default sane strategy to use if the browser does not require one of the specialised
     * strategies above.
     * @private
     * @param {?} html
     * @return {?}
     */
    getInertBodyElement_InertDocument(html) {
        // Prefer using <template> element if supported.
        /** @type {?} */
        const templateEl = this.inertDocument.createElement('template');
        if ('content' in templateEl) {
            templateEl.innerHTML = html;
            return templateEl;
        }
        // Note that previously we used to do something like `this.inertDocument.body.innerHTML = html`
        // and we returned the inert `body` node. This was changed, because IE seems to treat setting
        // `innerHTML` on an inserted element differently, compared to one that hasn't been inserted
        // yet. In particular, IE appears to split some of the text into multiple text nodes rather
        // than keeping them in a single one which ends up messing with Ivy's i18n parsing further
        // down the line. This has been worked around by creating a new inert `body` and using it as
        // the root node in which we insert the HTML.
        /** @type {?} */
        const inertBody = this.inertDocument.createElement('body');
        inertBody.innerHTML = html;
        // Support: IE 9-11 only
        // strip custom-namespaced attributes on IE<=11
        if (((/** @type {?} */ (this.defaultDoc))).documentMode) {
            this.stripCustomNsAttrs(inertBody);
        }
        return inertBody;
    }
    /**
     * When IE9-11 comes across an unknown namespaced attribute e.g. 'xlink:foo' it adds 'xmlns:ns1'
     * attribute to declare ns1 namespace and prefixes the attribute with 'ns1' (e.g.
     * 'ns1:xlink:foo').
     *
     * This is undesirable since we don't want to allow any of these custom attributes. This method
     * strips them all.
     * @private
     * @param {?} el
     * @return {?}
     */
    stripCustomNsAttrs(el) {
        /** @type {?} */
        const elAttrs = el.attributes;
        // loop backwards so that we can support removals.
        for (let i = elAttrs.length - 1; 0 < i; i--) {
            /** @type {?} */
            const attrib = elAttrs.item(i);
            /** @type {?} */
            const attrName = (/** @type {?} */ (attrib)).name;
            if (attrName === 'xmlns:ns1' || attrName.indexOf('ns1:') === 0) {
                el.removeAttribute(attrName);
            }
        }
        /** @type {?} */
        let childNode = (/** @type {?} */ (el.firstChild));
        while (childNode) {
            if (childNode.nodeType === Node.ELEMENT_NODE)
                this.stripCustomNsAttrs((/** @type {?} */ (childNode)));
            childNode = childNode.nextSibling;
        }
    }
}
if (false) {}
/**
 * We need to determine whether the DOMParser exists in the global context.
 * The try-catch is because, on some browsers, trying to access this property
 * on window can actually throw an error.
 *
 * @suppress {uselessCode}
 * @return {?}
 */
function isDOMParserAvailable() {
    try {
        return !!((/** @type {?} */ (window))).DOMParser;
    }
    catch (_a) {
        return false;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/sanitization/url_sanitizer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A pattern that recognizes a commonly useful subset of URLs that are safe.
 *
 * This regular expression matches a subset of URLs that will not cause script
 * execution if used in URL context within a HTML document. Specifically, this
 * regular expression matches if (comment from here on and regex copied from
 * Soy's EscapingConventions):
 * (1) Either an allowed protocol (http, https, mailto or ftp).
 * (2) or no protocol.  A protocol must be followed by a colon. The below
 *     allows that by allowing colons only after one of the characters [/?#].
 *     A colon after a hash (#) must be in the fragment.
 *     Otherwise, a colon after a (?) must be in a query.
 *     Otherwise, a colon after a single solidus (/) must be in a path.
 *     Otherwise, a colon after a double solidus (//) must be in the authority
 *     (before port).
 *
 * The pattern disallows &, used in HTML entity declarations before
 * one of the characters in [/?#]. This disallows HTML entities used in the
 * protocol name, which should never happen, e.g. "h&#116;tp" for "http".
 * It also disallows HTML entities in the first path part of a relative path,
 * e.g. "foo&lt;bar/baz".  Our existing escaping functions should not produce
 * that. More importantly, it disallows masking of a colon,
 * e.g. "javascript&#58;...".
 *
 * This regular expression was taken from the Closure sanitization library.
 * @type {?}
 */
const SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
/* A pattern that matches safe srcset values */
/** @type {?} */
const SAFE_SRCSET_PATTERN = /^(?:(?:https?|file):|[^&:/?#]*(?:[/?#]|$))/gi;
/**
 * A pattern that matches safe data URLs. Only matches image, video and audio types.
 * @type {?}
 */
const DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+\/]+=*$/i;
/**
 * @param {?} url
 * @return {?}
 */
function _sanitizeUrl(url) {
    url = String(url);
    if (url.match(SAFE_URL_PATTERN) || url.match(DATA_URL_PATTERN))
        return url;
    if (isDevMode()) {
        console.warn(`WARNING: sanitizing unsafe URL value ${url} (see http://g.co/ng/security#xss)`);
    }
    return 'unsafe:' + url;
}
/**
 * @param {?} srcset
 * @return {?}
 */
function sanitizeSrcset(srcset) {
    srcset = String(srcset);
    return srcset.split(',').map((/**
     * @param {?} srcset
     * @return {?}
     */
    (srcset) => _sanitizeUrl(srcset.trim()))).join(', ');
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/sanitization/html_sanitizer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} tags
 * @return {?}
 */
function tagSet(tags) {
    /** @type {?} */
    const res = {};
    for (const t of tags.split(','))
        res[t] = true;
    return res;
}
/**
 * @param {...?} sets
 * @return {?}
 */
function merge(...sets) {
    /** @type {?} */
    const res = {};
    for (const s of sets) {
        for (const v in s) {
            if (s.hasOwnProperty(v))
                res[v] = true;
        }
    }
    return res;
}
// Good source of info about elements and attributes
// http://dev.w3.org/html5/spec/Overview.html#semantics
// http://simon.html5.org/html-elements
// Safe Void Elements - HTML5
// http://dev.w3.org/html5/spec/Overview.html#void-elements
/** @type {?} */
const VOID_ELEMENTS = tagSet('area,br,col,hr,img,wbr');
// Elements that you can, intentionally, leave open (and which close themselves)
// http://dev.w3.org/html5/spec/Overview.html#optional-tags
/** @type {?} */
const OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet('colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr');
/** @type {?} */
const OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet('rp,rt');
/** @type {?} */
const OPTIONAL_END_TAG_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
// Safe Block Elements - HTML5
/** @type {?} */
const BLOCK_ELEMENTS = merge(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet('address,article,' +
    'aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,' +
    'h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul'));
// Inline Elements - HTML5
/** @type {?} */
const INLINE_ELEMENTS = merge(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet('a,abbr,acronym,audio,b,' +
    'bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,' +
    'samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video'));
/** @type {?} */
const VALID_ELEMENTS = merge(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
// Attributes that have href and hence need to be sanitized
/** @type {?} */
const URI_ATTRS = tagSet('background,cite,href,itemtype,longdesc,poster,src,xlink:href');
// Attributes that have special href set hence need to be sanitized
/** @type {?} */
const SRCSET_ATTRS = tagSet('srcset');
/** @type {?} */
const HTML_ATTRS = tagSet('abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,' +
    'compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,' +
    'ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,' +
    'scope,scrolling,shape,size,sizes,span,srclang,start,summary,tabindex,target,title,translate,type,usemap,' +
    'valign,value,vspace,width');
// Accessibility attributes as per WAI-ARIA 1.1 (W3C Working Draft 14 December 2018)
/** @type {?} */
const ARIA_ATTRS = tagSet('aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,' +
    'aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,' +
    'aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,' +
    'aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,' +
    'aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,' +
    'aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,' +
    'aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext');
// NB: This currently consciously doesn't support SVG. SVG sanitization has had several security
// issues in the past, so it seems safer to leave it out if possible. If support for binding SVG via
// innerHTML is required, SVG attributes should be added here.
// NB: Sanitization does not allow <form> elements or other active elements (<button> etc). Those
// can be sanitized, but they increase security surface area without a legitimate use case, so they
// are left out here.
/** @type {?} */
const VALID_ATTRS = merge(URI_ATTRS, SRCSET_ATTRS, HTML_ATTRS, ARIA_ATTRS);
// Elements whose content should not be traversed/preserved, if the elements themselves are invalid.
//
// Typically, `<invalid>Some content</invalid>` would traverse (and in this case preserve)
// `Some content`, but strip `invalid-element` opening/closing tags. For some elements, though, we
// don't want to preserve the content, if the elements themselves are going to be removed.
/** @type {?} */
const SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet('script,style,template');
/**
 * SanitizingHtmlSerializer serializes a DOM fragment, stripping out any unsafe elements and unsafe
 * attributes.
 */
class SanitizingHtmlSerializer {
    constructor() {
        // Explicitly track if something was stripped, to avoid accidentally warning of sanitization just
        // because characters were re-encoded.
        this.sanitizedSomething = false;
        this.buf = [];
    }
    /**
     * @param {?} el
     * @return {?}
     */
    sanitizeChildren(el) {
        // This cannot use a TreeWalker, as it has to run on Angular's various DOM adapters.
        // However this code never accesses properties off of `document` before deleting its contents
        // again, so it shouldn't be vulnerable to DOM clobbering.
        /** @type {?} */
        let current = (/** @type {?} */ (el.firstChild));
        /** @type {?} */
        let traverseContent = true;
        while (current) {
            if (current.nodeType === Node.ELEMENT_NODE) {
                traverseContent = this.startElement((/** @type {?} */ (current)));
            }
            else if (current.nodeType === Node.TEXT_NODE) {
                this.chars((/** @type {?} */ (current.nodeValue)));
            }
            else {
                // Strip non-element, non-text nodes.
                this.sanitizedSomething = true;
            }
            if (traverseContent && current.firstChild) {
                current = (/** @type {?} */ (current.firstChild));
                continue;
            }
            while (current) {
                // Leaving the element. Walk up and to the right, closing tags as we go.
                if (current.nodeType === Node.ELEMENT_NODE) {
                    this.endElement((/** @type {?} */ (current)));
                }
                /** @type {?} */
                let next = this.checkClobberedElement(current, (/** @type {?} */ (current.nextSibling)));
                if (next) {
                    current = next;
                    break;
                }
                current = this.checkClobberedElement(current, (/** @type {?} */ (current.parentNode)));
            }
        }
        return this.buf.join('');
    }
    /**
     * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
     * be traversed. Element content must always be traversed (even if the element itself is not
     * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
     *
     * @private
     * @param {?} element The element to sanitize.
     * @return {?} True if the element's contents should be traversed.
     */
    startElement(element) {
        /** @type {?} */
        const tagName = element.nodeName.toLowerCase();
        if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
            this.sanitizedSomething = true;
            return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
        }
        this.buf.push('<');
        this.buf.push(tagName);
        /** @type {?} */
        const elAttrs = element.attributes;
        for (let i = 0; i < elAttrs.length; i++) {
            /** @type {?} */
            const elAttr = elAttrs.item(i);
            /** @type {?} */
            const attrName = (/** @type {?} */ (elAttr)).name;
            /** @type {?} */
            const lower = attrName.toLowerCase();
            if (!VALID_ATTRS.hasOwnProperty(lower)) {
                this.sanitizedSomething = true;
                continue;
            }
            /** @type {?} */
            let value = (/** @type {?} */ (elAttr)).value;
            // TODO(martinprobst): Special case image URIs for data:image/...
            if (URI_ATTRS[lower])
                value = _sanitizeUrl(value);
            if (SRCSET_ATTRS[lower])
                value = sanitizeSrcset(value);
            this.buf.push(' ', attrName, '="', encodeEntities(value), '"');
        }
        this.buf.push('>');
        return true;
    }
    /**
     * @private
     * @param {?} current
     * @return {?}
     */
    endElement(current) {
        /** @type {?} */
        const tagName = current.nodeName.toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
            this.buf.push('</');
            this.buf.push(tagName);
            this.buf.push('>');
        }
    }
    /**
     * @private
     * @param {?} chars
     * @return {?}
     */
    chars(chars) { this.buf.push(encodeEntities(chars)); }
    /**
     * @param {?} node
     * @param {?} nextNode
     * @return {?}
     */
    checkClobberedElement(node, nextNode) {
        if (nextNode &&
            (node.compareDocumentPosition(nextNode) &
                Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
            throw new Error(`Failed to sanitize html because the element is clobbered: ${((/** @type {?} */ (node))).outerHTML}`);
        }
        return nextNode;
    }
}
if (false) {}
// Regular Expressions for parsing tags and attributes
/** @type {?} */
const SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
// ! to ~ is the ASCII range.
/** @type {?} */
const NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
/**
 * Escapes all potentially dangerous characters, so that the
 * resulting string can be safely inserted into attribute or
 * element text.
 * @param {?} value
 * @return {?}
 */
function encodeEntities(value) {
    return value.replace(/&/g, '&amp;')
        .replace(SURROGATE_PAIR_REGEXP, (/**
     * @param {?} match
     * @return {?}
     */
    function (match) {
        /** @type {?} */
        const hi = match.charCodeAt(0);
        /** @type {?} */
        const low = match.charCodeAt(1);
        return '&#' + (((hi - 0xD800) * 0x400) + (low - 0xDC00) + 0x10000) + ';';
    }))
        .replace(NON_ALPHANUMERIC_REGEXP, (/**
     * @param {?} match
     * @return {?}
     */
    function (match) { return '&#' + match.charCodeAt(0) + ';'; }))
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
}
/** @type {?} */
let inertBodyHelper;
/**
 * Sanitizes the given unsafe, untrusted HTML fragment, and returns HTML text that is safe to add to
 * the DOM in a browser environment.
 * @param {?} defaultDoc
 * @param {?} unsafeHtmlInput
 * @return {?}
 */
function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
    /** @type {?} */
    let inertBodyElement = null;
    try {
        inertBodyHelper = inertBodyHelper || new InertBodyHelper(defaultDoc);
        // Make sure unsafeHtml is actually a string (TypeScript types are not enforced at runtime).
        /** @type {?} */
        let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : '';
        inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
        // mXSS protection. Repeatedly parse the document to make sure it stabilizes, so that a browser
        // trying to auto-correct incorrect HTML cannot cause formerly inert HTML to become dangerous.
        /** @type {?} */
        let mXSSAttempts = 5;
        /** @type {?} */
        let parsedHtml = unsafeHtml;
        do {
            if (mXSSAttempts === 0) {
                throw new Error('Failed to sanitize html because the input is unstable');
            }
            mXSSAttempts--;
            unsafeHtml = parsedHtml;
            parsedHtml = (/** @type {?} */ (inertBodyElement)).innerHTML;
            inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
        } while (unsafeHtml !== parsedHtml);
        /** @type {?} */
        const sanitizer = new SanitizingHtmlSerializer();
        /** @type {?} */
        const safeHtml = sanitizer.sanitizeChildren((/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement);
        if (isDevMode() && sanitizer.sanitizedSomething) {
            console.warn('WARNING: sanitizing HTML stripped some content, see http://g.co/ng/security#xss');
        }
        return safeHtml;
    }
    finally {
        // In case anything goes wrong, clear out inertElement to reset the entire DOM structure.
        if (inertBodyElement) {
            /** @type {?} */
            const parent = getTemplateContent(inertBodyElement) || inertBodyElement;
            while (parent.firstChild) {
                parent.removeChild(parent.firstChild);
            }
        }
    }
}
/**
 * @param {?} el
 * @return {?}
 */
function getTemplateContent(el) {
    return 'content' in ((/** @type {?} */ (el))) && isTemplateElement(el) ?
        el.content :
        null;
}
/**
 * @param {?} el
 * @return {?}
 */
function isTemplateElement(el) {
    return el.nodeType === Node.ELEMENT_NODE && el.nodeName === 'TEMPLATE';
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/sanitization/security.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
const SecurityContext = {
    NONE: 0,
    HTML: 1,
    STYLE: 2,
    SCRIPT: 3,
    URL: 4,
    RESOURCE_URL: 5,
};
SecurityContext[SecurityContext.NONE] = 'NONE';
SecurityContext[SecurityContext.HTML] = 'HTML';
SecurityContext[SecurityContext.STYLE] = 'STYLE';
SecurityContext[SecurityContext.SCRIPT] = 'SCRIPT';
SecurityContext[SecurityContext.URL] = 'URL';
SecurityContext[SecurityContext.RESOURCE_URL] = 'RESOURCE_URL';

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/sanitization/style_sanitizer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Regular expression for safe style values.
 *
 * Quotes (" and ') are allowed, but a check must be done elsewhere to ensure they're balanced.
 *
 * ',' allows multiple values to be assigned to the same property (e.g. background-attachment or
 * font-family) and hence could allow multiple values to get injected, but that should pose no risk
 * of XSS.
 *
 * The function expression checks only for XSS safety, not for CSS validity.
 *
 * This regular expression was taken from the Closure sanitization library, and augmented for
 * transformation values.
 * @type {?}
 */
const VALUES = '[-,."\'%_!# a-zA-Z0-9]+';
/** @type {?} */
const TRANSFORMATION_FNS = '(?:matrix|translate|scale|rotate|skew|perspective)(?:X|Y|Z|3d)?';
/** @type {?} */
const COLOR_FNS = '(?:rgb|hsl)a?';
/** @type {?} */
const GRADIENTS = '(?:repeating-)?(?:linear|radial)-gradient';
/** @type {?} */
const CSS3_FNS = '(?:attr|calc|var)';
/** @type {?} */
const FN_ARGS = '\\([-0-9.%, #a-zA-Z]+\\)';
/** @type {?} */
const SAFE_STYLE_VALUE = new RegExp(`^(${VALUES}|` +
    `(?:${TRANSFORMATION_FNS}|${COLOR_FNS}|${GRADIENTS}|${CSS3_FNS})` +
    `${FN_ARGS})$`, 'g');
/**
 * Matches a `url(...)` value with an arbitrary argument as long as it does
 * not contain parentheses.
 *
 * The URL value still needs to be sanitized separately.
 *
 * `url(...)` values are a very common use case, e.g. for `background-image`. With carefully crafted
 * CSS style rules, it is possible to construct an information leak with `url` values in CSS, e.g.
 * by observing whether scroll bars are displayed, or character ranges used by a font face
 * definition.
 *
 * Angular only allows binding CSS values (as opposed to entire CSS rules), so it is unlikely that
 * binding a URL value without further cooperation from the page will cause an information leak, and
 * if so, it is just a leak, not a full blown XSS vulnerability.
 *
 * Given the common use case, low likelihood of attack vector, and low impact of an attack, this
 * code is permissive and allows URLs that sanitize otherwise.
 * @type {?}
 */
const URL_RE = /^url\(([^)]+)\)$/;
/**
 * Checks that quotes (" and ') are properly balanced inside a string. Assumes
 * that neither escape (\) nor any other character that could result in
 * breaking out of a string parsing context are allowed;
 * see http://www.w3.org/TR/css3-syntax/#string-token-diagram.
 *
 * This code was taken from the Closure sanitization library.
 * @param {?} value
 * @return {?}
 */
function hasBalancedQuotes(value) {
    /** @type {?} */
    let outsideSingle = true;
    /** @type {?} */
    let outsideDouble = true;
    for (let i = 0; i < value.length; i++) {
        /** @type {?} */
        const c = value.charAt(i);
        if (c === '\'' && outsideDouble) {
            outsideSingle = !outsideSingle;
        }
        else if (c === '"' && outsideSingle) {
            outsideDouble = !outsideDouble;
        }
    }
    return outsideSingle && outsideDouble;
}
/**
 * Sanitizes the given untrusted CSS style property value (i.e. not an entire object, just a single
 * value) and returns a value that is safe to use in a browser environment.
 * @param {?} value
 * @return {?}
 */
function _sanitizeStyle(value) {
    value = String(value).trim(); // Make sure it's actually a string.
    if (!value)
        return '';
    // Single url(...) values are supported, but only for URLs that sanitize cleanly. See above for
    // reasoning behind this.
    /** @type {?} */
    const urlMatch = value.match(URL_RE);
    if ((urlMatch && _sanitizeUrl(urlMatch[1]) === urlMatch[1]) ||
        value.match(SAFE_STYLE_VALUE) && hasBalancedQuotes(value)) {
        return value; // Safe style values.
    }
    if (isDevMode()) {
        console.warn(`WARNING: sanitizing unsafe style value ${value} (see http://g.co/ng/security#xss).`);
    }
    return 'unsafe';
}
/** @enum {number} */
const StyleSanitizeMode = {
    /** Just check to see if the property is required to be sanitized or not */
    ValidateProperty: 1,
    /** Skip checking the property; just sanitize the value */
    SanitizeOnly: 2,
    /** Check the property and (if true) then sanitize the value */
    ValidateAndSanitize: 3,
};
/**
 * Used to intercept and sanitize style values before they are written to the renderer.
 *
 * This function is designed to be called in two modes. When a value is not provided
 * then the function will return a boolean whether a property will be sanitized later.
 * If a value is provided then the sanitized version of that will be returned.
 * @record
 */
function StyleSanitizeFn() { }

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/sanitization/sanitization.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An `html` sanitizer which converts untrusted `html` **string** into trusted string by removing
 * dangerous content.
 *
 * This method parses the `html` and locates potentially dangerous content (such as urls and
 * javascript) and removes it.
 *
 * It is possible to mark a string as trusted by calling {\@link bypassSanitizationTrustHtml}.
 *
 * \@publicApi
 * @param {?} unsafeHtml untrusted `html`, typically from the user.
 * @return {?} `html` string which is safe to display to user, because all of the dangerous javascript
 * and urls have been removed.
 *
 */
function ɵɵsanitizeHtml(unsafeHtml) {
    /** @type {?} */
    const sanitizer = getSanitizer();
    if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || '';
    }
    if (allowSanitizationBypassAndThrow(unsafeHtml, "HTML" /* Html */)) {
        return unwrapSafeValue(unsafeHtml);
    }
    return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
}
/**
 * A `style` sanitizer which converts untrusted `style` **string** into trusted string by removing
 * dangerous content.
 *
 * This method parses the `style` and locates potentially dangerous content (such as urls and
 * javascript) and removes it.
 *
 * It is possible to mark a string as trusted by calling {\@link bypassSanitizationTrustStyle}.
 *
 * \@publicApi
 * @param {?} unsafeStyle untrusted `style`, typically from the user.
 * @return {?} `style` string which is safe to bind to the `style` properties, because all of the
 * dangerous javascript and urls have been removed.
 *
 */
function ɵɵsanitizeStyle(unsafeStyle) {
    /** @type {?} */
    const sanitizer = getSanitizer();
    if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || '';
    }
    if (allowSanitizationBypassAndThrow(unsafeStyle, "Style" /* Style */)) {
        return unwrapSafeValue(unsafeStyle);
    }
    return _sanitizeStyle(renderStringify(unsafeStyle));
}
/**
 * A `url` sanitizer which converts untrusted `url` **string** into trusted string by removing
 * dangerous
 * content.
 *
 * This method parses the `url` and locates potentially dangerous content (such as javascript) and
 * removes it.
 *
 * It is possible to mark a string as trusted by calling {\@link bypassSanitizationTrustUrl}.
 *
 * \@publicApi
 * @param {?} unsafeUrl untrusted `url`, typically from the user.
 * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because
 * all of the dangerous javascript has been removed.
 *
 */
function ɵɵsanitizeUrl(unsafeUrl) {
    /** @type {?} */
    const sanitizer = getSanitizer();
    if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || '';
    }
    if (allowSanitizationBypassAndThrow(unsafeUrl, "URL" /* Url */)) {
        return unwrapSafeValue(unsafeUrl);
    }
    return _sanitizeUrl(renderStringify(unsafeUrl));
}
/**
 * A `url` sanitizer which only lets trusted `url`s through.
 *
 * This passes only `url`s marked trusted by calling {\@link bypassSanitizationTrustResourceUrl}.
 *
 * \@publicApi
 * @param {?} unsafeResourceUrl untrusted `url`, typically from the user.
 * @return {?} `url` string which is safe to bind to the `src` properties such as `<img src>`, because
 * only trusted `url`s have been allowed to pass.
 *
 */
function ɵɵsanitizeResourceUrl(unsafeResourceUrl) {
    /** @type {?} */
    const sanitizer = getSanitizer();
    if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || '';
    }
    if (allowSanitizationBypassAndThrow(unsafeResourceUrl, "ResourceURL" /* ResourceUrl */)) {
        return unwrapSafeValue(unsafeResourceUrl);
    }
    throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
}
/**
 * A `script` sanitizer which only lets trusted javascript through.
 *
 * This passes only `script`s marked trusted by calling {\@link
 * bypassSanitizationTrustScript}.
 *
 * \@publicApi
 * @param {?} unsafeScript untrusted `script`, typically from the user.
 * @return {?} `url` string which is safe to bind to the `<script>` element such as `<img src>`,
 * because only trusted `scripts` have been allowed to pass.
 *
 */
function ɵɵsanitizeScript(unsafeScript) {
    /** @type {?} */
    const sanitizer = getSanitizer();
    if (sanitizer) {
        return sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || '';
    }
    if (allowSanitizationBypassAndThrow(unsafeScript, "Script" /* Script */)) {
        return unwrapSafeValue(unsafeScript);
    }
    throw new Error('unsafe value used in a script context');
}
/**
 * Detects which sanitizer to use for URL property, based on tag name and prop name.
 *
 * The rules are based on the RESOURCE_URL context config from
 * `packages/compiler/src/schema/dom_security_schema.ts`.
 * If tag and prop names don't match Resource URL schema, use URL sanitizer.
 * @param {?} tag
 * @param {?} prop
 * @return {?}
 */
function getUrlSanitizer(tag, prop) {
    if ((prop === 'src' && (tag === 'embed' || tag === 'frame' || tag === 'iframe' ||
        tag === 'media' || tag === 'script')) ||
        (prop === 'href' && (tag === 'base' || tag === 'link'))) {
        return ɵɵsanitizeResourceUrl;
    }
    return ɵɵsanitizeUrl;
}
/**
 * Sanitizes URL, selecting sanitizer function based on tag and property names.
 *
 * This function is used in case we can't define security context at compile time, when only prop
 * name is available. This happens when we generate host bindings for Directives/Components. The
 * host element is unknown at compile time, so we defer calculation of specific sanitizer to
 * runtime.
 *
 * \@publicApi
 * @param {?} unsafeUrl untrusted `url`, typically from the user.
 * @param {?} tag target element tag name.
 * @param {?} prop name of the property that contains the value.
 * @return {?} `url` string which is safe to bind.
 *
 */
function ɵɵsanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
    return getUrlSanitizer(tag, prop)(unsafeUrl);
}
/**
 * The default style sanitizer will handle sanitization for style properties by
 * sanitizing any CSS property that can include a `url` value (usually image-based properties)
 *
 * \@publicApi
 * @type {?}
 */
const ɵɵdefaultStyleSanitizer = ((/** @type {?} */ ((/**
 * @param {?} prop
 * @param {?} value
 * @param {?=} mode
 * @return {?}
 */
function (prop, value, mode) {
    if (value === undefined && mode === undefined) {
        // This is a workaround for the fact that `StyleSanitizeFn` should not exist once PR#34480
        // lands. For now the `StyleSanitizeFn` and should act like `(value: any) => string` as a
        // work around.
        return ɵɵsanitizeStyle(prop);
    }
    mode = mode || 3 /* ValidateAndSanitize */;
    /** @type {?} */
    let doSanitizeValue = true;
    if (mode & 1 /* ValidateProperty */) {
        doSanitizeValue = stylePropNeedsSanitization(prop);
    }
    if (mode & 2 /* SanitizeOnly */) {
        return doSanitizeValue ? ɵɵsanitizeStyle(value) : unwrapSafeValue(value);
    }
    else {
        return doSanitizeValue;
    }
}))));
/**
 * @param {?} prop
 * @return {?}
 */
function stylePropNeedsSanitization(prop) {
    return prop === 'background-image' || prop === 'backgroundImage' || prop === 'background' ||
        prop === 'border-image' || prop === 'borderImage' || prop === 'border-image-source' ||
        prop === 'borderImageSource' || prop === 'filter' || prop === 'list-style' ||
        prop === 'listStyle' || prop === 'list-style-image' || prop === 'listStyleImage' ||
        prop === 'clip-path' || prop === 'clipPath';
}
/**
 * @param {?} name
 * @return {?}
 */
function validateAgainstEventProperties(name) {
    if (name.toLowerCase().startsWith('on')) {
        /** @type {?} */
        const msg = `Binding to event property '${name}' is disallowed for security reasons, ` +
            `please use (${name.slice(2)})=...` +
            `\nIf '${name}' is a directive input, make sure the directive is imported by the` +
            ` current module.`;
        throw new Error(msg);
    }
}
/**
 * @param {?} name
 * @return {?}
 */
function validateAgainstEventAttributes(name) {
    if (name.toLowerCase().startsWith('on')) {
        /** @type {?} */
        const msg = `Binding to event attribute '${name}' is disallowed for security reasons, ` +
            `please use (${name.slice(2)})=...`;
        throw new Error(msg);
    }
}
/**
 * @return {?}
 */
function getSanitizer() {
    /** @type {?} */
    const lView = getLView();
    return lView && lView[SANITIZER];
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * THIS FILE CONTAINS CODE WHICH SHOULD BE TREE SHAKEN AND NEVER CALLED FROM PRODUCTION CODE!!!
 */
/**
 * Creates an `Array` construction with a given name. This is useful when
 * looking for memory consumption to see what time of array it is.
 *
 *
 * @param name Name to give to the constructor
 * @returns A subclass of `Array` if possible. This can only be done in
 *          environments which support `class` construct.
 */
function createNamedArrayType(name) {
    // This should never be called in prod mode, so let's verify that is the case.
    if (ngDevMode) {
        try {
            // We need to do it this way so that TypeScript does not down-level the below code.
            const FunctionConstructor = createNamedArrayType.constructor;
            return (new FunctionConstructor('Array', `return class ${name} extends Array{}`))(Array);
        }
        catch (e) {
            // If it does not work just give up and fall back to regular Array.
            return Array;
        }
    }
    else {
        throw new Error('Looks like we are in \'prod mode\', but we are creating a named Array type, which is wrong! Check your code');
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function normalizeDebugBindingName(name) {
    // Attribute names with `$` (eg `x-y$`) are valid per spec, but unsupported by some browsers
    name = camelCaseToDashCase(name.replace(/[$@]/g, '_'));
    return `ng-reflect-${name}`;
}
const CAMEL_CASE_REGEXP = /([A-Z])/g;
function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, (...m) => '-' + m[1].toLowerCase());
}
function normalizeDebugBindingValue(value) {
    try {
        // Limit the size of the value as otherwise the DOM just gets polluted.
        return value != null ? value.toString().slice(0, 30) : value;
    }
    catch (e) {
        return '[ERROR] Exception while trying to serialize the value';
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/context_discovery.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Returns the matching `LContext` data for a given DOM node, directive or component instance.
 *
 * This function will examine the provided DOM element, component, or directive instance\'s
 * monkey-patched property to derive the `LContext` data. Once called then the monkey-patched
 * value will be that of the newly created `LContext`.
 *
 * If the monkey-patched value is the `LView` instance then the context value for that
 * target will be created and the monkey-patch reference will be updated. Therefore when this
 * function is called it may mutate the provided element\'s, component\'s or any of the associated
 * directive\'s monkey-patch values.
 *
 * If the monkey-patch value is not detected then the code will walk up the DOM until an element
 * is found which contains a monkey-patch reference. When that occurs then the provided element
 * will be updated with a new context (which is then returned). If the monkey-patch value is not
 * detected for a component/directive instance then it will throw an error (all components and
 * directives should be automatically monkey-patched by ivy).
 *
 * @param {?} target Component, Directive or DOM Node.
 * @return {?}
 */
function getLContext(target) {
    /** @type {?} */
    let mpValue = readPatchedData(target);
    if (mpValue) {
        // only when it's an array is it considered an LView instance
        // ... otherwise it's an already constructed LContext instance
        if (Array.isArray(mpValue)) {
            /** @type {?} */
            const lView = (/** @type {?} */ (mpValue));
            /** @type {?} */
            let nodeIndex;
            /** @type {?} */
            let component = undefined;
            /** @type {?} */
            let directives = undefined;
            if (isComponentInstance(target)) {
                nodeIndex = findViaComponent(lView, target);
                if (nodeIndex == -1) {
                    throw new Error('The provided component was not found in the application');
                }
                component = target;
            }
            else if (isDirectiveInstance(target)) {
                nodeIndex = findViaDirective(lView, target);
                if (nodeIndex == -1) {
                    throw new Error('The provided directive was not found in the application');
                }
                directives = getDirectivesAtNodeIndex(nodeIndex, lView, false);
            }
            else {
                nodeIndex = findViaNativeElement(lView, (/** @type {?} */ (target)));
                if (nodeIndex == -1) {
                    return null;
                }
            }
            // the goal is not to fill the entire context full of data because the lookups
            // are expensive. Instead, only the target data (the element, component, container, ICU
            // expression or directive details) are filled into the context. If called multiple times
            // with different target values then the missing target data will be filled in.
            /** @type {?} */
            const native = unwrapRNode(lView[nodeIndex]);
            /** @type {?} */
            const existingCtx = readPatchedData(native);
            /** @type {?} */
            const context = (existingCtx && !Array.isArray(existingCtx)) ?
                existingCtx :
                createLContext(lView, nodeIndex, native);
            // only when the component has been discovered then update the monkey-patch
            if (component && context.component === undefined) {
                context.component = component;
                attachPatchData(context.component, context);
            }
            // only when the directives have been discovered then update the monkey-patch
            if (directives && context.directives === undefined) {
                context.directives = directives;
                for (let i = 0; i < directives.length; i++) {
                    attachPatchData(directives[i], context);
                }
            }
            attachPatchData(context.native, context);
            mpValue = context;
        }
    }
    else {
        /** @type {?} */
        const rElement = (/** @type {?} */ (target));
        ngDevMode && assertDomNode(rElement);
        // if the context is not found then we need to traverse upwards up the DOM
        // to find the nearest element that has already been monkey patched with data
        /** @type {?} */
        let parent = (/** @type {?} */ (rElement));
        while (parent = parent.parentNode) {
            /** @type {?} */
            const parentContext = readPatchedData(parent);
            if (parentContext) {
                /** @type {?} */
                let lView;
                if (Array.isArray(parentContext)) {
                    lView = (/** @type {?} */ (parentContext));
                }
                else {
                    lView = parentContext.lView;
                }
                // the edge of the app was also reached here through another means
                // (maybe because the DOM was changed manually).
                if (!lView) {
                    return null;
                }
                /** @type {?} */
                const index = findViaNativeElement(lView, rElement);
                if (index >= 0) {
                    /** @type {?} */
                    const native = unwrapRNode(lView[index]);
                    /** @type {?} */
                    const context = createLContext(lView, index, native);
                    attachPatchData(native, context);
                    mpValue = context;
                    break;
                }
            }
        }
    }
    return ((/** @type {?} */ (mpValue))) || null;
}
/**
 * Creates an empty instance of a `LContext` context
 * @param {?} lView
 * @param {?} nodeIndex
 * @param {?} native
 * @return {?}
 */
function createLContext(lView, nodeIndex, native) {
    return {
        lView,
        nodeIndex,
        native,
        component: undefined,
        directives: undefined,
        localRefs: undefined,
    };
}
/**
 * Takes a component instance and returns the view for that component.
 *
 * @param {?} componentInstance
 * @return {?} The component's view
 */
function getComponentViewByInstance(componentInstance) {
    /** @type {?} */
    let lView = readPatchedData(componentInstance);
    /** @type {?} */
    let view;
    if (Array.isArray(lView)) {
        /** @type {?} */
        const nodeIndex = findViaComponent(lView, componentInstance);
        view = getComponentLViewByIndex(nodeIndex, lView);
        /** @type {?} */
        const context = createLContext(lView, nodeIndex, (/** @type {?} */ (view[HOST])));
        context.component = componentInstance;
        attachPatchData(componentInstance, context);
        attachPatchData(context.native, context);
    }
    else {
        /** @type {?} */
        const context = (/** @type {?} */ ((/** @type {?} */ (lView))));
        view = getComponentLViewByIndex(context.nodeIndex, context.lView);
    }
    return view;
}
/**
 * Assigns the given data to the given target (which could be a component,
 * directive or DOM node instance) using monkey-patching.
 * @param {?} target
 * @param {?} data
 * @return {?}
 */
function attachPatchData(target, data) {
    target[MONKEY_PATCH_KEY_NAME] = data;
}
/**
 * @param {?} instance
 * @return {?}
 */
function isComponentInstance(instance) {
    return instance && instance.constructor && instance.constructor.ɵcmp;
}
/**
 * @param {?} instance
 * @return {?}
 */
function isDirectiveInstance(instance) {
    return instance && instance.constructor && instance.constructor.ɵdir;
}
/**
 * Locates the element within the given LView and returns the matching index
 * @param {?} lView
 * @param {?} target
 * @return {?}
 */
function findViaNativeElement(lView, target) {
    /** @type {?} */
    let tNode = lView[TVIEW].firstChild;
    while (tNode) {
        /** @type {?} */
        const native = (/** @type {?} */ (getNativeByTNodeOrNull(tNode, lView)));
        if (native === target) {
            return tNode.index;
        }
        tNode = traverseNextElement(tNode);
    }
    return -1;
}
/**
 * Locates the next tNode (child, sibling or parent).
 * @param {?} tNode
 * @return {?}
 */
function traverseNextElement(tNode) {
    if (tNode.child) {
        return tNode.child;
    }
    else if (tNode.next) {
        return tNode.next;
    }
    else {
        // Let's take the following template: <div><span>text</span></div><component/>
        // After checking the text node, we need to find the next parent that has a "next" TNode,
        // in this case the parent `div`, so that we can find the component.
        while (tNode.parent && !tNode.parent.next) {
            tNode = tNode.parent;
        }
        return tNode.parent && tNode.parent.next;
    }
}
/**
 * Locates the component within the given LView and returns the matching index
 * @param {?} lView
 * @param {?} componentInstance
 * @return {?}
 */
function findViaComponent(lView, componentInstance) {
    /** @type {?} */
    const componentIndices = lView[TVIEW].components;
    if (componentIndices) {
        for (let i = 0; i < componentIndices.length; i++) {
            /** @type {?} */
            const elementComponentIndex = componentIndices[i];
            /** @type {?} */
            const componentView = getComponentLViewByIndex(elementComponentIndex, lView);
            if (componentView[CONTEXT] === componentInstance) {
                return elementComponentIndex;
            }
        }
    }
    else {
        /** @type {?} */
        const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
        /** @type {?} */
        const rootComponent = rootComponentView[CONTEXT];
        if (rootComponent === componentInstance) {
            // we are dealing with the root element here therefore we know that the
            // element is the very first element after the HEADER data in the lView
            return HEADER_OFFSET;
        }
    }
    return -1;
}
/**
 * Locates the directive within the given LView and returns the matching index
 * @param {?} lView
 * @param {?} directiveInstance
 * @return {?}
 */
function findViaDirective(lView, directiveInstance) {
    // if a directive is monkey patched then it will (by default)
    // have a reference to the LView of the current view. The
    // element bound to the directive being search lives somewhere
    // in the view data. We loop through the nodes and check their
    // list of directives for the instance.
    /** @type {?} */
    let tNode = lView[TVIEW].firstChild;
    while (tNode) {
        /** @type {?} */
        const directiveIndexStart = tNode.directiveStart;
        /** @type {?} */
        const directiveIndexEnd = tNode.directiveEnd;
        for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {
            if (lView[i] === directiveInstance) {
                return tNode.index;
            }
        }
        tNode = traverseNextElement(tNode);
    }
    return -1;
}
/**
 * Returns a list of directives extracted from the given view based on the
 * provided list of directive index values.
 *
 * @param {?} nodeIndex The node index
 * @param {?} lView The target view data
 * @param {?} includeComponents Whether or not to include components in returned directives
 * @return {?}
 */
function getDirectivesAtNodeIndex(nodeIndex, lView, includeComponents) {
    /** @type {?} */
    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));
    /** @type {?} */
    let directiveStartIndex = tNode.directiveStart;
    if (directiveStartIndex == 0)
        return EMPTY_ARRAY;
    /** @type {?} */
    const directiveEndIndex = tNode.directiveEnd;
    if (!includeComponents && tNode.flags & 2 /* isComponentHost */)
        directiveStartIndex++;
    return lView.slice(directiveStartIndex, directiveEndIndex);
}
/**
 * @param {?} nodeIndex
 * @param {?} lView
 * @return {?}
 */
function getComponentAtNodeIndex(nodeIndex, lView) {
    /** @type {?} */
    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));
    /** @type {?} */
    let directiveStartIndex = tNode.directiveStart;
    return tNode.flags & 2 /* isComponentHost */ ? lView[directiveStartIndex] : null;
}
/**
 * Returns a map of local references (local reference name => element or directive instance) that
 * exist on a given element.
 * @param {?} lView
 * @param {?} nodeIndex
 * @return {?}
 */
function discoverLocalRefs(lView, nodeIndex) {
    /** @type {?} */
    const tNode = (/** @type {?} */ (lView[TVIEW].data[nodeIndex]));
    if (tNode && tNode.localNames) {
        /** @type {?} */
        const result = {};
        /** @type {?} */
        let localIndex = tNode.index + 1;
        for (let i = 0; i < tNode.localNames.length; i += 2) {
            result[tNode.localNames[i]] = lView[localIndex];
            localIndex++;
        }
        return result;
    }
    return null;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/errors.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Called when directives inject each other (creating a circular dependency)
 * @param {?} token
 * @return {?}
 */
function throwCyclicDependencyError(token) {
    throw new Error(`Cannot instantiate cyclic dependency! ${token}`);
}
/**
 * Called when there are multiple component selectors that match a given node
 * @param {?} tNode
 * @return {?}
 */
function throwMultipleComponentError(tNode) {
    throw new Error(`Multiple components match node with tagname ${tNode.tagName}`);
}
/**
 * @return {?}
 */
function throwMixedMultiProviderError() {
    throw new Error(`Cannot mix multi providers and regular providers`);
}
/**
 * @param {?=} ngModuleType
 * @param {?=} providers
 * @param {?=} provider
 * @return {?}
 */
function throwInvalidProviderError(ngModuleType, providers, provider) {
    /** @type {?} */
    let ngModuleDetail = '';
    if (ngModuleType && providers) {
        /** @type {?} */
        const providerDetail = providers.map((/**
         * @param {?} v
         * @return {?}
         */
        v => v == provider ? '?' + provider + '?' : '...'));
        ngModuleDetail =
            ` - only instances of Provider and Type are allowed, got: [${providerDetail.join(', ')}]`;
    }
    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}'` + ngModuleDetail);
}
/**
 * Throws an ExpressionChangedAfterChecked error if checkNoChanges mode is on.
 * @param {?} creationMode
 * @param {?} oldValue
 * @param {?} currValue
 * @param {?=} propName
 * @return {?}
 */
function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName) {
    /** @type {?} */
    const field = propName ? ` for '${propName}'` : '';
    /** @type {?} */
    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${oldValue}'. Current value: '${currValue}'.`;
    if (creationMode) {
        msg +=
            ` It seems like the view has been created after its parent and its children have been dirty checked.` +
                ` Has it been created in a change detection hook?`;
    }
    // TODO: include debug context, see `viewDebugError` function in
    // `packages/core/src/view/errors.ts` for reference.
    throw new Error(msg);
}
/**
 * @param {?} lView
 * @param {?} rootIndex
 * @param {?} expressionIndex
 * @param {?} meta
 * @param {?} changedValue
 * @return {?}
 */
function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
    const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);
    /** @type {?} */
    let oldValue = prefix;
    /** @type {?} */
    let newValue = prefix;
    for (let i = 0; i < chunks.length; i++) {
        /** @type {?} */
        const slotIdx = rootIndex + i;
        oldValue += `${lView[slotIdx]}${chunks[i]}`;
        newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;
    }
    return { propName, oldValue, newValue };
}
/**
 * Constructs an object that contains details for the ExpressionChangedAfterItHasBeenCheckedError:
 * - property name (for property bindings or interpolations)
 * - old and new values, enriched using information from metadata
 *
 * More information on the metadata storage format can be found in `storePropertyBindingMetadata`
 * function description.
 * @param {?} lView
 * @param {?} bindingIndex
 * @param {?} oldValue
 * @param {?} newValue
 * @return {?}
 */
function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
    /** @type {?} */
    const tData = lView[TVIEW].data;
    /** @type {?} */
    const metadata = tData[bindingIndex];
    if (typeof metadata === 'string') {
        // metadata for property interpolation
        if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
            return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
        }
        // metadata for property binding
        return { propName: metadata, oldValue, newValue };
    }
    // metadata is not available for this expression, check if this expression is a part of the
    // property interpolation by going from the current binding index left and look for a string that
    // contains INTERPOLATION_DELIMITER, the layout in tView.data for this case will look like this:
    // [..., 'id�Prefix � and � suffix', null, null, null, ...]
    if (metadata === null) {
        /** @type {?} */
        let idx = bindingIndex - 1;
        while (typeof tData[idx] !== 'string' && tData[idx + 1] === null) {
            idx--;
        }
        /** @type {?} */
        const meta = tData[idx];
        if (typeof meta === 'string') {
            /** @type {?} */
            const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, 'g'));
            // first interpolation delimiter separates property name from interpolation parts (in case of
            // property interpolations), so we subtract one from total number of found delimiters
            if (matches && (matches.length - 1) > bindingIndex - idx) {
                return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
            }
        }
    }
    return { propName: undefined, oldValue, newValue };
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/node.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const TNodeType = {
    /**
     * The TNode contains information about an {@link LContainer} for embedded views.
     */
    Container: 0,
    /**
     * The TNode contains information about an `<ng-content>` projection
     */
    Projection: 1,
    /**
     * The TNode contains information about an {@link LView}
     */
    View: 2,
    /**
     * The TNode contains information about a DOM element aka {@link RNode}.
     */
    Element: 3,
    /**
     * The TNode contains information about an `<ng-container>` element {@link RNode}.
     */
    ElementContainer: 4,
    /**
     * The TNode contains information about an ICU comment used in `i18n`.
     */
    IcuContainer: 5,
};
/** @enum {number} */
const TNodeFlags = {
    /** Bit #1 - This bit is set if the node is a host for any directive (including a component) */
    isDirectiveHost: 1,
    /**
     * Bit #2 - This bit is set if the node is a host for a component.
     *
     * Setting this bit implies that the `isDirectiveHost` bit is set as well.
     * */
    isComponentHost: 2,
    /** Bit #3 - This bit is set if the node has been projected */
    isProjected: 4,
    /** Bit #4 - This bit is set if any directive on this node has content queries */
    hasContentQuery: 8,
    /** Bit #5 - This bit is set if the node has any "class" inputs */
    hasClassInput: 16,
    /** Bit #6 - This bit is set if the node has any "style" inputs */
    hasStyleInput: 32,
    /** Bit #7 This bit is set if the node has been detached by i18n */
    isDetached: 64,
    /**
     * Bit #8 - This bit is set if the node has directives with host bindings.
     *
     * This flags allows us to guard host-binding logic and invoke it only on nodes
     * that actually have directives with host bindings.
     */
    hasHostBindings: 128,
};
/** @enum {number} */
const TNodeProviderIndexes = {
    /** The index of the first provider on this node is encoded on the least significant bits */
    ProvidersStartIndexMask: 65535,
    /** The count of view providers from the component on this node is encoded on the 16 most
       significant bits */
    CptViewProvidersCountShift: 16,
    CptViewProvidersCountShifter: 65536,
};
/** @enum {number} */
const AttributeMarker = {
    /**
     * An implicit marker which indicates that the value in the array are of `attributeKey`,
     * `attributeValue` format.
     *
     * NOTE: This is implicit as it is the type when no marker is present in array. We indicate that
     * it should not be present at runtime by the negative number.
     */
    ImplicitAttributes: -1,
    /**
     * Marker indicates that the following 3 values in the attributes array are:
     * namespaceUri, attributeName, attributeValue
     * in that order.
     */
    NamespaceURI: 0,
    /**
      * Signals class declaration.
      *
      * Each value following `Classes` designates a class name to include on the element.
      * ## Example:
      *
      * Given:
      * ```
      * <div class="foo bar baz">...<d/vi>
      * ```
      *
      * the generated code is:
      * ```
      * var _c1 = [AttributeMarker.Classes, 'foo', 'bar', 'baz'];
      * ```
      */
    Classes: 1,
    /**
     * Signals style declaration.
     *
     * Each pair of values following `Styles` designates a style name and value to include on the
     * element.
     * ## Example:
     *
     * Given:
     * ```
     * <div style="width:100px; height:200px; color:red">...</div>
     * ```
     *
     * the generated code is:
     * ```
     * var _c1 = [AttributeMarker.Styles, 'width', '100px', 'height'. '200px', 'color', 'red'];
     * ```
     */
    Styles: 2,
    /**
     * Signals that the following attribute names were extracted from input or output bindings.
     *
     * For example, given the following HTML:
     *
     * ```
     * <div moo="car" [foo]="exp" (bar)="doSth()">
     * ```
     *
     * the generated code is:
     *
     * ```
     * var _c1 = ['moo', 'car', AttributeMarker.Bindings, 'foo', 'bar'];
     * ```
     */
    Bindings: 3,
    /**
     * Signals that the following attribute names were hoisted from an inline-template declaration.
     *
     * For example, given the following HTML:
     *
     * ```
     * <div *ngFor="let value of values; trackBy:trackBy" dirA [dirB]="value">
     * ```
     *
     * the generated code for the `template()` instruction would include:
     *
     * ```
     * ['dirA', '', AttributeMarker.Bindings, 'dirB', AttributeMarker.Template, 'ngFor', 'ngForOf',
     * 'ngForTrackBy', 'let-value']
     * ```
     *
     * while the generated code for the `element()` instruction inside the template function would
     * include:
     *
     * ```
     * ['dirA', '', AttributeMarker.Bindings, 'dirB']
     * ```
     */
    Template: 4,
    /**
     * Signals that the following attribute is `ngProjectAs` and its value is a parsed `CssSelector`.
     *
     * For example, given the following HTML:
     *
     * ```
     * <h1 attr="value" ngProjectAs="[title]">
     * ```
     *
     * the generated code for the `element()` instruction would include:
     *
     * ```
     * ['attr', 'value', AttributeMarker.ProjectAs, ['', 'title', '']]
     * ```
     */
    ProjectAs: 5,
    /**
     * Signals that the following attribute will be translated by runtime i18n
     *
     * For example, given the following HTML:
     *
     * ```
     * <div moo="car" foo="value" i18n-foo [bar]="binding" i18n-bar>
     * ```
     *
     * the generated code is:
     *
     * ```
     * var _c1 = ['moo', 'car', AttributeMarker.I18n, 'foo', 'bar'];
     */
    I18n: 6,
};
/**
 * Binding data (flyweight) for a particular node that is shared between all templates
 * of a specific type.
 *
 * If a property is:
 *    - PropertyAliases: that property's data was generated and this is it
 *    - Null: that property's data was already generated and nothing was found.
 *    - Undefined: that property's data has not yet been generated
 *
 * see: https://en.wikipedia.org/wiki/Flyweight_pattern for more on the Flyweight pattern
 * @record
 */
function TNode() { }
if (false) {}
/**
 * Static data for an element
 * @record
 */
function TElementNode() { }
if (false) {}
/**
 * Static data for a text node
 * @record
 */
function TTextNode() { }
if (false) {}
/**
 * Static data for an LContainer
 * @record
 */
function TContainerNode() { }
if (false) {}
/**
 * Static data for an <ng-container>
 * @record
 */
function TElementContainerNode() { }
if (false) {}
/**
 * Static data for an ICU expression
 * @record
 */
function TIcuContainerNode() { }
if (false) {}
/**
 * Static data for a view
 * @record
 */
function TViewNode() { }
if (false) {}
/**
 * Static data for an LProjectionNode
 * @record
 */
function TProjectionNode() { }
if (false) {}
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
/** @type {?} */
const unusedValueExportToPlacateAjd$4 = 1;
/**
 * Returns `true` if the `TNode` has a directive which has `\@Input()` for `class` binding.
 *
 * ```
 * <div my-dir [class]="exp"></div>
 * ```
 * and
 * ```
 * \@Directive({
 * })
 * class MyDirective {
 * \@Input()
 *   class: string;
 * }
 * ```
 *
 * In the above case it is necessary to write the reconciled styling information into the
 * directive's input.
 *
 * @param {?} tNode
 * @return {?}
 */
function hasClassInput(tNode) {
    return (tNode.flags & 16 /* hasClassInput */) !== 0;
}
/**
 * Returns `true` if the `TNode` has a directive which has `\@Input()` for `style` binding.
 *
 * ```
 * <div my-dir [style]="exp"></div>
 * ```
 * and
 * ```
 * \@Directive({
 * })
 * class MyDirective {
 * \@Input()
 *   class: string;
 * }
 * ```
 *
 * In the above case it is necessary to write the reconciled styling information into the
 * directive's input.
 *
 * @param {?} tNode
 * @return {?}
 */
function hasStyleInput(tNode) {
    return (tNode.flags & 32 /* hasStyleInput */) !== 0;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/projection.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
const SelectorFlags = {
    /** Indicates this is the beginning of a new negative selector */
    NOT: 1,
    /** Mode for matching attributes */
    ATTRIBUTE: 2,
    /** Mode for matching tag names */
    ELEMENT: 4,
    /** Mode for matching class names */
    CLASS: 8,
};
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
/** @type {?} */
const unusedValueExportToPlacateAjd$5 = 1;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/styling/class_differ.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Returns an index of `classToSearch` in `className` taking token boundaries into account.
 *
 * `classIndexOf('AB A', 'A', 0)` will be 3 (not 0 since `AB!==A`)
 *
 * @param {?} className A string containing classes (whitespace separated)
 * @param {?} classToSearch A class name to locate
 * @param {?} startingIndex Starting location of search
 * @return {?} an index of the located class (or -1 if not found)
 */
function classIndexOf(className, classToSearch, startingIndex) {
    ngDevMode && assertNotEqual(classToSearch, '', 'can not look for "" string.');
    /** @type {?} */
    let end = className.length;
    while (true) {
        /** @type {?} */
        const foundIndex = className.indexOf(classToSearch, startingIndex);
        if (foundIndex === -1)
            return foundIndex;
        if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32 /* SPACE */) {
            // Ensure that it has leading whitespace
            /** @type {?} */
            const length = classToSearch.length;
            if (foundIndex + length === end ||
                className.charCodeAt(foundIndex + length) <= 32 /* SPACE */) {
                // Ensure that it has trailing whitespace
                return foundIndex;
            }
        }
        // False positive, keep searching from where we left off.
        startingIndex = foundIndex + 1;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/node_selector_matcher.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const unusedValueToPlacateAjd = unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5;
/** @type {?} */
const NG_TEMPLATE_SELECTOR = 'ng-template';
/**
 * Search the `TAttributes` to see if it contains `cssClassToMatch` (case insensitive)
 *
 * @param {?} attrs `TAttributes` to search through.
 * @param {?} cssClassToMatch class to match (lowercase)
 * @param {?} isProjectionMode Whether or not class matching should look into the attribute `class` in
 *    addition to the `AttributeMarker.Classes`.
 * @return {?}
 */
function isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {
    // TODO(misko): The fact that this function needs to know about `isProjectionMode` seems suspect.
    // It is strange to me that sometimes the class information comes in form of `class` attribute
    // and sometimes in form of `AttributeMarker.Classes`. Some investigation is needed to determine
    // if that is the right behavior.
    ngDevMode &&
        assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), 'Class name expected to be lowercase.');
    /** @type {?} */
    let i = 0;
    while (i < attrs.length) {
        /** @type {?} */
        let item = attrs[i++];
        if (isProjectionMode && item === 'class') {
            item = (/** @type {?} */ (attrs[i]));
            if (classIndexOf(item.toLowerCase(), cssClassToMatch, 0) !== -1) {
                return true;
            }
        }
        else if (item === 1 /* Classes */) {
            // We found the classes section. Start searching for the class.
            while (i < attrs.length && typeof (item = attrs[i++]) == 'string') {
                // while we have strings
                if (item.toLowerCase() === cssClassToMatch)
                    return true;
            }
            return false;
        }
    }
    return false;
}
/**
 * Function that checks whether a given tNode matches tag-based selector and has a valid type.
 *
 * Matching can be performed in 2 modes: projection mode (when we project nodes) and regular
 * directive matching mode:
 * - in the "directive matching" mode we do _not_ take TContainer's tagName into account if it is
 * different from NG_TEMPLATE_SELECTOR (value different from NG_TEMPLATE_SELECTOR indicates that a
 * tag name was extracted from * syntax so we would match the same directive twice);
 * - in the "projection" mode, we use a tag name potentially extracted from the * syntax processing
 * (applicable to TNodeType.Container only).
 * @param {?} tNode
 * @param {?} currentSelector
 * @param {?} isProjectionMode
 * @return {?}
 */
function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
    /** @type {?} */
    const tagNameToCompare = tNode.type === 0 /* Container */ && !isProjectionMode ?
        NG_TEMPLATE_SELECTOR :
        tNode.tagName;
    return currentSelector === tagNameToCompare;
}
/**
 * A utility function to match an Ivy node static data against a simple CSS selector
 *
 * @param {?} tNode
 * @param {?} selector The selector to try matching against the node.
 * @param {?} isProjectionMode if `true` we are matching for content projection, otherwise we are doing
 * directive matching.
 * @return {?} true if node matches the selector.
 */
function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
    ngDevMode && assertDefined(selector[0], 'Selector should have a tag name');
    /** @type {?} */
    let mode = 4 /* ELEMENT */;
    /** @type {?} */
    const nodeAttrs = tNode.attrs || [];
    // Find the index of first attribute that has no value, only a name.
    /** @type {?} */
    const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);
    // When processing ":not" selectors, we skip to the next ":not" if the
    // current one doesn't match
    /** @type {?} */
    let skipToNextSelector = false;
    for (let i = 0; i < selector.length; i++) {
        /** @type {?} */
        const current = selector[i];
        if (typeof current === 'number') {
            // If we finish processing a :not selector and it hasn't failed, return false
            if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
                return false;
            }
            // If we are skipping to the next :not() and this mode flag is positive,
            // it's a part of the current :not() selector, and we should keep skipping
            if (skipToNextSelector && isPositive(current))
                continue;
            skipToNextSelector = false;
            mode = ((/** @type {?} */ (current))) | (mode & 1 /* NOT */);
            continue;
        }
        if (skipToNextSelector)
            continue;
        if (mode & 4 /* ELEMENT */) {
            mode = 2 /* ATTRIBUTE */ | mode & 1 /* NOT */;
            if (current !== '' && !hasTagAndTypeMatch(tNode, current, isProjectionMode) ||
                current === '' && selector.length === 1) {
                if (isPositive(mode))
                    return false;
                skipToNextSelector = true;
            }
        }
        else {
            /** @type {?} */
            const selectorAttrValue = mode & 8 /* CLASS */ ? current : selector[++i];
            // special case for matching against classes when a tNode has been instantiated with
            // class and style values as separate attribute values (e.g. ['title', CLASS, 'foo'])
            if ((mode & 8 /* CLASS */) && tNode.attrs !== null) {
                if (!isCssClassMatching(tNode.attrs, (/** @type {?} */ (selectorAttrValue)), isProjectionMode)) {
                    if (isPositive(mode))
                        return false;
                    skipToNextSelector = true;
                }
                continue;
            }
            /** @type {?} */
            const isInlineTemplate = tNode.type == 0 /* Container */ && tNode.tagName !== NG_TEMPLATE_SELECTOR;
            /** @type {?} */
            const attrName = (mode & 8 /* CLASS */) ? 'class' : current;
            /** @type {?} */
            const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate, isProjectionMode);
            if (attrIndexInNode === -1) {
                if (isPositive(mode))
                    return false;
                skipToNextSelector = true;
                continue;
            }
            if (selectorAttrValue !== '') {
                /** @type {?} */
                let nodeAttrValue;
                if (attrIndexInNode > nameOnlyMarkerIdx) {
                    nodeAttrValue = '';
                }
                else {
                    ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0 /* NamespaceURI */, 'We do not match directives on namespaced attributes');
                    // we lowercase the attribute value to be able to match
                    // selectors without case-sensitivity
                    // (selectors are already in lowercase when generated)
                    nodeAttrValue = ((/** @type {?} */ (nodeAttrs[attrIndexInNode + 1]))).toLowerCase();
                }
                /** @type {?} */
                const compareAgainstClassName = mode & 8 /* CLASS */ ? nodeAttrValue : null;
                if (compareAgainstClassName &&
                    classIndexOf(compareAgainstClassName, (/** @type {?} */ (selectorAttrValue)), 0) !== -1 ||
                    mode & 2 /* ATTRIBUTE */ && selectorAttrValue !== nodeAttrValue) {
                    if (isPositive(mode))
                        return false;
                    skipToNextSelector = true;
                }
            }
        }
    }
    return isPositive(mode) || skipToNextSelector;
}
/**
 * @param {?} mode
 * @return {?}
 */
function isPositive(mode) {
    return (mode & 1 /* NOT */) === 0;
}
/**
 * Examines the attribute's definition array for a node to find the index of the
 * attribute that matches the given `name`.
 *
 * NOTE: This will not match namespaced attributes.
 *
 * Attribute matching depends upon `isInlineTemplate` and `isProjectionMode`.
 * The following table summarizes which types of attributes we attempt to match:
 *
 * ===========================================================================================================
 * Modes                   | Normal Attributes | Bindings Attributes | Template Attributes | I18n
 * Attributes
 * ===========================================================================================================
 * Inline + Projection     | YES               | YES                 | NO                  | YES
 * -----------------------------------------------------------------------------------------------------------
 * Inline + Directive      | NO                | NO                  | YES                 | NO
 * -----------------------------------------------------------------------------------------------------------
 * Non-inline + Projection | YES               | YES                 | NO                  | YES
 * -----------------------------------------------------------------------------------------------------------
 * Non-inline + Directive  | YES               | YES                 | NO                  | YES
 * ===========================================================================================================
 *
 * @param {?} name the name of the attribute to find
 * @param {?} attrs the attribute array to examine
 * @param {?} isInlineTemplate true if the node being matched is an inline template (e.g. `*ngFor`)
 * rather than a manually expanded template node (e.g `<ng-template>`).
 * @param {?} isProjectionMode true if we are matching against content projection otherwise we are
 * matching against directives.
 * @return {?}
 */
function findAttrIndexInNode(name, attrs, isInlineTemplate, isProjectionMode) {
    if (attrs === null)
        return -1;
    /** @type {?} */
    let i = 0;
    if (isProjectionMode || !isInlineTemplate) {
        /** @type {?} */
        let bindingsMode = false;
        while (i < attrs.length) {
            /** @type {?} */
            const maybeAttrName = attrs[i];
            if (maybeAttrName === name) {
                return i;
            }
            else if (maybeAttrName === 3 /* Bindings */ || maybeAttrName === 6 /* I18n */) {
                bindingsMode = true;
            }
            else if (maybeAttrName === 1 /* Classes */ || maybeAttrName === 2 /* Styles */) {
                /** @type {?} */
                let value = attrs[++i];
                // We should skip classes here because we have a separate mechanism for
                // matching classes in projection mode.
                while (typeof value === 'string') {
                    value = attrs[++i];
                }
                continue;
            }
            else if (maybeAttrName === 4 /* Template */) {
                // We do not care about Template attributes in this scenario.
                break;
            }
            else if (maybeAttrName === 0 /* NamespaceURI */) {
                // Skip the whole namespaced attribute and value. This is by design.
                i += 4;
                continue;
            }
            // In binding mode there are only names, rather than name-value pairs.
            i += bindingsMode ? 1 : 2;
        }
        // We did not match the attribute
        return -1;
    }
    else {
        return matchTemplateAttribute(attrs, name);
    }
}
/**
 * @param {?} tNode
 * @param {?} selector
 * @param {?=} isProjectionMode
 * @return {?}
 */
function isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {
    for (let i = 0; i < selector.length; i++) {
        if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
            return true;
        }
    }
    return false;
}
/**
 * @param {?} tNode
 * @return {?}
 */
function getProjectAsAttrValue(tNode) {
    /** @type {?} */
    const nodeAttrs = tNode.attrs;
    if (nodeAttrs != null) {
        /** @type {?} */
        const ngProjectAsAttrIdx = nodeAttrs.indexOf(5 /* ProjectAs */);
        // only check for ngProjectAs in attribute names, don't accidentally match attribute's value
        // (attribute names are stored at even indexes)
        if ((ngProjectAsAttrIdx & 1) === 0) {
            return (/** @type {?} */ (nodeAttrs[ngProjectAsAttrIdx + 1]));
        }
    }
    return null;
}
/**
 * @param {?} nodeAttrs
 * @return {?}
 */
function getNameOnlyMarkerIndex(nodeAttrs) {
    for (let i = 0; i < nodeAttrs.length; i++) {
        /** @type {?} */
        const nodeAttr = nodeAttrs[i];
        if (isNameOnlyAttributeMarker(nodeAttr)) {
            return i;
        }
    }
    return nodeAttrs.length;
}
/**
 * @param {?} attrs
 * @param {?} name
 * @return {?}
 */
function matchTemplateAttribute(attrs, name) {
    /** @type {?} */
    let i = attrs.indexOf(4 /* Template */);
    if (i > -1) {
        i++;
        while (i < attrs.length) {
            if (attrs[i] === name)
                return i;
            i++;
        }
    }
    return -1;
}
/**
 * Checks whether a selector is inside a CssSelectorList
 * @param {?} selector Selector to be checked.
 * @param {?} list List in which to look for the selector.
 * @return {?}
 */
function isSelectorInSelectorList(selector, list) {
    selectorListLoop: for (let i = 0; i < list.length; i++) {
        /** @type {?} */
        const currentSelectorInList = list[i];
        if (selector.length !== currentSelectorInList.length) {
            continue;
        }
        for (let j = 0; j < selector.length; j++) {
            if (selector[j] !== currentSelectorInList[j]) {
                continue selectorListLoop;
            }
        }
        return true;
    }
    return false;
}
/**
 * @param {?} isNegativeMode
 * @param {?} chunk
 * @return {?}
 */
function maybeWrapInNotSelector(isNegativeMode, chunk) {
    return isNegativeMode ? ':not(' + chunk.trim() + ')' : chunk;
}
/**
 * @param {?} selector
 * @return {?}
 */
function stringifyCSSSelector(selector) {
    /** @type {?} */
    let result = (/** @type {?} */ (selector[0]));
    /** @type {?} */
    let i = 1;
    /** @type {?} */
    let mode = 2 /* ATTRIBUTE */;
    /** @type {?} */
    let currentChunk = '';
    /** @type {?} */
    let isNegativeMode = false;
    while (i < selector.length) {
        /** @type {?} */
        let valueOrMarker = selector[i];
        if (typeof valueOrMarker === 'string') {
            if (mode & 2 /* ATTRIBUTE */) {
                /** @type {?} */
                const attrValue = (/** @type {?} */ (selector[++i]));
                currentChunk +=
                    '[' + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : '') + ']';
            }
            else if (mode & 8 /* CLASS */) {
                currentChunk += '.' + valueOrMarker;
            }
            else if (mode & 4 /* ELEMENT */) {
                currentChunk += ' ' + valueOrMarker;
            }
        }
        else {
            //
            // Append current chunk to the final result in case we come across SelectorFlag, which
            // indicates that the previous section of a selector is over. We need to accumulate content
            // between flags to make sure we wrap the chunk later in :not() selector if needed, e.g.
            // ```
            //  ['', Flags.CLASS, '.classA', Flags.CLASS | Flags.NOT, '.classB', '.classC']
            // ```
            // should be transformed to `.classA :not(.classB .classC)`.
            //
            // Note: for negative selector part, we accumulate content between flags until we find the
            // next negative flag. This is needed to support a case where `:not()` rule contains more than
            // one chunk, e.g. the following selector:
            // ```
            //  ['', Flags.ELEMENT | Flags.NOT, 'p', Flags.CLASS, 'foo', Flags.CLASS | Flags.NOT, 'bar']
            // ```
            // should be stringified to `:not(p.foo) :not(.bar)`
            //
            if (currentChunk !== '' && !isPositive(valueOrMarker)) {
                result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
                currentChunk = '';
            }
            mode = valueOrMarker;
            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
            // mode is maintained for remaining chunks of a selector.
            isNegativeMode = isNegativeMode || !isPositive(mode);
        }
        i++;
    }
    if (currentChunk !== '') {
        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
    }
    return result;
}
/**
 * Generates string representation of CSS selector in parsed form.
 *
 * ComponentDef and DirectiveDef are generated with the selector in parsed form to avoid doing
 * additional parsing at runtime (for example, for directive matching). However in some cases (for
 * example, while bootstrapping a component), a string version of the selector is required to query
 * for the host element on the page. This function takes the parsed form of a selector and returns
 * its string representation.
 *
 * @param {?} selectorList selector in parsed form
 * @return {?} string representation of a given selector
 */
function stringifyCSSSelectorList(selectorList) {
    return selectorList.map(stringifyCSSSelector).join(',');
}
/**
 * Extracts attributes and classes information from a given CSS selector.
 *
 * This function is used while creating a component dynamically. In this case, the host element
 * (that is created dynamically) should contain attributes and classes specified in component's CSS
 * selector.
 *
 * @param {?} selector CSS selector in parsed form (in a form of array)
 * @return {?} object with `attrs` and `classes` fields that contain extracted information
 */
function extractAttrsAndClassesFromSelector(selector) {
    /** @type {?} */
    const attrs = [];
    /** @type {?} */
    const classes = [];
    /** @type {?} */
    let i = 1;
    /** @type {?} */
    let mode = 2 /* ATTRIBUTE */;
    while (i < selector.length) {
        /** @type {?} */
        let valueOrMarker = selector[i];
        if (typeof valueOrMarker === 'string') {
            if (mode === 2 /* ATTRIBUTE */) {
                if (valueOrMarker !== '') {
                    attrs.push(valueOrMarker, (/** @type {?} */ (selector[++i])));
                }
            }
            else if (mode === 8 /* CLASS */) {
                classes.push(valueOrMarker);
            }
        }
        else {
            // According to CssSelector spec, once we come across `SelectorFlags.NOT` flag, the negative
            // mode is maintained for remaining chunks of a selector. Since attributes and classes are
            // extracted only for "positive" part of the selector, we can stop here.
            if (!isPositive(mode))
                break;
            mode = valueOrMarker;
        }
        i++;
    }
    return { attrs, classes };
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/tokens.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// WARNING: interface has both a type and a value, skipping emit
/**
 * A special value which designates that a value has not changed.
 * @type {?}
 */
const NO_CHANGE = (typeof ngDevMode === 'undefined' || ngDevMode) ? { __brand__: 'NO_CHANGE' } : ((/** @type {?} */ ({})));

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/util/view_traversal_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Gets the parent LView of the passed LView, if the PARENT is an LContainer, will get the parent of
 * that LContainer, which is an LView
 * @param {?} lView the lView whose parent to get
 * @return {?}
 */
function getLViewParent(lView) {
    ngDevMode && assertLView(lView);
    /** @type {?} */
    const parent = lView[PARENT];
    return isLContainer(parent) ? (/** @type {?} */ (parent[PARENT])) : parent;
}
/**
 * Retrieve the root view from any component or `LView` by walking the parent `LView` until
 * reaching the root `LView`.
 *
 * @param {?} componentOrLView any component or `LView`
 * @return {?}
 */
function getRootView(componentOrLView) {
    ngDevMode && assertDefined(componentOrLView, 'component');
    /** @type {?} */
    let lView = isLView(componentOrLView) ? componentOrLView : (/** @type {?} */ (readPatchedLView(componentOrLView)));
    while (lView && !(lView[FLAGS] & 512 /* IsRoot */)) {
        lView = (/** @type {?} */ (getLViewParent(lView)));
    }
    ngDevMode && assertLView(lView);
    return lView;
}
/**
 * Returns the `RootContext` instance that is associated with
 * the application where the target is situated. It does this by walking the parent views until it
 * gets to the root view, then getting the context off of that.
 *
 * @param {?} viewOrComponent the `LView` or component to get the root context for.
 * @return {?}
 */
function getRootContext(viewOrComponent) {
    /** @type {?} */
    const rootView = getRootView(viewOrComponent);
    ngDevMode &&
        assertDefined(rootView[CONTEXT], 'RootView has no context. Perhaps it is disconnected?');
    return (/** @type {?} */ (rootView[CONTEXT]));
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/advance.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Advances to an element for later binding instructions.
 *
 * Used in conjunction with instructions like {\@link property} to act on elements with specified
 * indices, for example those created with {\@link element} or {\@link elementStart}.
 *
 * ```ts
 * (rf: RenderFlags, ctx: any) => {
 *   if (rf & 1) {
 *     text(0, 'Hello');
 *     text(1, 'Goodbye')
 *     element(2, 'div');
 *   }
 *   if (rf & 2) {
 *     advance(2); // Advance twice to the <div>.
 *     property('title', 'test');
 *   }
 *  }
 * ```
 * \@codeGenApi
 * @param {?} delta Number of elements to advance forwards by.
 *
 * @return {?}
 */
function ɵɵadvance(delta) {
    ngDevMode && assertGreaterThan(delta, 0, 'Can only advance forward');
    selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, getCheckNoChangesMode());
}
/**
 * Selects an element for later binding instructions.
 * @deprecated No longer being generated, but still used in unit tests.
 * \@codeGenApi
 * @param {?} index
 * @return {?}
 */
function ɵɵselect(index) {
    // TODO(misko): Remove this function as it is no longer being used.
    selectIndexInternal(getTView(), getLView(), index, getCheckNoChangesMode());
}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} index
 * @param {?} checkNoChangesMode
 * @return {?}
 */
function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
    ngDevMode && assertGreaterThan(index, -1, 'Invalid index');
    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);
    // Flush the initial hooks for elements in the view that have been added up to this point.
    // PERF WARNING: do NOT extract this to a separate function without running benchmarks
    if (!checkNoChangesMode) {
        /** @type {?} */
        const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;
        if (hooksInitPhaseCompleted) {
            /** @type {?} */
            const preOrderCheckHooks = tView.preOrderCheckHooks;
            if (preOrderCheckHooks !== null) {
                executeCheckHooks(lView, preOrderCheckHooks, index);
            }
        }
        else {
            /** @type {?} */
            const preOrderHooks = tView.preOrderHooks;
            if (preOrderHooks !== null) {
                executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, index);
            }
        }
    }
    // We must set the selected index *after* running the hooks, because hooks may have side-effects
    // that cause other template functions to run, thus updating the selected index, which is global
    // state. If we run `setSelectedIndex` *before* we run the hooks, in some cases the selected index
    // will be altered by the time we leave the `ɵɵadvance` instruction.
    setSelectedIndex(index);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/i18n.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
const I18nMutateOpCode = {
    /**
     * Stores shift amount for bits 17-3 that contain reference index.
     */
    SHIFT_REF: 3,
    /**
     * Stores shift amount for bits 31-17 that contain parent index.
     */
    SHIFT_PARENT: 17,
    /**
     * Mask for OpCode
     */
    MASK_OPCODE: 7,
    /**
     * OpCode to select a node. (next OpCode will contain the operation.)
     */
    Select: 0,
    /**
     * OpCode to append the current node to `PARENT`.
     */
    AppendChild: 1,
    /**
     * OpCode to remove the `REF` node from `PARENT`.
     */
    Remove: 3,
    /**
     * OpCode to set the attribute of a node.
     */
    Attr: 4,
    /**
     * OpCode to simulate elementEnd()
     */
    ElementEnd: 5,
    /**
     * OpCode to read the remove OpCodes for the nested ICU
     */
    RemoveNestedIcu: 6,
};
/**
 * Marks that the next string is for element.
 *
 * See `I18nMutateOpCodes` documentation.
 * @type {?}
 */
const ELEMENT_MARKER = {
    marker: 'element'
};
// WARNING: interface has both a type and a value, skipping emit
/**
 * Marks that the next string is for comment.
 *
 * See `I18nMutateOpCodes` documentation.
 * @type {?}
 */
const COMMENT_MARKER = {
    marker: 'comment'
};
// WARNING: interface has both a type and a value, skipping emit
/**
 * Array storing OpCode for dynamically creating `i18n` blocks.
 *
 * Example:
 * ```ts
 * <I18nCreateOpCode>[
 *   // For adding text nodes
 *   // ---------------------
 *   // Equivalent to:
 *   //   const node = lView[index++] = document.createTextNode('abc');
 *   //   lView[1].insertBefore(node, lView[2]);
 *   'abc', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,
 *
 *   // Equivalent to:
 *   //   const node = lView[index++] = document.createTextNode('xyz');
 *   //   lView[1].appendChild(node);
 *   'xyz', 1 << SHIFT_PARENT | AppendChild,
 *
 *   // For adding element nodes
 *   // ---------------------
 *   // Equivalent to:
 *   //   const node = lView[index++] = document.createElement('div');
 *   //   lView[1].insertBefore(node, lView[2]);
 *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,
 *
 *   // Equivalent to:
 *   //   const node = lView[index++] = document.createElement('div');
 *   //   lView[1].appendChild(node);
 *   ELEMENT_MARKER, 'div', 1 << SHIFT_PARENT | AppendChild,
 *
 *   // For adding comment nodes
 *   // ---------------------
 *   // Equivalent to:
 *   //   const node = lView[index++] = document.createComment('');
 *   //   lView[1].insertBefore(node, lView[2]);
 *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | 2 << SHIFT_REF | InsertBefore,
 *
 *   // Equivalent to:
 *   //   const node = lView[index++] = document.createComment('');
 *   //   lView[1].appendChild(node);
 *   COMMENT_MARKER, '', 1 << SHIFT_PARENT | AppendChild,
 *
 *   // For moving existing nodes to a different location
 *   // --------------------------------------------------
 *   // Equivalent to:
 *   //   const node = lView[1];
 *   //   lView[2].insertBefore(node, lView[3]);
 *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | 3 << SHIFT_REF | InsertBefore,
 *
 *   // Equivalent to:
 *   //   const node = lView[1];
 *   //   lView[2].appendChild(node);
 *   1 << SHIFT_REF | Select, 2 << SHIFT_PARENT | AppendChild,
 *
 *   // For removing existing nodes
 *   // --------------------------------------------------
 *   //   const node = lView[1];
 *   //   removeChild(tView.data(1), node, lView);
 *   1 << SHIFT_REF | Remove,
 *
 *   // For writing attributes
 *   // --------------------------------------------------
 *   //   const node = lView[1];
 *   //   node.setAttribute('attr', 'value');
 *   1 << SHIFT_REF | Select, 'attr', 'value'
 *            // NOTE: Select followed by two string (vs select followed by OpCode)
 * ];
 * ```
 * NOTE:
 *   - `index` is initial location where the extra nodes should be stored in the EXPANDO section of
 * `LVIewData`.
 *
 * See: `applyI18nCreateOpCodes`;
 * @record
 */
function I18nMutateOpCodes() { }
/** @enum {number} */
const I18nUpdateOpCode = {
    /**
     * Stores shift amount for bits 17-2 that contain reference index.
     */
    SHIFT_REF: 2,
    /**
     * Mask for OpCode
     */
    MASK_OPCODE: 3,
    /**
     * OpCode to update a text node.
     */
    Text: 0,
    /**
     * OpCode to update a attribute of a node.
     */
    Attr: 1,
    /**
     * OpCode to switch the current ICU case.
     */
    IcuSwitch: 2,
    /**
     * OpCode to update the current ICU case.
     */
    IcuUpdate: 3,
};
/**
 * Stores DOM operations which need to be applied to update DOM render tree due to changes in
 * expressions.
 *
 * The basic idea is that `i18nExp` OpCodes capture expression changes and update a change
 * mask bit. (Bit 1 for expression 1, bit 2 for expression 2 etc..., bit 32 for expression 32 and
 * higher.) The OpCodes then compare its own change mask against the expression change mask to
 * determine if the OpCodes should execute.
 *
 * These OpCodes can be used by both the i18n block as well as ICU sub-block.
 *
 * ## Example
 *
 * Assume
 * ```ts
 *   if (rf & RenderFlags.Update) {
 *    i18nExp(ctx.exp1); // If changed set mask bit 1
 *    i18nExp(ctx.exp2); // If changed set mask bit 2
 *    i18nExp(ctx.exp3); // If changed set mask bit 3
 *    i18nExp(ctx.exp4); // If changed set mask bit 4
 *    i18nApply(0);            // Apply all changes by executing the OpCodes.
 *  }
 * ```
 * We can assume that each call to `i18nExp` sets an internal `changeMask` bit depending on the
 * index of `i18nExp`.
 *
 * ### OpCodes
 * ```ts
 * <I18nUpdateOpCodes>[
 *   // The following OpCodes represent: `<div i18n-title="pre{{exp1}}in{{exp2}}post">`
 *   // If `changeMask & 0b11`
 *   //        has changed then execute update OpCodes.
 *   //        has NOT changed then skip `7` values and start processing next OpCodes.
 *   0b11, 7,
 *   // Concatenate `newValue = 'pre'+lView[bindIndex-4]+'in'+lView[bindIndex-3]+'post';`.
 *   'pre', -4, 'in', -3, 'post',
 *   // Update attribute: `elementAttribute(1, 'title', sanitizerFn(newValue));`
 *   1 << SHIFT_REF | Attr, 'title', sanitizerFn,
 *
 *   // The following OpCodes represent: `<div i18n>Hello {{exp3}}!">`
 *   // If `changeMask & 0b100`
 *   //        has changed then execute update OpCodes.
 *   //        has NOT changed then skip `4` values and start processing next OpCodes.
 *   0b100, 4,
 *   // Concatenate `newValue = 'Hello ' + lView[bindIndex -2] + '!';`.
 *   'Hello ', -2, '!',
 *   // Update text: `lView[1].textContent = newValue;`
 *   1 << SHIFT_REF | Text,
 *
 *   // The following OpCodes represent: `<div i18n>{exp4, plural, ... }">`
 *   // If `changeMask & 0b1000`
 *   //        has changed then execute update OpCodes.
 *   //        has NOT changed then skip `4` values and start processing next OpCodes.
 *   0b1000, 4,
 *   // Concatenate `newValue = lView[bindIndex -1];`.
 *   -1,
 *   // Switch ICU: `icuSwitchCase(lView[1], 0, newValue);`
 *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuSwitch,
 *
 *   // Note `changeMask & -1` is always true, so the IcuUpdate will always execute.
 *   -1, 1,
 *   // Update ICU: `icuUpdateCase(lView[1], 0);`
 *   0 << SHIFT_ICU | 1 << SHIFT_REF | IcuUpdate,
 *
 * ];
 * ```
 *
 * @record
 */
function I18nUpdateOpCodes() { }
/**
 * Store information for the i18n translation block.
 * @record
 */
function TI18n() { }
if (false) {}
/** @enum {number} */
const IcuType = {
    select: 0,
    plural: 1,
};
/**
 * @record
 */
function TIcu() { }
if (false) {}
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
/** @type {?} */
const unusedValueExportToPlacateAjd$6 = 1;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/styling.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Store the static values for the styling binding.
 *
 * The `TStylingStatic` is just `KeyValueArray` where key `""` (stored at location 0) contains the
 * `TStylingKey` (stored at location 1). In other words this wraps the `TStylingKey` such that the
 * `""` contains the wrapped value.
 *
 * When instructions are resolving styling they may need to look forward or backwards in the linked
 * list to resolve the value. For this reason we have to make sure that he linked list also contains
 * the static values. However the list only has space for one item per styling instruction. For this
 * reason we store the static values here as part of the `TStylingKey`. This means that the
 * resolution function when looking for a value needs to first look at the binding value, and than
 * at `TStylingKey` (if it exists).
 *
 * Imagine we have:
 *
 * ```
 * <div class="TEMPLATE" my-dir>
 *
 * \@Directive({
 *   host: {
 *     class: 'DIR',
 *     '[class.dynamic]': 'exp' // ɵɵclassProp('dynamic', ctx.exp);
 *   }
 * })
 * ```
 *
 * In the above case the linked list will contain one item:
 *
 * ```
 *   // assume binding location: 10 for `ɵɵclassProp('dynamic', ctx.exp);`
 *   tData[10] = <TStylingStatic>[
 *     '': 'dynamic', // This is the wrapped value of `TStylingKey`
 *     'DIR': true,   // This is the default static value of directive binding.
 *   ];
 *   tData[10 + 1] = 0; // We don't have prev/next.
 *
 *   lView[10] = undefined;     // assume `ctx.exp` is `undefined`
 *   lView[10 + 1] = undefined; // Just normalized `lView[10]`
 * ```
 *
 * So when the function is resolving styling value, it first needs to look into the linked list
 * (there is none) and than into the static `TStylingStatic` too see if there is a default value for
 * `dynamic` (there is not). Therefore it is safe to remove it.
 *
 * If setting `true` case:
 * ```
 *   lView[10] = true;     // assume `ctx.exp` is `true`
 *   lView[10 + 1] = true; // Just normalized `lView[10]`
 * ```
 * So when the function is resolving styling value, it first needs to look into the linked list
 * (there is none) and than into `TNode.residualClass` (TNode.residualStyle) which contains
 * ```
 *   tNode.residualClass = [
 *     'TEMPLATE': true,
 *   ];
 * ```
 *
 * This means that it is safe to add class.
 * @record
 */
function TStylingStatic() { }
/**
 * This is a branded number which contains previous and next index.
 *
 * When we come across styling instructions we need to store the `TStylingKey` in the correct
 * order so that we can re-concatenate the styling value in the desired priority.
 *
 * The insertion can happen either at the:
 * - end of template as in the case of coming across additional styling instruction in the template
 * - in front of the template in the case of coming across additional instruction in the
 *   `hostBindings`.
 *
 * We use `TStylingRange` to store the previous and next index into the `TData` where the template
 * bindings can be found.
 *
 * - bit 0 is used to mark that the previous index has a duplicate for current value.
 * - bit 1 is used to mark that the next index has a duplicate for the current value.
 * - bits 2-16 are used to encode the next/tail of the template.
 * - bits 17-32 are used to encode the previous/head of template.
 *
 * NODE: *duplicate* false implies that it is statically known that this binding will not collide
 * with other bindings and therefore there is no need to check other bindings. For example the
 * bindings in `<div [style.color]="exp" [style.width]="exp">` will never collide and will have
 * their bits set accordingly. Previous duplicate means that we may need to check previous if the
 * current binding is `null`. Next duplicate means that we may need to check next bindings if the
 * current binding is not `null`.
 *
 * NOTE: `0` has special significance and represents `null` as in no additional pointer.
 * @record
 */
function TStylingRange() { }
if (false) {}
/** @enum {number} */
const StylingRange = {
    /// Number of bits to shift for the previous pointer
    PREV_SHIFT: 17,
    /// Previous pointer mask.
    PREV_MASK: 4294836224,
    /// Number of bits to shift for the next pointer
    NEXT_SHIFT: 2,
    /// Next pointer mask.
    NEXT_MASK: 131068,
    // Mask to remove nagative bit. (interpret number as positive)
    UNSIGNED_MASK: 32767,
    /**
     * This bit is set if the previous bindings contains a binding which could possibly cause a
     * duplicate. For example: `<div [style]="map" [style.width]="width">`, the `width` binding will
     * have previous duplicate set. The implication is that if `width` binding becomes `null`, it is
     * necessary to defer the value to `map.width`. (Because `width` overwrites `map.width`.)
     */
    PREV_DUPLICATE: 2,
    /**
     * This bit is set to if the next binding contains a binding which could possibly cause a
     * duplicate. For example: `<div [style]="map" [style.width]="width">`, the `map` binding will
     * have next duplicate set. The implication is that if `map.width` binding becomes not `null`, it
     * is necessary to defer the value to `width`. (Because `width` overwrites `map.width`.)
     */
    NEXT_DUPLICATE: 1,
};
/**
 * @param {?} prev
 * @param {?} next
 * @return {?}
 */
function toTStylingRange(prev, next) {
    ngDevMode && assertNumberInRange(prev, 0, 32767 /* UNSIGNED_MASK */);
    ngDevMode && assertNumberInRange(next, 0, 32767 /* UNSIGNED_MASK */);
    return (/** @type {?} */ ((prev << 17 /* PREV_SHIFT */ | next << 2 /* NEXT_SHIFT */)));
}
/**
 * @param {?} tStylingRange
 * @return {?}
 */
function getTStylingRangePrev(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, 'expected number');
    return (((/** @type {?} */ ((/** @type {?} */ (tStylingRange))))) >> 17 /* PREV_SHIFT */) & 32767 /* UNSIGNED_MASK */;
}
/**
 * @param {?} tStylingRange
 * @return {?}
 */
function getTStylingRangePrevDuplicate(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, 'expected number');
    return (((/** @type {?} */ ((/** @type {?} */ (tStylingRange))))) & 2 /* PREV_DUPLICATE */) ==
        2 /* PREV_DUPLICATE */;
}
/**
 * @param {?} tStylingRange
 * @param {?} previous
 * @return {?}
 */
function setTStylingRangePrev(tStylingRange, previous) {
    ngDevMode && assertNumber(tStylingRange, 'expected number');
    ngDevMode && assertNumberInRange(previous, 0, 32767 /* UNSIGNED_MASK */);
    return (/** @type {?} */ (((((/** @type {?} */ ((/** @type {?} */ (tStylingRange))))) & ~4294836224 /* PREV_MASK */) |
        (previous << 17 /* PREV_SHIFT */))));
}
/**
 * @param {?} tStylingRange
 * @return {?}
 */
function setTStylingRangePrevDuplicate(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, 'expected number');
    return (/** @type {?} */ ((((/** @type {?} */ ((/** @type {?} */ (tStylingRange))))) | 2 /* PREV_DUPLICATE */)));
}
/**
 * @param {?} tStylingRange
 * @return {?}
 */
function getTStylingRangeNext(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, 'expected number');
    return (((/** @type {?} */ ((/** @type {?} */ (tStylingRange))))) & 131068 /* NEXT_MASK */) >> 2 /* NEXT_SHIFT */;
}
/**
 * @param {?} tStylingRange
 * @param {?} next
 * @return {?}
 */
function setTStylingRangeNext(tStylingRange, next) {
    ngDevMode && assertNumber(tStylingRange, 'expected number');
    ngDevMode && assertNumberInRange(next, 0, 32767 /* UNSIGNED_MASK */);
    return (/** @type {?} */ (((((/** @type {?} */ ((/** @type {?} */ (tStylingRange))))) & ~131068 /* NEXT_MASK */) | //
        next << 2 /* NEXT_SHIFT */)));
}
/**
 * @param {?} tStylingRange
 * @return {?}
 */
function getTStylingRangeNextDuplicate(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, 'expected number');
    return (((/** @type {?} */ ((/** @type {?} */ (tStylingRange))))) & 1 /* NEXT_DUPLICATE */) ===
        1 /* NEXT_DUPLICATE */;
}
/**
 * @param {?} tStylingRange
 * @return {?}
 */
function setTStylingRangeNextDuplicate(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, 'expected number');
    return (/** @type {?} */ ((((/** @type {?} */ ((/** @type {?} */ (tStylingRange))))) | 1 /* NEXT_DUPLICATE */)));
}
/**
 * @param {?} tStylingRange
 * @return {?}
 */
function getTStylingRangeTail(tStylingRange) {
    ngDevMode && assertNumber(tStylingRange, 'expected number');
    /** @type {?} */
    const next = getTStylingRangeNext(tStylingRange);
    return next === 0 ? getTStylingRangePrev(tStylingRange) : next;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/util/debug_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 * @param {?} obj
 * @param {?} debug
 * @return {?}
 */
function attachDebugObject(obj, debug) {
    Object.defineProperty(obj, 'debug', { value: debug, enumerable: false });
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/lview_debug.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NG_DEV_MODE = ((typeof ngDevMode === 'undefined' || !!ngDevMode) && initNgDevMode());
/*
 * This file contains conditionally attached classes which provide human readable (debug) level
 * information for `LView`, `LContainer` and other internal data structures. These data structures
 * are stored internally as array which makes it very difficult during debugging to reason about the
 * current state of the system.
 *
 * Patching the array with extra property does change the array's hidden class' but it does not
 * change the cost of access, therefore this patching should not have significant if any impact in
 * `ngDevMode` mode. (see: https://jsperf.com/array-vs-monkey-patch-array)
 *
 * So instead of seeing:
 * ```
 * Array(30) [Object, 659, null, …]
 * ```
 *
 * You get to see:
 * ```
 * LViewDebug {
 *   views: [...],
 *   flags: {attached: true, ...}
 *   nodes: [
 *     {html: '<div id="123">', ..., nodes: [
 *       {html: '<span>', ..., nodes: null}
 *     ]}
 *   ]
 * }
 * ```
 */
/** @type {?} */
let LVIEW_COMPONENT_CACHE;
/** @type {?} */
let LVIEW_EMBEDDED_CACHE;
/** @type {?} */
let LVIEW_ROOT;
/**
 * @record
 */
function TViewDebug() { }
if (false) {}
/**
 * This function clones a blueprint and creates LView.
 *
 * Simple slice will keep the same type, and we need it to be LView
 * @param {?} tView
 * @return {?}
 */
function cloneToLViewFromTViewBlueprint(tView) {
    /** @type {?} */
    const debugTView = (/** @type {?} */ (tView));
    /** @type {?} */
    const lView = getLViewToClone(debugTView.type, tView.template && tView.template.name);
    return (/** @type {?} */ (lView.concat(tView.blueprint)));
}
/**
 * @param {?} type
 * @param {?} name
 * @return {?}
 */
function getLViewToClone(type, name) {
    switch (type) {
        case 0 /* Root */:
            if (LVIEW_ROOT === undefined)
                LVIEW_ROOT = new (createNamedArrayType('LRootView'))();
            return LVIEW_ROOT;
        case 1 /* Component */:
            if (LVIEW_COMPONENT_CACHE === undefined)
                LVIEW_COMPONENT_CACHE = new Map();
            /** @type {?} */
            let componentArray = LVIEW_COMPONENT_CACHE.get(name);
            if (componentArray === undefined) {
                componentArray = new (createNamedArrayType('LComponentView' + nameSuffix(name)))();
                LVIEW_COMPONENT_CACHE.set(name, componentArray);
            }
            return componentArray;
        case 2 /* Embedded */:
            if (LVIEW_EMBEDDED_CACHE === undefined)
                LVIEW_EMBEDDED_CACHE = new Map();
            /** @type {?} */
            let embeddedArray = LVIEW_EMBEDDED_CACHE.get(name);
            if (embeddedArray === undefined) {
                embeddedArray = new (createNamedArrayType('LEmbeddedView' + nameSuffix(name)))();
                LVIEW_EMBEDDED_CACHE.set(name, embeddedArray);
            }
            return embeddedArray;
    }
    throw new Error('unreachable code');
}
/**
 * @param {?} text
 * @return {?}
 */
function nameSuffix(text) {
    if (text == null)
        return '';
    /** @type {?} */
    const index = text.lastIndexOf('_Template');
    return '_' + (index === -1 ? text : text.substr(0, index));
}
/**
 * This class is a debug version of Object literal so that we can have constructor name show up
 * in
 * debug tools in ngDevMode.
 * @type {?}
 */
const TViewConstructor = class TView {
    /**
     * @param {?} type
     * @param {?} id
     * @param {?} blueprint
     * @param {?} template
     * @param {?} queries
     * @param {?} viewQuery
     * @param {?} node
     * @param {?} data
     * @param {?} bindingStartIndex
     * @param {?} expandoStartIndex
     * @param {?} expandoInstructions
     * @param {?} firstCreatePass
     * @param {?} firstUpdatePass
     * @param {?} staticViewQueries
     * @param {?} staticContentQueries
     * @param {?} preOrderHooks
     * @param {?} preOrderCheckHooks
     * @param {?} contentHooks
     * @param {?} contentCheckHooks
     * @param {?} viewHooks
     * @param {?} viewCheckHooks
     * @param {?} destroyHooks
     * @param {?} cleanup
     * @param {?} contentQueries
     * @param {?} components
     * @param {?} directiveRegistry
     * @param {?} pipeRegistry
     * @param {?} firstChild
     * @param {?} schemas
     * @param {?} consts
     */
    constructor(type, //
    id, //
    blueprint, //
    template, //
    queries, //
    viewQuery, //
    node, //
    data, //
    bindingStartIndex, //
    expandoStartIndex, //
    expandoInstructions, //
    firstCreatePass, //
    firstUpdatePass, //
    staticViewQueries, //
    staticContentQueries, //
    preOrderHooks, //
    preOrderCheckHooks, //
    contentHooks, //
    contentCheckHooks, //
    viewHooks, //
    viewCheckHooks, //
    destroyHooks, //
    cleanup, //
    contentQueries, //
    components, //
    directiveRegistry, //
    pipeRegistry, //
    firstChild, //
    schemas, //
    consts) {
        this.type = type;
        this.id = id;
        this.blueprint = blueprint;
        this.template = template;
        this.queries = queries;
        this.viewQuery = viewQuery;
        this.node = node;
        this.data = data;
        this.bindingStartIndex = bindingStartIndex;
        this.expandoStartIndex = expandoStartIndex;
        this.expandoInstructions = expandoInstructions;
        this.firstCreatePass = firstCreatePass;
        this.firstUpdatePass = firstUpdatePass;
        this.staticViewQueries = staticViewQueries;
        this.staticContentQueries = staticContentQueries;
        this.preOrderHooks = preOrderHooks;
        this.preOrderCheckHooks = preOrderCheckHooks;
        this.contentHooks = contentHooks;
        this.contentCheckHooks = contentCheckHooks;
        this.viewHooks = viewHooks;
        this.viewCheckHooks = viewCheckHooks;
        this.destroyHooks = destroyHooks;
        this.cleanup = cleanup;
        this.contentQueries = contentQueries;
        this.components = components;
        this.directiveRegistry = directiveRegistry;
        this.pipeRegistry = pipeRegistry;
        this.firstChild = firstChild;
        this.schemas = schemas;
        this.consts = consts;
    }
    /**
     * @return {?}
     */
    get template_() {
        /** @type {?} */
        const buf = [];
        processTNodeChildren(this.firstChild, buf);
        return buf.join('');
    }
};
class TNode$1 {
    /**
     * @param {?} tView_
     * @param {?} type
     * @param {?} index
     * @param {?} injectorIndex
     * @param {?} directiveStart
     * @param {?} directiveEnd
     * @param {?} directiveStylingLast
     * @param {?} propertyBindings
     * @param {?} flags
     * @param {?} providerIndexes
     * @param {?} tagName
     * @param {?} attrs
     * @param {?} mergedAttrs
     * @param {?} localNames
     * @param {?} initialInputs
     * @param {?} inputs
     * @param {?} outputs
     * @param {?} tViews
     * @param {?} next
     * @param {?} projectionNext
     * @param {?} child
     * @param {?} parent
     * @param {?} projection
     * @param {?} styles
     * @param {?} residualStyles
     * @param {?} classes
     * @param {?} residualClasses
     * @param {?} classBindings
     * @param {?} styleBindings
     */
    constructor(tView_, //
    type, //
    index, //
    injectorIndex, //
    directiveStart, //
    directiveEnd, //
    directiveStylingLast, //
    propertyBindings, //
    flags, //
    providerIndexes, //
    tagName, //
    attrs, //
    mergedAttrs, //
    localNames, //
    initialInputs, //
    inputs, //
    outputs, //
    tViews, //
    next, //
    projectionNext, //
    child, //
    parent, //
    projection, //
    styles, //
    residualStyles, //
    classes, //
    residualClasses, //
    classBindings, //
    styleBindings) {
        this.tView_ = tView_;
        this.type = type;
        this.index = index;
        this.injectorIndex = injectorIndex;
        this.directiveStart = directiveStart;
        this.directiveEnd = directiveEnd;
        this.directiveStylingLast = directiveStylingLast;
        this.propertyBindings = propertyBindings;
        this.flags = flags;
        this.providerIndexes = providerIndexes;
        this.tagName = tagName;
        this.attrs = attrs;
        this.mergedAttrs = mergedAttrs;
        this.localNames = localNames;
        this.initialInputs = initialInputs;
        this.inputs = inputs;
        this.outputs = outputs;
        this.tViews = tViews;
        this.next = next;
        this.projectionNext = projectionNext;
        this.child = child;
        this.parent = parent;
        this.projection = projection;
        this.styles = styles;
        this.residualStyles = residualStyles;
        this.classes = classes;
        this.residualClasses = residualClasses;
        this.classBindings = classBindings;
        this.styleBindings = styleBindings;
    }
    /**
     * @return {?}
     */
    get type_() {
        switch (this.type) {
            case 0 /* Container */:
                return 'TNodeType.Container';
            case 3 /* Element */:
                return 'TNodeType.Element';
            case 4 /* ElementContainer */:
                return 'TNodeType.ElementContainer';
            case 5 /* IcuContainer */:
                return 'TNodeType.IcuContainer';
            case 1 /* Projection */:
                return 'TNodeType.Projection';
            case 2 /* View */:
                return 'TNodeType.View';
            default:
                return 'TNodeType.???';
        }
    }
    /**
     * @return {?}
     */
    get flags_() {
        /** @type {?} */
        const flags = [];
        if (this.flags & 16 /* hasClassInput */)
            flags.push('TNodeFlags.hasClassInput');
        if (this.flags & 8 /* hasContentQuery */)
            flags.push('TNodeFlags.hasContentQuery');
        if (this.flags & 32 /* hasStyleInput */)
            flags.push('TNodeFlags.hasStyleInput');
        if (this.flags & 128 /* hasHostBindings */)
            flags.push('TNodeFlags.hasHostBindings');
        if (this.flags & 2 /* isComponentHost */)
            flags.push('TNodeFlags.isComponentHost');
        if (this.flags & 1 /* isDirectiveHost */)
            flags.push('TNodeFlags.isDirectiveHost');
        if (this.flags & 64 /* isDetached */)
            flags.push('TNodeFlags.isDetached');
        if (this.flags & 4 /* isProjected */)
            flags.push('TNodeFlags.isProjected');
        return flags.join('|');
    }
    /**
     * @return {?}
     */
    get template_() {
        /** @type {?} */
        const buf = [];
        buf.push('<', this.tagName || this.type_);
        if (this.attrs) {
            for (let i = 0; i < this.attrs.length;) {
                /** @type {?} */
                const attrName = this.attrs[i++];
                if (typeof attrName == 'number') {
                    break;
                }
                /** @type {?} */
                const attrValue = this.attrs[i++];
                buf.push(' ', (/** @type {?} */ (attrName)), '="', (/** @type {?} */ (attrValue)), '"');
            }
        }
        buf.push('>');
        processTNodeChildren(this.child, buf);
        buf.push('</', this.tagName || this.type_, '>');
        return buf.join('');
    }
    /**
     * @return {?}
     */
    get styleBindings_() { return toDebugStyleBinding(this, false); }
    /**
     * @return {?}
     */
    get classBindings_() { return toDebugStyleBinding(this, true); }
}
if (false) {}
/** @type {?} */
const TNodeDebug = TNode$1;
/**
 * @record
 */
function DebugStyleBindings() { }
/**
 * @record
 */
function DebugStyleBinding() { }
if (false) {}
/**
 * @param {?} tNode
 * @param {?} isClassBased
 * @return {?}
 */
function toDebugStyleBinding(tNode, isClassBased) {
    /** @type {?} */
    const tData = tNode.tView_.data;
    /** @type {?} */
    const bindings = (/** @type {?} */ ([]));
    /** @type {?} */
    const range = isClassBased ? tNode.classBindings : tNode.styleBindings;
    /** @type {?} */
    const prev = getTStylingRangePrev(range);
    /** @type {?} */
    const next = getTStylingRangeNext(range);
    /** @type {?} */
    let isTemplate = next !== 0;
    /** @type {?} */
    let cursor = isTemplate ? next : prev;
    while (cursor !== 0) {
        /** @type {?} */
        const itemKey = (/** @type {?} */ (tData[cursor]));
        /** @type {?} */
        const itemRange = (/** @type {?} */ (tData[cursor + 1]));
        bindings.unshift({
            key: itemKey,
            index: cursor,
            isTemplate: isTemplate,
            prevDuplicate: getTStylingRangePrevDuplicate(itemRange),
            nextDuplicate: getTStylingRangeNextDuplicate(itemRange),
            nextIndex: getTStylingRangeNext(itemRange),
            prevIndex: getTStylingRangePrev(itemRange),
        });
        if (cursor === prev)
            isTemplate = false;
        cursor = getTStylingRangePrev(itemRange);
    }
    bindings.push((isClassBased ? tNode.residualClasses : tNode.residualStyles) || null);
    return bindings;
}
/**
 * @param {?} tNode
 * @param {?} buf
 * @return {?}
 */
function processTNodeChildren(tNode, buf) {
    while (tNode) {
        buf.push(((/** @type {?} */ ((/** @type {?} */ (tNode))))).template_);
        tNode = tNode.next;
    }
}
/** @type {?} */
const TViewData = NG_DEV_MODE && createNamedArrayType('TViewData') || (/** @type {?} */ ((/** @type {?} */ (null))));
/** @type {?} */
let TVIEWDATA_EMPTY;
// can't initialize here or it will not be tree shaken, because `LView`
// constructor could have side-effects.
/**
 * This function clones a blueprint and creates TData.
 *
 * Simple slice will keep the same type, and we need it to be TData
 * @param {?} list
 * @return {?}
 */
function cloneToTViewData(list) {
    if (TVIEWDATA_EMPTY === undefined)
        TVIEWDATA_EMPTY = new TViewData();
    return (/** @type {?} */ (TVIEWDATA_EMPTY.concat(list)));
}
/** @type {?} */
const LViewBlueprint = NG_DEV_MODE && createNamedArrayType('LViewBlueprint') || (/** @type {?} */ ((/** @type {?} */ (null))));
/** @type {?} */
const MatchesArray = NG_DEV_MODE && createNamedArrayType('MatchesArray') || (/** @type {?} */ ((/** @type {?} */ (null))));
/** @type {?} */
const TViewComponents = NG_DEV_MODE && createNamedArrayType('TViewComponents') || (/** @type {?} */ ((/** @type {?} */ (null))));
/** @type {?} */
const TNodeLocalNames = NG_DEV_MODE && createNamedArrayType('TNodeLocalNames') || (/** @type {?} */ ((/** @type {?} */ (null))));
/** @type {?} */
const TNodeInitialInputs = NG_DEV_MODE && createNamedArrayType('TNodeInitialInputs') || (/** @type {?} */ ((/** @type {?} */ (null))));
/** @type {?} */
const TNodeInitialData = NG_DEV_MODE && createNamedArrayType('TNodeInitialData') || (/** @type {?} */ ((/** @type {?} */ (null))));
/** @type {?} */
const LCleanup = NG_DEV_MODE && createNamedArrayType('LCleanup') || (/** @type {?} */ ((/** @type {?} */ (null))));
/** @type {?} */
const TCleanup = NG_DEV_MODE && createNamedArrayType('TCleanup') || (/** @type {?} */ ((/** @type {?} */ (null))));
/**
 * @param {?} lView
 * @return {?}
 */
function attachLViewDebug(lView) {
    attachDebugObject(lView, new LViewDebug(lView));
}
/**
 * @param {?} lContainer
 * @return {?}
 */
function attachLContainerDebug(lContainer) {
    attachDebugObject(lContainer, new LContainerDebug(lContainer));
}
/**
 * @param {?} obj
 * @return {?}
 */
function toDebug(obj) {
    if (obj) {
        /** @type {?} */
        const debug = ((/** @type {?} */ (obj))).debug;
        assertDefined(debug, 'Object does not have a debug representation.');
        return debug;
    }
    else {
        return obj;
    }
}
/**
 * Use this method to unwrap a native element in `LView` and convert it into HTML for easier
 * reading.
 *
 * @param {?} value possibly wrapped native DOM node.
 * @param {?=} includeChildren If `true` then the serialized HTML form will include child elements
 * (same
 * as `outerHTML`). If `false` then the serialized HTML form will only contain the element
 * itself
 * (will not serialize child elements).
 * @return {?}
 */
function toHtml(value, includeChildren = false) {
    /** @type {?} */
    const node = (/** @type {?} */ (unwrapRNode(value)));
    if (node) {
        /** @type {?} */
        const isTextNode = node.nodeType === Node.TEXT_NODE;
        /** @type {?} */
        const outerHTML = (isTextNode ? node.textContent : node.outerHTML) || '';
        if (includeChildren || isTextNode) {
            return outerHTML;
        }
        else {
            /** @type {?} */
            const innerHTML = '>' + node.innerHTML + '<';
            return (outerHTML.split(innerHTML)[0]) + '>';
        }
    }
    else {
        return null;
    }
}
class LViewDebug {
    /**
     * @param {?} _raw_lView
     */
    constructor(_raw_lView) {
        this._raw_lView = _raw_lView;
    }
    /**
     * Flags associated with the `LView` unpacked into a more readable state.
     * @return {?}
     */
    get flags() {
        /** @type {?} */
        const flags = this._raw_lView[FLAGS];
        return {
            __raw__flags__: flags,
            initPhaseState: flags & 3 /* InitPhaseStateMask */,
            creationMode: !!(flags & 4 /* CreationMode */),
            firstViewPass: !!(flags & 8 /* FirstLViewPass */),
            checkAlways: !!(flags & 16 /* CheckAlways */),
            dirty: !!(flags & 64 /* Dirty */),
            attached: !!(flags & 128 /* Attached */),
            destroyed: !!(flags & 256 /* Destroyed */),
            isRoot: !!(flags & 512 /* IsRoot */),
            indexWithinInitPhase: flags >> 10 /* IndexWithinInitPhaseShift */,
        };
    }
    /**
     * @return {?}
     */
    get parent() { return toDebug(this._raw_lView[PARENT]); }
    /**
     * @return {?}
     */
    get host() { return toHtml(this._raw_lView[HOST], true); }
    /**
     * @return {?}
     */
    get html() { return (this.nodes || []).map((/**
     * @param {?} node
     * @return {?}
     */
    node => toHtml(node.native, true))).join(''); }
    /**
     * @return {?}
     */
    get context() { return this._raw_lView[CONTEXT]; }
    /**
     * The tree of nodes associated with the current `LView`. The nodes have been normalized into
     * a
     * tree structure with relevant details pulled out for readability.
     * @return {?}
     */
    get nodes() {
        /** @type {?} */
        const lView = this._raw_lView;
        /** @type {?} */
        const tNode = lView[TVIEW].firstChild;
        return toDebugNodes(tNode, lView);
    }
    /**
     * @return {?}
     */
    get tView() { return this._raw_lView[TVIEW]; }
    /**
     * @return {?}
     */
    get cleanup() { return this._raw_lView[CLEANUP]; }
    /**
     * @return {?}
     */
    get injector() { return this._raw_lView[INJECTOR$1]; }
    /**
     * @return {?}
     */
    get rendererFactory() { return this._raw_lView[RENDERER_FACTORY]; }
    /**
     * @return {?}
     */
    get renderer() { return this._raw_lView[RENDERER]; }
    /**
     * @return {?}
     */
    get sanitizer() { return this._raw_lView[SANITIZER]; }
    /**
     * @return {?}
     */
    get childHead() { return toDebug(this._raw_lView[CHILD_HEAD]); }
    /**
     * @return {?}
     */
    get next() { return toDebug(this._raw_lView[NEXT]); }
    /**
     * @return {?}
     */
    get childTail() { return toDebug(this._raw_lView[CHILD_TAIL]); }
    /**
     * @return {?}
     */
    get declarationView() { return toDebug(this._raw_lView[DECLARATION_VIEW]); }
    /**
     * @return {?}
     */
    get queries() { return this._raw_lView[QUERIES]; }
    /**
     * @return {?}
     */
    get tHost() { return this._raw_lView[T_HOST]; }
    /**
     * Normalized view of child views (and containers) attached at this location.
     * @return {?}
     */
    get childViews() {
        /** @type {?} */
        const childViews = [];
        /** @type {?} */
        let child = this.childHead;
        while (child) {
            childViews.push(child);
            child = child.next;
        }
        return childViews;
    }
}
if (false) {}
/**
 * @record
 */
function DebugNode() { }
if (false) {}
/**
 * Turns a flat list of nodes into a tree by walking the associated `TNode` tree.
 *
 * @param {?} tNode
 * @param {?} lView
 * @return {?}
 */
function toDebugNodes(tNode, lView) {
    if (tNode) {
        /** @type {?} */
        const debugNodes = [];
        /** @type {?} */
        let tNodeCursor = tNode;
        while (tNodeCursor) {
            debugNodes.push(buildDebugNode(tNodeCursor, lView, tNodeCursor.index));
            tNodeCursor = tNodeCursor.next;
        }
        return debugNodes;
    }
    else {
        return null;
    }
}
/**
 * @param {?} tNode
 * @param {?} lView
 * @param {?} nodeIndex
 * @return {?}
 */
function buildDebugNode(tNode, lView, nodeIndex) {
    /** @type {?} */
    const rawValue = lView[nodeIndex];
    /** @type {?} */
    const native = unwrapRNode(rawValue);
    /** @type {?} */
    const componentLViewDebug = toDebug(readLViewValue(rawValue));
    return {
        html: toHtml(native),
        native: (/** @type {?} */ (native)),
        nodes: toDebugNodes(tNode.child, lView),
        component: componentLViewDebug,
    };
}
class LContainerDebug {
    /**
     * @param {?} _raw_lContainer
     */
    constructor(_raw_lContainer) {
        this._raw_lContainer = _raw_lContainer;
    }
    /**
     * @return {?}
     */
    get activeIndex() { return getLContainerActiveIndex(this._raw_lContainer); }
    /**
     * @return {?}
     */
    get hasTransplantedViews() {
        return (this._raw_lContainer[ACTIVE_INDEX] & 1 /* HAS_TRANSPLANTED_VIEWS */) ===
            1 /* HAS_TRANSPLANTED_VIEWS */;
    }
    /**
     * @return {?}
     */
    get views() {
        return this._raw_lContainer.slice(CONTAINER_HEADER_OFFSET)
            .map((/** @type {?} */ (toDebug)));
    }
    /**
     * @return {?}
     */
    get parent() { return toDebug(this._raw_lContainer[PARENT]); }
    /**
     * @return {?}
     */
    get movedViews() { return this._raw_lContainer[MOVED_VIEWS]; }
    /**
     * @return {?}
     */
    get host() { return this._raw_lContainer[HOST]; }
    /**
     * @return {?}
     */
    get native() { return this._raw_lContainer[NATIVE]; }
    /**
     * @return {?}
     */
    get next() { return toDebug(this._raw_lContainer[NEXT]); }
}
if (false) {}
/**
 * Return an `LView` value if found.
 *
 * @param {?} value `LView` if any
 * @return {?}
 */
function readLViewValue(value) {
    while (Array.isArray(value)) {
        // This check is not quite right, as it does not take into account `StylingContext`
        // This is why it is in debug, not in util.ts
        if (value.length >= HEADER_OFFSET - 1)
            return (/** @type {?} */ (value));
        value = value[HOST];
    }
    return null;
}
class I18NDebugItem {
    /**
     * @param {?} __raw_opCode
     * @param {?} _lView
     * @param {?} nodeIndex
     * @param {?} type
     */
    constructor(__raw_opCode, _lView, nodeIndex, type) {
        this.__raw_opCode = __raw_opCode;
        this._lView = _lView;
        this.nodeIndex = nodeIndex;
        this.type = type;
    }
    /**
     * @return {?}
     */
    get tNode() { return getTNode(this._lView[TVIEW], this.nodeIndex); }
}
if (false) {}
/**
 * Turns a list of "Create" & "Update" OpCodes into a human-readable list of operations for
 * debugging purposes.
 * @param {?} mutateOpCodes mutation opCodes to read
 * @param {?} updateOpCodes update opCodes to read
 * @param {?} icus list of ICU expressions
 * @param {?} lView The view the opCodes are acting on
 * @return {?}
 */
function attachI18nOpCodesDebug(mutateOpCodes, updateOpCodes, icus, lView) {
    attachDebugObject(mutateOpCodes, new I18nMutateOpCodesDebug(mutateOpCodes, lView));
    attachDebugObject(updateOpCodes, new I18nUpdateOpCodesDebug(updateOpCodes, icus, lView));
    if (icus) {
        icus.forEach((/**
         * @param {?} icu
         * @return {?}
         */
        icu => {
            icu.create.forEach((/**
             * @param {?} icuCase
             * @return {?}
             */
            icuCase => { attachDebugObject(icuCase, new I18nMutateOpCodesDebug(icuCase, lView)); }));
            icu.update.forEach((/**
             * @param {?} icuCase
             * @return {?}
             */
            icuCase => {
                attachDebugObject(icuCase, new I18nUpdateOpCodesDebug(icuCase, icus, lView));
            }));
        }));
    }
}
class I18nMutateOpCodesDebug {
    /**
     * @param {?} __raw_opCodes
     * @param {?} __lView
     */
    constructor(__raw_opCodes, __lView) {
        this.__raw_opCodes = __raw_opCodes;
        this.__lView = __lView;
    }
    /**
     * A list of operation information about how the OpCodes will act on the view.
     * @return {?}
     */
    get operations() {
        const { __lView, __raw_opCodes } = this;
        /** @type {?} */
        const results = [];
        for (let i = 0; i < __raw_opCodes.length; i++) {
            /** @type {?} */
            const opCode = __raw_opCodes[i];
            /** @type {?} */
            let result;
            if (typeof opCode === 'string') {
                result = {
                    __raw_opCode: opCode,
                    type: 'Create Text Node',
                    nodeIndex: __raw_opCodes[++i],
                    text: opCode,
                };
            }
            if (typeof opCode === 'number') {
                switch (opCode & 7 /* MASK_OPCODE */) {
                    case 1 /* AppendChild */:
                        /** @type {?} */
                        const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;
                        result = new I18NDebugItem(opCode, __lView, destinationNodeIndex, 'AppendChild');
                        break;
                    case 0 /* Select */:
                        /** @type {?} */
                        const nodeIndex = opCode >>> 3 /* SHIFT_REF */;
                        result = new I18NDebugItem(opCode, __lView, nodeIndex, 'Select');
                        break;
                    case 5 /* ElementEnd */:
                        /** @type {?} */
                        let elementIndex = opCode >>> 3 /* SHIFT_REF */;
                        result = new I18NDebugItem(opCode, __lView, elementIndex, 'ElementEnd');
                        break;
                    case 4 /* Attr */:
                        elementIndex = opCode >>> 3 /* SHIFT_REF */;
                        result = new I18NDebugItem(opCode, __lView, elementIndex, 'Attr');
                        result['attrName'] = __raw_opCodes[++i];
                        result['attrValue'] = __raw_opCodes[++i];
                        break;
                }
            }
            if (!result) {
                switch (opCode) {
                    case COMMENT_MARKER:
                        result = {
                            __raw_opCode: opCode,
                            type: 'COMMENT_MARKER',
                            commentValue: __raw_opCodes[++i],
                            nodeIndex: __raw_opCodes[++i],
                        };
                        break;
                    case ELEMENT_MARKER:
                        result = {
                            __raw_opCode: opCode,
                            type: 'ELEMENT_MARKER',
                        };
                        break;
                }
            }
            if (!result) {
                result = {
                    __raw_opCode: opCode,
                    type: 'Unknown Op Code',
                    code: opCode,
                };
            }
            results.push(result);
        }
        return results;
    }
}
if (false) {}
class I18nUpdateOpCodesDebug {
    /**
     * @param {?} __raw_opCodes
     * @param {?} icus
     * @param {?} __lView
     */
    constructor(__raw_opCodes, icus, __lView) {
        this.__raw_opCodes = __raw_opCodes;
        this.icus = icus;
        this.__lView = __lView;
    }
    /**
     * A list of operation information about how the OpCodes will act on the view.
     * @return {?}
     */
    get operations() {
        const { __lView, __raw_opCodes, icus } = this;
        /** @type {?} */
        const results = [];
        for (let i = 0; i < __raw_opCodes.length; i++) {
            // bit code to check if we should apply the next update
            /** @type {?} */
            const checkBit = (/** @type {?} */ (__raw_opCodes[i]));
            // Number of opCodes to skip until next set of update codes
            /** @type {?} */
            const skipCodes = (/** @type {?} */ (__raw_opCodes[++i]));
            /** @type {?} */
            let value = '';
            for (let j = i + 1; j <= (i + skipCodes); j++) {
                /** @type {?} */
                const opCode = __raw_opCodes[j];
                if (typeof opCode === 'string') {
                    value += opCode;
                }
                else if (typeof opCode == 'number') {
                    if (opCode < 0) {
                        // It's a binding index whose value is negative
                        // We cannot know the value of the binding so we only show the index
                        value += `�${-opCode - 1}�`;
                    }
                    else {
                        /** @type {?} */
                        const nodeIndex = opCode >>> 2 /* SHIFT_REF */;
                        /** @type {?} */
                        let tIcuIndex;
                        /** @type {?} */
                        let tIcu;
                        switch (opCode & 3 /* MASK_OPCODE */) {
                            case 1 /* Attr */:
                                /** @type {?} */
                                const attrName = (/** @type {?} */ (__raw_opCodes[++j]));
                                /** @type {?} */
                                const sanitizeFn = __raw_opCodes[++j];
                                results.push({
                                    __raw_opCode: opCode,
                                    checkBit,
                                    type: 'Attr',
                                    attrValue: value, attrName, sanitizeFn,
                                });
                                break;
                            case 0 /* Text */:
                                results.push({
                                    __raw_opCode: opCode,
                                    checkBit,
                                    type: 'Text', nodeIndex,
                                    text: value,
                                });
                                break;
                            case 2 /* IcuSwitch */:
                                tIcuIndex = (/** @type {?} */ (__raw_opCodes[++j]));
                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];
                                /** @type {?} */
                                let result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuSwitch');
                                result['tIcuIndex'] = tIcuIndex;
                                result['checkBit'] = checkBit;
                                result['mainBinding'] = value;
                                result['tIcu'] = tIcu;
                                results.push(result);
                                break;
                            case 3 /* IcuUpdate */:
                                tIcuIndex = (/** @type {?} */ (__raw_opCodes[++j]));
                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];
                                result = new I18NDebugItem(opCode, __lView, nodeIndex, 'IcuUpdate');
                                result['tIcuIndex'] = tIcuIndex;
                                result['checkBit'] = checkBit;
                                result['tIcu'] = tIcu;
                                results.push(result);
                                break;
                        }
                    }
                }
            }
            i += skipCodes;
        }
        return results;
    }
}
if (false) {}
/**
 * @record
 */
function I18nOpCodesDebug() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/shared.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$4 = /**
 * @return {?}
 */
() => Promise.resolve(null);
/**
 * A permanent marker promise which signifies that the current CD tree is
 * clean.
 * @type {?}
 */
const _CLEAN_PROMISE = ((ɵ0$4))();
/**
 * Process the `TView.expandoInstructions`. (Execute the `hostBindings`.)
 *
 * @param {?} tView `TView` containing the `expandoInstructions`
 * @param {?} lView `LView` associated with the `TView`
 * @return {?}
 */
function setHostBindingsByExecutingExpandoInstructions(tView, lView) {
    ngDevMode && assertSame(tView, lView[TVIEW], '`LView` is not associated with the `TView`!');
    try {
        /** @type {?} */
        const expandoInstructions = tView.expandoInstructions;
        if (expandoInstructions !== null) {
            /** @type {?} */
            let bindingRootIndex = tView.expandoStartIndex;
            /** @type {?} */
            let currentDirectiveIndex = -1;
            /** @type {?} */
            let currentElementIndex = -1;
            // TODO(misko): PERF It is possible to get here with `TView.expandoInstructions` containing no
            // functions to execute. This is wasteful as there is no work to be done, but we still need
            // to iterate over the instructions.
            // In example of this is in this test: `host_binding_spec.ts`
            // `fit('should not cause problems if detectChanges is called when a property updates', ...`
            // In the above test we get here with expando [0, 0, 1] which requires a lot of processing but
            // there is no function to execute.
            for (let i = 0; i < expandoInstructions.length; i++) {
                /** @type {?} */
                const instruction = expandoInstructions[i];
                if (typeof instruction === 'number') {
                    if (instruction <= 0) {
                        // Negative numbers mean that we are starting new EXPANDO block and need to update
                        // the current element and directive index.
                        // Important: In JS `-x` and `0-x` is not the same! If `x===0` then `-x` will produce
                        // `-0` which requires non standard math arithmetic and it can prevent VM optimizations.
                        // `0-0` will always produce `0` and will not cause a potential deoptimization in VM.
                        // TODO(misko): PERF This should be refactored to use `~instruction` as that does not
                        // suffer from `-0` and it is faster/more compact.
                        currentElementIndex = 0 - instruction;
                        setSelectedIndex(currentElementIndex);
                        // Injector block and providers are taken into account.
                        /** @type {?} */
                        const providerCount = ((/** @type {?} */ (expandoInstructions[++i])));
                        bindingRootIndex += INJECTOR_BLOOM_PARENT_SIZE + providerCount;
                        currentDirectiveIndex = bindingRootIndex;
                    }
                    else {
                        // This is either the injector size (so the binding root can skip over directives
                        // and get to the first set of host bindings on this node) or the host var count
                        // (to get to the next set of host bindings on this node).
                        bindingRootIndex += instruction;
                    }
                }
                else {
                    // If it's not a number, it's a host binding function that needs to be executed.
                    if (instruction !== null) {
                        setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex);
                        /** @type {?} */
                        const hostCtx = lView[currentDirectiveIndex];
                        instruction(2 /* Update */, hostCtx);
                    }
                    // TODO(misko): PERF Relying on incrementing the `currentDirectiveIndex` here is
                    // sub-optimal. The implications are that if we have a lot of directives but none of them
                    // have host bindings we nevertheless need to iterate over the expando instructions to
                    // update the counter. It would be much better if we could encode the
                    // `currentDirectiveIndex` into the `expandoInstruction` array so that we only need to
                    // iterate over those directives which actually have `hostBindings`.
                    currentDirectiveIndex++;
                }
            }
        }
    }
    finally {
        setSelectedIndex(-1);
    }
}
/**
 * Refreshes all content queries declared by directives in a given view
 * @param {?} tView
 * @param {?} lView
 * @return {?}
 */
function refreshContentQueries(tView, lView) {
    /** @type {?} */
    const contentQueries = tView.contentQueries;
    if (contentQueries !== null) {
        for (let i = 0; i < contentQueries.length; i += 2) {
            /** @type {?} */
            const queryStartIdx = contentQueries[i];
            /** @type {?} */
            const directiveDefIdx = contentQueries[i + 1];
            if (directiveDefIdx !== -1) {
                /** @type {?} */
                const directiveDef = (/** @type {?} */ (tView.data[directiveDefIdx]));
                ngDevMode &&
                    assertDefined(directiveDef.contentQueries, 'contentQueries function should be defined');
                setCurrentQueryIndex(queryStartIdx);
                (/** @type {?} */ (directiveDef.contentQueries))(2 /* Update */, lView[directiveDefIdx], directiveDefIdx);
            }
        }
    }
}
/**
 * Refreshes child components in the current view (update mode).
 * @param {?} hostLView
 * @param {?} components
 * @return {?}
 */
function refreshChildComponents(hostLView, components) {
    for (let i = 0; i < components.length; i++) {
        refreshComponent(hostLView, components[i]);
    }
}
/**
 * Renders child components in the current view (creation mode).
 * @param {?} hostLView
 * @param {?} components
 * @return {?}
 */
function renderChildComponents(hostLView, components) {
    for (let i = 0; i < components.length; i++) {
        renderComponent(hostLView, components[i]);
    }
}
/**
 * Creates a native element from a tag name, using a renderer.
 * @param {?} name the tag name
 * @param {?} renderer A renderer to use
 * @param {?} namespace
 * @return {?} the element created
 */
function elementCreate(name, renderer, namespace) {
    if (isProceduralRenderer(renderer)) {
        return renderer.createElement(name, namespace);
    }
    else {
        return namespace === null ? renderer.createElement(name) :
            renderer.createElementNS(namespace, name);
    }
}
/**
 * @template T
 * @param {?} parentLView
 * @param {?} tView
 * @param {?} context
 * @param {?} flags
 * @param {?} host
 * @param {?} tHostNode
 * @param {?=} rendererFactory
 * @param {?=} renderer
 * @param {?=} sanitizer
 * @param {?=} injector
 * @return {?}
 */
function createLView(parentLView, tView, context, flags, host, tHostNode, rendererFactory, renderer, sanitizer, injector) {
    /** @type {?} */
    const lView = ngDevMode ? cloneToLViewFromTViewBlueprint(tView) : (/** @type {?} */ (tView.blueprint.slice()));
    lView[HOST] = host;
    lView[FLAGS] = flags | 4 /* CreationMode */ | 128 /* Attached */ | 8 /* FirstLViewPass */;
    resetPreOrderHookFlags(lView);
    lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
    lView[CONTEXT] = context;
    lView[RENDERER_FACTORY] = (/** @type {?} */ ((rendererFactory || parentLView && parentLView[RENDERER_FACTORY])));
    ngDevMode && assertDefined(lView[RENDERER_FACTORY], 'RendererFactory is required');
    lView[RENDERER] = (/** @type {?} */ ((renderer || parentLView && parentLView[RENDERER])));
    ngDevMode && assertDefined(lView[RENDERER], 'Renderer is required');
    lView[SANITIZER] = sanitizer || parentLView && parentLView[SANITIZER] || (/** @type {?} */ (null));
    lView[(/** @type {?} */ (INJECTOR$1))] = injector || parentLView && parentLView[INJECTOR$1] || null;
    lView[T_HOST] = tHostNode;
    ngDevMode && assertEqual(tView.type == 2 /* Embedded */ ? parentLView !== null : true, true, 'Embedded views must have parentLView');
    lView[DECLARATION_COMPONENT_VIEW] =
        tView.type == 2 /* Embedded */ ? (/** @type {?} */ (parentLView))[DECLARATION_COMPONENT_VIEW] : lView;
    ngDevMode && attachLViewDebug(lView);
    return lView;
}
/**
 * @param {?} tView
 * @param {?} tHostNode
 * @param {?} index
 * @param {?} type
 * @param {?} name
 * @param {?} attrs
 * @return {?}
 */
function getOrCreateTNode(tView, tHostNode, index, type, name, attrs) {
    // Keep this function short, so that the VM will inline it.
    /** @type {?} */
    const adjustedIndex = index + HEADER_OFFSET;
    /** @type {?} */
    const tNode = (/** @type {?} */ (tView.data[adjustedIndex])) ||
        createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs);
    setPreviousOrParentTNode(tNode, true);
    return (/** @type {?} */ (tNode));
}
/**
 * @param {?} tView
 * @param {?} tHostNode
 * @param {?} adjustedIndex
 * @param {?} type
 * @param {?} name
 * @param {?} attrs
 * @return {?}
 */
function createTNodeAtIndex(tView, tHostNode, adjustedIndex, type, name, attrs) {
    /** @type {?} */
    const previousOrParentTNode = getPreviousOrParentTNode();
    /** @type {?} */
    const isParent = getIsParent();
    /** @type {?} */
    const parent = isParent ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;
    // Parents cannot cross component boundaries because components will be used in multiple places,
    // so it's only set if the view is the same.
    /** @type {?} */
    const parentInSameView = parent && parent !== tHostNode;
    /** @type {?} */
    const tParentNode = parentInSameView ? (/** @type {?} */ (parent)) : null;
    /** @type {?} */
    const tNode = tView.data[adjustedIndex] =
        createTNode(tView, tParentNode, type, adjustedIndex, name, attrs);
    // Assign a pointer to the first child node of a given view. The first node is not always the one
    // at index 0, in case of i18n, index 0 can be the instruction `i18nStart` and the first node has
    // the index 1 or more, so we can't just check node index.
    if (tView.firstChild === null) {
        tView.firstChild = tNode;
    }
    if (previousOrParentTNode) {
        if (isParent && previousOrParentTNode.child == null &&
            (tNode.parent !== null || previousOrParentTNode.type === 2 /* View */)) {
            // We are in the same view, which means we are adding content node to the parent view.
            previousOrParentTNode.child = tNode;
        }
        else if (!isParent) {
            previousOrParentTNode.next = tNode;
        }
    }
    return tNode;
}
/**
 * @param {?} tView
 * @param {?} tParentNode
 * @param {?} index
 * @param {?} lView
 * @return {?}
 */
function assignTViewNodeToLView(tView, tParentNode, index, lView) {
    // View nodes are not stored in data because they can be added / removed at runtime (which
    // would cause indices to change). Their TNodes are instead stored in tView.node.
    /** @type {?} */
    let tNode = tView.node;
    if (tNode == null) {
        ngDevMode && tParentNode &&
            assertNodeOfPossibleTypes(tParentNode, 3 /* Element */, 0 /* Container */);
        tView.node = tNode = (/** @type {?} */ (createTNode(tView, (/** @type {?} */ (tParentNode)), //
        2 /* View */, index, null, null)));
    }
    return lView[T_HOST] = (/** @type {?} */ (tNode));
}
/**
 * When elements are created dynamically after a view blueprint is created (e.g. through
 * i18nApply() or ComponentFactory.create), we need to adjust the blueprint for future
 * template passes.
 *
 * @param {?} tView `TView` associated with `LView`
 * @param {?} lView
 * @param {?} numSlotsToAlloc The number of slots to alloc in the LView, should be >0
 * @return {?}
 */
function allocExpando(tView, lView, numSlotsToAlloc) {
    ngDevMode && assertGreaterThan(numSlotsToAlloc, 0, 'The number of slots to alloc should be greater than 0');
    if (numSlotsToAlloc > 0) {
        if (tView.firstCreatePass) {
            for (let i = 0; i < numSlotsToAlloc; i++) {
                tView.blueprint.push(null);
                tView.data.push(null);
                lView.push(null);
            }
            // We should only increment the expando start index if there aren't already directives
            // and injectors saved in the "expando" section
            if (!tView.expandoInstructions) {
                tView.expandoStartIndex += numSlotsToAlloc;
            }
            else {
                // Since we're adding the dynamic nodes into the expando section, we need to let the host
                // bindings know that they should skip x slots
                tView.expandoInstructions.push(numSlotsToAlloc);
            }
        }
    }
}
//////////////////////////
//// Render
//////////////////////////
/**
 * Processes a view in the creation mode. This includes a number of steps in a specific order:
 * - creating view query functions (if any);
 * - executing a template function in the creation mode;
 * - updating static queries (if any);
 * - creating child components defined in a given view.
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} context
 * @return {?}
 */
function renderView(tView, lView, context) {
    ngDevMode && assertEqual(isCreationMode(lView), true, 'Should be run in creation mode');
    enterView(lView, lView[T_HOST]);
    try {
        /** @type {?} */
        const viewQuery = tView.viewQuery;
        if (viewQuery !== null) {
            executeViewQueryFn(1 /* Create */, viewQuery, context);
        }
        // Execute a template associated with this view, if it exists. A template function might not be
        // defined for the root component views.
        /** @type {?} */
        const templateFn = tView.template;
        if (templateFn !== null) {
            executeTemplate(tView, lView, templateFn, 1 /* Create */, context);
        }
        // This needs to be set before children are processed to support recursive components.
        // This must be set to false immediately after the first creation run because in an
        // ngFor loop, all the views will be created together before update mode runs and turns
        // off firstCreatePass. If we don't set it here, instances will perform directive
        // matching, etc again and again.
        if (tView.firstCreatePass) {
            tView.firstCreatePass = false;
        }
        // We resolve content queries specifically marked as `static` in creation mode. Dynamic
        // content queries are resolved during change detection (i.e. update mode), after embedded
        // views are refreshed (see block above).
        if (tView.staticContentQueries) {
            refreshContentQueries(tView, lView);
        }
        // We must materialize query results before child components are processed
        // in case a child component has projected a container. The LContainer needs
        // to exist so the embedded views are properly attached by the container.
        if (tView.staticViewQueries) {
            executeViewQueryFn(2 /* Update */, (/** @type {?} */ (tView.viewQuery)), context);
        }
        // Render child component views.
        /** @type {?} */
        const components = tView.components;
        if (components !== null) {
            renderChildComponents(lView, components);
        }
    }
    finally {
        lView[FLAGS] &= ~4 /* CreationMode */;
        leaveView();
    }
}
/**
 * Processes a view in update mode. This includes a number of steps in a specific order:
 * - executing a template function in update mode;
 * - executing hooks;
 * - refreshing queries;
 * - setting host bindings;
 * - refreshing child (embedded and component) views.
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} templateFn
 * @param {?} context
 * @return {?}
 */
function refreshView(tView, lView, templateFn, context) {
    ngDevMode && assertEqual(isCreationMode(lView), false, 'Should be run in update mode');
    /** @type {?} */
    const flags = lView[FLAGS];
    if ((flags & 256 /* Destroyed */) === 256 /* Destroyed */)
        return;
    enterView(lView, lView[T_HOST]);
    /** @type {?} */
    const checkNoChangesMode = getCheckNoChangesMode();
    try {
        resetPreOrderHookFlags(lView);
        setBindingIndex(tView.bindingStartIndex);
        if (templateFn !== null) {
            executeTemplate(tView, lView, templateFn, 2 /* Update */, context);
        }
        /** @type {?} */
        const hooksInitPhaseCompleted = (flags & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;
        // execute pre-order hooks (OnInit, OnChanges, DoCheck)
        // PERF WARNING: do NOT extract this to a separate function without running benchmarks
        if (!checkNoChangesMode) {
            if (hooksInitPhaseCompleted) {
                /** @type {?} */
                const preOrderCheckHooks = tView.preOrderCheckHooks;
                if (preOrderCheckHooks !== null) {
                    executeCheckHooks(lView, preOrderCheckHooks, null);
                }
            }
            else {
                /** @type {?} */
                const preOrderHooks = tView.preOrderHooks;
                if (preOrderHooks !== null) {
                    executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, null);
                }
                incrementInitPhaseFlags(lView, 0 /* OnInitHooksToBeRun */);
            }
        }
        refreshDynamicEmbeddedViews(lView);
        // Content query results must be refreshed before content hooks are called.
        if (tView.contentQueries !== null) {
            refreshContentQueries(tView, lView);
        }
        // execute content hooks (AfterContentInit, AfterContentChecked)
        // PERF WARNING: do NOT extract this to a separate function without running benchmarks
        if (!checkNoChangesMode) {
            if (hooksInitPhaseCompleted) {
                /** @type {?} */
                const contentCheckHooks = tView.contentCheckHooks;
                if (contentCheckHooks !== null) {
                    executeCheckHooks(lView, contentCheckHooks);
                }
            }
            else {
                /** @type {?} */
                const contentHooks = tView.contentHooks;
                if (contentHooks !== null) {
                    executeInitAndCheckHooks(lView, contentHooks, 1 /* AfterContentInitHooksToBeRun */);
                }
                incrementInitPhaseFlags(lView, 1 /* AfterContentInitHooksToBeRun */);
            }
        }
        setHostBindingsByExecutingExpandoInstructions(tView, lView);
        // Refresh child component views.
        /** @type {?} */
        const components = tView.components;
        if (components !== null) {
            refreshChildComponents(lView, components);
        }
        // View queries must execute after refreshing child components because a template in this view
        // could be inserted in a child component. If the view query executes before child component
        // refresh, the template might not yet be inserted.
        /** @type {?} */
        const viewQuery = tView.viewQuery;
        if (viewQuery !== null) {
            executeViewQueryFn(2 /* Update */, viewQuery, context);
        }
        // execute view hooks (AfterViewInit, AfterViewChecked)
        // PERF WARNING: do NOT extract this to a separate function without running benchmarks
        if (!checkNoChangesMode) {
            if (hooksInitPhaseCompleted) {
                /** @type {?} */
                const viewCheckHooks = tView.viewCheckHooks;
                if (viewCheckHooks !== null) {
                    executeCheckHooks(lView, viewCheckHooks);
                }
            }
            else {
                /** @type {?} */
                const viewHooks = tView.viewHooks;
                if (viewHooks !== null) {
                    executeInitAndCheckHooks(lView, viewHooks, 2 /* AfterViewInitHooksToBeRun */);
                }
                incrementInitPhaseFlags(lView, 2 /* AfterViewInitHooksToBeRun */);
            }
        }
        if (tView.firstUpdatePass === true) {
            // We need to make sure that we only flip the flag on successful `refreshView` only
            // Don't do this in `finally` block.
            // If we did this in `finally` block then an exception could block the execution of styling
            // instructions which in turn would be unable to insert themselves into the styling linked
            // list. The result of this would be that if the exception would not be throw on subsequent CD
            // the styling would be unable to process it data and reflect to the DOM.
            tView.firstUpdatePass = false;
        }
        // Do not reset the dirty state when running in check no changes mode. We don't want components
        // to behave differently depending on whether check no changes is enabled or not. For example:
        // Marking an OnPush component as dirty from within the `ngAfterViewInit` hook in order to
        // refresh a `NgClass` binding should work. If we would reset the dirty state in the check
        // no changes cycle, the component would be not be dirty for the next update pass. This would
        // be different in production mode where the component dirty state is not reset.
        if (!checkNoChangesMode) {
            lView[FLAGS] &= ~(64 /* Dirty */ | 8 /* FirstLViewPass */);
        }
    }
    finally {
        leaveView();
    }
}
/**
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} templateFn
 * @param {?} context
 * @return {?}
 */
function renderComponentOrTemplate(tView, lView, templateFn, context) {
    /** @type {?} */
    const rendererFactory = lView[RENDERER_FACTORY];
    /** @type {?} */
    const normalExecutionPath = !getCheckNoChangesMode();
    /** @type {?} */
    const creationModeIsActive = isCreationMode(lView);
    try {
        if (normalExecutionPath && !creationModeIsActive && rendererFactory.begin) {
            rendererFactory.begin();
        }
        if (creationModeIsActive) {
            renderView(tView, lView, context);
        }
        refreshView(tView, lView, templateFn, context);
    }
    finally {
        if (normalExecutionPath && !creationModeIsActive && rendererFactory.end) {
            rendererFactory.end();
        }
    }
}
/**
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} templateFn
 * @param {?} rf
 * @param {?} context
 * @return {?}
 */
function executeTemplate(tView, lView, templateFn, rf, context) {
    /** @type {?} */
    const prevSelectedIndex = getSelectedIndex();
    try {
        setSelectedIndex(-1);
        if (rf & 2 /* Update */ && lView.length > HEADER_OFFSET) {
            // When we're updating, inherently select 0 so we don't
            // have to generate that instruction for most update blocks.
            selectIndexInternal(tView, lView, 0, getCheckNoChangesMode());
        }
        templateFn(rf, context);
    }
    finally {
        setSelectedIndex(prevSelectedIndex);
    }
}
//////////////////////////
//// Element
//////////////////////////
/**
 * @param {?} tView
 * @param {?} tNode
 * @param {?} lView
 * @return {?}
 */
function executeContentQueries(tView, tNode, lView) {
    if (isContentQueryHost(tNode)) {
        /** @type {?} */
        const start = tNode.directiveStart;
        /** @type {?} */
        const end = tNode.directiveEnd;
        for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
            /** @type {?} */
            const def = (/** @type {?} */ (tView.data[directiveIndex]));
            if (def.contentQueries) {
                def.contentQueries(1 /* Create */, lView[directiveIndex], directiveIndex);
            }
        }
    }
}
/**
 * Creates directive instances.
 * @param {?} tView
 * @param {?} lView
 * @param {?} tNode
 * @return {?}
 */
function createDirectivesInstances(tView, lView, tNode) {
    if (!getBindingsEnabled())
        return;
    instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));
    if ((tNode.flags & 128 /* hasHostBindings */) === 128 /* hasHostBindings */) {
        invokeDirectivesHostBindings(tView, lView, tNode);
    }
}
/**
 * Takes a list of local names and indices and pushes the resolved local variable values
 * to LView in the same order as they are loaded in the template with load().
 * @param {?} viewData
 * @param {?} tNode
 * @param {?=} localRefExtractor
 * @return {?}
 */
function saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {
    /** @type {?} */
    const localNames = tNode.localNames;
    if (localNames !== null) {
        /** @type {?} */
        let localIndex = tNode.index + 1;
        for (let i = 0; i < localNames.length; i += 2) {
            /** @type {?} */
            const index = (/** @type {?} */ (localNames[i + 1]));
            /** @type {?} */
            const value = index === -1 ?
                localRefExtractor((/** @type {?} */ (tNode)), viewData) :
                viewData[index];
            viewData[localIndex++] = value;
        }
    }
}
/**
 * Gets TView from a template function or creates a new TView
 * if it doesn't already exist.
 *
 * @param {?} def ComponentDef
 * @return {?} TView
 */
function getOrCreateTComponentView(def) {
    return def.tView ||
        (def.tView = createTView(1 /* Component */, -1, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts));
}
/**
 * Creates a TView instance
 *
 * @param {?} type
 * @param {?} viewIndex The viewBlockId for inline views, or -1 if it's a component/dynamic
 * @param {?} templateFn Template function
 * @param {?} decls The number of nodes, local refs, and pipes in this template
 * @param {?} vars
 * @param {?} directives Registry of directives for this view
 * @param {?} pipes Registry of pipes for this view
 * @param {?} viewQuery View queries for this view
 * @param {?} schemas Schemas for this view
 * @param {?} consts Constants for this view
 * @return {?}
 */
function createTView(type, viewIndex, templateFn, decls, vars, directives, pipes, viewQuery, schemas, consts) {
    ngDevMode && ngDevMode.tView++;
    /** @type {?} */
    const bindingStartIndex = HEADER_OFFSET + decls;
    // This length does not yet contain host bindings from child directives because at this point,
    // we don't know which directives are active on this template. As soon as a directive is matched
    // that has a host binding, we will update the blueprint with that def's hostVars count.
    /** @type {?} */
    const initialViewLength = bindingStartIndex + vars;
    /** @type {?} */
    const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
    return blueprint[(/** @type {?} */ (TVIEW))] = ngDevMode ?
        new TViewConstructor(type, viewIndex, // id: number,
        blueprint, // blueprint: LView,
        templateFn, // template: ComponentTemplate<{}>|null,
        null, // queries: TQueries|null
        viewQuery, (/** @type {?} */ (null)), // node: TViewNode|TElementNode|null,
        cloneToTViewData(blueprint).fill(null, bindingStartIndex), // data: TData,
        bindingStartIndex, // bindingStartIndex: number,
        initialViewLength, // expandoStartIndex: number,
        null, // expandoInstructions: ExpandoInstructions|null,
        true, // firstCreatePass: boolean,
        true, // firstUpdatePass: boolean,
        false, // staticViewQueries: boolean,
        false, // staticContentQueries: boolean,
        null, // preOrderHooks: HookData|null,
        null, // preOrderCheckHooks: HookData|null,
        null, // contentHooks: HookData|null,
        null, // contentCheckHooks: HookData|null,
        null, // viewHooks: HookData|null,
        null, // viewCheckHooks: HookData|null,
        null, // destroyHooks: HookData|null,
        null, // cleanup: any[]|null,
        null, // contentQueries: number[]|null,
        null, // components: number[]|null,
        typeof directives === 'function' ?
            directives() :
            directives, // directiveRegistry: DirectiveDefList|null,
        typeof pipes === 'function' ? pipes() : pipes, // pipeRegistry: PipeDefList|null,
        null, // firstChild: TNode|null,
        schemas, // schemas: SchemaMetadata[]|null,
        consts) : // consts: TConstants|null
        {
            type: type,
            id: viewIndex,
            blueprint: blueprint,
            template: templateFn,
            queries: null,
            viewQuery: viewQuery,
            node: (/** @type {?} */ (null)),
            data: blueprint.slice().fill(null, bindingStartIndex),
            bindingStartIndex: bindingStartIndex,
            expandoStartIndex: initialViewLength,
            expandoInstructions: null,
            firstCreatePass: true,
            firstUpdatePass: true,
            staticViewQueries: false,
            staticContentQueries: false,
            preOrderHooks: null,
            preOrderCheckHooks: null,
            contentHooks: null,
            contentCheckHooks: null,
            viewHooks: null,
            viewCheckHooks: null,
            destroyHooks: null,
            cleanup: null,
            contentQueries: null,
            components: null,
            directiveRegistry: typeof directives === 'function' ? directives() : directives,
            pipeRegistry: typeof pipes === 'function' ? pipes() : pipes,
            firstChild: null,
            schemas: schemas,
            consts: consts,
        };
}
/**
 * @param {?} bindingStartIndex
 * @param {?} initialViewLength
 * @return {?}
 */
function createViewBlueprint(bindingStartIndex, initialViewLength) {
    /** @type {?} */
    const blueprint = ngDevMode ? new LViewBlueprint() : [];
    for (let i = 0; i < initialViewLength; i++) {
        blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
    }
    return (/** @type {?} */ (blueprint));
}
/**
 * @param {?} text
 * @param {?} token
 * @return {?}
 */
function createError(text, token) {
    return new Error(`Renderer: ${text} [${stringifyForError(token)}]`);
}
/**
 * @param {?} rElement
 * @param {?} elementOrSelector
 * @return {?}
 */
function assertHostNodeExists(rElement, elementOrSelector) {
    if (!rElement) {
        if (typeof elementOrSelector === 'string') {
            throw createError('Host node with selector not found:', elementOrSelector);
        }
        else {
            throw createError('Host node is required:', elementOrSelector);
        }
    }
}
/**
 * Locates the host native element, used for bootstrapping existing nodes into rendering pipeline.
 *
 * @param {?} renderer
 * @param {?} elementOrSelector Render element or CSS selector to locate the element.
 * @param {?} encapsulation View Encapsulation defined for component that requests host element.
 * @return {?}
 */
function locateHostElement(renderer, elementOrSelector, encapsulation) {
    if (isProceduralRenderer(renderer)) {
        // When using native Shadow DOM, do not clear host element to allow native slot projection
        /** @type {?} */
        const preserveContent = encapsulation === ViewEncapsulation$1.ShadowDom;
        return renderer.selectRootElement(elementOrSelector, preserveContent);
    }
    /** @type {?} */
    let rElement = typeof elementOrSelector === 'string' ?
        (/** @type {?} */ (renderer.querySelector(elementOrSelector))) :
        elementOrSelector;
    ngDevMode && assertHostNodeExists(rElement, elementOrSelector);
    // Always clear host element's content when Renderer3 is in use. For procedural renderer case we
    // make it depend on whether ShadowDom encapsulation is used (in which case the content should be
    // preserved to allow native slot projection). ShadowDom encapsulation requires procedural
    // renderer, and procedural renderer case is handled above.
    rElement.textContent = '';
    return rElement;
}
/**
 * Saves context for this cleanup function in LView.cleanupInstances.
 *
 * On the first template pass, saves in TView:
 * - Cleanup function
 * - Index of context we just saved in LView.cleanupInstances
 * @param {?} tView
 * @param {?} lView
 * @param {?} context
 * @param {?} cleanupFn
 * @return {?}
 */
function storeCleanupWithContext(tView, lView, context, cleanupFn) {
    /** @type {?} */
    const lCleanup = getLCleanup(lView);
    lCleanup.push(context);
    if (tView.firstCreatePass) {
        getTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
    }
}
/**
 * Saves the cleanup function itself in LView.cleanupInstances.
 *
 * This is necessary for functions that are wrapped with their contexts, like in renderer2
 * listeners.
 *
 * On the first template pass, the index of the cleanup function is saved in TView.
 * @param {?} tView
 * @param {?} lView
 * @param {?} cleanupFn
 * @return {?}
 */
function storeCleanupFn(tView, lView, cleanupFn) {
    getLCleanup(lView).push(cleanupFn);
    if (tView.firstCreatePass) {
        getTViewCleanup(tView).push((/** @type {?} */ (lView[CLEANUP])).length - 1, null);
    }
}
/**
 * Constructs a TNode object from the arguments.
 *
 * @param {?} tView `TView` to which this `TNode` belongs (used only in `ngDevMode`)
 * @param {?} tParent
 * @param {?} type The type of the node
 * @param {?} adjustedIndex The index of the TNode in TView.data, adjusted for HEADER_OFFSET
 * @param {?} tagName The tag name of the node
 * @param {?} attrs The attributes defined on this node
 * @return {?} the TNode object
 */
function createTNode(tView, tParent, type, adjustedIndex, tagName, attrs) {
    ngDevMode && ngDevMode.tNode++;
    /** @type {?} */
    let injectorIndex = tParent ? tParent.injectorIndex : -1;
    return ngDevMode ? new TNodeDebug(tView, // tView_: TView
    type, // type: TNodeType
    adjustedIndex, // index: number
    injectorIndex, // injectorIndex: number
    -1, // directiveStart: number
    -1, // directiveEnd: number
    -1, // directiveStylingLast: number
    null, // propertyBindings: number[]|null
    0, // flags: TNodeFlags
    0, // providerIndexes: TNodeProviderIndexes
    tagName, // tagName: string|null
    attrs, // attrs: (string|AttributeMarker|(string|SelectorFlags)[])[]|null
    null, // mergedAttrs
    null, // localNames: (string|number)[]|null
    undefined, // initialInputs: (string[]|null)[]|null|undefined
    null, // inputs: PropertyAliases|null
    null, // outputs: PropertyAliases|null
    null, // tViews: ITView|ITView[]|null
    null, // next: ITNode|null
    null, // projectionNext: ITNode|null
    null, // child: ITNode|null
    tParent, // parent: TElementNode|TContainerNode|null
    null, // projection: number|(ITNode|RNode[])[]|null
    null, // styles: string|null
    undefined, // residualStyles: string|null
    null, // classes: string|null
    undefined, (/** @type {?} */ (0)), (/** @type {?} */ (0))) :
        {
            type: type,
            index: adjustedIndex,
            injectorIndex: injectorIndex,
            directiveStart: -1,
            directiveEnd: -1,
            directiveStylingLast: -1,
            propertyBindings: null,
            flags: 0,
            providerIndexes: 0,
            tagName: tagName,
            attrs: attrs,
            mergedAttrs: null,
            localNames: null,
            initialInputs: undefined,
            inputs: null,
            outputs: null,
            tViews: null,
            next: null,
            projectionNext: null,
            child: null,
            parent: tParent,
            projection: null,
            styles: null,
            residualStyles: undefined,
            classes: null,
            residualClasses: undefined,
            classBindings: (/** @type {?} */ (0)),
            styleBindings: (/** @type {?} */ (0)),
        };
}
/**
 * @param {?} inputAliasMap
 * @param {?} directiveDefIdx
 * @param {?} propStore
 * @return {?}
 */
function generatePropertyAliases(inputAliasMap, directiveDefIdx, propStore) {
    for (let publicName in inputAliasMap) {
        if (inputAliasMap.hasOwnProperty(publicName)) {
            propStore = propStore === null ? {} : propStore;
            /** @type {?} */
            const internalName = inputAliasMap[publicName];
            if (propStore.hasOwnProperty(publicName)) {
                propStore[publicName].push(directiveDefIdx, internalName);
            }
            else {
                (propStore[publicName] = [directiveDefIdx, internalName]);
            }
        }
    }
    return propStore;
}
/**
 * Initializes data structures required to work with directive outputs and outputs.
 * Initialization is done for all directives matched on a given TNode.
 * @param {?} tView
 * @param {?} tNode
 * @return {?}
 */
function initializeInputAndOutputAliases(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView);
    /** @type {?} */
    const start = tNode.directiveStart;
    /** @type {?} */
    const end = tNode.directiveEnd;
    /** @type {?} */
    const defs = tView.data;
    /** @type {?} */
    const tNodeAttrs = tNode.attrs;
    /** @type {?} */
    const inputsFromAttrs = ngDevMode ? new TNodeInitialInputs() : [];
    /** @type {?} */
    let inputsStore = null;
    /** @type {?} */
    let outputsStore = null;
    for (let i = start; i < end; i++) {
        /** @type {?} */
        const directiveDef = (/** @type {?} */ (defs[i]));
        /** @type {?} */
        const directiveInputs = directiveDef.inputs;
        inputsFromAttrs.push(tNodeAttrs !== null ? generateInitialInputs(directiveInputs, tNodeAttrs) : null);
        inputsStore = generatePropertyAliases(directiveInputs, i, inputsStore);
        outputsStore = generatePropertyAliases(directiveDef.outputs, i, outputsStore);
    }
    if (inputsStore !== null) {
        if (inputsStore.hasOwnProperty('class')) {
            tNode.flags |= 16 /* hasClassInput */;
        }
        if (inputsStore.hasOwnProperty('style')) {
            tNode.flags |= 32 /* hasStyleInput */;
        }
    }
    tNode.initialInputs = inputsFromAttrs;
    tNode.inputs = inputsStore;
    tNode.outputs = outputsStore;
}
/**
 * Mapping between attributes names that don't correspond to their element property names.
 *
 * Performance note: this function is written as a series of if checks (instead of, say, a property
 * object lookup) for performance reasons - the series of `if` checks seems to be the fastest way of
 * mapping property names. Do NOT change without benchmarking.
 *
 * Note: this mapping has to be kept in sync with the equally named mapping in the template
 * type-checking machinery of ngtsc.
 * @param {?} name
 * @return {?}
 */
function mapPropName(name) {
    if (name === 'class')
        return 'className';
    if (name === 'for')
        return 'htmlFor';
    if (name === 'formaction')
        return 'formAction';
    if (name === 'innerHtml')
        return 'innerHTML';
    if (name === 'readonly')
        return 'readOnly';
    if (name === 'tabindex')
        return 'tabIndex';
    return name;
}
/**
 * @template T
 * @param {?} tView
 * @param {?} tNode
 * @param {?} lView
 * @param {?} propName
 * @param {?} value
 * @param {?} renderer
 * @param {?} sanitizer
 * @param {?} nativeOnly
 * @return {?}
 */
function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
    ngDevMode && assertNotSame(value, (/** @type {?} */ (NO_CHANGE)), 'Incoming value should never be NO_CHANGE.');
    /** @type {?} */
    const element = (/** @type {?} */ (getNativeByTNode(tNode, lView)));
    /** @type {?} */
    let inputData = tNode.inputs;
    /** @type {?} */
    let dataValue;
    if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
        setInputsForProperty(tView, lView, dataValue, propName, value);
        if (isComponentHost(tNode))
            markDirtyIfOnPush(lView, tNode.index);
        if (ngDevMode) {
            setNgReflectProperties(lView, element, tNode.type, dataValue, value);
        }
    }
    else if (tNode.type === 3 /* Element */) {
        propName = mapPropName(propName);
        if (ngDevMode) {
            validateAgainstEventProperties(propName);
            if (!validateProperty(tView, lView, element, propName, tNode)) {
                // Return here since we only log warnings for unknown properties.
                warnAboutUnknownProperty(propName, tNode);
                return;
            }
            ngDevMode.rendererSetProperty++;
        }
        // It is assumed that the sanitizer is only added when the compiler determines that the
        // property is risky, so sanitization can be done without further checks.
        value = sanitizer != null ? ((/** @type {?} */ (sanitizer(value, tNode.tagName || '', propName)))) : value;
        if (isProceduralRenderer(renderer)) {
            renderer.setProperty((/** @type {?} */ (element)), propName, value);
        }
        else if (!isAnimationProp(propName)) {
            ((/** @type {?} */ (element))).setProperty ? ((/** @type {?} */ (element))).setProperty(propName, value) :
                ((/** @type {?} */ (element)))[propName] = value;
        }
    }
    else if (tNode.type === 0 /* Container */) {
        // If the node is a container and the property didn't
        // match any of the inputs or schemas we should throw.
        if (ngDevMode && !matchingSchemas(tView, lView, tNode.tagName)) {
            warnAboutUnknownProperty(propName, tNode);
        }
    }
}
/**
 * If node is an OnPush component, marks its LView dirty.
 * @param {?} lView
 * @param {?} viewIndex
 * @return {?}
 */
function markDirtyIfOnPush(lView, viewIndex) {
    ngDevMode && assertLView(lView);
    /** @type {?} */
    const childComponentLView = getComponentLViewByIndex(viewIndex, lView);
    if (!(childComponentLView[FLAGS] & 16 /* CheckAlways */)) {
        childComponentLView[FLAGS] |= 64 /* Dirty */;
    }
}
/**
 * @param {?} lView
 * @param {?} element
 * @param {?} type
 * @param {?} attrName
 * @param {?} value
 * @return {?}
 */
function setNgReflectProperty(lView, element, type, attrName, value) {
    /** @type {?} */
    const renderer = lView[RENDERER];
    attrName = normalizeDebugBindingName(attrName);
    /** @type {?} */
    const debugValue = normalizeDebugBindingValue(value);
    if (type === 3 /* Element */) {
        if (value == null) {
            isProceduralRenderer(renderer) ? renderer.removeAttribute(((/** @type {?} */ (element))), attrName) :
                ((/** @type {?} */ (element))).removeAttribute(attrName);
        }
        else {
            isProceduralRenderer(renderer) ?
                renderer.setAttribute(((/** @type {?} */ (element))), attrName, debugValue) :
                ((/** @type {?} */ (element))).setAttribute(attrName, debugValue);
        }
    }
    else {
        /** @type {?} */
        const textContent = `bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`;
        if (isProceduralRenderer(renderer)) {
            renderer.setValue(((/** @type {?} */ (element))), textContent);
        }
        else {
            ((/** @type {?} */ (element))).textContent = textContent;
        }
    }
}
/**
 * @param {?} lView
 * @param {?} element
 * @param {?} type
 * @param {?} dataValue
 * @param {?} value
 * @return {?}
 */
function setNgReflectProperties(lView, element, type, dataValue, value) {
    if (type === 3 /* Element */ || type === 0 /* Container */) {
        /**
         * dataValue is an array containing runtime input or output names for the directives:
         * i+0: directive instance index
         * i+1: privateName
         *
         * e.g. [0, 'change', 'change-minified']
         * we want to set the reflected property with the privateName: dataValue[i+1]
         */
        for (let i = 0; i < dataValue.length; i += 2) {
            setNgReflectProperty(lView, element, type, (/** @type {?} */ (dataValue[i + 1])), value);
        }
    }
}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} element
 * @param {?} propName
 * @param {?} tNode
 * @return {?}
 */
function validateProperty(tView, lView, element, propName, tNode) {
    // The property is considered valid if the element matches the schema, it exists on the element
    // or it is synthetic, and we are in a browser context (web worker nodes should be skipped).
    if (matchingSchemas(tView, lView, tNode.tagName) || propName in element ||
        isAnimationProp(propName)) {
        return true;
    }
    // Note: `typeof Node` returns 'function' in most browsers, but on IE it is 'object' so we
    // need to account for both here, while being careful for `typeof null` also returning 'object'.
    return typeof Node === 'undefined' || Node === null || !(element instanceof Node);
}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} tagName
 * @return {?}
 */
function matchingSchemas(tView, lView, tagName) {
    /** @type {?} */
    const schemas = tView.schemas;
    if (schemas !== null) {
        for (let i = 0; i < schemas.length; i++) {
            /** @type {?} */
            const schema = schemas[i];
            if (schema === NO_ERRORS_SCHEMA ||
                schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf('-') > -1) {
                return true;
            }
        }
    }
    return false;
}
/**
 * Logs a warning that a property is not supported on an element.
 * @param {?} propName Name of the invalid property.
 * @param {?} tNode Node on which we encountered the property.
 * @return {?}
 */
function warnAboutUnknownProperty(propName, tNode) {
    console.warn(`Can't bind to '${propName}' since it isn't a known property of '${tNode.tagName}'.`);
}
/**
 * Instantiate a root component.
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} def
 * @return {?}
 */
function instantiateRootComponent(tView, lView, def) {
    /** @type {?} */
    const rootTNode = getPreviousOrParentTNode();
    if (tView.firstCreatePass) {
        if (def.providersResolver)
            def.providersResolver(def);
        generateExpandoInstructionBlock(tView, rootTNode, 1);
        baseResolveDirective(tView, lView, def);
    }
    /** @type {?} */
    const directive = getNodeInjectable(lView, tView, lView.length - 1, (/** @type {?} */ (rootTNode)));
    attachPatchData(directive, lView);
    /** @type {?} */
    const native = getNativeByTNode(rootTNode, lView);
    if (native) {
        attachPatchData(native, lView);
    }
    return directive;
}
/**
 * Resolve the matched directives on a node.
 * @param {?} tView
 * @param {?} lView
 * @param {?} tNode
 * @param {?} localRefs
 * @return {?}
 */
function resolveDirectives(tView, lView, tNode, localRefs) {
    // Please make sure to have explicit type for `exportsMap`. Inferred type triggers bug in
    // tsickle.
    ngDevMode && assertFirstCreatePass(tView);
    /** @type {?} */
    let hasDirectives = false;
    if (getBindingsEnabled()) {
        /** @type {?} */
        const directiveDefs = findDirectiveDefMatches(tView, lView, tNode);
        /** @type {?} */
        const exportsMap = localRefs === null ? null : { '': -1 };
        if (directiveDefs !== null) {
            /** @type {?} */
            let totalDirectiveHostVars = 0;
            hasDirectives = true;
            initTNodeFlags(tNode, tView.data.length, directiveDefs.length);
            // When the same token is provided by several directives on the same node, some rules apply in
            // the viewEngine:
            // - viewProviders have priority over providers
            // - the last directive in NgModule.declarations has priority over the previous one
            // So to match these rules, the order in which providers are added in the arrays is very
            // important.
            for (let i = 0; i < directiveDefs.length; i++) {
                /** @type {?} */
                const def = directiveDefs[i];
                if (def.providersResolver)
                    def.providersResolver(def);
            }
            generateExpandoInstructionBlock(tView, tNode, directiveDefs.length);
            /** @type {?} */
            let preOrderHooksFound = false;
            /** @type {?} */
            let preOrderCheckHooksFound = false;
            for (let i = 0; i < directiveDefs.length; i++) {
                /** @type {?} */
                const def = directiveDefs[i];
                // Merge the attrs in the order of matches. This assumes that the first directive is the
                // component itself, so that the component has the least priority.
                tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
                baseResolveDirective(tView, lView, def);
                saveNameToExportMap((/** @type {?} */ (tView.data)).length - 1, def, exportsMap);
                if (def.contentQueries !== null)
                    tNode.flags |= 8 /* hasContentQuery */;
                if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)
                    tNode.flags |= 128 /* hasHostBindings */;
                // Only push a node index into the preOrderHooks array if this is the first
                // pre-order hook found on this node.
                if (!preOrderHooksFound && (def.onChanges || def.onInit || def.doCheck)) {
                    // We will push the actual hook function into this array later during dir instantiation.
                    // We cannot do it now because we must ensure hooks are registered in the same
                    // order that directives are created (i.e. injection order).
                    (tView.preOrderHooks || (tView.preOrderHooks = [])).push(tNode.index - HEADER_OFFSET);
                    preOrderHooksFound = true;
                }
                if (!preOrderCheckHooksFound && (def.onChanges || def.doCheck)) {
                    (tView.preOrderCheckHooks || (tView.preOrderCheckHooks = [])).push(tNode.index - HEADER_OFFSET);
                    preOrderCheckHooksFound = true;
                }
                addHostBindingsToExpandoInstructions(tView, def);
                totalDirectiveHostVars += def.hostVars;
            }
            initializeInputAndOutputAliases(tView, tNode);
            growHostVarsSpace(tView, lView, totalDirectiveHostVars);
        }
        if (exportsMap)
            cacheMatchingLocalNames(tNode, localRefs, exportsMap);
    }
    // Merge the template attrs last so that they have the highest priority.
    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
    return hasDirectives;
}
/**
 * Add `hostBindings` to the `TView.expandoInstructions`.
 *
 * @param {?} tView `TView` to which the `hostBindings` should be added.
 * @param {?} def `ComponentDef`/`DirectiveDef`, which contains the `hostVars`/`hostBindings` to add.
 * @return {?}
 */
function addHostBindingsToExpandoInstructions(tView, def) {
    ngDevMode && assertFirstCreatePass(tView);
    /** @type {?} */
    const expando = (/** @type {?} */ (tView.expandoInstructions));
    // TODO(misko): PERF we are adding `hostBindings` even if there is nothing to add! This is
    // suboptimal for performance. `def.hostBindings` may be null,
    // but we still need to push null to the array as a placeholder
    // to ensure the directive counter is incremented (so host
    // binding functions always line up with the corrective directive).
    // This is suboptimal for performance. See `currentDirectiveIndex`
    //  comment in `setHostBindingsByExecutingExpandoInstructions` for more
    // details.  expando.push(def.hostBindings);
    expando.push(def.hostBindings);
    /** @type {?} */
    const hostVars = def.hostVars;
    if (hostVars !== 0) {
        expando.push(def.hostVars);
    }
}
/**
 * Grow the `LView`, blueprint and `TView.data` to accommodate the `hostBindings`.
 *
 * To support locality we don't know ahead of time how many `hostVars` of the containing directives
 * we need to allocate. For this reason we allow growing these data structures as we discover more
 * directives to accommodate them.
 *
 * @param {?} tView `TView` which needs to be grown.
 * @param {?} lView `LView` which needs to be grown.
 * @param {?} count Size by which we need to grow the data structures.
 * @return {?}
 */
function growHostVarsSpace(tView, lView, count) {
    ngDevMode && assertFirstCreatePass(tView);
    ngDevMode && assertSame(tView, lView[TVIEW], '`LView` must be associated with `TView`!');
    for (let i = 0; i < count; i++) {
        lView.push(NO_CHANGE);
        tView.blueprint.push(NO_CHANGE);
        tView.data.push(null);
    }
}
/**
 * Instantiate all the directives that were previously resolved on the current node.
 * @param {?} tView
 * @param {?} lView
 * @param {?} tNode
 * @param {?} native
 * @return {?}
 */
function instantiateAllDirectives(tView, lView, tNode, native) {
    /** @type {?} */
    const start = tNode.directiveStart;
    /** @type {?} */
    const end = tNode.directiveEnd;
    if (!tView.firstCreatePass) {
        getOrCreateNodeInjectorForNode(tNode, lView);
    }
    attachPatchData(native, lView);
    /** @type {?} */
    const initialInputs = tNode.initialInputs;
    for (let i = start; i < end; i++) {
        /** @type {?} */
        const def = (/** @type {?} */ (tView.data[i]));
        /** @type {?} */
        const isComponent = isComponentDef(def);
        if (isComponent) {
            ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */);
            addComponentLogic(lView, (/** @type {?} */ (tNode)), (/** @type {?} */ (def)));
        }
        /** @type {?} */
        const directive = getNodeInjectable(lView, tView, i, tNode);
        attachPatchData(directive, lView);
        if (initialInputs !== null) {
            setInputsFromAttrs(lView, i - start, directive, def, tNode, (/** @type {?} */ (initialInputs)));
        }
        if (isComponent) {
            /** @type {?} */
            const componentView = getComponentLViewByIndex(tNode.index, lView);
            componentView[CONTEXT] = directive;
        }
    }
}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} tNode
 * @return {?}
 */
function invokeDirectivesHostBindings(tView, lView, tNode) {
    /** @type {?} */
    const start = tNode.directiveStart;
    /** @type {?} */
    const end = tNode.directiveEnd;
    /** @type {?} */
    const expando = (/** @type {?} */ (tView.expandoInstructions));
    /** @type {?} */
    const firstCreatePass = tView.firstCreatePass;
    /** @type {?} */
    const elementIndex = tNode.index - HEADER_OFFSET;
    try {
        setSelectedIndex(elementIndex);
        for (let i = start; i < end; i++) {
            /** @type {?} */
            const def = (/** @type {?} */ (tView.data[i]));
            /** @type {?} */
            const directive = lView[i];
            if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
                invokeHostBindingsInCreationMode(def, directive);
            }
            else if (firstCreatePass) {
                expando.push(null);
            }
        }
    }
    finally {
        setSelectedIndex(-1);
    }
}
/**
 * Invoke the host bindings in creation mode.
 *
 * @param {?} def `DirectiveDef` which may contain the `hostBindings` function.
 * @param {?} directive Instance of directive.
 * @return {?}
 */
function invokeHostBindingsInCreationMode(def, directive) {
    if (def.hostBindings !== null) {
        (/** @type {?} */ (def.hostBindings))(1 /* Create */, directive);
    }
}
/**
 * Generates a new block in TView.expandoInstructions for this node.
 *
 * Each expando block starts with the element index (turned negative so we can distinguish
 * it from the hostVar count) and the directive count. See more in VIEW_DATA.md.
 * @param {?} tView
 * @param {?} tNode
 * @param {?} directiveCount
 * @return {?}
 */
function generateExpandoInstructionBlock(tView, tNode, directiveCount) {
    ngDevMode && assertEqual(tView.firstCreatePass, true, 'Expando block should only be generated on first create pass.');
    // Important: In JS `-x` and `0-x` is not the same! If `x===0` then `-x` will produce `-0` which
    // requires non standard math arithmetic and it can prevent VM optimizations.
    // `0-0` will always produce `0` and will not cause a potential deoptimization in VM.
    /** @type {?} */
    const elementIndex = HEADER_OFFSET - tNode.index;
    /** @type {?} */
    const providerStartIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;
    /** @type {?} */
    const providerCount = tView.data.length - providerStartIndex;
    (tView.expandoInstructions || (tView.expandoInstructions = [])).push(elementIndex, providerCount, directiveCount);
}
/**
 * Matches the current node against all available selectors.
 * If a component is matched (at most one), it is returned in first position in the array.
 * @param {?} tView
 * @param {?} viewData
 * @param {?} tNode
 * @return {?}
 */
function findDirectiveDefMatches(tView, viewData, tNode) {
    ngDevMode && assertFirstCreatePass(tView);
    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 4 /* ElementContainer */, 0 /* Container */);
    /** @type {?} */
    const registry = tView.directiveRegistry;
    /** @type {?} */
    let matches = null;
    if (registry) {
        for (let i = 0; i < registry.length; i++) {
            /** @type {?} */
            const def = (/** @type {?} */ (registry[i]));
            if (isNodeMatchingSelectorList(tNode, (/** @type {?} */ (def.selectors)), /* isProjectionMode */ false)) {
                matches || (matches = ngDevMode ? new MatchesArray() : []);
                diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, viewData), tView, def.type);
                if (isComponentDef(def)) {
                    if (tNode.flags & 2 /* isComponentHost */)
                        throwMultipleComponentError(tNode);
                    markAsComponentHost(tView, tNode);
                    // The component is always stored first with directives after.
                    matches.unshift(def);
                }
                else {
                    matches.push(def);
                }
            }
        }
    }
    return matches;
}
/**
 * Marks a given TNode as a component's host. This consists of:
 * - setting appropriate TNode flags;
 * - storing index of component's host element so it will be queued for view refresh during CD.
 * @param {?} tView
 * @param {?} hostTNode
 * @return {?}
 */
function markAsComponentHost(tView, hostTNode) {
    ngDevMode && assertFirstCreatePass(tView);
    hostTNode.flags |= 2 /* isComponentHost */;
    (tView.components || (tView.components = ngDevMode ? new TViewComponents() : [])).push(hostTNode.index);
}
/**
 * Caches local names and their matching directive indices for query and template lookups.
 * @param {?} tNode
 * @param {?} localRefs
 * @param {?} exportsMap
 * @return {?}
 */
function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
    if (localRefs) {
        /** @type {?} */
        const localNames = tNode.localNames =
            ngDevMode ? new TNodeLocalNames() : [];
        // Local names must be stored in tNode in the same order that localRefs are defined
        // in the template to ensure the data is loaded in the same slots as their refs
        // in the template (for template queries).
        for (let i = 0; i < localRefs.length; i += 2) {
            /** @type {?} */
            const index = exportsMap[localRefs[i + 1]];
            if (index == null)
                throw new Error(`Export of name '${localRefs[i + 1]}' not found!`);
            localNames.push(localRefs[i], index);
        }
    }
}
/**
 * Builds up an export map as directives are created, so local refs can be quickly mapped
 * to their directive instances.
 * @param {?} index
 * @param {?} def
 * @param {?} exportsMap
 * @return {?}
 */
function saveNameToExportMap(index, def, exportsMap) {
    if (exportsMap) {
        if (def.exportAs) {
            for (let i = 0; i < def.exportAs.length; i++) {
                exportsMap[def.exportAs[i]] = index;
            }
        }
        if (isComponentDef(def))
            exportsMap[''] = index;
    }
}
/**
 * Initializes the flags on the current node, setting all indices to the initial index,
 * the directive count to 0, and adding the isComponent flag.
 * @param {?} tNode
 * @param {?} index the initial index
 * @param {?} numberOfDirectives
 * @return {?}
 */
function initTNodeFlags(tNode, index, numberOfDirectives) {
    ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, 'Reached the max number of directives');
    tNode.flags |= 1 /* isDirectiveHost */;
    // When the first directive is created on a node, save the index
    tNode.directiveStart = index;
    tNode.directiveEnd = index + numberOfDirectives;
    tNode.providerIndexes = index;
}
/**
 * @template T
 * @param {?} tView
 * @param {?} viewData
 * @param {?} def
 * @return {?}
 */
function baseResolveDirective(tView, viewData, def) {
    tView.data.push(def);
    /** @type {?} */
    const directiveFactory = def.factory || (((/** @type {?} */ (def))).factory = getFactoryDef(def.type, true));
    /** @type {?} */
    const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), null);
    tView.blueprint.push(nodeInjectorFactory);
    viewData.push(nodeInjectorFactory);
}
/**
 * @template T
 * @param {?} lView
 * @param {?} hostTNode
 * @param {?} def
 * @return {?}
 */
function addComponentLogic(lView, hostTNode, def) {
    /** @type {?} */
    const native = (/** @type {?} */ (getNativeByTNode(hostTNode, lView)));
    /** @type {?} */
    const tView = getOrCreateTComponentView(def);
    // Only component views should be added to the view tree directly. Embedded views are
    // accessed through their containers because they may be removed / re-added later.
    /** @type {?} */
    const rendererFactory = lView[RENDERER_FACTORY];
    /** @type {?} */
    const componentView = addToViewTree(lView, createLView(lView, tView, null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, native, (/** @type {?} */ (hostTNode)), rendererFactory, rendererFactory.createRenderer(native, def)));
    // Component view will always be created before any injected LContainers,
    // so this is a regular element, wrap it with the component view
    lView[hostTNode.index] = componentView;
}
/**
 * @param {?} tNode
 * @param {?} lView
 * @param {?} name
 * @param {?} value
 * @param {?} sanitizer
 * @param {?} namespace
 * @return {?}
 */
function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
    ngDevMode && assertNotSame(value, (/** @type {?} */ (NO_CHANGE)), 'Incoming value should never be NO_CHANGE.');
    ngDevMode && validateAgainstEventAttributes(name);
    /** @type {?} */
    const element = (/** @type {?} */ (getNativeByTNode(tNode, lView)));
    /** @type {?} */
    const renderer = lView[RENDERER];
    if (value == null) {
        ngDevMode && ngDevMode.rendererRemoveAttribute++;
        isProceduralRenderer(renderer) ? renderer.removeAttribute(element, name, namespace) :
            element.removeAttribute(name);
    }
    else {
        ngDevMode && ngDevMode.rendererSetAttribute++;
        /** @type {?} */
        const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tNode.tagName || '', name);
        if (isProceduralRenderer(renderer)) {
            renderer.setAttribute(element, name, strValue, namespace);
        }
        else {
            namespace ? element.setAttributeNS(namespace, name, strValue) :
                element.setAttribute(name, strValue);
        }
    }
}
/**
 * Sets initial input properties on directive instances from attribute data
 *
 * @template T
 * @param {?} lView Current LView that is being processed.
 * @param {?} directiveIndex Index of the directive in directives array
 * @param {?} instance Instance of the directive on which to set the initial inputs
 * @param {?} def The directive def that contains the list of inputs
 * @param {?} tNode The static data for this node
 * @param {?} initialInputData
 * @return {?}
 */
function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
    /** @type {?} */
    const initialInputs = (/** @type {?} */ (initialInputData))[directiveIndex];
    if (initialInputs !== null) {
        /** @type {?} */
        const setInput = def.setInput;
        for (let i = 0; i < initialInputs.length;) {
            /** @type {?} */
            const publicName = initialInputs[i++];
            /** @type {?} */
            const privateName = initialInputs[i++];
            /** @type {?} */
            const value = initialInputs[i++];
            if (setInput !== null) {
                (/** @type {?} */ (def.setInput))(instance, value, publicName, privateName);
            }
            else {
                ((/** @type {?} */ (instance)))[privateName] = value;
            }
            if (ngDevMode) {
                /** @type {?} */
                const nativeElement = (/** @type {?} */ (getNativeByTNode(tNode, lView)));
                setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
            }
        }
    }
}
/**
 * Generates initialInputData for a node and stores it in the template's static storage
 * so subsequent template invocations don't have to recalculate it.
 *
 * initialInputData is an array containing values that need to be set as input properties
 * for directives on this node, but only once on creation. We need this array to support
 * the case where you set an \@Input property of a directive using attribute-like syntax.
 * e.g. if you have a `name` \@Input, you can set it once like this:
 *
 * <my-component name="Bess"></my-component>
 *
 * @param {?} inputs The list of inputs from the directive def
 * @param {?} attrs The static attrs on this node
 * @return {?}
 */
function generateInitialInputs(inputs, attrs) {
    /** @type {?} */
    let inputsToStore = null;
    /** @type {?} */
    let i = 0;
    while (i < attrs.length) {
        /** @type {?} */
        const attrName = attrs[i];
        if (attrName === 0 /* NamespaceURI */) {
            // We do not allow inputs on namespaced attributes.
            i += 4;
            continue;
        }
        else if (attrName === 5 /* ProjectAs */) {
            // Skip over the `ngProjectAs` value.
            i += 2;
            continue;
        }
        // If we hit any other attribute markers, we're done anyway. None of those are valid inputs.
        if (typeof attrName === 'number')
            break;
        if (inputs.hasOwnProperty((/** @type {?} */ (attrName)))) {
            if (inputsToStore === null)
                inputsToStore = [];
            inputsToStore.push((/** @type {?} */ (attrName)), inputs[(/** @type {?} */ (attrName))], (/** @type {?} */ (attrs[i + 1])));
        }
        i += 2;
    }
    return inputsToStore;
}
//////////////////////////
//// ViewContainer & View
//////////////////////////
// Not sure why I need to do `any` here but TS complains later.
/** @type {?} */
const LContainerArray = ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) &&
    createNamedArrayType('LContainer');
/**
 * Creates a LContainer, either from a container instruction, or for a ViewContainerRef.
 *
 * @param {?} hostNative The host element for the LContainer
 * @param {?} currentView The parent view of the LContainer
 * @param {?} native The native comment element
 * @param {?} tNode
 * @return {?} LContainer
 */
function createLContainer(hostNative, currentView, native, tNode) {
    ngDevMode && assertLView(currentView);
    ngDevMode && !isProceduralRenderer(currentView[RENDERER]) && assertDomNode(native);
    // https://jsperf.com/array-literal-vs-new-array-really
    /** @type {?} */
    const lContainer = new (ngDevMode ? LContainerArray : Array)(hostNative, // host native
    true, // Boolean `true` in this position signifies that this is an `LContainer`
    -1 /* DYNAMIC_EMBEDDED_VIEWS_ONLY */ << 1 /* SHIFT */, // active index
    currentView, // parent
    null, // next
    null, // queries
    tNode, // t_host
    native, // native,
    null);
    ngDevMode && attachLContainerDebug(lContainer);
    return lContainer;
}
/**
 * Goes over dynamic embedded views (ones created through ViewContainerRef APIs) and refreshes
 * them by executing an associated template function.
 * @param {?} lView
 * @return {?}
 */
function refreshDynamicEmbeddedViews(lView) {
    /** @type {?} */
    let viewOrContainer = lView[CHILD_HEAD];
    while (viewOrContainer !== null) {
        // Note: viewOrContainer can be an LView or an LContainer instance, but here we are only
        // interested in LContainer
        /** @type {?} */
        let activeIndexFlag;
        if (isLContainer(viewOrContainer) &&
            (activeIndexFlag = viewOrContainer[ACTIVE_INDEX]) >> 1 /* SHIFT */ ===
                -1 /* DYNAMIC_EMBEDDED_VIEWS_ONLY */) {
            for (let i = CONTAINER_HEADER_OFFSET; i < viewOrContainer.length; i++) {
                /** @type {?} */
                const embeddedLView = (/** @type {?} */ (viewOrContainer[i]));
                /** @type {?} */
                const embeddedTView = embeddedLView[TVIEW];
                ngDevMode && assertDefined(embeddedTView, 'TView must be allocated');
                if (viewAttachedToChangeDetector(embeddedLView)) {
                    refreshView(embeddedTView, embeddedLView, embeddedTView.template, (/** @type {?} */ (embeddedLView[CONTEXT])));
                }
            }
            if ((activeIndexFlag & 1 /* HAS_TRANSPLANTED_VIEWS */) !== 0) {
                // We should only CD moved views if the component where they were inserted does not match
                // the component where they were declared and insertion is on-push. Moved views also
                // contains intra component moves, or check-always which need to be skipped.
                refreshTransplantedViews(viewOrContainer, (/** @type {?} */ (lView[DECLARATION_COMPONENT_VIEW])));
            }
        }
        viewOrContainer = viewOrContainer[NEXT];
    }
}
/**
 * Refresh transplanted LViews.
 *
 * See: `ActiveIndexFlag.HAS_TRANSPLANTED_VIEWS` and `LView[DECLARATION_COMPONENT_VIEW]` for
 * explanation of transplanted views.
 *
 * @param {?} lContainer The `LContainer` which has transplanted views.
 * @param {?} declaredComponentLView The `lContainer` parent component `LView`.
 * @return {?}
 */
function refreshTransplantedViews(lContainer, declaredComponentLView) {
    /** @type {?} */
    const movedViews = (/** @type {?} */ (lContainer[MOVED_VIEWS]));
    ngDevMode && assertDefined(movedViews, 'Transplanted View flags set but missing MOVED_VIEWS');
    for (let i = 0; i < movedViews.length; i++) {
        /** @type {?} */
        const movedLView = (/** @type {?} */ (movedViews[i]));
        /** @type {?} */
        const insertionLContainer = (/** @type {?} */ (movedLView[PARENT]));
        ngDevMode && assertLContainer(insertionLContainer);
        /** @type {?} */
        const insertedComponentLView = (/** @type {?} */ (insertionLContainer[PARENT][DECLARATION_COMPONENT_VIEW]));
        ngDevMode && assertDefined(insertedComponentLView, 'Missing LView');
        // Check if we have a transplanted view by compering declaration and insertion location.
        if (insertedComponentLView !== declaredComponentLView) {
            // Yes the `LView` is transplanted.
            // Here we would like to know if the component is `OnPush`. We don't have
            // explicit `OnPush` flag instead we set `CheckAlways` to false (which is `OnPush`)
            // Not to be confused with `ManualOnPush` which is used with wether a DOM event
            // should automatically mark a view as dirty.
            /** @type {?} */
            const insertionComponentIsOnPush = (insertedComponentLView[FLAGS] & 16 /* CheckAlways */) === 0;
            if (insertionComponentIsOnPush) {
                // Here we know that the template has been transplanted across components and is
                // on-push (not just moved within a component). If the insertion is marked dirty, then
                // there is no need to CD here as we will do it again later when we get to insertion
                // point.
                /** @type {?} */
                const movedTView = movedLView[TVIEW];
                ngDevMode && assertDefined(movedTView, 'TView must be allocated');
                refreshView(movedTView, movedLView, movedTView.template, (/** @type {?} */ (movedLView[CONTEXT])));
            }
        }
    }
}
/////////////
/**
 * Refreshes components by entering the component view and processing its bindings, queries, etc.
 *
 * @param {?} hostLView
 * @param {?} componentHostIdx  Element index in LView[] (adjusted for HEADER_OFFSET)
 * @return {?}
 */
function refreshComponent(hostLView, componentHostIdx) {
    ngDevMode && assertEqual(isCreationMode(hostLView), false, 'Should be run in update mode');
    /** @type {?} */
    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
    // Only attached components that are CheckAlways or OnPush and dirty should be refreshed
    if (viewAttachedToChangeDetector(componentView) &&
        componentView[FLAGS] & (16 /* CheckAlways */ | 64 /* Dirty */)) {
        /** @type {?} */
        const componentTView = componentView[TVIEW];
        refreshView(componentTView, componentView, componentTView.template, componentView[CONTEXT]);
    }
}
/**
 * @param {?} hostLView
 * @param {?} componentHostIdx
 * @return {?}
 */
function renderComponent(hostLView, componentHostIdx) {
    ngDevMode && assertEqual(isCreationMode(hostLView), true, 'Should be run in creation mode');
    /** @type {?} */
    const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
    /** @type {?} */
    const componentTView = componentView[TVIEW];
    syncViewWithBlueprint(componentTView, componentView);
    renderView(componentTView, componentView, componentView[CONTEXT]);
}
/**
 * Syncs an LView instance with its blueprint if they have gotten out of sync.
 *
 * Typically, blueprints and their view instances should always be in sync, so the loop here
 * will be skipped. However, consider this case of two components side-by-side:
 *
 * App template:
 * ```
 * <comp></comp>
 * <comp></comp>
 * ```
 *
 * The following will happen:
 * 1. App template begins processing.
 * 2. First <comp> is matched as a component and its LView is created.
 * 3. Second <comp> is matched as a component and its LView is created.
 * 4. App template completes processing, so it's time to check child templates.
 * 5. First <comp> template is checked. It has a directive, so its def is pushed to blueprint.
 * 6. Second <comp> template is checked. Its blueprint has been updated by the first
 * <comp> template, but its LView was created before this update, so it is out of sync.
 *
 * Note that embedded views inside ngFor loops will never be out of sync because these views
 * are processed as soon as they are created.
 *
 * @param {?} tView The `TView` that contains the blueprint for syncing
 * @param {?} lView The view to sync
 * @return {?}
 */
function syncViewWithBlueprint(tView, lView) {
    for (let i = lView.length; i < tView.blueprint.length; i++) {
        lView.push(tView.blueprint[i]);
    }
}
/**
 * Adds LView or LContainer to the end of the current view tree.
 *
 * This structure will be used to traverse through nested views to remove listeners
 * and call onDestroy callbacks.
 *
 * @template T
 * @param {?} lView The view where LView or LContainer should be added
 * @param {?} lViewOrLContainer The LView or LContainer to add to the view tree
 * @return {?} The state passed in
 */
function addToViewTree(lView, lViewOrLContainer) {
    // TODO(benlesh/misko): This implementation is incorrect, because it always adds the LContainer
    // to the end of the queue, which means if the developer retrieves the LContainers from RNodes out
    // of order, the change detection will run out of order, as the act of retrieving the the
    // LContainer from the RNode is what adds it to the queue.
    if (lView[CHILD_HEAD]) {
        (/** @type {?} */ (lView[CHILD_TAIL]))[NEXT] = lViewOrLContainer;
    }
    else {
        lView[CHILD_HEAD] = lViewOrLContainer;
    }
    lView[CHILD_TAIL] = lViewOrLContainer;
    return lViewOrLContainer;
}
///////////////////////////////
//// Change detection
///////////////////////////////
/**
 * Marks current view and all ancestors dirty.
 *
 * Returns the root view because it is found as a byproduct of marking the view tree
 * dirty, and can be used by methods that consume markViewDirty() to easily schedule
 * change detection. Otherwise, such methods would need to traverse up the view tree
 * an additional time to get the root view and schedule a tick on it.
 *
 * @param {?} lView The starting LView to mark dirty
 * @return {?} the root LView
 */
function markViewDirty(lView) {
    while (lView) {
        lView[FLAGS] |= 64 /* Dirty */;
        /** @type {?} */
        const parent = getLViewParent(lView);
        // Stop traversing up as soon as you find a root view that wasn't attached to any container
        if (isRootView(lView) && !parent) {
            return lView;
        }
        // continue otherwise
        lView = (/** @type {?} */ (parent));
    }
    return null;
}
/**
 * Used to schedule change detection on the whole application.
 *
 * Unlike `tick`, `scheduleTick` coalesces multiple calls into one change detection run.
 * It is usually called indirectly by calling `markDirty` when the view needs to be
 * re-rendered.
 *
 * Typically `scheduleTick` uses `requestAnimationFrame` to coalesce multiple
 * `scheduleTick` requests. The scheduling function can be overridden in
 * `renderComponent`'s `scheduler` option.
 * @param {?} rootContext
 * @param {?} flags
 * @return {?}
 */
function scheduleTick(rootContext, flags) {
    /** @type {?} */
    const nothingScheduled = rootContext.flags === 0 /* Empty */;
    rootContext.flags |= flags;
    if (nothingScheduled && rootContext.clean == _CLEAN_PROMISE) {
        /** @type {?} */
        let res;
        rootContext.clean = new Promise((/**
         * @param {?} r
         * @return {?}
         */
        (r) => res = r));
        rootContext.scheduler((/**
         * @return {?}
         */
        () => {
            if (rootContext.flags & 1 /* DetectChanges */) {
                rootContext.flags &= ~1 /* DetectChanges */;
                tickRootContext(rootContext);
            }
            if (rootContext.flags & 2 /* FlushPlayers */) {
                rootContext.flags &= ~2 /* FlushPlayers */;
                /** @type {?} */
                const playerHandler = rootContext.playerHandler;
                if (playerHandler) {
                    playerHandler.flushPlayers();
                }
            }
            rootContext.clean = _CLEAN_PROMISE;
            (/** @type {?} */ (res))(null);
        }));
    }
}
/**
 * @param {?} rootContext
 * @return {?}
 */
function tickRootContext(rootContext) {
    for (let i = 0; i < rootContext.components.length; i++) {
        /** @type {?} */
        const rootComponent = rootContext.components[i];
        /** @type {?} */
        const lView = (/** @type {?} */ (readPatchedLView(rootComponent)));
        /** @type {?} */
        const tView = lView[TVIEW];
        renderComponentOrTemplate(tView, lView, tView.template, rootComponent);
    }
}
/**
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} context
 * @return {?}
 */
function detectChangesInternal(tView, lView, context) {
    /** @type {?} */
    const rendererFactory = lView[RENDERER_FACTORY];
    if (rendererFactory.begin)
        rendererFactory.begin();
    try {
        refreshView(tView, lView, tView.template, context);
    }
    catch (error) {
        handleError(lView, error);
        throw error;
    }
    finally {
        if (rendererFactory.end)
            rendererFactory.end();
    }
}
/**
 * Synchronously perform change detection on a root view and its components.
 *
 * @param {?} lView The view which the change detection should be performed on.
 * @return {?}
 */
function detectChangesInRootView(lView) {
    tickRootContext((/** @type {?} */ (lView[CONTEXT])));
}
/**
 * @template T
 * @param {?} tView
 * @param {?} view
 * @param {?} context
 * @return {?}
 */
function checkNoChangesInternal(tView, view, context) {
    setCheckNoChangesMode(true);
    try {
        detectChangesInternal(tView, view, context);
    }
    finally {
        setCheckNoChangesMode(false);
    }
}
/**
 * Checks the change detector on a root view and its components, and throws if any changes are
 * detected.
 *
 * This is used in development mode to verify that running change detection doesn't
 * introduce other changes.
 *
 * @param {?} lView The view which the change detection should be checked on.
 * @return {?}
 */
function checkNoChangesInRootView(lView) {
    setCheckNoChangesMode(true);
    try {
        detectChangesInRootView(lView);
    }
    finally {
        setCheckNoChangesMode(false);
    }
}
/**
 * @template T
 * @param {?} flags
 * @param {?} viewQueryFn
 * @param {?} component
 * @return {?}
 */
function executeViewQueryFn(flags, viewQueryFn, component) {
    ngDevMode && assertDefined(viewQueryFn, 'View queries function to execute must be defined.');
    setCurrentQueryIndex(0);
    viewQueryFn(flags, component);
}
///////////////////////////////
//// Bindings & interpolations
///////////////////////////////
/**
 * Stores meta-data for a property binding to be used by TestBed's `DebugElement.properties`.
 *
 * In order to support TestBed's `DebugElement.properties` we need to save, for each binding:
 * - a bound property name;
 * - a static parts of interpolated strings;
 *
 * A given property metadata is saved at the binding's index in the `TView.data` (in other words, a
 * property binding metadata will be stored in `TView.data` at the same index as a bound value in
 * `LView`). Metadata are represented as `INTERPOLATION_DELIMITER`-delimited string with the
 * following format:
 * - `propertyName` for bound properties;
 * - `propertyName�prefix�interpolation_static_part1�..interpolation_static_partN�suffix` for
 * interpolated properties.
 *
 * @param {?} tData `TData` where meta-data will be saved;
 * @param {?} tNode `TNode` that is a target of the binding;
 * @param {?} propertyName bound property name;
 * @param {?} bindingIndex binding index in `LView`
 * @param {...?} interpolationParts static interpolation parts (for property interpolations)
 * @return {?}
 */
function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {
    // Binding meta-data are stored only the first time a given property instruction is processed.
    // Since we don't have a concept of the "first update pass" we need to check for presence of the
    // binding meta-data to decide if one should be stored (or if was stored already).
    if (tData[bindingIndex] === null) {
        if (tNode.inputs == null || !tNode.inputs[propertyName]) {
            /** @type {?} */
            const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
            propBindingIdxs.push(bindingIndex);
            /** @type {?} */
            let bindingMetadata = propertyName;
            if (interpolationParts.length > 0) {
                bindingMetadata +=
                    INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
            }
            tData[bindingIndex] = bindingMetadata;
        }
    }
}
/** @type {?} */
const CLEAN_PROMISE = _CLEAN_PROMISE;
/**
 * @param {?} view
 * @return {?}
 */
function getLCleanup(view) {
    // top level variables should not be exported for performance reasons (PERF_NOTES.md)
    return view[CLEANUP] || (view[CLEANUP] = ngDevMode ? new LCleanup() : []);
}
/**
 * @param {?} tView
 * @return {?}
 */
function getTViewCleanup(tView) {
    return tView.cleanup || (tView.cleanup = ngDevMode ? new TCleanup() : []);
}
/**
 * There are cases where the sub component's renderer needs to be included
 * instead of the current renderer (see the componentSyntheticHost* instructions).
 * @param {?} tNode
 * @param {?} lView
 * @return {?}
 */
function loadComponentRenderer(tNode, lView) {
    /** @type {?} */
    const componentLView = (/** @type {?} */ (unwrapLView(lView[tNode.index])));
    return componentLView[RENDERER];
}
/**
 * Handles an error thrown in an LView.
 * @param {?} lView
 * @param {?} error
 * @return {?}
 */
function handleError(lView, error) {
    /** @type {?} */
    const injector = lView[INJECTOR$1];
    /** @type {?} */
    const errorHandler = injector ? injector.get(ErrorHandler, null) : null;
    errorHandler && errorHandler.handleError(error);
}
/**
 * Set the inputs of directives at the current node to corresponding value.
 *
 * @param {?} tView The current TView
 * @param {?} lView the `LView` which contains the directives.
 * @param {?} inputs mapping between the public "input" name and privately-known,
 *        possibly minified, property names to write to.
 * @param {?} publicName
 * @param {?} value Value to set.
 * @return {?}
 */
function setInputsForProperty(tView, lView, inputs, publicName, value) {
    for (let i = 0; i < inputs.length;) {
        /** @type {?} */
        const index = (/** @type {?} */ (inputs[i++]));
        /** @type {?} */
        const privateName = (/** @type {?} */ (inputs[i++]));
        /** @type {?} */
        const instance = lView[index];
        ngDevMode && assertDataInRange(lView, index);
        /** @type {?} */
        const def = (/** @type {?} */ (tView.data[index]));
        if (def.setInput !== null) {
            (/** @type {?} */ (def.setInput))(instance, value, publicName, privateName);
        }
        else {
            instance[privateName] = value;
        }
    }
}
/**
 * Updates a text binding at a given index in a given LView.
 * @param {?} lView
 * @param {?} index
 * @param {?} value
 * @return {?}
 */
function textBindingInternal(lView, index, value) {
    ngDevMode && assertNotSame(value, (/** @type {?} */ (NO_CHANGE)), 'value should not be NO_CHANGE');
    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);
    /** @type {?} */
    const element = (/** @type {?} */ ((/** @type {?} */ (getNativeByIndex(index, lView)))));
    ngDevMode && assertDefined(element, 'native element should exist');
    ngDevMode && ngDevMode.rendererSetText++;
    /** @type {?} */
    const renderer = lView[RENDERER];
    isProceduralRenderer(renderer) ? renderer.setValue(element, value) : element.textContent = value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/node_manipulation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const unusedValueToPlacateAjd$1 = unusedValueExportToPlacateAjd$1 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$5 + unusedValueExportToPlacateAjd$2 + unusedValueExportToPlacateAjd;
/**
 * @param {?} tNode
 * @param {?} embeddedView
 * @return {?}
 */
function getLContainer(tNode, embeddedView) {
    ngDevMode && assertLView(embeddedView);
    /** @type {?} */
    const container = (/** @type {?} */ (embeddedView[PARENT]));
    if (tNode.index === -1) {
        // This is a dynamically created view inside a dynamic container.
        // The parent isn't an LContainer if the embedded view hasn't been attached yet.
        return isLContainer(container) ? container : null;
    }
    else {
        ngDevMode && assertLContainer(container);
        // This is a inline view node (e.g. embeddedViewStart)
        return container;
    }
}
/**
 * Retrieves render parent for a given view.
 * Might be null if a view is not yet attached to any container.
 * @param {?} tViewNode
 * @param {?} view
 * @return {?}
 */
function getContainerRenderParent(tViewNode, view) {
    /** @type {?} */
    const container = getLContainer(tViewNode, view);
    return container ? nativeParentNode(view[RENDERER], container[NATIVE]) : null;
}
/** @enum {number} */
const WalkTNodeTreeAction = {
    /** node create in the native environment. Run on initial creation. */
    Create: 0,
    /**
     * node insert in the native environment.
     * Run when existing node has been detached and needs to be re-attached.
     */
    Insert: 1,
    /** node detach from the native environment */
    Detach: 2,
    /** node destruction using the renderer's API */
    Destroy: 3,
};
/**
 * NOTE: for performance reasons, the possible actions are inlined within the function instead of
 * being passed as an argument.
 * @param {?} action
 * @param {?} renderer
 * @param {?} parent
 * @param {?} lNodeToHandle
 * @param {?=} beforeNode
 * @return {?}
 */
function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
    // If this slot was allocated for a text node dynamically created by i18n, the text node itself
    // won't be created until i18nApply() in the update block, so this node should be skipped.
    // For more info, see "ICU expressions should work inside an ngTemplateOutlet inside an ngFor"
    // in `i18n_spec.ts`.
    if (lNodeToHandle != null) {
        /** @type {?} */
        let lContainer;
        /** @type {?} */
        let isComponent = false;
        // We are expecting an RNode, but in the case of a component or LContainer the `RNode` is
        // wrapped in an array which needs to be unwrapped. We need to know if it is a component and if
        // it has LContainer so that we can process all of those cases appropriately.
        if (isLContainer(lNodeToHandle)) {
            lContainer = lNodeToHandle;
        }
        else if (isLView(lNodeToHandle)) {
            isComponent = true;
            ngDevMode && assertDefined(lNodeToHandle[HOST], 'HOST must be defined for a component LView');
            lNodeToHandle = (/** @type {?} */ (lNodeToHandle[HOST]));
        }
        /** @type {?} */
        const rNode = unwrapRNode(lNodeToHandle);
        ngDevMode && !isProceduralRenderer(renderer) && assertDomNode(rNode);
        if (action === 0 /* Create */ && parent !== null) {
            if (beforeNode == null) {
                nativeAppendChild(renderer, parent, rNode);
            }
            else {
                nativeInsertBefore(renderer, parent, rNode, beforeNode || null);
            }
        }
        else if (action === 1 /* Insert */ && parent !== null) {
            nativeInsertBefore(renderer, parent, rNode, beforeNode || null);
        }
        else if (action === 2 /* Detach */) {
            nativeRemoveNode(renderer, rNode, isComponent);
        }
        else if (action === 3 /* Destroy */) {
            ngDevMode && ngDevMode.rendererDestroyNode++;
            (/** @type {?} */ (((/** @type {?} */ (renderer))).destroyNode))(rNode);
        }
        if (lContainer != null) {
            applyContainer(renderer, action, lContainer, parent, beforeNode);
        }
    }
}
/**
 * @param {?} value
 * @param {?} renderer
 * @return {?}
 */
function createTextNode(value, renderer) {
    ngDevMode && ngDevMode.rendererCreateTextNode++;
    ngDevMode && ngDevMode.rendererSetText++;
    return isProceduralRenderer(renderer) ? renderer.createText(value) :
        renderer.createTextNode(value);
}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} insertMode
 * @param {?} beforeNode
 * @return {?}
 */
function addRemoveViewFromContainer(tView, lView, insertMode, beforeNode) {
    /** @type {?} */
    const renderParent = getContainerRenderParent((/** @type {?} */ (tView.node)), lView);
    ngDevMode && assertNodeType((/** @type {?} */ (tView.node)), 2 /* View */);
    if (renderParent) {
        /** @type {?} */
        const renderer = lView[RENDERER];
        /** @type {?} */
        const action = insertMode ? 1 /* Insert */ : 2 /* Detach */;
        applyView(tView, lView, renderer, action, renderParent, beforeNode);
    }
}
/**
 * Detach a `LView` from the DOM by detaching its nodes.
 *
 * @param {?} tView The `TView' of the `LView` to be detached
 * @param {?} lView the `LView` to be detached.
 * @return {?}
 */
function renderDetachView(tView, lView) {
    applyView(tView, lView, lView[RENDERER], 2 /* Detach */, null, null);
}
/**
 * Traverses down and up the tree of views and containers to remove listeners and
 * call onDestroy callbacks.
 *
 * Notes:
 *  - Because it's used for onDestroy calls, it needs to be bottom-up.
 *  - Must process containers instead of their views to avoid splicing
 *  when views are destroyed and re-added.
 *  - Using a while loop because it's faster than recursion
 *  - Destroy only called on movement to sibling or movement to parent (laterally or up)
 *
 * @param {?} rootView The view to destroy
 * @return {?}
 */
function destroyViewTree(rootView) {
    // If the view has no children, we can clean it up and return early.
    /** @type {?} */
    let lViewOrLContainer = rootView[CHILD_HEAD];
    if (!lViewOrLContainer) {
        return cleanUpView(rootView[TVIEW], rootView);
    }
    while (lViewOrLContainer) {
        /** @type {?} */
        let next = null;
        if (isLView(lViewOrLContainer)) {
            // If LView, traverse down to child.
            next = lViewOrLContainer[CHILD_HEAD];
        }
        else {
            ngDevMode && assertLContainer(lViewOrLContainer);
            // If container, traverse down to its first LView.
            /** @type {?} */
            const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
            if (firstView)
                next = firstView;
        }
        if (!next) {
            // Only clean up view when moving to the side or up, as destroy hooks
            // should be called in order from the bottom up.
            while (lViewOrLContainer && !(/** @type {?} */ (lViewOrLContainer))[NEXT] && lViewOrLContainer !== rootView) {
                isLView(lViewOrLContainer) && cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
                lViewOrLContainer = getParentState(lViewOrLContainer, rootView);
            }
            if (lViewOrLContainer === null)
                lViewOrLContainer = rootView;
            isLView(lViewOrLContainer) && cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
            next = lViewOrLContainer && (/** @type {?} */ (lViewOrLContainer))[NEXT];
        }
        lViewOrLContainer = next;
    }
}
/**
 * Inserts a view into a container.
 *
 * This adds the view to the container's array of active views in the correct
 * position. It also adds the view's elements to the DOM if the container isn't a
 * root node of another view (in that case, the view's elements will be added when
 * the container's parent view is added later).
 *
 * @param {?} tView The `TView' of the `LView` to insert
 * @param {?} lView The view to insert
 * @param {?} lContainer The container into which the view should be inserted
 * @param {?} index Which index in the container to insert the child view into
 * @return {?}
 */
function insertView(tView, lView, lContainer, index) {
    ngDevMode && assertLView(lView);
    ngDevMode && assertLContainer(lContainer);
    /** @type {?} */
    const indexInContainer = CONTAINER_HEADER_OFFSET + index;
    /** @type {?} */
    const containerLength = lContainer.length;
    if (index > 0) {
        // This is a new view, we need to add it to the children.
        lContainer[indexInContainer - 1][NEXT] = lView;
    }
    if (index < containerLength - CONTAINER_HEADER_OFFSET) {
        lView[NEXT] = lContainer[indexInContainer];
        addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
    }
    else {
        lContainer.push(lView);
        lView[NEXT] = null;
    }
    lView[PARENT] = lContainer;
    // track views where declaration and insertion points are different
    /** @type {?} */
    const declarationLContainer = lView[DECLARATION_LCONTAINER];
    if (declarationLContainer !== null && lContainer !== declarationLContainer) {
        trackMovedView(declarationLContainer, lView);
    }
    // notify query that a new view has been added
    /** @type {?} */
    const lQueries = lView[QUERIES];
    if (lQueries !== null) {
        lQueries.insertView(tView);
    }
    // Sets the attached flag
    lView[FLAGS] |= 128 /* Attached */;
}
/**
 * Track views created from the declaration container (TemplateRef) and inserted into a
 * different LContainer.
 * @param {?} declarationContainer
 * @param {?} lView
 * @return {?}
 */
function trackMovedView(declarationContainer, lView) {
    ngDevMode && assertDefined(lView, 'LView required');
    ngDevMode && assertLContainer(declarationContainer);
    /** @type {?} */
    const movedViews = declarationContainer[MOVED_VIEWS];
    /** @type {?} */
    const insertedLContainer = (/** @type {?} */ (lView[PARENT]));
    ngDevMode && assertLContainer(insertedLContainer);
    /** @type {?} */
    const insertedComponentLView = (/** @type {?} */ (insertedLContainer[PARENT]))[DECLARATION_COMPONENT_VIEW];
    ngDevMode && assertDefined(insertedComponentLView, 'Missing insertedComponentLView');
    /** @type {?} */
    const insertedComponentIsOnPush = (insertedComponentLView[FLAGS] & 16 /* CheckAlways */) !== 16 /* CheckAlways */;
    if (insertedComponentIsOnPush) {
        /** @type {?} */
        const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
        ngDevMode && assertDefined(declaredComponentLView, 'Missing declaredComponentLView');
        if (declaredComponentLView !== insertedComponentLView) {
            // At this point the declaration-component is not same as insertion-component and we are in
            // on-push mode, this means that this is a transplanted view. Mark the declared lView as
            // having
            // transplanted views so that those views can participate in CD.
            declarationContainer[ACTIVE_INDEX] |= 1 /* HAS_TRANSPLANTED_VIEWS */;
        }
    }
    if (movedViews === null) {
        declarationContainer[MOVED_VIEWS] = [lView];
    }
    else {
        movedViews.push(lView);
    }
}
/**
 * @param {?} declarationContainer
 * @param {?} lView
 * @return {?}
 */
function detachMovedView(declarationContainer, lView) {
    ngDevMode && assertLContainer(declarationContainer);
    ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], 'A projected view should belong to a non-empty projected views collection');
    /** @type {?} */
    const movedViews = (/** @type {?} */ (declarationContainer[MOVED_VIEWS]));
    /** @type {?} */
    const declaredViewIndex = movedViews.indexOf(lView);
    movedViews.splice(declaredViewIndex, 1);
}
/**
 * Detaches a view from a container.
 *
 * This method removes the view from the container's array of active views. It also
 * removes the view's elements from the DOM.
 *
 * @param {?} lContainer The container from which to detach a view
 * @param {?} removeIndex The index of the view to detach
 * @return {?} Detached LView instance.
 */
function detachView(lContainer, removeIndex) {
    if (lContainer.length <= CONTAINER_HEADER_OFFSET)
        return;
    /** @type {?} */
    const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
    /** @type {?} */
    const viewToDetach = lContainer[indexInContainer];
    if (viewToDetach) {
        /** @type {?} */
        const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];
        if (declarationLContainer !== null && declarationLContainer !== lContainer) {
            detachMovedView(declarationLContainer, viewToDetach);
        }
        if (removeIndex > 0) {
            lContainer[indexInContainer - 1][NEXT] = (/** @type {?} */ (viewToDetach[NEXT]));
        }
        /** @type {?} */
        const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
        addRemoveViewFromContainer(viewToDetach[TVIEW], viewToDetach, false, null);
        // notify query that a view has been removed
        /** @type {?} */
        const lQueries = removedLView[QUERIES];
        if (lQueries !== null) {
            lQueries.detachView(removedLView[TVIEW]);
        }
        viewToDetach[PARENT] = null;
        viewToDetach[NEXT] = null;
        // Unsets the attached flag
        viewToDetach[FLAGS] &= ~128 /* Attached */;
    }
    return viewToDetach;
}
/**
 * Removes a view from a container, i.e. detaches it and then destroys the underlying LView.
 *
 * @param {?} lContainer The container from which to remove a view
 * @param {?} removeIndex The index of the view to remove
 * @return {?}
 */
function removeView(lContainer, removeIndex) {
    /** @type {?} */
    const detachedView = detachView(lContainer, removeIndex);
    detachedView && destroyLView(detachedView[TVIEW], detachedView);
}
/**
 * A standalone function which destroys an LView,
 * conducting clean up (e.g. removing listeners, calling onDestroys).
 *
 * @param {?} tView The `TView' of the `LView` to be destroyed
 * @param {?} lView The view to be destroyed.
 * @return {?}
 */
function destroyLView(tView, lView) {
    if (!(lView[FLAGS] & 256 /* Destroyed */)) {
        /** @type {?} */
        const renderer = lView[RENDERER];
        if (isProceduralRenderer(renderer) && renderer.destroyNode) {
            applyView(tView, lView, renderer, 3 /* Destroy */, null, null);
        }
        destroyViewTree(lView);
    }
}
/**
 * Determines which LViewOrLContainer to jump to when traversing back up the
 * tree in destroyViewTree.
 *
 * Normally, the view's parent LView should be checked, but in the case of
 * embedded views, the container (which is the view node's parent, but not the
 * LView's parent) needs to be checked for a possible next property.
 *
 * @param {?} lViewOrLContainer The LViewOrLContainer for which we need a parent state
 * @param {?} rootView The rootView, so we don't propagate too far up the view tree
 * @return {?} The correct parent LViewOrLContainer
 */
function getParentState(lViewOrLContainer, rootView) {
    /** @type {?} */
    let tNode;
    if (isLView(lViewOrLContainer) && (tNode = lViewOrLContainer[T_HOST]) &&
        tNode.type === 2 /* View */) {
        // if it's an embedded view, the state needs to go up to the container, in case the
        // container has a next
        return getLContainer((/** @type {?} */ (tNode)), lViewOrLContainer);
    }
    else {
        // otherwise, use parent view for containers or component views
        return lViewOrLContainer[PARENT] === rootView ? null : lViewOrLContainer[PARENT];
    }
}
/**
 * Calls onDestroys hooks for all directives and pipes in a given view and then removes all
 * listeners. Listeners are removed as the last step so events delivered in the onDestroys hooks
 * can be propagated to \@Output listeners.
 *
 * @param {?} tView `TView` for the `LView` to clean up.
 * @param {?} lView The LView to clean up
 * @return {?}
 */
function cleanUpView(tView, lView) {
    if (!(lView[FLAGS] & 256 /* Destroyed */)) {
        // Usually the Attached flag is removed when the view is detached from its parent, however
        // if it's a root view, the flag won't be unset hence why we're also removing on destroy.
        lView[FLAGS] &= ~128 /* Attached */;
        // Mark the LView as destroyed *before* executing the onDestroy hooks. An onDestroy hook
        // runs arbitrary user code, which could include its own `viewRef.destroy()` (or similar). If
        // We don't flag the view as destroyed before the hooks, this could lead to an infinite loop.
        // This also aligns with the ViewEngine behavior. It also means that the onDestroy hook is
        // really more of an "afterDestroy" hook if you think about it.
        lView[FLAGS] |= 256 /* Destroyed */;
        executeOnDestroys(tView, lView);
        removeListeners(tView, lView);
        /** @type {?} */
        const hostTNode = lView[T_HOST];
        // For component views only, the local renderer is destroyed as clean up time.
        if (hostTNode && hostTNode.type === 3 /* Element */ &&
            isProceduralRenderer(lView[RENDERER])) {
            ngDevMode && ngDevMode.rendererDestroy++;
            ((/** @type {?} */ (lView[RENDERER]))).destroy();
        }
        /** @type {?} */
        const declarationContainer = lView[DECLARATION_LCONTAINER];
        // we are dealing with an embedded view that is still inserted into a container
        if (declarationContainer !== null && isLContainer(lView[PARENT])) {
            // and this is a projected view
            if (declarationContainer !== lView[PARENT]) {
                detachMovedView(declarationContainer, lView);
            }
            // For embedded views still attached to a container: remove query result from this view.
            /** @type {?} */
            const lQueries = lView[QUERIES];
            if (lQueries !== null) {
                lQueries.detachView(tView);
            }
        }
    }
}
/**
 * Removes listeners and unsubscribes from output subscriptions
 * @param {?} tView
 * @param {?} lView
 * @return {?}
 */
function removeListeners(tView, lView) {
    /** @type {?} */
    const tCleanup = tView.cleanup;
    if (tCleanup !== null) {
        /** @type {?} */
        const lCleanup = (/** @type {?} */ (lView[CLEANUP]));
        for (let i = 0; i < tCleanup.length - 1; i += 2) {
            if (typeof tCleanup[i] === 'string') {
                // This is a native DOM listener
                /** @type {?} */
                const idxOrTargetGetter = tCleanup[i + 1];
                /** @type {?} */
                const target = typeof idxOrTargetGetter === 'function' ?
                    idxOrTargetGetter(lView) :
                    unwrapRNode(lView[idxOrTargetGetter]);
                /** @type {?} */
                const listener = lCleanup[tCleanup[i + 2]];
                /** @type {?} */
                const useCaptureOrSubIdx = tCleanup[i + 3];
                if (typeof useCaptureOrSubIdx === 'boolean') {
                    // native DOM listener registered with Renderer3
                    target.removeEventListener(tCleanup[i], listener, useCaptureOrSubIdx);
                }
                else {
                    if (useCaptureOrSubIdx >= 0) {
                        // unregister
                        lCleanup[useCaptureOrSubIdx]();
                    }
                    else {
                        // Subscription
                        lCleanup[-useCaptureOrSubIdx].unsubscribe();
                    }
                }
                i += 2;
            }
            else {
                // This is a cleanup function that is grouped with the index of its context
                /** @type {?} */
                const context = lCleanup[tCleanup[i + 1]];
                tCleanup[i].call(context);
            }
        }
        lView[CLEANUP] = null;
    }
}
/**
 * Calls onDestroy hooks for this view
 * @param {?} tView
 * @param {?} lView
 * @return {?}
 */
function executeOnDestroys(tView, lView) {
    /** @type {?} */
    let destroyHooks;
    if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
        for (let i = 0; i < destroyHooks.length; i += 2) {
            /** @type {?} */
            const context = lView[(/** @type {?} */ (destroyHooks[i]))];
            // Only call the destroy hook if the context has been requested.
            if (!(context instanceof NodeInjectorFactory)) {
                ((/** @type {?} */ (destroyHooks[i + 1]))).call(context);
            }
        }
    }
}
/**
 * Returns a native element if a node can be inserted into the given parent.
 *
 * There are two reasons why we may not be able to insert a element immediately.
 * - Projection: When creating a child content element of a component, we have to skip the
 *   insertion because the content of a component will be projected.
 *   `<component><content>delayed due to projection</content></component>`
 * - Parent container is disconnected: This can happen when we are inserting a view into
 *   parent container, which itself is disconnected. For example the parent container is part
 *   of a View which has not be inserted or is made for projection but has not been inserted
 *   into destination.
 * @param {?} tView
 * @param {?} tNode
 * @param {?} currentView
 * @return {?}
 */
function getRenderParent(tView, tNode, currentView) {
    // Skip over element and ICU containers as those are represented by a comment node and
    // can't be used as a render parent.
    /** @type {?} */
    let parentTNode = tNode.parent;
    while (parentTNode != null && (parentTNode.type === 4 /* ElementContainer */ ||
        parentTNode.type === 5 /* IcuContainer */)) {
        tNode = parentTNode;
        parentTNode = tNode.parent;
    }
    // If the parent tNode is null, then we are inserting across views: either into an embedded view
    // or a component view.
    if (parentTNode == null) {
        /** @type {?} */
        const hostTNode = (/** @type {?} */ (currentView[T_HOST]));
        if (hostTNode.type === 2 /* View */) {
            // We are inserting a root element of an embedded view We might delay insertion of children
            // for a given view if it is disconnected. This might happen for 2 main reasons:
            // - view is not inserted into any container(view was created but not inserted yet)
            // - view is inserted into a container but the container itself is not inserted into the DOM
            // (container might be part of projection or child of a view that is not inserted yet).
            // In other words we can insert children of a given view if this view was inserted into a
            // container and the container itself has its render parent determined.
            return getContainerRenderParent((/** @type {?} */ (hostTNode)), currentView);
        }
        else {
            // We are inserting a root element of the component view into the component host element and
            // it should always be eager.
            ngDevMode && assertNodeOfPossibleTypes(hostTNode, 3 /* Element */);
            return currentView[HOST];
        }
    }
    else {
        /** @type {?} */
        const isIcuCase = tNode && tNode.type === 5 /* IcuContainer */;
        // If the parent of this node is an ICU container, then it is represented by comment node and we
        // need to use it as an anchor. If it is projected then it's direct parent node is the renderer.
        if (isIcuCase && tNode.flags & 4 /* isProjected */) {
            return (/** @type {?} */ (getNativeByTNode(tNode, currentView).parentNode));
        }
        ngDevMode && assertNodeType(parentTNode, 3 /* Element */);
        if (parentTNode.flags & 2 /* isComponentHost */) {
            /** @type {?} */
            const tData = tView.data;
            /** @type {?} */
            const tNode = (/** @type {?} */ (tData[parentTNode.index]));
            /** @type {?} */
            const encapsulation = ((/** @type {?} */ (tData[tNode.directiveStart]))).encapsulation;
            // We've got a parent which is an element in the current view. We just need to verify if the
            // parent element is not a component. Component's content nodes are not inserted immediately
            // because they will be projected, and so doing insert at this point would be wasteful.
            // Since the projection would then move it to its final destination. Note that we can't
            // make this assumption when using the Shadow DOM, because the native projection placeholders
            // (<content> or <slot>) have to be in place as elements are being inserted.
            if (encapsulation !== ViewEncapsulation$1.ShadowDom &&
                encapsulation !== ViewEncapsulation$1.Native) {
                return null;
            }
        }
        return (/** @type {?} */ (getNativeByTNode(parentTNode, currentView)));
    }
}
/**
 * Inserts a native node before another native node for a given parent using {\@link Renderer3}.
 * This is a utility function that can be used when native nodes were determined - it abstracts an
 * actual renderer being used.
 * @param {?} renderer
 * @param {?} parent
 * @param {?} child
 * @param {?} beforeNode
 * @return {?}
 */
function nativeInsertBefore(renderer, parent, child, beforeNode) {
    ngDevMode && ngDevMode.rendererInsertBefore++;
    if (isProceduralRenderer(renderer)) {
        renderer.insertBefore(parent, child, beforeNode);
    }
    else {
        parent.insertBefore(child, beforeNode, true);
    }
}
/**
 * @param {?} renderer
 * @param {?} parent
 * @param {?} child
 * @return {?}
 */
function nativeAppendChild(renderer, parent, child) {
    ngDevMode && ngDevMode.rendererAppendChild++;
    ngDevMode && assertDefined(parent, 'parent node must be defined');
    if (isProceduralRenderer(renderer)) {
        renderer.appendChild(parent, child);
    }
    else {
        parent.appendChild(child);
    }
}
/**
 * @param {?} renderer
 * @param {?} parent
 * @param {?} child
 * @param {?} beforeNode
 * @return {?}
 */
function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode) {
    if (beforeNode !== null) {
        nativeInsertBefore(renderer, parent, child, beforeNode);
    }
    else {
        nativeAppendChild(renderer, parent, child);
    }
}
/**
 * Removes a node from the DOM given its native parent.
 * @param {?} renderer
 * @param {?} parent
 * @param {?} child
 * @param {?=} isHostElement
 * @return {?}
 */
function nativeRemoveChild(renderer, parent, child, isHostElement) {
    if (isProceduralRenderer(renderer)) {
        renderer.removeChild(parent, child, isHostElement);
    }
    else {
        parent.removeChild(child);
    }
}
/**
 * Returns a native parent of a given native node.
 * @param {?} renderer
 * @param {?} node
 * @return {?}
 */
function nativeParentNode(renderer, node) {
    return (/** @type {?} */ ((isProceduralRenderer(renderer) ? renderer.parentNode(node) : node.parentNode)));
}
/**
 * Returns a native sibling of a given native node.
 * @param {?} renderer
 * @param {?} node
 * @return {?}
 */
function nativeNextSibling(renderer, node) {
    return isProceduralRenderer(renderer) ? renderer.nextSibling(node) : node.nextSibling;
}
/**
 * Finds a native "anchor" node for cases where we can't append a native child directly
 * (`appendChild`) and need to use a reference (anchor) node for the `insertBefore` operation.
 * @param {?} parentTNode
 * @param {?} lView
 * @return {?}
 */
function getNativeAnchorNode(parentTNode, lView) {
    if (parentTNode.type === 2 /* View */) {
        /** @type {?} */
        const lContainer = getLContainer((/** @type {?} */ (parentTNode)), lView);
        if (lContainer === null)
            return null;
        /** @type {?} */
        const index = lContainer.indexOf(lView, CONTAINER_HEADER_OFFSET) - CONTAINER_HEADER_OFFSET;
        return getBeforeNodeForView(index, lContainer);
    }
    else if (parentTNode.type === 4 /* ElementContainer */ ||
        parentTNode.type === 5 /* IcuContainer */) {
        return getNativeByTNode(parentTNode, lView);
    }
    return null;
}
/**
 * Appends the `child` native node (or a collection of nodes) to the `parent`.
 *
 * The element insertion might be delayed {\@link canInsertNativeNode}.
 *
 * @param {?} tView The `TView' to be appended
 * @param {?} lView The current LView
 * @param {?} childEl The native child (or children) that should be appended
 * @param {?} childTNode The TNode of the child element
 * @return {?} Whether or not the child was appended
 */
function appendChild(tView, lView, childEl, childTNode) {
    /** @type {?} */
    const renderParent = getRenderParent(tView, childTNode, lView);
    if (renderParent != null) {
        /** @type {?} */
        const renderer = lView[RENDERER];
        /** @type {?} */
        const parentTNode = childTNode.parent || (/** @type {?} */ (lView[T_HOST]));
        /** @type {?} */
        const anchorNode = getNativeAnchorNode(parentTNode, lView);
        if (Array.isArray(childEl)) {
            for (let i = 0; i < childEl.length; i++) {
                nativeAppendOrInsertBefore(renderer, renderParent, childEl[i], anchorNode);
            }
        }
        else {
            nativeAppendOrInsertBefore(renderer, renderParent, childEl, anchorNode);
        }
    }
}
/**
 * Returns the first native node for a given LView, starting from the provided TNode.
 *
 * Native nodes are returned in the order in which those appear in the native tree (DOM).
 * @param {?} lView
 * @param {?} tNode
 * @return {?}
 */
function getFirstNativeNode(lView, tNode) {
    if (tNode !== null) {
        ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */, 5 /* IcuContainer */, 1 /* Projection */);
        /** @type {?} */
        const tNodeType = tNode.type;
        if (tNodeType === 3 /* Element */) {
            return getNativeByTNode(tNode, lView);
        }
        else if (tNodeType === 0 /* Container */) {
            return getBeforeNodeForView(-1, lView[tNode.index]);
        }
        else if (tNodeType === 4 /* ElementContainer */ || tNodeType === 5 /* IcuContainer */) {
            /** @type {?} */
            const elIcuContainerChild = tNode.child;
            if (elIcuContainerChild !== null) {
                return getFirstNativeNode(lView, elIcuContainerChild);
            }
            else {
                /** @type {?} */
                const rNodeOrLContainer = lView[tNode.index];
                if (isLContainer(rNodeOrLContainer)) {
                    return getBeforeNodeForView(-1, rNodeOrLContainer);
                }
                else {
                    return unwrapRNode(rNodeOrLContainer);
                }
            }
        }
        else {
            /** @type {?} */
            const componentView = lView[DECLARATION_COMPONENT_VIEW];
            /** @type {?} */
            const componentHost = (/** @type {?} */ (componentView[T_HOST]));
            /** @type {?} */
            const parentView = getLViewParent(componentView);
            /** @type {?} */
            const firstProjectedTNode = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNode.projection))];
            if (firstProjectedTNode != null) {
                return getFirstNativeNode((/** @type {?} */ (parentView)), firstProjectedTNode);
            }
            else {
                return getFirstNativeNode(lView, tNode.next);
            }
        }
    }
    return null;
}
/**
 * @param {?} viewIndexInContainer
 * @param {?} lContainer
 * @return {?}
 */
function getBeforeNodeForView(viewIndexInContainer, lContainer) {
    /** @type {?} */
    const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;
    if (nextViewIndex < lContainer.length) {
        /** @type {?} */
        const lView = (/** @type {?} */ (lContainer[nextViewIndex]));
        /** @type {?} */
        const firstTNodeOfView = lView[TVIEW].firstChild;
        if (firstTNodeOfView !== null) {
            return getFirstNativeNode(lView, firstTNodeOfView);
        }
    }
    return lContainer[NATIVE];
}
/**
 * Removes a native node itself using a given renderer. To remove the node we are looking up its
 * parent from the native tree as not all platforms / browsers support the equivalent of
 * node.remove().
 *
 * @param {?} renderer A renderer to be used
 * @param {?} rNode The native node that should be removed
 * @param {?=} isHostElement A flag indicating if a node to be removed is a host of a component.
 * @return {?}
 */
function nativeRemoveNode(renderer, rNode, isHostElement) {
    /** @type {?} */
    const nativeParent = nativeParentNode(renderer, rNode);
    if (nativeParent) {
        nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
    }
}
/**
 * Performs the operation of `action` on the node. Typically this involves inserting or removing
 * nodes on the LView or projection boundary.
 * @param {?} renderer
 * @param {?} action
 * @param {?} tNode
 * @param {?} lView
 * @param {?} renderParent
 * @param {?} beforeNode
 * @param {?} isProjection
 * @return {?}
 */
function applyNodes(renderer, action, tNode, lView, renderParent, beforeNode, isProjection) {
    while (tNode != null) {
        ngDevMode && assertTNodeForLView(tNode, lView);
        ngDevMode && assertNodeOfPossibleTypes(tNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */, 1 /* Projection */, 1 /* Projection */, 5 /* IcuContainer */);
        /** @type {?} */
        const rawSlotValue = lView[tNode.index];
        /** @type {?} */
        const tNodeType = tNode.type;
        if (isProjection) {
            if (action === 0 /* Create */) {
                rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
                tNode.flags |= 4 /* isProjected */;
            }
        }
        if ((tNode.flags & 64 /* isDetached */) !== 64 /* isDetached */) {
            if (tNodeType === 4 /* ElementContainer */ || tNodeType === 5 /* IcuContainer */) {
                applyNodes(renderer, action, tNode.child, lView, renderParent, beforeNode, false);
                applyToElementOrContainer(action, renderer, renderParent, rawSlotValue, beforeNode);
            }
            else if (tNodeType === 1 /* Projection */) {
                applyProjectionRecursive(renderer, action, lView, (/** @type {?} */ (tNode)), renderParent, beforeNode);
            }
            else {
                ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */);
                applyToElementOrContainer(action, renderer, renderParent, rawSlotValue, beforeNode);
            }
        }
        tNode = isProjection ? tNode.projectionNext : tNode.next;
    }
}
/**
 * `applyView` performs operation on the view as specified in `action` (insert, detach, destroy)
 *
 * Inserting a view without projection or containers at top level is simple. Just iterate over the
 * root nodes of the View, and for each node perform the `action`.
 *
 * Things get more complicated with containers and projections. That is because coming across:
 * - Container: implies that we have to insert/remove/destroy the views of that container as well
 *              which in turn can have their own Containers at the View roots.
 * - Projection: implies that we have to insert/remove/destroy the nodes of the projection. The
 *               complication is that the nodes we are projecting can themselves have Containers
 *               or other Projections.
 *
 * As you can see this is a very recursive problem. Yes recursion is not most efficient but the
 * code is complicated enough that trying to implemented with recursion becomes unmaintainable.
 *
 * @param {?} tView The `TView' which needs to be inserted, detached, destroyed
 * @param {?} lView The LView which needs to be inserted, detached, destroyed.
 * @param {?} renderer Renderer to use
 * @param {?} action action to perform (insert, detach, destroy)
 * @param {?} renderParent parent DOM element for insertion/removal.
 * @param {?} beforeNode Before which node the insertions should happen.
 * @return {?}
 */
function applyView(tView, lView, renderer, action, renderParent, beforeNode) {
    ngDevMode && assertNodeType((/** @type {?} */ (tView.node)), 2 /* View */);
    /** @type {?} */
    const viewRootTNode = (/** @type {?} */ (tView.node)).child;
    applyNodes(renderer, action, viewRootTNode, lView, renderParent, beforeNode, false);
}
/**
 * `applyProjection` performs operation on the projection.
 *
 * Inserting a projection requires us to locate the projected nodes from the parent component. The
 * complication is that those nodes themselves could be re-projected from their parent component.
 *
 * @param {?} tView The `TView` of `LView` which needs to be inserted, detached, destroyed
 * @param {?} lView The `LView` which needs to be inserted, detached, destroyed.
 * @param {?} tProjectionNode node to project
 * @return {?}
 */
function applyProjection(tView, lView, tProjectionNode) {
    /** @type {?} */
    const renderer = lView[RENDERER];
    /** @type {?} */
    const renderParent = getRenderParent(tView, tProjectionNode, lView);
    /** @type {?} */
    const parentTNode = tProjectionNode.parent || (/** @type {?} */ (lView[T_HOST]));
    /** @type {?} */
    let beforeNode = getNativeAnchorNode(parentTNode, lView);
    applyProjectionRecursive(renderer, 0 /* Create */, lView, tProjectionNode, renderParent, beforeNode);
}
/**
 * `applyProjectionRecursive` performs operation on the projection specified by `action` (insert,
 * detach, destroy)
 *
 * Inserting a projection requires us to locate the projected nodes from the parent component. The
 * complication is that those nodes themselves could be re-projected from their parent component.
 *
 * @param {?} renderer Render to use
 * @param {?} action action to perform (insert, detach, destroy)
 * @param {?} lView The LView which needs to be inserted, detached, destroyed.
 * @param {?} tProjectionNode node to project
 * @param {?} renderParent parent DOM element for insertion/removal.
 * @param {?} beforeNode Before which node the insertions should happen.
 * @return {?}
 */
function applyProjectionRecursive(renderer, action, lView, tProjectionNode, renderParent, beforeNode) {
    /** @type {?} */
    const componentLView = lView[DECLARATION_COMPONENT_VIEW];
    /** @type {?} */
    const componentNode = (/** @type {?} */ (componentLView[T_HOST]));
    ngDevMode &&
        assertEqual(typeof tProjectionNode.projection, 'number', 'expecting projection index');
    /** @type {?} */
    const nodeToProjectOrRNodes = (/** @type {?} */ ((/** @type {?} */ (componentNode.projection))[tProjectionNode.projection]));
    if (Array.isArray(nodeToProjectOrRNodes)) {
        // This should not exist, it is a bit of a hack. When we bootstrap a top level node and we
        // need to support passing projectable nodes, so we cheat and put them in the TNode
        // of the Host TView. (Yes we put instance info at the T Level). We can get away with it
        // because we know that that TView is not shared and therefore it will not be a problem.
        // This should be refactored and cleaned up.
        for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {
            /** @type {?} */
            const rNode = nodeToProjectOrRNodes[i];
            applyToElementOrContainer(action, renderer, renderParent, rNode, beforeNode);
        }
    }
    else {
        /** @type {?} */
        let nodeToProject = nodeToProjectOrRNodes;
        /** @type {?} */
        const projectedComponentLView = (/** @type {?} */ (componentLView[PARENT]));
        applyNodes(renderer, action, nodeToProject, projectedComponentLView, renderParent, beforeNode, true);
    }
}
/**
 * `applyContainer` performs an operation on the container and its views as specified by
 * `action` (insert, detach, destroy)
 *
 * Inserting a Container is complicated by the fact that the container may have Views which
 * themselves have containers or projections.
 *
 * @param {?} renderer Renderer to use
 * @param {?} action action to perform (insert, detach, destroy)
 * @param {?} lContainer The LContainer which needs to be inserted, detached, destroyed.
 * @param {?} renderParent parent DOM element for insertion/removal.
 * @param {?} beforeNode Before which node the insertions should happen.
 * @return {?}
 */
function applyContainer(renderer, action, lContainer, renderParent, beforeNode) {
    ngDevMode && assertLContainer(lContainer);
    /** @type {?} */
    const anchor = lContainer[NATIVE];
    // LContainer has its own before node.
    /** @type {?} */
    const native = unwrapRNode(lContainer);
    // An LContainer can be created dynamically on any node by injecting ViewContainerRef.
    // Asking for a ViewContainerRef on an element will result in a creation of a separate anchor node
    // (comment in the DOM) that will be different from the LContainer's host node. In this particular
    // case we need to execute action on 2 nodes:
    // - container's host node (this is done in the executeActionOnElementOrContainer)
    // - container's host node (this is done here)
    if (anchor !== native) {
        // This is very strange to me (Misko). I would expect that the native is same as anchor. I don't
        // see a reason why they should be different, but they are.
        //
        // If they are we need to process the second anchor as well.
        applyToElementOrContainer(action, renderer, renderParent, anchor, beforeNode);
    }
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
        /** @type {?} */
        const lView = (/** @type {?} */ (lContainer[i]));
        applyView(lView[TVIEW], lView, renderer, action, renderParent, anchor);
    }
}
/**
 * Writes class/style to element.
 *
 * @param {?} renderer Renderer to use.
 * @param {?} isClassBased `true` if it should be written to `class` (`false` to write to `style`)
 * @param {?} rNode The Node to write to.
 * @param {?} prop Property to write to. This would be the class/style name.
 * @param {?} value Value to write. If `null`/`undefined`/`false` this is considered a remove (set/add
 *        otherwise).
 * @return {?}
 */
function applyStyling(renderer, isClassBased, rNode, prop, value) {
    /** @type {?} */
    const isProcedural = isProceduralRenderer(renderer);
    if (isClassBased) {
        // We actually want JS true/false here because any truthy value should add the class
        if (!value) {
            ngDevMode && ngDevMode.rendererRemoveClass++;
            if (isProcedural) {
                ((/** @type {?} */ (renderer))).removeClass(rNode, prop);
            }
            else {
                ((/** @type {?} */ (rNode))).classList.remove(prop);
            }
        }
        else {
            ngDevMode && ngDevMode.rendererAddClass++;
            if (isProcedural) {
                ((/** @type {?} */ (renderer))).addClass(rNode, prop);
            }
            else {
                ngDevMode && assertDefined(((/** @type {?} */ (rNode))).classList, 'HTMLElement expected');
                ((/** @type {?} */ (rNode))).classList.add(prop);
            }
        }
    }
    else {
        // TODO(misko): Can't import RendererStyleFlags2.DashCase as it causes imports to be resolved in
        // different order which causes failures. Using direct constant as workaround for now.
        /** @type {?} */
        const flags = prop.indexOf('-') == -1 ? undefined : 2 /* RendererStyleFlags2.DashCase */;
        if (value == null /** || value === undefined */) {
            ngDevMode && ngDevMode.rendererRemoveStyle++;
            if (isProcedural) {
                ((/** @type {?} */ (renderer))).removeStyle(rNode, prop, flags);
            }
            else {
                ((/** @type {?} */ (rNode))).style.removeProperty(prop);
            }
        }
        else {
            ngDevMode && ngDevMode.rendererSetStyle++;
            if (isProcedural) {
                ((/** @type {?} */ (renderer))).setStyle(rNode, prop, value, flags);
            }
            else {
                ngDevMode && assertDefined(((/** @type {?} */ (rNode))).style, 'HTMLElement expected');
                ((/** @type {?} */ (rNode))).style.setProperty(prop, value);
            }
        }
    }
}
/**
 * Write `cssText` to `RElement`.
 *
 * This function does direct write without any reconciliation. Used for writing initial values, so
 * that static styling values do not pull in the style parser.
 *
 * @param {?} renderer Renderer to use
 * @param {?} element The element which needs to be updated.
 * @param {?} newValue The new class list to write.
 * @return {?}
 */
function writeDirectStyle(renderer, element, newValue) {
    ngDevMode && assertString(newValue, '\'newValue\' should be a string');
    if (isProceduralRenderer(renderer)) {
        renderer.setAttribute(element, 'style', newValue);
    }
    else {
        ((/** @type {?} */ (element))).style.cssText = newValue;
    }
    ngDevMode && ngDevMode.rendererSetStyle++;
}
/**
 * Write `className` to `RElement`.
 *
 * This function does direct write without any reconciliation. Used for writing initial values, so
 * that static styling values do not pull in the style parser.
 *
 * @param {?} renderer Renderer to use
 * @param {?} element The element which needs to be updated.
 * @param {?} newValue The new class list to write.
 * @return {?}
 */
function writeDirectClass(renderer, element, newValue) {
    ngDevMode && assertString(newValue, '\'newValue\' should be a string');
    if (isProceduralRenderer(renderer)) {
        if (newValue === '') {
            // There are tests in `google3` which expect `element.getAttribute('class')` to be `null`.
            renderer.removeAttribute(element, 'class');
        }
        else {
            renderer.setAttribute(element, 'class', newValue);
        }
    }
    else {
        element.className = newValue;
    }
    ngDevMode && ngDevMode.rendererSetClassName++;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/node_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * If `startTNode.parent` exists and has an injector, returns TNode for that injector.
 * Otherwise, unwraps a parent injector location number to find the view offset from the current
 * injector, then walks up the declaration view tree until the TNode of the parent injector is
 * found.
 *
 * @param {?} location The location of the parent injector, which contains the view offset
 * @param {?} startView The LView instance from which to start walking up the view tree
 * @param {?} startTNode The TNode instance of the starting element
 * @return {?} The TNode of the parent injector
 */
function getParentInjectorTNode(location, startView, startTNode) {
    // If there is an injector on the parent TNode, retrieve the TNode for that injector.
    if (startTNode.parent && startTNode.parent.injectorIndex !== -1) {
        // view offset is 0
        /** @type {?} */
        const injectorIndex = startTNode.parent.injectorIndex;
        /** @type {?} */
        let tNode = startTNode.parent;
        // If tNode.injectorIndex === tNode.parent.injectorIndex, then the index belongs to a parent
        // injector.
        while (tNode.parent != null && injectorIndex == tNode.parent.injectorIndex) {
            tNode = tNode.parent;
        }
        return tNode;
    }
    /** @type {?} */
    let viewOffset = getParentInjectorViewOffset(location);
    // view offset is 1
    /** @type {?} */
    let parentView = startView;
    /** @type {?} */
    let parentTNode = (/** @type {?} */ (startView[T_HOST]));
    // view offset is superior to 1
    while (viewOffset > 1) {
        parentView = (/** @type {?} */ (parentView[DECLARATION_VIEW]));
        parentTNode = (/** @type {?} */ (parentView[T_HOST]));
        viewOffset--;
    }
    return parentTNode;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/view_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function viewEngine_ChangeDetectorRef_interface() { }
/**
 * @template T
 */
class ViewRef {
    /**
     * @param {?} _lView
     * @param {?=} _cdRefInjectingView
     */
    constructor(_lView, _cdRefInjectingView) {
        this._lView = _lView;
        this._cdRefInjectingView = _cdRefInjectingView;
        this._appRef = null;
        this._viewContainerRef = null;
        /**
         * \@internal
         */
        this._tViewNode = null;
    }
    /**
     * @return {?}
     */
    get rootNodes() {
        /** @type {?} */
        const lView = this._lView;
        if (lView[HOST] == null) {
            /** @type {?} */
            const hostTView = (/** @type {?} */ (lView[T_HOST]));
            return collectNativeNodes(lView[TVIEW], lView, hostTView.child, []);
        }
        return [];
    }
    /**
     * @return {?}
     */
    get context() { return (/** @type {?} */ (this._lView[CONTEXT])); }
    /**
     * @return {?}
     */
    get destroyed() {
        return (this._lView[FLAGS] & 256 /* Destroyed */) === 256 /* Destroyed */;
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this._appRef) {
            this._appRef.detachView(this);
        }
        else if (this._viewContainerRef) {
            /** @type {?} */
            const index = this._viewContainerRef.indexOf(this);
            if (index > -1) {
                this._viewContainerRef.detach(index);
            }
            this._viewContainerRef = null;
        }
        destroyLView(this._lView[TVIEW], this._lView);
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    onDestroy(callback) { storeCleanupFn(this._lView[TVIEW], this._lView, callback); }
    /**
     * Marks a view and all of its ancestors dirty.
     *
     * It also triggers change detection by calling `scheduleTick` internally, which coalesces
     * multiple `markForCheck` calls to into one change detection run.
     *
     * This can be used to ensure an {\@link ChangeDetectionStrategy#OnPush OnPush} component is
     * checked when it needs to be re-rendered but the two normal triggers haven't marked it
     * dirty (i.e. inputs haven't changed and events haven't fired in the view).
     *
     * <!-- TODO: Add a link to a chapter on OnPush components -->
     *
     * \@usageNotes
     * ### Example
     *
     * ```typescript
     * \@Component({
     *   selector: 'my-app',
     *   template: `Number of ticks: {{numberOfTicks}}`
     *   changeDetection: ChangeDetectionStrategy.OnPush,
     * })
     * class AppComponent {
     *   numberOfTicks = 0;
     *
     *   constructor(private ref: ChangeDetectorRef) {
     *     setInterval(() => {
     *       this.numberOfTicks++;
     *       // the following is required, otherwise the view will not be updated
     *       this.ref.markForCheck();
     *     }, 1000);
     *   }
     * }
     * ```
     * @return {?}
     */
    markForCheck() { markViewDirty(this._cdRefInjectingView || this._lView); }
    /**
     * Detaches the view from the change detection tree.
     *
     * Detached views will not be checked during change detection runs until they are
     * re-attached, even if they are dirty. `detach` can be used in combination with
     * {\@link ChangeDetectorRef#detectChanges detectChanges} to implement local change
     * detection checks.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
     *
     * \@usageNotes
     * ### Example
     *
     * The following example defines a component with a large list of readonly data.
     * Imagine the data changes constantly, many times per second. For performance reasons,
     * we want to check and update the list every five seconds. We can do that by detaching
     * the component's change detector and doing a local check every five seconds.
     *
     * ```typescript
     * class DataProvider {
     *   // in a real application the returned data will be different every time
     *   get data() {
     *     return [1,2,3,4,5];
     *   }
     * }
     *
     * \@Component({
     *   selector: 'giant-list',
     *   template: `
     *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
     *   `,
     * })
     * class GiantList {
     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
     *     ref.detach();
     *     setInterval(() => {
     *       this.ref.detectChanges();
     *     }, 5000);
     *   }
     * }
     *  /
     *   selector: 'app',
     *   providers: [DataProvider],
     *   template: `
     *     <giant-list><giant-list>
     *   `,
     * })
     * class App {
     * }
     * ```
     * @return {?}
     */
    detach() { this._lView[FLAGS] &= ~128 /* Attached */; }
    /**
     * Re-attaches a view to the change detection tree.
     *
     * This can be used to re-attach views that were previously detached from the tree
     * using {\@link ChangeDetectorRef#detach detach}. Views are attached to the tree by default.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     *
     * \@usageNotes
     * ### Example
     *
     * The following example creates a component displaying `live` data. The component will detach
     * its change detector from the main change detector tree when the component's live property
     * is set to false.
     *
     * ```typescript
     * class DataProvider {
     *   data = 1;
     *
     *   constructor() {
     *     setInterval(() => {
     *       this.data = this.data * 2;
     *     }, 500);
     *   }
     * }
     *
     * \@Component({
     *   selector: 'live-data',
     *   inputs: ['live'],
     *   template: 'Data: {{dataProvider.data}}'
     * })
     * class LiveData {
     *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
     *
     *   set live(value) {
     *     if (value) {
     *       this.ref.reattach();
     *     } else {
     *       this.ref.detach();
     *     }
     *   }
     * }
     *  /
     *   selector: 'my-app',
     *   providers: [DataProvider],
     *   template: `
     *     Live Update: <input type="checkbox" [(ngModel)]="live">
     *     <live-data [live]="live"><live-data>
     *   `,
     * })
     * class AppComponent {
     *   live = true;
     * }
     * ```
     * @return {?}
     */
    reattach() { this._lView[FLAGS] |= 128 /* Attached */; }
    /**
     * Checks the view and its children.
     *
     * This can also be used in combination with {\@link ChangeDetectorRef#detach detach} to implement
     * local change detection checks.
     *
     * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
     * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
     *
     * \@usageNotes
     * ### Example
     *
     * The following example defines a component with a large list of readonly data.
     * Imagine, the data changes constantly, many times per second. For performance reasons,
     * we want to check and update the list every five seconds.
     *
     * We can do that by detaching the component's change detector and doing a local change detection
     * check every five seconds.
     *
     * See {\@link ChangeDetectorRef#detach detach} for more information.
     * @return {?}
     */
    detectChanges() { detectChangesInternal(this._lView[TVIEW], this._lView, this.context); }
    /**
     * Checks the change detector and its children, and throws if any changes are detected.
     *
     * This is used in development mode to verify that running change detection doesn't
     * introduce other changes.
     * @return {?}
     */
    checkNoChanges() { checkNoChangesInternal(this._lView[TVIEW], this._lView, this.context); }
    /**
     * @param {?} vcRef
     * @return {?}
     */
    attachToViewContainerRef(vcRef) {
        if (this._appRef) {
            throw new Error('This view is already attached directly to the ApplicationRef!');
        }
        this._viewContainerRef = vcRef;
    }
    /**
     * @return {?}
     */
    detachFromAppRef() {
        this._appRef = null;
        renderDetachView(this._lView[TVIEW], this._lView);
    }
    /**
     * @param {?} appRef
     * @return {?}
     */
    attachToAppRef(appRef) {
        if (this._viewContainerRef) {
            throw new Error('This view is already attached to a ViewContainer!');
        }
        this._appRef = appRef;
    }
}
if (false) {}
/**
 * \@internal
 * @template T
 */
class RootViewRef extends ViewRef {
    /**
     * @param {?} _view
     */
    constructor(_view) {
        super(_view);
        this._view = _view;
    }
    /**
     * @return {?}
     */
    detectChanges() { detectChangesInRootView(this._view); }
    /**
     * @return {?}
     */
    checkNoChanges() { checkNoChangesInRootView(this._view); }
    /**
     * @return {?}
     */
    get context() { return (/** @type {?} */ (null)); }
}
if (false) {}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} tNode
 * @param {?} result
 * @param {?=} isProjection
 * @return {?}
 */
function collectNativeNodes(tView, lView, tNode, result, isProjection = false) {
    while (tNode !== null) {
        ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 1 /* Projection */, 4 /* ElementContainer */, 5 /* IcuContainer */);
        /** @type {?} */
        const lNode = lView[tNode.index];
        if (lNode !== null) {
            result.push(unwrapRNode(lNode));
        }
        // A given lNode can represent either a native node or a LContainer (when it is a host of a
        // ViewContainerRef). When we find a LContainer we need to descend into it to collect root nodes
        // from the views in this container.
        if (isLContainer(lNode)) {
            for (let i = CONTAINER_HEADER_OFFSET; i < lNode.length; i++) {
                /** @type {?} */
                const lViewInAContainer = lNode[i];
                /** @type {?} */
                const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;
                if (lViewFirstChildTNode !== null) {
                    collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
                }
            }
        }
        /** @type {?} */
        const tNodeType = tNode.type;
        if (tNodeType === 4 /* ElementContainer */ || tNodeType === 5 /* IcuContainer */) {
            collectNativeNodes(tView, lView, tNode.child, result);
        }
        else if (tNodeType === 1 /* Projection */) {
            /** @type {?} */
            const componentView = lView[DECLARATION_COMPONENT_VIEW];
            /** @type {?} */
            const componentHost = (/** @type {?} */ (componentView[T_HOST]));
            /** @type {?} */
            const parentView = getLViewParent(componentView);
            /** @type {?} */
            let firstProjectedNode = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNode.projection))];
            if (firstProjectedNode !== null && parentView !== null) {
                collectNativeNodes(parentView[TVIEW], parentView, firstProjectedNode, result, true);
            }
        }
        tNode = isProjection ? tNode.projectionNext : tNode.next;
    }
    return result;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/view_engine_compatibility.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Creates an ElementRef from the most recent node.
 *
 * @param {?} ElementRefToken
 * @return {?} The ElementRef instance to use
 */
function injectElementRef(ElementRefToken) {
    return createElementRef(ElementRefToken, getPreviousOrParentTNode(), getLView());
}
/** @type {?} */
let R3ElementRef;
/**
 * Creates an ElementRef given a node.
 *
 * @param {?} ElementRefToken The ElementRef type
 * @param {?} tNode The node for which you'd like an ElementRef
 * @param {?} view The view to which the node belongs
 * @return {?} The ElementRef instance to use
 */
function createElementRef(ElementRefToken, tNode, view) {
    if (!R3ElementRef) {
        R3ElementRef = class ElementRef extends ElementRefToken {
        };
    }
    return new R3ElementRef((/** @type {?} */ (getNativeByTNode(tNode, view))));
}
/** @type {?} */
let R3TemplateRef;
/**
 * Creates a TemplateRef given a node.
 *
 * @template T
 * @param {?} TemplateRefToken
 * @param {?} ElementRefToken
 * @return {?} The TemplateRef instance to use
 */
function injectTemplateRef(TemplateRefToken, ElementRefToken) {
    return createTemplateRef(TemplateRefToken, ElementRefToken, getPreviousOrParentTNode(), getLView());
}
/**
 * Creates a TemplateRef and stores it on the injector.
 *
 * @template T
 * @param {?} TemplateRefToken The TemplateRef type
 * @param {?} ElementRefToken The ElementRef type
 * @param {?} hostTNode The node on which a TemplateRef is requested
 * @param {?} hostView The view to which the node belongs
 * @return {?} The TemplateRef instance or null if we can't create a TemplateRef on a given node type
 */
function createTemplateRef(TemplateRefToken, ElementRefToken, hostTNode, hostView) {
    if (!R3TemplateRef) {
        R3TemplateRef = class TemplateRef extends TemplateRefToken {
            /**
             * @param {?} _declarationView
             * @param {?} _declarationTContainer
             * @param {?} elementRef
             */
            constructor(_declarationView, _declarationTContainer, elementRef) {
                super();
                this._declarationView = _declarationView;
                this._declarationTContainer = _declarationTContainer;
                this.elementRef = elementRef;
            }
            /**
             * @param {?} context
             * @return {?}
             */
            createEmbeddedView(context) {
                /** @type {?} */
                const embeddedTView = (/** @type {?} */ (this._declarationTContainer.tViews));
                /** @type {?} */
                const embeddedLView = createLView(this._declarationView, embeddedTView, context, 16 /* CheckAlways */, null, embeddedTView.node);
                /** @type {?} */
                const declarationLContainer = this._declarationView[this._declarationTContainer.index];
                ngDevMode && assertLContainer(declarationLContainer);
                embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
                /** @type {?} */
                const declarationViewLQueries = this._declarationView[QUERIES];
                if (declarationViewLQueries !== null) {
                    embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
                }
                renderView(embeddedTView, embeddedLView, context);
                /** @type {?} */
                const viewRef = new ViewRef(embeddedLView);
                viewRef._tViewNode = (/** @type {?} */ (embeddedLView[T_HOST]));
                return viewRef;
            }
        };
    }
    if (hostTNode.type === 0 /* Container */) {
        ngDevMode && assertDefined(hostTNode.tViews, 'TView must be allocated');
        return new R3TemplateRef(hostView, (/** @type {?} */ (hostTNode)), createElementRef(ElementRefToken, hostTNode, hostView));
    }
    else {
        return null;
    }
}
/** @type {?} */
let R3ViewContainerRef;
/**
 * Creates a ViewContainerRef and stores it on the injector. Or, if the ViewContainerRef
 * already exists, retrieves the existing ViewContainerRef.
 *
 * @param {?} ViewContainerRefToken
 * @param {?} ElementRefToken
 * @return {?} The ViewContainerRef instance to use
 */
function injectViewContainerRef(ViewContainerRefToken, ElementRefToken) {
    /** @type {?} */
    const previousTNode = (/** @type {?} */ (getPreviousOrParentTNode()));
    return createContainerRef(ViewContainerRefToken, ElementRefToken, previousTNode, getLView());
}
/**
 * Creates a ViewContainerRef and stores it on the injector.
 *
 * @param {?} ViewContainerRefToken The ViewContainerRef type
 * @param {?} ElementRefToken The ElementRef type
 * @param {?} hostTNode The node that is requesting a ViewContainerRef
 * @param {?} hostView The view to which the node belongs
 * @return {?} The ViewContainerRef instance to use
 */
function createContainerRef(ViewContainerRefToken, ElementRefToken, hostTNode, hostView) {
    if (!R3ViewContainerRef) {
        R3ViewContainerRef = class ViewContainerRef extends ViewContainerRefToken {
            /**
             * @param {?} _lContainer
             * @param {?} _hostTNode
             * @param {?} _hostView
             */
            constructor(_lContainer, _hostTNode, _hostView) {
                super();
                this._lContainer = _lContainer;
                this._hostTNode = _hostTNode;
                this._hostView = _hostView;
            }
            /**
             * @return {?}
             */
            get element() {
                return createElementRef(ElementRefToken, this._hostTNode, this._hostView);
            }
            /**
             * @return {?}
             */
            get injector() { return new NodeInjector(this._hostTNode, this._hostView); }
            /**
             * @deprecated No replacement
             * @return {?}
             */
            get parentInjector() {
                /** @type {?} */
                const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostView);
                /** @type {?} */
                const parentView = getParentInjectorView(parentLocation, this._hostView);
                /** @type {?} */
                const parentTNode = getParentInjectorTNode(parentLocation, this._hostView, this._hostTNode);
                return !hasParentInjector(parentLocation) || parentTNode == null ?
                    new NodeInjector(null, this._hostView) :
                    new NodeInjector(parentTNode, parentView);
            }
            /**
             * @return {?}
             */
            clear() {
                while (this.length > 0) {
                    this.remove(this.length - 1);
                }
            }
            /**
             * @param {?} index
             * @return {?}
             */
            get(index) {
                return this._lContainer[VIEW_REFS] !== null && (/** @type {?} */ (this._lContainer[VIEW_REFS]))[index] || null;
            }
            /**
             * @return {?}
             */
            get length() { return this._lContainer.length - CONTAINER_HEADER_OFFSET; }
            /**
             * @template C
             * @param {?} templateRef
             * @param {?=} context
             * @param {?=} index
             * @return {?}
             */
            createEmbeddedView(templateRef, context, index) {
                /** @type {?} */
                const viewRef = templateRef.createEmbeddedView(context || (/** @type {?} */ ({})));
                this.insert(viewRef, index);
                return viewRef;
            }
            /**
             * @template C
             * @param {?} componentFactory
             * @param {?=} index
             * @param {?=} injector
             * @param {?=} projectableNodes
             * @param {?=} ngModuleRef
             * @return {?}
             */
            createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
                /** @type {?} */
                const contextInjector = injector || this.parentInjector;
                if (!ngModuleRef && ((/** @type {?} */ (componentFactory))).ngModule == null && contextInjector) {
                    // DO NOT REFACTOR. The code here used to have a `value || undefined` expression
                    // which seems to cause internal google apps to fail. This is documented in the
                    // following internal bug issue: go/b/142967802
                    /** @type {?} */
                    const result = contextInjector.get(NgModuleRef, null);
                    if (result) {
                        ngModuleRef = result;
                    }
                }
                /** @type {?} */
                const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
                this.insert(componentRef.hostView, index);
                return componentRef;
            }
            /**
             * @param {?} viewRef
             * @param {?=} index
             * @return {?}
             */
            insert(viewRef, index) {
                /** @type {?} */
                const lView = (/** @type {?} */ (((/** @type {?} */ (viewRef)))._lView));
                /** @type {?} */
                const tView = lView[TVIEW];
                if (viewRef.destroyed) {
                    throw new Error('Cannot insert a destroyed View in a ViewContainer!');
                }
                this.allocateContainerIfNeeded();
                if (viewAttachedToContainer(lView)) {
                    // If view is already attached, detach it first so we clean up references appropriately.
                    /** @type {?} */
                    const prevIdx = this.indexOf(viewRef);
                    // A view might be attached either to this or a different container. The `prevIdx` for
                    // those cases will be:
                    // equal to -1 for views attached to this ViewContainerRef
                    // >= 0 for views attached to a different ViewContainerRef
                    if (prevIdx !== -1) {
                        this.detach(prevIdx);
                    }
                    else {
                        /** @type {?} */
                        const prevLContainer = (/** @type {?} */ (lView[PARENT]));
                        ngDevMode && assertEqual(isLContainer(prevLContainer), true, 'An attached view should have its PARENT point to a container.');
                        // We need to re-create a R3ViewContainerRef instance since those are not stored on
                        // LView (nor anywhere else).
                        /** @type {?} */
                        const prevVCRef = new R3ViewContainerRef(prevLContainer, (/** @type {?} */ (prevLContainer[T_HOST])), prevLContainer[PARENT]);
                        prevVCRef.detach(prevVCRef.indexOf(viewRef));
                    }
                }
                /** @type {?} */
                const adjustedIdx = this._adjustIndex(index);
                insertView(tView, lView, this._lContainer, adjustedIdx);
                /** @type {?} */
                const beforeNode = getBeforeNodeForView(adjustedIdx, this._lContainer);
                addRemoveViewFromContainer(tView, lView, true, beforeNode);
                ((/** @type {?} */ (viewRef))).attachToViewContainerRef(this);
                addToArray((/** @type {?} */ (this._lContainer[VIEW_REFS])), adjustedIdx, viewRef);
                return viewRef;
            }
            /**
             * @param {?} viewRef
             * @param {?} newIndex
             * @return {?}
             */
            move(viewRef, newIndex) {
                if (viewRef.destroyed) {
                    throw new Error('Cannot move a destroyed View in a ViewContainer!');
                }
                return this.insert(viewRef, newIndex);
            }
            /**
             * @param {?} viewRef
             * @return {?}
             */
            indexOf(viewRef) {
                /** @type {?} */
                const viewRefsArr = this._lContainer[VIEW_REFS];
                return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
            }
            /**
             * @param {?=} index
             * @return {?}
             */
            remove(index) {
                this.allocateContainerIfNeeded();
                /** @type {?} */
                const adjustedIdx = this._adjustIndex(index, -1);
                removeView(this._lContainer, adjustedIdx);
                removeFromArray((/** @type {?} */ (this._lContainer[VIEW_REFS])), adjustedIdx);
            }
            /**
             * @param {?=} index
             * @return {?}
             */
            detach(index) {
                this.allocateContainerIfNeeded();
                /** @type {?} */
                const adjustedIdx = this._adjustIndex(index, -1);
                /** @type {?} */
                const view = detachView(this._lContainer, adjustedIdx);
                /** @type {?} */
                const wasDetached = view && removeFromArray((/** @type {?} */ (this._lContainer[VIEW_REFS])), adjustedIdx) != null;
                return wasDetached ? new ViewRef((/** @type {?} */ (view))) : null;
            }
            /**
             * @private
             * @param {?=} index
             * @param {?=} shift
             * @return {?}
             */
            _adjustIndex(index, shift = 0) {
                if (index == null) {
                    return this.length + shift;
                }
                if (ngDevMode) {
                    assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);
                    // +1 because it's legal to insert at the end.
                    assertLessThan(index, this.length + 1 + shift, 'index');
                }
                return index;
            }
            /**
             * @private
             * @return {?}
             */
            allocateContainerIfNeeded() {
                if (this._lContainer[VIEW_REFS] === null) {
                    this._lContainer[VIEW_REFS] = [];
                }
            }
        };
    }
    ngDevMode && assertNodeOfPossibleTypes(hostTNode, 0 /* Container */, 3 /* Element */, 4 /* ElementContainer */);
    /** @type {?} */
    let lContainer;
    /** @type {?} */
    const slotValue = hostView[hostTNode.index];
    if (isLContainer(slotValue)) {
        // If the host is a container, we don't need to create a new LContainer
        lContainer = slotValue;
        setLContainerActiveIndex(lContainer, -1 /* DYNAMIC_EMBEDDED_VIEWS_ONLY */);
    }
    else {
        /** @type {?} */
        let commentNode;
        // If the host is an element container, the native host element is guaranteed to be a
        // comment and we can reuse that comment as anchor element for the new LContainer.
        // The comment node in question is already part of the DOM structure so we don't need to append
        // it again.
        if (hostTNode.type === 4 /* ElementContainer */) {
            commentNode = (/** @type {?} */ (unwrapRNode(slotValue)));
        }
        else {
            ngDevMode && ngDevMode.rendererCreateComment++;
            commentNode = hostView[RENDERER].createComment(ngDevMode ? 'container' : '');
            // A `ViewContainerRef` can be injected by the root (topmost / bootstrapped) component. In
            // this case we can't use TView / TNode data structures to insert container's marker node
            // (both a parent of a comment node and the comment node itself are not part of any view). In
            // this specific case we use low-level DOM manipulation to insert container's marker (comment)
            // node.
            if (isRootView(hostView)) {
                /** @type {?} */
                const renderer = hostView[RENDERER];
                /** @type {?} */
                const hostNative = (/** @type {?} */ (getNativeByTNode(hostTNode, hostView)));
                /** @type {?} */
                const parentOfHostNative = nativeParentNode(renderer, hostNative);
                nativeInsertBefore(renderer, (/** @type {?} */ (parentOfHostNative)), commentNode, nativeNextSibling(renderer, hostNative));
            }
            else {
                appendChild(hostView[TVIEW], hostView, commentNode, hostTNode);
            }
        }
        hostView[hostTNode.index] = lContainer =
            createLContainer(slotValue, hostView, commentNode, hostTNode);
        addToViewTree(hostView, lContainer);
    }
    return new R3ViewContainerRef(lContainer, hostTNode, hostView);
}
/**
 * Returns a ChangeDetectorRef (a.k.a. a ViewRef)
 * @param {?=} isPipe
 * @return {?}
 */
function injectChangeDetectorRef(isPipe = false) {
    return createViewRef(getPreviousOrParentTNode(), getLView(), isPipe);
}
/**
 * Creates a ViewRef and stores it on the injector as ChangeDetectorRef (public alias).
 *
 * @param {?} tNode The node that is requesting a ChangeDetectorRef
 * @param {?} lView The view to which the node belongs
 * @param {?} isPipe Whether the view is being injected into a pipe.
 * @return {?} The ChangeDetectorRef to use
 */
function createViewRef(tNode, lView, isPipe) {
    // `isComponentView` will be true for Component and Directives (but not for Pipes).
    // See https://github.com/angular/angular/pull/33072 for proper fix
    /** @type {?} */
    const isComponentView = !isPipe && isComponentHost(tNode);
    if (isComponentView) {
        // The LView represents the location where the component is declared.
        // Instead we want the LView for the component View and so we need to look it up.
        /** @type {?} */
        const componentView = getComponentLViewByIndex(tNode.index, lView);
        return new ViewRef(componentView, componentView);
    }
    else if (tNode.type === 3 /* Element */ || tNode.type === 0 /* Container */ ||
        tNode.type === 4 /* ElementContainer */ || tNode.type === 5 /* IcuContainer */) {
        // The LView represents the location where the injection is requested from.
        // We need to locate the containing LView (in case where the `lView` is an embedded view)
        /** @type {?} */
        const hostComponentView = lView[DECLARATION_COMPONENT_VIEW];
        return new ViewRef(hostComponentView, lView);
    }
    return (/** @type {?} */ (null));
}
/**
 * Returns a Renderer2 (or throws when application was bootstrapped with Renderer3)
 * @param {?} view
 * @return {?}
 */
function getOrCreateRenderer2(view) {
    /** @type {?} */
    const renderer = view[RENDERER];
    if (isProceduralRenderer(renderer)) {
        return (/** @type {?} */ (renderer));
    }
    else {
        throw new Error('Cannot inject Renderer2 when the application uses Renderer3!');
    }
}
/**
 * Injects a Renderer2 for the current component.
 * @return {?}
 */
function injectRenderer2() {
    // We need the Renderer to be based on the component that it's being injected into, however since
    // DI happens before we've entered its view, `getLView` will return the parent view instead.
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tNode = getPreviousOrParentTNode();
    /** @type {?} */
    const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
    return getOrCreateRenderer2(isLView(nodeAtIndex) ? nodeAtIndex : lView);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/change_detection/change_detector_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Base class for Angular Views, provides change detection functionality.
 * A change-detection tree collects all views that are to be checked for changes.
 * Use the methods to add and remove views from the tree, initiate change-detection,
 * and explicitly mark views as _dirty_, meaning that they have changed and need to be rerendered.
 *
 * \@usageNotes
 *
 * The following examples demonstrate how to modify default change-detection behavior
 * to perform explicit detection when needed.
 *
 * ### Use `markForCheck()` with `CheckOnce` strategy
 *
 * The following example sets the `OnPush` change-detection strategy for a component
 * (`CheckOnce`, rather than the default `CheckAlways`), then forces a second check
 * after an interval. See [live demo](http://plnkr.co/edit/GC512b?p=preview).
 *
 * <code-example path="core/ts/change_detect/change-detection.ts"
 * region="mark-for-check"></code-example>
 *
 * ### Detach change detector to limit how often check occurs
 *
 * The following example defines a component with a large list of read-only data
 * that is expected to change constantly, many times per second.
 * To improve performance, we want to check and update the list
 * less often than the changes actually occur. To do that, we detach
 * the component's change detector and perform an explicit local check every five seconds.
 *
 * <code-example path="core/ts/change_detect/change-detection.ts" region="detach"></code-example>
 *
 *
 * ### Reattaching a detached component
 *
 * The following example creates a component displaying live data.
 * The component detaches its change detector from the main change detector tree
 * when the `live` property is set to false, and reattaches it when the property
 * becomes true.
 *
 * <code-example path="core/ts/change_detect/change-detection.ts" region="reattach"></code-example>
 *
 * \@publicApi
 * @abstract
 */
class ChangeDetectorRef {
}
/**
 * \@internal
 * @nocollapse
 */
ChangeDetectorRef.__NG_ELEMENT_ID__ = (/**
 * @return {?}
 */
() => SWITCH_CHANGE_DETECTOR_REF_FACTORY());
if (false) {}
/** @type {?} */
const SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__ = injectChangeDetectorRef;
/** @type {?} */
const SWITCH_CHANGE_DETECTOR_REF_FACTORY__PRE_R3__ = (/**
 * @param {...?} args
 * @return {?}
 */
(...args) => { });
const ɵ0$5 = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;
/** @type {?} */
const SWITCH_CHANGE_DETECTOR_REF_FACTORY = SWITCH_CHANGE_DETECTOR_REF_FACTORY__POST_R3__;

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @description
 *
 * Represents a type that a Component or other object is instances of.
 *
 * An example of a `Type` is `MyCustomComponent` class, which in JavaScript is be represented by
 * the `MyCustomComponent` constructor function.
 *
 * @publicApi
 */
const Type = Function;
function isType(v) {
    return typeof v === 'function';
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Attention: These regex has to hold even if the code is minified!
 */
const DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*arguments\)/;
const INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
const INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
const INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{\s+super\(\.\.\.arguments\)/;
/**
 * Determine whether a stringified type is a class which delegates its constructor
 * to its parent.
 *
 * This is not trivial since compiled code can actually contain a constructor function
 * even if the original source code did not. For instance, when the child class contains
 * an initialized instance property.
 */
function isDelegateCtor(typeStr) {
    return DELEGATE_CTOR.test(typeStr) || INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) ||
        (INHERITED_CLASS.test(typeStr) && !INHERITED_CLASS_WITH_CTOR.test(typeStr));
}
class ReflectionCapabilities {
    constructor(reflect) { this._reflect = reflect || _global['Reflect']; }
    isReflectionEnabled() { return true; }
    factory(t) { return (...args) => new t(...args); }
    /** @internal */
    _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
        let result;
        if (typeof paramTypes === 'undefined') {
            result = newArray(paramAnnotations.length);
        }
        else {
            result = newArray(paramTypes.length);
        }
        for (let i = 0; i < result.length; i++) {
            // TS outputs Object for parameters without types, while Traceur omits
            // the annotations. For now we preserve the Traceur behavior to aid
            // migration, but this can be revisited.
            if (typeof paramTypes === 'undefined') {
                result[i] = [];
            }
            else if (paramTypes[i] && paramTypes[i] != Object) {
                result[i] = [paramTypes[i]];
            }
            else {
                result[i] = [];
            }
            if (paramAnnotations && paramAnnotations[i] != null) {
                result[i] = result[i].concat(paramAnnotations[i]);
            }
        }
        return result;
    }
    _ownParameters(type, parentCtor) {
        const typeStr = type.toString();
        // If we have no decorators, we only have function.length as metadata.
        // In that case, to detect whether a child class declared an own constructor or not,
        // we need to look inside of that constructor to check whether it is
        // just calling the parent.
        // This also helps to work around for https://github.com/Microsoft/TypeScript/issues/12439
        // that sets 'design:paramtypes' to []
        // if a class inherits from another class but has no ctor declared itself.
        if (isDelegateCtor(typeStr)) {
            return null;
        }
        // Prefer the direct API.
        if (type.parameters && type.parameters !== parentCtor.parameters) {
            return type.parameters;
        }
        // API of tsickle for lowering decorators to properties on the class.
        const tsickleCtorParams = type.ctorParameters;
        if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
            // Newer tsickle uses a function closure
            // Retain the non-function case for compatibility with older tsickle
            const ctorParameters = typeof tsickleCtorParams === 'function' ? tsickleCtorParams() : tsickleCtorParams;
            const paramTypes = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);
            const paramAnnotations = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
        // API for metadata created by invoking the decorators.
        const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];
        const paramTypes = this._reflect && this._reflect.getOwnMetadata &&
            this._reflect.getOwnMetadata('design:paramtypes', type);
        if (paramTypes || paramAnnotations) {
            return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
        }
        // If a class has no decorators, at least create metadata
        // based on function.length.
        // Note: We know that this is a real constructor as we checked
        // the content of the constructor above.
        return newArray(type.length);
    }
    parameters(type) {
        // Note: only report metadata if we have at least one class decorator
        // to stay in sync with the static reflector.
        if (!isType(type)) {
            return [];
        }
        const parentCtor = getParentCtor(type);
        let parameters = this._ownParameters(type, parentCtor);
        if (!parameters && parentCtor !== Object) {
            parameters = this.parameters(parentCtor);
        }
        return parameters || [];
    }
    _ownAnnotations(typeOrFunc, parentCtor) {
        // Prefer the direct API.
        if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
            let annotations = typeOrFunc.annotations;
            if (typeof annotations === 'function' && annotations.annotations) {
                annotations = annotations.annotations;
            }
            return annotations;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
            return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
        }
        // API for metadata created by invoking the decorators.
        if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
            return typeOrFunc[ANNOTATIONS];
        }
        return null;
    }
    annotations(typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return [];
        }
        const parentCtor = getParentCtor(typeOrFunc);
        const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
        const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
        return parentAnnotations.concat(ownAnnotations);
    }
    _ownPropMetadata(typeOrFunc, parentCtor) {
        // Prefer the direct API.
        if (typeOrFunc.propMetadata &&
            typeOrFunc.propMetadata !== parentCtor.propMetadata) {
            let propMetadata = typeOrFunc.propMetadata;
            if (typeof propMetadata === 'function' && propMetadata.propMetadata) {
                propMetadata = propMetadata.propMetadata;
            }
            return propMetadata;
        }
        // API of tsickle for lowering decorators to properties on the class.
        if (typeOrFunc.propDecorators &&
            typeOrFunc.propDecorators !== parentCtor.propDecorators) {
            const propDecorators = typeOrFunc.propDecorators;
            const propMetadata = {};
            Object.keys(propDecorators).forEach(prop => {
                propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
            });
            return propMetadata;
        }
        // API for metadata created by invoking the decorators.
        if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
            return typeOrFunc[PROP_METADATA];
        }
        return null;
    }
    propMetadata(typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return {};
        }
        const parentCtor = getParentCtor(typeOrFunc);
        const propMetadata = {};
        if (parentCtor !== Object) {
            const parentPropMetadata = this.propMetadata(parentCtor);
            Object.keys(parentPropMetadata).forEach((propName) => {
                propMetadata[propName] = parentPropMetadata[propName];
            });
        }
        const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
        if (ownPropMetadata) {
            Object.keys(ownPropMetadata).forEach((propName) => {
                const decorators = [];
                if (propMetadata.hasOwnProperty(propName)) {
                    decorators.push(...propMetadata[propName]);
                }
                decorators.push(...ownPropMetadata[propName]);
                propMetadata[propName] = decorators;
            });
        }
        return propMetadata;
    }
    ownPropMetadata(typeOrFunc) {
        if (!isType(typeOrFunc)) {
            return {};
        }
        return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
    }
    hasLifecycleHook(type, lcProperty) {
        return type instanceof Type && lcProperty in type.prototype;
    }
    guards(type) { return {}; }
    getter(name) { return new Function('o', 'return o.' + name + ';'); }
    setter(name) {
        return new Function('o', 'v', 'return o.' + name + ' = v;');
    }
    method(name) {
        const functionBody = `if (!o.${name}) throw new Error('"${name}" is undefined');
        return o.${name}.apply(o, args);`;
        return new Function('o', 'args', functionBody);
    }
    // There is not a concept of import uri in Js, but this is useful in developing Dart applications.
    importUri(type) {
        // StaticSymbol
        if (typeof type === 'object' && type['filePath']) {
            return type['filePath'];
        }
        // Runtime type
        return `./${stringify(type)}`;
    }
    resourceUri(type) { return `./${stringify(type)}`; }
    resolveIdentifier(name, moduleUrl, members, runtime) {
        return runtime;
    }
    resolveEnum(enumIdentifier, name) { return enumIdentifier[name]; }
}
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
    if (!decoratorInvocations) {
        return [];
    }
    return decoratorInvocations.map(decoratorInvocation => {
        const decoratorType = decoratorInvocation.type;
        const annotationCls = decoratorType.annotationCls;
        const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
        return new annotationCls(...annotationArgs);
    });
}
function getParentCtor(ctor) {
    const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
    const parentCtor = parentProto ? parentProto.constructor : null;
    // Note: We always use `Object` as the null value
    // to simplify checking later on.
    return parentCtor || Object;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/jit/util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let _reflect = null;
/**
 * @return {?}
 */
function getReflect() {
    return (_reflect = _reflect || new ReflectionCapabilities());
}
/**
 * @param {?} type
 * @return {?}
 */
function reflectDependencies(type) {
    return convertDependencies(getReflect().parameters(type));
}
/**
 * @param {?} deps
 * @return {?}
 */
function convertDependencies(deps) {
    /** @type {?} */
    const compiler = getCompilerFacade();
    return deps.map((/**
     * @param {?} dep
     * @return {?}
     */
    dep => reflectDependency(compiler, dep)));
}
/**
 * @param {?} compiler
 * @param {?} dep
 * @return {?}
 */
function reflectDependency(compiler, dep) {
    /** @type {?} */
    const meta = {
        token: null,
        host: false,
        optional: false,
        resolved: compiler.R3ResolvedDependencyType.Token,
        self: false,
        skipSelf: false,
    };
    /**
     * @param {?} token
     * @return {?}
     */
    function setTokenAndResolvedType(token) {
        meta.resolved = compiler.R3ResolvedDependencyType.Token;
        meta.token = token;
    }
    if (Array.isArray(dep) && dep.length > 0) {
        for (let j = 0; j < dep.length; j++) {
            /** @type {?} */
            const param = dep[j];
            if (param === undefined) {
                // param may be undefined if type of dep is not set by ngtsc
                continue;
            }
            /** @type {?} */
            const proto = Object.getPrototypeOf(param);
            if (param instanceof Optional || proto.ngMetadataName === 'Optional') {
                meta.optional = true;
            }
            else if (param instanceof SkipSelf || proto.ngMetadataName === 'SkipSelf') {
                meta.skipSelf = true;
            }
            else if (param instanceof Self || proto.ngMetadataName === 'Self') {
                meta.self = true;
            }
            else if (param instanceof Host || proto.ngMetadataName === 'Host') {
                meta.host = true;
            }
            else if (param instanceof Inject) {
                meta.token = param.token;
            }
            else if (param instanceof Attribute) {
                if (param.attributeName === undefined) {
                    throw new Error(`Attribute name must be defined.`);
                }
                meta.token = param.attributeName;
                meta.resolved = compiler.R3ResolvedDependencyType.Attribute;
            }
            else if (param === ChangeDetectorRef) {
                meta.token = param;
                meta.resolved = compiler.R3ResolvedDependencyType.ChangeDetectorRef;
            }
            else {
                setTokenAndResolvedType(param);
            }
        }
    }
    else if (dep === undefined || (Array.isArray(dep) && dep.length === 0)) {
        meta.token = undefined;
        meta.resolved = R3ResolvedDependencyType.Invalid;
    }
    else {
        setTokenAndResolvedType(dep);
    }
    return meta;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/jit/injectable.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Compile an Angular injectable according to its `Injectable` metadata, and patch the resulting
 * injectable def (`ɵprov`) onto the injectable type.
 * @param {?} type
 * @param {?=} srcMeta
 * @return {?}
 */
function compileInjectable(type, srcMeta) {
    /** @type {?} */
    let ngInjectableDef = null;
    /** @type {?} */
    let ngFactoryDef = null;
    // if NG_PROV_DEF is already defined on this class then don't overwrite it
    if (!type.hasOwnProperty(NG_PROV_DEF)) {
        Object.defineProperty(type, NG_PROV_DEF, {
            get: (/**
             * @return {?}
             */
            () => {
                if (ngInjectableDef === null) {
                    ngInjectableDef = getCompilerFacade().compileInjectable(angularCoreDiEnv, `ng:///${type.name}/ɵprov.js`, getInjectableMetadata(type, srcMeta));
                }
                return ngInjectableDef;
            }),
        });
        // On IE10 properties defined via `defineProperty` won't be inherited by child classes,
        // which will break inheriting the injectable definition from a grandparent through an
        // undecorated parent class. We work around it by defining a method which should be used
        // as a fallback. This should only be a problem in JIT mode, because in AOT TypeScript
        // seems to have a workaround for static properties. When inheriting from an undecorated
        // parent is no longer supported in v10, this can safely be removed.
        if (!type.hasOwnProperty(NG_PROV_DEF_FALLBACK)) {
            ((/** @type {?} */ (type)))[NG_PROV_DEF_FALLBACK] = (/**
             * @return {?}
             */
            () => ((/** @type {?} */ (type)))[NG_PROV_DEF]);
        }
    }
    // if NG_FACTORY_DEF is already defined on this class then don't overwrite it
    if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
        Object.defineProperty(type, NG_FACTORY_DEF, {
            get: (/**
             * @return {?}
             */
            () => {
                if (ngFactoryDef === null) {
                    /** @type {?} */
                    const metadata = getInjectableMetadata(type, srcMeta);
                    /** @type {?} */
                    const compiler = getCompilerFacade();
                    ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/ɵfac.js`, {
                        name: metadata.name,
                        type: metadata.type,
                        typeArgumentCount: metadata.typeArgumentCount,
                        deps: reflectDependencies(type),
                        injectFn: 'inject',
                        target: compiler.R3FactoryTarget.Injectable
                    });
                }
                return ngFactoryDef;
            }),
            // Leave this configurable so that the factories from directives or pipes can take precedence.
            configurable: true
        });
    }
}
const ɵ0$6 = getClosureSafeProperty;
/** @type {?} */
const USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: ɵ0$6 });
/**
 * @param {?} meta
 * @return {?}
 */
function isUseClassProvider(meta) {
    return ((/** @type {?} */ (meta))).useClass !== undefined;
}
/**
 * @param {?} meta
 * @return {?}
 */
function isUseValueProvider(meta) {
    return USE_VALUE$1 in meta;
}
/**
 * @param {?} meta
 * @return {?}
 */
function isUseFactoryProvider(meta) {
    return ((/** @type {?} */ (meta))).useFactory !== undefined;
}
/**
 * @param {?} meta
 * @return {?}
 */
function isUseExistingProvider(meta) {
    return ((/** @type {?} */ (meta))).useExisting !== undefined;
}
/**
 * @param {?} type
 * @param {?=} srcMeta
 * @return {?}
 */
function getInjectableMetadata(type, srcMeta) {
    // Allow the compilation of a class with a `@Injectable()` decorator without parameters
    /** @type {?} */
    const meta = srcMeta || { providedIn: null };
    /** @type {?} */
    const compilerMeta = {
        name: type.name,
        type: type,
        typeArgumentCount: 0,
        providedIn: meta.providedIn,
        userDeps: undefined,
    };
    if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== undefined) {
        compilerMeta.userDeps = convertDependencies(meta.deps);
    }
    if (isUseClassProvider(meta)) {
        // The user explicitly specified useClass, and may or may not have provided deps.
        compilerMeta.useClass = resolveForwardRef(meta.useClass);
    }
    else if (isUseValueProvider(meta)) {
        // The user explicitly specified useValue.
        compilerMeta.useValue = resolveForwardRef(meta.useValue);
    }
    else if (isUseFactoryProvider(meta)) {
        // The user explicitly specified useFactory.
        compilerMeta.useFactory = meta.useFactory;
    }
    else if (isUseExistingProvider(meta)) {
        // The user explicitly specified useExisting.
        compilerMeta.useExisting = resolveForwardRef(meta.useExisting);
    }
    return compilerMeta;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$7 = getClosureSafeProperty;
/** @type {?} */
const USE_VALUE$2 = getClosureSafeProperty({ provide: String, useValue: ɵ0$7 });
/** @type {?} */
const EMPTY_ARRAY$1 = [];
/**
 * @param {?} type
 * @param {?=} provider
 * @return {?}
 */
function convertInjectableProviderToFactory(type, provider) {
    if (!provider) {
        /** @type {?} */
        const reflectionCapabilities = new ReflectionCapabilities();
        /** @type {?} */
        const deps = reflectionCapabilities.parameters(type);
        // TODO - convert to flags.
        return (/**
         * @return {?}
         */
        () => new type(...injectArgs((/** @type {?} */ (deps)))));
    }
    if (USE_VALUE$2 in provider) {
        /** @type {?} */
        const valueProvider = ((/** @type {?} */ (provider)));
        return (/**
         * @return {?}
         */
        () => valueProvider.useValue);
    }
    else if (((/** @type {?} */ (provider))).useExisting) {
        /** @type {?} */
        const existingProvider = ((/** @type {?} */ (provider)));
        return (/**
         * @return {?}
         */
        () => ɵɵinject(resolveForwardRef(existingProvider.useExisting)));
    }
    else if (((/** @type {?} */ (provider))).useFactory) {
        /** @type {?} */
        const factoryProvider = ((/** @type {?} */ (provider)));
        return (/**
         * @return {?}
         */
        () => factoryProvider.useFactory(...injectArgs(factoryProvider.deps || EMPTY_ARRAY$1)));
    }
    else if (((/** @type {?} */ (provider))).useClass) {
        /** @type {?} */
        const classProvider = ((/** @type {?} */ (provider)));
        /** @type {?} */
        let deps = ((/** @type {?} */ (provider))).deps;
        if (!deps) {
            /** @type {?} */
            const reflectionCapabilities = new ReflectionCapabilities();
            deps = reflectionCapabilities.parameters(type);
        }
        return (/**
         * @return {?}
         */
        () => new (resolveForwardRef(classProvider.useClass))(...injectArgs(deps)));
    }
    else {
        /** @type {?} */
        let deps = ((/** @type {?} */ (provider))).deps;
        if (!deps) {
            /** @type {?} */
            const reflectionCapabilities = new ReflectionCapabilities();
            deps = reflectionCapabilities.parameters(type);
        }
        return (/**
         * @return {?}
         */
        () => new type(...injectArgs((/** @type {?} */ (deps)))));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/injectable.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Type of the Injectable decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function InjectableDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ0$8 = /**
 * @param {?} type
 * @param {?} meta
 * @return {?}
 */
(type, meta) => SWITCH_COMPILE_INJECTABLE((/** @type {?} */ (type)), meta);
/**
 * Injectable decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Injectable = makeDecorator('Injectable', undefined, undefined, undefined, (ɵ0$8));
/**
 * Supports \@Injectable() in JIT mode for Render2.
 * @param {?} injectableType
 * @param {?=} options
 * @return {?}
 */
function render2CompileInjectable(injectableType, options) {
    if (options && options.providedIn !== undefined && !getInjectableDef(injectableType)) {
        ((/** @type {?} */ (injectableType))).ɵprov = ɵɵdefineInjectable({
            token: injectableType,
            providedIn: options.providedIn,
            factory: convertInjectableProviderToFactory(injectableType, options),
        });
    }
}
/** @type {?} */
const SWITCH_COMPILE_INJECTABLE__POST_R3__ = compileInjectable;
/** @type {?} */
const SWITCH_COMPILE_INJECTABLE__PRE_R3__ = render2CompileInjectable;
/** @type {?} */
const SWITCH_COMPILE_INJECTABLE = SWITCH_COMPILE_INJECTABLE__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/scope.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An internal token whose presence in an injector indicates that the injector should treat itself
 * as a root scoped injector when processing requests for unknown tokens which may indicate
 * they are provided in the root scope.
 * @type {?}
 */
const INJECTOR_SCOPE = new InjectionToken('Set Injector scope.');

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/r3_injector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Marker which indicates that a value has not yet been created from the factory function.
 * @type {?}
 */
const NOT_YET = {};
/**
 * Marker which indicates that the factory function for a token is in the process of being called.
 *
 * If the injector is asked to inject a token with its value set to CIRCULAR, that indicates
 * injection of a dependency has recursively attempted to inject the original token, and there is
 * a circular dependency among the providers.
 * @type {?}
 */
const CIRCULAR = {};
/** @type {?} */
const EMPTY_ARRAY$2 = (/** @type {?} */ ([]));
/**
 * A lazily initialized NullInjector.
 * @type {?}
 */
let NULL_INJECTOR = undefined;
/**
 * @return {?}
 */
function getNullInjector() {
    if (NULL_INJECTOR === undefined) {
        NULL_INJECTOR = new NullInjector();
    }
    return NULL_INJECTOR;
}
/**
 * An entry in the injector which tracks information about the given token, including a possible
 * current value.
 * @record
 * @template T
 */
function Record() { }
if (false) {}
/**
 * Create a new `Injector` which is configured using a `defType` of `InjectorType<any>`s.
 *
 * \@publicApi
 * @param {?} defType
 * @param {?=} parent
 * @param {?=} additionalProviders
 * @param {?=} name
 * @return {?}
 */
function createInjector(defType, parent = null, additionalProviders = null, name) {
    /** @type {?} */
    const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);
    injector._resolveInjectorDefTypes();
    return injector;
}
/**
 * Creates a new injector without eagerly resolving its injector types. Can be used in places
 * where resolving the injector types immediately can lead to an infinite loop. The injector types
 * should be resolved at a later point by calling `_resolveInjectorDefTypes`.
 * @param {?} defType
 * @param {?=} parent
 * @param {?=} additionalProviders
 * @param {?=} name
 * @return {?}
 */
function createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name) {
    return new R3Injector(defType, additionalProviders, parent || getNullInjector(), name);
}
class R3Injector {
    /**
     * @param {?} def
     * @param {?} additionalProviders
     * @param {?} parent
     * @param {?=} source
     */
    constructor(def, additionalProviders, parent, source = null) {
        this.parent = parent;
        /**
         * Map of tokens to records which contain the instances of those tokens.
         * - `null` value implies that we don't have the record. Used by tree-shakable injectors
         * to prevent further searches.
         */
        this.records = new Map();
        /**
         * The transitive set of `InjectorType`s which define this injector.
         */
        this.injectorDefTypes = new Set();
        /**
         * Set of values instantiated by this injector which contain `ngOnDestroy` lifecycle hooks.
         */
        this.onDestroy = new Set();
        this._destroyed = false;
        /** @type {?} */
        const dedupStack = [];
        // Start off by creating Records for every provider declared in every InjectorType
        // included transitively in additional providers then do the same for `def`. This order is
        // important because `def` may include providers that override ones in additionalProviders.
        additionalProviders && deepForEach(additionalProviders, (/**
         * @param {?} provider
         * @return {?}
         */
        provider => this.processProvider(provider, def, additionalProviders)));
        deepForEach([def], (/**
         * @param {?} injectorDef
         * @return {?}
         */
        injectorDef => this.processInjectorType(injectorDef, [], dedupStack)));
        // Make sure the INJECTOR token provides this injector.
        this.records.set(INJECTOR, makeRecord(undefined, this));
        // Detect whether this injector has the APP_ROOT_SCOPE token and thus should provide
        // any injectable scoped to APP_ROOT_SCOPE.
        /** @type {?} */
        const record = this.records.get(INJECTOR_SCOPE);
        this.scope = record != null ? record.value : null;
        // Source name, used for debugging
        this.source = source || (typeof def === 'object' ? null : stringify(def));
    }
    /**
     * Flag indicating that this injector was previously destroyed.
     * @return {?}
     */
    get destroyed() { return this._destroyed; }
    /**
     * Destroy the injector and release references to every instance or provider associated with it.
     *
     * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
     * hook was found.
     * @return {?}
     */
    destroy() {
        this.assertNotDestroyed();
        // Set destroyed = true first, in case lifecycle hooks re-enter destroy().
        this._destroyed = true;
        try {
            // Call all the lifecycle hooks.
            this.onDestroy.forEach((/**
             * @param {?} service
             * @return {?}
             */
            service => service.ngOnDestroy()));
        }
        finally {
            // Release all references.
            this.records.clear();
            this.onDestroy.clear();
            this.injectorDefTypes.clear();
        }
    }
    /**
     * @template T
     * @param {?} token
     * @param {?=} notFoundValue
     * @param {?=} flags
     * @return {?}
     */
    get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {
        this.assertNotDestroyed();
        // Set the injection context.
        /** @type {?} */
        const previousInjector = setCurrentInjector(this);
        try {
            // Check for the SkipSelf flag.
            if (!(flags & InjectFlags.SkipSelf)) {
                // SkipSelf isn't set, check if the record belongs to this injector.
                /** @type {?} */
                let record = this.records.get(token);
                if (record === undefined) {
                    // No record, but maybe the token is scoped to this injector. Look for an injectable
                    // def with a scope matching this injector.
                    /** @type {?} */
                    const def = couldBeInjectableType(token) && getInjectableDef(token);
                    if (def && this.injectableDefInScope(def)) {
                        // Found an injectable def and it's scoped to this injector. Pretend as if it was here
                        // all along.
                        record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
                    }
                    else {
                        record = null;
                    }
                    this.records.set(token, record);
                }
                // If a record was found, get the instance for it and return it.
                if (record != null /* NOT null || undefined */) {
                    return this.hydrate(token, record);
                }
            }
            // Select the next injector based on the Self flag - if self is set, the next injector is
            // the NullInjector, otherwise it's the parent.
            /** @type {?} */
            const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();
            // Set the notFoundValue based on the Optional flag - if optional is set and notFoundValue
            // is undefined, the value is null, otherwise it's the notFoundValue.
            notFoundValue = (flags & InjectFlags.Optional) && notFoundValue === THROW_IF_NOT_FOUND ?
                null :
                notFoundValue;
            return nextInjector.get(token, notFoundValue);
        }
        catch (e) {
            if (e.name === 'NullInjectorError') {
                /** @type {?} */
                const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
                path.unshift(stringify(token));
                if (previousInjector) {
                    // We still have a parent injector, keep throwing
                    throw e;
                }
                else {
                    // Format & throw the final error message when we don't have any previous injector
                    return catchInjectorError(e, token, 'R3InjectorError', this.source);
                }
            }
            else {
                throw e;
            }
        }
        finally {
            // Lastly, clean up the state by restoring the previous injector.
            setCurrentInjector(previousInjector);
        }
    }
    /**
     * \@internal
     * @return {?}
     */
    _resolveInjectorDefTypes() { this.injectorDefTypes.forEach((/**
     * @param {?} defType
     * @return {?}
     */
    defType => this.get(defType))); }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        const tokens = (/** @type {?} */ ([]));
        /** @type {?} */
        const records = this.records;
        records.forEach((/**
         * @param {?} v
         * @param {?} token
         * @return {?}
         */
        (v, token) => tokens.push(stringify(token))));
        return `R3Injector[${tokens.join(', ')}]`;
    }
    /**
     * @private
     * @return {?}
     */
    assertNotDestroyed() {
        if (this._destroyed) {
            throw new Error('Injector has already been destroyed.');
        }
    }
    /**
     * Add an `InjectorType` or `InjectorTypeWithProviders` and all of its transitive providers
     * to this injector.
     *
     * If an `InjectorTypeWithProviders` that declares providers besides the type is specified,
     * the function will return "true" to indicate that the providers of the type definition need
     * to be processed. This allows us to process providers of injector types after all imports of
     * an injector definition are processed. (following View Engine semantics: see FW-1349)
     * @private
     * @param {?} defOrWrappedDef
     * @param {?} parents
     * @param {?} dedupStack
     * @return {?}
     */
    processInjectorType(defOrWrappedDef, parents, dedupStack) {
        defOrWrappedDef = resolveForwardRef(defOrWrappedDef);
        if (!defOrWrappedDef)
            return false;
        // Either the defOrWrappedDef is an InjectorType (with injector def) or an
        // InjectorDefTypeWithProviders (aka ModuleWithProviders). Detecting either is a megamorphic
        // read, so care is taken to only do the read once.
        // First attempt to read the injector def (`ɵinj`).
        /** @type {?} */
        let def = getInjectorDef(defOrWrappedDef);
        // If that's not present, then attempt to read ngModule from the InjectorDefTypeWithProviders.
        /** @type {?} */
        const ngModule = (def == null) && ((/** @type {?} */ (defOrWrappedDef))).ngModule || undefined;
        // Determine the InjectorType. In the case where `defOrWrappedDef` is an `InjectorType`,
        // then this is easy. In the case of an InjectorDefTypeWithProviders, then the definition type
        // is the `ngModule`.
        /** @type {?} */
        const defType = (ngModule === undefined) ? ((/** @type {?} */ (defOrWrappedDef))) : ngModule;
        // Check for circular dependencies.
        if (ngDevMode && parents.indexOf(defType) !== -1) {
            /** @type {?} */
            const defName = stringify(defType);
            throw new Error(`Circular dependency in DI detected for type ${defName}. Dependency path: ${parents.map((/**
             * @param {?} defType
             * @return {?}
             */
            defType => stringify(defType))).join(' > ')} > ${defName}.`);
        }
        // Check for multiple imports of the same module
        /** @type {?} */
        const isDuplicate = dedupStack.indexOf(defType) !== -1;
        // Finally, if defOrWrappedType was an `InjectorDefTypeWithProviders`, then the actual
        // `InjectorDef` is on its `ngModule`.
        if (ngModule !== undefined) {
            def = getInjectorDef(ngModule);
        }
        // If no definition was found, it might be from exports. Remove it.
        if (def == null) {
            return false;
        }
        // Add providers in the same way that @NgModule resolution did:
        // First, include providers from any imports.
        if (def.imports != null && !isDuplicate) {
            // Before processing defType's imports, add it to the set of parents. This way, if it ends
            // up deeply importing itself, this can be detected.
            ngDevMode && parents.push(defType);
            // Add it to the set of dedups. This way we can detect multiple imports of the same module
            dedupStack.push(defType);
            /** @type {?} */
            let importTypesWithProviders;
            try {
                deepForEach(def.imports, (/**
                 * @param {?} imported
                 * @return {?}
                 */
                imported => {
                    if (this.processInjectorType(imported, parents, dedupStack)) {
                        if (importTypesWithProviders === undefined)
                            importTypesWithProviders = [];
                        // If the processed import is an injector type with providers, we store it in the
                        // list of import types with providers, so that we can process those afterwards.
                        importTypesWithProviders.push(imported);
                    }
                }));
            }
            finally {
                // Remove it from the parents set when finished.
                ngDevMode && parents.pop();
            }
            // Imports which are declared with providers (TypeWithProviders) need to be processed
            // after all imported modules are processed. This is similar to how View Engine
            // processes/merges module imports in the metadata resolver. See: FW-1349.
            if (importTypesWithProviders !== undefined) {
                for (let i = 0; i < importTypesWithProviders.length; i++) {
                    const { ngModule, providers } = importTypesWithProviders[i];
                    deepForEach((/** @type {?} */ (providers)), (/**
                     * @param {?} provider
                     * @return {?}
                     */
                    provider => this.processProvider(provider, ngModule, providers || EMPTY_ARRAY$2)));
                }
            }
        }
        // Track the InjectorType and add a provider for it. It's important that this is done after the
        // def's imports.
        this.injectorDefTypes.add(defType);
        this.records.set(defType, makeRecord(def.factory, NOT_YET));
        // Next, include providers listed on the definition itself.
        /** @type {?} */
        const defProviders = def.providers;
        if (defProviders != null && !isDuplicate) {
            /** @type {?} */
            const injectorType = (/** @type {?} */ (defOrWrappedDef));
            deepForEach(defProviders, (/**
             * @param {?} provider
             * @return {?}
             */
            provider => this.processProvider(provider, injectorType, defProviders)));
        }
        return (ngModule !== undefined &&
            ((/** @type {?} */ (defOrWrappedDef))).providers !== undefined);
    }
    /**
     * Process a `SingleProvider` and add it.
     * @private
     * @param {?} provider
     * @param {?} ngModuleType
     * @param {?} providers
     * @return {?}
     */
    processProvider(provider, ngModuleType, providers) {
        // Determine the token from the provider. Either it's its own token, or has a {provide: ...}
        // property.
        provider = resolveForwardRef(provider);
        /** @type {?} */
        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);
        // Construct a `Record` for the provider.
        /** @type {?} */
        const record = providerToRecord(provider, ngModuleType, providers);
        if (!isTypeProvider(provider) && provider.multi === true) {
            // If the provider indicates that it's a multi-provider, process it specially.
            // First check whether it's been defined already.
            /** @type {?} */
            let multiRecord = this.records.get(token);
            if (multiRecord) {
                // It has. Throw a nice error if
                if (multiRecord.multi === undefined) {
                    throwMixedMultiProviderError();
                }
            }
            else {
                multiRecord = makeRecord(undefined, NOT_YET, true);
                multiRecord.factory = (/**
                 * @return {?}
                 */
                () => injectArgs((/** @type {?} */ ((/** @type {?} */ (multiRecord)).multi))));
                this.records.set(token, multiRecord);
            }
            token = provider;
            (/** @type {?} */ (multiRecord.multi)).push(provider);
        }
        else {
            /** @type {?} */
            const existing = this.records.get(token);
            if (existing && existing.multi !== undefined) {
                throwMixedMultiProviderError();
            }
        }
        this.records.set(token, record);
    }
    /**
     * @private
     * @template T
     * @param {?} token
     * @param {?} record
     * @return {?}
     */
    hydrate(token, record) {
        if (record.value === CIRCULAR) {
            throwCyclicDependencyError(stringify(token));
        }
        else if (record.value === NOT_YET) {
            record.value = CIRCULAR;
            record.value = (/** @type {?} */ (record.factory))();
        }
        if (typeof record.value === 'object' && record.value && hasOnDestroy(record.value)) {
            this.onDestroy.add(record.value);
        }
        return (/** @type {?} */ (record.value));
    }
    /**
     * @private
     * @param {?} def
     * @return {?}
     */
    injectableDefInScope(def) {
        if (!def.providedIn) {
            return false;
        }
        else if (typeof def.providedIn === 'string') {
            return def.providedIn === 'any' || (def.providedIn === this.scope);
        }
        else {
            return this.injectorDefTypes.has(def.providedIn);
        }
    }
}
if (false) {}
/**
 * @param {?} token
 * @return {?}
 */
function injectableDefOrInjectorDefFactory(token) {
    // Most tokens will have an injectable def directly on them, which specifies a factory directly.
    /** @type {?} */
    const injectableDef = getInjectableDef(token);
    /** @type {?} */
    const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);
    if (factory !== null) {
        return factory;
    }
    // If the token is an NgModule, it's also injectable but the factory is on its injector def
    // (`ɵinj`)
    /** @type {?} */
    const injectorDef = getInjectorDef(token);
    if (injectorDef !== null) {
        return injectorDef.factory;
    }
    // InjectionTokens should have an injectable def (ɵprov) and thus should be handled above.
    // If it's missing that, it's an error.
    if (token instanceof InjectionToken) {
        throw new Error(`Token ${stringify(token)} is missing a ɵprov definition.`);
    }
    // Undecorated types can sometimes be created if they have no constructor arguments.
    if (token instanceof Function) {
        return getUndecoratedInjectableFactory(token);
    }
    // There was no way to resolve a factory for this token.
    throw new Error('unreachable');
}
/**
 * @param {?} token
 * @return {?}
 */
function getUndecoratedInjectableFactory(token) {
    // If the token has parameters then it has dependencies that we cannot resolve implicitly.
    /** @type {?} */
    const paramLength = token.length;
    if (paramLength > 0) {
        /** @type {?} */
        const args = newArray(paramLength, '?');
        throw new Error(`Can't resolve all parameters for ${stringify(token)}: (${args.join(', ')}).`);
    }
    // The constructor function appears to have no parameters.
    // This might be because it inherits from a super-class. In which case, use an injectable
    // def from an ancestor if there is one.
    // Otherwise this really is a simple class with no dependencies, so return a factory that
    // just instantiates the zero-arg constructor.
    /** @type {?} */
    const inheritedInjectableDef = getInheritedInjectableDef(token);
    if (inheritedInjectableDef !== null) {
        return (/**
         * @return {?}
         */
        () => inheritedInjectableDef.factory((/** @type {?} */ (token))));
    }
    else {
        return (/**
         * @return {?}
         */
        () => new ((/** @type {?} */ (token)))());
    }
}
/**
 * @param {?} provider
 * @param {?} ngModuleType
 * @param {?} providers
 * @return {?}
 */
function providerToRecord(provider, ngModuleType, providers) {
    if (isValueProvider(provider)) {
        return makeRecord(undefined, provider.useValue);
    }
    else {
        /** @type {?} */
        const factory = providerToFactory(provider, ngModuleType, providers);
        return makeRecord(factory, NOT_YET);
    }
}
/**
 * Converts a `SingleProvider` into a factory function.
 *
 * @param {?} provider provider to convert to factory
 * @param {?=} ngModuleType
 * @param {?=} providers
 * @return {?}
 */
function providerToFactory(provider, ngModuleType, providers) {
    /** @type {?} */
    let factory = undefined;
    if (isTypeProvider(provider)) {
        /** @type {?} */
        const unwrappedProvider = resolveForwardRef(provider);
        return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
    }
    else {
        if (isValueProvider(provider)) {
            factory = (/**
             * @return {?}
             */
            () => resolveForwardRef(provider.useValue));
        }
        else if (isFactoryProvider(provider)) {
            factory = (/**
             * @return {?}
             */
            () => provider.useFactory(...injectArgs(provider.deps || [])));
        }
        else if (isExistingProvider(provider)) {
            factory = (/**
             * @return {?}
             */
            () => ɵɵinject(resolveForwardRef(provider.useExisting)));
        }
        else {
            /** @type {?} */
            const classRef = resolveForwardRef(provider &&
                (((/** @type {?} */ (provider))).useClass || provider.provide));
            if (!classRef) {
                throwInvalidProviderError(ngModuleType, providers, provider);
            }
            if (hasDeps(provider)) {
                factory = (/**
                 * @return {?}
                 */
                () => new (classRef)(...injectArgs(provider.deps)));
            }
            else {
                return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
            }
        }
    }
    return factory;
}
/**
 * @template T
 * @param {?} factory
 * @param {?} value
 * @param {?=} multi
 * @return {?}
 */
function makeRecord(factory, value, multi = false) {
    return {
        factory: factory,
        value: value,
        multi: multi ? [] : undefined,
    };
}
/**
 * @param {?} value
 * @return {?}
 */
function isValueProvider(value) {
    return value !== null && typeof value == 'object' && USE_VALUE in value;
}
/**
 * @param {?} value
 * @return {?}
 */
function isExistingProvider(value) {
    return !!(value && ((/** @type {?} */ (value))).useExisting);
}
/**
 * @param {?} value
 * @return {?}
 */
function isFactoryProvider(value) {
    return !!(value && ((/** @type {?} */ (value))).useFactory);
}
/**
 * @param {?} value
 * @return {?}
 */
function isTypeProvider(value) {
    return typeof value === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
function isClassProvider(value) {
    return !!((/** @type {?} */ (value))).useClass;
}
/**
 * @param {?} value
 * @return {?}
 */
function hasDeps(value) {
    return !!((/** @type {?} */ (value))).deps;
}
/**
 * @param {?} value
 * @return {?}
 */
function hasOnDestroy(value) {
    return value !== null && typeof value === 'object' &&
        typeof ((/** @type {?} */ (value))).ngOnDestroy === 'function';
}
/**
 * @param {?} value
 * @return {?}
 */
function couldBeInjectableType(value) {
    return (typeof value === 'function') ||
        (typeof value === 'object' && value instanceof InjectionToken);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/injector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} providers
 * @param {?} parent
 * @param {?} name
 * @return {?}
 */
function INJECTOR_IMPL__PRE_R3__(providers, parent, name) {
    return new StaticInjector(providers, parent, name);
}
/**
 * @param {?} providers
 * @param {?} parent
 * @param {?} name
 * @return {?}
 */
function INJECTOR_IMPL__POST_R3__(providers, parent, name) {
    return createInjector({ name: name }, parent, providers, name);
}
/** @type {?} */
const INJECTOR_IMPL = INJECTOR_IMPL__POST_R3__;
/**
 * Concrete injectors implement this interface. Injectors are configured
 * with [providers](guide/glossary#provider) that associate
 * dependencies of various types with [injection tokens](guide/glossary#di-token).
 *
 * @see ["DI Providers"](guide/dependency-injection-providers).
 * @see `StaticProvider`
 *
 * \@usageNotes
 *
 *  The following example creates a service injector instance.
 *
 * {\@example core/di/ts/provider_spec.ts region='ConstructorProvider'}
 *
 * ### Usage example
 *
 * {\@example core/di/ts/injector_spec.ts region='Injector'}
 *
 * `Injector` returns itself when given `Injector` as a token:
 *
 * {\@example core/di/ts/injector_spec.ts region='injectInjector'}
 *
 * \@publicApi
 * @abstract
 */
class Injector {
    /**
     * @param {?} options
     * @param {?=} parent
     * @return {?}
     */
    static create(options, parent) {
        if (Array.isArray(options)) {
            return INJECTOR_IMPL(options, parent, '');
        }
        else {
            return INJECTOR_IMPL(options.providers, options.parent, options.name || '');
        }
    }
}
Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
Injector.NULL = new NullInjector();
/** @nocollapse */
/** @nocollapse */ Injector.ɵprov = ɵɵdefineInjectable({
    token: Injector,
    providedIn: (/** @type {?} */ ('any')),
    factory: (/**
     * @return {?}
     */
    () => ɵɵinject(INJECTOR)),
});
/**
 * \@internal
 * @nocollapse
 */
Injector.__NG_ELEMENT_ID__ = -1;
if (false) {}
/** @type {?} */
const IDENT = (/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function (value) {
    return value;
});
const ɵ0$9 = IDENT;
/** @type {?} */
const EMPTY = (/** @type {?} */ ([]));
/** @type {?} */
const CIRCULAR$1 = IDENT;
/** @type {?} */
const MULTI_PROVIDER_FN = (/**
 * @return {?}
 */
function () {
    return Array.prototype.slice.call(arguments);
});
const ɵ1$1 = MULTI_PROVIDER_FN;
/** @enum {number} */
const OptionFlags = {
    Optional: 1,
    CheckSelf: 2,
    CheckParent: 4,
    Default: 6,
};
/** @type {?} */
const NO_NEW_LINE$1 = 'ɵ';
class StaticInjector {
    /**
     * @param {?} providers
     * @param {?=} parent
     * @param {?=} source
     */
    constructor(providers, parent = Injector.NULL, source = null) {
        this.parent = parent;
        this.source = source;
        /** @type {?} */
        const records = this._records = new Map();
        records.set(Injector, (/** @type {?} */ ({ token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false })));
        records.set(INJECTOR, (/** @type {?} */ ({ token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false })));
        this.scope = recursivelyProcessProviders(records, providers);
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @param {?=} flags
     * @return {?}
     */
    get(token, notFoundValue, flags = InjectFlags.Default) {
        /** @type {?} */
        const records = this._records;
        /** @type {?} */
        let record = records.get(token);
        if (record === undefined) {
            // This means we have never seen this record, see if it is tree shakable provider.
            /** @type {?} */
            const injectableDef = getInjectableDef(token);
            if (injectableDef) {
                /** @type {?} */
                const providedIn = injectableDef && injectableDef.providedIn;
                if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {
                    records.set(token, record = resolveProvider({ provide: token, useFactory: injectableDef.factory, deps: EMPTY }));
                }
            }
            if (record === undefined) {
                // Set record to null to make sure that we don't go through expensive lookup above again.
                records.set(token, null);
            }
        }
        /** @type {?} */
        let lastInjector = setCurrentInjector(this);
        try {
            return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);
        }
        catch (e) {
            return catchInjectorError(e, token, 'StaticInjectorError', this.source);
        }
        finally {
            setCurrentInjector(lastInjector);
        }
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        const tokens = (/** @type {?} */ ([]));
        /** @type {?} */
        const records = this._records;
        records.forEach((/**
         * @param {?} v
         * @param {?} token
         * @return {?}
         */
        (v, token) => tokens.push(stringify(token))));
        return `StaticInjector[${tokens.join(', ')}]`;
    }
}
if (false) {}
/**
 * @record
 */
function Record$1() { }
if (false) {}
/**
 * @record
 */
function DependencyRecord() { }
if (false) {}
/**
 * @param {?} provider
 * @return {?}
 */
function resolveProvider(provider) {
    /** @type {?} */
    const deps = computeDeps(provider);
    /** @type {?} */
    let fn = IDENT;
    /** @type {?} */
    let value = EMPTY;
    /** @type {?} */
    let useNew = false;
    /** @type {?} */
    let provide = resolveForwardRef(provider.provide);
    if (USE_VALUE in provider) {
        // We need to use USE_VALUE in provider since provider.useValue could be defined as undefined.
        value = ((/** @type {?} */ (provider))).useValue;
    }
    else if (((/** @type {?} */ (provider))).useFactory) {
        fn = ((/** @type {?} */ (provider))).useFactory;
    }
    else if (((/** @type {?} */ (provider))).useExisting) {
        // Just use IDENT
    }
    else if (((/** @type {?} */ (provider))).useClass) {
        useNew = true;
        fn = resolveForwardRef(((/** @type {?} */ (provider))).useClass);
    }
    else if (typeof provide == 'function') {
        useNew = true;
        fn = provide;
    }
    else {
        throw staticError('StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable', provider);
    }
    return { deps, fn, useNew, value };
}
/**
 * @param {?} token
 * @return {?}
 */
function multiProviderMixError(token) {
    return staticError('Cannot mix multi providers and regular providers', token);
}
/**
 * @param {?} records
 * @param {?} provider
 * @return {?}
 */
function recursivelyProcessProviders(records, provider) {
    /** @type {?} */
    let scope = null;
    if (provider) {
        provider = resolveForwardRef(provider);
        if (Array.isArray(provider)) {
            // if we have an array recurse into the array
            for (let i = 0; i < provider.length; i++) {
                scope = recursivelyProcessProviders(records, provider[i]) || scope;
            }
        }
        else if (typeof provider === 'function') {
            // Functions were supported in ReflectiveInjector, but are not here. For safety give useful
            // error messages
            throw staticError('Function/Class not supported', provider);
        }
        else if (provider && typeof provider === 'object' && provider.provide) {
            // At this point we have what looks like a provider: {provide: ?, ....}
            /** @type {?} */
            let token = resolveForwardRef(provider.provide);
            /** @type {?} */
            const resolvedProvider = resolveProvider(provider);
            if (provider.multi === true) {
                // This is a multi provider.
                /** @type {?} */
                let multiProvider = records.get(token);
                if (multiProvider) {
                    if (multiProvider.fn !== MULTI_PROVIDER_FN) {
                        throw multiProviderMixError(token);
                    }
                }
                else {
                    // Create a placeholder factory which will look up the constituents of the multi provider.
                    records.set(token, multiProvider = (/** @type {?} */ ({
                        token: provider.provide,
                        deps: [],
                        useNew: false,
                        fn: MULTI_PROVIDER_FN,
                        value: EMPTY
                    })));
                }
                // Treat the provider as the token.
                token = provider;
                multiProvider.deps.push({ token, options: 6 /* Default */ });
            }
            /** @type {?} */
            const record = records.get(token);
            if (record && record.fn == MULTI_PROVIDER_FN) {
                throw multiProviderMixError(token);
            }
            if (token === INJECTOR_SCOPE) {
                scope = resolvedProvider.value;
            }
            records.set(token, resolvedProvider);
        }
        else {
            throw staticError('Unexpected provider', provider);
        }
    }
    return scope;
}
/**
 * @param {?} token
 * @param {?} record
 * @param {?} records
 * @param {?} parent
 * @param {?} notFoundValue
 * @param {?} flags
 * @return {?}
 */
function tryResolveToken(token, record, records, parent, notFoundValue, flags) {
    try {
        return resolveToken(token, record, records, parent, notFoundValue, flags);
    }
    catch (e) {
        // ensure that 'e' is of type Error.
        if (!(e instanceof Error)) {
            e = new Error(e);
        }
        /** @type {?} */
        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
        path.unshift(token);
        if (record && record.value == CIRCULAR$1) {
            // Reset the Circular flag.
            record.value = EMPTY;
        }
        throw e;
    }
}
/**
 * @param {?} token
 * @param {?} record
 * @param {?} records
 * @param {?} parent
 * @param {?} notFoundValue
 * @param {?} flags
 * @return {?}
 */
function resolveToken(token, record, records, parent, notFoundValue, flags) {
    /** @type {?} */
    let value;
    if (record && !(flags & InjectFlags.SkipSelf)) {
        // If we don't have a record, this implies that we don't own the provider hence don't know how
        // to resolve it.
        value = record.value;
        if (value == CIRCULAR$1) {
            throw Error(NO_NEW_LINE$1 + 'Circular dependency');
        }
        else if (value === EMPTY) {
            record.value = CIRCULAR$1;
            /** @type {?} */
            let obj = undefined;
            /** @type {?} */
            let useNew = record.useNew;
            /** @type {?} */
            let fn = record.fn;
            /** @type {?} */
            let depRecords = record.deps;
            /** @type {?} */
            let deps = EMPTY;
            if (depRecords.length) {
                deps = [];
                for (let i = 0; i < depRecords.length; i++) {
                    /** @type {?} */
                    const depRecord = depRecords[i];
                    /** @type {?} */
                    const options = depRecord.options;
                    /** @type {?} */
                    const childRecord = options & 2 /* CheckSelf */ ? records.get(depRecord.token) : undefined;
                    deps.push(tryResolveToken(
                    // Current Token to resolve
                    depRecord.token, 
                    // A record which describes how to resolve the token.
                    // If undefined, this means we don't have such a record
                    childRecord, 
                    // Other records we know about.
                    records, 
                    // If we don't know how to resolve dependency and we should not check parent for it,
                    // than pass in Null injector.
                    !childRecord && !(options & 4 /* CheckParent */) ? Injector.NULL : parent, options & 1 /* Optional */ ? null : Injector.THROW_IF_NOT_FOUND, InjectFlags.Default));
                }
            }
            record.value = value = useNew ? new ((/** @type {?} */ (fn)))(...deps) : fn.apply(obj, deps);
        }
    }
    else if (!(flags & InjectFlags.Self)) {
        value = parent.get(token, notFoundValue, InjectFlags.Default);
    }
    else if (!(flags & InjectFlags.Optional)) {
        value = Injector.NULL.get(token, notFoundValue);
    }
    else {
        value = Injector.NULL.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);
    }
    return value;
}
/**
 * @param {?} provider
 * @return {?}
 */
function computeDeps(provider) {
    /** @type {?} */
    let deps = EMPTY;
    /** @type {?} */
    const providerDeps = ((/** @type {?} */ (provider))).deps;
    if (providerDeps && providerDeps.length) {
        deps = [];
        for (let i = 0; i < providerDeps.length; i++) {
            /** @type {?} */
            let options = 6 /* Default */;
            /** @type {?} */
            let token = resolveForwardRef(providerDeps[i]);
            if (Array.isArray(token)) {
                for (let j = 0, annotations = token; j < annotations.length; j++) {
                    /** @type {?} */
                    const annotation = annotations[j];
                    if (annotation instanceof Optional || annotation == Optional) {
                        options = options | 1 /* Optional */;
                    }
                    else if (annotation instanceof SkipSelf || annotation == SkipSelf) {
                        options = options & ~2 /* CheckSelf */;
                    }
                    else if (annotation instanceof Self || annotation == Self) {
                        options = options & ~4 /* CheckParent */;
                    }
                    else if (annotation instanceof Inject) {
                        token = ((/** @type {?} */ (annotation))).token;
                    }
                    else {
                        token = resolveForwardRef(annotation);
                    }
                }
            }
            deps.push({ token, options });
        }
    }
    else if (((/** @type {?} */ (provider))).useExisting) {
        /** @type {?} */
        const token = resolveForwardRef(((/** @type {?} */ (provider))).useExisting);
        deps = [{ token, options: 6 /* Default */ }];
    }
    else if (!providerDeps && !(USE_VALUE in provider)) {
        // useValue & useExisting are the only ones which are exempt from deps all others need it.
        throw staticError('\'deps\' required', provider);
    }
    return deps;
}
/**
 * @param {?} text
 * @param {?} obj
 * @return {?}
 */
function staticError(text, obj) {
    return new Error(formatError(text, obj, 'StaticInjectorError'));
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/reflective_errors.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} keys
 * @return {?}
 */
function findFirstClosedCycle(keys) {
    /** @type {?} */
    const res = [];
    for (let i = 0; i < keys.length; ++i) {
        if (res.indexOf(keys[i]) > -1) {
            res.push(keys[i]);
            return res;
        }
        res.push(keys[i]);
    }
    return res;
}
/**
 * @param {?} keys
 * @return {?}
 */
function constructResolvingPath(keys) {
    if (keys.length > 1) {
        /** @type {?} */
        const reversed = findFirstClosedCycle(keys.slice().reverse());
        /** @type {?} */
        const tokenStrs = reversed.map((/**
         * @param {?} k
         * @return {?}
         */
        k => stringify(k.token)));
        return ' (' + tokenStrs.join(' -> ') + ')';
    }
    return '';
}
/**
 * @record
 */
function InjectionError() { }
if (false) {}
/**
 * @param {?} injector
 * @param {?} key
 * @param {?} constructResolvingMessage
 * @param {?=} originalError
 * @return {?}
 */
function injectionError(injector, key, constructResolvingMessage, originalError) {
    /** @type {?} */
    const keys = [key];
    /** @type {?} */
    const errMsg = constructResolvingMessage(keys);
    /** @type {?} */
    const error = (/** @type {?} */ ((originalError ? wrappedError(errMsg, originalError) : Error(errMsg))));
    error.addKey = addKey;
    error.keys = keys;
    error.injectors = [injector];
    error.constructResolvingMessage = constructResolvingMessage;
    ((/** @type {?} */ (error)))[ERROR_ORIGINAL_ERROR] = originalError;
    return error;
}
/**
 * @this {?}
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function addKey(injector, key) {
    this.injectors.push(injector);
    this.keys.push(key);
    // Note: This updated message won't be reflected in the `.stack` property
    this.message = this.constructResolvingMessage(this.keys);
}
/**
 * Thrown when trying to retrieve a dependency by key from {\@link Injector}, but the
 * {\@link Injector} does not have a {\@link Provider} for the given key.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * class A {
 *   constructor(b:B) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function noProviderError(injector, key) {
    return injectionError(injector, key, (/**
     * @param {?} keys
     * @return {?}
     */
    function (keys) {
        /** @type {?} */
        const first = stringify(keys[0].token);
        return `No provider for ${first}!${constructResolvingPath(keys)}`;
    }));
}
/**
 * Thrown when dependencies form a cycle.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * var injector = Injector.resolveAndCreate([
 *   {provide: "one", useFactory: (two) => "two", deps: [[new Inject("two")]]},
 *   {provide: "two", useFactory: (one) => "one", deps: [[new Inject("one")]]}
 * ]);
 *
 * expect(() => injector.get("one")).toThrowError();
 * ```
 *
 * Retrieving `A` or `B` throws a `CyclicDependencyError` as the graph above cannot be constructed.
 * @param {?} injector
 * @param {?} key
 * @return {?}
 */
function cyclicDependencyError(injector, key) {
    return injectionError(injector, key, (/**
     * @param {?} keys
     * @return {?}
     */
    function (keys) {
        return `Cannot instantiate cyclic dependency!${constructResolvingPath(keys)}`;
    }));
}
/**
 * Thrown when a constructing type returns with an Error.
 *
 * The `InstantiationError` class contains the original error plus the dependency graph which caused
 * this object to be instantiated.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * class A {
 *   constructor() {
 *     throw new Error('message');
 *   }
 * }
 *
 * var injector = Injector.resolveAndCreate([A]);
 * try {
 *   injector.get(A);
 * } catch (e) {
 *   expect(e instanceof InstantiationError).toBe(true);
 *   expect(e.originalException.message).toEqual("message");
 *   expect(e.originalStack).toBeDefined();
 * }
 * ```
 * @param {?} injector
 * @param {?} originalException
 * @param {?} originalStack
 * @param {?} key
 * @return {?}
 */
function instantiationError(injector, originalException, originalStack, key) {
    return injectionError(injector, key, (/**
     * @param {?} keys
     * @return {?}
     */
    function (keys) {
        /** @type {?} */
        const first = stringify(keys[0].token);
        return `${originalException.message}: Error during instantiation of ${first}!${constructResolvingPath(keys)}.`;
    }), originalException);
}
/**
 * Thrown when an object other then {\@link Provider} (or `Type`) is passed to {\@link Injector}
 * creation.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate(["not a type"])).toThrowError();
 * ```
 * @param {?} provider
 * @return {?}
 */
function invalidProviderError(provider) {
    return Error(`Invalid provider - only instances of Provider and Type are allowed, got: ${provider}`);
}
/**
 * Thrown when the class has no annotation information.
 *
 * Lack of annotation information prevents the {\@link Injector} from determining which dependencies
 * need to be injected into the constructor.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * class A {
 *   constructor(b) {}
 * }
 *
 * expect(() => Injector.resolveAndCreate([A])).toThrowError();
 * ```
 *
 * This error is also thrown when the class not marked with {\@link Injectable} has parameter types.
 *
 * ```typescript
 * class B {}
 *
 * class A {
 *   constructor(b:B) {} // no information about the parameter types of A is available at runtime.
 * }
 *
 * expect(() => Injector.resolveAndCreate([A,B])).toThrowError();
 * ```
 *
 * @param {?} typeOrFunc
 * @param {?} params
 * @return {?}
 */
function noAnnotationError(typeOrFunc, params) {
    /** @type {?} */
    const signature = [];
    for (let i = 0, ii = params.length; i < ii; i++) {
        /** @type {?} */
        const parameter = params[i];
        if (!parameter || parameter.length == 0) {
            signature.push('?');
        }
        else {
            signature.push(parameter.map(stringify).join(' '));
        }
    }
    return Error('Cannot resolve all parameters for \'' + stringify(typeOrFunc) + '\'(' +
        signature.join(', ') + '). ' +
        'Make sure that all the parameters are decorated with Inject or have valid type annotations and that \'' +
        stringify(typeOrFunc) + '\' is decorated with Injectable.');
}
/**
 * Thrown when getting an object by index.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * class A {}
 *
 * var injector = Injector.resolveAndCreate([A]);
 *
 * expect(() => injector.getAt(100)).toThrowError();
 * ```
 *
 * @param {?} index
 * @return {?}
 */
function outOfBoundsError(index) {
    return Error(`Index ${index} is out-of-bounds.`);
}
// TODO: add a working example after alpha38 is released
/**
 * Thrown when a multi provider and a regular provider are bound to the same token.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * expect(() => Injector.resolveAndCreate([
 *   { provide: "Strings", useValue: "string1", multi: true},
 *   { provide: "Strings", useValue: "string2", multi: false}
 * ])).toThrowError();
 * ```
 * @param {?} provider1
 * @param {?} provider2
 * @return {?}
 */
function mixingMultiProvidersWithRegularProvidersError(provider1, provider2) {
    return Error(`Cannot mix multi providers and regular providers, got: ${provider1} ${provider2}`);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/reflective_key.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A unique object used for retrieving items from the {\@link ReflectiveInjector}.
 *
 * Keys have:
 * - a system-wide unique `id`.
 * - a `token`.
 *
 * `Key` is used internally by {\@link ReflectiveInjector} because its system-wide unique `id` allows
 * the
 * injector to store created objects in a more efficient way.
 *
 * `Key` should not be created directly. {\@link ReflectiveInjector} creates keys automatically when
 * resolving
 * providers.
 *
 * @deprecated No replacement
 * \@publicApi
 */
class ReflectiveKey {
    /**
     * Private
     * @param {?} token
     * @param {?} id
     */
    constructor(token, id) {
        this.token = token;
        this.id = id;
        if (!token) {
            throw new Error('Token must be defined!');
        }
        this.displayName = stringify(this.token);
    }
    /**
     * Retrieves a `Key` for a token.
     * @param {?} token
     * @return {?}
     */
    static get(token) {
        return _globalKeyRegistry.get(resolveForwardRef(token));
    }
    /**
     * @return {?} the number of keys registered in the system.
     */
    static get numberOfKeys() { return _globalKeyRegistry.numberOfKeys; }
}
if (false) {}
class KeyRegistry {
    constructor() {
        this._allKeys = new Map();
    }
    /**
     * @param {?} token
     * @return {?}
     */
    get(token) {
        if (token instanceof ReflectiveKey)
            return token;
        if (this._allKeys.has(token)) {
            return (/** @type {?} */ (this._allKeys.get(token)));
        }
        /** @type {?} */
        const newKey = new ReflectiveKey(token, ReflectiveKey.numberOfKeys);
        this._allKeys.set(token, newKey);
        return newKey;
    }
    /**
     * @return {?}
     */
    get numberOfKeys() { return this._allKeys.size; }
}
if (false) {}
/** @type {?} */
const _globalKeyRegistry = new KeyRegistry();

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Provides access to reflection data about symbols. Used internally by Angular
 * to power dependency injection and compilation.
 */
class Reflector {
    constructor(reflectionCapabilities) {
        this.reflectionCapabilities = reflectionCapabilities;
    }
    updateCapabilities(caps) { this.reflectionCapabilities = caps; }
    factory(type) { return this.reflectionCapabilities.factory(type); }
    parameters(typeOrFunc) {
        return this.reflectionCapabilities.parameters(typeOrFunc);
    }
    annotations(typeOrFunc) {
        return this.reflectionCapabilities.annotations(typeOrFunc);
    }
    propMetadata(typeOrFunc) {
        return this.reflectionCapabilities.propMetadata(typeOrFunc);
    }
    hasLifecycleHook(type, lcProperty) {
        return this.reflectionCapabilities.hasLifecycleHook(type, lcProperty);
    }
    getter(name) { return this.reflectionCapabilities.getter(name); }
    setter(name) { return this.reflectionCapabilities.setter(name); }
    method(name) { return this.reflectionCapabilities.method(name); }
    importUri(type) { return this.reflectionCapabilities.importUri(type); }
    resourceUri(type) { return this.reflectionCapabilities.resourceUri(type); }
    resolveIdentifier(name, moduleUrl, members, runtime) {
        return this.reflectionCapabilities.resolveIdentifier(name, moduleUrl, members, runtime);
    }
    resolveEnum(identifier, name) {
        return this.reflectionCapabilities.resolveEnum(identifier, name);
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The {@link Reflector} used internally in Angular to access metadata
 * about symbols.
 */
const reflector = new Reflector(new ReflectionCapabilities());

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/reflective_provider.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function NormalizedProvider() { }
/**
 * `Dependency` is used by the framework to extend DI.
 * This is internal to Angular and should not be used directly.
 */
class ReflectiveDependency {
    /**
     * @param {?} key
     * @param {?} optional
     * @param {?} visibility
     */
    constructor(key, optional, visibility) {
        this.key = key;
        this.optional = optional;
        this.visibility = visibility;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static fromKey(key) {
        return new ReflectiveDependency(key, false, null);
    }
}
if (false) {}
/** @type {?} */
const _EMPTY_LIST = [];
/**
 * An internal resolved representation of a `Provider` used by the `Injector`.
 *
 * \@usageNotes
 * This is usually created automatically by `Injector.resolveAndCreate`.
 *
 * It can be created manually, as follows:
 *
 * ### Example
 *
 * ```typescript
 * var resolvedProviders = Injector.resolve([{ provide: 'message', useValue: 'Hello' }]);
 * var injector = Injector.fromResolvedProviders(resolvedProviders);
 *
 * expect(injector.get('message')).toEqual('Hello');
 * ```
 *
 * \@publicApi
 * @record
 */
function ResolvedReflectiveProvider() { }
if (false) {}
class ResolvedReflectiveProvider_ {
    /**
     * @param {?} key
     * @param {?} resolvedFactories
     * @param {?} multiProvider
     */
    constructor(key, resolvedFactories, multiProvider) {
        this.key = key;
        this.resolvedFactories = resolvedFactories;
        this.multiProvider = multiProvider;
        this.resolvedFactory = this.resolvedFactories[0];
    }
}
if (false) {}
/**
 * An internal resolved representation of a factory function created by resolving `Provider`.
 * \@publicApi
 */
class ResolvedReflectiveFactory {
    /**
     * @param {?} factory
     * @param {?} dependencies
     */
    constructor(factory, dependencies) {
        this.factory = factory;
        this.dependencies = dependencies;
    }
}
if (false) {}
/**
 * Resolve a single provider.
 * @param {?} provider
 * @return {?}
 */
function resolveReflectiveFactory(provider) {
    /** @type {?} */
    let factoryFn;
    /** @type {?} */
    let resolvedDeps;
    if (provider.useClass) {
        /** @type {?} */
        const useClass = resolveForwardRef(provider.useClass);
        factoryFn = reflector.factory(useClass);
        resolvedDeps = _dependenciesFor(useClass);
    }
    else if (provider.useExisting) {
        factoryFn = (/**
         * @param {?} aliasInstance
         * @return {?}
         */
        (aliasInstance) => aliasInstance);
        resolvedDeps = [ReflectiveDependency.fromKey(ReflectiveKey.get(provider.useExisting))];
    }
    else if (provider.useFactory) {
        factoryFn = provider.useFactory;
        resolvedDeps = constructDependencies(provider.useFactory, provider.deps);
    }
    else {
        factoryFn = (/**
         * @return {?}
         */
        () => provider.useValue);
        resolvedDeps = _EMPTY_LIST;
    }
    return new ResolvedReflectiveFactory(factoryFn, resolvedDeps);
}
/**
 * Converts the `Provider` into `ResolvedProvider`.
 *
 * `Injector` internally only uses `ResolvedProvider`, `Provider` contains convenience provider
 * syntax.
 * @param {?} provider
 * @return {?}
 */
function resolveReflectiveProvider(provider) {
    return new ResolvedReflectiveProvider_(ReflectiveKey.get(provider.provide), [resolveReflectiveFactory(provider)], provider.multi || false);
}
/**
 * Resolve a list of Providers.
 * @param {?} providers
 * @return {?}
 */
function resolveReflectiveProviders(providers) {
    /** @type {?} */
    const normalized = _normalizeProviders(providers, []);
    /** @type {?} */
    const resolved = normalized.map(resolveReflectiveProvider);
    /** @type {?} */
    const resolvedProviderMap = mergeResolvedReflectiveProviders(resolved, new Map());
    return Array.from(resolvedProviderMap.values());
}
/**
 * Merges a list of ResolvedProviders into a list where each key is contained exactly once and
 * multi providers have been merged.
 * @param {?} providers
 * @param {?} normalizedProvidersMap
 * @return {?}
 */
function mergeResolvedReflectiveProviders(providers, normalizedProvidersMap) {
    for (let i = 0; i < providers.length; i++) {
        /** @type {?} */
        const provider = providers[i];
        /** @type {?} */
        const existing = normalizedProvidersMap.get(provider.key.id);
        if (existing) {
            if (provider.multiProvider !== existing.multiProvider) {
                throw mixingMultiProvidersWithRegularProvidersError(existing, provider);
            }
            if (provider.multiProvider) {
                for (let j = 0; j < provider.resolvedFactories.length; j++) {
                    existing.resolvedFactories.push(provider.resolvedFactories[j]);
                }
            }
            else {
                normalizedProvidersMap.set(provider.key.id, provider);
            }
        }
        else {
            /** @type {?} */
            let resolvedProvider;
            if (provider.multiProvider) {
                resolvedProvider = new ResolvedReflectiveProvider_(provider.key, provider.resolvedFactories.slice(), provider.multiProvider);
            }
            else {
                resolvedProvider = provider;
            }
            normalizedProvidersMap.set(provider.key.id, resolvedProvider);
        }
    }
    return normalizedProvidersMap;
}
/**
 * @param {?} providers
 * @param {?} res
 * @return {?}
 */
function _normalizeProviders(providers, res) {
    providers.forEach((/**
     * @param {?} b
     * @return {?}
     */
    b => {
        if (b instanceof Type) {
            res.push((/** @type {?} */ ({ provide: b, useClass: b })));
        }
        else if (b && typeof b == 'object' && ((/** @type {?} */ (b))).provide !== undefined) {
            res.push((/** @type {?} */ (b)));
        }
        else if (Array.isArray(b)) {
            _normalizeProviders(b, res);
        }
        else {
            throw invalidProviderError(b);
        }
    }));
    return res;
}
/**
 * @param {?} typeOrFunc
 * @param {?=} dependencies
 * @return {?}
 */
function constructDependencies(typeOrFunc, dependencies) {
    if (!dependencies) {
        return _dependenciesFor(typeOrFunc);
    }
    else {
        /** @type {?} */
        const params = dependencies.map((/**
         * @param {?} t
         * @return {?}
         */
        t => [t]));
        return dependencies.map((/**
         * @param {?} t
         * @return {?}
         */
        t => _extractToken(typeOrFunc, t, params)));
    }
}
/**
 * @param {?} typeOrFunc
 * @return {?}
 */
function _dependenciesFor(typeOrFunc) {
    /** @type {?} */
    const params = reflector.parameters(typeOrFunc);
    if (!params)
        return [];
    if (params.some((/**
     * @param {?} p
     * @return {?}
     */
    p => p == null))) {
        throw noAnnotationError(typeOrFunc, params);
    }
    return params.map((/**
     * @param {?} p
     * @return {?}
     */
    p => _extractToken(typeOrFunc, p, params)));
}
/**
 * @param {?} typeOrFunc
 * @param {?} metadata
 * @param {?} params
 * @return {?}
 */
function _extractToken(typeOrFunc, metadata, params) {
    /** @type {?} */
    let token = null;
    /** @type {?} */
    let optional = false;
    if (!Array.isArray(metadata)) {
        if (metadata instanceof Inject) {
            return _createDependency(metadata.token, optional, null);
        }
        else {
            return _createDependency(metadata, optional, null);
        }
    }
    /** @type {?} */
    let visibility = null;
    for (let i = 0; i < metadata.length; ++i) {
        /** @type {?} */
        const paramMetadata = metadata[i];
        if (paramMetadata instanceof Type) {
            token = paramMetadata;
        }
        else if (paramMetadata instanceof Inject) {
            token = paramMetadata.token;
        }
        else if (paramMetadata instanceof Optional) {
            optional = true;
        }
        else if (paramMetadata instanceof Self || paramMetadata instanceof SkipSelf) {
            visibility = paramMetadata;
        }
        else if (paramMetadata instanceof InjectionToken) {
            token = paramMetadata;
        }
    }
    token = resolveForwardRef(token);
    if (token != null) {
        return _createDependency(token, optional, visibility);
    }
    else {
        throw noAnnotationError(typeOrFunc, params);
    }
}
/**
 * @param {?} token
 * @param {?} optional
 * @param {?} visibility
 * @return {?}
 */
function _createDependency(token, optional, visibility) {
    return new ReflectiveDependency(ReflectiveKey.get(token), optional, visibility);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/reflective_injector.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Threshold for the dynamic version
/** @type {?} */
const UNDEFINED = {};
/**
 * A ReflectiveDependency injection container used for instantiating objects and resolving
 * dependencies.
 *
 * An `Injector` is a replacement for a `new` operator, which can automatically resolve the
 * constructor dependencies.
 *
 * In typical use, application code asks for the dependencies in the constructor and they are
 * resolved by the `Injector`.
 *
 * \@usageNotes
 * ### Example
 *
 * The following example creates an `Injector` configured to create `Engine` and `Car`.
 *
 * ```typescript
 * \@Injectable()
 * class Engine {
 * }
 *
 * \@Injectable()
 * class Car {
 *   constructor(public engine:Engine) {}
 * }
 *
 * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
 * var car = injector.get(Car);
 * expect(car instanceof Car).toBe(true);
 * expect(car.engine instanceof Engine).toBe(true);
 * ```
 *
 * Notice, we don't use the `new` operator because we explicitly want to have the `Injector`
 * resolve all of the object's dependencies automatically.
 *
 * @deprecated from v5 - slow and brings in a lot of code, Use `Injector.create` instead.
 * \@publicApi
 * @abstract
 */
class ReflectiveInjector {
    /**
     * Turns an array of provider definitions into an array of resolved providers.
     *
     * A resolution is a process of flattening multiple nested arrays and converting individual
     * providers into an array of `ResolvedReflectiveProvider`s.
     *
     * \@usageNotes
     * ### Example
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *  /
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, [[Engine]]]);
     *
     * expect(providers.length).toEqual(2);
     *
     * expect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);
     * expect(providers[0].key.displayName).toBe("Car");
     * expect(providers[0].dependencies.length).toEqual(1);
     * expect(providers[0].factory).toBeDefined();
     *
     * expect(providers[1].key.displayName).toBe("Engine");
     * });
     * ```
     *
     * @param {?} providers
     * @return {?}
     */
    static resolve(providers) {
        return resolveReflectiveProviders(providers);
    }
    /**
     * Resolves an array of providers and creates an injector from those providers.
     *
     * The passed-in providers can be an array of `Type`, `Provider`,
     * or a recursive array of more providers.
     *
     * \@usageNotes
     * ### Example
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *  /
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    static resolveAndCreate(providers, parent) {
        /** @type {?} */
        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return ReflectiveInjector.fromResolvedProviders(ResolvedReflectiveProviders, parent);
    }
    /**
     * Creates an injector from previously resolved providers.
     *
     * This API is the recommended way to construct injectors in performance-sensitive parts.
     *
     * \@usageNotes
     * ### Example
     *
     * ```typescript
     * \@Injectable()
     * class Engine {
     * }
     *  /
     * class Car {
     *   constructor(public engine:Engine) {}
     * }
     *
     * var providers = ReflectiveInjector.resolve([Car, Engine]);
     * var injector = ReflectiveInjector.fromResolvedProviders(providers);
     * expect(injector.get(Car) instanceof Car).toBe(true);
     * ```
     * @param {?} providers
     * @param {?=} parent
     * @return {?}
     */
    static fromResolvedProviders(providers, parent) {
        return new ReflectiveInjector_(providers, parent);
    }
}
if (false) {}
class ReflectiveInjector_ {
    /**
     * Private
     * @param {?} _providers
     * @param {?=} _parent
     */
    constructor(_providers, _parent) {
        /**
         * \@internal
         */
        this._constructionCounter = 0;
        this._providers = _providers;
        this.parent = _parent || null;
        /** @type {?} */
        const len = _providers.length;
        this.keyIds = [];
        this.objs = [];
        for (let i = 0; i < len; i++) {
            this.keyIds[i] = _providers[i].key.id;
            this.objs[i] = UNDEFINED;
        }
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    get(token, notFoundValue = THROW_IF_NOT_FOUND) {
        return this._getByKey(ReflectiveKey.get(token), null, notFoundValue);
    }
    /**
     * @param {?} providers
     * @return {?}
     */
    resolveAndCreateChild(providers) {
        /** @type {?} */
        const ResolvedReflectiveProviders = ReflectiveInjector.resolve(providers);
        return this.createChildFromResolved(ResolvedReflectiveProviders);
    }
    /**
     * @param {?} providers
     * @return {?}
     */
    createChildFromResolved(providers) {
        /** @type {?} */
        const inj = new ReflectiveInjector_(providers);
        ((/** @type {?} */ (inj))).parent = this;
        return inj;
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    resolveAndInstantiate(provider) {
        return this.instantiateResolved(ReflectiveInjector.resolve([provider])[0]);
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    instantiateResolved(provider) {
        return this._instantiateProvider(provider);
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getProviderAtIndex(index) {
        if (index < 0 || index >= this._providers.length) {
            throw outOfBoundsError(index);
        }
        return this._providers[index];
    }
    /**
     * \@internal
     * @param {?} provider
     * @return {?}
     */
    _new(provider) {
        if (this._constructionCounter++ > this._getMaxNumberOfObjects()) {
            throw cyclicDependencyError(this, provider.key);
        }
        return this._instantiateProvider(provider);
    }
    /**
     * @private
     * @return {?}
     */
    _getMaxNumberOfObjects() { return this.objs.length; }
    /**
     * @private
     * @param {?} provider
     * @return {?}
     */
    _instantiateProvider(provider) {
        if (provider.multiProvider) {
            /** @type {?} */
            const res = [];
            for (let i = 0; i < provider.resolvedFactories.length; ++i) {
                res[i] = this._instantiate(provider, provider.resolvedFactories[i]);
            }
            return res;
        }
        else {
            return this._instantiate(provider, provider.resolvedFactories[0]);
        }
    }
    /**
     * @private
     * @param {?} provider
     * @param {?} ResolvedReflectiveFactory
     * @return {?}
     */
    _instantiate(provider, ResolvedReflectiveFactory) {
        /** @type {?} */
        const factory = ResolvedReflectiveFactory.factory;
        /** @type {?} */
        let deps;
        try {
            deps =
                ResolvedReflectiveFactory.dependencies.map((/**
                 * @param {?} dep
                 * @return {?}
                 */
                dep => this._getByReflectiveDependency(dep)));
        }
        catch (e) {
            if (e.addKey) {
                e.addKey(this, provider.key);
            }
            throw e;
        }
        /** @type {?} */
        let obj;
        try {
            obj = factory(...deps);
        }
        catch (e) {
            throw instantiationError(this, e, e.stack, provider.key);
        }
        return obj;
    }
    /**
     * @private
     * @param {?} dep
     * @return {?}
     */
    _getByReflectiveDependency(dep) {
        return this._getByKey(dep.key, dep.visibility, dep.optional ? null : THROW_IF_NOT_FOUND);
    }
    /**
     * @private
     * @param {?} key
     * @param {?} visibility
     * @param {?} notFoundValue
     * @return {?}
     */
    _getByKey(key, visibility, notFoundValue) {
        if (key === ReflectiveInjector_.INJECTOR_KEY) {
            return this;
        }
        if (visibility instanceof Self) {
            return this._getByKeySelf(key, notFoundValue);
        }
        else {
            return this._getByKeyDefault(key, notFoundValue, visibility);
        }
    }
    /**
     * @private
     * @param {?} keyId
     * @return {?}
     */
    _getObjByKeyId(keyId) {
        for (let i = 0; i < this.keyIds.length; i++) {
            if (this.keyIds[i] === keyId) {
                if (this.objs[i] === UNDEFINED) {
                    this.objs[i] = this._new(this._providers[i]);
                }
                return this.objs[i];
            }
        }
        return UNDEFINED;
    }
    /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    _throwOrNull(key, notFoundValue) {
        if (notFoundValue !== THROW_IF_NOT_FOUND) {
            return notFoundValue;
        }
        else {
            throw noProviderError(this, key);
        }
    }
    /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @return {?}
     */
    _getByKeySelf(key, notFoundValue) {
        /** @type {?} */
        const obj = this._getObjByKeyId(key.id);
        return (obj !== UNDEFINED) ? obj : this._throwOrNull(key, notFoundValue);
    }
    /**
     * \@internal
     * @param {?} key
     * @param {?} notFoundValue
     * @param {?} visibility
     * @return {?}
     */
    _getByKeyDefault(key, notFoundValue, visibility) {
        /** @type {?} */
        let inj;
        if (visibility instanceof SkipSelf) {
            inj = this.parent;
        }
        else {
            inj = this;
        }
        while (inj instanceof ReflectiveInjector_) {
            /** @type {?} */
            const inj_ = (/** @type {?} */ (inj));
            /** @type {?} */
            const obj = inj_._getObjByKeyId(key.id);
            if (obj !== UNDEFINED)
                return obj;
            inj = inj_.parent;
        }
        if (inj !== null) {
            return inj.get(key.token, notFoundValue);
        }
        else {
            return this._throwOrNull(key, notFoundValue);
        }
    }
    /**
     * @return {?}
     */
    get displayName() {
        /** @type {?} */
        const providers = _mapProviders(this, (/**
         * @param {?} b
         * @return {?}
         */
        (b) => ' "' + b.key.displayName + '" '))
            .join(', ');
        return `ReflectiveInjector(providers: [${providers}])`;
    }
    /**
     * @return {?}
     */
    toString() { return this.displayName; }
}
ReflectiveInjector_.INJECTOR_KEY = ReflectiveKey.get(Injector);
if (false) {}
/**
 * @param {?} injector
 * @param {?} fn
 * @return {?}
 */
function _mapProviders(injector, fn) {
    /** @type {?} */
    const res = [];
    for (let i = 0; i < injector._providers.length; ++i) {
        res[i] = fn(injector.getProviderAtIndex(i));
    }
    return res;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/di.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/metadata/di.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A DI token that you can use to create a virtual [provider](guide/glossary#provider)
 * that will populate the `entryComponents` field of components and NgModules
 * based on its `useValue` property value.
 * All components that are referenced in the `useValue` value (either directly
 * or in a nested array or map) are added to the `entryComponents` property.
 *
 * \@usageNotes
 *
 * The following example shows how the router can populate the `entryComponents`
 * field of an NgModule based on a router configuration that refers
 * to components.
 *
 * ```typescript
 * // helper function inside the router
 * function provideRoutes(routes) {
 *   return [
 *     {provide: ROUTES, useValue: routes},
 *     {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}
 *   ];
 * }
 *
 * // user code
 * let routes = [
 *   {path: '/root', component: RootComp},
 *   {path: '/teams', component: TeamsComp}
 * ];
 *
 * \@NgModule({
 *   providers: [provideRoutes(routes)]
 * })
 * class ModuleWithRoutes {}
 * ```
 *
 * \@publicApi
 * @deprecated Since 9.0.0. With Ivy, this property is no longer necessary.
 * @type {?}
 */
const ANALYZE_FOR_ENTRY_COMPONENTS = new InjectionToken('AnalyzeForEntryComponents');
/**
 * Type of the `Attribute` decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function AttributeDecorator$1() { }
/**
 * Type of the Attribute metadata.
 *
 * \@publicApi
 * @record
 */
function Attribute$1() { }
if (false) {}
// WARNING: interface has both a type and a value, skipping emit
/**
 * Base class for query metadata.
 *
 * @see `ContentChildren`.
 * @see `ContentChild`.
 * @see `ViewChildren`.
 * @see `ViewChild`.
 *
 * \@publicApi
 * @abstract
 */
class Query {
}
/**
 * Type of the ContentChildren decorator / constructor function.
 *
 * @see `ContentChildren`.
 * \@publicApi
 * @record
 */
function ContentChildrenDecorator() { }
const ɵ0$a = /**
 * @param {?=} selector
 * @param {?=} data
 * @return {?}
 */
(selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: false, descendants: false }, data));
/**
 * ContentChildren decorator and metadata.
 *
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const ContentChildren = makePropDecorator('ContentChildren', (ɵ0$a), Query);
/**
 * Type of the ContentChild decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function ContentChildDecorator() { }
const ɵ1$2 = /**
 * @param {?=} selector
 * @param {?=} data
 * @return {?}
 */
(selector, data = {}) => (Object.assign({ selector, first: true, isViewQuery: false, descendants: true }, data));
/**
 * ContentChild decorator and metadata.
 *
 *
 * \@Annotation
 *
 * \@publicApi
 * @type {?}
 */
const ContentChild = makePropDecorator('ContentChild', (ɵ1$2), Query);
/**
 * Type of the ViewChildren decorator / constructor function.
 *
 * @see `ViewChildren`.
 *
 * \@publicApi
 * @record
 */
function ViewChildrenDecorator() { }
const ɵ2 = /**
 * @param {?=} selector
 * @param {?=} data
 * @return {?}
 */
(selector, data = {}) => (Object.assign({ selector, first: false, isViewQuery: true, descendants: true }, data));
/**
 * ViewChildren decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const ViewChildren = makePropDecorator('ViewChildren', (ɵ2), Query);
/**
 * Type of the ViewChild decorator / constructor function.
 *
 * @see `ViewChild`.
 * \@publicApi
 * @record
 */
function ViewChildDecorator() { }
const ɵ3 = /**
 * @param {?} selector
 * @param {?} data
 * @return {?}
 */
(selector, data) => (Object.assign({ selector, first: true, isViewQuery: true, descendants: true }, data));
/**
 * ViewChild decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const ViewChild = makePropDecorator('ViewChild', (ɵ3), Query);

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/metadata/resource_loading.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Used to resolve resource URLs on `\@Component` when used with JIT compilation.
 *
 * Example:
 * ```
 * \@Component({
 *   selector: 'my-comp',
 *   templateUrl: 'my-comp.html', // This requires asynchronous resolution
 * })
 * class MyComponent{
 * }
 *
 * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process
 * // and `MyComponent`'s `\@Component.templateUrl` needs to be resolved asynchronously.
 *
 * // Calling `resolveComponentResources()` will resolve `\@Component.templateUrl` into
 * // `\@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.
 *
 * // Use browser's `fetch()` function as the default resource resolution strategy.
 * resolveComponentResources(fetch).then(() => {
 *   // After resolution all URLs have been converted into `template` strings.
 *   renderComponent(MyComponent);
 * });
 *
 * ```
 *
 * NOTE: In AOT the resolution happens during compilation, and so there should be no need
 * to call this method outside JIT mode.
 *
 * @param {?} resourceResolver a function which is responsible for returning a `Promise` to the
 * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.
 * @return {?}
 */
function resolveComponentResources(resourceResolver) {
    // Store all promises which are fetching the resources.
    /** @type {?} */
    const componentResolved = [];
    // Cache so that we don't fetch the same resource more than once.
    /** @type {?} */
    const urlMap = new Map();
    /**
     * @param {?} url
     * @return {?}
     */
    function cachedResourceResolve(url) {
        /** @type {?} */
        let promise = urlMap.get(url);
        if (!promise) {
            /** @type {?} */
            const resp = resourceResolver(url);
            urlMap.set(url, promise = resp.then(unwrapResponse));
        }
        return promise;
    }
    componentResourceResolutionQueue.forEach((/**
     * @param {?} component
     * @param {?} type
     * @return {?}
     */
    (component, type) => {
        /** @type {?} */
        const promises = [];
        if (component.templateUrl) {
            promises.push(cachedResourceResolve(component.templateUrl).then((/**
             * @param {?} template
             * @return {?}
             */
            (template) => {
                component.template = template;
            })));
        }
        /** @type {?} */
        const styleUrls = component.styleUrls;
        /** @type {?} */
        const styles = component.styles || (component.styles = []);
        /** @type {?} */
        const styleOffset = component.styles.length;
        styleUrls && styleUrls.forEach((/**
         * @param {?} styleUrl
         * @param {?} index
         * @return {?}
         */
        (styleUrl, index) => {
            styles.push(''); // pre-allocate array.
            promises.push(cachedResourceResolve(styleUrl).then((/**
             * @param {?} style
             * @return {?}
             */
            (style) => {
                styles[styleOffset + index] = style;
                styleUrls.splice(styleUrls.indexOf(styleUrl), 1);
                if (styleUrls.length == 0) {
                    component.styleUrls = undefined;
                }
            })));
        }));
        /** @type {?} */
        const fullyResolved = Promise.all(promises).then((/**
         * @return {?}
         */
        () => componentDefResolved(type)));
        componentResolved.push(fullyResolved);
    }));
    clearResolutionOfComponentResourcesQueue();
    return Promise.all(componentResolved).then((/**
     * @return {?}
     */
    () => undefined));
}
/** @type {?} */
let componentResourceResolutionQueue = new Map();
// Track when existing ɵcmp for a Type is waiting on resources.
/** @type {?} */
const componentDefPendingResolution = new Set();
/**
 * @param {?} type
 * @param {?} metadata
 * @return {?}
 */
function maybeQueueResolutionOfComponentResources(type, metadata) {
    if (componentNeedsResolution(metadata)) {
        componentResourceResolutionQueue.set(type, metadata);
        componentDefPendingResolution.add(type);
    }
}
/**
 * @param {?} type
 * @return {?}
 */
function isComponentDefPendingResolution(type) {
    return componentDefPendingResolution.has(type);
}
/**
 * @param {?} component
 * @return {?}
 */
function componentNeedsResolution(component) {
    return !!((component.templateUrl && !component.hasOwnProperty('template')) ||
        component.styleUrls && component.styleUrls.length);
}
/**
 * @return {?}
 */
function clearResolutionOfComponentResourcesQueue() {
    /** @type {?} */
    const old = componentResourceResolutionQueue;
    componentResourceResolutionQueue = new Map();
    return old;
}
/**
 * @param {?} queue
 * @return {?}
 */
function restoreComponentResolutionQueue(queue) {
    componentDefPendingResolution.clear();
    queue.forEach((/**
     * @param {?} _
     * @param {?} type
     * @return {?}
     */
    (_, type) => componentDefPendingResolution.add(type)));
    componentResourceResolutionQueue = queue;
}
/**
 * @return {?}
 */
function isComponentResourceResolutionQueueEmpty() {
    return componentResourceResolutionQueue.size === 0;
}
/**
 * @param {?} response
 * @return {?}
 */
function unwrapResponse(response) {
    return typeof response == 'string' ? response : response.text();
}
/**
 * @param {?} type
 * @return {?}
 */
function componentDefResolved(type) {
    componentDefPendingResolution.delete(type);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/styling/static_styling.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Compute the static styling (class/style) from `TAttributes`.
 *
 * This function should be called during `firstCreatePass` only.
 *
 * @param {?} tNode The `TNode` into which the styling information should be loaded.
 * @param {?} attrs `TAttributes` containing the styling information.
 * @return {?}
 */
function computeStaticStyling(tNode, attrs) {
    ngDevMode &&
        assertFirstCreatePass(getTView(), 'Expecting to be called in first template pass only');
    /** @type {?} */
    let styles = tNode.styles;
    /** @type {?} */
    let classes = tNode.classes;
    /** @type {?} */
    let mode = 0;
    for (let i = 0; i < attrs.length; i++) {
        /** @type {?} */
        const value = attrs[i];
        if (typeof value === 'number') {
            mode = value;
        }
        else if (mode == 1 /* Classes */) {
            classes = concatStringsWithSpace(classes, (/** @type {?} */ (value)));
        }
        else if (mode == 2 /* Styles */) {
            /** @type {?} */
            const style = (/** @type {?} */ (value));
            /** @type {?} */
            const styleValue = (/** @type {?} */ (attrs[++i]));
            styles = concatStringsWithSpace(styles, style + ': ' + styleValue + ';');
        }
    }
    styles !== null && (tNode.styles = styles);
    classes !== null && (tNode.classes = classes);
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
let _symbolIterator = null;
function getSymbolIterator() {
    if (!_symbolIterator) {
        const Symbol = _global['Symbol'];
        if (Symbol && Symbol.iterator) {
            _symbolIterator = Symbol.iterator;
        }
        else {
            // es6-shim specific logic
            const keys = Object.getOwnPropertyNames(Map.prototype);
            for (let i = 0; i < keys.length; ++i) {
                const key = keys[i];
                if (key !== 'entries' && key !== 'size' &&
                    Map.prototype[key] === Map.prototype['entries']) {
                    _symbolIterator = key;
                }
            }
        }
    }
    return _symbolIterator;
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function isIterable(obj) {
    return obj !== null && typeof obj === 'object' && obj[getSymbolIterator()] !== undefined;
}
function isListLikeIterable(obj) {
    if (!isJsObject(obj))
        return false;
    return Array.isArray(obj) ||
        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
}
function areIterablesEqual(a, b, comparator) {
    const iterator1 = a[getSymbolIterator()]();
    const iterator2 = b[getSymbolIterator()]();
    while (true) {
        const item1 = iterator1.next();
        const item2 = iterator2.next();
        if (item1.done && item2.done)
            return true;
        if (item1.done || item2.done)
            return false;
        if (!comparator(item1.value, item2.value))
            return false;
    }
}
function iterateListLike(obj, fn) {
    if (Array.isArray(obj)) {
        for (let i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    }
    else {
        const iterator = obj[getSymbolIterator()]();
        let item;
        while (!((item = iterator.next()).done)) {
            fn(item.value);
        }
    }
}
function isJsObject(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// JS has NaN !== NaN
function looseIdentical(a, b) {
    return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);
}
function devModeEqual(a, b) {
    const isListLikeIterableA = isListLikeIterable(a);
    const isListLikeIterableB = isListLikeIterable(b);
    if (isListLikeIterableA && isListLikeIterableB) {
        return areIterablesEqual(a, b, devModeEqual);
    }
    else {
        const isAObject = a && (typeof a === 'object' || typeof a === 'function');
        const isBObject = b && (typeof b === 'object' || typeof b === 'function');
        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
            return true;
        }
        else {
            return looseIdentical(a, b);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/change_detection/change_detection_util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function devModeEqual$1(a, b) {
    /** @type {?} */
    const isListLikeIterableA = isListLikeIterable$1(a);
    /** @type {?} */
    const isListLikeIterableB = isListLikeIterable$1(b);
    if (isListLikeIterableA && isListLikeIterableB) {
        return areIterablesEqual$1(a, b, devModeEqual$1);
    }
    else {
        /** @type {?} */
        const isAObject = a && (typeof a === 'object' || typeof a === 'function');
        /** @type {?} */
        const isBObject = b && (typeof b === 'object' || typeof b === 'function');
        if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
            return true;
        }
        else {
            return looseIdentical(a, b);
        }
    }
}
/**
 * Indicates that the result of a {\@link Pipe} transformation has changed even though the
 * reference has not changed.
 *
 * Wrapped values are unwrapped automatically during the change detection, and the unwrapped value
 * is stored.
 *
 * Example:
 *
 * ```
 * if (this._latestValue === this._latestReturnedValue) {
 *    return this._latestReturnedValue;
 *  } else {
 *    this._latestReturnedValue = this._latestValue;
 *    return WrappedValue.wrap(this._latestValue); // this will force update
 *  }
 * ```
 *
 * \@publicApi
 */
class WrappedValue {
    /**
     * @param {?} value
     */
    constructor(value) { this.wrapped = value; }
    /**
     * Creates a wrapped value.
     * @param {?} value
     * @return {?}
     */
    static wrap(value) { return new WrappedValue(value); }
    /**
     * Returns the underlying value of a wrapped value.
     * Returns the given `value` when it is not wrapped.
     *
     * @param {?} value
     * @return {?}
     */
    static unwrap(value) { return WrappedValue.isWrapped(value) ? value.wrapped : value; }
    /**
     * Returns true if `value` is a wrapped value.
     * @param {?} value
     * @return {?}
     */
    static isWrapped(value) { return value instanceof WrappedValue; }
}
if (false) {}
/**
 * @param {?} obj
 * @return {?}
 */
function isListLikeIterable$1(obj) {
    if (!isJsObject$1(obj))
        return false;
    return Array.isArray(obj) ||
        (!(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
            getSymbolIterator() in obj); // JS Iterable have a Symbol.iterator prop
}
/**
 * @param {?} a
 * @param {?} b
 * @param {?} comparator
 * @return {?}
 */
function areIterablesEqual$1(a, b, comparator) {
    /** @type {?} */
    const iterator1 = a[getSymbolIterator()]();
    /** @type {?} */
    const iterator2 = b[getSymbolIterator()]();
    while (true) {
        /** @type {?} */
        const item1 = iterator1.next();
        /** @type {?} */
        const item2 = iterator2.next();
        if (item1.done && item2.done)
            return true;
        if (item1.done || item2.done)
            return false;
        if (!comparator(item1.value, item2.value))
            return false;
    }
}
/**
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */
function iterateListLike$1(obj, fn) {
    if (Array.isArray(obj)) {
        for (let i = 0; i < obj.length; i++) {
            fn(obj[i]);
        }
    }
    else {
        /** @type {?} */
        const iterator = obj[getSymbolIterator()]();
        /** @type {?} */
        let item;
        while (!((item = iterator.next()).done)) {
            fn(item.value);
        }
    }
}
/**
 * @param {?} o
 * @return {?}
 */
function isJsObject$1(o) {
    return o !== null && (typeof o === 'function' || typeof o === 'object');
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/bindings.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// TODO(misko): consider inlining
/**
 * Updates binding and returns the value.
 * @param {?} lView
 * @param {?} bindingIndex
 * @param {?} value
 * @return {?}
 */
function updateBinding(lView, bindingIndex, value) {
    return lView[bindingIndex] = value;
}
/**
 * Gets the current binding value.
 * @param {?} lView
 * @param {?} bindingIndex
 * @return {?}
 */
function getBinding(lView, bindingIndex) {
    ngDevMode && assertDataInRange(lView, bindingIndex);
    ngDevMode &&
        assertNotSame(lView[bindingIndex], NO_CHANGE, 'Stored value should never be NO_CHANGE.');
    return lView[bindingIndex];
}
/**
 * Updates binding if changed, then returns whether it was updated.
 *
 * This function also checks the `CheckNoChangesMode` and throws if changes are made.
 * Some changes (Objects/iterables) during `CheckNoChangesMode` are exempt to comply with VE
 * behavior.
 *
 * @param {?} lView current `LView`
 * @param {?} bindingIndex The binding in the `LView` to check
 * @param {?} value New value to check against `lView[bindingIndex]`
 * @return {?} `true` if the bindings has changed. (Throws if binding has changed during
 *          `CheckNoChangesMode`)
 */
function bindingUpdated(lView, bindingIndex, value) {
    ngDevMode && assertNotSame(value, NO_CHANGE, 'Incoming value should never be NO_CHANGE.');
    ngDevMode &&
        assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);
    /** @type {?} */
    const oldValue = lView[bindingIndex];
    if (Object.is(oldValue, value)) {
        return false;
    }
    else {
        if (ngDevMode && getCheckNoChangesMode()) {
            // View engine didn't report undefined values as changed on the first checkNoChanges pass
            // (before the change detection was run).
            /** @type {?} */
            const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : undefined;
            if (!devModeEqual$1(oldValueToCompare, value)) {
                /** @type {?} */
                const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
                throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName);
            }
            // There was a change, but the `devModeEqual` decided that the change is exempt from an error.
            // For this reason we exit as if no change. The early exit is needed to prevent the changed
            // value to be written into `LView` (If we would write the new value that we would not see it
            // as change on next CD.)
            return false;
        }
        lView[bindingIndex] = value;
        return true;
    }
}
/**
 * Updates 2 bindings if changed, then returns whether either was updated.
 * @param {?} lView
 * @param {?} bindingIndex
 * @param {?} exp1
 * @param {?} exp2
 * @return {?}
 */
function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
    /** @type {?} */
    const different = bindingUpdated(lView, bindingIndex, exp1);
    return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
}
/**
 * Updates 3 bindings if changed, then returns whether any was updated.
 * @param {?} lView
 * @param {?} bindingIndex
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @return {?}
 */
function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
    /** @type {?} */
    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
    return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
}
/**
 * Updates 4 bindings if changed, then returns whether any was updated.
 * @param {?} lView
 * @param {?} bindingIndex
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @param {?} exp4
 * @return {?}
 */
function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
    /** @type {?} */
    const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
    return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/attribute.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Updates the value of or removes a bound attribute on an Element.
 *
 * Used in the case of `[attr.title]="value"`
 *
 * \@codeGenApi
 * @param {?} name name The name of the attribute.
 * @param {?} value value The attribute is removed when value is `null` or `undefined`.
 *                  Otherwise the attribute value is set to the stringified value.
 * @param {?=} sanitizer An optional function used to sanitize the value.
 * @param {?=} namespace Optional namespace to use when setting the attribute.
 *
 * @return {?}
 */
function ɵɵattribute(name, value, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, value)) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, 'attr.' + name, bindingIndex);
    }
    return ɵɵattribute;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/interpolation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Create interpolation bindings with a variable number of expressions.
 *
 * If there are 1 to 8 expressions `interpolation1()` to `interpolation8()` should be used instead.
 * Those are faster because there is no need to create an array of expressions and iterate over it.
 *
 * `values`:
 * - has static text at even indexes,
 * - has evaluated expressions at odd indexes.
 *
 * Returns the concatenated string when any of the arguments changes, `NO_CHANGE` otherwise.
 * @param {?} lView
 * @param {?} values
 * @return {?}
 */
function interpolationV(lView, values) {
    ngDevMode && assertLessThan(2, values.length, 'should have at least 3 values');
    ngDevMode && assertEqual(values.length % 2, 1, 'should have an odd number of values');
    /** @type {?} */
    let isBindingUpdated = false;
    /** @type {?} */
    let bindingIndex = getBindingIndex();
    for (let i = 1; i < values.length; i += 2) {
        // Check if bindings (odd indexes) have changed
        isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
    }
    setBindingIndex(bindingIndex);
    if (!isBindingUpdated) {
        return NO_CHANGE;
    }
    // Build the updated content
    /** @type {?} */
    let content = values[0];
    for (let i = 1; i < values.length; i += 2) {
        content += renderStringify(values[i]) + values[i + 1];
    }
    return content;
}
/**
 * Creates an interpolation binding with 1 expression.
 *
 * @param {?} lView
 * @param {?} prefix static value used for concatenation only.
 * @param {?} v0 value checked for change.
 * @param {?} suffix static value used for concatenation only.
 * @return {?}
 */
function interpolation1(lView, prefix, v0, suffix) {
    /** @type {?} */
    const different = bindingUpdated(lView, nextBindingIndex(), v0);
    return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 2 expressions.
 * @param {?} lView
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} suffix
 * @return {?}
 */
function interpolation2(lView, prefix, v0, i0, v1, suffix) {
    /** @type {?} */
    const bindingIndex = getBindingIndex();
    /** @type {?} */
    const different = bindingUpdated2(lView, bindingIndex, v0, v1);
    incrementBindingIndex(2);
    return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
}
/**
 * Creates an interpolation binding with 3 expressions.
 * @param {?} lView
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} suffix
 * @return {?}
 */
function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
    /** @type {?} */
    const bindingIndex = getBindingIndex();
    /** @type {?} */
    const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
    incrementBindingIndex(3);
    return different ?
        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix :
        NO_CHANGE;
}
/**
 * Create an interpolation binding with 4 expressions.
 * @param {?} lView
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} suffix
 * @return {?}
 */
function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
    /** @type {?} */
    const bindingIndex = getBindingIndex();
    /** @type {?} */
    const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    incrementBindingIndex(4);
    return different ?
        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +
            renderStringify(v3) + suffix :
        NO_CHANGE;
}
/**
 * Creates an interpolation binding with 5 expressions.
 * @param {?} lView
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} suffix
 * @return {?}
 */
function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
    /** @type {?} */
    const bindingIndex = getBindingIndex();
    /** @type {?} */
    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
    incrementBindingIndex(5);
    return different ?
        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +
            renderStringify(v3) + i3 + renderStringify(v4) + suffix :
        NO_CHANGE;
}
/**
 * Creates an interpolation binding with 6 expressions.
 * @param {?} lView
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} i4
 * @param {?} v5
 * @param {?} suffix
 * @return {?}
 */
function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
    /** @type {?} */
    const bindingIndex = getBindingIndex();
    /** @type {?} */
    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
    incrementBindingIndex(6);
    return different ?
        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +
            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix :
        NO_CHANGE;
}
/**
 * Creates an interpolation binding with 7 expressions.
 * @param {?} lView
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} i4
 * @param {?} v5
 * @param {?} i5
 * @param {?} v6
 * @param {?} suffix
 * @return {?}
 */
function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
    /** @type {?} */
    const bindingIndex = getBindingIndex();
    /** @type {?} */
    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
    incrementBindingIndex(7);
    return different ?
        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +
            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +
            renderStringify(v6) + suffix :
        NO_CHANGE;
}
/**
 * Creates an interpolation binding with 8 expressions.
 * @param {?} lView
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} i4
 * @param {?} v5
 * @param {?} i5
 * @param {?} v6
 * @param {?} i6
 * @param {?} v7
 * @param {?} suffix
 * @return {?}
 */
function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
    /** @type {?} */
    const bindingIndex = getBindingIndex();
    /** @type {?} */
    let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
    different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
    incrementBindingIndex(8);
    return different ?
        prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 +
            renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 +
            renderStringify(v6) + i6 + renderStringify(v7) + suffix :
        NO_CHANGE;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/attribute_interpolation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * Update an interpolated attribute on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate1('title', 'prefix', v0, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} attrName The name of the attribute to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @param {?=} namespace
 * @return {?} itself, so that it may be chained.
 */
function ɵɵattributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode &&
            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 1, prefix, suffix);
    }
    return ɵɵattributeInterpolate1;
}
/**
 *
 * Update an interpolated attribute on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} attrName The name of the attribute to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @param {?=} namespace
 * @return {?} itself, so that it may be chained.
 */
function ɵɵattributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode &&
            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 2, prefix, i0, suffix);
    }
    return ɵɵattributeInterpolate2;
}
/**
 *
 * Update an interpolated attribute on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate3(
 * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} attrName The name of the attribute to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @param {?=} namespace
 * @return {?} itself, so that it may be chained.
 */
function ɵɵattributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
    }
    return ɵɵattributeInterpolate3;
}
/**
 *
 * Update an interpolated attribute on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate4(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} attrName The name of the attribute to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @param {?=} namespace
 * @return {?} itself, so that it may be chained.
 */
function ɵɵattributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
    }
    return ɵɵattributeInterpolate4;
}
/**
 *
 * Update an interpolated attribute on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate5(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} attrName The name of the attribute to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @param {?=} namespace
 * @return {?} itself, so that it may be chained.
 */
function ɵɵattributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
    }
    return ɵɵattributeInterpolate5;
}
/**
 *
 * Update an interpolated attribute on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate6(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} attrName The name of the attribute to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @param {?=} namespace
 * @return {?} itself, so that it may be chained.
 */
function ɵɵattributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
    }
    return ɵɵattributeInterpolate6;
}
/**
 *
 * Update an interpolated attribute on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate7(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} attrName The name of the attribute to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @param {?=} namespace
 * @return {?} itself, so that it may be chained.
 */
function ɵɵattributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
    }
    return ɵɵattributeInterpolate7;
}
/**
 *
 * Update an interpolated attribute on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div attr.title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolate8(
 *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} attrName The name of the attribute to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} i6 Static value used for concatenation only.
 * @param {?} v7 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @param {?=} namespace
 * @return {?} itself, so that it may be chained.
 */
function ɵɵattributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
        ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
    }
    return ɵɵattributeInterpolate8;
}
/**
 * Update an interpolated attribute on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵattributeInterpolateV(
 *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *
 * \@codeGenApi
 * @param {?} attrName The name of the attribute to update.
 * @param {?} values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @param {?=} sanitizer An optional sanitizer function
 * @param {?=} namespace
 * @return {?} itself, so that it may be chained.
 */
function ɵɵattributeInterpolateV(attrName, values, sanitizer, namespace) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolationV(lView, values);
    if (interpolated !== NO_CHANGE) {
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);
        if (ngDevMode) {
            /** @type {?} */
            const interpolationInBetween = [values[0]];
            for (let i = 2; i < values.length; i += 2) {
                interpolationInBetween.push(values[i]);
            }
            storePropertyBindingMetadata(getTView().data, tNode, 'attr.' + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
        }
    }
    return ɵɵattributeInterpolateV;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/change_detection.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Synchronously perform change detection on a component (and possibly its sub-components).
 *
 * This function triggers change detection in a synchronous way on a component.
 *
 * @param {?} component The component which the change detection should be performed on.
 * @return {?}
 */
function detectChanges(component) {
    /** @type {?} */
    const view = getComponentViewByInstance(component);
    detectChangesInternal(view[TVIEW], view, component);
}
/**
 * Marks the component as dirty (needing change detection). Marking a component dirty will
 * schedule a change detection on it at some point in the future.
 *
 * Marking an already dirty component as dirty won't do anything. Only one outstanding change
 * detection can be scheduled per component tree.
 *
 * @param {?} component Component to mark as dirty.
 * @return {?}
 */
function markDirty(component) {
    ngDevMode && assertDefined(component, 'component');
    /** @type {?} */
    const rootView = (/** @type {?} */ (markViewDirty(getComponentViewByInstance(component))));
    ngDevMode && assertDefined(rootView[CONTEXT], 'rootContext should be defined');
    scheduleTick((/** @type {?} */ (rootView[CONTEXT])), 1 /* DetectChanges */);
}
/**
 * Used to perform change detection on the whole application.
 *
 * This is equivalent to `detectChanges`, but invoked on root component. Additionally, `tick`
 * executes lifecycle hooks and conditionally checks components based on their
 * `ChangeDetectionStrategy` and dirtiness.
 *
 * The preferred way to trigger change detection is to call `markDirty`. `markDirty` internally
 * schedules `tick` using a scheduler in order to coalesce multiple `markDirty` calls into a
 * single change detection run. By default, the scheduler is `requestAnimationFrame`, but can
 * be changed when calling `renderComponent` and providing the `scheduler` option.
 * @template T
 * @param {?} component
 * @return {?}
 */
function tick(component) {
    /** @type {?} */
    const rootView = getRootView(component);
    /** @type {?} */
    const rootContext = (/** @type {?} */ (rootView[CONTEXT]));
    tickRootContext(rootContext);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/container.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Creates an LContainer for inline views, e.g.
 *
 * % if (showing) {
 *   <div></div>
 * % }
 *
 * \@codeGenApi
 * @param {?} index The index of the container in the data array
 *
 * @return {?}
 */
function ɵɵcontainer(index) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const tNode = containerInternal(tView, lView, index, null, null);
    if (tView.firstCreatePass) {
        tNode.tViews = [];
    }
    setIsNotParent();
}
/**
 * @param {?} index
 * @param {?} tView
 * @param {?} lView
 * @param {?} templateFn
 * @param {?} decls
 * @param {?} vars
 * @param {?=} tagName
 * @param {?=} attrsIndex
 * @param {?=} localRefsIndex
 * @return {?}
 */
function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {
    ngDevMode && assertFirstCreatePass(tView);
    ngDevMode && ngDevMode.firstCreatePass++;
    /** @type {?} */
    const tViewConsts = tView.consts;
    // TODO(pk): refactor getOrCreateTNode to have the "create" only version
    /** @type {?} */
    const tNode = getOrCreateTNode(tView, lView[T_HOST], index, 0 /* Container */, tagName || null, getConstant(tViewConsts, attrsIndex));
    resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
    registerPostOrderHooks(tView, tNode);
    /** @type {?} */
    const embeddedTView = tNode.tViews = createTView(2 /* Embedded */, -1, templateFn, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, tView.schemas, tViewConsts);
    /** @type {?} */
    const embeddedTViewNode = (/** @type {?} */ (createTNode(tView, null, 2 /* View */, -1, null, null)));
    embeddedTViewNode.injectorIndex = tNode.injectorIndex;
    embeddedTView.node = embeddedTViewNode;
    if (tView.queries !== null) {
        tView.queries.template(tView, tNode);
        embeddedTView.queries = tView.queries.embeddedTView(tNode);
    }
    return tNode;
}
/**
 * Creates an LContainer for an ng-template (dynamically-inserted view), e.g.
 *
 * <ng-template #foo>
 *    <div></div>
 * </ng-template>
 *
 * \@codeGenApi
 * @param {?} index The index of the container in the data array
 * @param {?} templateFn Inline template
 * @param {?} decls The number of nodes, local refs, and pipes for this template
 * @param {?} vars The number of bindings for this template
 * @param {?=} tagName The name of the container element, if applicable
 * @param {?=} attrsIndex Index of template attributes in the `consts` array.
 * @param {?=} localRefsIndex
 * @param {?=} localRefExtractor A function which extracts local-refs values from the template.
 *        Defaults to the current element associated with the local-ref.
 *
 * @return {?}
 */
function ɵɵtemplate(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const adjustedIndex = index + HEADER_OFFSET;
    /** @type {?} */
    const tNode = tView.firstCreatePass ?
        templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) :
        (/** @type {?} */ (tView.data[adjustedIndex]));
    setPreviousOrParentTNode(tNode, false);
    /** @type {?} */
    const comment = lView[RENDERER].createComment(ngDevMode ? 'container' : '');
    appendChild(tView, lView, comment, tNode);
    attachPatchData(comment, lView);
    addToViewTree(lView, lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode));
    if (isDirectiveHost(tNode)) {
        createDirectivesInstances(tView, lView, tNode);
    }
    if (localRefsIndex != null) {
        saveResolvedLocalsInData(lView, tNode, localRefExtractor);
    }
}
/**
 * Sets a container up to receive views.
 *
 * \@codeGenApi
 * @param {?} index The index of the container in the data array
 *
 * @return {?}
 */
function ɵɵcontainerRefreshStart(index) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    let previousOrParentTNode = (/** @type {?} */ (load(tView.data, index)));
    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);
    setPreviousOrParentTNode(previousOrParentTNode, true);
    lView[index + HEADER_OFFSET][ACTIVE_INDEX] = 0;
    // We need to execute init hooks here so ngOnInit hooks are called in top level views
    // before they are called in embedded views (for backwards compatibility).
    if (!getCheckNoChangesMode()) {
        /** @type {?} */
        const hooksInitPhaseCompleted = (lView[FLAGS] & 3 /* InitPhaseStateMask */) === 3 /* InitPhaseCompleted */;
        if (hooksInitPhaseCompleted) {
            /** @type {?} */
            const preOrderCheckHooks = tView.preOrderCheckHooks;
            if (preOrderCheckHooks !== null) {
                executeCheckHooks(lView, preOrderCheckHooks, null);
            }
        }
        else {
            /** @type {?} */
            const preOrderHooks = tView.preOrderHooks;
            if (preOrderHooks !== null) {
                executeInitAndCheckHooks(lView, preOrderHooks, 0 /* OnInitHooksToBeRun */, null);
            }
            incrementInitPhaseFlags(lView, 0 /* OnInitHooksToBeRun */);
        }
    }
}
/**
 * Marks the end of the LContainer.
 *
 * Marking the end of LContainer is the time when to child views get inserted or removed.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵcontainerRefreshEnd() {
    /** @type {?} */
    let previousOrParentTNode = getPreviousOrParentTNode();
    if (getIsParent()) {
        setIsNotParent();
    }
    else {
        ngDevMode && assertNodeType(previousOrParentTNode, 2 /* View */);
        ngDevMode && assertHasParent(previousOrParentTNode);
        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));
        setPreviousOrParentTNode(previousOrParentTNode, false);
    }
    ngDevMode && assertNodeType(previousOrParentTNode, 0 /* Container */);
    /** @type {?} */
    const lContainer = getLView()[previousOrParentTNode.index];
    /** @type {?} */
    const nextIndex = getLContainerActiveIndex(lContainer);
    // remove extra views at the end of the container
    while (nextIndex < lContainer.length - CONTAINER_HEADER_OFFSET) {
        removeView(lContainer, nextIndex);
    }
}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} nodeIndex
 * @param {?} tagName
 * @param {?} attrs
 * @return {?}
 */
function containerInternal(tView, lView, nodeIndex, tagName, attrs) {
    ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'container nodes should be created before any bindings');
    /** @type {?} */
    const adjustedIndex = nodeIndex + HEADER_OFFSET;
    ngDevMode && assertDataInRange(lView, nodeIndex + HEADER_OFFSET);
    ngDevMode && ngDevMode.rendererCreateComment++;
    /** @type {?} */
    const comment = lView[adjustedIndex] =
        lView[RENDERER].createComment(ngDevMode ? 'container' : '');
    /** @type {?} */
    const tNode = getOrCreateTNode(tView, lView[T_HOST], nodeIndex, 0 /* Container */, tagName, attrs);
    /** @type {?} */
    const lContainer = lView[adjustedIndex] = createLContainer(comment, lView, comment, tNode);
    appendChild(tView, lView, comment, tNode);
    attachPatchData(comment, lView);
    // Containers are added to the current view tree instead of their embedded views
    // because views can be removed and re-inserted.
    addToViewTree(lView, lContainer);
    ngDevMode && assertNodeType(getPreviousOrParentTNode(), 0 /* Container */);
    return tNode;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/storage.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Store a value in the `data` at a given `index`.
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} index
 * @param {?} value
 * @return {?}
 */
function store(tView, lView, index, value) {
    // We don't store any static data for local variables, so the first time
    // we see the template, we should store as null to avoid a sparse array
    /** @type {?} */
    const adjustedIndex = index + HEADER_OFFSET;
    if (adjustedIndex >= tView.data.length) {
        tView.data[adjustedIndex] = null;
        tView.blueprint[adjustedIndex] = null;
    }
    lView[adjustedIndex] = value;
}
/**
 * Retrieves a local reference from the current contextViewData.
 *
 * If the reference to retrieve is in a parent view, this instruction is used in conjunction
 * with a nextContext() call, which walks up the tree and updates the contextViewData instance.
 *
 * \@codeGenApi
 * @template T
 * @param {?} index The index of the local ref in contextViewData.
 *
 * @return {?}
 */
function ɵɵreference(index) {
    /** @type {?} */
    const contextLView = getContextLView();
    return load(contextLView, index);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/di.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} token
 * @param {?=} flags
 * @return {?}
 */
function ɵɵdirectiveInject(token, flags = InjectFlags.Default) {
    /** @type {?} */
    const lView = getLView();
    // Fall back to inject() if view hasn't been created. This situation can happen in tests
    // if inject utilities are used before bootstrapping.
    if (lView == null)
        return ɵɵinject(token, flags);
    /** @type {?} */
    const tNode = getPreviousOrParentTNode();
    return getOrCreateInjectable((/** @type {?} */ (tNode)), lView, resolveForwardRef(token), flags);
}
/**
 * Facade for the attribute injection from DI.
 *
 * \@codeGenApi
 * @param {?} attrNameToInject
 * @return {?}
 */
function ɵɵinjectAttribute(attrNameToInject) {
    return injectAttributeImpl(getPreviousOrParentTNode(), attrNameToInject);
}
/**
 * Throws an error indicating that a factory function could not be generated by the compiler for a
 * particular class.
 *
 * This instruction allows the actual error message to be optimized away when ngDevMode is turned
 * off, saving bytes of generated code while still providing a good experience in dev mode.
 *
 * The name of the class is not mentioned here, but will be in the generated factory function name
 * and thus in the stack trace.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵinvalidFactory() {
    /** @type {?} */
    const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : 'invalid';
    throw new Error(msg);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/property.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Update a property on a selected element.
 *
 * Operates on the element selected by index via the {\@link select} instruction.
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled
 *
 * \@codeGenApi
 * @template T
 * @param {?} propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param {?} value New value to write.
 * @param {?=} sanitizer An optional function used to sanitize the value.
 * @return {?} This function returns itself so that it may be chained
 * (e.g. `property('name', ctx.name)('title', ctx.title)`)
 *
 */
function ɵɵproperty(propName, value, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, value)) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
    }
    return ɵɵproperty;
}
/**
 * Given `<div style="..." my-dir>` and `MyDir` with `\@Input('style')` we need to write to
 * directive input.
 * @param {?} tView
 * @param {?} tNode
 * @param {?} lView
 * @param {?} value
 * @param {?} isClassBased
 * @return {?}
 */
function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
    /** @type {?} */
    const inputs = (/** @type {?} */ (tNode.inputs));
    /** @type {?} */
    const property = isClassBased ? 'class' : 'style';
    // We support both 'class' and `className` hence the fallback.
    setInputsForProperty(tView, lView, inputs[property], property, value);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/element.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} index
 * @param {?} tView
 * @param {?} lView
 * @param {?} native
 * @param {?} name
 * @param {?=} attrsIndex
 * @param {?=} localRefsIndex
 * @return {?}
 */
function elementStartFirstCreatePass(index, tView, lView, native, name, attrsIndex, localRefsIndex) {
    ngDevMode && assertFirstCreatePass(tView);
    ngDevMode && ngDevMode.firstCreatePass++;
    /** @type {?} */
    const tViewConsts = tView.consts;
    /** @type {?} */
    const attrs = getConstant(tViewConsts, attrsIndex);
    /** @type {?} */
    const tNode = getOrCreateTNode(tView, lView[T_HOST], index, 3 /* Element */, name, attrs);
    /** @type {?} */
    const hasDirectives = resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
    ngDevMode && warnAboutUnknownElement(tView, lView, native, tNode, hasDirectives);
    if (tNode.mergedAttrs !== null) {
        computeStaticStyling(tNode, tNode.mergedAttrs);
    }
    if (tView.queries !== null) {
        tView.queries.elementStart(tView, tNode);
    }
    return tNode;
}
/**
 * Create DOM element. The instruction must later be followed by `elementEnd()` call.
 *
 * \@codeGenApi
 * @param {?} index Index of the element in the LView array
 * @param {?} name Name of the DOM Node
 * @param {?=} attrsIndex Index of the element's attributes in the `consts` array.
 * @param {?=} localRefsIndex Index of the element's local references in the `consts` array.
 *
 * Attributes and localRefs are passed as an array of strings where elements with an even index
 * hold an attribute name and elements with an odd index hold an attribute value, ex.:
 * ['id', 'warning5', 'class', 'alert']
 *
 * @return {?}
 */
function ɵɵelementStart(index, name, attrsIndex, localRefsIndex) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const adjustedIndex = HEADER_OFFSET + index;
    ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'elements should be created before any bindings');
    ngDevMode && ngDevMode.rendererCreateElement++;
    ngDevMode && assertDataInRange(lView, adjustedIndex);
    /** @type {?} */
    const renderer = lView[RENDERER];
    /** @type {?} */
    const native = lView[adjustedIndex] = elementCreate(name, renderer, getNamespace());
    /** @type {?} */
    const tNode = tView.firstCreatePass ?
        elementStartFirstCreatePass(index, tView, lView, native, name, attrsIndex, localRefsIndex) :
        (/** @type {?} */ (tView.data[adjustedIndex]));
    setPreviousOrParentTNode(tNode, true);
    /** @type {?} */
    const mergedAttrs = tNode.mergedAttrs;
    if (mergedAttrs !== null) {
        setUpAttributes(renderer, native, mergedAttrs);
    }
    /** @type {?} */
    const classes = tNode.classes;
    if (classes !== null) {
        writeDirectClass(renderer, native, classes);
    }
    /** @type {?} */
    const styles = tNode.styles;
    if (styles !== null) {
        writeDirectStyle(renderer, native, styles);
    }
    appendChild(tView, lView, native, tNode);
    // any immediate children of a component or template container must be pre-emptively
    // monkey-patched with the component view data so that the element can be inspected
    // later on using any element discovery utility methods (see `element_discovery.ts`)
    if (getElementDepthCount() === 0) {
        attachPatchData(native, lView);
    }
    increaseElementDepthCount();
    if (isDirectiveHost(tNode)) {
        createDirectivesInstances(tView, lView, tNode);
        executeContentQueries(tView, tNode, lView);
    }
    if (localRefsIndex !== null) {
        saveResolvedLocalsInData(lView, tNode);
    }
}
/**
 * Mark the end of the element.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵelementEnd() {
    /** @type {?} */
    let previousOrParentTNode = getPreviousOrParentTNode();
    ngDevMode && assertDefined(previousOrParentTNode, 'No parent node to close.');
    if (getIsParent()) {
        setIsNotParent();
    }
    else {
        ngDevMode && assertHasParent(getPreviousOrParentTNode());
        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));
        setPreviousOrParentTNode(previousOrParentTNode, false);
    }
    /** @type {?} */
    const tNode = previousOrParentTNode;
    ngDevMode && assertNodeType(tNode, 3 /* Element */);
    decreaseElementDepthCount();
    /** @type {?} */
    const tView = getTView();
    if (tView.firstCreatePass) {
        registerPostOrderHooks(tView, previousOrParentTNode);
        if (isContentQueryHost(previousOrParentTNode)) {
            (/** @type {?} */ (tView.queries)).elementEnd(previousOrParentTNode);
        }
    }
    if (tNode.classes !== null && hasClassInput(tNode)) {
        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classes, true);
    }
    if (tNode.styles !== null && hasStyleInput(tNode)) {
        setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.styles, false);
    }
}
/**
 * Creates an empty element using {\@link elementStart} and {\@link elementEnd}
 *
 * \@codeGenApi
 * @param {?} index Index of the element in the data array
 * @param {?} name Name of the DOM Node
 * @param {?=} attrsIndex Index of the element's attributes in the `consts` array.
 * @param {?=} localRefsIndex Index of the element's local references in the `consts` array.
 *
 * @return {?}
 */
function ɵɵelement(index, name, attrsIndex, localRefsIndex) {
    ɵɵelementStart(index, name, attrsIndex, localRefsIndex);
    ɵɵelementEnd();
}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} element
 * @param {?} tNode
 * @param {?} hasDirectives
 * @return {?}
 */
function warnAboutUnknownElement(tView, lView, element, tNode, hasDirectives) {
    /** @type {?} */
    const schemas = tView.schemas;
    // If `schemas` is set to `null`, that's an indication that this Component was compiled in AOT
    // mode where this check happens at compile time. In JIT mode, `schemas` is always present and
    // defined as an array (as an empty array in case `schemas` field is not defined) and we should
    // execute the check below.
    if (schemas === null)
        return;
    /** @type {?} */
    const tagName = tNode.tagName;
    // If the element matches any directive, it's considered as valid.
    if (!hasDirectives && tagName !== null) {
        // The element is unknown if it's an instance of HTMLUnknownElement or it isn't registered
        // as a custom element. Note that unknown elements with a dash in their name won't be instances
        // of HTMLUnknownElement in browsers that support web components.
        /** @type {?} */
        const isUnknown = 
        // Note that we can't check for `typeof HTMLUnknownElement === 'function'`,
        // because while most browsers return 'function', IE returns 'object'.
        (typeof HTMLUnknownElement !== 'undefined' && HTMLUnknownElement &&
            element instanceof HTMLUnknownElement) ||
            (typeof customElements !== 'undefined' && tagName.indexOf('-') > -1 &&
                !customElements.get(tagName));
        if (isUnknown && !matchingSchemas(tView, lView, tagName)) {
            /** @type {?} */
            let warning = `'${tagName}' is not a known element:\n`;
            warning +=
                `1. If '${tagName}' is an Angular component, then verify that it is part of this module.\n`;
            if (tagName && tagName.indexOf('-') > -1) {
                warning +=
                    `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the '@NgModule.schemas' of this component to suppress this message.`;
            }
            else {
                warning +=
                    `2. To allow any element add 'NO_ERRORS_SCHEMA' to the '@NgModule.schemas' of this component.`;
            }
            console.warn(warning);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/element_container.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} index
 * @param {?} tView
 * @param {?} lView
 * @param {?=} attrsIndex
 * @param {?=} localRefsIndex
 * @return {?}
 */
function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
    ngDevMode && ngDevMode.firstCreatePass++;
    /** @type {?} */
    const tViewConsts = tView.consts;
    /** @type {?} */
    const attrs = getConstant(tViewConsts, attrsIndex);
    /** @type {?} */
    const tNode = getOrCreateTNode(tView, lView[T_HOST], index, 4 /* ElementContainer */, 'ng-container', attrs);
    // While ng-container doesn't necessarily support styling, we use the style context to identify
    // and execute directives on the ng-container.
    if (attrs !== null) {
        computeStaticStyling(tNode, attrs);
    }
    /** @type {?} */
    const localRefs = getConstant(tViewConsts, localRefsIndex);
    resolveDirectives(tView, lView, tNode, localRefs);
    if (tView.queries !== null) {
        tView.queries.elementStart(tView, tNode);
    }
    return tNode;
}
/**
 * Creates a logical container for other nodes (<ng-container>) backed by a comment node in the DOM.
 * The instruction must later be followed by `elementContainerEnd()` call.
 *
 * \@codeGenApi
 * @param {?} index Index of the element in the LView array
 * @param {?=} attrsIndex Index of the container attributes in the `consts` array.
 * @param {?=} localRefsIndex Index of the container's local references in the `consts` array.
 *
 * Even if this instruction accepts a set of attributes no actual attribute values are propagated to
 * the DOM (as a comment node can't have attributes). Attributes are here only for directive
 * matching purposes and setting initial inputs of directives.
 *
 * @return {?}
 */
function ɵɵelementContainerStart(index, attrsIndex, localRefsIndex) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const adjustedIndex = index + HEADER_OFFSET;
    ngDevMode && assertDataInRange(lView, adjustedIndex);
    ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'element containers should be created before any bindings');
    /** @type {?} */
    const tNode = tView.firstCreatePass ?
        elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) :
        (/** @type {?} */ (tView.data[adjustedIndex]));
    setPreviousOrParentTNode(tNode, true);
    ngDevMode && ngDevMode.rendererCreateComment++;
    /** @type {?} */
    const native = lView[adjustedIndex] =
        lView[RENDERER].createComment(ngDevMode ? 'ng-container' : '');
    appendChild(tView, lView, native, tNode);
    attachPatchData(native, lView);
    if (isDirectiveHost(tNode)) {
        createDirectivesInstances(tView, lView, tNode);
        executeContentQueries(tView, tNode, lView);
    }
    if (localRefsIndex != null) {
        saveResolvedLocalsInData(lView, tNode);
    }
}
/**
 * Mark the end of the <ng-container>.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵelementContainerEnd() {
    /** @type {?} */
    let previousOrParentTNode = getPreviousOrParentTNode();
    /** @type {?} */
    const tView = getTView();
    if (getIsParent()) {
        setIsNotParent();
    }
    else {
        ngDevMode && assertHasParent(previousOrParentTNode);
        previousOrParentTNode = (/** @type {?} */ (previousOrParentTNode.parent));
        setPreviousOrParentTNode(previousOrParentTNode, false);
    }
    ngDevMode && assertNodeType(previousOrParentTNode, 4 /* ElementContainer */);
    if (tView.firstCreatePass) {
        registerPostOrderHooks(tView, previousOrParentTNode);
        if (isContentQueryHost(previousOrParentTNode)) {
            (/** @type {?} */ (tView.queries)).elementEnd(previousOrParentTNode);
        }
    }
}
/**
 * Creates an empty logical container using {\@link elementContainerStart}
 * and {\@link elementContainerEnd}
 *
 * \@codeGenApi
 * @param {?} index Index of the element in the LView array
 * @param {?=} attrsIndex Index of the container attributes in the `consts` array.
 * @param {?=} localRefsIndex Index of the container's local references in the `consts` array.
 *
 * @return {?}
 */
function ɵɵelementContainer(index, attrsIndex, localRefsIndex) {
    ɵɵelementContainerStart(index, attrsIndex, localRefsIndex);
    ɵɵelementContainerEnd();
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/embedded_view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Marks the start of an embedded view.
 *
 * \@codeGenApi
 * @param {?} viewBlockId The ID of this view
 * @param {?} decls
 * @param {?} vars
 * @return {?} boolean Whether or not this view is in creation mode
 *
 */
function ɵɵembeddedViewStart(viewBlockId, decls, vars) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const previousOrParentTNode = getPreviousOrParentTNode();
    // The previous node can be a view node if we are processing an inline for loop
    /** @type {?} */
    const containerTNode = previousOrParentTNode.type === 2 /* View */ ?
        (/** @type {?} */ (previousOrParentTNode.parent)) :
        previousOrParentTNode;
    /** @type {?} */
    const lContainer = (/** @type {?} */ (lView[containerTNode.index]));
    ngDevMode && assertNodeType(containerTNode, 0 /* Container */);
    /** @type {?} */
    let viewToRender = scanForView(lContainer, getLContainerActiveIndex(lContainer), viewBlockId);
    if (viewToRender) {
        setIsParent();
        enterView(viewToRender, viewToRender[TVIEW].node);
    }
    else {
        // When we create a new LView, we always reset the state of the instructions.
        viewToRender = createLView(lView, getOrCreateEmbeddedTView(viewBlockId, decls, vars, (/** @type {?} */ (containerTNode))), null, 16 /* CheckAlways */, null, null);
        /** @type {?} */
        const tParentNode = getIsParent() ? previousOrParentTNode :
            previousOrParentTNode && previousOrParentTNode.parent;
        assignTViewNodeToLView(viewToRender[TVIEW], tParentNode, viewBlockId, viewToRender);
        enterView(viewToRender, viewToRender[TVIEW].node);
    }
    if (lContainer) {
        if (isCreationMode(viewToRender)) {
            // it is a new view, insert it into collection of views for a given container
            insertView(viewToRender[TVIEW], viewToRender, lContainer, getLContainerActiveIndex(lContainer));
        }
        lContainer[ACTIVE_INDEX] += 2 /* INCREMENT */;
    }
    return isCreationMode(viewToRender) ? 1 /* Create */ | 2 /* Update */ :
        2 /* Update */;
}
/**
 * Initialize the TView (e.g. static data) for the active embedded view.
 *
 * Each embedded view block must create or retrieve its own TView. Otherwise, the embedded view's
 * static data for a particular node would overwrite the static data for a node in the view above
 * it with the same index (since it's in the same template).
 *
 * @param {?} viewIndex The index of the TView in TNode.tViews
 * @param {?} decls The number of nodes, local refs, and pipes in this template
 * @param {?} vars The number of bindings and pure function bindings in this template
 * @param {?} parent
 * @return {?} TView
 */
function getOrCreateEmbeddedTView(viewIndex, decls, vars, parent) {
    /** @type {?} */
    const tView = getLView()[TVIEW];
    ngDevMode && assertNodeType(parent, 0 /* Container */);
    /** @type {?} */
    const containerTViews = (/** @type {?} */ (parent.tViews));
    ngDevMode && assertDefined(containerTViews, 'TView expected');
    ngDevMode && assertEqual(Array.isArray(containerTViews), true, 'TViews should be in an array');
    if (viewIndex >= containerTViews.length || containerTViews[viewIndex] == null) {
        containerTViews[viewIndex] = createTView(2 /* Embedded */, viewIndex, null, decls, vars, tView.directiveRegistry, tView.pipeRegistry, null, null, tView.consts);
    }
    return containerTViews[viewIndex];
}
/**
 * Looks for a view with a given view block id inside a provided LContainer.
 * Removes views that need to be deleted in the process.
 *
 * @param {?} lContainer to search for views
 * @param {?} startIdx starting index in the views array to search from
 * @param {?} viewBlockId exact view block id to look for
 * @return {?}
 */
function scanForView(lContainer, startIdx, viewBlockId) {
    for (let i = startIdx + CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
        /** @type {?} */
        const viewAtPositionId = lContainer[i][TVIEW].id;
        if (viewAtPositionId === viewBlockId) {
            return lContainer[i];
        }
        else if (viewAtPositionId < viewBlockId) {
            // found a view that should not be at this position - remove
            removeView(lContainer, i - CONTAINER_HEADER_OFFSET);
        }
        else {
            // found a view with id greater than the one we are searching for
            // which means that required view doesn't exist and can't be found at
            // later positions in the views array - stop the searchdef.cont here
            break;
        }
    }
    return null;
}
/**
 * Marks the end of an embedded view.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵembeddedViewEnd() {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const viewHost = lView[T_HOST];
    /** @type {?} */
    const context = lView[CONTEXT];
    if (isCreationMode(lView)) {
        renderView(tView, lView, context); // creation mode pass
    }
    refreshView(tView, lView, tView.template, context); // update mode pass
    // update mode pass
    /** @type {?} */
    const lContainer = (/** @type {?} */ (lView[PARENT]));
    ngDevMode && assertLContainerOrUndefined(lContainer);
    leaveView();
    setPreviousOrParentTNode((/** @type {?} */ (viewHost)), false);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/get_current_view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Returns the current OpaqueViewState instance.
 *
 * Used in conjunction with the restoreView() instruction to save a snapshot
 * of the current view and restore it when listeners are invoked. This allows
 * walking the declaration view tree in listeners to get vars from parent views.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵgetCurrentView() {
    return (/** @type {?} */ ((/** @type {?} */ (getLView()))));
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Determine if the argument is shaped like a Promise
 */
function isPromise(obj) {
    // allow any Promise/A+ compliant thenable.
    // It's up to the caller to ensure that obj.then conforms to the spec
    return !!obj && typeof obj.then === 'function';
}
/**
 * Determine if the argument is an Observable
 */
function isObservable(obj) {
    // TODO: use isObservable once we update pass rxjs 6.1
    // https://github.com/ReactiveX/rxjs/blob/master/CHANGELOG.md#610-2018-05-03
    return !!obj && typeof obj.subscribe === 'function';
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/listener.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Adds an event listener to the current node.
 *
 * If an output exists on one of the node's directives, it also subscribes to the output
 * and saves the subscription for later cleanup.
 *
 * \@codeGenApi
 * @param {?} eventName Name of the event
 * @param {?} listenerFn The function to be called when event emits
 * @param {?=} useCapture Whether or not to use capture in event listener
 * @param {?=} eventTargetResolver Function that returns global target information in case this listener
 * should be attached to a global object like window, document or body
 *
 * @return {?}
 */
function ɵɵlistener(eventName, listenerFn, useCapture = false, eventTargetResolver) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const tNode = getPreviousOrParentTNode();
    listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, useCapture, eventTargetResolver);
    return ɵɵlistener;
}
/**
 * Registers a synthetic host listener (e.g. `(\@foo.start)`) on a component.
 *
 * This instruction is for compatibility purposes and is designed to ensure that a
 * synthetic host listener (e.g. `\@HostListener('\@foo.start')`) properly gets rendered
 * in the component's renderer. Normally all host listeners are evaluated with the
 * parent component's renderer, but, in the case of animation \@triggers, they need
 * to be evaluated with the sub component's renderer (because that's where the
 * animation triggers are defined).
 *
 * Do not use this instruction as a replacement for `listener`. This instruction
 * only exists to ensure compatibility with the ViewEngine's host binding behavior.
 *
 * \@codeGenApi
 * @param {?} eventName Name of the event
 * @param {?} listenerFn The function to be called when event emits
 * @param {?=} useCapture Whether or not to use capture in event listener
 * @param {?=} eventTargetResolver Function that returns global target information in case this listener
 * should be attached to a global object like window, document or body
 *
 * @return {?}
 */
function ɵɵcomponentHostSyntheticListener(eventName, listenerFn, useCapture = false, eventTargetResolver) {
    /** @type {?} */
    const tNode = getPreviousOrParentTNode();
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const renderer = loadComponentRenderer(tNode, lView);
    /** @type {?} */
    const tView = getTView();
    listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture, eventTargetResolver);
    return ɵɵcomponentHostSyntheticListener;
}
/**
 * A utility function that checks if a given element has already an event handler registered for an
 * event with a specified name. The TView.cleanup data structure is used to find out which events
 * are registered for a given element.
 * @param {?} tView
 * @param {?} lView
 * @param {?} eventName
 * @param {?} tNodeIdx
 * @return {?}
 */
function findExistingListener(tView, lView, eventName, tNodeIdx) {
    /** @type {?} */
    const tCleanup = tView.cleanup;
    if (tCleanup != null) {
        for (let i = 0; i < tCleanup.length - 1; i += 2) {
            /** @type {?} */
            const cleanupEventName = tCleanup[i];
            if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
                // We have found a matching event name on the same node but it might not have been
                // registered yet, so we must explicitly verify entries in the LView cleanup data
                // structures.
                /** @type {?} */
                const lCleanup = (/** @type {?} */ (lView[CLEANUP]));
                /** @type {?} */
                const listenerIdxInLCleanup = tCleanup[i + 2];
                return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
            }
            // TView.cleanup can have a mix of 4-elements entries (for event handler cleanups) or
            // 2-element entries (for directive and queries destroy hooks). As such we can encounter
            // blocks of 4 or 2 items in the tView.cleanup and this is why we iterate over 2 elements
            // first and jump another 2 elements if we detect listeners cleanup (4 elements). Also check
            // documentation of TView.cleanup for more details of this data structure layout.
            if (typeof cleanupEventName === 'string') {
                i += 2;
            }
        }
    }
    return null;
}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} renderer
 * @param {?} tNode
 * @param {?} eventName
 * @param {?} listenerFn
 * @param {?=} useCapture
 * @param {?=} eventTargetResolver
 * @return {?}
 */
function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, useCapture = false, eventTargetResolver) {
    /** @type {?} */
    const isTNodeDirectiveHost = isDirectiveHost(tNode);
    /** @type {?} */
    const firstCreatePass = tView.firstCreatePass;
    /** @type {?} */
    const tCleanup = firstCreatePass && (tView.cleanup || (tView.cleanup = []));
    // When the ɵɵlistener instruction was generated and is executed we know that there is either a
    // native listener or a directive output on this element. As such we we know that we will have to
    // register a listener and store its cleanup function on LView.
    /** @type {?} */
    const lCleanup = getLCleanup(lView);
    ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);
    /** @type {?} */
    let processOutputs = true;
    // add native event listener - applicable to elements only
    if (tNode.type === 3 /* Element */) {
        /** @type {?} */
        const native = (/** @type {?} */ (getNativeByTNode(tNode, lView)));
        /** @type {?} */
        const resolved = eventTargetResolver ? eventTargetResolver(native) : (/** @type {?} */ (EMPTY_OBJ));
        /** @type {?} */
        const target = resolved.target || native;
        /** @type {?} */
        const lCleanupIndex = lCleanup.length;
        /** @type {?} */
        const idxOrTargetGetter = eventTargetResolver ?
            (/**
             * @param {?} _lView
             * @return {?}
             */
            (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])).target) :
            tNode.index;
        // In order to match current behavior, native DOM event listeners must be added for all
        // events (including outputs).
        if (isProceduralRenderer(renderer)) {
            // There might be cases where multiple directives on the same element try to register an event
            // handler function for the same event. In this situation we want to avoid registration of
            // several native listeners as each registration would be intercepted by NgZone and
            // trigger change detection. This would mean that a single user action would result in several
            // change detections being invoked. To avoid this situation we want to have only one call to
            // native handler registration (for the same element and same type of event).
            //
            // In order to have just one native event handler in presence of multiple handler functions,
            // we just register a first handler function as a native event listener and then chain
            // (coalesce) other handler functions on top of the first native handler function.
            /** @type {?} */
            let existingListener = null;
            // Please note that the coalescing described here doesn't happen for events specifying an
            // alternative target (ex. (document:click)) - this is to keep backward compatibility with the
            // view engine.
            // Also, we don't have to search for existing listeners is there are no directives
            // matching on a given node as we can't register multiple event handlers for the same event in
            // a template (this would mean having duplicate attributes).
            if (!eventTargetResolver && isTNodeDirectiveHost) {
                existingListener = findExistingListener(tView, lView, eventName, tNode.index);
            }
            if (existingListener !== null) {
                // Attach a new listener to coalesced listeners list, maintaining the order in which
                // listeners are registered. For performance reasons, we keep a reference to the last
                // listener in that list (in `__ngLastListenerFn__` field), so we can avoid going through
                // the entire set each time we need to add a new listener.
                /** @type {?} */
                const lastListenerFn = ((/** @type {?} */ (existingListener))).__ngLastListenerFn__ || existingListener;
                lastListenerFn.__ngNextListenerFn__ = listenerFn;
                ((/** @type {?} */ (existingListener))).__ngLastListenerFn__ = listenerFn;
                processOutputs = false;
            }
            else {
                // The first argument of `listen` function in Procedural Renderer is:
                // - either a target name (as a string) in case of global target (window, document, body)
                // - or element reference (in all other cases)
                listenerFn = wrapListener(tNode, lView, listenerFn, false /** preventDefault */);
                /** @type {?} */
                const cleanupFn = renderer.listen(resolved.name || target, eventName, listenerFn);
                ngDevMode && ngDevMode.rendererAddEventListener++;
                lCleanup.push(listenerFn, cleanupFn);
                tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
            }
        }
        else {
            listenerFn = wrapListener(tNode, lView, listenerFn, true /** preventDefault */);
            target.addEventListener(eventName, listenerFn, useCapture);
            ngDevMode && ngDevMode.rendererAddEventListener++;
            lCleanup.push(listenerFn);
            tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, useCapture);
        }
    }
    // subscribe to directive outputs
    /** @type {?} */
    const outputs = tNode.outputs;
    /** @type {?} */
    let props;
    if (processOutputs && outputs !== null && (props = outputs[eventName])) {
        /** @type {?} */
        const propsLength = props.length;
        if (propsLength) {
            for (let i = 0; i < propsLength; i += 2) {
                /** @type {?} */
                const index = (/** @type {?} */ (props[i]));
                ngDevMode && assertDataInRange(lView, index);
                /** @type {?} */
                const minifiedName = props[i + 1];
                /** @type {?} */
                const directiveInstance = lView[index];
                /** @type {?} */
                const output = directiveInstance[minifiedName];
                if (ngDevMode && !isObservable(output)) {
                    throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);
                }
                /** @type {?} */
                const subscription = output.subscribe(listenerFn);
                /** @type {?} */
                const idx = lCleanup.length;
                lCleanup.push(listenerFn, subscription);
                tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
            }
        }
    }
}
/**
 * @param {?} lView
 * @param {?} listenerFn
 * @param {?} e
 * @return {?}
 */
function executeListenerWithErrorHandling(lView, listenerFn, e) {
    try {
        // Only explicitly returning false from a listener should preventDefault
        return listenerFn(e) !== false;
    }
    catch (error) {
        handleError(lView, error);
        return false;
    }
}
/**
 * Wraps an event listener with a function that marks ancestors dirty and prevents default behavior,
 * if applicable.
 *
 * @param {?} tNode The TNode associated with this listener
 * @param {?} lView The LView that contains this listener
 * @param {?} listenerFn The listener function to call
 * @param {?} wrapWithPreventDefault Whether or not to prevent default behavior
 * (the procedural renderer does this already, so in those cases, we should skip)
 * @return {?}
 */
function wrapListener(tNode, lView, listenerFn, wrapWithPreventDefault) {
    // Note: we are performing most of the work in the listener function itself
    // to optimize listener registration.
    return (/**
     * @param {?} e
     * @return {?}
     */
    function wrapListenerIn_markDirtyAndPreventDefault(e) {
        // Ivy uses `Function` as a special token that allows us to unwrap the function
        // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`.
        if (e === Function) {
            return listenerFn;
        }
        // In order to be backwards compatible with View Engine, events on component host nodes
        // must also mark the component view itself dirty (i.e. the view that it owns).
        /** @type {?} */
        const startView = tNode.flags & 2 /* isComponentHost */ ?
            getComponentLViewByIndex(tNode.index, lView) :
            lView;
        // See interfaces/view.ts for more on LViewFlags.ManualOnPush
        if ((lView[FLAGS] & 32 /* ManualOnPush */) === 0) {
            markViewDirty(startView);
        }
        /** @type {?} */
        let result = executeListenerWithErrorHandling(lView, listenerFn, e);
        // A just-invoked listener function might have coalesced listeners so we need to check for
        // their presence and invoke as needed.
        /** @type {?} */
        let nextListenerFn = ((/** @type {?} */ (wrapListenerIn_markDirtyAndPreventDefault))).__ngNextListenerFn__;
        while (nextListenerFn) {
            // We should prevent default if any of the listeners explicitly return false
            result = executeListenerWithErrorHandling(lView, nextListenerFn, e) && result;
            nextListenerFn = ((/** @type {?} */ (nextListenerFn))).__ngNextListenerFn__;
        }
        if (wrapWithPreventDefault && result === false) {
            e.preventDefault();
            // Necessary for legacy browsers that don't support preventDefault (e.g. IE)
            e.returnValue = false;
        }
        return result;
    });
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/namespace.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/next_context.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Retrieves a context at the level specified and saves it as the global, contextViewData.
 * Will get the next level up if level is not specified.
 *
 * This is used to save contexts of parent views so they can be bound in embedded views, or
 * in conjunction with reference() to bind a ref from a parent view.
 *
 * \@codeGenApi
 * @template T
 * @param {?=} level The relative level of the view from which to grab context compared to contextVewData
 * @return {?} context
 *
 */
function ɵɵnextContext(level = 1) {
    return nextContextImpl(level);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/projection.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Checks a given node against matching projection slots and returns the
 * determined slot index. Returns "null" if no slot matched the given node.
 *
 * This function takes into account the parsed ngProjectAs selector from the
 * node's attributes. If present, it will check whether the ngProjectAs selector
 * matches any of the projection slot selectors.
 * @param {?} tNode
 * @param {?} projectionSlots
 * @return {?}
 */
function matchingProjectionSlotIndex(tNode, projectionSlots) {
    /** @type {?} */
    let wildcardNgContentIndex = null;
    /** @type {?} */
    const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);
    for (let i = 0; i < projectionSlots.length; i++) {
        /** @type {?} */
        const slotValue = projectionSlots[i];
        // The last wildcard projection slot should match all nodes which aren't matching
        // any selector. This is necessary to be backwards compatible with view engine.
        if (slotValue === '*') {
            wildcardNgContentIndex = i;
            continue;
        }
        // If we ran into an `ngProjectAs` attribute, we should match its parsed selector
        // to the list of selectors, otherwise we fall back to matching against the node.
        if (ngProjectAsAttrVal === null ?
            isNodeMatchingSelectorList(tNode, slotValue, /* isProjectionMode */ true) :
            isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
            return i; // first matching selector "captures" a given node
        }
    }
    return wildcardNgContentIndex;
}
/**
 * Instruction to distribute projectable nodes among <ng-content> occurrences in a given template.
 * It takes all the selectors from the entire component's template and decides where
 * each projected node belongs (it re-distributes nodes among "buckets" where each "bucket" is
 * backed by a selector).
 *
 * This function requires CSS selectors to be provided in 2 forms: parsed (by a compiler) and text,
 * un-parsed form.
 *
 * The parsed form is needed for efficient matching of a node against a given CSS selector.
 * The un-parsed, textual form is needed for support of the ngProjectAs attribute.
 *
 * Having a CSS selector in 2 different formats is not ideal, but alternatives have even more
 * drawbacks:
 * - having only a textual form would require runtime parsing of CSS selectors;
 * - we can't have only a parsed as we can't re-construct textual form from it (as entered by a
 * template author).
 *
 * \@codeGenApi
 * @param {?=} projectionSlots
 * @return {?}
 */
function ɵɵprojectionDef(projectionSlots) {
    /** @type {?} */
    const componentNode = (/** @type {?} */ (getLView()[DECLARATION_COMPONENT_VIEW][T_HOST]));
    if (!componentNode.projection) {
        // If no explicit projection slots are defined, fall back to a single
        // projection slot with the wildcard selector.
        /** @type {?} */
        const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
        /** @type {?} */
        const projectionHeads = componentNode.projection =
            newArray(numProjectionSlots, (/** @type {?} */ ((/** @type {?} */ (null)))));
        /** @type {?} */
        const tails = projectionHeads.slice();
        /** @type {?} */
        let componentChild = componentNode.child;
        while (componentChild !== null) {
            /** @type {?} */
            const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;
            if (slotIndex !== null) {
                if (tails[slotIndex]) {
                    (/** @type {?} */ (tails[slotIndex])).projectionNext = componentChild;
                }
                else {
                    projectionHeads[slotIndex] = componentChild;
                }
                tails[slotIndex] = componentChild;
            }
            componentChild = componentChild.next;
        }
    }
}
/** @type {?} */
let delayProjection = false;
/**
 * @param {?} value
 * @return {?}
 */
function setDelayProjection(value) {
    delayProjection = value;
}
/**
 * Inserts previously re-distributed projected nodes. This instruction must be preceded by a call
 * to the projectionDef instruction.
 *
 * \@codeGenApi
 * @param {?} nodeIndex
 * @param {?=} selectorIndex
 * @param {?=} attrs
 * @return {?}
 */
function ɵɵprojection(nodeIndex, selectorIndex = 0, attrs) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const tProjectionNode = getOrCreateTNode(tView, lView[T_HOST], nodeIndex, 1 /* Projection */, null, attrs || null);
    // We can't use viewData[HOST_NODE] because projection nodes can be nested in embedded views.
    if (tProjectionNode.projection === null)
        tProjectionNode.projection = selectorIndex;
    // `<ng-content>` has no content
    setIsNotParent();
    // We might need to delay the projection of nodes if they are in the middle of an i18n block
    if (!delayProjection) {
        // re-distribution of projectable nodes is stored on a component's view level
        applyProjection(tView, lView, tProjectionNode);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/property_interpolation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * Update an interpolated property on an element with a lone bound value
 *
 * Used when the value passed to a property has 1 interpolated value in it, an no additional text
 * surrounds that interpolated value:
 *
 * ```html
 * <div title="{{v0}}"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate('title', v0);
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update
 * @param {?} v0 Value checked for change.
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolate(propName, v0, sanitizer) {
    ɵɵpropertyInterpolate1(propName, '', v0, '', sanitizer);
    return ɵɵpropertyInterpolate;
}
/**
 *
 * Update an interpolated property on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div title="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate1('title', 'prefix', v0, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
    }
    return ɵɵpropertyInterpolate1;
}
/**
 *
 * Update an interpolated property on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate2('title', 'prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
    }
    return ɵɵpropertyInterpolate2;
}
/**
 *
 * Update an interpolated property on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate3(
 * 'title', 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
    }
    return ɵɵpropertyInterpolate3;
}
/**
 *
 * Update an interpolated property on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate4(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode &&
            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
    }
    return ɵɵpropertyInterpolate4;
}
/**
 *
 * Update an interpolated property on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate5(
 * 'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode &&
            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
    }
    return ɵɵpropertyInterpolate5;
}
/**
 *
 * Update an interpolated property on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate6(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode &&
            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
    }
    return ɵɵpropertyInterpolate6;
}
/**
 *
 * Update an interpolated property on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate7(
 *    'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
    }
    return ɵɵpropertyInterpolate7;
}
/**
 *
 * Update an interpolated property on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolate8(
 *  'title', 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} i6 Static value used for concatenation only.
 * @param {?} v7 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
    }
    return ɵɵpropertyInterpolate8;
}
/**
 * Update an interpolated property on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  title="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is::
 *
 * ```ts
 * ɵɵpropertyInterpolateV(
 *  'title', ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *
 * If the property name also exists as an input property on one of the element's directives,
 * the component property will be set instead of the element property. This check must
 * be conducted at runtime so child components that add new `\@Inputs` don't have to be re-compiled.
 *
 * \@codeGenApi
 * @param {?} propName The name of the property to update.
 * @param {?} values The collection of values and the strings inbetween those values, beginning with a
 * string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @param {?=} sanitizer An optional sanitizer function
 * @return {?} itself, so that it may be chained.
 */
function ɵɵpropertyInterpolateV(propName, values, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolationV(lView, values);
    if (interpolatedValue !== NO_CHANGE) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
        if (ngDevMode) {
            /** @type {?} */
            const interpolationInBetween = [values[0]];
            for (let i = 2; i < values.length; i += 2) {
                interpolationInBetween.push(values[i]);
            }
            storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
        }
    }
    return ɵɵpropertyInterpolateV;
}

/**
* @license
* Copyright Google Inc. All Rights Reserved.
*
* Use of this source code is governed by an MIT-style license that can be
* found in the LICENSE file at https://angular.io/license
*/
/**
 * This file contains reuseable "empty" symbols that can be used as default return values
 * in different parts of the rendering code. Because the same symbols are returned, this
 * allows for identity checks against these values to be consistently used by the framework
 * code.
 */
const EMPTY_OBJ$1 = {};
const EMPTY_ARRAY$3 = [];
// freezing the values prevents any code from accidentally inserting new values in
if ((typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode()) {
    // These property accesses can be ignored because ngDevMode will be set to false
    // when optimizing code and the whole if statement will be dropped.
    // tslint:disable-next-line:no-toplevel-property-access
    Object.freeze(EMPTY_OBJ$1);
    // tslint:disable-next-line:no-toplevel-property-access
    Object.freeze(EMPTY_ARRAY$3);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/styling/style_binding_list.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * NOTE: The word `styling` is used interchangeably as style or class styling.
 *
 * This file contains code to link styling instructions together so that they can be replayed in
 * priority order. The file exists because Ivy styling instruction execution order does not match
 * that of the priority order. The purpose of this code is to create a linked list so that the
 * instructions can be traversed in priority order when computing the styles.
 *
 * Assume we are dealing with the following code:
 * ```
 * \@Component({
 *   template: `
 *     <my-cmp [style]=" {color: '#001'} "
 *             [style.color]=" #002 "
 *             dir-style-color-1
 *             dir-style-color-2> `
 * })
 * class ExampleComponent {
 *   static ngComp = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#001'});
 *     ɵɵstyleProp('color', '#002');
 *     ...
 *   }
 * }
 *
 * \@Directive({
 *   selector: `[dir-style-color-1]',
 * })
 * class Style1Directive {
 * \@HostBinding('style') style = {color: '#005'};
 * \@HostBinding('style.color') color = '#006';
 *
 *   static ngDir = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#005'});
 *     ɵɵstyleProp('color', '#006');
 *     ...
 *   }
 * }
 *
 * \@Directive({
 *   selector: `[dir-style-color-2]',
 * })
 * class Style2Directive {
 * \@HostBinding('style') style = {color: '#007'};
 * \@HostBinding('style.color') color = '#008';
 *
 *   static ngDir = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#007'});
 *     ɵɵstyleProp('color', '#008');
 *     ...
 *   }
 * }
 *
 * \@Directive({
 *   selector: `my-cmp',
 * })
 * class MyComponent {
 * \@HostBinding('style') style = {color: '#003'};
 * \@HostBinding('style.color') color = '#004';
 *
 *   static ngComp = ... {
 *     ...
 *     // Compiler ensures that `ɵɵstyleProp` is after `ɵɵstyleMap`
 *     ɵɵstyleMap({color: '#003'});
 *     ɵɵstyleProp('color', '#004');
 *     ...
 *   }
 * }
 * ```
 *
 * The Order of instruction execution is:
 *
 * NOTE: the comment binding location is for illustrative purposes only.
 *
 * ```
 * // Template: (ExampleComponent)
 *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
 *     ɵɵstyleProp('color', '#002');  // Binding index: 12
 * // MyComponent
 *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
 *     ɵɵstyleProp('color', '#004');  // Binding index: 22
 * // Style1Directive
 *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
 *     ɵɵstyleProp('color', '#006');  // Binding index: 26
 * // Style2Directive
 *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
 *     ɵɵstyleProp('color', '#008');  // Binding index: 30
 * ```
 *
 * The correct priority order of concatenation is:
 *
 * ```
 * // MyComponent
 *     ɵɵstyleMap({color: '#003'});   // Binding index: 20
 *     ɵɵstyleProp('color', '#004');  // Binding index: 22
 * // Style1Directive
 *     ɵɵstyleMap({color: '#005'});   // Binding index: 24
 *     ɵɵstyleProp('color', '#006');  // Binding index: 26
 * // Style2Directive
 *     ɵɵstyleMap({color: '#007'});   // Binding index: 28
 *     ɵɵstyleProp('color', '#008');  // Binding index: 30
 * // Template: (ExampleComponent)
 *     ɵɵstyleMap({color: '#001'});   // Binding index: 10
 *     ɵɵstyleProp('color', '#002');  // Binding index: 12
 * ```
 *
 * What color should be rendered?
 *
 * Once the items are correctly sorted in the list, the answer is simply the last item in the
 * concatenation list which is `#002`.
 *
 * To do so we keep a linked list of all of the bindings which pertain to this element.
 * Notice that the bindings are inserted in the order of execution, but the `TView.data` allows
 * us to traverse them in the order of priority.
 *
 * |Idx|`TView.data`|`LView`          | Notes
 * |---|------------|-----------------|--------------
 * |...|            |                 |
 * |10 |`null`      |`{color: '#001'}`| `ɵɵstyleMap('color', {color: '#001'})`
 * |11 |`30 | 12`   | ...             |
 * |12 |`color`     |`'#002'`         | `ɵɵstyleProp('color', '#002')`
 * |13 |`10 | 0`    | ...             |
 * |...|            |                 |
 * |20 |`null`      |`{color: '#003'}`| `ɵɵstyleMap('color', {color: '#003'})`
 * |21 |`0 | 22`    | ...             |
 * |22 |`color`     |`'#004'`         | `ɵɵstyleProp('color', '#004')`
 * |23 |`20 | 24`   | ...             |
 * |24 |`null`      |`{color: '#005'}`| `ɵɵstyleMap('color', {color: '#005'})`
 * |25 |`22 | 26`   | ...             |
 * |26 |`color`     |`'#006'`         | `ɵɵstyleProp('color', '#006')`
 * |27 |`24 | 28`   | ...             |
 * |28 |`null`      |`{color: '#007'}`| `ɵɵstyleMap('color', {color: '#007'})`
 * |29 |`26 | 30`   | ...             |
 * |30 |`color`     |`'#008'`         | `ɵɵstyleProp('color', '#008')`
 * |31 |`28 | 10`   | ...             |
 *
 * The above data structure allows us to re-concatenate the styling no matter which data binding
 * changes.
 *
 * NOTE: in addition to keeping track of next/previous index the `TView.data` also stores prev/next
 * duplicate bit. The duplicate bit if true says there either is a binding with the same name or
 * there is a map (which may contain the name). This information is useful in knowing if other
 * styles with higher priority need to be searched for overwrites.
 *
 * NOTE: See `should support example in 'tnode_linked_list.ts' documentation` in
 * `tnode_linked_list_spec.ts` for working example.
 * @type {?}
 */
let __unused_const_as_closure_does_not_like_standalone_comment_blocks__;
/**
 * Insert new `tStyleValue` at `TData` and link existing style bindings such that we maintain linked
 * list of styles and compute the duplicate flag.
 *
 * Note: this function is executed during `firstUpdatePass` only to populate the `TView.data`.
 *
 * The function works by keeping track of `tStylingRange` which contains two pointers pointing to
 * the head/tail of the template portion of the styles.
 *  - if `isHost === false` (we are template) then insertion is at tail of `TStylingRange`
 *  - if `isHost === true` (we are host binding) then insertion is at head of `TStylingRange`
 *
 * @param {?} tData The `TData` to insert into.
 * @param {?} tNode `TNode` associated with the styling element.
 * @param {?} tStylingKeyWithStatic
 * @param {?} index location of where `tStyleValue` should be stored (and linked into list.)
 * @param {?} isHostBinding `true` if the insertion is for a `hostBinding`. (insertion is in front of
 *               template.)
 * @param {?} isClassBinding True if the associated `tStylingKey` as a `class` styling.
 *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
 * @return {?}
 */
function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
    ngDevMode && assertFirstUpdatePass(getTView());
    /** @type {?} */
    let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
    /** @type {?} */
    let tmplHead = getTStylingRangePrev(tBindings);
    /** @type {?} */
    let tmplTail = getTStylingRangeNext(tBindings);
    tData[index] = tStylingKeyWithStatic;
    /** @type {?} */
    let isKeyDuplicateOfStatic = false;
    /** @type {?} */
    let tStylingKey;
    if (Array.isArray(tStylingKeyWithStatic)) {
        // We are case when the `TStylingKey` contains static fields as well.
        /** @type {?} */
        const staticKeyValueArray = (/** @type {?} */ (tStylingKeyWithStatic));
        tStylingKey = staticKeyValueArray[1]; // unwrap.
        // We need to check if our key is present in the static so that we can mark it as duplicate.
        if (tStylingKey === null ||
            keyValueArrayIndexOf(staticKeyValueArray, (/** @type {?} */ (tStylingKey))) > 0) {
            // tStylingKey is present in the statics, need to mark it as duplicate.
            isKeyDuplicateOfStatic = true;
        }
    }
    else {
        tStylingKey = tStylingKeyWithStatic;
    }
    if (isHostBinding) {
        // We are inserting host bindings
        // If we don't have template bindings then `tail` is 0.
        /** @type {?} */
        const hasTemplateBindings = tmplTail !== 0;
        // This is important to know because that means that the `head` can't point to the first
        // template bindings (there are none.) Instead the head points to the tail of the template.
        if (hasTemplateBindings) {
            // template head's "prev" will point to last host binding or to 0 if no host bindings yet
            /** @type {?} */
            const previousNode = getTStylingRangePrev((/** @type {?} */ (tData[tmplHead + 1])));
            tData[index + 1] = toTStylingRange(previousNode, tmplHead);
            // if a host binding has already been registered, we need to update the next of that host
            // binding to point to this one
            if (previousNode !== 0) {
                // We need to update the template-tail value to point to us.
                tData[previousNode + 1] =
                    setTStylingRangeNext((/** @type {?} */ (tData[previousNode + 1])), index);
            }
            // The "previous" of the template binding head should point to this host binding
            tData[tmplHead + 1] = setTStylingRangePrev((/** @type {?} */ (tData[tmplHead + 1])), index);
        }
        else {
            tData[index + 1] = toTStylingRange(tmplHead, 0);
            // if a host binding has already been registered, we need to update the next of that host
            // binding to point to this one
            if (tmplHead !== 0) {
                // We need to update the template-tail value to point to us.
                tData[tmplHead + 1] = setTStylingRangeNext((/** @type {?} */ (tData[tmplHead + 1])), index);
            }
            // if we don't have template, the head points to template-tail, and needs to be advanced.
            tmplHead = index;
        }
    }
    else {
        // We are inserting in template section.
        // We need to set this binding's "previous" to the current template tail
        tData[index + 1] = toTStylingRange(tmplTail, 0);
        ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, 'Adding template bindings after hostBindings is not allowed.');
        if (tmplHead === 0) {
            tmplHead = index;
        }
        else {
            // We need to update the previous value "next" to point to this binding
            tData[tmplTail + 1] = setTStylingRangeNext((/** @type {?} */ (tData[tmplTail + 1])), index);
        }
        tmplTail = index;
    }
    // Now we need to update / compute the duplicates.
    // Starting with our location search towards head (least priority)
    if (isKeyDuplicateOfStatic) {
        tData[index + 1] = setTStylingRangePrevDuplicate((/** @type {?} */ (tData[index + 1])));
    }
    markDuplicates(tData, tStylingKey, index, true, isClassBinding);
    markDuplicates(tData, tStylingKey, index, false, isClassBinding);
    markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
    tBindings = toTStylingRange(tmplHead, tmplTail);
    if (isClassBinding) {
        tNode.classBindings = tBindings;
    }
    else {
        tNode.styleBindings = tBindings;
    }
}
/**
 * Look into the residual styling to see if the current `tStylingKey` is duplicate of residual.
 *
 * @param {?} tNode `TNode` where the residual is stored.
 * @param {?} tStylingKey `TStylingKey` to store.
 * @param {?} tData `TData` associated with the current `LView`.
 * @param {?} index location of where `tStyleValue` should be stored (and linked into list.)
 * @param {?} isClassBinding True if the associated `tStylingKey` as a `class` styling.
 *                       `tNode.classBindings` should be used (or `tNode.styleBindings` otherwise.)
 * @return {?}
 */
function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
    /** @type {?} */
    const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;
    if (residual != null /* or undefined */ && typeof tStylingKey == 'string' &&
        keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
        // We have duplicate in the residual so mark ourselves as duplicate.
        tData[index + 1] = setTStylingRangeNextDuplicate((/** @type {?} */ (tData[index + 1])));
    }
}
/**
 * Marks `TStyleValue`s as duplicates if another style binding in the list has the same
 * `TStyleValue`.
 *
 * NOTE: this function is intended to be called twice once with `isPrevDir` set to `true` and once
 * with it set to `false` to search both the previous as well as next items in the list.
 *
 * No duplicate case
 * ```
 *   [style.color]
 *   [style.width.px] <<- index
 *   [style.height.px]
 * ```
 *
 * In the above case adding `[style.width.px]` to the existing `[style.color]` produces no
 * duplicates because `width` is not found in any other part of the linked list.
 *
 * Duplicate case
 * ```
 *   [style.color]
 *   [style.width.em]
 *   [style.width.px] <<- index
 * ```
 * In the above case adding `[style.width.px]` will produce a duplicate with `[style.width.em]`
 * because `width` is found in the chain.
 *
 * Map case 1
 * ```
 *   [style.width.px]
 *   [style.color]
 *   [style]  <<- index
 * ```
 * In the above case adding `[style]` will produce a duplicate with any other bindings because
 * `[style]` is a Map and as such is fully dynamic and could produce `color` or `width`.
 *
 * Map case 2
 * ```
 *   [style]
 *   [style.width.px]
 *   [style.color]  <<- index
 * ```
 * In the above case adding `[style.color]` will produce a duplicate because there is already a
 * `[style]` binding which is a Map and as such is fully dynamic and could produce `color` or
 * `width`.
 *
 * NOTE: Once `[style]` (Map) is added into the system all things are mapped as duplicates.
 * NOTE: We use `style` as example, but same logic is applied to `class`es as well.
 *
 * @param {?} tData `TData` where the linked list is stored.
 * @param {?} tStylingKey `TStylingKeyPrimitive` which contains the value to compare to other keys in
 *        the linked list.
 * @param {?} index Starting location in the linked list to search from
 * @param {?} isPrevDir Direction.
 *        - `true` for previous (lower priority);
 *        - `false` for next (higher priority).
 * @param {?} isClassBinding
 * @return {?}
 */
function markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {
    /** @type {?} */
    const tStylingAtIndex = (/** @type {?} */ (tData[index + 1]));
    /** @type {?} */
    const isMap = tStylingKey === null;
    /** @type {?} */
    let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
    /** @type {?} */
    let foundDuplicate = false;
    // We keep iterating as long as we have a cursor
    // AND either:
    // - we found what we are looking for, OR
    // - we are a map in which case we have to continue searching even after we find what we were
    //   looking for since we are a wild card and everything needs to be flipped to duplicate.
    while (cursor !== 0 && (foundDuplicate === false || isMap)) {
        ngDevMode && assertDataInRange(tData, cursor);
        /** @type {?} */
        const tStylingValueAtCursor = (/** @type {?} */ (tData[cursor]));
        /** @type {?} */
        const tStyleRangeAtCursor = (/** @type {?} */ (tData[cursor + 1]));
        if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
            foundDuplicate = true;
            tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) :
                setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
        }
        cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) :
            getTStylingRangeNext(tStyleRangeAtCursor);
    }
    if (foundDuplicate) {
        // if we found a duplicate, than mark ourselves.
        tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) :
            setTStylingRangeNextDuplicate(tStylingAtIndex);
    }
}
/**
 * Determines if two `TStylingKey`s are a match.
 *
 * When computing weather a binding contains a duplicate, we need to compare if the instruction
 * `TStylingKey` has a match.
 *
 * Here are examples of `TStylingKey`s which match given `tStylingKeyCursor` is:
 * - `color`
 *    - `color`    // Match another color
 *    - `null`     // That means that `tStylingKey` is a `classMap`/`styleMap` instruction
 *    - `['', 'color', 'other', true]` // wrapped `color` so match
 *    - `['', null, 'other', true]`       // wrapped `null` so match
 *    - `['', 'width', 'color', 'value']` // wrapped static value contains a match on `'color'`
 * - `null`       // `tStylingKeyCursor` always match as it is `classMap`/`styleMap` instruction
 *
 * @param {?} tStylingKeyCursor
 * @param {?} tStylingKey
 * @return {?}
 */
function isStylingMatch(tStylingKeyCursor, tStylingKey) {
    ngDevMode &&
        assertNotEqual(Array.isArray(tStylingKey), true, 'Expected that \'tStylingKey\' has been unwrapped');
    if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
        // location so we must assume that we have a match.
        tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
        // contains a match.
        (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) ===
            tStylingKey // If the keys match explicitly than we are a match.
    ) {
        return true;
    }
    else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === 'string') {
        // if we did not find a match, but `tStylingKeyCursor` is `KeyValueArray` that means cursor has
        // statics and we need to check those as well.
        return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >=
            0; // see if we are matching the key
    }
    return false;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/styling/styling_parser.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Stores the locations of key/value indexes while parsing styling.
 *
 * In case of `cssText` parsing the indexes are like so:
 * ```
 *   "key1: value1; key2: value2; key3: value3"
 *                  ^   ^ ^     ^             ^
 *                  |   | |     |             +-- textEnd
 *                  |   | |     +---------------- valueEnd
 *                  |   | +---------------------- value
 *                  |   +------------------------ keyEnd
 *                  +---------------------------- key
 * ```
 *
 * In case of `className` parsing the indexes are like so:
 * ```
 *   "key1 key2 key3"
 *         ^   ^    ^
 *         |   |    +-- textEnd
 *         |   +------------------------ keyEnd
 *         +---------------------------- key
 * ```
 * NOTE: `value` and `valueEnd` are used only for styles, not classes.
 * @record
 */
function ParserState() { }
if (false) {}
// Global state of the parser. (This makes parser non-reentrant, but that is not an issue)
/** @type {?} */
const parserState = {
    textEnd: 0,
    key: 0,
    keyEnd: 0,
    value: 0,
    valueEnd: 0,
};
/**
 * Retrieves the last parsed `key` of style.
 * @param {?} text the text to substring the key from.
 * @return {?}
 */
function getLastParsedKey(text) {
    return text.substring(parserState.key, parserState.keyEnd);
}
/**
 * Retrieves the last parsed `value` of style.
 * @param {?} text the text to substring the key from.
 * @return {?}
 */
function getLastParsedValue(text) {
    return text.substring(parserState.value, parserState.valueEnd);
}
/**
 * Initializes `className` string for parsing and parses the first token.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
 *   const key = getLastParsedKey();
 *   ...
 * }
 * ```
 * @param {?} text `className` to parse
 * @return {?} index where the next invocation of `parseClassNameNext` should resume.
 */
function parseClassName(text) {
    resetParserState(text);
    return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
/**
 * Parses next `className` token.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
 *   const key = getLastParsedKey();
 *   ...
 * }
 * ```
 *
 * @param {?} text `className` to parse
 * @param {?} index where the parsing should resume.
 * @return {?} index where the next invocation of `parseClassNameNext` should resume.
 */
function parseClassNameNext(text, index) {
    /** @type {?} */
    const end = parserState.textEnd;
    if (end === index) {
        return -1;
    }
    index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
    return consumeWhitespace(text, index, end);
}
/**
 * Initializes `cssText` string for parsing and parses the first key/values.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
 *   const key = getLastParsedKey();
 *   const value = getLastParsedValue();
 *   ...
 * }
 * ```
 * @param {?} text `cssText` to parse
 * @return {?} index where the next invocation of `parseStyleNext` should resume.
 */
function parseStyle(text) {
    resetParserState(text);
    return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
/**
 * Parses the next `cssText` key/values.
 *
 * This function is intended to be used in this format:
 * ```
 * for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i))) {
 *   const key = getLastParsedKey();
 *   const value = getLastParsedValue();
 *   ...
 * }
 *
 * @param {?} text `cssText` to parse
 * @param {?} startIndex
 * @return {?} index where the next invocation of `parseStyleNext` should resume.
 */
function parseStyleNext(text, startIndex) {
    /** @type {?} */
    const end = parserState.textEnd;
    /** @type {?} */
    let index = parserState.key = consumeWhitespace(text, startIndex, end);
    if (end === index) {
        // we reached an end so just quit
        return -1;
    }
    index = parserState.keyEnd = consumeStyleKey(text, index, end);
    index = consumeSeparator(text, index, end, 58 /* COLON */);
    index = parserState.value = consumeWhitespace(text, index, end);
    index = parserState.valueEnd = consumeStyleValue(text, index, end);
    return consumeSeparator(text, index, end, 59 /* SEMI_COLON */);
}
/**
 * Reset the global state of the styling parser.
 * @param {?} text The styling text to parse.
 * @return {?}
 */
function resetParserState(text) {
    parserState.key = 0;
    parserState.keyEnd = 0;
    parserState.value = 0;
    parserState.valueEnd = 0;
    parserState.textEnd = text.length;
}
/**
 * Returns index of next non-whitespace character.
 *
 * @param {?} text Text to scan
 * @param {?} startIndex Starting index of character where the scan should start.
 * @param {?} endIndex Ending index of character where the scan should end.
 * @return {?} Index of next non-whitespace character (May be the same as `start` if no whitespace at
 *          that location.)
 */
function consumeWhitespace(text, startIndex, endIndex) {
    while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32 /* SPACE */) {
        startIndex++;
    }
    return startIndex;
}
/**
 * Returns index of last char in class token.
 *
 * @param {?} text Text to scan
 * @param {?} startIndex Starting index of character where the scan should start.
 * @param {?} endIndex Ending index of character where the scan should end.
 * @return {?} Index after last char in class token.
 */
function consumeClassToken(text, startIndex, endIndex) {
    while (startIndex < endIndex && text.charCodeAt(startIndex) > 32 /* SPACE */) {
        startIndex++;
    }
    return startIndex;
}
/**
 * Consumes all of the characters belonging to style key and token.
 *
 * @param {?} text Text to scan
 * @param {?} startIndex Starting index of character where the scan should start.
 * @param {?} endIndex Ending index of character where the scan should end.
 * @return {?} Index after last style key character.
 */
function consumeStyleKey(text, startIndex, endIndex) {
    /** @type {?} */
    let ch;
    while (startIndex < endIndex &&
        ((ch = text.charCodeAt(startIndex)) === 45 /* DASH */ || ch === 95 /* UNDERSCORE */ ||
            ((ch & -33 /* UPPER_CASE */) >= 65 /* A */ && (ch & -33 /* UPPER_CASE */) <= 90 /* Z */))) {
        startIndex++;
    }
    return startIndex;
}
/**
 * Consumes all whitespace and the separator `:` after the style key.
 *
 * @param {?} text Text to scan
 * @param {?} startIndex Starting index of character where the scan should start.
 * @param {?} endIndex Ending index of character where the scan should end.
 * @param {?} separator
 * @return {?} Index after separator and surrounding whitespace.
 */
function consumeSeparator(text, startIndex, endIndex, separator) {
    startIndex = consumeWhitespace(text, startIndex, endIndex);
    if (startIndex < endIndex) {
        if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
            malformedStyleError(text, String.fromCharCode(separator), startIndex);
        }
        startIndex++;
    }
    return startIndex;
}
/**
 * Consumes style value honoring `url()` and `""` text.
 *
 * @param {?} text Text to scan
 * @param {?} startIndex Starting index of character where the scan should start.
 * @param {?} endIndex Ending index of character where the scan should end.
 * @return {?} Index after last style value character.
 */
function consumeStyleValue(text, startIndex, endIndex) {
    /** @type {?} */
    let ch1 = -1;
    // 1st previous character
    /** @type {?} */
    let ch2 = -1;
    // 2nd previous character
    /** @type {?} */
    let ch3 = -1;
    // 3rd previous character
    /** @type {?} */
    let i = startIndex;
    /** @type {?} */
    let lastChIndex = i;
    while (i < endIndex) {
        /** @type {?} */
        const ch = text.charCodeAt(i++);
        if (ch === 59 /* SEMI_COLON */) {
            return lastChIndex;
        }
        else if (ch === 34 /* DOUBLE_QUOTE */ || ch === 39 /* SINGLE_QUOTE */) {
            lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
        }
        else if (startIndex ===
            i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
            ch3 === 85 /* U */ &&
            ch2 === 82 /* R */ && ch1 === 76 /* L */ && ch === 40 /* OPEN_PAREN */) {
            lastChIndex = i = consumeQuotedText(text, 41 /* CLOSE_PAREN */, i, endIndex);
        }
        else if (ch > 32 /* SPACE */) {
            // if we have a non-whitespace character then capture its location
            lastChIndex = i;
        }
        ch3 = ch2;
        ch2 = ch1;
        ch1 = ch & -33 /* UPPER_CASE */;
    }
    return lastChIndex;
}
/**
 * Consumes all of the quoted characters.
 *
 * @param {?} text Text to scan
 * @param {?} quoteCharCode CharCode of either `"` or `'` quote or `)` for `url(...)`.
 * @param {?} startIndex Starting index of character where the scan should start.
 * @param {?} endIndex Ending index of character where the scan should end.
 * @return {?} Index after quoted characters.
 */
function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
    /** @type {?} */
    let ch1 = -1;
    // 1st previous character
    /** @type {?} */
    let index = startIndex;
    while (index < endIndex) {
        /** @type {?} */
        const ch = text.charCodeAt(index++);
        if (ch == quoteCharCode && ch1 !== 92 /* BACK_SLASH */) {
            return index;
        }
        if (ch == 92 /* BACK_SLASH */ && ch1 === 92 /* BACK_SLASH */) {
            // two back slashes cancel each other out. For example `"\\"` should properly end the
            // quotation. (It should not assume that the last `"` is escaped.)
            ch1 = 0;
        }
        else {
            ch1 = ch;
        }
    }
    throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) :
        new Error();
}
/**
 * @param {?} text
 * @param {?} expecting
 * @param {?} index
 * @return {?}
 */
function malformedStyleError(text, expecting, index) {
    ngDevMode && assertEqual(typeof text === 'string', true, 'String expected here');
    throw throwError(`Malformed style at location ${index} in string '` + text.substring(0, index) + '[>>' +
        text.substring(index, index + 1) + '<<]' + text.substr(index + 1) +
        `'. Expecting '${expecting}'.`);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/styling.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Sets the current style sanitizer function which will then be used
 * within all follow-up prop and map-based style binding instructions
 * for the given element.
 *
 * Note that once styling has been applied to the element (i.e. once
 * `advance(n)` is executed or the hostBindings/template function exits)
 * then the active `sanitizerFn` will be set to `null`. This means that
 * once styling is applied to another element then a another call to
 * `styleSanitizer` will need to be made.
 *
 * \@codeGenApi
 * @param {?} sanitizer
 * @return {?}
 */
function ɵɵstyleSanitizer(sanitizer) {
    setCurrentStyleSanitizer(sanitizer);
}
/**
 * Update a style binding on an element with the provided value.
 *
 * If the style value is falsy then it will be removed from the element
 * (or assigned a different value depending if there are any styles placed
 * on the element with `styleMap` or any static styles that are
 * present from when the element was created with `styling`).
 *
 * Note that the styling element is updated as part of `stylingApply`.
 *
 * \@codeGenApi
 * @param {?} prop A valid CSS property.
 * @param {?} value New value to write (`null` or an empty string to remove).
 * @param {?=} suffix Optional suffix. Used with scalar values to add unit such as `px`.
 *        Note that when a suffix is provided then the underlying sanitizer will
 *        be ignored.
 *
 * Note that this will apply the provided style value to the host element if this function is called
 * within a host binding function.
 *
 * @return {?}
 */
function ɵɵstyleProp(prop, value, suffix) {
    checkStylingProperty(prop, value, suffix, false);
    return ɵɵstyleProp;
}
/**
 * Update a class binding on an element with the provided value.
 *
 * This instruction is meant to handle the `[class.foo]="exp"` case and,
 * therefore, the class binding itself must already be allocated using
 * `styling` within the creation block.
 *
 * \@codeGenApi
 * @param {?} className
 * @param {?} value A true/false value which will turn the class on or off.
 *
 * Note that this will apply the provided class value to the host element if this function
 * is called within a host binding function.
 *
 * @return {?}
 */
function ɵɵclassProp(className, value) {
    checkStylingProperty(className, value, null, true);
    return ɵɵclassProp;
}
/**
 * Update style bindings using an object literal on an element.
 *
 * This instruction is meant to apply styling via the `[style]="exp"` template bindings.
 * When styles are applied to the element they will then be updated with respect to
 * any styles/classes set via `styleProp`. If any styles are set to falsy
 * then they will be removed from the element.
 *
 * Note that the styling instruction will not be applied until `stylingApply` is called.
 *
 * \@codeGenApi
 * @param {?} styles A key/value style map of the styles that will be applied to the given element.
 *        Any missing styles (that have already been applied to the element beforehand) will be
 *        removed (unset) from the element's styling.
 *
 * Note that this will apply the provided styleMap value to the host element if this function
 * is called within a host binding.
 *
 * @return {?}
 */
function ɵɵstyleMap(styles) {
    checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
}
/**
 * Parse text as style and add values to KeyValueArray.
 *
 * This code is pulled out to a separate function so that it can be tree shaken away if it is not
 * needed. It is only referenced from `ɵɵstyleMap`.
 *
 * @param {?} keyValueArray KeyValueArray to add parsed values to.
 * @param {?} text text to parse.
 * @return {?}
 */
function styleStringParser(keyValueArray, text) {
    for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
        styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
    }
}
/**
 * Update class bindings using an object literal or class-string on an element.
 *
 * This instruction is meant to apply styling via the `[class]="exp"` template bindings.
 * When classes are applied to the element they will then be updated with
 * respect to any styles/classes set via `classProp`. If any
 * classes are set to falsy then they will be removed from the element.
 *
 * Note that the styling instruction will not be applied until `stylingApply` is called.
 * Note that this will the provided classMap value to the host element if this function is called
 * within a host binding.
 *
 * \@codeGenApi
 * @param {?} classes A key/value map or string of CSS classes that will be added to the
 *        given element. Any missing classes (that have already been applied to the element
 *        beforehand) will be removed (unset) from the element's list of CSS classes.
 *
 * @return {?}
 */
function ɵɵclassMap(classes) {
    checkStylingMap(keyValueArraySet, classStringParser, classes, true);
}
/**
 * Parse text as class and add values to KeyValueArray.
 *
 * This code is pulled out to a separate function so that it can be tree shaken away if it is not
 * needed. It is only referenced from `ɵɵclassMap`.
 *
 * @param {?} keyValueArray KeyValueArray to add parsed values to.
 * @param {?} text text to parse.
 * @return {?}
 */
function classStringParser(keyValueArray, text) {
    for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
        keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
    }
}
/**
 * Common code between `ɵɵclassProp` and `ɵɵstyleProp`.
 *
 * @param {?} prop property name.
 * @param {?} value binding value.
 * @param {?} suffixOrSanitizer suffix or sanitization function
 * @param {?} isClassBased `true` if `class` change (`false` if `style`)
 * @return {?}
 */
function checkStylingProperty(prop, value, suffixOrSanitizer, isClassBased) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    // Styling instructions use 2 slots per binding.
    // 1. one for the value / TStylingKey
    // 2. one for the intermittent-value / TStylingRange
    /** @type {?} */
    const bindingIndex = incrementBindingIndex(2);
    if (tView.firstUpdatePass) {
        stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
    }
    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
        // This is a work around. Once PR#34480 lands the sanitizer is passed explicitly and this line
        // can be removed.
        /** @type {?} */
        let styleSanitizer;
        if (suffixOrSanitizer == null) {
            if (styleSanitizer = getCurrentStyleSanitizer()) {
                suffixOrSanitizer = (/** @type {?} */ (styleSanitizer));
            }
        }
        /** @type {?} */
        const tNode = (/** @type {?} */ (tView.data[getSelectedIndex() + HEADER_OFFSET]));
        updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeAndApplySuffixOrSanitizer(value, suffixOrSanitizer), isClassBased, bindingIndex);
    }
}
/**
 * Common code between `ɵɵclassMap` and `ɵɵstyleMap`.
 *
 * @param {?} keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
 * function so that
 *        `style` can pass in version which does sanitization. This is done for tree shaking
 *        purposes.
 * @param {?} stringParser Parser used to parse `value` if `string`. (Passed in as `style` and `class`
 *        have different parsers.)
 * @param {?} value bound value from application
 * @param {?} isClassBased `true` if `class` change (`false` if `style`)
 * @return {?}
 */
function checkStylingMap(keyValueArraySet, stringParser, value, isClassBased) {
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const bindingIndex = incrementBindingIndex(2);
    if (tView.firstUpdatePass) {
        stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
    }
    /** @type {?} */
    const lView = getLView();
    if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
        // if so as not to read unnecessarily.
        /** @type {?} */
        const tNode = (/** @type {?} */ (tView.data[getSelectedIndex() + HEADER_OFFSET]));
        if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
            if (ngDevMode) {
                // verify that if we are shadowing then `TData` is appropriately marked so that we skip
                // processing this binding in styling resolution.
                /** @type {?} */
                const tStylingKey = tView.data[bindingIndex];
                assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, 'Styling linked list shadow input should be marked as \'false\'');
            }
            // VE does not concatenate the static portion like we are doing here.
            // Instead VE just ignores the static completely if dynamic binding is present.
            // Because of locality we have already set the static portion because we don't know if there
            // is a dynamic portion until later. If we would ignore the static portion it would look like
            // the binding has removed it. This would confuse `[ngStyle]`/`[ngClass]` to do the wrong
            // thing as it would think that the static portion was removed. For this reason we
            // concatenate it so that `[ngStyle]`/`[ngClass]`  can continue to work on changed.
            /** @type {?} */
            let staticPrefix = isClassBased ? tNode.classes : tNode.styles;
            ngDevMode && isClassBased === false && staticPrefix !== null &&
                assertEqual(staticPrefix.endsWith(';'), true, 'Expecting static portion to end with \';\'');
            if (staticPrefix !== null) {
                // We want to make sure that falsy values of `value` become empty strings.
                value = concatStringsWithSpace(staticPrefix, value ? value : '');
            }
            // Given `<div [style] my-dir>` such that `my-dir` has `@Input('style')`.
            // This takes over the `[style]` binding. (Same for `[class]`)
            setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
        }
        else {
            updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet, stringParser, value), isClassBased, bindingIndex);
        }
    }
}
/**
 * Determines when the binding is in `hostBindings` section
 *
 * @param {?} tView Current `TView`
 * @param {?} bindingIndex index of binding which we would like if it is in `hostBindings`
 * @return {?}
 */
function isInHostBindings(tView, bindingIndex) {
    // All host bindings are placed after the expando section.
    return bindingIndex >= tView.expandoStartIndex;
}
/**
 * Collects the necessary information to insert the binding into a linked list of style bindings
 * using `insertTStylingBinding`.
 *
 * @param {?} tView `TView` where the binding linked list will be stored.
 * @param {?} tStylingKey Property/key of the binding.
 * @param {?} bindingIndex Index of binding associated with the `prop`
 * @param {?} isClassBased `true` if `class` change (`false` if `style`)
 * @return {?}
 */
function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
    ngDevMode && assertFirstUpdatePass(tView);
    /** @type {?} */
    const tData = tView.data;
    if (tData[bindingIndex + 1] === null) {
        // The above check is necessary because we don't clear first update pass until first successful
        // (no exception) template execution. This prevents the styling instruction from double adding
        // itself to the list.
        // `getSelectedIndex()` should be here (rather than in instruction) so that it is guarded by the
        // if so as not to read unnecessarily.
        /** @type {?} */
        const tNode = (/** @type {?} */ (tData[getSelectedIndex() + HEADER_OFFSET]));
        /** @type {?} */
        const isHostBindings = isInHostBindings(tView, bindingIndex);
        if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
            // `tStylingKey === null` implies that we are either `[style]` or `[class]` binding.
            // If there is a directive which uses `@Input('style')` or `@Input('class')` than
            // we need to neutralize this binding since that directive is shadowing it.
            // We turn this into a noop by setting the key to `false`
            tStylingKey = false;
        }
        tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
        insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
    }
}
/**
 * Adds static styling information to the binding if applicable.
 *
 * The linked list of styles not only stores the list and keys, but also stores static styling
 * information on some of the keys. This function determines if the key should contain the styling
 * information and computes it.
 *
 * See `TStylingStatic` for more details.
 *
 * @param {?} tData `TData` where the linked list is stored.
 * @param {?} tNode `TNode` for which the styling is being computed.
 * @param {?} stylingKey `TStylingKeyPrimitive` which may need to be wrapped into `TStylingKey`
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @return {?}
 */
function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
    /** @type {?} */
    const hostDirectiveDef = getHostDirectiveDef(tData);
    /** @type {?} */
    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
    if (hostDirectiveDef === null) {
        // We are in template node.
        // If template node already had styling instruction then it has already collected the static
        // styling and there is no need to collect them again. We know that we are the first styling
        // instruction because the `TNode.*Bindings` points to 0 (nothing has been inserted yet).
        /** @type {?} */
        const isFirstStylingInstructionInTemplate = (/** @type {?} */ ((/** @type {?} */ ((isClassBased ? tNode.classBindings : tNode.styleBindings))))) === 0;
        if (isFirstStylingInstructionInTemplate) {
            // It would be nice to be able to get the statics from `mergeAttrs`, however, at this point
            // they are already merged and it would not be possible to figure which property belongs where
            // in the priority.
            stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
            stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);
            // We know that if we have styling binding in template we can't have residual.
            residual = null;
        }
    }
    else {
        // We are in host binding node and there was no binding instruction in template node.
        // This means that we need to compute the residual.
        /** @type {?} */
        const directiveStylingLast = tNode.directiveStylingLast;
        /** @type {?} */
        const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;
        if (isFirstStylingInstructionInHostBinding) {
            stylingKey =
                collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);
            if (residual === null) {
                // - If `null` than either:
                //    - Template styling instruction already ran and it has consumed the static
                //      styling into its `TStylingKey` and so there is no need to update residual. Instead
                //      we need to update the `TStylingKey` associated with the first template node
                //      instruction. OR
                //    - Some other styling instruction ran and determined that there are no residuals
                /** @type {?} */
                let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);
                if (templateStylingKey !== undefined && Array.isArray(templateStylingKey)) {
                    // Only recompute if `templateStylingKey` had static values. (If no static value found
                    // then there is nothing to do since this operation can only produce less static keys, not
                    // more.)
                    templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1] /* unwrap previous statics */, isClassBased);
                    templateStylingKey =
                        collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
                    setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
                }
            }
            else {
                // We only need to recompute residual if it is not `null`.
                // - If existing residual (implies there was no template styling). This means that some of
                //   the statics may have moved from the residual to the `stylingKey` and so we have to
                //   recompute.
                // - If `undefined` this is the first time we are running.
                residual = collectResidual(tData, tNode, isClassBased);
            }
        }
    }
    if (residual !== undefined) {
        isClassBased ? (tNode.residualClasses = residual) : (tNode.residualStyles = residual);
    }
    return stylingKey;
}
/**
 * Retrieve the `TStylingKey` for the template styling instruction.
 *
 * This is needed since `hostBinding` styling instructions are inserted after the template
 * instruction. While the template instruction needs to update the residual in `TNode` the
 * `hostBinding` instructions need to update the `TStylingKey` of the template instruction because
 * the template instruction is downstream from the `hostBindings` instructions.
 *
 * @param {?} tData `TData` where the linked list is stored.
 * @param {?} tNode `TNode` for which the styling is being computed.
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @return {?} `TStylingKey` if found or `undefined` if not found.
 */
function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
    /** @type {?} */
    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
    if (getTStylingRangeNext(bindings) === 0) {
        // There does not seem to be a styling instruction in the `template`.
        return undefined;
    }
    return (/** @type {?} */ (tData[getTStylingRangePrev(bindings)]));
}
/**
 * Update the `TStylingKey` of the first template instruction in `TNode`.
 *
 * Logically `hostBindings` styling instructions are of lower priority than that of the template.
 * However, they execute after the template styling instructions. This means that they get inserted
 * in front of the template styling instructions.
 *
 * If we have a template styling instruction and a new `hostBindings` styling instruction is
 * executed it means that it may need to steal static fields from the template instruction. This
 * method allows us to update the first template instruction `TStylingKey` with a new value.
 *
 * Assume:
 * ```
 * <div my-dir style="color: red" [style.color]="tmplExp"></div>
 *
 * \@Directive({
 *   host: {
 *     'style': 'width: 100px',
 *     '[style.color]': 'dirExp',
 *   }
 * })
 * class MyDir {}
 * ```
 *
 * when `[style.color]="tmplExp"` executes it creates this data structure.
 * ```
 *  ['', 'color', 'color', 'red', 'width', '100px'],
 * ```
 *
 * The reason for this is that the template instruction does not know if there are styling
 * instructions and must assume that there are none and must collect all of the static styling.
 * (both
 * `color' and 'width`)
 *
 * When `'[style.color]': 'dirExp',` executes we need to insert a new data into the linked list.
 * ```
 *  ['', 'color', 'width', '100px'],  // newly inserted
 *  ['', 'color', 'color', 'red', 'width', '100px'], // this is wrong
 * ```
 *
 * Notice that the template statics is now wrong as it incorrectly contains `width` so we need to
 * update it like so:
 * ```
 *  ['', 'color', 'width', '100px'],
 *  ['', 'color', 'color', 'red'],    // UPDATE
 * ```
 *
 * @param {?} tData `TData` where the linked list is stored.
 * @param {?} tNode `TNode` for which the styling is being computed.
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @param {?} tStylingKey New `TStylingKey` which is replacing the old one.
 * @return {?}
 */
function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
    /** @type {?} */
    const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
    ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, 'Expecting to have at least one template styling binding.');
    tData[getTStylingRangePrev(bindings)] = tStylingKey;
}
/**
 * Collect all static values after the current `TNode.directiveStylingLast` index.
 *
 * Collect the remaining styling information which has not yet been collected by an existing
 * styling instruction.
 *
 * @param {?} tData `TData` where the `DirectiveDefs` are stored.
 * @param {?} tNode `TNode` which contains the directive range.
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @return {?}
 */
function collectResidual(tData, tNode, isClassBased) {
    /** @type {?} */
    let residual = undefined;
    /** @type {?} */
    const directiveEnd = tNode.directiveEnd;
    ngDevMode &&
        assertNotEqual(tNode.directiveStylingLast, -1, 'By the time this function gets called at least one hostBindings-node styling instruction must have executed.');
    // We add `1 + tNode.directiveStart` because we need to skip the current directive (as we are
    // collecting things after the last `hostBindings` directive which had a styling instruction.)
    for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
        /** @type {?} */
        const attrs = ((/** @type {?} */ (tData[i]))).hostAttrs;
        residual = (/** @type {?} */ (collectStylingFromTAttrs(residual, attrs, isClassBased)));
    }
    return (/** @type {?} */ (collectStylingFromTAttrs(residual, tNode.attrs, isClassBased)));
}
/**
 * Collect the static styling information with lower priority than `hostDirectiveDef`.
 *
 * (This is opposite of residual styling.)
 *
 * @param {?} hostDirectiveDef `DirectiveDef` for which we want to collect lower priority static
 *        styling. (Or `null` if template styling)
 * @param {?} tData `TData` where the linked list is stored.
 * @param {?} tNode `TNode` for which the styling is being computed.
 * @param {?} stylingKey Existing `TStylingKey` to update or wrap.
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @return {?}
 */
function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
    // We need to loop because there can be directives which have `hostAttrs` but don't have
    // `hostBindings` so this loop catches up to the current directive..
    /** @type {?} */
    let currentDirective = null;
    /** @type {?} */
    const directiveEnd = tNode.directiveEnd;
    /** @type {?} */
    let directiveStylingLast = tNode.directiveStylingLast;
    if (directiveStylingLast === -1) {
        directiveStylingLast = tNode.directiveStart;
    }
    else {
        directiveStylingLast++;
    }
    while (directiveStylingLast < directiveEnd) {
        currentDirective = (/** @type {?} */ (tData[directiveStylingLast]));
        ngDevMode && assertDefined(currentDirective, 'expected to be defined');
        stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
        if (currentDirective === hostDirectiveDef)
            break;
        directiveStylingLast++;
    }
    if (hostDirectiveDef !== null) {
        // we only advance the styling cursor if we are collecting data from host bindings.
        // Template executes before host bindings and so if we would update the index,
        // host bindings would not get their statics.
        tNode.directiveStylingLast = directiveStylingLast;
    }
    return stylingKey;
}
/**
 * Convert `TAttrs` into `TStylingStatic`.
 *
 * @param {?} stylingKey existing `TStylingKey` to update or wrap.
 * @param {?} attrs `TAttributes` to process.
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @return {?}
 */
function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
    /** @type {?} */
    const desiredMarker = isClassBased ? 1 /* Classes */ : 2 /* Styles */;
    /** @type {?} */
    let currentMarker = -1 /* ImplicitAttributes */;
    if (attrs !== null) {
        for (let i = 0; i < attrs.length; i++) {
            /** @type {?} */
            const item = (/** @type {?} */ (attrs[i]));
            if (typeof item === 'number') {
                currentMarker = item;
            }
            else {
                if (currentMarker === desiredMarker) {
                    if (!Array.isArray(stylingKey)) {
                        stylingKey = stylingKey === undefined ? [] : (/** @type {?} */ (['', stylingKey]));
                    }
                    keyValueArraySet((/** @type {?} */ (stylingKey)), item, isClassBased ? true : attrs[++i]);
                }
            }
        }
    }
    return stylingKey === undefined ? null : stylingKey;
}
/**
 * Retrieve the current `DirectiveDef` which is active when `hostBindings` style instruction is
 * being executed (or `null` if we are in `template`.)
 *
 * @param {?} tData Current `TData` where the `DirectiveDef` will be looked up at.
 * @return {?}
 */
function getHostDirectiveDef(tData) {
    /** @type {?} */
    const currentDirectiveIndex = getCurrentDirectiveIndex();
    return currentDirectiveIndex === -1 ? null : (/** @type {?} */ (tData[currentDirectiveIndex]));
}
/**
 * Convert user input to `KeyValueArray`.
 *
 * This function takes user input which could be `string`, Object literal, or iterable and converts
 * it into a consistent representation. The output of this is `KeyValueArray` (which is an array
 * where
 * even indexes contain keys and odd indexes contain values for those keys).
 *
 * The advantage of converting to `KeyValueArray` is that we can perform diff in an input
 * independent
 * way.
 * (ie we can compare `foo bar` to `['bar', 'baz'] and determine a set of changes which need to be
 * applied)
 *
 * The fact that `KeyValueArray` is sorted is very important because it allows us to compute the
 * difference in linear fashion without the need to allocate any additional data.
 *
 * For example if we kept this as a `Map` we would have to iterate over previous `Map` to determine
 * which values need to be deleted, over the new `Map` to determine additions, and we would have to
 * keep additional `Map` to keep track of duplicates or items which have not yet been visited.
 *
 * @param {?} keyValueArraySet (See `keyValueArraySet` in "util/array_utils") Gets passed in as a
 * function so that
 *        `style` can pass in version which does sanitization. This is done for tree shaking
 *        purposes.
 * @param {?} stringParser The parser is passed in so that it will be tree shakable. See
 *        `styleStringParser` and `classStringParser`
 * @param {?} value The value to parse/convert to `KeyValueArray`
 * @return {?}
 */
function toStylingKeyValueArray(keyValueArraySet, stringParser, value) {
    if (value == null /*|| value === undefined */ || value === '')
        return (/** @type {?} */ (EMPTY_ARRAY$3));
    /** @type {?} */
    const styleKeyValueArray = (/** @type {?} */ ([]));
    /** @type {?} */
    const unwrappedValue = (/** @type {?} */ (unwrapSafeValue(value)));
    if (Array.isArray(unwrappedValue)) {
        for (let i = 0; i < unwrappedValue.length; i++) {
            keyValueArraySet(styleKeyValueArray, unwrappedValue[i], true);
        }
    }
    else if (typeof unwrappedValue === 'object') {
        for (const key in unwrappedValue) {
            if (unwrappedValue.hasOwnProperty(key)) {
                keyValueArraySet(styleKeyValueArray, key, unwrappedValue[key]);
            }
        }
    }
    else if (typeof unwrappedValue === 'string') {
        stringParser(styleKeyValueArray, unwrappedValue);
    }
    else {
        ngDevMode &&
            throwError('Unsupported styling type ' + typeof unwrappedValue + ': ' + unwrappedValue);
    }
    return styleKeyValueArray;
}
/**
 * Set a `value` for a `key` taking style sanitization into account.
 *
 * See: `keyValueArraySet` for details
 *
 * @param {?} keyValueArray KeyValueArray to add to.
 * @param {?} key Style key to add. (This key will be checked if it needs sanitization)
 * @param {?} value The value to set (If key needs sanitization it will be sanitized)
 * @return {?}
 */
function styleKeyValueArraySet(keyValueArray, key, value) {
    if (stylePropNeedsSanitization(key)) {
        value = ɵɵsanitizeStyle(value);
    }
    keyValueArraySet(keyValueArray, key, value);
}
/**
 * Update map based styling.
 *
 * Map based styling could be anything which contains more than one binding. For example `string`,
 * or object literal. Dealing with all of these types would complicate the logic so
 * instead this function expects that the complex input is first converted into normalized
 * `KeyValueArray`. The advantage of normalization is that we get the values sorted, which makes it
 * very cheap to compute deltas between the previous and current value.
 *
 * @param {?} tView Associated `TView.data` contains the linked list of binding priorities.
 * @param {?} tNode `TNode` where the binding is located.
 * @param {?} lView `LView` contains the values associated with other styling binding at this `TNode`.
 * @param {?} renderer Renderer to use if any updates.
 * @param {?} oldKeyValueArray Previous value represented as `KeyValueArray`
 * @param {?} newKeyValueArray Current value represented as `KeyValueArray`
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @param {?} bindingIndex Binding index of the binding.
 * @return {?}
 */
function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
    if ((/** @type {?} */ (oldKeyValueArray)) === NO_CHANGE) {
        // On first execution the oldKeyValueArray is NO_CHANGE => treat it as empty KeyValueArray.
        oldKeyValueArray = (/** @type {?} */ (EMPTY_ARRAY$3));
    }
    /** @type {?} */
    let oldIndex = 0;
    /** @type {?} */
    let newIndex = 0;
    /** @type {?} */
    let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
    /** @type {?} */
    let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;
    while (oldKey !== null || newKey !== null) {
        ngDevMode && assertLessThan(oldIndex, 999, 'Are we stuck in infinite loop?');
        ngDevMode && assertLessThan(newIndex, 999, 'Are we stuck in infinite loop?');
        /** @type {?} */
        const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : undefined;
        /** @type {?} */
        const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : undefined;
        /** @type {?} */
        let setKey = null;
        /** @type {?} */
        let setValue = undefined;
        if (oldKey === newKey) {
            // UPDATE: Keys are equal => new value is overwriting old value.
            oldIndex += 2;
            newIndex += 2;
            if (oldValue !== newValue) {
                setKey = newKey;
                setValue = newValue;
            }
        }
        else if (newKey === null || oldKey !== null && oldKey < (/** @type {?} */ (newKey))) {
            // DELETE: oldKey key is missing or we did not find the oldKey in the newValue
            // (because the keyValueArray is sorted and `newKey` is found later alphabetically).
            // `"background" < "color"` so we need to delete `"background"` because it is not found in the
            // new array.
            oldIndex += 2;
            setKey = oldKey;
        }
        else {
            // CREATE: newKey's is earlier alphabetically than oldKey's (or no oldKey) => we have new key.
            // `"color" > "background"` so we need to add `color` because it is in new array but not in
            // old array.
            ngDevMode && assertDefined(newKey, 'Expecting to have a valid key');
            newIndex += 2;
            setKey = newKey;
            setValue = newValue;
        }
        if (setKey !== null) {
            updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
        }
        oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
        newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
    }
}
/**
 * Update a simple (property name) styling.
 *
 * This function takes `prop` and updates the DOM to that value. The function takes the binding
 * value as well as binding priority into consideration to determine which value should be written
 * to DOM. (For example it may be determined that there is a higher priority overwrite which blocks
 * the DOM write, or if the value goes to `undefined` a lower priority overwrite may be consulted.)
 *
 * @param {?} tView Associated `TView.data` contains the linked list of binding priorities.
 * @param {?} tNode `TNode` where the binding is located.
 * @param {?} lView `LView` contains the values associated with other styling binding at this `TNode`.
 * @param {?} renderer Renderer to use if any updates.
 * @param {?} prop Either style property name or a class name.
 * @param {?} value Either style value for `prop` or `true`/`false` if `prop` is class.
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @param {?} bindingIndex Binding index of the binding.
 * @return {?}
 */
function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
    if (tNode.type !== 3 /* Element */) {
        // It is possible to have styling on non-elements (such as ng-container).
        // This is rare, but it does happen. In such a case, just ignore the binding.
        return;
    }
    /** @type {?} */
    const tData = tView.data;
    /** @type {?} */
    const tRange = (/** @type {?} */ (tData[bindingIndex + 1]));
    /** @type {?} */
    const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ?
        findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) :
        undefined;
    if (!isStylingValuePresent(higherPriorityValue)) {
        // We don't have a next duplicate, or we did not find a duplicate value.
        if (!isStylingValuePresent(value)) {
            // We should delete current value or restore to lower priority value.
            if (getTStylingRangePrevDuplicate(tRange)) {
                // We have a possible prev duplicate, let's retrieve it.
                value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
            }
        }
        /** @type {?} */
        const rNode = (/** @type {?} */ (getNativeByIndex(getSelectedIndex(), lView)));
        applyStyling(renderer, isClassBased, rNode, prop, value);
    }
}
/**
 * Search for styling value with higher priority which is overwriting current value, or a
 * value of lower priority to which we should fall back if the value is `undefined`.
 *
 * When value is being applied at a location, related values need to be consulted.
 * - If there is a higher priority binding, we should be using that one instead.
 *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp1`
 *   requires that we check `exp2` to see if it is set to value other than `undefined`.
 * - If there is a lower priority binding and we are changing to `undefined`
 *   For example `<div  [style]="{color:exp1}" [style.color]="exp2">` change to `exp2` to
 *   `undefined` requires that we check `exp1` (and static values) and use that as new value.
 *
 * NOTE: The styling stores two values.
 * 1. The raw value which came from the application is stored at `index + 0` location. (This value
 *    is used for dirty checking).
 * 2. The normalized value (converted to `KeyValueArray` if map and sanitized) is stored at `index +
 * 1`.
 *    The advantage of storing the sanitized value is that once the value is written we don't need
 *    to worry about sanitizing it later or keeping track of the sanitizer.
 *
 * @param {?} tData `TData` used for traversing the priority.
 * @param {?} tNode `TNode` to use for resolving static styling. Also controls search direction.
 *   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
 *      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
 *   - `null` search prev and go all the way to end. Return last value where
 *     `isStylingValuePresent(value)` is true.
 * @param {?} lView `LView` used for retrieving the actual values.
 * @param {?} prop Property which we are interested in.
 * @param {?} index Starting index in the linked list of styling bindings where the search should start.
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @return {?}
 */
function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
    // `TNode` to use for resolving static styling. Also controls search direction.
    //   - `TNode` search next and quit as soon as `isStylingValuePresent(value)` is true.
    //      If no value found consult `tNode.residualStyle`/`tNode.residualClass` for default value.
    //   - `null` search prev and go all the way to end. Return last value where
    //     `isStylingValuePresent(value)` is true.
    /** @type {?} */
    const isPrevDirection = tNode === null;
    /** @type {?} */
    let value = undefined;
    while (index > 0) {
        /** @type {?} */
        const rawKey = (/** @type {?} */ (tData[index]));
        /** @type {?} */
        const containsStatics = Array.isArray(rawKey);
        // Unwrap the key if we contain static values.
        /** @type {?} */
        const key = containsStatics ? ((/** @type {?} */ (rawKey)))[1] : rawKey;
        /** @type {?} */
        const isStylingMap = key === null;
        /** @type {?} */
        let valueAtLViewIndex = lView[index + 1];
        if (valueAtLViewIndex === NO_CHANGE) {
            // In firstUpdatePass the styling instructions create a linked list of styling.
            // On subsequent passes it is possible for a styling instruction to try to read a binding
            // which
            // has not yet executed. In that case we will find `NO_CHANGE` and we should assume that
            // we have `undefined` (or empty array in case of styling-map instruction) instead. This
            // allows the resolution to apply the value (which may later be overwritten when the
            // binding actually executes.)
            valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY$3 : undefined;
        }
        /** @type {?} */
        let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) :
            key === prop ? valueAtLViewIndex : undefined;
        if (containsStatics && !isStylingValuePresent(currentValue)) {
            currentValue = keyValueArrayGet((/** @type {?} */ (rawKey)), prop);
        }
        if (isStylingValuePresent(currentValue)) {
            value = currentValue;
            if (isPrevDirection) {
                return value;
            }
        }
        /** @type {?} */
        const tRange = (/** @type {?} */ (tData[index + 1]));
        index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
    }
    if (tNode !== null) {
        // in case where we are going in next direction AND we did not find anything, we need to
        // consult residual styling
        /** @type {?} */
        let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
        if (residual != null /** OR residual !=== undefined */) {
            value = keyValueArrayGet((/** @type {?} */ (residual)), prop);
        }
    }
    return value;
}
/**
 * Determines if the binding value should be used (or if the value is 'undefined' and hence priority
 * resolution should be used.)
 *
 * @param {?} value Binding style value.
 * @return {?}
 */
function isStylingValuePresent(value) {
    // Currently only `undefined` value is considered non-binding. That is `undefined` says I don't
    // have an opinion as to what this binding should be and you should consult other bindings by
    // priority to determine the valid value.
    // This is extracted into a single function so that we have a single place to control this.
    return value !== undefined;
}
/**
 * Sanitizes or adds suffix to the value.
 *
 * If value is `null`/`undefined` no suffix is added
 * @param {?} value
 * @param {?} suffixOrSanitizer
 * @return {?}
 */
function normalizeAndApplySuffixOrSanitizer(value, suffixOrSanitizer) {
    if (value == null /** || value === undefined */) {
        // do nothing
    }
    else if (typeof suffixOrSanitizer === 'function') {
        // sanitize the value.
        value = suffixOrSanitizer(value);
    }
    else if (typeof suffixOrSanitizer === 'string') {
        value = value + suffixOrSanitizer;
    }
    else if (typeof value === 'object') {
        value = stringify(unwrapSafeValue(value));
    }
    return value;
}
/**
 * Tests if the `TNode` has input shadow.
 *
 * An input shadow is when a directive steals (shadows) the input by using `\@Input('style')` or
 * `\@Input('class')` as input.
 *
 * @param {?} tNode `TNode` which we would like to see if it has shadow.
 * @param {?} isClassBased `true` if `class` (`false` if `style`)
 * @return {?}
 */
function hasStylingInputShadow(tNode, isClassBased) {
    return (tNode.flags & (isClassBased ? 16 /* hasClassInput */ : 32 /* hasStyleInput */)) !== 0;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/text.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Create static text node
 *
 * \@codeGenApi
 * @param {?} index Index of the node in the data array
 * @param {?=} value Static string value to write.
 *
 * @return {?}
 */
function ɵɵtext(index, value = '') {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const adjustedIndex = index + HEADER_OFFSET;
    ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'text nodes should be created before any bindings');
    ngDevMode && assertDataInRange(lView, adjustedIndex);
    /** @type {?} */
    const tNode = tView.firstCreatePass ?
        getOrCreateTNode(tView, lView[T_HOST], index, 3 /* Element */, null, null) :
        (/** @type {?} */ (tView.data[adjustedIndex]));
    /** @type {?} */
    const textNative = lView[adjustedIndex] = createTextNode(value, lView[RENDERER]);
    appendChild(tView, lView, textNative, tNode);
    // Text nodes are self closing.
    setPreviousOrParentTNode(tNode, false);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/text_interpolation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * Update text content with a lone bound value
 *
 * Used when a text node has 1 interpolated value in it, an no additional text
 * surrounds that interpolated value:
 *
 * ```html
 * <div>{{v0}}</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate(v0);
 * ```
 * @see textInterpolateV
 * \@codeGenApi
 * @param {?} v0
 * @return {?} itself, so that it may be chained.
 */
function ɵɵtextInterpolate(v0) {
    ɵɵtextInterpolate1('', v0, '');
    return ɵɵtextInterpolate;
}
/**
 *
 * Update text content with single bound value surrounded by other text.
 *
 * Used when a text node has 1 interpolated value in it:
 *
 * ```html
 * <div>prefix{{v0}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate1('prefix', v0, 'suffix');
 * ```
 * @see textInterpolateV
 * \@codeGenApi
 * @param {?} prefix
 * @param {?} v0
 * @param {?} suffix
 * @return {?} itself, so that it may be chained.
 */
function ɵɵtextInterpolate1(prefix, v0, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolation1(lView, prefix, v0, suffix);
    if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), (/** @type {?} */ (interpolated)));
    }
    return ɵɵtextInterpolate1;
}
/**
 *
 * Update text content with 2 bound values surrounded by other text.
 *
 * Used when a text node has 2 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate2('prefix', v0, '-', v1, 'suffix');
 * ```
 * @see textInterpolateV
 * \@codeGenApi
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} suffix
 * @return {?} itself, so that it may be chained.
 */
function ɵɵtextInterpolate2(prefix, v0, i0, v1, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);
    if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), (/** @type {?} */ (interpolated)));
    }
    return ɵɵtextInterpolate2;
}
/**
 *
 * Update text content with 3 bound values surrounded by other text.
 *
 * Used when a text node has 3 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate3(
 * 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 * @see textInterpolateV
 * \@codeGenApi
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} suffix
 * @return {?} itself, so that it may be chained.
 */
function ɵɵtextInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), (/** @type {?} */ (interpolated)));
    }
    return ɵɵtextInterpolate3;
}
/**
 *
 * Update text content with 4 bound values surrounded by other text.
 *
 * Used when a text node has 4 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate4(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 * @see ɵɵtextInterpolateV
 * \@codeGenApi
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} suffix
 * @return {?} itself, so that it may be chained.
 */
function ɵɵtextInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), (/** @type {?} */ (interpolated)));
    }
    return ɵɵtextInterpolate4;
}
/**
 *
 * Update text content with 5 bound values surrounded by other text.
 *
 * Used when a text node has 5 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate5(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 * @see textInterpolateV
 * \@codeGenApi
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} suffix
 * @return {?} itself, so that it may be chained.
 */
function ɵɵtextInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), (/** @type {?} */ (interpolated)));
    }
    return ɵɵtextInterpolate5;
}
/**
 *
 * Update text content with 6 bound values surrounded by other text.
 *
 * Used when a text node has 6 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate6(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * @see textInterpolateV
 * \@codeGenApi
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change. \@returns itself, so that it may be chained.
 * @param {?} suffix
 * @return {?}
 */
function ɵɵtextInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), (/** @type {?} */ (interpolated)));
    }
    return ɵɵtextInterpolate6;
}
/**
 *
 * Update text content with 7 bound values surrounded by other text.
 *
 * Used when a text node has 7 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate7(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 * @see textInterpolateV
 * \@codeGenApi
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} i4
 * @param {?} v5
 * @param {?} i5
 * @param {?} v6
 * @param {?} suffix
 * @return {?} itself, so that it may be chained.
 */
function ɵɵtextInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), (/** @type {?} */ (interpolated)));
    }
    return ɵɵtextInterpolate7;
}
/**
 *
 * Update text content with 8 bound values surrounded by other text.
 *
 * Used when a text node has 8 interpolated values in it:
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolate8(
 *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 * @see textInterpolateV
 * \@codeGenApi
 * @param {?} prefix
 * @param {?} v0
 * @param {?} i0
 * @param {?} v1
 * @param {?} i1
 * @param {?} v2
 * @param {?} i2
 * @param {?} v3
 * @param {?} i3
 * @param {?} v4
 * @param {?} i4
 * @param {?} v5
 * @param {?} i5
 * @param {?} v6
 * @param {?} i6
 * @param {?} v7
 * @param {?} suffix
 * @return {?} itself, so that it may be chained.
 */
function ɵɵtextInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), (/** @type {?} */ (interpolated)));
    }
    return ɵɵtextInterpolate8;
}
/**
 * Update text content with 9 or more bound values other surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div>prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix</div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵtextInterpolateV(
 *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 * .
 * \@codeGenApi
 * @param {?} values The collection of values and the strings in between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 *
 * @return {?} itself, so that it may be chained.
 */
function ɵɵtextInterpolateV(values) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolated = interpolationV(lView, values);
    if (interpolated !== NO_CHANGE) {
        textBindingInternal(lView, getSelectedIndex(), (/** @type {?} */ (interpolated)));
    }
    return ɵɵtextInterpolateV;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/class_map_interpolation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * Update an interpolated class on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div class="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate1('prefix', v0, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵclassMapInterpolate1(prefix, v0, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate2('prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵclassMapInterpolate2(prefix, v0, i0, v1, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate3(
 * 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵclassMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate4(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵclassMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate5(
 * 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵclassMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate6(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵclassMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate7(
 *    'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵclassMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 *
 * Update an interpolated class on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolate8(
 *  'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} i6 Static value used for concatenation only.
 * @param {?} v7 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵclassMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
/**
 * Update an interpolated class on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  class="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵclassMapInterpolateV(
 *  ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 * .
 * \@codeGenApi
 * @param {?} values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @return {?}
 */
function ɵɵclassMapInterpolateV(values) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolationV(lView, values);
    checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/style_map_interpolation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * Update an interpolated style on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div style="key: {{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate1('key: ', v0, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵstyleMapInterpolate1(prefix, v0, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate2('key: ', v0, '; key1: ', v1, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵstyleMapInterpolate2(prefix, v0, i0, v1, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key2: {{v1}}; key2: {{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate3(
 *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵstyleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate4(
 *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵstyleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate5(
 *     'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵstyleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}};
 *             key5: {{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate6(
 *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *    'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵstyleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
 *             key6: {{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate7(
 *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *    '; key6: ', v6, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵstyleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    ɵɵstyleMap(interpolatedValue);
}
/**
 *
 * Update an interpolated style on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div style="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
 *             key6: {{v6}}; key7: {{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolate8(
 *    'key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *    '; key6: ', v6, '; key7: ', v7, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} i6 Static value used for concatenation only.
 * @param {?} v7 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @return {?}
 */
function ɵɵstyleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    ɵɵstyleMap(interpolatedValue);
}
/**
 * Update an interpolated style on an element with 9 or more bound values surrounded by text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  class="key: {{v0}}; key1: {{v1}}; key2: {{v2}}; key3: {{v3}}; key4: {{v4}}; key5: {{v5}};
 *         key6: {{v6}}; key7: {{v7}}; key8: {{v8}}; key9: {{v9}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstyleMapInterpolateV(
 *    ['key: ', v0, '; key1: ', v1, '; key2: ', v2, '; key3: ', v3, '; key4: ', v4, '; key5: ', v5,
 *     '; key6: ', v6, '; key7: ', v7, '; key8: ', v8, '; key9: ', v9, 'suffix']);
 * ```
 * .
 * \@codeGenApi
 * @param {?} values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '; key2: ', value1, '; key2: ', value2, ..., value99, 'suffix']`)
 * @return {?}
 */
function ɵɵstyleMapInterpolateV(values) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolationV(lView, values);
    ɵɵstyleMap(interpolatedValue);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/style_prop_interpolation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * Update an interpolated style property on an element with single bound value surrounded by text.
 *
 * Used when the value passed to a property has 1 interpolated value in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate1(0, 'prefix', v0, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prop
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @return {?} itself, so that it may be chained.
 */
function ɵɵstylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return ɵɵstylePropInterpolate1;
}
/**
 *
 * Update an interpolated style property on an element with 2 bound values surrounded by text.
 *
 * Used when the value passed to a property has 2 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate2(0, 'prefix', v0, '-', v1, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prop
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @return {?} itself, so that it may be chained.
 */
function ɵɵstylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return ɵɵstylePropInterpolate2;
}
/**
 *
 * Update an interpolated style property on an element with 3 bound values surrounded by text.
 *
 * Used when the value passed to a property has 3 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate3(0, 'prefix', v0, '-', v1, '-', v2, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prop
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @return {?} itself, so that it may be chained.
 */
function ɵɵstylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return ɵɵstylePropInterpolate3;
}
/**
 *
 * Update an interpolated style property on an element with 4 bound values surrounded by text.
 *
 * Used when the value passed to a property has 4 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate4(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prop
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @return {?} itself, so that it may be chained.
 */
function ɵɵstylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return ɵɵstylePropInterpolate4;
}
/**
 *
 * Update an interpolated style property on an element with 5 bound values surrounded by text.
 *
 * Used when the value passed to a property has 5 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate5(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prop
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @return {?} itself, so that it may be chained.
 */
function ɵɵstylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return ɵɵstylePropInterpolate5;
}
/**
 *
 * Update an interpolated style property on an element with 6 bound values surrounded by text.
 *
 * Used when the value passed to a property has 6 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate6(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prop
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @return {?} itself, so that it may be chained.
 */
function ɵɵstylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return ɵɵstylePropInterpolate6;
}
/**
 *
 * Update an interpolated style property on an element with 7 bound values surrounded by text.
 *
 * Used when the value passed to a property has 7 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate7(
 *    0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prop
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @return {?} itself, so that it may be chained.
 */
function ɵɵstylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return ɵɵstylePropInterpolate7;
}
/**
 *
 * Update an interpolated style property on an element with 8 bound values surrounded by text.
 *
 * Used when the value passed to a property has 8 interpolated values in it:
 *
 * ```html
 * <div style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}suffix"></div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolate8(0, 'prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6,
 * '-', v7, 'suffix');
 * ```
 *
 * \@codeGenApi
 * @param {?} prop
 * @param {?} prefix Static value used for concatenation only.
 * @param {?} v0 Value checked for change.
 * @param {?} i0 Static value used for concatenation only.
 * @param {?} v1 Value checked for change.
 * @param {?} i1 Static value used for concatenation only.
 * @param {?} v2 Value checked for change.
 * @param {?} i2 Static value used for concatenation only.
 * @param {?} v3 Value checked for change.
 * @param {?} i3 Static value used for concatenation only.
 * @param {?} v4 Value checked for change.
 * @param {?} i4 Static value used for concatenation only.
 * @param {?} v5 Value checked for change.
 * @param {?} i5 Static value used for concatenation only.
 * @param {?} v6 Value checked for change.
 * @param {?} i6 Static value used for concatenation only.
 * @param {?} v7 Value checked for change.
 * @param {?} suffix Static value used for concatenation only.
 * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @return {?} itself, so that it may be chained.
 */
function ɵɵstylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return ɵɵstylePropInterpolate8;
}
/**
 * Update an interpolated style property on an element with 9 or more bound values surrounded by
 * text.
 *
 * Used when the number of interpolated values exceeds 8.
 *
 * ```html
 * <div
 *  style.color="prefix{{v0}}-{{v1}}-{{v2}}-{{v3}}-{{v4}}-{{v5}}-{{v6}}-{{v7}}-{{v8}}-{{v9}}suffix">
 * </div>
 * ```
 *
 * Its compiled representation is:
 *
 * ```ts
 * ɵɵstylePropInterpolateV(
 *  0, ['prefix', v0, '-', v1, '-', v2, '-', v3, '-', v4, '-', v5, '-', v6, '-', v7, '-', v9,
 *  'suffix']);
 * ```
 *
 * \@codeGenApi
 * @param {?} prop
 * @param {?} values The collection of values and the strings in-between those values, beginning with
 * a string prefix and ending with a string suffix.
 * (e.g. `['prefix', value0, '-', value1, '-', value2, ..., value99, 'suffix']`)
 * @param {?=} valueSuffix Optional suffix. Used with scalar values to add unit such as `px`.
 * @return {?} itself, so that it may be chained.
 */
function ɵɵstylePropInterpolateV(prop, values, valueSuffix) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const interpolatedValue = interpolationV(lView, values);
    checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
    return ɵɵstylePropInterpolateV;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/host_property.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Update a property on a host element. Only applies to native node properties, not inputs.
 *
 * Operates on the element selected by index via the {\@link select} instruction.
 *
 * \@codeGenApi
 * @template T
 * @param {?} propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param {?} value New value to write.
 * @param {?=} sanitizer An optional function used to sanitize the value.
 * @return {?} This function returns itself so that it may be chained
 * (e.g. `property('name', ctx.name)('title', ctx.title)`)
 *
 */
function ɵɵhostProperty(propName, value, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, value)) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
    }
    return ɵɵhostProperty;
}
/**
 * Updates a synthetic host binding (e.g. `[\@foo]`) on a component.
 *
 * This instruction is for compatibility purposes and is designed to ensure that a
 * synthetic host binding (e.g. `\@HostBinding('\@foo')`) properly gets rendered in
 * the component's renderer. Normally all host bindings are evaluated with the parent
 * component's renderer, but, in the case of animation \@triggers, they need to be
 * evaluated with the sub component's renderer (because that's where the animation
 * triggers are defined).
 *
 * Do not use this instruction as a replacement for `elementProperty`. This instruction
 * only exists to ensure compatibility with the ViewEngine's host binding behavior.
 *
 * \@codeGenApi
 * @template T
 * @param {?} propName Name of property. Because it is going to DOM, this is not subject to
 *        renaming as part of minification.
 * @param {?} value New value to write.
 * @param {?=} sanitizer An optional function used to sanitize the value.
 *
 * @return {?}
 */
function ɵɵupdateSyntheticHostBinding(propName, value, sanitizer) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const bindingIndex = nextBindingIndex();
    if (bindingUpdated(lView, bindingIndex, value)) {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const tNode = getSelectedTNode();
        /** @type {?} */
        const renderer = loadComponentRenderer(tNode, lView);
        elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
        ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
    }
    return ɵɵupdateSyntheticHostBinding;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/instructions/all.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/util/discovery_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Retrieves the component instance associated with a given DOM element.
 *
 * \@usageNotes
 * Given the following DOM structure:
 * ```html
 * <my-app>
 *   <div>
 *     <child-comp></child-comp>
 *   </div>
 * </my-app>
 * ```
 * Calling `getComponent` on `<child-comp>` will return the instance of `ChildComponent`
 * associated with this DOM element.
 *
 * Calling the function on `<my-app>` will return the `MyApp` instance.
 *
 *
 * \@publicApi
 * \@globalApi ng
 * @template T
 * @param {?} element DOM element from which the component should be retrieved.
 * @return {?} Component instance associated with the element or `null` if there
 *    is no component associated with it.
 *
 */
function getComponent(element) {
    assertDomElement(element);
    /** @type {?} */
    const context = loadLContext(element, false);
    if (context === null)
        return null;
    if (context.component === undefined) {
        context.component = getComponentAtNodeIndex(context.nodeIndex, context.lView);
    }
    return (/** @type {?} */ (context.component));
}
/**
 * If inside an embedded view (e.g. `*ngIf` or `*ngFor`), retrieves the context of the embedded
 * view that the element is part of. Otherwise retrieves the instance of the component whose view
 * owns the element (in this case, the result is the same as calling `getOwningComponent`).
 *
 * \@publicApi
 * \@globalApi ng
 * @template T
 * @param {?} element Element for which to get the surrounding component instance.
 * @return {?} Instance of the component that is around the element or null if the element isn't
 *    inside any component.
 *
 */
function getContext(element) {
    assertDomElement(element);
    /** @type {?} */
    const context = loadLContext(element, false);
    return context === null ? null : (/** @type {?} */ (context.lView[CONTEXT]));
}
/**
 * Retrieves the component instance whose view contains the DOM element.
 *
 * For example, if `<child-comp>` is used in the template of `<app-comp>`
 * (i.e. a `ViewChild` of `<app-comp>`), calling `getOwningComponent` on `<child-comp>`
 * would return `<app-comp>`.
 *
 * \@publicApi
 * \@globalApi ng
 * @template T
 * @param {?} elementOrDir DOM element, component or directive instance
 *    for which to retrieve the root components.
 * @return {?} Component instance whose view owns the DOM element or null if the element is not
 *    part of a component view.
 *
 */
function getOwningComponent(elementOrDir) {
    /** @type {?} */
    const context = loadLContext(elementOrDir, false);
    if (context === null)
        return null;
    /** @type {?} */
    let lView = context.lView;
    /** @type {?} */
    let parent;
    ngDevMode && assertLView(lView);
    while (lView[HOST] === null && (parent = (/** @type {?} */ (getLViewParent(lView))))) {
        // As long as lView[HOST] is null we know we are part of sub-template such as `*ngIf`
        lView = parent;
    }
    return lView[FLAGS] & 512 /* IsRoot */ ? null : (/** @type {?} */ (lView[CONTEXT]));
}
/**
 * Retrieves all root components associated with a DOM element, directive or component instance.
 * Root components are those which have been bootstrapped by Angular.
 *
 * \@publicApi
 * \@globalApi ng
 * @param {?} elementOrDir DOM element, component or directive instance
 *    for which to retrieve the root components.
 * @return {?} Root components associated with the target object.
 *
 */
function getRootComponents(elementOrDir) {
    return [...getRootContext(elementOrDir).components];
}
/**
 * Retrieves an `Injector` associated with an element, component or directive instance.
 *
 * \@publicApi
 * \@globalApi ng
 * @param {?} elementOrDir DOM element, component or directive instance for which to
 *    retrieve the injector.
 * @return {?} Injector associated with the element, component or directive instance.
 *
 */
function getInjector(elementOrDir) {
    /** @type {?} */
    const context = loadLContext(elementOrDir, false);
    if (context === null)
        return Injector.NULL;
    /** @type {?} */
    const tNode = (/** @type {?} */ (context.lView[TVIEW].data[context.nodeIndex]));
    return new NodeInjector(tNode, context.lView);
}
/**
 * Retrieve a set of injection tokens at a given DOM node.
 *
 * @param {?} element Element for which the injection tokens should be retrieved.
 * @return {?}
 */
function getInjectionTokens(element) {
    /** @type {?} */
    const context = loadLContext(element, false);
    if (context === null)
        return [];
    /** @type {?} */
    const lView = context.lView;
    /** @type {?} */
    const tView = lView[TVIEW];
    /** @type {?} */
    const tNode = (/** @type {?} */ (tView.data[context.nodeIndex]));
    /** @type {?} */
    const providerTokens = [];
    /** @type {?} */
    const startIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;
    /** @type {?} */
    const endIndex = tNode.directiveEnd;
    for (let i = startIndex; i < endIndex; i++) {
        /** @type {?} */
        let value = tView.data[i];
        if (isDirectiveDefHack(value)) {
            // The fact that we sometimes store Type and sometimes DirectiveDef in this location is a
            // design flaw.  We should always store same type so that we can be monomorphic. The issue
            // is that for Components/Directives we store the def instead the type. The correct behavior
            // is that we should always be storing injectable type in this location.
            value = value.type;
        }
        providerTokens.push(value);
    }
    return providerTokens;
}
/**
 * Retrieves directive instances associated with a given DOM element. Does not include
 * component instances.
 *
 * \@usageNotes
 * Given the following DOM structure:
 * ```
 * <my-app>
 *   <button my-button></button>
 *   <my-comp></my-comp>
 * </my-app>
 * ```
 * Calling `getDirectives` on `<button>` will return an array with an instance of the `MyButton`
 * directive that is associated with the DOM element.
 *
 * Calling `getDirectives` on `<my-comp>` will return an empty array.
 *
 * \@publicApi
 * \@globalApi ng
 * @param {?} element DOM element for which to get the directives.
 * @return {?} Array of directives associated with the element.
 *
 */
function getDirectives(element) {
    /** @type {?} */
    const context = (/** @type {?} */ (loadLContext(element)));
    if (context.directives === undefined) {
        context.directives = getDirectivesAtNodeIndex(context.nodeIndex, context.lView, false);
    }
    // The `directives` in this case are a named array called `LComponentView`. Clone the
    // result so we don't expose an internal data structure in the user's console.
    return context.directives === null ? [] : [...context.directives];
}
/**
 * @param {?} target
 * @param {?=} throwOnNotFound
 * @return {?}
 */
function loadLContext(target, throwOnNotFound = true) {
    /** @type {?} */
    const context = getLContext(target);
    if (!context && throwOnNotFound) {
        throw new Error(ngDevMode ? `Unable to find context associated with ${stringifyForError(target)}` :
            'Invalid ng target');
    }
    return context;
}
/**
 * Retrieve map of local references.
 *
 * The references are retrieved as a map of local reference name to element or directive instance.
 *
 * @param {?} target DOM element, component or directive instance for which to retrieve
 *    the local references.
 * @return {?}
 */
function getLocalRefs(target) {
    /** @type {?} */
    const context = loadLContext(target, false);
    if (context === null)
        return {};
    if (context.localRefs === undefined) {
        context.localRefs = discoverLocalRefs(context.lView, context.nodeIndex);
    }
    return context.localRefs || {};
}
/**
 * Retrieves the host element of a component or directive instance.
 * The host element is the DOM element that matched the selector of the directive.
 *
 * \@publicApi
 * \@globalApi ng
 * @param {?} componentOrDirective Component or directive instance for which the host
 *     element should be retrieved.
 * @return {?} Host element of the target.
 *
 */
function getHostElement(componentOrDirective) {
    return (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (getLContext(componentOrDirective))).native))));
}
/**
 * Retrieves the rendered text for a given component.
 *
 * This function retrieves the host element of a component and
 * and then returns the `textContent` for that element. This implies
 * that the text returned will include re-projected content of
 * the component as well.
 *
 * @param {?} component The component to return the content text for.
 * @return {?}
 */
function getRenderedText(component) {
    /** @type {?} */
    const hostElement = getHostElement(component);
    return hostElement.textContent || '';
}
/**
 * @param {?} node
 * @return {?}
 */
function loadLContextFromNode(node) {
    if (!(node instanceof Node))
        throw new Error('Expecting instance of DOM Element');
    return (/** @type {?} */ (loadLContext(node)));
}
/**
 * Event listener configuration returned from `getListeners`.
 * \@publicApi
 * @record
 */
function Listener() { }
if (false) {}
/**
 * Retrieves a list of event listeners associated with a DOM element. The list does include host
 * listeners, but it does not include event listeners defined outside of the Angular context
 * (e.g. through `addEventListener`).
 *
 * \@usageNotes
 * Given the following DOM structure:
 * ```
 * <my-app>
 *   <div (click)="doSomething()"></div>
 * </my-app>
 *
 * ```
 * Calling `getListeners` on `<div>` will return an object that looks as follows:
 * ```
 * {
 *   name: 'click',
 *   element: <div>,
 *   callback: () => doSomething(),
 *   useCapture: false
 * }
 * ```
 *
 * \@publicApi
 * \@globalApi ng
 * @param {?} element Element for which the DOM listeners should be retrieved.
 * @return {?} Array of event listeners on the DOM element.
 *
 */
function getListeners(element) {
    assertDomElement(element);
    /** @type {?} */
    const lContext = loadLContext(element, false);
    if (lContext === null)
        return [];
    /** @type {?} */
    const lView = lContext.lView;
    /** @type {?} */
    const tView = lView[TVIEW];
    /** @type {?} */
    const lCleanup = lView[CLEANUP];
    /** @type {?} */
    const tCleanup = tView.cleanup;
    /** @type {?} */
    const listeners = [];
    if (tCleanup && lCleanup) {
        for (let i = 0; i < tCleanup.length;) {
            /** @type {?} */
            const firstParam = tCleanup[i++];
            /** @type {?} */
            const secondParam = tCleanup[i++];
            if (typeof firstParam === 'string') {
                /** @type {?} */
                const name = firstParam;
                /** @type {?} */
                const listenerElement = (/** @type {?} */ ((/** @type {?} */ (unwrapRNode(lView[secondParam])))));
                /** @type {?} */
                const callback = lCleanup[tCleanup[i++]];
                /** @type {?} */
                const useCaptureOrIndx = tCleanup[i++];
                // if useCaptureOrIndx is boolean then report it as is.
                // if useCaptureOrIndx is positive number then it in unsubscribe method
                // if useCaptureOrIndx is negative number then it is a Subscription
                /** @type {?} */
                const type = (typeof useCaptureOrIndx === 'boolean' || useCaptureOrIndx >= 0) ? 'dom' : 'output';
                /** @type {?} */
                const useCapture = typeof useCaptureOrIndx === 'boolean' ? useCaptureOrIndx : false;
                if (element == listenerElement) {
                    listeners.push({ element, name, callback, useCapture, type });
                }
            }
        }
    }
    listeners.sort(sortListeners);
    return listeners;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function sortListeners(a, b) {
    if (a.name == b.name)
        return 0;
    return a.name < b.name ? -1 : 1;
}
/**
 * This function should not exist because it is megamorphic and only mostly correct.
 *
 * See call site for more info.
 * @param {?} obj
 * @return {?}
 */
function isDirectiveDefHack(obj) {
    return obj.type !== undefined && obj.template !== undefined && obj.declaredInputs !== undefined;
}
/**
 * Returns the attached `DebugNode` instance for an element in the DOM.
 *
 * @param {?} element DOM element which is owned by an existing component's view.
 * @return {?}
 */
function getDebugNode(element) {
    /** @type {?} */
    let debugNode = null;
    /** @type {?} */
    const lContext = loadLContextFromNode(element);
    /** @type {?} */
    const lView = lContext.lView;
    /** @type {?} */
    const nodeIndex = lContext.nodeIndex;
    if (nodeIndex !== -1) {
        /** @type {?} */
        const valueInLView = lView[nodeIndex];
        // this means that value in the lView is a component with its own
        // data. In this situation the TNode is not accessed at the same spot.
        /** @type {?} */
        const tNode = isLView(valueInLView) ? ((/** @type {?} */ (valueInLView[T_HOST]))) :
            getTNode(lView[TVIEW], nodeIndex - HEADER_OFFSET);
        debugNode = buildDebugNode(tNode, lView, nodeIndex);
    }
    return debugNode;
}
/**
 * Retrieve the component `LView` from component/element.
 *
 * NOTE: `LView` is a private and should not be leaked outside.
 *       Don't export this method to `ng.*` on window.
 *
 * @param {?} target DOM element or component instance for which to retrieve the LView.
 * @return {?}
 */
function getComponentLView(target) {
    /** @type {?} */
    const lContext = loadLContext(target);
    /** @type {?} */
    const nodeIndx = lContext.nodeIndex;
    /** @type {?} */
    const lView = lContext.lView;
    /** @type {?} */
    const componentLView = lView[nodeIndx];
    ngDevMode && assertLView(componentLView);
    return componentLView;
}
/**
 * Asserts that a value is a DOM Element.
 * @param {?} value
 * @return {?}
 */
function assertDomElement(value) {
    if (typeof Element !== 'undefined' && !(value instanceof Element)) {
        throw new Error('Expecting instance of DOM Element');
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/util/change_detection_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Marks a component for check (in case of OnPush components) and synchronously
 * performs change detection on the application this component belongs to.
 *
 * \@publicApi
 * \@globalApi ng
 * @param {?} component Component to {\@link ChangeDetectorRef#markForCheck mark for check}.
 *
 * @return {?}
 */
function applyChanges(component) {
    markDirty(component);
    getRootComponents(component).forEach((/**
     * @param {?} rootComponent
     * @return {?}
     */
    rootComponent => detectChanges(rootComponent)));
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/util/global_utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This value reflects the property on the window where the dev
 * tools are patched (window.ng).
 *
 * @type {?}
 */
const GLOBAL_PUBLISH_EXPANDO_KEY = 'ng';
/** @type {?} */
let _published = false;
/**
 * Publishes a collection of default debug tools onto`window.ng`.
 *
 * These functions are available globally when Angular is in development
 * mode and are automatically stripped away from prod mode is on.
 * @return {?}
 */
function publishDefaultGlobalUtils() {
    if (!_published) {
        _published = true;
        publishGlobalUtil('getComponent', getComponent);
        publishGlobalUtil('getContext', getContext);
        publishGlobalUtil('getListeners', getListeners);
        publishGlobalUtil('getOwningComponent', getOwningComponent);
        publishGlobalUtil('getHostElement', getHostElement);
        publishGlobalUtil('getInjector', getInjector);
        publishGlobalUtil('getRootComponents', getRootComponents);
        publishGlobalUtil('getDirectives', getDirectives);
        publishGlobalUtil('applyChanges', applyChanges);
    }
}
/**
 * Publishes the given function to `window.ng` so that it can be
 * used from the browser console when an application is not in production.
 * @param {?} name
 * @param {?} fn
 * @return {?}
 */
function publishGlobalUtil(name, fn) {
    if (typeof COMPILED === 'undefined' || !COMPILED) {
        // Note: we can't export `ng` when using closure enhanced optimization as:
        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
        // - we can't declare a closure extern as the namespace `ng` is already used within Google
        //   for typings for AngularJS (via `goog.provide('ng....')`).
        /** @type {?} */
        const w = (/** @type {?} */ ((/** @type {?} */ (_global))));
        ngDevMode && assertDefined(fn, 'function not defined');
        if (w) {
            /** @type {?} */
            let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];
            if (!container) {
                container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};
            }
            container[name] = fn;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Options that control how the component should be bootstrapped.
 * @record
 */
function CreateComponentOptions() { }
if (false) {}
// TODO: A hack to not pull in the NullInjector from @angular/core.
const ɵ0$b = /**
 * @param {?} token
 * @param {?=} notFoundValue
 * @return {?}
 */
(token, notFoundValue) => {
    throw new Error('NullInjector: Not found: ' + stringifyForError(token));
};
/** @type {?} */
const NULL_INJECTOR$1 = {
    get: (ɵ0$b)
};
/**
 * Bootstraps a Component into an existing host element and returns an instance
 * of the component.
 *
 * Use this function to bootstrap a component into the DOM tree. Each invocation
 * of this function will create a separate tree of components, injectors and
 * change detection cycles and lifetimes. To dynamically insert a new component
 * into an existing tree such that it shares the same injection, change detection
 * and object lifetime, use {\@link ViewContainer#createComponent}.
 *
 * @template T
 * @param {?} componentType Component to bootstrap
 * @param {?=} opts
 * @return {?}
 */
function renderComponent$1(componentType /* Type as workaround for: Microsoft/TypeScript/issues/4881 */, opts = {}) {
    ngDevMode && publishDefaultGlobalUtils();
    ngDevMode && assertComponentType(componentType);
    /** @type {?} */
    const rendererFactory = opts.rendererFactory || domRendererFactory3;
    /** @type {?} */
    const sanitizer = opts.sanitizer || null;
    /** @type {?} */
    const componentDef = (/** @type {?} */ (getComponentDef(componentType)));
    if (componentDef.type != componentType)
        ((/** @type {?} */ (componentDef))).type = componentType;
    // The first index of the first selector is the tag name.
    /** @type {?} */
    const componentTag = (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (componentDef.selectors))[0]))[0]));
    /** @type {?} */
    const hostRenderer = rendererFactory.createRenderer(null, null);
    /** @type {?} */
    const hostRNode = locateHostElement(hostRenderer, opts.host || componentTag, componentDef.encapsulation);
    /** @type {?} */
    const rootFlags = componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :
        16 /* CheckAlways */ | 512 /* IsRoot */;
    /** @type {?} */
    const rootContext = createRootContext(opts.scheduler, opts.playerHandler);
    /** @type {?} */
    const renderer = rendererFactory.createRenderer(hostRNode, componentDef);
    /** @type {?} */
    const rootTView = createTView(0 /* Root */, -1, null, 1, 0, null, null, null, null, null);
    /** @type {?} */
    const rootView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, renderer, undefined, opts.injector || null);
    enterView(rootView, null);
    /** @type {?} */
    let component;
    try {
        if (rendererFactory.begin)
            rendererFactory.begin();
        /** @type {?} */
        const componentView = createRootComponentView(hostRNode, componentDef, rootView, rendererFactory, renderer, sanitizer);
        component = createRootComponent(componentView, componentDef, rootView, rootContext, opts.hostFeatures || null);
        // create mode pass
        renderView(rootTView, rootView, null);
        // update mode pass
        refreshView(rootTView, rootView, null, null);
    }
    finally {
        leaveView();
        if (rendererFactory.end)
            rendererFactory.end();
    }
    return component;
}
/**
 * Creates the root component view and the root component node.
 *
 * @param {?} rNode Render host element.
 * @param {?} def ComponentDef
 * @param {?} rootView The parent view where the host node is stored
 * @param {?} rendererFactory
 * @param {?} hostRenderer The current renderer
 * @param {?=} sanitizer The sanitizer, if provided
 *
 * @return {?} Component view created
 */
function createRootComponentView(rNode, def, rootView, rendererFactory, hostRenderer, sanitizer) {
    /** @type {?} */
    const tView = rootView[TVIEW];
    ngDevMode && assertDataInRange(rootView, 0 + HEADER_OFFSET);
    rootView[0 + HEADER_OFFSET] = rNode;
    /** @type {?} */
    const tNode = getOrCreateTNode(tView, null, 0, 3 /* Element */, null, null);
    /** @type {?} */
    const mergedAttrs = tNode.mergedAttrs = def.hostAttrs;
    if (mergedAttrs !== null) {
        computeStaticStyling(tNode, mergedAttrs);
        if (rNode !== null) {
            setUpAttributes(hostRenderer, rNode, mergedAttrs);
            if (tNode.classes !== null) {
                writeDirectClass(hostRenderer, rNode, tNode.classes);
            }
            if (tNode.styles !== null) {
                writeDirectStyle(hostRenderer, rNode, tNode.styles);
            }
        }
    }
    /** @type {?} */
    const viewRenderer = rendererFactory.createRenderer(rNode, def);
    /** @type {?} */
    const componentView = createLView(rootView, getOrCreateTComponentView(def), null, def.onPush ? 64 /* Dirty */ : 16 /* CheckAlways */, rootView[HEADER_OFFSET], tNode, rendererFactory, viewRenderer, sanitizer);
    if (tView.firstCreatePass) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, rootView), tView, def.type);
        markAsComponentHost(tView, tNode);
        initTNodeFlags(tNode, rootView.length, 1);
    }
    addToViewTree(rootView, componentView);
    // Store component view at node index, with node as the HOST
    return rootView[HEADER_OFFSET] = componentView;
}
/**
 * Creates a root component and sets it up with features and host bindings. Shared by
 * renderComponent() and ViewContainerRef.createComponent().
 * @template T
 * @param {?} componentView
 * @param {?} componentDef
 * @param {?} rootLView
 * @param {?} rootContext
 * @param {?} hostFeatures
 * @return {?}
 */
function createRootComponent(componentView, componentDef, rootLView, rootContext, hostFeatures) {
    /** @type {?} */
    const tView = rootLView[TVIEW];
    // Create directive instance with factory() and store at next index in viewData
    /** @type {?} */
    const component = instantiateRootComponent(tView, rootLView, componentDef);
    rootContext.components.push(component);
    componentView[CONTEXT] = component;
    hostFeatures && hostFeatures.forEach((/**
     * @param {?} feature
     * @return {?}
     */
    (feature) => feature(component, componentDef)));
    // We want to generate an empty QueryList for root content queries for backwards
    // compatibility with ViewEngine.
    if (componentDef.contentQueries) {
        componentDef.contentQueries(1 /* Create */, component, rootLView.length - 1);
    }
    /** @type {?} */
    const rootTNode = getPreviousOrParentTNode();
    if (tView.firstCreatePass &&
        (componentDef.hostBindings !== null || componentDef.hostAttrs !== null)) {
        /** @type {?} */
        const elementIndex = rootTNode.index - HEADER_OFFSET;
        setSelectedIndex(elementIndex);
        /** @type {?} */
        const rootTView = rootLView[TVIEW];
        addHostBindingsToExpandoInstructions(rootTView, componentDef);
        growHostVarsSpace(rootTView, rootLView, componentDef.hostVars);
        invokeHostBindingsInCreationMode(componentDef, component);
    }
    return component;
}
/**
 * @param {?=} scheduler
 * @param {?=} playerHandler
 * @return {?}
 */
function createRootContext(scheduler, playerHandler) {
    return {
        components: [],
        scheduler: scheduler || defaultScheduler,
        clean: CLEAN_PROMISE,
        playerHandler: playerHandler || null,
        flags: 0 /* Empty */
    };
}
/**
 * Used to enable lifecycle hooks on the root component.
 *
 * Include this feature when calling `renderComponent` if the root component
 * you are rendering has lifecycle hooks defined. Otherwise, the hooks won't
 * be called properly.
 *
 * Example:
 *
 * ```
 * renderComponent(AppComponent, {hostFeatures: [LifecycleHooksFeature]});
 * ```
 * @param {?} component
 * @param {?} def
 * @return {?}
 */
function LifecycleHooksFeature(component, def) {
    /** @type {?} */
    const rootTView = (/** @type {?} */ (readPatchedLView(component)))[TVIEW];
    /** @type {?} */
    const dirIndex = rootTView.data.length - 1;
    // TODO(misko): replace `as TNode` with createTNode call. (needs refactoring to lose dep on
    // LNode).
    registerPostOrderHooks(rootTView, (/** @type {?} */ ({ directiveStart: dirIndex, directiveEnd: dirIndex + 1 })));
}
/**
 * Wait on component until it is rendered.
 *
 * This function returns a `Promise` which is resolved when the component's
 * change detection is executed. This is determined by finding the scheduler
 * associated with the `component`'s render tree and waiting until the scheduler
 * flushes. If nothing is scheduled, the function returns a resolved promise.
 *
 * Example:
 * ```
 * await whenRendered(myComponent);
 * ```
 *
 * @param {?} component Component to wait upon
 * @return {?} Promise which resolves when the component is rendered.
 */
function whenRendered(component) {
    return getRootContext(component).clean;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/features/inherit_definition_feature.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} type
 * @return {?}
 */
function getSuperType(type) {
    return Object.getPrototypeOf(type.prototype).constructor;
}
/**
 * Merges the definition from a super class to a sub class.
 * \@codeGenApi
 * @param {?} definition The definition that is a SubClass of another directive of component
 *
 * @return {?}
 */
function ɵɵInheritDefinitionFeature(definition) {
    /** @type {?} */
    let superType = getSuperType(definition.type);
    /** @type {?} */
    let shouldInheritFields = true;
    /** @type {?} */
    const inheritanceChain = [definition];
    while (superType) {
        /** @type {?} */
        let superDef = undefined;
        if (isComponentDef(definition)) {
            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
            superDef = superType.ɵcmp || superType.ɵdir;
        }
        else {
            if (superType.ɵcmp) {
                throw new Error('Directives cannot inherit Components');
            }
            // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
            superDef = superType.ɵdir;
        }
        if (superDef) {
            if (shouldInheritFields) {
                inheritanceChain.push(superDef);
                // Some fields in the definition may be empty, if there were no values to put in them that
                // would've justified object creation. Unwrap them if necessary.
                /** @type {?} */
                const writeableDef = (/** @type {?} */ (definition));
                writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
                writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
                writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);
                // Merge hostBindings
                /** @type {?} */
                const superHostBindings = superDef.hostBindings;
                superHostBindings && inheritHostBindings(definition, superHostBindings);
                // Merge queries
                /** @type {?} */
                const superViewQuery = superDef.viewQuery;
                /** @type {?} */
                const superContentQueries = superDef.contentQueries;
                superViewQuery && inheritViewQuery(definition, superViewQuery);
                superContentQueries && inheritContentQueries(definition, superContentQueries);
                // Merge inputs and outputs
                fillProperties(definition.inputs, superDef.inputs);
                fillProperties(definition.declaredInputs, superDef.declaredInputs);
                fillProperties(definition.outputs, superDef.outputs);
                // Merge animations metadata.
                // If `superDef` is a Component, the `data` field is present (defaults to an empty object).
                if (isComponentDef(superDef) && superDef.data.animation) {
                    // If super def is a Component, the `definition` is also a Component, since Directives can
                    // not inherit Components (we throw an error above and cannot reach this code).
                    /** @type {?} */
                    const defData = ((/** @type {?} */ (definition))).data;
                    defData.animation = (defData.animation || []).concat(superDef.data.animation);
                }
                // Inherit hooks
                // Assume super class inheritance feature has already run.
                writeableDef.afterContentChecked =
                    writeableDef.afterContentChecked || superDef.afterContentChecked;
                writeableDef.afterContentInit = definition.afterContentInit || superDef.afterContentInit;
                writeableDef.afterViewChecked = definition.afterViewChecked || superDef.afterViewChecked;
                writeableDef.afterViewInit = definition.afterViewInit || superDef.afterViewInit;
                writeableDef.doCheck = definition.doCheck || superDef.doCheck;
                writeableDef.onDestroy = definition.onDestroy || superDef.onDestroy;
                writeableDef.onInit = definition.onInit || superDef.onInit;
            }
            // Run parent features
            /** @type {?} */
            const features = superDef.features;
            if (features) {
                for (let i = 0; i < features.length; i++) {
                    /** @type {?} */
                    const feature = features[i];
                    if (feature && feature.ngInherit) {
                        ((/** @type {?} */ (feature)))(definition);
                    }
                    // If `InheritDefinitionFeature` is a part of the current `superDef`, it means that this
                    // def already has all the necessary information inherited from its super class(es), so we
                    // can stop merging fields from super classes. However we need to iterate through the
                    // prototype chain to look for classes that might contain other "features" (like
                    // NgOnChanges), which we should invoke for the original `definition`. We set the
                    // `shouldInheritFields` flag to indicate that, essentially skipping fields inheritance
                    // logic and only invoking functions from the "features" list.
                    if (feature === ɵɵInheritDefinitionFeature) {
                        shouldInheritFields = false;
                    }
                }
            }
        }
        superType = Object.getPrototypeOf(superType);
    }
    mergeHostAttrsAcrossInheritance(inheritanceChain);
}
/**
 * Merge the `hostAttrs` and `hostVars` from the inherited parent to the base class.
 *
 * @param {?} inheritanceChain A list of `WritableDefs` starting at the top most type and listing
 * sub-types in order. For each type take the `hostAttrs` and `hostVars` and merge it with the child
 * type.
 * @return {?}
 */
function mergeHostAttrsAcrossInheritance(inheritanceChain) {
    /** @type {?} */
    let hostVars = 0;
    /** @type {?} */
    let hostAttrs = null;
    // We process the inheritance order from the base to the leaves here.
    for (let i = inheritanceChain.length - 1; i >= 0; i--) {
        /** @type {?} */
        const def = inheritanceChain[i];
        // For each `hostVars`, we need to add the superclass amount.
        def.hostVars = (hostVars += def.hostVars);
        // for each `hostAttrs` we need to merge it with superclass.
        def.hostAttrs =
            mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
    }
}
/**
 * @param {?} value
 * @return {?}
 */
function maybeUnwrapEmpty(value) {
    if (value === EMPTY_OBJ) {
        return {};
    }
    else if (value === EMPTY_ARRAY) {
        return [];
    }
    else {
        return value;
    }
}
/**
 * @param {?} definition
 * @param {?} superViewQuery
 * @return {?}
 */
function inheritViewQuery(definition, superViewQuery) {
    /** @type {?} */
    const prevViewQuery = definition.viewQuery;
    if (prevViewQuery) {
        definition.viewQuery = (/**
         * @param {?} rf
         * @param {?} ctx
         * @return {?}
         */
        (rf, ctx) => {
            superViewQuery(rf, ctx);
            prevViewQuery(rf, ctx);
        });
    }
    else {
        definition.viewQuery = superViewQuery;
    }
}
/**
 * @param {?} definition
 * @param {?} superContentQueries
 * @return {?}
 */
function inheritContentQueries(definition, superContentQueries) {
    /** @type {?} */
    const prevContentQueries = definition.contentQueries;
    if (prevContentQueries) {
        definition.contentQueries = (/**
         * @param {?} rf
         * @param {?} ctx
         * @param {?} directiveIndex
         * @return {?}
         */
        (rf, ctx, directiveIndex) => {
            superContentQueries(rf, ctx, directiveIndex);
            prevContentQueries(rf, ctx, directiveIndex);
        });
    }
    else {
        definition.contentQueries = superContentQueries;
    }
}
/**
 * @param {?} definition
 * @param {?} superHostBindings
 * @return {?}
 */
function inheritHostBindings(definition, superHostBindings) {
    /** @type {?} */
    const prevHostBindings = definition.hostBindings;
    if (prevHostBindings) {
        definition.hostBindings = (/**
         * @param {?} rf
         * @param {?} ctx
         * @return {?}
         */
        (rf, ctx) => {
            superHostBindings(rf, ctx);
            prevHostBindings(rf, ctx);
        });
    }
    else {
        definition.hostBindings = superHostBindings;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/features/copy_definition_feature.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Fields which exist on either directive or component definitions, and need to be copied from
 * parent to child classes by the `ɵɵCopyDefinitionFeature`.
 * @type {?}
 */
const COPY_DIRECTIVE_FIELDS = [
    // The child class should use the providers of its parent.
    'providersResolver',
];
/**
 * Fields which exist only on component definitions, and need to be copied from parent to child
 * classes by the `ɵɵCopyDefinitionFeature`.
 *
 * The type here allows any field of `ComponentDef` which is not also a property of `DirectiveDef`,
 * since those should go in `COPY_DIRECTIVE_FIELDS` above.
 * @type {?}
 */
const COPY_COMPONENT_FIELDS = [
    // The child class should use the template function of its parent, including all template
    // semantics.
    'template',
    'decls',
    'consts',
    'vars',
    'onPush',
    'ngContentSelectors',
    // The child class should use the CSS styles of its parent, including all styling semantics.
    'styles',
    'encapsulation',
    // The child class should be checked by the runtime in the same way as its parent.
    'schemas',
];
/**
 * Copies the fields not handled by the `ɵɵInheritDefinitionFeature` from the supertype of a
 * definition.
 *
 * This exists primarily to support ngcc migration of an existing View Engine pattern, where an
 * entire decorator is inherited from a parent to a child class. When ngcc detects this case, it
 * generates a skeleton definition on the child class, and applies this feature.
 *
 * The `ɵɵCopyDefinitionFeature` then copies any needed fields from the parent class' definition,
 * including things like the component template function.
 *
 * \@codeGenApi
 * @param {?} definition The definition of a child class which inherits from a parent class with its
 * own definition.
 *
 * @return {?}
 */
function ɵɵCopyDefinitionFeature(definition) {
    /** @type {?} */
    let superType = (/** @type {?} */ (getSuperType(definition.type)));
    /** @type {?} */
    let superDef = undefined;
    if (isComponentDef(definition)) {
        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
        superDef = (/** @type {?} */ (superType.ɵcmp));
    }
    else {
        // Don't use getComponentDef/getDirectiveDef. This logic relies on inheritance.
        superDef = (/** @type {?} */ (superType.ɵdir));
    }
    // Needed because `definition` fields are readonly.
    /** @type {?} */
    const defAny = ((/** @type {?} */ (definition)));
    // Copy over any fields that apply to either directives or components.
    for (const field of COPY_DIRECTIVE_FIELDS) {
        defAny[field] = superDef[field];
    }
    if (isComponentDef(superDef)) {
        // Copy over any component-specific fields.
        for (const field of COPY_COMPONENT_FIELDS) {
            defAny[field] = superDef[field];
        }
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents a basic change from a previous to a new value for a single
 * property on a directive instance. Passed as a value in a
 * {@link SimpleChanges} object to the `ngOnChanges` hook.
 *
 * @see `OnChanges`
 *
 * @publicApi
 */
class SimpleChange {
    constructor(previousValue, currentValue, firstChange) {
        this.previousValue = previousValue;
        this.currentValue = currentValue;
        this.firstChange = firstChange;
    }
    /**
     * Check whether the new value is the first value assigned.
     */
    isFirstChange() { return this.firstChange; }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/features/ng_onchanges_feature.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PRIVATE_PREFIX = '__ngOnChanges_';
/**
 * The NgOnChangesFeature decorates a component with support for the ngOnChanges
 * lifecycle hook, so it should be included in any component that implements
 * that hook.
 *
 * If the component or directive uses inheritance, the NgOnChangesFeature MUST
 * be included as a feature AFTER {\@link InheritDefinitionFeature}, otherwise
 * inherited properties will not be propagated to the ngOnChanges lifecycle
 * hook.
 *
 * Example usage:
 *
 * ```
 * static ɵcmp = defineComponent({
 *   ...
 *   inputs: {name: 'publicName'},
 *   features: [NgOnChangesFeature]
 * });
 * ```
 *
 * \@codeGenApi
 * @template T
 * @param {?} definition
 * @return {?}
 */
function ɵɵNgOnChangesFeature(definition) {
    if (definition.type.prototype.ngOnChanges) {
        definition.setInput = ngOnChangesSetInput;
        ((/** @type {?} */ (definition))).onChanges = wrapOnChanges();
    }
}
// This option ensures that the ngOnChanges lifecycle hook will be inherited
// from superclasses (in InheritDefinitionFeature).
/** @nocollapse */
// tslint:disable-next-line:no-toplevel-property-access
((/** @type {?} */ (ɵɵNgOnChangesFeature))).ngInherit = true;
/**
 * @return {?}
 */
function wrapOnChanges() {
    return (/**
     * @this {?}
     * @return {?}
     */
    function wrapOnChangesHook_inPreviousChangesStorage() {
        /** @type {?} */
        const simpleChangesStore = getSimpleChangesStore(this);
        /** @type {?} */
        const current = simpleChangesStore && simpleChangesStore.current;
        if (current) {
            /** @type {?} */
            const previous = (/** @type {?} */ (simpleChangesStore)).previous;
            if (previous === EMPTY_OBJ) {
                (/** @type {?} */ (simpleChangesStore)).previous = current;
            }
            else {
                // New changes are copied to the previous store, so that we don't lose history for inputs
                // which were not changed this time
                for (let key in current) {
                    previous[key] = current[key];
                }
            }
            (/** @type {?} */ (simpleChangesStore)).current = null;
            this.ngOnChanges(current);
        }
    });
}
/**
 * @template T
 * @this {?}
 * @param {?} instance
 * @param {?} value
 * @param {?} publicName
 * @param {?} privateName
 * @return {?}
 */
function ngOnChangesSetInput(instance, value, publicName, privateName) {
    /** @type {?} */
    const simpleChangesStore = getSimpleChangesStore(instance) ||
        setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });
    /** @type {?} */
    const current = simpleChangesStore.current || (simpleChangesStore.current = {});
    /** @type {?} */
    const previous = simpleChangesStore.previous;
    /** @type {?} */
    const declaredName = ((/** @type {?} */ (this.declaredInputs)))[publicName];
    /** @type {?} */
    const previousChange = previous[declaredName];
    current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
    ((/** @type {?} */ (instance)))[privateName] = value;
}
/** @type {?} */
const SIMPLE_CHANGES_STORE = '__ngSimpleChanges__';
/**
 * @param {?} instance
 * @return {?}
 */
function getSimpleChangesStore(instance) {
    return instance[SIMPLE_CHANGES_STORE] || null;
}
/**
 * @param {?} instance
 * @param {?} store
 * @return {?}
 */
function setSimpleChangesStore(instance, store) {
    return instance[SIMPLE_CHANGES_STORE] = store;
}
/**
 * @record
 */
function NgSimpleChangesStore() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/di_setup.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Resolves the providers which are defined in the DirectiveDef.
 *
 * When inserting the tokens and the factories in their respective arrays, we can assume that
 * this method is called first for the component (if any), and then for other directives on the same
 * node.
 * As a consequence,the providers are always processed in that order:
 * 1) The view providers of the component
 * 2) The providers of the component
 * 3) The providers of the other directives
 * This matches the structure of the injectables arrays of a view (for each node).
 * So the tokens and the factories can be pushed at the end of the arrays, except
 * in one case for multi providers.
 *
 * @template T
 * @param {?} def the directive definition
 * @param {?} providers
 * @param {?} viewProviders
 * @return {?}
 */
function providersResolver(def, providers, viewProviders) {
    /** @type {?} */
    const tView = getTView();
    if (tView.firstCreatePass) {
        /** @type {?} */
        const isComponent = isComponentDef(def);
        // The list of view providers is processed first, and the flags are updated
        resolveProvider$1(viewProviders, tView.data, tView.blueprint, isComponent, true);
        // Then, the list of providers is processed, and the flags are updated
        resolveProvider$1(providers, tView.data, tView.blueprint, isComponent, false);
    }
}
/**
 * Resolves a provider and publishes it to the DI system.
 * @param {?} provider
 * @param {?} tInjectables
 * @param {?} lInjectablesBlueprint
 * @param {?} isComponent
 * @param {?} isViewProvider
 * @return {?}
 */
function resolveProvider$1(provider, tInjectables, lInjectablesBlueprint, isComponent, isViewProvider) {
    provider = resolveForwardRef(provider);
    if (Array.isArray(provider)) {
        // Recursively call `resolveProvider`
        // Recursion is OK in this case because this code will not be in hot-path once we implement
        // cloning of the initial state.
        for (let i = 0; i < provider.length; i++) {
            resolveProvider$1(provider[i], tInjectables, lInjectablesBlueprint, isComponent, isViewProvider);
        }
    }
    else {
        /** @type {?} */
        const tView = getTView();
        /** @type {?} */
        const lView = getLView();
        /** @type {?} */
        let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
        /** @type {?} */
        let providerFactory = providerToFactory(provider);
        /** @type {?} */
        const tNode = getPreviousOrParentTNode();
        /** @type {?} */
        const beginIndex = tNode.providerIndexes & 65535 /* ProvidersStartIndexMask */;
        /** @type {?} */
        const endIndex = tNode.directiveStart;
        /** @type {?} */
        const cptViewProvidersCount = tNode.providerIndexes >> 16 /* CptViewProvidersCountShift */;
        if (isTypeProvider(provider) || !provider.multi) {
            // Single provider case: the factory is created and pushed immediately
            /** @type {?} */
            const factory = new NodeInjectorFactory(providerFactory, isViewProvider, ɵɵdirectiveInject);
            /** @type {?} */
            const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);
            if (existingFactoryIndex === -1) {
                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), tView, token);
                registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
                tInjectables.push(token);
                tNode.directiveStart++;
                tNode.directiveEnd++;
                if (isViewProvider) {
                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;
                }
                lInjectablesBlueprint.push(factory);
                lView.push(factory);
            }
            else {
                lInjectablesBlueprint[existingFactoryIndex] = factory;
                lView[existingFactoryIndex] = factory;
            }
        }
        else {
            // Multi provider case:
            // We create a multi factory which is going to aggregate all the values.
            // Since the output of such a factory depends on content or view injection,
            // we create two of them, which are linked together.
            //
            // The first one (for view providers) is always in the first block of the injectables array,
            // and the second one (for providers) is always in the second block.
            // This is important because view providers have higher priority. When a multi token
            // is being looked up, the view providers should be found first.
            // Note that it is not possible to have a multi factory in the third block (directive block).
            //
            // The algorithm to process multi providers is as follows:
            // 1) If the multi provider comes from the `viewProviders` of the component:
            //   a) If the special view providers factory doesn't exist, it is created and pushed.
            //   b) Else, the multi provider is added to the existing multi factory.
            // 2) If the multi provider comes from the `providers` of the component or of another
            // directive:
            //   a) If the multi factory doesn't exist, it is created and provider pushed into it.
            //      It is also linked to the multi factory for view providers, if it exists.
            //   b) Else, the multi provider is added to the existing multi factory.
            /** @type {?} */
            const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
            /** @type {?} */
            const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
            /** @type {?} */
            const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 &&
                lInjectablesBlueprint[existingProvidersFactoryIndex];
            /** @type {?} */
            const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 &&
                lInjectablesBlueprint[existingViewProvidersFactoryIndex];
            if (isViewProvider && !doesViewProvidersFactoryExist ||
                !isViewProvider && !doesProvidersFactoryExist) {
                // Cases 1.a and 2.a
                diPublicInInjector(getOrCreateNodeInjectorForNode((/** @type {?} */ (tNode)), lView), tView, token);
                /** @type {?} */
                const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent, providerFactory);
                if (!isViewProvider && doesViewProvidersFactoryExist) {
                    lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;
                }
                registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
                tInjectables.push(token);
                tNode.directiveStart++;
                tNode.directiveEnd++;
                if (isViewProvider) {
                    tNode.providerIndexes += 65536 /* CptViewProvidersCountShifter */;
                }
                lInjectablesBlueprint.push(factory);
                lView.push(factory);
            }
            else {
                // Cases 1.b and 2.b
                registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ?
                    existingProvidersFactoryIndex :
                    existingViewProvidersFactoryIndex);
                multiFactoryAdd((/** @type {?} */ (lInjectablesBlueprint))[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent);
            }
            if (!isViewProvider && isComponent && doesViewProvidersFactoryExist) {
                (/** @type {?} */ (lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders))++;
            }
        }
    }
}
/**
 * Registers the `ngOnDestroy` hook of a provider, if the provider supports destroy hooks.
 * @param {?} tView `TView` in which to register the hook.
 * @param {?} provider Provider whose hook should be registered.
 * @param {?} contextIndex Index under which to find the context for the hook when it's being invoked.
 * @return {?}
 */
function registerDestroyHooksIfSupported(tView, provider, contextIndex) {
    /** @type {?} */
    const providerIsTypeProvider = isTypeProvider(provider);
    if (providerIsTypeProvider || isClassProvider(provider)) {
        /** @type {?} */
        const prototype = (((/** @type {?} */ (provider))).useClass || provider).prototype;
        /** @type {?} */
        const ngOnDestroy = prototype.ngOnDestroy;
        if (ngOnDestroy) {
            (tView.destroyHooks || (tView.destroyHooks = [])).push(contextIndex, ngOnDestroy);
        }
    }
}
/**
 * Add a factory in a multi factory.
 * @param {?} multiFactory
 * @param {?} factory
 * @param {?} isComponentProvider
 * @return {?}
 */
function multiFactoryAdd(multiFactory, factory, isComponentProvider) {
    (/** @type {?} */ (multiFactory.multi)).push(factory);
    if (isComponentProvider) {
        (/** @type {?} */ (multiFactory.componentProviders))++;
    }
}
/**
 * Returns the index of item in the array, but only in the begin to end range.
 * @param {?} item
 * @param {?} arr
 * @param {?} begin
 * @param {?} end
 * @return {?}
 */
function indexOf(item, arr, begin, end) {
    for (let i = begin; i < end; i++) {
        if (arr[i] === item)
            return i;
    }
    return -1;
}
/**
 * Use this with `multi` `providers`.
 * @this {?}
 * @param {?} _
 * @param {?} tData
 * @param {?} lData
 * @param {?} tNode
 * @return {?}
 */
function multiProvidersFactoryResolver(_, tData, lData, tNode) {
    return multiResolve((/** @type {?} */ (this.multi)), []);
}
/**
 * Use this with `multi` `viewProviders`.
 *
 * This factory knows how to concatenate itself with the existing `multi` `providers`.
 * @this {?}
 * @param {?} _
 * @param {?} tData
 * @param {?} lView
 * @param {?} tNode
 * @return {?}
 */
function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
    /** @type {?} */
    const factories = (/** @type {?} */ (this.multi));
    /** @type {?} */
    let result;
    if (this.providerFactory) {
        /** @type {?} */
        const componentCount = (/** @type {?} */ (this.providerFactory.componentProviders));
        /** @type {?} */
        const multiProviders = getNodeInjectable(lView, lView[TVIEW], (/** @type {?} */ ((/** @type {?} */ (this.providerFactory)).index)), tNode);
        // Copy the section of the array which contains `multi` `providers` from the component
        result = multiProviders.slice(0, componentCount);
        // Insert the `viewProvider` instances.
        multiResolve(factories, result);
        // Copy the section of the array which contains `multi` `providers` from other directives
        for (let i = componentCount; i < multiProviders.length; i++) {
            result.push(multiProviders[i]);
        }
    }
    else {
        result = [];
        // Insert the `viewProvider` instances.
        multiResolve(factories, result);
    }
    return result;
}
/**
 * Maps an array of factories into an array of values.
 * @param {?} factories
 * @param {?} result
 * @return {?}
 */
function multiResolve(factories, result) {
    for (let i = 0; i < factories.length; i++) {
        /** @type {?} */
        const factory = (/** @type {?} */ ((/** @type {?} */ (factories[i]))));
        result.push(factory());
    }
    return result;
}
/**
 * Creates a multi factory.
 * @param {?} factoryFn
 * @param {?} index
 * @param {?} isViewProvider
 * @param {?} isComponent
 * @param {?} f
 * @return {?}
 */
function multiFactory(factoryFn, index, isViewProvider, isComponent, f) {
    /** @type {?} */
    const factory = new NodeInjectorFactory(factoryFn, isViewProvider, ɵɵdirectiveInject);
    factory.multi = [];
    factory.index = index;
    factory.componentProviders = 0;
    multiFactoryAdd(factory, f, isComponent && !isViewProvider);
    return factory;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/features/providers_feature.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This feature resolves the providers of a directive (or component),
 * and publish them into the DI system, making it visible to others for injection.
 *
 * For example:
 * ```ts
 * class ComponentWithProviders {
 *   constructor(private greeter: GreeterDE) {}
 *
 *   static ɵcmp = defineComponent({
 *     type: ComponentWithProviders,
 *     selectors: [['component-with-providers']],
 *    factory: () => new ComponentWithProviders(directiveInject(GreeterDE as any)),
 *    decls: 1,
 *    vars: 1,
 *    template: function(fs: RenderFlags, ctx: ComponentWithProviders) {
 *      if (fs & RenderFlags.Create) {
 *        ɵɵtext(0);
 *      }
 *      if (fs & RenderFlags.Update) {
 *        ɵɵtextInterpolate(ctx.greeter.greet());
 *      }
 *    },
 *    features: [ProvidersFeature([GreeterDE])]
 *  });
 * }
 * ```
 *
 * \@codeGenApi
 * @template T
 * @param {?} providers
 * @param {?=} viewProviders
 * @return {?}
 */
function ɵɵProvidersFeature(providers, viewProviders = []) {
    return (/**
     * @param {?} definition
     * @return {?}
     */
    (definition) => {
        definition.providersResolver =
            (/**
             * @param {?} def
             * @param {?=} processProvidersFn
             * @return {?}
             */
            (def, processProvidersFn) => {
                return providersResolver(def, //
                processProvidersFn ? processProvidersFn(providers) : providers, //
                viewProviders);
            });
    });
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/component_factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Represents a component created by a `ComponentFactory`.
 * Provides access to the component instance and related objects,
 * and provides the means of destroying the instance.
 *
 * \@publicApi
 * @abstract
 * @template C
 */
class ComponentRef {
}
if (false) {}
/**
 * Base class for a factory that can create a component dynamically.
 * Instantiate a factory for a given type of component with `resolveComponentFactory()`.
 * Use the resulting `ComponentFactory.create()` method to create a component of that type.
 *
 * @see [Dynamic Components](guide/dynamic-component-loader)
 *
 * \@publicApi
 * @abstract
 * @template C
 */
class ComponentFactory {
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/component_factory_resolver.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} component
 * @return {?}
 */
function noComponentFactoryError(component) {
    /** @type {?} */
    const error = Error(`No component factory found for ${stringify(component)}. Did you add it to @NgModule.entryComponents?`);
    ((/** @type {?} */ (error)))[ERROR_COMPONENT] = component;
    return error;
}
/** @type {?} */
const ERROR_COMPONENT = 'ngComponent';
/**
 * @param {?} error
 * @return {?}
 */
function getComponent$1(error) {
    return ((/** @type {?} */ (error)))[ERROR_COMPONENT];
}
class _NullComponentFactoryResolver {
    /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    resolveComponentFactory(component) {
        throw noComponentFactoryError(component);
    }
}
/**
 * A simple registry that maps `Components` to generated `ComponentFactory` classes
 * that can be used to create instances of components.
 * Use to obtain the factory for a given component type,
 * then use the factory's `create()` method to create a component of that type.
 *
 * @see [Dynamic Components](guide/dynamic-component-loader)
 * \@publicApi
 * @abstract
 */
class ComponentFactoryResolver {
}
ComponentFactoryResolver.NULL = new _NullComponentFactoryResolver();
if (false) {}
class CodegenComponentFactoryResolver {
    /**
     * @param {?} factories
     * @param {?} _parent
     * @param {?} _ngModule
     */
    constructor(factories, _parent, _ngModule) {
        this._parent = _parent;
        this._ngModule = _ngModule;
        this._factories = new Map();
        for (let i = 0; i < factories.length; i++) {
            /** @type {?} */
            const factory = factories[i];
            this._factories.set(factory.componentType, factory);
        }
    }
    /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    resolveComponentFactory(component) {
        /** @type {?} */
        let factory = this._factories.get(component);
        if (!factory && this._parent) {
            factory = this._parent.resolveComponentFactory(component);
        }
        if (!factory) {
            throw noComponentFactoryError(component);
        }
        return new ComponentFactoryBoundToModule(factory, this._ngModule);
    }
}
if (false) {}
/**
 * @template C
 */
class ComponentFactoryBoundToModule extends ComponentFactory {
    /**
     * @param {?} factory
     * @param {?} ngModule
     */
    constructor(factory, ngModule) {
        super();
        this.factory = factory;
        this.ngModule = ngModule;
        this.selector = factory.selector;
        this.componentType = factory.componentType;
        this.ngContentSelectors = factory.ngContentSelectors;
        this.inputs = factory.inputs;
        this.outputs = factory.outputs;
    }
    /**
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
        return this.factory.create(injector, projectableNodes, rootSelectorOrNode, ngModule || this.ngModule);
    }
}
if (false) {}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function noop(...args) {
    // Do nothing.
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/element_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A wrapper around a native element inside of a View.
 *
 * An `ElementRef` is backed by a render-specific element. In the browser, this is usually a DOM
 * element.
 *
 * \@security Permitting direct access to the DOM can make your application more vulnerable to
 * XSS attacks. Carefully review any use of `ElementRef` in your code. For more detail, see the
 * [Security Guide](http://g.co/ng/security).
 *
 * \@publicApi
 * @template T
 */
// Note: We don't expose things like `Injector`, `ViewContainer`, ... here,
// i.e. users have to ask for what they need. With that, we can build better analysis tools
// and could do better codegen in the future.
class ElementRef {
    /**
     * @param {?} nativeElement
     */
    constructor(nativeElement) {
        this.nativeElement = nativeElement;
    }
}
/**
 * \@internal
 * @nocollapse
 */
ElementRef.__NG_ELEMENT_ID__ = (/**
 * @return {?}
 */
() => SWITCH_ELEMENT_REF_FACTORY(ElementRef));
if (false) {}
/** @type {?} */
const SWITCH_ELEMENT_REF_FACTORY__POST_R3__ = injectElementRef;
/** @type {?} */
const SWITCH_ELEMENT_REF_FACTORY__PRE_R3__ = noop;
/** @type {?} */
const SWITCH_ELEMENT_REF_FACTORY = SWITCH_ELEMENT_REF_FACTORY__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render/api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const Renderer2Interceptor = new InjectionToken('Renderer2Interceptor');
/**
 * Used by `RendererFactory2` to associate custom rendering data and styles
 * with a rendering implementation.
 * \@publicApi
 * @record
 */
function RendererType2() { }
if (false) {}
/**
 * Creates and initializes a custom renderer that implements the `Renderer2` base class.
 *
 * \@publicApi
 * @abstract
 */
class RendererFactory2 {
}
if (false) {}
/** @enum {number} */
const RendererStyleFlags2 = {
    // TODO(misko): This needs to be refactored into a separate file so that it can be imported from
    // `node_manipulation.ts` Currently doing the import cause resolution order to change and fails
    // the tests. The work around is to have hard coded value in `node_manipulation.ts` for now.
    /**
     * Marks a style as important.
     */
    Important: 1,
    /**
     * Marks a style as using dash case naming (this-is-dash-case).
     */
    DashCase: 2,
};
RendererStyleFlags2[RendererStyleFlags2.Important] = 'Important';
RendererStyleFlags2[RendererStyleFlags2.DashCase] = 'DashCase';
/**
 * Extend this base class to implement custom rendering. By default, Angular
 * renders a template into DOM. You can use custom rendering to intercept
 * rendering calls, or to render to something other than DOM.
 *
 * Create your custom renderer using `RendererFactory2`.
 *
 * Use a custom renderer to bypass Angular's templating and
 * make custom UI changes that can't be expressed declaratively.
 * For example if you need to set a property or an attribute whose name is
 * not statically known, use the `setProperty()` or
 * `setAttribute()` method.
 *
 * \@publicApi
 * @abstract
 */
class Renderer2 {
}
/**
 * \@internal
 * @nocollapse
 */
Renderer2.__NG_ELEMENT_ID__ = (/**
 * @return {?}
 */
() => SWITCH_RENDERER2_FACTORY());
if (false) {}
/** @type {?} */
const SWITCH_RENDERER2_FACTORY__POST_R3__ = injectRenderer2;
/** @type {?} */
const SWITCH_RENDERER2_FACTORY__PRE_R3__ = noop;
/** @type {?} */
const SWITCH_RENDERER2_FACTORY = SWITCH_RENDERER2_FACTORY__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/sanitization/sanitizer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Sanitizer is used by the views to sanitize potentially dangerous values.
 *
 * \@publicApi
 * @abstract
 */
class Sanitizer {
}
/** @nocollapse */
/** @nocollapse */ Sanitizer.ɵprov = ɵɵdefineInjectable({
    token: Sanitizer,
    providedIn: 'root',
    factory: (/**
     * @nocollapse @return {?}
     */
    () => null),
});
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/version.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@description Represents the version of Angular
 *
 * \@publicApi
 */
class Version {
    /**
     * @param {?} full
     */
    constructor(full) {
        this.full = full;
        this.major = full.split('.')[0];
        this.minor = full.split('.')[1];
        this.patch = full.split('.').slice(2).join('.');
    }
}
if (false) {}
/**
 * \@publicApi
 * @type {?}
 */
const VERSION = new Version('9.0.7');

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/change_detection/differs/default_iterable_differ.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultIterableDifferFactory {
    constructor() { }
    /**
     * @param {?} obj
     * @return {?}
     */
    supports(obj) { return isListLikeIterable$1(obj); }
    /**
     * @template V
     * @param {?=} trackByFn
     * @return {?}
     */
    create(trackByFn) {
        return new DefaultIterableDiffer(trackByFn);
    }
}
/** @type {?} */
const trackByIdentity = (/**
 * @param {?} index
 * @param {?} item
 * @return {?}
 */
(index, item) => item);
const ɵ0$c = trackByIdentity;
/**
 * @deprecated v4.0.0 - Should not be part of public API.
 * \@publicApi
 * @template V
 */
class DefaultIterableDiffer {
    /**
     * @param {?=} trackByFn
     */
    constructor(trackByFn) {
        this.length = 0;
        // Keeps track of the used records at any point in time (during & across `_check()` calls)
        this._linkedRecords = null;
        // Keeps track of the removed records at any point in time during `_check()` calls.
        this._unlinkedRecords = null;
        this._previousItHead = null;
        this._itHead = null;
        this._itTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._movesHead = null;
        this._movesTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
        // Keeps track of records where custom track by is the same, but item identity has changed
        this._identityChangesHead = null;
        this._identityChangesTail = null;
        this._trackByFn = trackByFn || trackByIdentity;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._itHead; record !== null; record = record._next) {
            fn(record);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachOperation(fn) {
        /** @type {?} */
        let nextIt = this._itHead;
        /** @type {?} */
        let nextRemove = this._removalsHead;
        /** @type {?} */
        let addRemoveOffset = 0;
        /** @type {?} */
        let moveOffsets = null;
        while (nextIt || nextRemove) {
            // Figure out which is the next record to process
            // Order: remove, add, move
            /** @type {?} */
            const record = !nextRemove ||
                nextIt &&
                    (/** @type {?} */ (nextIt.currentIndex)) <
                        getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ?
                (/** @type {?} */ (nextIt)) :
                nextRemove;
            /** @type {?} */
            const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
            /** @type {?} */
            const currentIndex = record.currentIndex;
            // consume the item, and adjust the addRemoveOffset and update moveDistance if necessary
            if (record === nextRemove) {
                addRemoveOffset--;
                nextRemove = nextRemove._nextRemoved;
            }
            else {
                nextIt = (/** @type {?} */ (nextIt))._next;
                if (record.previousIndex == null) {
                    addRemoveOffset++;
                }
                else {
                    // INVARIANT:  currentIndex < previousIndex
                    if (!moveOffsets)
                        moveOffsets = [];
                    /** @type {?} */
                    const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
                    /** @type {?} */
                    const localCurrentIndex = (/** @type {?} */ (currentIndex)) - addRemoveOffset;
                    if (localMovePreviousIndex != localCurrentIndex) {
                        for (let i = 0; i < localMovePreviousIndex; i++) {
                            /** @type {?} */
                            const offset = i < moveOffsets.length ? moveOffsets[i] : (moveOffsets[i] = 0);
                            /** @type {?} */
                            const index = offset + i;
                            if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                                moveOffsets[i] = offset + 1;
                            }
                        }
                        /** @type {?} */
                        const previousIndex = record.previousIndex;
                        moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
                    }
                }
            }
            if (adjPreviousIndex !== currentIndex) {
                fn(record, adjPreviousIndex, currentIndex);
            }
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachPreviousItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachAddedItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachMovedItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._movesHead; record !== null; record = record._nextMoved) {
            fn(record);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachRemovedItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachIdentityChange(fn) {
        /** @type {?} */
        let record;
        for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
            fn(record);
        }
    }
    /**
     * @param {?} collection
     * @return {?}
     */
    diff(collection) {
        if (collection == null)
            collection = [];
        if (!isListLikeIterable$1(collection)) {
            throw new Error(`Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);
        }
        if (this.check(collection)) {
            return this;
        }
        else {
            return null;
        }
    }
    /**
     * @return {?}
     */
    onDestroy() { }
    /**
     * @param {?} collection
     * @return {?}
     */
    check(collection) {
        this._reset();
        /** @type {?} */
        let record = this._itHead;
        /** @type {?} */
        let mayBeDirty = false;
        /** @type {?} */
        let index;
        /** @type {?} */
        let item;
        /** @type {?} */
        let itemTrackBy;
        if (Array.isArray(collection)) {
            ((/** @type {?} */ (this))).length = collection.length;
            for (let index = 0; index < this.length; index++) {
                item = collection[index];
                itemTrackBy = this._trackByFn(index, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = this._mismatch(record, item, itemTrackBy, index);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = this._verifyReinsertion(record, item, itemTrackBy, index);
                    }
                    if (!looseIdentical(record.item, item))
                        this._addIdentityChange(record, item);
                }
                record = record._next;
            }
        }
        else {
            index = 0;
            iterateListLike$1(collection, (/**
             * @param {?} item
             * @return {?}
             */
            (item) => {
                itemTrackBy = this._trackByFn(index, item);
                if (record === null || !looseIdentical(record.trackById, itemTrackBy)) {
                    record = this._mismatch(record, item, itemTrackBy, index);
                    mayBeDirty = true;
                }
                else {
                    if (mayBeDirty) {
                        // TODO(misko): can we limit this to duplicates only?
                        record = this._verifyReinsertion(record, item, itemTrackBy, index);
                    }
                    if (!looseIdentical(record.item, item))
                        this._addIdentityChange(record, item);
                }
                record = record._next;
                index++;
            }));
            ((/** @type {?} */ (this))).length = index;
        }
        this._truncate(record);
        ((/** @type {?} */ (this))).collection = collection;
        return this.isDirty;
    }
    /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
       * changes.
       */
    /**
     * @return {?}
     */
    get isDirty() {
        return this._additionsHead !== null || this._movesHead !== null ||
            this._removalsHead !== null || this._identityChangesHead !== null;
    }
    /**
     * Reset the state of the change objects to show no changes. This means set previousKey to
     * currentKey, and clear all of the queues (additions, moves, removals).
     * Set the previousIndexes of moved and added items to their currentIndexes
     * Reset the list of additions, moves and removals
     *
     * \@internal
     * @return {?}
     */
    _reset() {
        if (this.isDirty) {
            /** @type {?} */
            let record;
            /** @type {?} */
            let nextRecord;
            for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            for (record = this._additionsHead; record !== null; record = record._nextAdded) {
                record.previousIndex = record.currentIndex;
            }
            this._additionsHead = this._additionsTail = null;
            for (record = this._movesHead; record !== null; record = nextRecord) {
                record.previousIndex = record.currentIndex;
                nextRecord = record._nextMoved;
            }
            this._movesHead = this._movesTail = null;
            this._removalsHead = this._removalsTail = null;
            this._identityChangesHead = this._identityChangesTail = null;
            // TODO(vicb): when assert gets supported
            // assert(!this.isDirty);
        }
    }
    /**
     * This is the core function which handles differences between collections.
     *
     * - `record` is the record which we saw at this position last time. If null then it is a new
     *   item.
     * - `item` is the current item in the collection
     * - `index` is the position of the item in the collection
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    _mismatch(record, item, itemTrackBy, index) {
        // The previous record after which we will append the current one.
        /** @type {?} */
        let previousRecord;
        if (record === null) {
            previousRecord = this._itTail;
        }
        else {
            previousRecord = record._prev;
            // Remove the record from the collection since we know it does not match the item.
            this._remove(record);
        }
        // Attempt to see if we have seen the item before.
        record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
        if (record !== null) {
            // We have seen this before, we need to move it forward in the collection.
            // But first we need to check if identity changed, so we can update in view if necessary
            if (!looseIdentical(record.item, item))
                this._addIdentityChange(record, item);
            this._moveAfter(record, previousRecord, index);
        }
        else {
            // Never seen it, check evicted list.
            record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
            if (record !== null) {
                // It is an item which we have evicted earlier: reinsert it back into the list.
                // But first we need to check if identity changed, so we can update in view if necessary
                if (!looseIdentical(record.item, item))
                    this._addIdentityChange(record, item);
                this._reinsertAfter(record, previousRecord, index);
            }
            else {
                // It is a new item: add it.
                record =
                    this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
            }
        }
        return record;
    }
    /**
     * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
     *
     * Use case: `[a, a]` => `[b, a, a]`
     *
     * If we did not have this check then the insertion of `b` would:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) leave `a` at index `1` as is. <-- this is wrong!
     *   3) reinsert `a` at index 2. <-- this is wrong!
     *
     * The correct behavior is:
     *   1) evict first `a`
     *   2) insert `b` at `0` index.
     *   3) reinsert `a` at index 1.
     *   3) move `a` at from `1` to `2`.
     *
     *
     * Double check that we have not evicted a duplicate item. We need to check if the item type may
     * have already been removed:
     * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
     * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
     * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
     * at the end.
     *
     * \@internal
     * @param {?} record
     * @param {?} item
     * @param {?} itemTrackBy
     * @param {?} index
     * @return {?}
     */
    _verifyReinsertion(record, item, itemTrackBy, index) {
        /** @type {?} */
        let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
        if (reinsertRecord !== null) {
            record = this._reinsertAfter(reinsertRecord, (/** @type {?} */ (record._prev)), index);
        }
        else if (record.currentIndex != index) {
            record.currentIndex = index;
            this._addToMoves(record, index);
        }
        return record;
    }
    /**
     * Get rid of any excess {\@link IterableChangeRecord_}s from the previous collection
     *
     * - `record` The first excess {\@link IterableChangeRecord_}.
     *
     * \@internal
     * @param {?} record
     * @return {?}
     */
    _truncate(record) {
        // Anything after that needs to be removed;
        while (record !== null) {
            /** @type {?} */
            const nextRecord = record._next;
            this._addToRemovals(this._unlink(record));
            record = nextRecord;
        }
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.clear();
        }
        if (this._additionsTail !== null) {
            this._additionsTail._nextAdded = null;
        }
        if (this._movesTail !== null) {
            this._movesTail._nextMoved = null;
        }
        if (this._itTail !== null) {
            this._itTail._next = null;
        }
        if (this._removalsTail !== null) {
            this._removalsTail._nextRemoved = null;
        }
        if (this._identityChangesTail !== null) {
            this._identityChangesTail._nextIdentityChange = null;
        }
    }
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    _reinsertAfter(record, prevRecord, index) {
        if (this._unlinkedRecords !== null) {
            this._unlinkedRecords.remove(record);
        }
        /** @type {?} */
        const prev = record._prevRemoved;
        /** @type {?} */
        const next = record._nextRemoved;
        if (prev === null) {
            this._removalsHead = next;
        }
        else {
            prev._nextRemoved = next;
        }
        if (next === null) {
            this._removalsTail = prev;
        }
        else {
            next._prevRemoved = prev;
        }
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    }
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    _moveAfter(record, prevRecord, index) {
        this._unlink(record);
        this._insertAfter(record, prevRecord, index);
        this._addToMoves(record, index);
        return record;
    }
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    _addAfter(record, prevRecord, index) {
        this._insertAfter(record, prevRecord, index);
        if (this._additionsTail === null) {
            // TODO(vicb):
            // assert(this._additionsHead === null);
            this._additionsTail = this._additionsHead = record;
        }
        else {
            // TODO(vicb):
            // assert(_additionsTail._nextAdded === null);
            // assert(record._nextAdded === null);
            this._additionsTail = this._additionsTail._nextAdded = record;
        }
        return record;
    }
    /**
     * \@internal
     * @param {?} record
     * @param {?} prevRecord
     * @param {?} index
     * @return {?}
     */
    _insertAfter(record, prevRecord, index) {
        // TODO(vicb):
        // assert(record != prevRecord);
        // assert(record._next === null);
        // assert(record._prev === null);
        // TODO(vicb):
        // assert(record != prevRecord);
        // assert(record._next === null);
        // assert(record._prev === null);
        /** @type {?} */
        const next = prevRecord === null ? this._itHead : prevRecord._next;
        // TODO(vicb):
        // assert(next != record);
        // assert(prevRecord != record);
        record._next = next;
        record._prev = prevRecord;
        if (next === null) {
            this._itTail = record;
        }
        else {
            next._prev = record;
        }
        if (prevRecord === null) {
            this._itHead = record;
        }
        else {
            prevRecord._next = record;
        }
        if (this._linkedRecords === null) {
            this._linkedRecords = new _DuplicateMap();
        }
        this._linkedRecords.put(record);
        record.currentIndex = index;
        return record;
    }
    /**
     * \@internal
     * @param {?} record
     * @return {?}
     */
    _remove(record) {
        return this._addToRemovals(this._unlink(record));
    }
    /**
     * \@internal
     * @param {?} record
     * @return {?}
     */
    _unlink(record) {
        if (this._linkedRecords !== null) {
            this._linkedRecords.remove(record);
        }
        /** @type {?} */
        const prev = record._prev;
        /** @type {?} */
        const next = record._next;
        // TODO(vicb):
        // assert((record._prev = null) === null);
        // assert((record._next = null) === null);
        if (prev === null) {
            this._itHead = next;
        }
        else {
            prev._next = next;
        }
        if (next === null) {
            this._itTail = prev;
        }
        else {
            next._prev = prev;
        }
        return record;
    }
    /**
     * \@internal
     * @param {?} record
     * @param {?} toIndex
     * @return {?}
     */
    _addToMoves(record, toIndex) {
        // TODO(vicb):
        // assert(record._nextMoved === null);
        if (record.previousIndex === toIndex) {
            return record;
        }
        if (this._movesTail === null) {
            // TODO(vicb):
            // assert(_movesHead === null);
            this._movesTail = this._movesHead = record;
        }
        else {
            // TODO(vicb):
            // assert(_movesTail._nextMoved === null);
            this._movesTail = this._movesTail._nextMoved = record;
        }
        return record;
    }
    /**
     * @private
     * @param {?} record
     * @return {?}
     */
    _addToRemovals(record) {
        if (this._unlinkedRecords === null) {
            this._unlinkedRecords = new _DuplicateMap();
        }
        this._unlinkedRecords.put(record);
        record.currentIndex = null;
        record._nextRemoved = null;
        if (this._removalsTail === null) {
            // TODO(vicb):
            // assert(_removalsHead === null);
            this._removalsTail = this._removalsHead = record;
            record._prevRemoved = null;
        }
        else {
            // TODO(vicb):
            // assert(_removalsTail._nextRemoved === null);
            // assert(record._nextRemoved === null);
            record._prevRemoved = this._removalsTail;
            this._removalsTail = this._removalsTail._nextRemoved = record;
        }
        return record;
    }
    /**
     * \@internal
     * @param {?} record
     * @param {?} item
     * @return {?}
     */
    _addIdentityChange(record, item) {
        record.item = item;
        if (this._identityChangesTail === null) {
            this._identityChangesTail = this._identityChangesHead = record;
        }
        else {
            this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
        }
        return record;
    }
}
if (false) {}
/**
 * @template V
 */
class IterableChangeRecord_ {
    /**
     * @param {?} item
     * @param {?} trackById
     */
    constructor(item, trackById) {
        this.item = item;
        this.trackById = trackById;
        this.currentIndex = null;
        this.previousIndex = null;
        /**
         * \@internal
         */
        this._nextPrevious = null;
        /**
         * \@internal
         */
        this._prev = null;
        /**
         * \@internal
         */
        this._next = null;
        /**
         * \@internal
         */
        this._prevDup = null;
        /**
         * \@internal
         */
        this._nextDup = null;
        /**
         * \@internal
         */
        this._prevRemoved = null;
        /**
         * \@internal
         */
        this._nextRemoved = null;
        /**
         * \@internal
         */
        this._nextAdded = null;
        /**
         * \@internal
         */
        this._nextMoved = null;
        /**
         * \@internal
         */
        this._nextIdentityChange = null;
    }
}
if (false) {}
// A linked list of CollectionChangeRecords with the same IterableChangeRecord_.item
/**
 * @template V
 */
class _DuplicateItemRecordList {
    constructor() {
        /**
         * \@internal
         */
        this._head = null;
        /**
         * \@internal
         */
        this._tail = null;
    }
    /**
     * Append the record to the list of duplicates.
     *
     * Note: by design all records in the list of duplicates hold the same value in record.item.
     * @param {?} record
     * @return {?}
     */
    add(record) {
        if (this._head === null) {
            this._head = this._tail = record;
            record._nextDup = null;
            record._prevDup = null;
        }
        else {
            // TODO(vicb):
            // assert(record.item ==  _head.item ||
            //       record.item is num && record.item.isNaN && _head.item is num && _head.item.isNaN);
            (/** @type {?} */ (this._tail))._nextDup = record;
            record._prevDup = this._tail;
            record._nextDup = null;
            this._tail = record;
        }
    }
    // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
    // IterableChangeRecord_.currentIndex >= atOrAfterIndex
    /**
     * @param {?} trackById
     * @param {?} atOrAfterIndex
     * @return {?}
     */
    get(trackById, atOrAfterIndex) {
        /** @type {?} */
        let record;
        for (record = this._head; record !== null; record = record._nextDup) {
            if ((atOrAfterIndex === null || atOrAfterIndex <= (/** @type {?} */ (record.currentIndex))) &&
                looseIdentical(record.trackById, trackById)) {
                return record;
            }
        }
        return null;
    }
    /**
     * Remove one {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * Returns whether the list of duplicates is empty.
     * @param {?} record
     * @return {?}
     */
    remove(record) {
        // TODO(vicb):
        // assert(() {
        //  // verify that the record being removed is in the list.
        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
        //    if (identical(cursor, record)) return true;
        //  }
        //  return false;
        //});
        // TODO(vicb):
        // assert(() {
        //  // verify that the record being removed is in the list.
        //  for (IterableChangeRecord_ cursor = _head; cursor != null; cursor = cursor._nextDup) {
        //    if (identical(cursor, record)) return true;
        //  }
        //  return false;
        //});
        /** @type {?} */
        const prev = record._prevDup;
        /** @type {?} */
        const next = record._nextDup;
        if (prev === null) {
            this._head = next;
        }
        else {
            prev._nextDup = next;
        }
        if (next === null) {
            this._tail = prev;
        }
        else {
            next._prevDup = prev;
        }
        return this._head === null;
    }
}
if (false) {}
/**
 * @template V
 */
class _DuplicateMap {
    constructor() {
        this.map = new Map();
    }
    /**
     * @param {?} record
     * @return {?}
     */
    put(record) {
        /** @type {?} */
        const key = record.trackById;
        /** @type {?} */
        let duplicates = this.map.get(key);
        if (!duplicates) {
            duplicates = new _DuplicateItemRecordList();
            this.map.set(key, duplicates);
        }
        duplicates.add(record);
    }
    /**
     * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
     * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
     *
     * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
     * have any more `a`s needs to return the second `a`.
     * @param {?} trackById
     * @param {?} atOrAfterIndex
     * @return {?}
     */
    get(trackById, atOrAfterIndex) {
        /** @type {?} */
        const key = trackById;
        /** @type {?} */
        const recordList = this.map.get(key);
        return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
    }
    /**
     * Removes a {\@link IterableChangeRecord_} from the list of duplicates.
     *
     * The list of duplicates also is removed from the map if it gets empty.
     * @param {?} record
     * @return {?}
     */
    remove(record) {
        /** @type {?} */
        const key = record.trackById;
        /** @type {?} */
        const recordList = (/** @type {?} */ (this.map.get(key)));
        // Remove the list of duplicates when it gets empty
        if (recordList.remove(record)) {
            this.map.delete(key);
        }
        return record;
    }
    /**
     * @return {?}
     */
    get isEmpty() { return this.map.size === 0; }
    /**
     * @return {?}
     */
    clear() { this.map.clear(); }
}
if (false) {}
/**
 * @param {?} item
 * @param {?} addRemoveOffset
 * @param {?} moveOffsets
 * @return {?}
 */
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
    /** @type {?} */
    const previousIndex = item.previousIndex;
    if (previousIndex === null)
        return previousIndex;
    /** @type {?} */
    let moveOffset = 0;
    if (moveOffsets && previousIndex < moveOffsets.length) {
        moveOffset = moveOffsets[previousIndex];
    }
    return previousIndex + addRemoveOffset + moveOffset;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/change_detection/differs/default_keyvalue_differ.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template K, V
 */
class DefaultKeyValueDifferFactory {
    constructor() { }
    /**
     * @param {?} obj
     * @return {?}
     */
    supports(obj) { return obj instanceof Map || isJsObject$1(obj); }
    /**
     * @template K, V
     * @return {?}
     */
    create() { return new DefaultKeyValueDiffer(); }
}
/**
 * @template K, V
 */
class DefaultKeyValueDiffer {
    constructor() {
        this._records = new Map();
        this._mapHead = null;
        // _appendAfter is used in the check loop
        this._appendAfter = null;
        this._previousMapHead = null;
        this._changesHead = null;
        this._changesTail = null;
        this._additionsHead = null;
        this._additionsTail = null;
        this._removalsHead = null;
        this._removalsTail = null;
    }
    /**
     * @return {?}
     */
    get isDirty() {
        return this._additionsHead !== null || this._changesHead !== null ||
            this._removalsHead !== null;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._mapHead; record !== null; record = record._next) {
            fn(record);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachPreviousItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
            fn(record);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachChangedItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._changesHead; record !== null; record = record._nextChanged) {
            fn(record);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachAddedItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._additionsHead; record !== null; record = record._nextAdded) {
            fn(record);
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachRemovedItem(fn) {
        /** @type {?} */
        let record;
        for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
            fn(record);
        }
    }
    /**
     * @param {?=} map
     * @return {?}
     */
    diff(map) {
        if (!map) {
            map = new Map();
        }
        else if (!(map instanceof Map || isJsObject$1(map))) {
            throw new Error(`Error trying to diff '${stringify(map)}'. Only maps and objects are allowed`);
        }
        return this.check(map) ? this : null;
    }
    /**
     * @return {?}
     */
    onDestroy() { }
    /**
     * Check the current state of the map vs the previous.
     * The algorithm is optimised for when the keys do no change.
     * @param {?} map
     * @return {?}
     */
    check(map) {
        this._reset();
        /** @type {?} */
        let insertBefore = this._mapHead;
        this._appendAfter = null;
        this._forEach(map, (/**
         * @param {?} value
         * @param {?} key
         * @return {?}
         */
        (value, key) => {
            if (insertBefore && insertBefore.key === key) {
                this._maybeAddToChanges(insertBefore, value);
                this._appendAfter = insertBefore;
                insertBefore = insertBefore._next;
            }
            else {
                /** @type {?} */
                const record = this._getOrCreateRecordForKey(key, value);
                insertBefore = this._insertBeforeOrAppend(insertBefore, record);
            }
        }));
        // Items remaining at the end of the list have been deleted
        if (insertBefore) {
            if (insertBefore._prev) {
                insertBefore._prev._next = null;
            }
            this._removalsHead = insertBefore;
            for (let record = insertBefore; record !== null; record = record._nextRemoved) {
                if (record === this._mapHead) {
                    this._mapHead = null;
                }
                this._records.delete(record.key);
                record._nextRemoved = record._next;
                record.previousValue = record.currentValue;
                record.currentValue = null;
                record._prev = null;
                record._next = null;
            }
        }
        // Make sure tails have no next records from previous runs
        if (this._changesTail)
            this._changesTail._nextChanged = null;
        if (this._additionsTail)
            this._additionsTail._nextAdded = null;
        return this.isDirty;
    }
    /**
     * Inserts a record before `before` or append at the end of the list when `before` is null.
     *
     * Notes:
     * - This method appends at `this._appendAfter`,
     * - This method updates `this._appendAfter`,
     * - The return value is the new value for the insertion pointer.
     * @private
     * @param {?} before
     * @param {?} record
     * @return {?}
     */
    _insertBeforeOrAppend(before, record) {
        if (before) {
            /** @type {?} */
            const prev = before._prev;
            record._next = before;
            record._prev = prev;
            before._prev = record;
            if (prev) {
                prev._next = record;
            }
            if (before === this._mapHead) {
                this._mapHead = record;
            }
            this._appendAfter = before;
            return before;
        }
        if (this._appendAfter) {
            this._appendAfter._next = record;
            record._prev = this._appendAfter;
        }
        else {
            this._mapHead = record;
        }
        this._appendAfter = record;
        return null;
    }
    /**
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    _getOrCreateRecordForKey(key, value) {
        if (this._records.has(key)) {
            /** @type {?} */
            const record = (/** @type {?} */ (this._records.get(key)));
            this._maybeAddToChanges(record, value);
            /** @type {?} */
            const prev = record._prev;
            /** @type {?} */
            const next = record._next;
            if (prev) {
                prev._next = next;
            }
            if (next) {
                next._prev = prev;
            }
            record._next = null;
            record._prev = null;
            return record;
        }
        /** @type {?} */
        const record = new KeyValueChangeRecord_(key);
        this._records.set(key, record);
        record.currentValue = value;
        this._addToAdditions(record);
        return record;
    }
    /**
     * \@internal
     * @return {?}
     */
    _reset() {
        if (this.isDirty) {
            /** @type {?} */
            let record;
            // let `_previousMapHead` contain the state of the map before the changes
            this._previousMapHead = this._mapHead;
            for (record = this._previousMapHead; record !== null; record = record._next) {
                record._nextPrevious = record._next;
            }
            // Update `record.previousValue` with the value of the item before the changes
            // We need to update all changed items (that's those which have been added and changed)
            for (record = this._changesHead; record !== null; record = record._nextChanged) {
                record.previousValue = record.currentValue;
            }
            for (record = this._additionsHead; record != null; record = record._nextAdded) {
                record.previousValue = record.currentValue;
            }
            this._changesHead = this._changesTail = null;
            this._additionsHead = this._additionsTail = null;
            this._removalsHead = null;
        }
    }
    // Add the record or a given key to the list of changes only when the value has actually changed
    /**
     * @private
     * @param {?} record
     * @param {?} newValue
     * @return {?}
     */
    _maybeAddToChanges(record, newValue) {
        if (!looseIdentical(newValue, record.currentValue)) {
            record.previousValue = record.currentValue;
            record.currentValue = newValue;
            this._addToChanges(record);
        }
    }
    /**
     * @private
     * @param {?} record
     * @return {?}
     */
    _addToAdditions(record) {
        if (this._additionsHead === null) {
            this._additionsHead = this._additionsTail = record;
        }
        else {
            (/** @type {?} */ (this._additionsTail))._nextAdded = record;
            this._additionsTail = record;
        }
    }
    /**
     * @private
     * @param {?} record
     * @return {?}
     */
    _addToChanges(record) {
        if (this._changesHead === null) {
            this._changesHead = this._changesTail = record;
        }
        else {
            (/** @type {?} */ (this._changesTail))._nextChanged = record;
            this._changesTail = record;
        }
    }
    /**
     * \@internal
     * @private
     * @template K, V
     * @param {?} obj
     * @param {?} fn
     * @return {?}
     */
    _forEach(obj, fn) {
        if (obj instanceof Map) {
            obj.forEach(fn);
        }
        else {
            Object.keys(obj).forEach((/**
             * @param {?} k
             * @return {?}
             */
            k => fn(obj[k], k)));
        }
    }
}
if (false) {}
/**
 * @template K, V
 */
class KeyValueChangeRecord_ {
    /**
     * @param {?} key
     */
    constructor(key) {
        this.key = key;
        this.previousValue = null;
        this.currentValue = null;
        /**
         * \@internal
         */
        this._nextPrevious = null;
        /**
         * \@internal
         */
        this._next = null;
        /**
         * \@internal
         */
        this._prev = null;
        /**
         * \@internal
         */
        this._nextAdded = null;
        /**
         * \@internal
         */
        this._nextRemoved = null;
        /**
         * \@internal
         */
        this._nextChanged = null;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/change_detection/differs/iterable_differs.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A strategy for tracking changes over time to an iterable. Used by {\@link NgForOf} to
 * respond to changes in an iterable by effecting equivalent changes in the DOM.
 *
 * \@publicApi
 * @record
 * @template V
 */
function IterableDiffer() { }
if (false) {}
/**
 * An object describing the changes in the `Iterable` collection since last time
 * `IterableDiffer#diff()` was invoked.
 *
 * \@publicApi
 * @record
 * @template V
 */
function IterableChanges() { }
if (false) {}
/**
 * Record representing the item change information.
 *
 * \@publicApi
 * @record
 * @template V
 */
function IterableChangeRecord() { }
if (false) {}
/**
 * @deprecated v4.0.0 - Use IterableChangeRecord instead.
 * \@publicApi
 * @record
 * @template V
 */
function CollectionChangeRecord() { }
/**
 * An optional function passed into the `NgForOf` directive that defines how to track
 * changes for items in an iterable.
 * The function takes the iteration index and item ID.
 * When supplied, Angular tracks changes by the return value of the function.
 *
 * \@publicApi
 * @record
 * @template T
 */
function TrackByFunction() { }
/**
 * Provides a factory for {\@link IterableDiffer}.
 *
 * \@publicApi
 * @record
 */
function IterableDifferFactory() { }
if (false) {}
/**
 * A repository of different iterable diffing strategies used by NgFor, NgClass, and others.
 *
 * \@publicApi
 */
class IterableDiffers {
    /**
     * @param {?} factories
     */
    constructor(factories) {
        this.factories = factories;
    }
    /**
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    static create(factories, parent) {
        if (parent != null) {
            /** @type {?} */
            const copied = parent.factories.slice();
            factories = factories.concat(copied);
        }
        return new IterableDiffers(factories);
    }
    /**
     * Takes an array of {\@link IterableDifferFactory} and returns a provider used to extend the
     * inherited {\@link IterableDiffers} instance with the provided factories and return a new
     * {\@link IterableDiffers} instance.
     *
     * \@usageNotes
     * ### Example
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link IterableDiffer} available.
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     IterableDiffers.extend([new ImmutableListDiffer()])
     *   ]
     * })
     * ```
     * @param {?} factories
     * @return {?}
     */
    static extend(factories) {
        return {
            provide: IterableDiffers,
            useFactory: (/**
             * @param {?} parent
             * @return {?}
             */
            (parent) => {
                if (!parent) {
                    // Typically would occur when calling IterableDiffers.extend inside of dependencies passed
                    // to
                    // bootstrap(), which would override default pipes instead of extending them.
                    throw new Error('Cannot extend IterableDiffers without a parent injector');
                }
                return IterableDiffers.create(factories, parent);
            }),
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[IterableDiffers, new SkipSelf(), new Optional()]]
        };
    }
    /**
     * @param {?} iterable
     * @return {?}
     */
    find(iterable) {
        /** @type {?} */
        const factory = this.factories.find((/**
         * @param {?} f
         * @return {?}
         */
        f => f.supports(iterable)));
        if (factory != null) {
            return factory;
        }
        else {
            throw new Error(`Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);
        }
    }
}
/** @nocollapse */
/** @nocollapse */ IterableDiffers.ɵprov = ɵɵdefineInjectable({
    token: IterableDiffers,
    providedIn: 'root',
    factory: (/**
     * @nocollapse @return {?}
     */
    () => new IterableDiffers([new DefaultIterableDifferFactory()]))
});
if (false) {}
/**
 * @param {?} type
 * @return {?}
 */
function getTypeNameForDebugging(type) {
    return type['name'] || typeof type;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/change_detection/differs/keyvalue_differs.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A differ that tracks changes made to an object over time.
 *
 * \@publicApi
 * @record
 * @template K, V
 */
function KeyValueDiffer() { }
if (false) {}
/**
 * An object describing the changes in the `Map` or `{[k:string]: string}` since last time
 * `KeyValueDiffer#diff()` was invoked.
 *
 * \@publicApi
 * @record
 * @template K, V
 */
function KeyValueChanges() { }
if (false) {}
/**
 * Record representing the item change information.
 *
 * \@publicApi
 * @record
 * @template K, V
 */
function KeyValueChangeRecord() { }
if (false) {}
/**
 * Provides a factory for {\@link KeyValueDiffer}.
 *
 * \@publicApi
 * @record
 */
function KeyValueDifferFactory() { }
if (false) {}
/**
 * A repository of different Map diffing strategies used by NgClass, NgStyle, and others.
 *
 * \@publicApi
 */
class KeyValueDiffers {
    /**
     * @param {?} factories
     */
    constructor(factories) {
        this.factories = factories;
    }
    /**
     * @template S
     * @param {?} factories
     * @param {?=} parent
     * @return {?}
     */
    static create(factories, parent) {
        if (parent) {
            /** @type {?} */
            const copied = parent.factories.slice();
            factories = factories.concat(copied);
        }
        return new KeyValueDiffers(factories);
    }
    /**
     * Takes an array of {\@link KeyValueDifferFactory} and returns a provider used to extend the
     * inherited {\@link KeyValueDiffers} instance with the provided factories and return a new
     * {\@link KeyValueDiffers} instance.
     *
     * \@usageNotes
     * ### Example
     *
     * The following example shows how to extend an existing list of factories,
     * which will only be applied to the injector for this component and its children.
     * This step is all that's required to make a new {\@link KeyValueDiffer} available.
     *
     * ```
     * \@Component({
     *   viewProviders: [
     *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
     *   ]
     * })
     * ```
     * @template S
     * @param {?} factories
     * @return {?}
     */
    static extend(factories) {
        return {
            provide: KeyValueDiffers,
            useFactory: (/**
             * @param {?} parent
             * @return {?}
             */
            (parent) => {
                if (!parent) {
                    // Typically would occur when calling KeyValueDiffers.extend inside of dependencies passed
                    // to bootstrap(), which would override default pipes instead of extending them.
                    throw new Error('Cannot extend KeyValueDiffers without a parent injector');
                }
                return KeyValueDiffers.create(factories, parent);
            }),
            // Dependency technically isn't optional, but we can provide a better error message this way.
            deps: [[KeyValueDiffers, new SkipSelf(), new Optional()]]
        };
    }
    /**
     * @param {?} kv
     * @return {?}
     */
    find(kv) {
        /** @type {?} */
        const factory = this.factories.find((/**
         * @param {?} f
         * @return {?}
         */
        f => f.supports(kv)));
        if (factory) {
            return factory;
        }
        throw new Error(`Cannot find a differ supporting object '${kv}'`);
    }
}
/** @nocollapse */
/** @nocollapse */ KeyValueDiffers.ɵprov = ɵɵdefineInjectable({
    token: KeyValueDiffers,
    providedIn: 'root',
    factory: (/**
     * @nocollapse @return {?}
     */
    () => new KeyValueDiffers([new DefaultKeyValueDifferFactory()]))
});
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/change_detection/change_detection.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Structural diffing for `Object`s and `Map`s.
 * @type {?}
 */
const keyValDiff = [new DefaultKeyValueDifferFactory()];
/**
 * Structural diffing for `Iterable` types such as `Array`s.
 * @type {?}
 */
const iterableDiff = [new DefaultIterableDifferFactory()];
/** @type {?} */
const defaultIterableDiffers = new IterableDiffers(iterableDiff);
/** @type {?} */
const defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/template_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Represents an embedded template that can be used to instantiate embedded views.
 * To instantiate embedded views based on a template, use the `ViewContainerRef`
 * method `createEmbeddedView()`.
 *
 * Access a `TemplateRef` instance by placing a directive on an `<ng-template>`
 * element (or directive prefixed with `*`). The `TemplateRef` for the embedded view
 * is injected into the constructor of the directive,
 * using the `TemplateRef` token.
 *
 * You can also use a `Query` to find a `TemplateRef` associated with
 * a component or a directive.
 *
 * @see `ViewContainerRef`
 * @see [Navigate the Component Tree with DI](guide/dependency-injection-navtree)
 *
 * \@publicApi
 * @abstract
 * @template C
 */
class TemplateRef {
}
/**
 * \@internal
 * @nocollapse
 */
TemplateRef.__NG_ELEMENT_ID__ = (/**
 * @return {?}
 */
() => SWITCH_TEMPLATE_REF_FACTORY(TemplateRef, ElementRef));
if (false) {}
/** @type {?} */
const SWITCH_TEMPLATE_REF_FACTORY__POST_R3__ = injectTemplateRef;
/** @type {?} */
const SWITCH_TEMPLATE_REF_FACTORY__PRE_R3__ = noop;
/** @type {?} */
const SWITCH_TEMPLATE_REF_FACTORY = SWITCH_TEMPLATE_REF_FACTORY__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/view_container_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Represents a container where one or more views can be attached to a component.
 *
 * Can contain *host views* (created by instantiating a
 * component with the `createComponent()` method), and *embedded views*
 * (created by instantiating a `TemplateRef` with the `createEmbeddedView()` method).
 *
 * A view container instance can contain other view containers,
 * creating a [view hierarchy](guide/glossary#view-tree).
 *
 * @see `ComponentRef`
 * @see `EmbeddedViewRef`
 *
 * \@publicApi
 * @abstract
 */
class ViewContainerRef {
}
/**
 * \@internal
 * @nocollapse
 */
ViewContainerRef.__NG_ELEMENT_ID__ = (/**
 * @return {?}
 */
() => SWITCH_VIEW_CONTAINER_REF_FACTORY(ViewContainerRef, ElementRef));
if (false) {}
/** @type {?} */
const SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__ = injectViewContainerRef;
/** @type {?} */
const SWITCH_VIEW_CONTAINER_REF_FACTORY__PRE_R3__ = noop;
/** @type {?} */
const SWITCH_VIEW_CONTAINER_REF_FACTORY = SWITCH_VIEW_CONTAINER_REF_FACTORY__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/errors.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} context
 * @param {?} oldValue
 * @param {?} currValue
 * @param {?} isFirstCheck
 * @return {?}
 */
function expressionChangedAfterItHasBeenCheckedError(context, oldValue, currValue, isFirstCheck) {
    /** @type {?} */
    let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: '${oldValue}'. Current value: '${currValue}'.`;
    if (isFirstCheck) {
        msg +=
            ` It seems like the view has been created after its parent and its children have been dirty checked.` +
                ` Has it been created in a change detection hook ?`;
    }
    return viewDebugError(msg, context);
}
/**
 * @param {?} err
 * @param {?} context
 * @return {?}
 */
function viewWrappedDebugError(err, context) {
    if (!(err instanceof Error)) {
        // errors that are not Error instances don't have a stack,
        // so it is ok to wrap them into a new Error object...
        err = new Error(err.toString());
    }
    _addDebugContext(err, context);
    return err;
}
/**
 * @param {?} msg
 * @param {?} context
 * @return {?}
 */
function viewDebugError(msg, context) {
    /** @type {?} */
    const err = new Error(msg);
    _addDebugContext(err, context);
    return err;
}
/**
 * @param {?} err
 * @param {?} context
 * @return {?}
 */
function _addDebugContext(err, context) {
    ((/** @type {?} */ (err)))[ERROR_DEBUG_CONTEXT] = context;
    ((/** @type {?} */ (err)))[ERROR_LOGGER] = context.logError.bind(context);
}
/**
 * @param {?} err
 * @return {?}
 */
function isViewDebugError(err) {
    return !!getDebugContext(err);
}
/**
 * @param {?} action
 * @return {?}
 */
function viewDestroyedError(action) {
    return new Error(`ViewDestroyedError: Attempt to use a destroyed view: ${action}`);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/types.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Factory for ViewDefinitions/NgModuleDefinitions.
 * We use a function so we can reexeute it in case an error happens and use the given logger
 * function to log the error from the definition of the node, which is shown in all browser
 * logs.
 * @record
 * @template D
 */
function DefinitionFactory() { }
/**
 * Function to call console.error at the right source location. This is an indirection
 * via another function as browser will log the location that actually called
 * `console.error`.
 * @record
 */
function NodeLogger() { }
/**
 * @record
 * @template DF
 */
function Definition() { }
if (false) {}
/**
 * @record
 */
function NgModuleDefinition() { }
if (false) {}
/**
 * @record
 */
function NgModuleDefinitionFactory() { }
/**
 * @record
 */
function ViewDefinition() { }
if (false) {}
/**
 * @record
 */
function ViewDefinitionFactory() { }
/**
 * @record
 */
function ViewUpdateFn() { }
/**
 * @record
 */
function NodeCheckFn() { }
/** @enum {number} */
const ArgumentType = {
    Inline: 0, Dynamic: 1,
};
/**
 * @record
 */
function ViewHandleEventFn() { }
/** @enum {number} */
const ViewFlags = {
    None: 0,
    OnPush: 2,
};
/**
 * A node definition in the view.
 *
 * Note: We use one type for all nodes so that loops that loop over all nodes
 * of a ViewDefinition stay monomorphic!
 * @record
 */
function NodeDef() { }
if (false) {}
/** @enum {number} */
const NodeFlags = {
    None: 0,
    TypeElement: 1,
    TypeText: 2,
    ProjectedTemplate: 4,
    CatRenderNode: 3,
    TypeNgContent: 8,
    TypePipe: 16,
    TypePureArray: 32,
    TypePureObject: 64,
    TypePurePipe: 128,
    CatPureExpression: 224,
    TypeValueProvider: 256,
    TypeClassProvider: 512,
    TypeFactoryProvider: 1024,
    TypeUseExistingProvider: 2048,
    LazyProvider: 4096,
    PrivateProvider: 8192,
    TypeDirective: 16384,
    Component: 32768,
    CatProviderNoDirective: 3840,
    CatProvider: 20224,
    OnInit: 65536,
    OnDestroy: 131072,
    DoCheck: 262144,
    OnChanges: 524288,
    AfterContentInit: 1048576,
    AfterContentChecked: 2097152,
    AfterViewInit: 4194304,
    AfterViewChecked: 8388608,
    EmbeddedViews: 16777216,
    ComponentView: 33554432,
    TypeContentQuery: 67108864,
    TypeViewQuery: 134217728,
    StaticQuery: 268435456,
    DynamicQuery: 536870912,
    TypeNgModule: 1073741824,
    CatQuery: 201326592,
    // mutually exclusive values...
    Types: 201347067,
};
/**
 * @record
 */
function BindingDef() { }
if (false) {}
/** @enum {number} */
const BindingFlags = {
    TypeElementAttribute: 1,
    TypeElementClass: 2,
    TypeElementStyle: 4,
    TypeProperty: 8,
    SyntheticProperty: 16,
    SyntheticHostProperty: 32,
    CatSyntheticProperty: 48,
    // mutually exclusive values...
    Types: 15,
};
/**
 * @record
 */
function OutputDef() { }
if (false) {}
/** @enum {number} */
const OutputType = {
    ElementOutput: 0, DirectiveOutput: 1,
};
/** @enum {number} */
const QueryValueType = {
    ElementRef: 0,
    RenderElement: 1,
    TemplateRef: 2,
    ViewContainerRef: 3,
    Provider: 4,
};
/**
 * @record
 */
function ElementDef() { }
if (false) {}
/**
 * @record
 */
function ElementHandleEventFn() { }
/**
 * @record
 */
function ProviderDef() { }
if (false) {}
/**
 * @record
 */
function NgModuleProviderDef() { }
if (false) {}
/**
 * @record
 */
function DepDef() { }
if (false) {}
/** @enum {number} */
const DepFlags = {
    None: 0,
    SkipSelf: 1,
    Optional: 2,
    Self: 4,
    Value: 8,
};
/**
 * @record
 */
function TextDef() { }
if (false) {}
/**
 * @record
 */
function QueryDef() { }
if (false) {}
/**
 * @record
 */
function QueryBindingDef() { }
if (false) {}
/** @enum {number} */
const QueryBindingType = {
    First: 0, All: 1,
};
/**
 * @record
 */
function NgContentDef() { }
if (false) {}
/**
 * @record
 */
function NgModuleData() { }
if (false) {}
/**
 * View instance data.
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */
function ViewData() { }
if (false) {}
/** @enum {number} */
const ViewState = {
    BeforeFirstCheck: 1,
    FirstCheck: 2,
    Attached: 4,
    ChecksEnabled: 8,
    IsProjectedView: 16,
    CheckProjectedView: 32,
    CheckProjectedViews: 64,
    Destroyed: 128,
    // InitState Uses 3 bits
    InitState_Mask: 1792,
    InitState_BeforeInit: 0,
    InitState_CallingOnInit: 256,
    InitState_CallingAfterContentInit: 512,
    InitState_CallingAfterViewInit: 768,
    InitState_AfterInit: 1024,
    CatDetectChanges: 12,
    CatInit: 13,
};
// Called before each cycle of a view's check to detect whether this is in the
// initState for which we need to call ngOnInit, ngAfterContentInit or ngAfterViewInit
// lifecycle methods. Returns true if this check cycle should call lifecycle
// methods.
/**
 * @param {?} view
 * @param {?} priorInitState
 * @param {?} newInitState
 * @return {?}
 */
function shiftInitState(view, priorInitState, newInitState) {
    // Only update the InitState if we are currently in the prior state.
    // For example, only move into CallingInit if we are in BeforeInit. Only
    // move into CallingContentInit if we are in CallingInit. Normally this will
    // always be true because of how checkCycle is called in checkAndUpdateView.
    // However, if checkAndUpdateView is called recursively or if an exception is
    // thrown while checkAndUpdateView is running, checkAndUpdateView starts over
    // from the beginning. This ensures the state is monotonically increasing,
    // terminating in the AfterInit state, which ensures the Init methods are called
    // at least once and only once.
    /** @type {?} */
    const state = view.state;
    /** @type {?} */
    const initState = state & 1792 /* InitState_Mask */;
    if (initState === priorInitState) {
        view.state = (state & ~1792 /* InitState_Mask */) | newInitState;
        view.initIndex = -1;
        return true;
    }
    return initState === newInitState;
}
// Returns true if the lifecycle init method should be called for the node with
// the given init index.
/**
 * @param {?} view
 * @param {?} initState
 * @param {?} index
 * @return {?}
 */
function shouldCallLifecycleInitHook(view, initState, index) {
    if ((view.state & 1792 /* InitState_Mask */) === initState && view.initIndex <= index) {
        view.initIndex = index + 1;
        return true;
    }
    return false;
}
/**
 * @record
 */
function DisposableFn() { }
/**
 * Node instance data.
 *
 * We have a separate type per NodeType to save memory
 * (TextData | ElementData | ProviderData | PureExpressionData | QueryList<any>)
 *
 * To keep our code monomorphic,
 * we prohibit using `NodeData` directly but enforce the use of accessors (`asElementData`, ...).
 * This way, no usage site can get a `NodeData` from view.nodes and then use it for different
 * purposes.
 */
class NodeData {
}
if (false) {}
/**
 * Data for an instantiated NodeType.Text.
 *
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */
function TextData() { }
if (false) {}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asTextData(view, index) {
    return (/** @type {?} */ (view.nodes[index]));
}
/**
 * Data for an instantiated NodeType.Element.
 *
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */
function ElementData() { }
if (false) {}
/**
 * @record
 */
function ViewContainerData() { }
if (false) {}
/**
 * @record
 */
function TemplateData() { }
if (false) {}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asElementData(view, index) {
    return (/** @type {?} */ (view.nodes[index]));
}
/**
 * Data for an instantiated NodeType.Provider.
 *
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */
function ProviderData() { }
if (false) {}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asProviderData(view, index) {
    return (/** @type {?} */ (view.nodes[index]));
}
/**
 * Data for an instantiated NodeType.PureExpression.
 *
 * Attention: Adding fields to this is performance sensitive!
 * @record
 */
function PureExpressionData() { }
if (false) {}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asPureExpressionData(view, index) {
    return (/** @type {?} */ (view.nodes[index]));
}
/**
 * Accessor for view.nodes, enforcing that every usage site stays monomorphic.
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function asQueryList(view, index) {
    return (/** @type {?} */ (view.nodes[index]));
}
/**
 * @record
 */
function RootData() { }
if (false) {}
/**
 * @abstract
 */
class DebugContext {
}
if (false) {}
/** @enum {number} */
const CheckType = {
    CheckAndUpdate: 0, CheckNoChanges: 1,
};
/**
 * @record
 */
function ProviderOverride() { }
if (false) {}
// WARNING: interface has both a type and a value, skipping emit
/**
 * This object is used to prevent cycles in the source files and to have a place where
 * debug mode can hook it. It is lazily filled when `isDevMode` is known.
 * @type {?}
 */
const Services = {
    setCurrentNode: (/** @type {?} */ (undefined)),
    createRootView: (/** @type {?} */ (undefined)),
    createEmbeddedView: (/** @type {?} */ (undefined)),
    createComponentView: (/** @type {?} */ (undefined)),
    createNgModuleRef: (/** @type {?} */ (undefined)),
    overrideProvider: (/** @type {?} */ (undefined)),
    overrideComponentView: (/** @type {?} */ (undefined)),
    clearOverrides: (/** @type {?} */ (undefined)),
    checkAndUpdateView: (/** @type {?} */ (undefined)),
    checkNoChangesView: (/** @type {?} */ (undefined)),
    destroyView: (/** @type {?} */ (undefined)),
    resolveDep: (/** @type {?} */ (undefined)),
    createDebugContext: (/** @type {?} */ (undefined)),
    handleEvent: (/** @type {?} */ (undefined)),
    updateDirectives: (/** @type {?} */ (undefined)),
    updateRenderer: (/** @type {?} */ (undefined)),
    dirtyParentQueries: (/** @type {?} */ (undefined)),
};

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NOOP = (/**
 * @return {?}
 */
() => { });
/** @type {?} */
const _tokenKeyCache = new Map();
/**
 * @param {?} token
 * @return {?}
 */
function tokenKey(token) {
    /** @type {?} */
    let key = _tokenKeyCache.get(token);
    if (!key) {
        key = stringify(token) + '_' + _tokenKeyCache.size;
        _tokenKeyCache.set(token, key);
    }
    return key;
}
/**
 * @param {?} view
 * @param {?} nodeIdx
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function unwrapValue(view, nodeIdx, bindingIdx, value) {
    if (WrappedValue.isWrapped(value)) {
        value = WrappedValue.unwrap(value);
        /** @type {?} */
        const globalBindingIdx = view.def.nodes[nodeIdx].bindingIndex + bindingIdx;
        /** @type {?} */
        const oldValue = WrappedValue.unwrap(view.oldValues[globalBindingIdx]);
        view.oldValues[globalBindingIdx] = new WrappedValue(oldValue);
    }
    return value;
}
/** @type {?} */
const UNDEFINED_RENDERER_TYPE_ID = '$$undefined';
/** @type {?} */
const EMPTY_RENDERER_TYPE_ID = '$$empty';
// Attention: this function is called as top level function.
// Putting any logic in here will destroy closure tree shaking!
/**
 * @param {?} values
 * @return {?}
 */
function createRendererType2(values) {
    return {
        id: UNDEFINED_RENDERER_TYPE_ID,
        styles: values.styles,
        encapsulation: values.encapsulation,
        data: values.data
    };
}
/** @type {?} */
let _renderCompCount$1 = 0;
/**
 * @param {?=} type
 * @return {?}
 */
function resolveRendererType2(type) {
    if (type && type.id === UNDEFINED_RENDERER_TYPE_ID) {
        // first time we see this RendererType2. Initialize it...
        /** @type {?} */
        const isFilled = ((type.encapsulation != null && type.encapsulation !== ViewEncapsulation$1.None) ||
            type.styles.length || Object.keys(type.data).length);
        if (isFilled) {
            type.id = `c${_renderCompCount$1++}`;
        }
        else {
            type.id = EMPTY_RENDERER_TYPE_ID;
        }
    }
    if (type && type.id === EMPTY_RENDERER_TYPE_ID) {
        type = null;
    }
    return type || null;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkBinding(view, def, bindingIdx, value) {
    /** @type {?} */
    const oldValues = view.oldValues;
    if ((view.state & 2 /* FirstCheck */) ||
        !looseIdentical(oldValues[def.bindingIndex + bindingIdx], value)) {
        return true;
    }
    return false;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkAndUpdateBinding(view, def, bindingIdx, value) {
    if (checkBinding(view, def, bindingIdx, value)) {
        view.oldValues[def.bindingIndex + bindingIdx] = value;
        return true;
    }
    return false;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkBindingNoChanges(view, def, bindingIdx, value) {
    /** @type {?} */
    const oldValue = view.oldValues[def.bindingIndex + bindingIdx];
    if ((view.state & 1 /* BeforeFirstCheck */) || !devModeEqual$1(oldValue, value)) {
        /** @type {?} */
        const bindingName = def.bindings[bindingIdx].name;
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, def.nodeIndex), `${bindingName}: ${oldValue}`, `${bindingName}: ${value}`, (view.state & 1 /* BeforeFirstCheck */) !== 0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function markParentViewsForCheck(view) {
    /** @type {?} */
    let currView = view;
    while (currView) {
        if (currView.def.flags & 2 /* OnPush */) {
            currView.state |= 8 /* ChecksEnabled */;
        }
        currView = currView.viewContainerParent || currView.parent;
    }
}
/**
 * @param {?} view
 * @param {?} endView
 * @return {?}
 */
function markParentViewsForCheckProjectedViews(view, endView) {
    /** @type {?} */
    let currView = view;
    while (currView && currView !== endView) {
        currView.state |= 64 /* CheckProjectedViews */;
        currView = currView.viewContainerParent || currView.parent;
    }
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */
function dispatchEvent(view, nodeIndex, eventName, event) {
    try {
        /** @type {?} */
        const nodeDef = view.def.nodes[nodeIndex];
        /** @type {?} */
        const startView = nodeDef.flags & 33554432 /* ComponentView */ ?
            asElementData(view, nodeIndex).componentView :
            view;
        markParentViewsForCheck(startView);
        return Services.handleEvent(view, nodeIndex, eventName, event);
    }
    catch (e) {
        // Attention: Don't rethrow, as it would cancel Observable subscriptions!
        view.root.errorHandler.handleError(e);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function declaredViewContainer(view) {
    if (view.parent) {
        /** @type {?} */
        const parentView = view.parent;
        return asElementData(parentView, (/** @type {?} */ (view.parentNodeDef)).nodeIndex);
    }
    return null;
}
/**
 * for component views, this is the host element.
 * for embedded views, this is the index of the parent node
 * that contains the view container.
 * @param {?} view
 * @return {?}
 */
function viewParentEl(view) {
    /** @type {?} */
    const parentView = view.parent;
    if (parentView) {
        return (/** @type {?} */ (view.parentNodeDef)).parent;
    }
    else {
        return null;
    }
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function renderNode(view, def) {
    switch (def.flags & 201347067 /* Types */) {
        case 1 /* TypeElement */:
            return asElementData(view, def.nodeIndex).renderElement;
        case 2 /* TypeText */:
            return asTextData(view, def.nodeIndex).renderText;
    }
}
/**
 * @param {?} target
 * @param {?} name
 * @return {?}
 */
function elementEventFullName(target, name) {
    return target ? `${target}:${name}` : name;
}
/**
 * @param {?} view
 * @return {?}
 */
function isComponentView(view) {
    return !!view.parent && !!((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);
}
/**
 * @param {?} view
 * @return {?}
 */
function isEmbeddedView(view) {
    return !!view.parent && !((/** @type {?} */ (view.parentNodeDef)).flags & 32768 /* Component */);
}
/**
 * @param {?} queryId
 * @return {?}
 */
function filterQueryId(queryId) {
    return 1 << (queryId % 32);
}
/**
 * @param {?} matchedQueriesDsl
 * @return {?}
 */
function splitMatchedQueriesDsl(matchedQueriesDsl) {
    /** @type {?} */
    const matchedQueries = {};
    /** @type {?} */
    let matchedQueryIds = 0;
    /** @type {?} */
    const references = {};
    if (matchedQueriesDsl) {
        matchedQueriesDsl.forEach((/**
         * @param {?} __0
         * @return {?}
         */
        ([queryId, valueType]) => {
            if (typeof queryId === 'number') {
                matchedQueries[queryId] = valueType;
                matchedQueryIds |= filterQueryId(queryId);
            }
            else {
                references[queryId] = valueType;
            }
        }));
    }
    return { matchedQueries, references, matchedQueryIds };
}
/**
 * @param {?} deps
 * @param {?=} sourceName
 * @return {?}
 */
function splitDepsDsl(deps, sourceName) {
    return deps.map((/**
     * @param {?} value
     * @return {?}
     */
    value => {
        /** @type {?} */
        let token;
        /** @type {?} */
        let flags;
        if (Array.isArray(value)) {
            [flags, token] = value;
        }
        else {
            flags = 0 /* None */;
            token = value;
        }
        if (token && (typeof token === 'function' || typeof token === 'object') && sourceName) {
            Object.defineProperty(token, SOURCE, { value: sourceName, configurable: true });
        }
        return { flags, token, tokenKey: tokenKey(token) };
    }));
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function getParentRenderElement(view, renderHost, def) {
    /** @type {?} */
    let renderParent = def.renderParent;
    if (renderParent) {
        if ((renderParent.flags & 1 /* TypeElement */) === 0 ||
            (renderParent.flags & 33554432 /* ComponentView */) === 0 ||
            ((/** @type {?} */ (renderParent.element)).componentRendererType &&
                (/** @type {?} */ ((/** @type {?} */ (renderParent.element)).componentRendererType)).encapsulation ===
                    ViewEncapsulation$1.Native)) {
            // only children of non components, or children of components with native encapsulation should
            // be attached.
            return asElementData(view, (/** @type {?} */ (def.renderParent)).nodeIndex).renderElement;
        }
    }
    else {
        return renderHost;
    }
}
/** @type {?} */
const DEFINITION_CACHE = new WeakMap();
/**
 * @template D
 * @param {?} factory
 * @return {?}
 */
function resolveDefinition(factory) {
    /** @type {?} */
    let value = (/** @type {?} */ ((/** @type {?} */ (DEFINITION_CACHE.get(factory)))));
    if (!value) {
        value = factory((/**
         * @return {?}
         */
        () => NOOP));
        value.factory = factory;
        DEFINITION_CACHE.set(factory, value);
    }
    return value;
}
/**
 * @param {?} view
 * @return {?}
 */
function rootRenderNodes(view) {
    /** @type {?} */
    const renderNodes = [];
    visitRootRenderNodes(view, 0 /* Collect */, undefined, undefined, renderNodes);
    return renderNodes;
}
/** @enum {number} */
const RenderNodeAction = {
    Collect: 0, AppendChild: 1, InsertBefore: 2, RemoveChild: 3,
};
/**
 * @param {?} view
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitRootRenderNodes(view, action, parentNode, nextSibling, target) {
    // We need to re-compute the parent node in case the nodes have been moved around manually
    if (action === 3 /* RemoveChild */) {
        parentNode = view.renderer.parentNode(renderNode(view, (/** @type {?} */ (view.def.lastRenderRootNode))));
    }
    visitSiblingRenderNodes(view, action, 0, view.def.nodes.length - 1, parentNode, nextSibling, target);
}
/**
 * @param {?} view
 * @param {?} action
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitSiblingRenderNodes(view, action, startIndex, endIndex, parentNode, nextSibling, target) {
    for (let i = startIndex; i <= endIndex; i++) {
        /** @type {?} */
        const nodeDef = view.def.nodes[i];
        if (nodeDef.flags & (1 /* TypeElement */ | 2 /* TypeText */ | 8 /* TypeNgContent */)) {
            visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target);
        }
        // jump to next sibling
        i += nodeDef.childCount;
    }
}
/**
 * @param {?} view
 * @param {?} ngContentIndex
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitProjectedRenderNodes(view, ngContentIndex, action, parentNode, nextSibling, target) {
    /** @type {?} */
    let compView = view;
    while (compView && !isComponentView(compView)) {
        compView = compView.parent;
    }
    /** @type {?} */
    const hostView = (/** @type {?} */ (compView)).parent;
    /** @type {?} */
    const hostElDef = viewParentEl((/** @type {?} */ (compView)));
    /** @type {?} */
    const startIndex = (/** @type {?} */ (hostElDef)).nodeIndex + 1;
    /** @type {?} */
    const endIndex = (/** @type {?} */ (hostElDef)).nodeIndex + (/** @type {?} */ (hostElDef)).childCount;
    for (let i = startIndex; i <= endIndex; i++) {
        /** @type {?} */
        const nodeDef = (/** @type {?} */ (hostView)).def.nodes[i];
        if (nodeDef.ngContentIndex === ngContentIndex) {
            visitRenderNode((/** @type {?} */ (hostView)), nodeDef, action, parentNode, nextSibling, target);
        }
        // jump to next sibling
        i += nodeDef.childCount;
    }
    if (!(/** @type {?} */ (hostView)).parent) {
        // a root view
        /** @type {?} */
        const projectedNodes = view.root.projectableNodes[ngContentIndex];
        if (projectedNodes) {
            for (let i = 0; i < projectedNodes.length; i++) {
                execRenderNodeAction(view, projectedNodes[i], action, parentNode, nextSibling, target);
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function visitRenderNode(view, nodeDef, action, parentNode, nextSibling, target) {
    if (nodeDef.flags & 8 /* TypeNgContent */) {
        visitProjectedRenderNodes(view, (/** @type {?} */ (nodeDef.ngContent)).index, action, parentNode, nextSibling, target);
    }
    else {
        /** @type {?} */
        const rn = renderNode(view, nodeDef);
        if (action === 3 /* RemoveChild */ && (nodeDef.flags & 33554432 /* ComponentView */) &&
            (nodeDef.bindingFlags & 48 /* CatSyntheticProperty */)) {
            // Note: we might need to do both actions.
            if (nodeDef.bindingFlags & (16 /* SyntheticProperty */)) {
                execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
            }
            if (nodeDef.bindingFlags & (32 /* SyntheticHostProperty */)) {
                /** @type {?} */
                const compView = asElementData(view, nodeDef.nodeIndex).componentView;
                execRenderNodeAction(compView, rn, action, parentNode, nextSibling, target);
            }
        }
        else {
            execRenderNodeAction(view, rn, action, parentNode, nextSibling, target);
        }
        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
            /** @type {?} */
            const embeddedViews = (/** @type {?} */ (asElementData(view, nodeDef.nodeIndex).viewContainer))._embeddedViews;
            for (let k = 0; k < embeddedViews.length; k++) {
                visitRootRenderNodes(embeddedViews[k], action, parentNode, nextSibling, target);
            }
        }
        if (nodeDef.flags & 1 /* TypeElement */ && !(/** @type {?} */ (nodeDef.element)).name) {
            visitSiblingRenderNodes(view, action, nodeDef.nodeIndex + 1, nodeDef.nodeIndex + nodeDef.childCount, parentNode, nextSibling, target);
        }
    }
}
/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} action
 * @param {?} parentNode
 * @param {?} nextSibling
 * @param {?=} target
 * @return {?}
 */
function execRenderNodeAction(view, renderNode, action, parentNode, nextSibling, target) {
    /** @type {?} */
    const renderer = view.renderer;
    switch (action) {
        case 1 /* AppendChild */:
            renderer.appendChild(parentNode, renderNode);
            break;
        case 2 /* InsertBefore */:
            renderer.insertBefore(parentNode, renderNode, nextSibling);
            break;
        case 3 /* RemoveChild */:
            renderer.removeChild(parentNode, renderNode);
            break;
        case 0 /* Collect */:
            (/** @type {?} */ (target)).push(renderNode);
            break;
    }
}
/** @type {?} */
const NS_PREFIX_RE = /^:([^:]+):(.+)$/;
/**
 * @param {?} name
 * @return {?}
 */
function splitNamespace(name) {
    if (name[0] === ':') {
        /** @type {?} */
        const match = (/** @type {?} */ (name.match(NS_PREFIX_RE)));
        return [match[1], match[2]];
    }
    return ['', name];
}
/**
 * @param {?} bindings
 * @return {?}
 */
function calcBindingFlags(bindings) {
    /** @type {?} */
    let flags = 0;
    for (let i = 0; i < bindings.length; i++) {
        flags |= bindings[i].flags;
    }
    return flags;
}
/**
 * @param {?} valueCount
 * @param {?} constAndInterp
 * @return {?}
 */
function interpolate(valueCount, constAndInterp) {
    /** @type {?} */
    let result = '';
    for (let i = 0; i < valueCount * 2; i = i + 2) {
        result = result + constAndInterp[i] + _toStringWithNull(constAndInterp[i + 1]);
    }
    return result + constAndInterp[valueCount * 2];
}
/**
 * @param {?} valueCount
 * @param {?} c0
 * @param {?} a1
 * @param {?} c1
 * @param {?=} a2
 * @param {?=} c2
 * @param {?=} a3
 * @param {?=} c3
 * @param {?=} a4
 * @param {?=} c4
 * @param {?=} a5
 * @param {?=} c5
 * @param {?=} a6
 * @param {?=} c6
 * @param {?=} a7
 * @param {?=} c7
 * @param {?=} a8
 * @param {?=} c8
 * @param {?=} a9
 * @param {?=} c9
 * @return {?}
 */
function inlineInterpolate(valueCount, c0, a1, c1, a2, c2, a3, c3, a4, c4, a5, c5, a6, c6, a7, c7, a8, c8, a9, c9) {
    switch (valueCount) {
        case 1:
            return c0 + _toStringWithNull(a1) + c1;
        case 2:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2;
        case 3:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3;
        case 4:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4;
        case 5:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5;
        case 6:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) + c6;
        case 7:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7;
        case 8:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8;
        case 9:
            return c0 + _toStringWithNull(a1) + c1 + _toStringWithNull(a2) + c2 + _toStringWithNull(a3) +
                c3 + _toStringWithNull(a4) + c4 + _toStringWithNull(a5) + c5 + _toStringWithNull(a6) +
                c6 + _toStringWithNull(a7) + c7 + _toStringWithNull(a8) + c8 + _toStringWithNull(a9) + c9;
        default:
            throw new Error(`Does not support more than 9 expressions`);
    }
}
/**
 * @param {?} v
 * @return {?}
 */
function _toStringWithNull(v) {
    return v != null ? v.toString() : '';
}
/** @type {?} */
const EMPTY_ARRAY$4 = [];
/** @type {?} */
const EMPTY_MAP = {};

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/ng_module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const UNDEFINED_VALUE = {};
/** @type {?} */
const InjectorRefTokenKey = tokenKey(Injector);
/** @type {?} */
const INJECTORRefTokenKey = tokenKey(INJECTOR);
/** @type {?} */
const NgModuleRefTokenKey = tokenKey(NgModuleRef);
/**
 * @param {?} flags
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @return {?}
 */
function moduleProvideDef(flags, token, value, deps) {
    // Need to resolve forwardRefs as e.g. for `useValue` we
    // lowered the expression and then stopped evaluating it,
    // i.e. also didn't unwrap it.
    value = resolveForwardRef(value);
    /** @type {?} */
    const depDefs = splitDepsDsl(deps, stringify(token));
    return {
        // will bet set by the module definition
        index: -1,
        deps: depDefs, flags, token, value
    };
}
/**
 * @param {?} providers
 * @return {?}
 */
function moduleDef(providers) {
    /** @type {?} */
    const providersByKey = {};
    /** @type {?} */
    const modules = [];
    /** @type {?} */
    let scope = null;
    for (let i = 0; i < providers.length; i++) {
        /** @type {?} */
        const provider = providers[i];
        if (provider.token === INJECTOR_SCOPE) {
            scope = provider.value;
        }
        if (provider.flags & 1073741824 /* TypeNgModule */) {
            modules.push(provider.token);
        }
        provider.index = i;
        providersByKey[tokenKey(provider.token)] = provider;
    }
    return {
        // Will be filled later...
        factory: null,
        providersByKey,
        providers,
        modules,
        scope: scope,
    };
}
/**
 * @param {?} data
 * @return {?}
 */
function initNgModule(data) {
    /** @type {?} */
    const def = data._def;
    /** @type {?} */
    const providers = data._providers = newArray(def.providers.length);
    for (let i = 0; i < def.providers.length; i++) {
        /** @type {?} */
        const provDef = def.providers[i];
        if (!(provDef.flags & 4096 /* LazyProvider */)) {
            // Make sure the provider has not been already initialized outside this loop.
            if (providers[i] === undefined) {
                providers[i] = _createProviderInstance(data, provDef);
            }
        }
    }
}
/**
 * @param {?} data
 * @param {?} depDef
 * @param {?=} notFoundValue
 * @return {?}
 */
function resolveNgModuleDep(data, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {
    /** @type {?} */
    const former = setCurrentInjector(data);
    try {
        if (depDef.flags & 8 /* Value */) {
            return depDef.token;
        }
        if (depDef.flags & 2 /* Optional */) {
            notFoundValue = null;
        }
        if (depDef.flags & 1 /* SkipSelf */) {
            return data._parent.get(depDef.token, notFoundValue);
        }
        /** @type {?} */
        const tokenKey = depDef.tokenKey;
        switch (tokenKey) {
            case InjectorRefTokenKey:
            case INJECTORRefTokenKey:
            case NgModuleRefTokenKey:
                return data;
        }
        /** @type {?} */
        const providerDef = data._def.providersByKey[tokenKey];
        /** @type {?} */
        let injectableDef;
        if (providerDef) {
            /** @type {?} */
            let providerInstance = data._providers[providerDef.index];
            if (providerInstance === undefined) {
                providerInstance = data._providers[providerDef.index] =
                    _createProviderInstance(data, providerDef);
            }
            return providerInstance === UNDEFINED_VALUE ? undefined : providerInstance;
        }
        else if ((injectableDef = getInjectableDef(depDef.token)) && targetsModule(data, injectableDef)) {
            /** @type {?} */
            const index = data._providers.length;
            data._def.providers[index] = data._def.providersByKey[depDef.tokenKey] = {
                flags: 1024 /* TypeFactoryProvider */ | 4096 /* LazyProvider */,
                value: injectableDef.factory,
                deps: [], index,
                token: depDef.token,
            };
            data._providers[index] = UNDEFINED_VALUE;
            return (data._providers[index] =
                _createProviderInstance(data, data._def.providersByKey[depDef.tokenKey]));
        }
        else if (depDef.flags & 4 /* Self */) {
            return notFoundValue;
        }
        return data._parent.get(depDef.token, notFoundValue);
    }
    finally {
        setCurrentInjector(former);
    }
}
/**
 * @param {?} ngModule
 * @param {?} scope
 * @return {?}
 */
function moduleTransitivelyPresent(ngModule, scope) {
    return ngModule._def.modules.indexOf(scope) > -1;
}
/**
 * @param {?} ngModule
 * @param {?} def
 * @return {?}
 */
function targetsModule(ngModule, def) {
    /** @type {?} */
    const providedIn = def.providedIn;
    return providedIn != null && (providedIn === 'any' || providedIn === ngModule._def.scope ||
        moduleTransitivelyPresent(ngModule, providedIn));
}
/**
 * @param {?} ngModule
 * @param {?} providerDef
 * @return {?}
 */
function _createProviderInstance(ngModule, providerDef) {
    /** @type {?} */
    let injectable;
    switch (providerDef.flags & 201347067 /* Types */) {
        case 512 /* TypeClassProvider */:
            injectable = _createClass(ngModule, providerDef.value, providerDef.deps);
            break;
        case 1024 /* TypeFactoryProvider */:
            injectable = _callFactory(ngModule, providerDef.value, providerDef.deps);
            break;
        case 2048 /* TypeUseExistingProvider */:
            injectable = resolveNgModuleDep(ngModule, providerDef.deps[0]);
            break;
        case 256 /* TypeValueProvider */:
            injectable = providerDef.value;
            break;
    }
    // The read of `ngOnDestroy` here is slightly expensive as it's megamorphic, so it should be
    // avoided if possible. The sequence of checks here determines whether ngOnDestroy needs to be
    // checked. It might not if the `injectable` isn't an object or if NodeFlags.OnDestroy is already
    // set (ngOnDestroy was detected statically).
    if (injectable !== UNDEFINED_VALUE && injectable !== null && typeof injectable === 'object' &&
        !(providerDef.flags & 131072 /* OnDestroy */) && typeof injectable.ngOnDestroy === 'function') {
        providerDef.flags |= 131072 /* OnDestroy */;
    }
    return injectable === undefined ? UNDEFINED_VALUE : injectable;
}
/**
 * @param {?} ngModule
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function _createClass(ngModule, ctor, deps) {
    /** @type {?} */
    const len = deps.length;
    switch (len) {
        case 0:
            return new ctor();
        case 1:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]));
        case 2:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
        case 3:
            return new ctor(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
        default:
            /** @type {?} */
            const depValues = [];
            for (let i = 0; i < len; i++) {
                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }
            return new ctor(...depValues);
    }
}
/**
 * @param {?} ngModule
 * @param {?} factory
 * @param {?} deps
 * @return {?}
 */
function _callFactory(ngModule, factory, deps) {
    /** @type {?} */
    const len = deps.length;
    switch (len) {
        case 0:
            return factory();
        case 1:
            return factory(resolveNgModuleDep(ngModule, deps[0]));
        case 2:
            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]));
        case 3:
            return factory(resolveNgModuleDep(ngModule, deps[0]), resolveNgModuleDep(ngModule, deps[1]), resolveNgModuleDep(ngModule, deps[2]));
        default:
            /** @type {?} */
            const depValues = [];
            for (let i = 0; i < len; i++) {
                depValues[i] = resolveNgModuleDep(ngModule, deps[i]);
            }
            return factory(...depValues);
    }
}
/**
 * @param {?} ngModule
 * @param {?} lifecycles
 * @return {?}
 */
function callNgModuleLifecycle(ngModule, lifecycles) {
    /** @type {?} */
    const def = ngModule._def;
    /** @type {?} */
    const destroyed = new Set();
    for (let i = 0; i < def.providers.length; i++) {
        /** @type {?} */
        const provDef = def.providers[i];
        if (provDef.flags & 131072 /* OnDestroy */) {
            /** @type {?} */
            const instance = ngModule._providers[i];
            if (instance && instance !== UNDEFINED_VALUE) {
                /** @type {?} */
                const onDestroy = instance.ngOnDestroy;
                if (typeof onDestroy === 'function' && !destroyed.has(instance)) {
                    onDestroy.apply(instance);
                    destroyed.add(instance);
                }
            }
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/view_attach.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} parentView
 * @param {?} elementData
 * @param {?} viewIndex
 * @param {?} view
 * @return {?}
 */
function attachEmbeddedView(parentView, elementData, viewIndex, view) {
    /** @type {?} */
    let embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;
    if (viewIndex === null || viewIndex === undefined) {
        viewIndex = embeddedViews.length;
    }
    view.viewContainerParent = parentView;
    addToArray(embeddedViews, (/** @type {?} */ (viewIndex)), view);
    attachProjectedView(elementData, view);
    Services.dirtyParentQueries(view);
    /** @type {?} */
    const prevView = (/** @type {?} */ (viewIndex)) > 0 ? embeddedViews[(/** @type {?} */ (viewIndex)) - 1] : null;
    renderAttachEmbeddedView(elementData, prevView, view);
}
/**
 * @param {?} vcElementData
 * @param {?} view
 * @return {?}
 */
function attachProjectedView(vcElementData, view) {
    /** @type {?} */
    const dvcElementData = declaredViewContainer(view);
    if (!dvcElementData || dvcElementData === vcElementData ||
        view.state & 16 /* IsProjectedView */) {
        return;
    }
    // Note: For performance reasons, we
    // - add a view to template._projectedViews only 1x throughout its lifetime,
    //   and remove it not until the view is destroyed.
    //   (hard, as when a parent view is attached/detached we would need to attach/detach all
    //    nested projected views as well, even across component boundaries).
    // - don't track the insertion order of views in the projected views array
    //   (hard, as when the views of the same template are inserted different view containers)
    view.state |= 16 /* IsProjectedView */;
    /** @type {?} */
    let projectedViews = dvcElementData.template._projectedViews;
    if (!projectedViews) {
        projectedViews = dvcElementData.template._projectedViews = [];
    }
    projectedViews.push(view);
    // Note: we are changing the NodeDef here as we cannot calculate
    // the fact whether a template is used for projection during compilation.
    markNodeAsProjectedTemplate((/** @type {?} */ (view.parent)).def, (/** @type {?} */ (view.parentNodeDef)));
}
/**
 * @param {?} viewDef
 * @param {?} nodeDef
 * @return {?}
 */
function markNodeAsProjectedTemplate(viewDef, nodeDef) {
    if (nodeDef.flags & 4 /* ProjectedTemplate */) {
        return;
    }
    viewDef.nodeFlags |= 4 /* ProjectedTemplate */;
    nodeDef.flags |= 4 /* ProjectedTemplate */;
    /** @type {?} */
    let parentNodeDef = nodeDef.parent;
    while (parentNodeDef) {
        parentNodeDef.childFlags |= 4 /* ProjectedTemplate */;
        parentNodeDef = parentNodeDef.parent;
    }
}
/**
 * @param {?} elementData
 * @param {?=} viewIndex
 * @return {?}
 */
function detachEmbeddedView(elementData, viewIndex) {
    /** @type {?} */
    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;
    if (viewIndex == null || viewIndex >= embeddedViews.length) {
        viewIndex = embeddedViews.length - 1;
    }
    if (viewIndex < 0) {
        return null;
    }
    /** @type {?} */
    const view = embeddedViews[viewIndex];
    view.viewContainerParent = null;
    removeFromArray(embeddedViews, viewIndex);
    // See attachProjectedView for why we don't update projectedViews here.
    Services.dirtyParentQueries(view);
    renderDetachView$1(view);
    return view;
}
/**
 * @param {?} view
 * @return {?}
 */
function detachProjectedView(view) {
    if (!(view.state & 16 /* IsProjectedView */)) {
        return;
    }
    /** @type {?} */
    const dvcElementData = declaredViewContainer(view);
    if (dvcElementData) {
        /** @type {?} */
        const projectedViews = dvcElementData.template._projectedViews;
        if (projectedViews) {
            removeFromArray(projectedViews, projectedViews.indexOf(view));
            Services.dirtyParentQueries(view);
        }
    }
}
/**
 * @param {?} elementData
 * @param {?} oldViewIndex
 * @param {?} newViewIndex
 * @return {?}
 */
function moveEmbeddedView(elementData, oldViewIndex, newViewIndex) {
    /** @type {?} */
    const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;
    /** @type {?} */
    const view = embeddedViews[oldViewIndex];
    removeFromArray(embeddedViews, oldViewIndex);
    if (newViewIndex == null) {
        newViewIndex = embeddedViews.length;
    }
    addToArray(embeddedViews, newViewIndex, view);
    // Note: Don't need to change projectedViews as the order in there
    // as always invalid...
    Services.dirtyParentQueries(view);
    renderDetachView$1(view);
    /** @type {?} */
    const prevView = newViewIndex > 0 ? embeddedViews[newViewIndex - 1] : null;
    renderAttachEmbeddedView(elementData, prevView, view);
    return view;
}
/**
 * @param {?} elementData
 * @param {?} prevView
 * @param {?} view
 * @return {?}
 */
function renderAttachEmbeddedView(elementData, prevView, view) {
    /** @type {?} */
    const prevRenderNode = prevView ? renderNode(prevView, (/** @type {?} */ (prevView.def.lastRenderRootNode))) :
        elementData.renderElement;
    /** @type {?} */
    const parentNode = view.renderer.parentNode(prevRenderNode);
    /** @type {?} */
    const nextSibling = view.renderer.nextSibling(prevRenderNode);
    // Note: We can't check if `nextSibling` is present, as on WebWorkers it will always be!
    // However, browsers automatically do `appendChild` when there is no `nextSibling`.
    visitRootRenderNodes(view, 2 /* InsertBefore */, parentNode, nextSibling, undefined);
}
/**
 * @param {?} view
 * @return {?}
 */
function renderDetachView$1(view) {
    visitRootRenderNodes(view, 3 /* RemoveChild */, null, null, undefined);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/refs.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const EMPTY_CONTEXT = {};
// Attention: this function is called as top level function.
// Putting any logic in here will destroy closure tree shaking!
/**
 * @param {?} selector
 * @param {?} componentType
 * @param {?} viewDefFactory
 * @param {?} inputs
 * @param {?} outputs
 * @param {?} ngContentSelectors
 * @return {?}
 */
function createComponentFactory(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors) {
    return new ComponentFactory_(selector, componentType, viewDefFactory, inputs, outputs, ngContentSelectors);
}
/**
 * @param {?} componentFactory
 * @return {?}
 */
function getComponentViewDefinitionFactory(componentFactory) {
    return ((/** @type {?} */ (componentFactory))).viewDefFactory;
}
class ComponentFactory_ extends ComponentFactory {
    /**
     * @param {?} selector
     * @param {?} componentType
     * @param {?} viewDefFactory
     * @param {?} _inputs
     * @param {?} _outputs
     * @param {?} ngContentSelectors
     */
    constructor(selector, componentType, viewDefFactory, _inputs, _outputs, ngContentSelectors) {
        // Attention: this ctor is called as top level function.
        // Putting any logic in here will destroy closure tree shaking!
        super();
        this.selector = selector;
        this.componentType = componentType;
        this._inputs = _inputs;
        this._outputs = _outputs;
        this.ngContentSelectors = ngContentSelectors;
        this.viewDefFactory = viewDefFactory;
    }
    /**
     * @return {?}
     */
    get inputs() {
        /** @type {?} */
        const inputsArr = [];
        /** @type {?} */
        const inputs = (/** @type {?} */ (this._inputs));
        for (let propName in inputs) {
            /** @type {?} */
            const templateName = inputs[propName];
            inputsArr.push({ propName, templateName });
        }
        return inputsArr;
    }
    /**
     * @return {?}
     */
    get outputs() {
        /** @type {?} */
        const outputsArr = [];
        for (let propName in this._outputs) {
            /** @type {?} */
            const templateName = this._outputs[propName];
            outputsArr.push({ propName, templateName });
        }
        return outputsArr;
    }
    /**
     * Creates a new component.
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
        if (!ngModule) {
            throw new Error('ngModule should be provided');
        }
        /** @type {?} */
        const viewDef = resolveDefinition(this.viewDefFactory);
        /** @type {?} */
        const componentNodeIndex = (/** @type {?} */ ((/** @type {?} */ (viewDef.nodes[0].element)).componentProvider)).nodeIndex;
        /** @type {?} */
        const view = Services.createRootView(injector, projectableNodes || [], rootSelectorOrNode, viewDef, ngModule, EMPTY_CONTEXT);
        /** @type {?} */
        const component = asProviderData(view, componentNodeIndex).instance;
        if (rootSelectorOrNode) {
            view.renderer.setAttribute(asElementData(view, 0).renderElement, 'ng-version', VERSION.full);
        }
        return new ComponentRef_(view, new ViewRef_(view), component);
    }
}
if (false) {}
class ComponentRef_ extends ComponentRef {
    /**
     * @param {?} _view
     * @param {?} _viewRef
     * @param {?} _component
     */
    constructor(_view, _viewRef, _component) {
        super();
        this._view = _view;
        this._viewRef = _viewRef;
        this._component = _component;
        this._elDef = this._view.def.nodes[0];
        this.hostView = _viewRef;
        this.changeDetectorRef = _viewRef;
        this.instance = _component;
    }
    /**
     * @return {?}
     */
    get location() {
        return new ElementRef(asElementData(this._view, this._elDef.nodeIndex).renderElement);
    }
    /**
     * @return {?}
     */
    get injector() { return new Injector_(this._view, this._elDef); }
    /**
     * @return {?}
     */
    get componentType() { return (/** @type {?} */ (this._component.constructor)); }
    /**
     * @return {?}
     */
    destroy() { this._viewRef.destroy(); }
    /**
     * @param {?} callback
     * @return {?}
     */
    onDestroy(callback) { this._viewRef.onDestroy(callback); }
}
if (false) {}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} elData
 * @return {?}
 */
function createViewContainerData(view, elDef, elData) {
    return new ViewContainerRef_(view, elDef, elData);
}
class ViewContainerRef_ {
    /**
     * @param {?} _view
     * @param {?} _elDef
     * @param {?} _data
     */
    constructor(_view, _elDef, _data) {
        this._view = _view;
        this._elDef = _elDef;
        this._data = _data;
        /**
         * \@internal
         */
        this._embeddedViews = [];
    }
    /**
     * @return {?}
     */
    get element() { return new ElementRef(this._data.renderElement); }
    /**
     * @return {?}
     */
    get injector() { return new Injector_(this._view, this._elDef); }
    /**
     * @deprecated No replacement
     * @return {?}
     */
    get parentInjector() {
        /** @type {?} */
        let view = this._view;
        /** @type {?} */
        let elDef = this._elDef.parent;
        while (!elDef && view) {
            elDef = viewParentEl(view);
            view = (/** @type {?} */ (view.parent));
        }
        return view ? new Injector_(view, elDef) : new Injector_(this._view, null);
    }
    /**
     * @return {?}
     */
    clear() {
        /** @type {?} */
        const len = this._embeddedViews.length;
        for (let i = len - 1; i >= 0; i--) {
            /** @type {?} */
            const view = (/** @type {?} */ (detachEmbeddedView(this._data, i)));
            Services.destroyView(view);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    get(index) {
        /** @type {?} */
        const view = this._embeddedViews[index];
        if (view) {
            /** @type {?} */
            const ref = new ViewRef_(view);
            ref.attachToViewContainerRef(this);
            return ref;
        }
        return null;
    }
    /**
     * @return {?}
     */
    get length() { return this._embeddedViews.length; }
    /**
     * @template C
     * @param {?} templateRef
     * @param {?=} context
     * @param {?=} index
     * @return {?}
     */
    createEmbeddedView(templateRef, context, index) {
        /** @type {?} */
        const viewRef = templateRef.createEmbeddedView(context || (/** @type {?} */ ({})));
        this.insert(viewRef, index);
        return viewRef;
    }
    /**
     * @template C
     * @param {?} componentFactory
     * @param {?=} index
     * @param {?=} injector
     * @param {?=} projectableNodes
     * @param {?=} ngModuleRef
     * @return {?}
     */
    createComponent(componentFactory, index, injector, projectableNodes, ngModuleRef) {
        /** @type {?} */
        const contextInjector = injector || this.parentInjector;
        if (!ngModuleRef && !(componentFactory instanceof ComponentFactoryBoundToModule)) {
            ngModuleRef = contextInjector.get(NgModuleRef);
        }
        /** @type {?} */
        const componentRef = componentFactory.create(contextInjector, projectableNodes, undefined, ngModuleRef);
        this.insert(componentRef.hostView, index);
        return componentRef;
    }
    /**
     * @param {?} viewRef
     * @param {?=} index
     * @return {?}
     */
    insert(viewRef, index) {
        if (viewRef.destroyed) {
            throw new Error('Cannot insert a destroyed View in a ViewContainer!');
        }
        /** @type {?} */
        const viewRef_ = (/** @type {?} */ (viewRef));
        /** @type {?} */
        const viewData = viewRef_._view;
        attachEmbeddedView(this._view, this._data, index, viewData);
        viewRef_.attachToViewContainerRef(this);
        return viewRef;
    }
    /**
     * @param {?} viewRef
     * @param {?} currentIndex
     * @return {?}
     */
    move(viewRef, currentIndex) {
        if (viewRef.destroyed) {
            throw new Error('Cannot move a destroyed View in a ViewContainer!');
        }
        /** @type {?} */
        const previousIndex = this._embeddedViews.indexOf(viewRef._view);
        moveEmbeddedView(this._data, previousIndex, currentIndex);
        return viewRef;
    }
    /**
     * @param {?} viewRef
     * @return {?}
     */
    indexOf(viewRef) {
        return this._embeddedViews.indexOf(((/** @type {?} */ (viewRef)))._view);
    }
    /**
     * @param {?=} index
     * @return {?}
     */
    remove(index) {
        /** @type {?} */
        const viewData = detachEmbeddedView(this._data, index);
        if (viewData) {
            Services.destroyView(viewData);
        }
    }
    /**
     * @param {?=} index
     * @return {?}
     */
    detach(index) {
        /** @type {?} */
        const view = detachEmbeddedView(this._data, index);
        return view ? new ViewRef_(view) : null;
    }
}
if (false) {}
/**
 * @param {?} view
 * @return {?}
 */
function createChangeDetectorRef(view) {
    return new ViewRef_(view);
}
class ViewRef_ {
    /**
     * @param {?} _view
     */
    constructor(_view) {
        this._view = _view;
        this._viewContainerRef = null;
        this._appRef = null;
    }
    /**
     * @return {?}
     */
    get rootNodes() { return rootRenderNodes(this._view); }
    /**
     * @return {?}
     */
    get context() { return this._view.context; }
    /**
     * @return {?}
     */
    get destroyed() { return (this._view.state & 128 /* Destroyed */) !== 0; }
    /**
     * @return {?}
     */
    markForCheck() { markParentViewsForCheck(this._view); }
    /**
     * @return {?}
     */
    detach() { this._view.state &= ~4 /* Attached */; }
    /**
     * @return {?}
     */
    detectChanges() {
        /** @type {?} */
        const fs = this._view.root.rendererFactory;
        if (fs.begin) {
            fs.begin();
        }
        try {
            Services.checkAndUpdateView(this._view);
        }
        finally {
            if (fs.end) {
                fs.end();
            }
        }
    }
    /**
     * @return {?}
     */
    checkNoChanges() { Services.checkNoChangesView(this._view); }
    /**
     * @return {?}
     */
    reattach() { this._view.state |= 4 /* Attached */; }
    /**
     * @param {?} callback
     * @return {?}
     */
    onDestroy(callback) {
        if (!this._view.disposables) {
            this._view.disposables = [];
        }
        this._view.disposables.push((/** @type {?} */ (callback)));
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this._appRef) {
            this._appRef.detachView(this);
        }
        else if (this._viewContainerRef) {
            this._viewContainerRef.detach(this._viewContainerRef.indexOf(this));
        }
        Services.destroyView(this._view);
    }
    /**
     * @return {?}
     */
    detachFromAppRef() {
        this._appRef = null;
        renderDetachView$1(this._view);
        Services.dirtyParentQueries(this._view);
    }
    /**
     * @param {?} appRef
     * @return {?}
     */
    attachToAppRef(appRef) {
        if (this._viewContainerRef) {
            throw new Error('This view is already attached to a ViewContainer!');
        }
        this._appRef = appRef;
    }
    /**
     * @param {?} vcRef
     * @return {?}
     */
    attachToViewContainerRef(vcRef) {
        if (this._appRef) {
            throw new Error('This view is already attached directly to the ApplicationRef!');
        }
        this._viewContainerRef = vcRef;
    }
}
if (false) {}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createTemplateData(view, def) {
    return new TemplateRef_(view, def);
}
class TemplateRef_ extends TemplateRef {
    /**
     * @param {?} _parentView
     * @param {?} _def
     */
    constructor(_parentView, _def) {
        super();
        this._parentView = _parentView;
        this._def = _def;
    }
    /**
     * @param {?} context
     * @return {?}
     */
    createEmbeddedView(context) {
        return new ViewRef_(Services.createEmbeddedView(this._parentView, this._def, (/** @type {?} */ ((/** @type {?} */ (this._def.element)).template)), context));
    }
    /**
     * @return {?}
     */
    get elementRef() {
        return new ElementRef(asElementData(this._parentView, this._def.nodeIndex).renderElement);
    }
}
if (false) {}
/**
 * @param {?} view
 * @param {?} elDef
 * @return {?}
 */
function createInjector$1(view, elDef) {
    return new Injector_(view, elDef);
}
class Injector_ {
    /**
     * @param {?} view
     * @param {?} elDef
     */
    constructor(view, elDef) {
        this.view = view;
        this.elDef = elDef;
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND) {
        /** @type {?} */
        const allowPrivateServices = this.elDef ? (this.elDef.flags & 33554432 /* ComponentView */) !== 0 : false;
        return Services.resolveDep(this.view, this.elDef, allowPrivateServices, { flags: 0 /* None */, token, tokenKey: tokenKey(token) }, notFoundValue);
    }
}
if (false) {}
/**
 * @param {?} view
 * @param {?} index
 * @return {?}
 */
function nodeValue(view, index) {
    /** @type {?} */
    const def = view.def.nodes[index];
    if (def.flags & 1 /* TypeElement */) {
        /** @type {?} */
        const elData = asElementData(view, def.nodeIndex);
        return (/** @type {?} */ (def.element)).template ? elData.template : elData.renderElement;
    }
    else if (def.flags & 2 /* TypeText */) {
        return asTextData(view, def.nodeIndex).renderText;
    }
    else if (def.flags & (20224 /* CatProvider */ | 16 /* TypePipe */)) {
        return asProviderData(view, def.nodeIndex).instance;
    }
    throw new Error(`Illegal state: read nodeValue for node index ${index}`);
}
/**
 * @param {?} moduleType
 * @param {?} parent
 * @param {?} bootstrapComponents
 * @param {?} def
 * @return {?}
 */
function createNgModuleRef(moduleType, parent, bootstrapComponents, def) {
    return new NgModuleRef_(moduleType, parent, bootstrapComponents, def);
}
class NgModuleRef_ {
    /**
     * @param {?} _moduleType
     * @param {?} _parent
     * @param {?} _bootstrapComponents
     * @param {?} _def
     */
    constructor(_moduleType, _parent, _bootstrapComponents, _def) {
        this._moduleType = _moduleType;
        this._parent = _parent;
        this._bootstrapComponents = _bootstrapComponents;
        this._def = _def;
        this._destroyListeners = [];
        this._destroyed = false;
        this.injector = this;
        initNgModule(this);
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @param {?=} injectFlags
     * @return {?}
     */
    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {
        /** @type {?} */
        let flags = 0 /* None */;
        if (injectFlags & InjectFlags.SkipSelf) {
            flags |= 1 /* SkipSelf */;
        }
        else if (injectFlags & InjectFlags.Self) {
            flags |= 4 /* Self */;
        }
        return resolveNgModuleDep(this, { token: token, tokenKey: tokenKey(token), flags: flags }, notFoundValue);
    }
    /**
     * @return {?}
     */
    get instance() { return this.get(this._moduleType); }
    /**
     * @return {?}
     */
    get componentFactoryResolver() { return this.get(ComponentFactoryResolver); }
    /**
     * @return {?}
     */
    destroy() {
        if (this._destroyed) {
            throw new Error(`The ng module ${stringify(this.instance.constructor)} has already been destroyed.`);
        }
        this._destroyed = true;
        callNgModuleLifecycle(this, 131072 /* OnDestroy */);
        this._destroyListeners.forEach((/**
         * @param {?} listener
         * @return {?}
         */
        (listener) => listener()));
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    onDestroy(callback) { this._destroyListeners.push(callback); }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/provider.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const Renderer2TokenKey = tokenKey(Renderer2);
/** @type {?} */
const ElementRefTokenKey = tokenKey(ElementRef);
/** @type {?} */
const ViewContainerRefTokenKey = tokenKey(ViewContainerRef);
/** @type {?} */
const TemplateRefTokenKey = tokenKey(TemplateRef);
/** @type {?} */
const ChangeDetectorRefTokenKey = tokenKey(ChangeDetectorRef);
/** @type {?} */
const InjectorRefTokenKey$1 = tokenKey(Injector);
/** @type {?} */
const INJECTORRefTokenKey$1 = tokenKey(INJECTOR);
/**
 * @param {?} checkIndex
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} childCount
 * @param {?} ctor
 * @param {?} deps
 * @param {?=} props
 * @param {?=} outputs
 * @return {?}
 */
function directiveDef(checkIndex, flags, matchedQueries, childCount, ctor, deps, props, outputs) {
    /** @type {?} */
    const bindings = [];
    if (props) {
        for (let prop in props) {
            const [bindingIndex, nonMinifiedName] = props[prop];
            bindings[bindingIndex] = {
                flags: 8 /* TypeProperty */,
                name: prop, nonMinifiedName,
                ns: null,
                securityContext: null,
                suffix: null
            };
        }
    }
    /** @type {?} */
    const outputDefs = [];
    if (outputs) {
        for (let propName in outputs) {
            outputDefs.push({ type: 1 /* DirectiveOutput */, propName, target: null, eventName: outputs[propName] });
        }
    }
    flags |= 16384 /* TypeDirective */;
    return _def(checkIndex, flags, matchedQueries, childCount, ctor, ctor, deps, bindings, outputDefs);
}
/**
 * @param {?} flags
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function pipeDef(flags, ctor, deps) {
    flags |= 16 /* TypePipe */;
    return _def(-1, flags, null, 0, ctor, ctor, deps);
}
/**
 * @param {?} flags
 * @param {?} matchedQueries
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @return {?}
 */
function providerDef(flags, matchedQueries, token, value, deps) {
    return _def(-1, flags, matchedQueries, 0, token, value, deps);
}
/**
 * @param {?} checkIndex
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} childCount
 * @param {?} token
 * @param {?} value
 * @param {?} deps
 * @param {?=} bindings
 * @param {?=} outputs
 * @return {?}
 */
function _def(checkIndex, flags, matchedQueriesDsl, childCount, token, value, deps, bindings, outputs) {
    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);
    if (!outputs) {
        outputs = [];
    }
    if (!bindings) {
        bindings = [];
    }
    // Need to resolve forwardRefs as e.g. for `useValue` we
    // lowered the expression and then stopped evaluating it,
    // i.e. also didn't unwrap it.
    value = resolveForwardRef(value);
    /** @type {?} */
    const depDefs = splitDepsDsl(deps, stringify(token));
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex,
        flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references,
        ngContentIndex: -1, childCount, bindings,
        bindingFlags: calcBindingFlags(bindings), outputs,
        element: null,
        provider: { token, value, deps: depDefs },
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createProviderInstance(view, def) {
    return _createProviderInstance$1(view, def);
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createPipeInstance(view, def) {
    // deps are looked up from component.
    /** @type {?} */
    let compView = view;
    while (compView.parent && !isComponentView(compView)) {
        compView = compView.parent;
    }
    // pipes can see the private services of the component
    /** @type {?} */
    const allowPrivateServices = true;
    // pipes are always eager and classes!
    return createClass((/** @type {?} */ (compView.parent)), (/** @type {?} */ (viewParentEl(compView))), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createDirectiveInstance(view, def) {
    // components can see other private services, other directives can't.
    /** @type {?} */
    const allowPrivateServices = (def.flags & 32768 /* Component */) > 0;
    // directives are always eager and classes!
    /** @type {?} */
    const instance = createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (def.provider)).value, (/** @type {?} */ (def.provider)).deps);
    if (def.outputs.length) {
        for (let i = 0; i < def.outputs.length; i++) {
            /** @type {?} */
            const output = def.outputs[i];
            /** @type {?} */
            const outputObservable = instance[(/** @type {?} */ (output.propName))];
            if (isObservable(outputObservable)) {
                /** @type {?} */
                const subscription = outputObservable.subscribe(eventHandlerClosure(view, (/** @type {?} */ (def.parent)).nodeIndex, output.eventName));
                (/** @type {?} */ (view.disposables))[def.outputIndex + i] = subscription.unsubscribe.bind(subscription);
            }
            else {
                throw new Error(`@Output ${output.propName} not initialized in '${instance.constructor.name}'.`);
            }
        }
    }
    return instance;
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */
function eventHandlerClosure(view, index, eventName) {
    return (/**
     * @param {?} event
     * @return {?}
     */
    (event) => dispatchEvent(view, index, eventName, event));
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateDirectiveInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    /** @type {?} */
    const providerData = asProviderData(view, def.nodeIndex);
    /** @type {?} */
    const directive = providerData.instance;
    /** @type {?} */
    let changed = false;
    /** @type {?} */
    let changes = (/** @type {?} */ (undefined));
    /** @type {?} */
    const bindLen = def.bindings.length;
    if (bindLen > 0 && checkBinding(view, def, 0, v0)) {
        changed = true;
        changes = updateProp(view, providerData, def, 0, v0, changes);
    }
    if (bindLen > 1 && checkBinding(view, def, 1, v1)) {
        changed = true;
        changes = updateProp(view, providerData, def, 1, v1, changes);
    }
    if (bindLen > 2 && checkBinding(view, def, 2, v2)) {
        changed = true;
        changes = updateProp(view, providerData, def, 2, v2, changes);
    }
    if (bindLen > 3 && checkBinding(view, def, 3, v3)) {
        changed = true;
        changes = updateProp(view, providerData, def, 3, v3, changes);
    }
    if (bindLen > 4 && checkBinding(view, def, 4, v4)) {
        changed = true;
        changes = updateProp(view, providerData, def, 4, v4, changes);
    }
    if (bindLen > 5 && checkBinding(view, def, 5, v5)) {
        changed = true;
        changes = updateProp(view, providerData, def, 5, v5, changes);
    }
    if (bindLen > 6 && checkBinding(view, def, 6, v6)) {
        changed = true;
        changes = updateProp(view, providerData, def, 6, v6, changes);
    }
    if (bindLen > 7 && checkBinding(view, def, 7, v7)) {
        changed = true;
        changes = updateProp(view, providerData, def, 7, v7, changes);
    }
    if (bindLen > 8 && checkBinding(view, def, 8, v8)) {
        changed = true;
        changes = updateProp(view, providerData, def, 8, v8, changes);
    }
    if (bindLen > 9 && checkBinding(view, def, 9, v9)) {
        changed = true;
        changes = updateProp(view, providerData, def, 9, v9, changes);
    }
    if (changes) {
        directive.ngOnChanges(changes);
    }
    if ((def.flags & 65536 /* OnInit */) &&
        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {
        directive.ngOnInit();
    }
    if (def.flags & 262144 /* DoCheck */) {
        directive.ngDoCheck();
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateDirectiveDynamic(view, def, values) {
    /** @type {?} */
    const providerData = asProviderData(view, def.nodeIndex);
    /** @type {?} */
    const directive = providerData.instance;
    /** @type {?} */
    let changed = false;
    /** @type {?} */
    let changes = (/** @type {?} */ (undefined));
    for (let i = 0; i < values.length; i++) {
        if (checkBinding(view, def, i, values[i])) {
            changed = true;
            changes = updateProp(view, providerData, def, i, values[i], changes);
        }
    }
    if (changes) {
        directive.ngOnChanges(changes);
    }
    if ((def.flags & 65536 /* OnInit */) &&
        shouldCallLifecycleInitHook(view, 256 /* InitState_CallingOnInit */, def.nodeIndex)) {
        directive.ngOnInit();
    }
    if (def.flags & 262144 /* DoCheck */) {
        directive.ngDoCheck();
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function _createProviderInstance$1(view, def) {
    // private services can see other private services
    /** @type {?} */
    const allowPrivateServices = (def.flags & 8192 /* PrivateProvider */) > 0;
    /** @type {?} */
    const providerDef = def.provider;
    switch (def.flags & 201347067 /* Types */) {
        case 512 /* TypeClassProvider */:
            return createClass(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);
        case 1024 /* TypeFactoryProvider */:
            return callFactory(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).value, (/** @type {?} */ (providerDef)).deps);
        case 2048 /* TypeUseExistingProvider */:
            return resolveDep(view, (/** @type {?} */ (def.parent)), allowPrivateServices, (/** @type {?} */ (providerDef)).deps[0]);
        case 256 /* TypeValueProvider */:
            return (/** @type {?} */ (providerDef)).value;
    }
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} ctor
 * @param {?} deps
 * @return {?}
 */
function createClass(view, elDef, allowPrivateServices, ctor, deps) {
    /** @type {?} */
    const len = deps.length;
    switch (len) {
        case 0:
            return new ctor();
        case 1:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]));
        case 2:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
        case 3:
            return new ctor(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
        default:
            /** @type {?} */
            const depValues = [];
            for (let i = 0; i < len; i++) {
                depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
            }
            return new ctor(...depValues);
    }
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} factory
 * @param {?} deps
 * @return {?}
 */
function callFactory(view, elDef, allowPrivateServices, factory, deps) {
    /** @type {?} */
    const len = deps.length;
    switch (len) {
        case 0:
            return factory();
        case 1:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]));
        case 2:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]));
        case 3:
            return factory(resolveDep(view, elDef, allowPrivateServices, deps[0]), resolveDep(view, elDef, allowPrivateServices, deps[1]), resolveDep(view, elDef, allowPrivateServices, deps[2]));
        default:
            /** @type {?} */
            const depValues = [];
            for (let i = 0; i < len; i++) {
                depValues.push(resolveDep(view, elDef, allowPrivateServices, deps[i]));
            }
            return factory(...depValues);
    }
}
// This default value is when checking the hierarchy for a token.
//
// It means both:
// - the token is not provided by the current injector,
// - only the element injectors should be checked (ie do not check module injectors
//
//          mod1
//         /
//       el1   mod2
//         \  /
//         el2
//
// When requesting el2.injector.get(token), we should check in the following order and return the
// first found value:
// - el2.injector.get(token, default)
// - el1.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) -> do not check the module
// - mod2.injector.get(token, default)
/** @type {?} */
const NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @param {?} depDef
 * @param {?=} notFoundValue
 * @return {?}
 */
function resolveDep(view, elDef, allowPrivateServices, depDef, notFoundValue = Injector.THROW_IF_NOT_FOUND) {
    if (depDef.flags & 8 /* Value */) {
        return depDef.token;
    }
    /** @type {?} */
    const startView = view;
    if (depDef.flags & 2 /* Optional */) {
        notFoundValue = null;
    }
    /** @type {?} */
    const tokenKey = depDef.tokenKey;
    if (tokenKey === ChangeDetectorRefTokenKey) {
        // directives on the same element as a component should be able to control the change detector
        // of that component as well.
        allowPrivateServices = !!(elDef && (/** @type {?} */ (elDef.element)).componentView);
    }
    if (elDef && (depDef.flags & 1 /* SkipSelf */)) {
        allowPrivateServices = false;
        elDef = (/** @type {?} */ (elDef.parent));
    }
    /** @type {?} */
    let searchView = view;
    while (searchView) {
        if (elDef) {
            switch (tokenKey) {
                case Renderer2TokenKey: {
                    /** @type {?} */
                    const compView = findCompView(searchView, elDef, allowPrivateServices);
                    return compView.renderer;
                }
                case ElementRefTokenKey:
                    return new ElementRef(asElementData(searchView, elDef.nodeIndex).renderElement);
                case ViewContainerRefTokenKey:
                    return asElementData(searchView, elDef.nodeIndex).viewContainer;
                case TemplateRefTokenKey: {
                    if ((/** @type {?} */ (elDef.element)).template) {
                        return asElementData(searchView, elDef.nodeIndex).template;
                    }
                    break;
                }
                case ChangeDetectorRefTokenKey: {
                    /** @type {?} */
                    let cdView = findCompView(searchView, elDef, allowPrivateServices);
                    return createChangeDetectorRef(cdView);
                }
                case InjectorRefTokenKey$1:
                case INJECTORRefTokenKey$1:
                    return createInjector$1(searchView, elDef);
                default:
                    /** @type {?} */
                    const providerDef = (/** @type {?} */ ((allowPrivateServices ? (/** @type {?} */ (elDef.element)).allProviders :
                        (/** @type {?} */ (elDef.element)).publicProviders)))[tokenKey];
                    if (providerDef) {
                        /** @type {?} */
                        let providerData = asProviderData(searchView, providerDef.nodeIndex);
                        if (!providerData) {
                            providerData = { instance: _createProviderInstance$1(searchView, providerDef) };
                            searchView.nodes[providerDef.nodeIndex] = (/** @type {?} */ (providerData));
                        }
                        return providerData.instance;
                    }
            }
        }
        allowPrivateServices = isComponentView(searchView);
        elDef = (/** @type {?} */ (viewParentEl(searchView)));
        searchView = (/** @type {?} */ (searchView.parent));
        if (depDef.flags & 4 /* Self */) {
            searchView = null;
        }
    }
    /** @type {?} */
    const value = startView.root.injector.get(depDef.token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR);
    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
        notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
        // Return the value from the root element injector when
        // - it provides it
        //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        // - the module injector should not be checked
        //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
        return value;
    }
    return startView.root.ngModule.injector.get(depDef.token, notFoundValue);
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} allowPrivateServices
 * @return {?}
 */
function findCompView(view, elDef, allowPrivateServices) {
    /** @type {?} */
    let compView;
    if (allowPrivateServices) {
        compView = asElementData(view, elDef.nodeIndex).componentView;
    }
    else {
        compView = view;
        while (compView.parent && !isComponentView(compView)) {
            compView = compView.parent;
        }
    }
    return compView;
}
/**
 * @param {?} view
 * @param {?} providerData
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @param {?} changes
 * @return {?}
 */
function updateProp(view, providerData, def, bindingIdx, value, changes) {
    if (def.flags & 32768 /* Component */) {
        /** @type {?} */
        const compView = asElementData(view, (/** @type {?} */ (def.parent)).nodeIndex).componentView;
        if (compView.def.flags & 2 /* OnPush */) {
            compView.state |= 8 /* ChecksEnabled */;
        }
    }
    /** @type {?} */
    const binding = def.bindings[bindingIdx];
    /** @type {?} */
    const propName = (/** @type {?} */ (binding.name));
    // Note: This is still safe with Closure Compiler as
    // the user passed in the property name as an object has to `providerDef`,
    // so Closure Compiler will have renamed the property correctly already.
    providerData.instance[propName] = value;
    if (def.flags & 524288 /* OnChanges */) {
        changes = changes || {};
        /** @type {?} */
        const oldValue = WrappedValue.unwrap(view.oldValues[def.bindingIndex + bindingIdx]);
        /** @type {?} */
        const binding = def.bindings[bindingIdx];
        changes[(/** @type {?} */ (binding.nonMinifiedName))] =
            new SimpleChange(oldValue, value, (view.state & 2 /* FirstCheck */) !== 0);
    }
    view.oldValues[def.bindingIndex + bindingIdx] = value;
    return changes;
}
// This function calls the ngAfterContentCheck, ngAfterContentInit,
// ngAfterViewCheck, and ngAfterViewInit lifecycle hooks (depending on the node
// flags in lifecycle). Unlike ngDoCheck, ngOnChanges and ngOnInit, which are
// called during a pre-order traversal of the view tree (that is calling the
// parent hooks before the child hooks) these events are sent in using a
// post-order traversal of the tree (children before parents). This changes the
// meaning of initIndex in the view state. For ngOnInit, initIndex tracks the
// expected nodeIndex which a ngOnInit should be called. When sending
// ngAfterContentInit and ngAfterViewInit it is the expected count of
// ngAfterContentInit or ngAfterViewInit methods that have been called. This
// ensure that despite being called recursively or after picking up after an
// exception, the ngAfterContentInit or ngAfterViewInit will be called on the
// correct nodes. Consider for example, the following (where E is an element
// and D is a directive)
//  Tree:       pre-order index  post-order index
//    E1        0                6
//      E2      1                1
//       D3     2                0
//      E4      3                5
//       E5     4                4
//        E6    5                2
//        E7    6                3
// As can be seen, the post-order index has an unclear relationship to the
// pre-order index (postOrderIndex === preOrderIndex - parentCount +
// childCount). Since number of calls to ngAfterContentInit and ngAfterViewInit
// are stable (will be the same for the same view regardless of exceptions or
// recursion) we just need to count them which will roughly correspond to the
// post-order index (it skips elements and directives that do not have
// lifecycle hooks).
//
// For example, if an exception is raised in the E6.onAfterViewInit() the
// initIndex is left at 3 (by shouldCallLifecycleInitHook() which set it to
// initIndex + 1). When checkAndUpdateView() is called again D3, E2 and E6 will
// not have their ngAfterViewInit() called but, starting with E7, the rest of
// the view will begin getting ngAfterViewInit() called until a check and
// pass is complete.
//
// This algorthim also handles recursion. Consider if E4's ngAfterViewInit()
// indirectly calls E1's ChangeDetectorRef.detectChanges(). The expected
// initIndex is set to 6, the recusive checkAndUpdateView() starts walk again.
// D3, E2, E6, E7, E5 and E4 are skipped, ngAfterViewInit() is called on E1.
// When the recursion returns the initIndex will be 7 so E1 is skipped as it
// has already been called in the recursively called checkAnUpdateView().
/**
 * @param {?} view
 * @param {?} lifecycles
 * @return {?}
 */
function callLifecycleHooksChildrenFirst(view, lifecycles) {
    if (!(view.def.nodeFlags & lifecycles)) {
        return;
    }
    /** @type {?} */
    const nodes = view.def.nodes;
    /** @type {?} */
    let initIndex = 0;
    for (let i = 0; i < nodes.length; i++) {
        /** @type {?} */
        const nodeDef = nodes[i];
        /** @type {?} */
        let parent = nodeDef.parent;
        if (!parent && nodeDef.flags & lifecycles) {
            // matching root node (e.g. a pipe)
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
        }
        if ((nodeDef.childFlags & lifecycles) === 0) {
            // no child matches one of the lifecycles
            i += nodeDef.childCount;
        }
        while (parent && (parent.flags & 1 /* TypeElement */) &&
            i === parent.nodeIndex + parent.childCount) {
            // last child of an element
            if (parent.directChildFlags & lifecycles) {
                initIndex = callElementProvidersLifecycles(view, parent, lifecycles, initIndex);
            }
            parent = parent.parent;
        }
    }
}
/**
 * @param {?} view
 * @param {?} elDef
 * @param {?} lifecycles
 * @param {?} initIndex
 * @return {?}
 */
function callElementProvidersLifecycles(view, elDef, lifecycles, initIndex) {
    for (let i = elDef.nodeIndex + 1; i <= elDef.nodeIndex + elDef.childCount; i++) {
        /** @type {?} */
        const nodeDef = view.def.nodes[i];
        if (nodeDef.flags & lifecycles) {
            callProviderLifecycles(view, i, nodeDef.flags & lifecycles, initIndex++);
        }
        // only visit direct children
        i += nodeDef.childCount;
    }
    return initIndex;
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} lifecycles
 * @param {?} initIndex
 * @return {?}
 */
function callProviderLifecycles(view, index, lifecycles, initIndex) {
    /** @type {?} */
    const providerData = asProviderData(view, index);
    if (!providerData) {
        return;
    }
    /** @type {?} */
    const provider = providerData.instance;
    if (!provider) {
        return;
    }
    Services.setCurrentNode(view, index);
    if (lifecycles & 1048576 /* AfterContentInit */ &&
        shouldCallLifecycleInitHook(view, 512 /* InitState_CallingAfterContentInit */, initIndex)) {
        provider.ngAfterContentInit();
    }
    if (lifecycles & 2097152 /* AfterContentChecked */) {
        provider.ngAfterContentChecked();
    }
    if (lifecycles & 4194304 /* AfterViewInit */ &&
        shouldCallLifecycleInitHook(view, 768 /* InitState_CallingAfterViewInit */, initIndex)) {
        provider.ngAfterViewInit();
    }
    if (lifecycles & 8388608 /* AfterViewChecked */) {
        provider.ngAfterViewChecked();
    }
    if (lifecycles & 131072 /* OnDestroy */) {
        provider.ngOnDestroy();
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/component_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ComponentFactoryResolver$1 extends ComponentFactoryResolver {
    /**
     * @param {?=} ngModule The NgModuleRef to which all resolved factories are bound.
     */
    constructor(ngModule) {
        super();
        this.ngModule = ngModule;
    }
    /**
     * @template T
     * @param {?} component
     * @return {?}
     */
    resolveComponentFactory(component) {
        ngDevMode && assertComponentType(component);
        /** @type {?} */
        const componentDef = (/** @type {?} */ (getComponentDef(component)));
        return new ComponentFactory$1(componentDef, this.ngModule);
    }
}
if (false) {}
/**
 * @param {?} map
 * @return {?}
 */
function toRefArray(map) {
    /** @type {?} */
    const array = [];
    for (let nonMinified in map) {
        if (map.hasOwnProperty(nonMinified)) {
            /** @type {?} */
            const minified = map[nonMinified];
            array.push({ propName: minified, templateName: nonMinified });
        }
    }
    return array;
}
/**
 * @param {?} elementName
 * @return {?}
 */
function getNamespace$1(elementName) {
    /** @type {?} */
    const name = elementName.toLowerCase();
    return name === 'svg' ? SVG_NAMESPACE : (name === 'math' ? MATH_ML_NAMESPACE : null);
}
/**
 * A change detection scheduler token for {\@link RootContext}. This token is the default value used
 * for the default `RootContext` found in the {\@link ROOT_CONTEXT} token.
 * @type {?}
 */
const SCHEDULER = new InjectionToken('SCHEDULER_TOKEN', {
    providedIn: 'root',
    factory: (/**
     * @return {?}
     */
    () => defaultScheduler),
});
/**
 * @param {?} rootViewInjector
 * @param {?} moduleInjector
 * @return {?}
 */
function createChainedInjector(rootViewInjector, moduleInjector) {
    return {
        get: (/**
         * @template T
         * @param {?} token
         * @param {?=} notFoundValue
         * @param {?=} flags
         * @return {?}
         */
        (token, notFoundValue, flags) => {
            /** @type {?} */
            const value = rootViewInjector.get(token, (/** @type {?} */ (NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)), flags);
            if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR ||
                notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
                // Return the value from the root element injector when
                // - it provides it
                //   (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
                // - the module injector should not be checked
                //   (notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR)
                return value;
            }
            return moduleInjector.get(token, notFoundValue, flags);
        })
    };
}
/**
 * Render3 implementation of {\@link viewEngine_ComponentFactory}.
 * @template T
 */
class ComponentFactory$1 extends ComponentFactory {
    /**
     * @param {?} componentDef The component definition.
     * @param {?=} ngModule The NgModuleRef to which the factory is bound.
     */
    constructor(componentDef, ngModule) {
        super();
        this.componentDef = componentDef;
        this.ngModule = ngModule;
        this.componentType = componentDef.type;
        this.selector = stringifyCSSSelectorList(componentDef.selectors);
        this.ngContentSelectors =
            componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
        this.isBoundToModule = !!ngModule;
    }
    /**
     * @return {?}
     */
    get inputs() {
        return toRefArray(this.componentDef.inputs);
    }
    /**
     * @return {?}
     */
    get outputs() {
        return toRefArray(this.componentDef.outputs);
    }
    /**
     * @param {?} injector
     * @param {?=} projectableNodes
     * @param {?=} rootSelectorOrNode
     * @param {?=} ngModule
     * @return {?}
     */
    create(injector, projectableNodes, rootSelectorOrNode, ngModule) {
        ngModule = ngModule || this.ngModule;
        /** @type {?} */
        const rootViewInjector = ngModule ? createChainedInjector(injector, ngModule.injector) : injector;
        /** @type {?} */
        const rendererFactory = (/** @type {?} */ (rootViewInjector.get(RendererFactory2, domRendererFactory3)));
        /** @type {?} */
        const sanitizer = rootViewInjector.get(Sanitizer, null);
        /** @type {?} */
        const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);
        // Determine a tag name used for creating host elements when this component is created
        // dynamically. Default to 'div' if this component did not specify any tag name in its selector.
        /** @type {?} */
        const elementName = (/** @type {?} */ (this.componentDef.selectors[0][0])) || 'div';
        /** @type {?} */
        const hostRNode = rootSelectorOrNode ?
            locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation) :
            elementCreate(elementName, rendererFactory.createRenderer(null, this.componentDef), getNamespace$1(elementName));
        /** @type {?} */
        const rootFlags = this.componentDef.onPush ? 64 /* Dirty */ | 512 /* IsRoot */ :
            16 /* CheckAlways */ | 512 /* IsRoot */;
        // Check whether this Component needs to be isolated from other components, i.e. whether it
        // should be placed into its own (empty) root context or existing root context should be used.
        // Note: this is internal-only convention and might change in the future, so it should not be
        // relied upon externally.
        /** @type {?} */
        const isIsolated = typeof rootSelectorOrNode === 'string' &&
            /^#root-ng-internal-isolated-\d+/.test(rootSelectorOrNode);
        /** @type {?} */
        const rootContext = createRootContext();
        // Create the root view. Uses empty TView and ContentTemplate.
        /** @type {?} */
        const rootTView = createTView(0 /* Root */, -1, null, 1, 0, null, null, null, null, null);
        /** @type {?} */
        const rootLView = createLView(null, rootTView, rootContext, rootFlags, null, null, rendererFactory, hostRenderer, sanitizer, rootViewInjector);
        // rootView is the parent when bootstrapping
        // TODO(misko): it looks like we are entering view here but we don't really need to as
        // `renderView` does that. However as the code is written it is needed because
        // `createRootComponentView` and `createRootComponent` both read global state. Fixing those
        // issues would allow us to drop this.
        enterView(rootLView, null);
        /** @type {?} */
        let component;
        /** @type {?} */
        let tElementNode;
        try {
            /** @type {?} */
            const componentView = createRootComponentView(hostRNode, this.componentDef, rootLView, rendererFactory, hostRenderer);
            if (hostRNode) {
                if (rootSelectorOrNode) {
                    setUpAttributes(hostRenderer, hostRNode, ['ng-version', VERSION.full]);
                }
                else {
                    // If host element is created as a part of this function call (i.e. `rootSelectorOrNode`
                    // is not defined), also apply attributes and classes extracted from component selector.
                    // Extract attributes and classes from the first selector only to match VE behavior.
                    const { attrs, classes } = extractAttrsAndClassesFromSelector(this.componentDef.selectors[0]);
                    if (attrs) {
                        setUpAttributes(hostRenderer, hostRNode, attrs);
                    }
                    if (classes && classes.length > 0) {
                        writeDirectClass(hostRenderer, hostRNode, classes.join(' '));
                    }
                }
            }
            tElementNode = (/** @type {?} */ (getTNode(rootLView[TVIEW], 0)));
            if (projectableNodes) {
                // projectable nodes can be passed as array of arrays or an array of iterables (ngUpgrade
                // case). Here we do normalize passed data structure to be an array of arrays to avoid
                // complex checks down the line.
                tElementNode.projection =
                    projectableNodes.map((/**
                     * @param {?} nodesforSlot
                     * @return {?}
                     */
                    (nodesforSlot) => { return Array.from(nodesforSlot); }));
            }
            // TODO: should LifecycleHooksFeature and other host features be generated by the compiler and
            // executed here?
            // Angular 5 reference: https://stackblitz.com/edit/lifecycle-hooks-vcref
            component = createRootComponent(componentView, this.componentDef, rootLView, rootContext, [LifecycleHooksFeature]);
            renderView(rootTView, rootLView, null);
        }
        finally {
            leaveView();
        }
        /** @type {?} */
        const componentRef = new ComponentRef$1(this.componentType, component, createElementRef(ElementRef, tElementNode, rootLView), rootLView, tElementNode);
        if (!rootSelectorOrNode || isIsolated) {
            // The host element of the internal or isolated root view is attached to the component's host
            // view node.
            (/** @type {?} */ (componentRef.hostView._tViewNode)).child = tElementNode;
        }
        return componentRef;
    }
}
if (false) {}
/** @type {?} */
const componentFactoryResolver = new ComponentFactoryResolver$1();
/**
 * Creates a ComponentFactoryResolver and stores it on the injector. Or, if the
 * ComponentFactoryResolver
 * already exists, retrieves the existing ComponentFactoryResolver.
 *
 * @return {?} The ComponentFactoryResolver instance to use
 */
function injectComponentFactoryResolver() {
    return componentFactoryResolver;
}
/**
 * Represents an instance of a Component created via a {\@link ComponentFactory}.
 *
 * `ComponentRef` provides access to the Component Instance as well other objects related to this
 * Component Instance and allows you to destroy the Component Instance via the {\@link #destroy}
 * method.
 *
 * @template T
 */
class ComponentRef$1 extends ComponentRef {
    /**
     * @param {?} componentType
     * @param {?} instance
     * @param {?} location
     * @param {?} _rootLView
     * @param {?} _tNode
     */
    constructor(componentType, instance, location, _rootLView, _tNode) {
        super();
        this.location = location;
        this._rootLView = _rootLView;
        this._tNode = _tNode;
        this.destroyCbs = [];
        this.instance = instance;
        this.hostView = this.changeDetectorRef = new RootViewRef(_rootLView);
        this.hostView._tViewNode = assignTViewNodeToLView(_rootLView[TVIEW], null, -1, _rootLView);
        this.componentType = componentType;
    }
    /**
     * @return {?}
     */
    get injector() { return new NodeInjector(this._tNode, this._rootLView); }
    /**
     * @return {?}
     */
    destroy() {
        if (this.destroyCbs) {
            this.destroyCbs.forEach((/**
             * @param {?} fn
             * @return {?}
             */
            fn => fn()));
            this.destroyCbs = null;
            !this.hostView.destroyed && this.hostView.destroy();
        }
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    onDestroy(callback) {
        if (this.destroyCbs) {
            this.destroyCbs.push(callback);
        }
    }
}
if (false) {}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * NOTE: changes to the `ngI18nClosureMode` name must be synced with `compiler-cli/src/tooling.ts`.
 */
if (typeof ngI18nClosureMode === 'undefined') {
    // These property accesses can be ignored because ngI18nClosureMode will be set to false
    // when optimizing code and the whole if statement will be dropped.
    // Make sure to refer to ngI18nClosureMode as ['ngI18nClosureMode'] for closure.
    // NOTE: we need to have it in IIFE so that the tree-shaker is happy.
    (function () {
        // tslint:disable-next-line:no-toplevel-property-access
        _global['ngI18nClosureMode'] =
            // TODO(FW-1250): validate that this actually, you know, works.
            // tslint:disable-next-line:no-toplevel-property-access
            typeof goog !== 'undefined' && typeof goog.getMsg === 'function';
    })();
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/i18n/locale_en.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
// THIS CODE IS GENERATED - DO NOT MODIFY
// See angular/tools/gulp-tasks/cldr/extract.js
/** @type {?} */
const u = undefined;
/**
 * @param {?} n
 * @return {?}
 */
function plural(n) {
    /** @type {?} */
    let i = Math.floor(Math.abs(n));
    /** @type {?} */
    let v = n.toString().replace(/^[^.]*\.?/, '').length;
    if (i === 1 && v === 0)
        return 1;
    return 5;
}
var localeEn = [
    'en',
    [['a', 'p'], ['AM', 'PM'], u],
    [['AM', 'PM'], u, u],
    [
        ['S', 'M', 'T', 'W', 'T', 'F', 'S'], ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
        ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa']
    ],
    u,
    [
        ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],
        ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
        [
            'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',
            'October', 'November', 'December'
        ]
    ],
    u,
    [['B', 'A'], ['BC', 'AD'], ['Before Christ', 'Anno Domini']],
    0,
    [6, 0],
    ['M/d/yy', 'MMM d, y', 'MMMM d, y', 'EEEE, MMMM d, y'],
    ['h:mm a', 'h:mm:ss a', 'h:mm:ss a z', 'h:mm:ss a zzzz'],
    ['{1}, {0}', u, '{1} \'at\' {0}', u],
    ['.', ',', ';', '%', '+', '-', 'E', '×', '‰', '∞', 'NaN', ':'],
    ['#,##0.###', '#,##0%', '¤#,##0.00', '#E0'],
    'USD',
    '$',
    'US Dollar',
    {},
    plural
];

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/i18n/locale_data_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This const is used to store the locale data registered with `registerLocaleData`
 * @type {?}
 */
let LOCALE_DATA = {};
/**
 * Register locale data to be used internally by Angular. See the
 * ["I18n guide"](guide/i18n#i18n-pipes) to know how to import additional locale data.
 *
 * The signature `registerLocaleData(data: any, extraData?: any)` is deprecated since v5.1
 * @param {?} data
 * @param {?=} localeId
 * @param {?=} extraData
 * @return {?}
 */
function registerLocaleData(data, localeId, extraData) {
    if (typeof localeId !== 'string') {
        extraData = localeId;
        localeId = data[LocaleDataIndex.LocaleId];
    }
    localeId = localeId.toLowerCase().replace(/_/g, '-');
    LOCALE_DATA[localeId] = data;
    if (extraData) {
        LOCALE_DATA[localeId][LocaleDataIndex.ExtraData] = extraData;
    }
}
/**
 * Finds the locale data for a given locale.
 *
 * @see [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 * @param {?} locale The locale code.
 * @return {?} The locale data.
 */
function findLocaleData(locale) {
    /** @type {?} */
    const normalizedLocale = normalizeLocale(locale);
    /** @type {?} */
    let match = getLocaleData(normalizedLocale);
    if (match) {
        return match;
    }
    // let's try to find a parent locale
    /** @type {?} */
    const parentLocale = normalizedLocale.split('-')[0];
    match = getLocaleData(parentLocale);
    if (match) {
        return match;
    }
    if (parentLocale === 'en') {
        return localeEn;
    }
    throw new Error(`Missing locale data for the locale "${locale}".`);
}
/**
 * Retrieves the default currency code for the given locale.
 *
 * The default is defined as the first currency which is still in use.
 *
 * @param {?} locale The code of the locale whose currency code we want.
 * @return {?} The code of the default currency for the given locale.
 *
 */
function getLocaleCurrencyCode(locale) {
    /** @type {?} */
    const data = findLocaleData(locale);
    return data[LocaleDataIndex.CurrencyCode] || null;
}
/**
 * Retrieves the plural function used by ICU expressions to determine the plural case to use
 * for a given locale.
 * @see `NgPlural` / [Internationalization (i18n) Guide](https://angular.io/guide/i18n)
 * @param {?} locale A locale code for the locale format rules to use.
 * @return {?} The plural function for the locale.
 */
function getLocalePluralCase(locale) {
    /** @type {?} */
    const data = findLocaleData(locale);
    return data[LocaleDataIndex.PluralCase];
}
/**
 * Helper function to get the given `normalizedLocale` from `LOCALE_DATA`
 * or from the global `ng.common.locale`.
 * @param {?} normalizedLocale
 * @return {?}
 */
function getLocaleData(normalizedLocale) {
    if (!(normalizedLocale in LOCALE_DATA)) {
        LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales &&
            _global.ng.common.locales[normalizedLocale];
    }
    return LOCALE_DATA[normalizedLocale];
}
/**
 * Helper function to remove all the locale data from `LOCALE_DATA`.
 * @return {?}
 */
function unregisterAllLocaleData() {
    LOCALE_DATA = {};
}
/** @enum {number} */
const LocaleDataIndex = {
    LocaleId: 0,
    DayPeriodsFormat: 1,
    DayPeriodsStandalone: 2,
    DaysFormat: 3,
    DaysStandalone: 4,
    MonthsFormat: 5,
    MonthsStandalone: 6,
    Eras: 7,
    FirstDayOfWeek: 8,
    WeekendRange: 9,
    DateFormat: 10,
    TimeFormat: 11,
    DateTimeFormat: 12,
    NumberSymbols: 13,
    NumberFormats: 14,
    CurrencyCode: 15,
    CurrencySymbol: 16,
    CurrencyName: 17,
    Currencies: 18,
    PluralCase: 19,
    ExtraData: 20,
};
LocaleDataIndex[LocaleDataIndex.LocaleId] = 'LocaleId';
LocaleDataIndex[LocaleDataIndex.DayPeriodsFormat] = 'DayPeriodsFormat';
LocaleDataIndex[LocaleDataIndex.DayPeriodsStandalone] = 'DayPeriodsStandalone';
LocaleDataIndex[LocaleDataIndex.DaysFormat] = 'DaysFormat';
LocaleDataIndex[LocaleDataIndex.DaysStandalone] = 'DaysStandalone';
LocaleDataIndex[LocaleDataIndex.MonthsFormat] = 'MonthsFormat';
LocaleDataIndex[LocaleDataIndex.MonthsStandalone] = 'MonthsStandalone';
LocaleDataIndex[LocaleDataIndex.Eras] = 'Eras';
LocaleDataIndex[LocaleDataIndex.FirstDayOfWeek] = 'FirstDayOfWeek';
LocaleDataIndex[LocaleDataIndex.WeekendRange] = 'WeekendRange';
LocaleDataIndex[LocaleDataIndex.DateFormat] = 'DateFormat';
LocaleDataIndex[LocaleDataIndex.TimeFormat] = 'TimeFormat';
LocaleDataIndex[LocaleDataIndex.DateTimeFormat] = 'DateTimeFormat';
LocaleDataIndex[LocaleDataIndex.NumberSymbols] = 'NumberSymbols';
LocaleDataIndex[LocaleDataIndex.NumberFormats] = 'NumberFormats';
LocaleDataIndex[LocaleDataIndex.CurrencyCode] = 'CurrencyCode';
LocaleDataIndex[LocaleDataIndex.CurrencySymbol] = 'CurrencySymbol';
LocaleDataIndex[LocaleDataIndex.CurrencyName] = 'CurrencyName';
LocaleDataIndex[LocaleDataIndex.Currencies] = 'Currencies';
LocaleDataIndex[LocaleDataIndex.PluralCase] = 'PluralCase';
LocaleDataIndex[LocaleDataIndex.ExtraData] = 'ExtraData';
/** @enum {number} */
const ExtraLocaleDataIndex = {
    ExtraDayPeriodFormats: 0,
    ExtraDayPeriodStandalone: 1,
    ExtraDayPeriodsRules: 2,
};
/** @enum {number} */
const CurrencyIndex = {
    Symbol: 0, SymbolNarrow: 1, NbOfDigits: 2,
};
/**
 * Returns the canonical form of a locale name - lowercase with `_` replaced with `-`.
 * @param {?} locale
 * @return {?}
 */
function normalizeLocale(locale) {
    return locale.toLowerCase().replace(/_/g, '-');
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/i18n/localization.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Returns the plural case based on the locale
 * @param {?} value
 * @param {?} locale
 * @return {?}
 */
function getPluralCase(value, locale) {
    /** @type {?} */
    const plural = getLocalePluralCase(locale)(value);
    switch (plural) {
        case 0:
            return 'zero';
        case 1:
            return 'one';
        case 2:
            return 'two';
        case 3:
            return 'few';
        case 4:
            return 'many';
        default:
            return 'other';
    }
}
/**
 * The locale id that the application is using by default (for translations and ICU expressions).
 * @type {?}
 */
const DEFAULT_LOCALE_ID = 'en-US';
/**
 * USD currency code that the application uses by default for CurrencyPipe when no
 * DEFAULT_CURRENCY_CODE is provided.
 * @type {?}
 */
const USD_CURRENCY_CODE = 'USD';

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/i18n.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const MARKER = `�`;
/** @type {?} */
const ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
/** @type {?} */
const SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
/** @type {?} */
const PH_REGEXP = /�(\/?[#*!]\d+):?\d*�/gi;
/** @type {?} */
const BINDING_REGEXP = /�(\d+):?\d*�/gi;
/** @type {?} */
const ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
/** @enum {string} */
const TagType = {
    ELEMENT: "#",
    TEMPLATE: "*",
    PROJECTION: "!",
};
// i18nPostprocess consts
/** @type {?} */
const ROOT_TEMPLATE_ID = 0;
/** @type {?} */
const PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
/** @type {?} */
const PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
/** @type {?} */
const PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
/** @type {?} */
const PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
/** @type {?} */
const PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
/** @type {?} */
const PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
/** @type {?} */
const PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
/**
 * @record
 */
function IcuExpression() { }
if (false) {}
/**
 * @record
 */
function IcuCase() { }
if (false) {}
/**
 * Breaks pattern into strings and top level {...} blocks.
 * Can be used to break a message into text and ICU expressions, or to break an ICU expression into
 * keys and cases.
 * Original code from closure library, modified for Angular.
 *
 * @param {?} pattern (sub)Pattern to be broken.
 *
 * @return {?}
 */
function extractParts(pattern) {
    if (!pattern) {
        return [];
    }
    /** @type {?} */
    let prevPos = 0;
    /** @type {?} */
    const braceStack = [];
    /** @type {?} */
    const results = [];
    /** @type {?} */
    const braces = /[{}]/g;
    // lastIndex doesn't get set to 0 so we have to.
    braces.lastIndex = 0;
    /** @type {?} */
    let match;
    while (match = braces.exec(pattern)) {
        /** @type {?} */
        const pos = match.index;
        if (match[0] == '}') {
            braceStack.pop();
            if (braceStack.length == 0) {
                // End of the block.
                /** @type {?} */
                const block = pattern.substring(prevPos, pos);
                if (ICU_BLOCK_REGEXP.test(block)) {
                    results.push(parseICUBlock(block));
                }
                else {
                    results.push(block);
                }
                prevPos = pos + 1;
            }
        }
        else {
            if (braceStack.length == 0) {
                /** @type {?} */
                const substring = pattern.substring(prevPos, pos);
                results.push(substring);
                prevPos = pos + 1;
            }
            braceStack.push('{');
        }
    }
    /** @type {?} */
    const substring = pattern.substring(prevPos);
    results.push(substring);
    return results;
}
/**
 * Parses text containing an ICU expression and produces a JSON object for it.
 * Original code from closure library, modified for Angular.
 *
 * @param {?} pattern Text containing an ICU expression that needs to be parsed.
 *
 * @return {?}
 */
function parseICUBlock(pattern) {
    /** @type {?} */
    const cases = [];
    /** @type {?} */
    const values = [];
    /** @type {?} */
    let icuType = 1 /* plural */;
    /** @type {?} */
    let mainBinding = 0;
    pattern = pattern.replace(ICU_BLOCK_REGEXP, (/**
     * @param {?} str
     * @param {?} binding
     * @param {?} type
     * @return {?}
     */
    function (str, binding, type) {
        if (type === 'select') {
            icuType = 0 /* select */;
        }
        else {
            icuType = 1 /* plural */;
        }
        mainBinding = parseInt(binding.substr(1), 10);
        return '';
    }));
    /** @type {?} */
    const parts = (/** @type {?} */ (extractParts(pattern)));
    // Looking for (key block)+ sequence. One of the keys has to be "other".
    for (let pos = 0; pos < parts.length;) {
        /** @type {?} */
        let key = parts[pos++].trim();
        if (icuType === 1 /* plural */) {
            // Key can be "=x", we just want "x"
            key = key.replace(/\s*(?:=)?(\w+)\s*/, '$1');
        }
        if (key.length) {
            cases.push(key);
        }
        /** @type {?} */
        const blocks = (/** @type {?} */ (extractParts(parts[pos++])));
        if (cases.length > values.length) {
            values.push(blocks);
        }
    }
    // TODO(ocombe): support ICU expressions in attributes, see #21615
    return { type: icuType, mainBinding: mainBinding, cases, values };
}
/**
 * Removes everything inside the sub-templates of a message.
 * @param {?} message
 * @return {?}
 */
function removeInnerTemplateTranslation(message) {
    /** @type {?} */
    let match;
    /** @type {?} */
    let res = '';
    /** @type {?} */
    let index = 0;
    /** @type {?} */
    let inTemplate = false;
    /** @type {?} */
    let tagMatched;
    while ((match = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
        if (!inTemplate) {
            res += message.substring(index, match.index + match[0].length);
            tagMatched = match[1];
            inTemplate = true;
        }
        else {
            if (match[0] === `${MARKER}/*${tagMatched}${MARKER}`) {
                index = match.index;
                inTemplate = false;
            }
        }
    }
    ngDevMode &&
        assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation "${message}"`);
    res += message.substr(index);
    return res;
}
/**
 * Extracts a part of a message and removes the rest.
 *
 * This method is used for extracting a part of the message associated with a template. A translated
 * message can span multiple templates.
 *
 * Example:
 * ```
 * <div i18n>Translate <span *ngIf>me</span>!</div>
 * ```
 *
 * @param {?} message The message to crop
 * @param {?=} subTemplateIndex Index of the sub-template to extract. If undefined it returns the
 * external template and removes all sub-templates.
 * @return {?}
 */
function getTranslationForTemplate(message, subTemplateIndex) {
    if (typeof subTemplateIndex !== 'number') {
        // We want the root template message, ignore all sub-templates
        return removeInnerTemplateTranslation(message);
    }
    else {
        // We want a specific sub-template
        /** @type {?} */
        const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;
        /** @type {?} */
        const end = message.search(new RegExp(`${MARKER}\\/\\*\\d+:${subTemplateIndex}${MARKER}`));
        return removeInnerTemplateTranslation(message.substring(start, end));
    }
}
/**
 * Generate the OpCodes to update the bindings of a string.
 *
 * @param {?} str The string containing the bindings.
 * @param {?} destinationNode Index of the destination node which will receive the binding.
 * @param {?=} attrName Name of the attribute, if the string belongs to an attribute.
 * @param {?=} sanitizeFn Sanitization function used to sanitize the string after update, if necessary.
 * @return {?}
 */
function generateBindingUpdateOpCodes(str, destinationNode, attrName, sanitizeFn = null) {
    /** @type {?} */
    const updateOpCodes = [null, null];
    // Alloc space for mask and size
    /** @type {?} */
    const textParts = str.split(BINDING_REGEXP);
    /** @type {?} */
    let mask = 0;
    for (let j = 0; j < textParts.length; j++) {
        /** @type {?} */
        const textValue = textParts[j];
        if (j & 1) {
            // Odd indexes are bindings
            /** @type {?} */
            const bindingIndex = parseInt(textValue, 10);
            updateOpCodes.push(-1 - bindingIndex);
            mask = mask | toMaskBit(bindingIndex);
        }
        else if (textValue !== '') {
            // Even indexes are text
            updateOpCodes.push(textValue);
        }
    }
    updateOpCodes.push(destinationNode << 2 /* SHIFT_REF */ |
        (attrName ? 1 /* Attr */ : 0 /* Text */));
    if (attrName) {
        updateOpCodes.push(attrName, sanitizeFn);
    }
    updateOpCodes[0] = mask;
    updateOpCodes[1] = updateOpCodes.length - 2;
    return updateOpCodes;
}
/**
 * @param {?} icuExpression
 * @param {?=} mask
 * @return {?}
 */
function getBindingMask(icuExpression, mask = 0) {
    mask = mask | toMaskBit(icuExpression.mainBinding);
    /** @type {?} */
    let match;
    for (let i = 0; i < icuExpression.values.length; i++) {
        /** @type {?} */
        const valueArr = icuExpression.values[i];
        for (let j = 0; j < valueArr.length; j++) {
            /** @type {?} */
            const value = valueArr[j];
            if (typeof value === 'string') {
                while (match = BINDING_REGEXP.exec(value)) {
                    mask = mask | toMaskBit(parseInt(match[1], 10));
                }
            }
            else {
                mask = getBindingMask((/** @type {?} */ (value)), mask);
            }
        }
    }
    return mask;
}
/** @type {?} */
const i18nIndexStack = [];
/** @type {?} */
let i18nIndexStackPointer = -1;
/**
 * Convert binding index to mask bit.
 *
 * Each index represents a single bit on the bit-mask. Because bit-mask only has 32 bits, we make
 * the 32nd bit share all masks for all bindings higher than 32. Since it is extremely rare to have
 * more than 32 bindings this will be hit very rarely. The downside of hitting this corner case is
 * that we will execute binding code more often than necessary. (penalty of performance)
 * @param {?} bindingIndex
 * @return {?}
 */
function toMaskBit(bindingIndex) {
    return 1 << Math.min(bindingIndex, 31);
}
/** @type {?} */
const parentIndexStack = [];
/**
 * Marks a block of text as translatable.
 *
 * The instructions `i18nStart` and `i18nEnd` mark the translation block in the template.
 * The translation `message` is the value which is locale specific. The translation string may
 * contain placeholders which associate inner elements and sub-templates within the translation.
 *
 * The translation `message` placeholders are:
 * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
 *   interpolated into. The placeholder `index` points to the expression binding index. An optional
 *   `block` that matches the sub-template in which it was declared.
 * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
 *   and end of DOM element that were embedded in the original translation block. The placeholder
 *   `index` points to the element index in the template instructions set. An optional `block` that
 *   matches the sub-template in which it was declared.
 * - `�!{index}(:{block})�`/`�/!{index}(:{block})�`: *Projection Placeholder*:  Marks the
 *   beginning and end of <ng-content> that was embedded in the original translation block.
 *   The placeholder `index` points to the element index in the template instructions set.
 *   An optional `block` that matches the sub-template in which it was declared.
 * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
 *   split up and translated separately in each angular template function. The `index` points to the
 *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
 *
 * \@codeGenApi
 * @param {?} index A unique index of the translation in the static block.
 * @param {?} message The translation message.
 * @param {?=} subTemplateIndex Optional sub-template index in the `message`.
 *
 * @return {?}
 */
function ɵɵi18nStart(index, message, subTemplateIndex) {
    /** @type {?} */
    const tView = getTView();
    ngDevMode && assertDefined(tView, `tView should be defined`);
    i18nIndexStack[++i18nIndexStackPointer] = index;
    // We need to delay projections until `i18nEnd`
    setDelayProjection(true);
    if (tView.firstCreatePass && tView.data[index + HEADER_OFFSET] === null) {
        i18nStartFirstPass(getLView(), tView, index, message, subTemplateIndex);
    }
}
// Count for the number of vars that will be allocated for each i18n block.
// It is global because this is used in multiple functions that include loops and recursive calls.
// This is reset to 0 when `i18nStartFirstPass` is called.
/** @type {?} */
let i18nVarsCount;
/**
 * See `i18nStart` above.
 * @param {?} lView
 * @param {?} tView
 * @param {?} index
 * @param {?} message
 * @param {?=} subTemplateIndex
 * @return {?}
 */
function i18nStartFirstPass(lView, tView, index, message, subTemplateIndex) {
    /** @type {?} */
    const startIndex = tView.blueprint.length - HEADER_OFFSET;
    i18nVarsCount = 0;
    /** @type {?} */
    const previousOrParentTNode = getPreviousOrParentTNode();
    /** @type {?} */
    const parentTNode = getIsParent() ? previousOrParentTNode : previousOrParentTNode && previousOrParentTNode.parent;
    /** @type {?} */
    let parentIndex = parentTNode && parentTNode !== lView[T_HOST] ? parentTNode.index - HEADER_OFFSET : index;
    /** @type {?} */
    let parentIndexPointer = 0;
    parentIndexStack[parentIndexPointer] = parentIndex;
    /** @type {?} */
    const createOpCodes = [];
    // If the previous node wasn't the direct parent then we have a translation without top level
    // element and we need to keep a reference of the previous element if there is one. We should also
    // keep track whether an element was a parent node or not, so that the logic that consumes
    // the generated `I18nMutateOpCode`s can leverage this information to properly set TNode state
    // (whether it's a parent or sibling).
    if (index > 0 && previousOrParentTNode !== parentTNode) {
        /** @type {?} */
        let previousTNodeIndex = previousOrParentTNode.index - HEADER_OFFSET;
        // If current TNode is a sibling node, encode it using a negative index. This information is
        // required when the `Select` action is processed (see the `readCreateOpCodes` function).
        if (!getIsParent()) {
            previousTNodeIndex = ~previousTNodeIndex;
        }
        // Create an OpCode to select the previous TNode
        createOpCodes.push(previousTNodeIndex << 3 /* SHIFT_REF */ | 0 /* Select */);
    }
    /** @type {?} */
    const updateOpCodes = [];
    /** @type {?} */
    const icuExpressions = [];
    /** @type {?} */
    const templateTranslation = getTranslationForTemplate(message, subTemplateIndex);
    /** @type {?} */
    const msgParts = replaceNgsp(templateTranslation).split(PH_REGEXP);
    for (let i = 0; i < msgParts.length; i++) {
        /** @type {?} */
        let value = msgParts[i];
        if (i & 1) {
            // Odd indexes are placeholders (elements and sub-templates)
            if (value.charAt(0) === '/') {
                // It is a closing tag
                if (value.charAt(1) === "#" /* ELEMENT */) {
                    /** @type {?} */
                    const phIndex = parseInt(value.substr(2), 10);
                    parentIndex = parentIndexStack[--parentIndexPointer];
                    createOpCodes.push(phIndex << 3 /* SHIFT_REF */ | 5 /* ElementEnd */);
                }
            }
            else {
                /** @type {?} */
                const phIndex = parseInt(value.substr(1), 10);
                /** @type {?} */
                const isElement = value.charAt(0) === "#" /* ELEMENT */;
                // The value represents a placeholder that we move to the designated index.
                // Note: positive indicies indicate that a TNode with a given index should also be marked as
                // parent while executing `Select` instruction.
                createOpCodes.push((isElement ? phIndex : ~phIndex) << 3 /* SHIFT_REF */ |
                    0 /* Select */, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);
                if (isElement) {
                    parentIndexStack[++parentIndexPointer] = parentIndex = phIndex;
                }
            }
        }
        else {
            // Even indexes are text (including bindings & ICU expressions)
            /** @type {?} */
            const parts = extractParts(value);
            for (let j = 0; j < parts.length; j++) {
                if (j & 1) {
                    // Odd indexes are ICU expressions
                    /** @type {?} */
                    const icuExpression = (/** @type {?} */ (parts[j]));
                    // Verify that ICU expression has the right shape. Translations might contain invalid
                    // constructions (while original messages were correct), so ICU parsing at runtime may not
                    // succeed (thus `icuExpression` remains a string).
                    if (typeof icuExpression !== 'object') {
                        throw new Error(`Unable to parse ICU expression in "${templateTranslation}" message.`);
                    }
                    // Create the comment node that will anchor the ICU expression
                    /** @type {?} */
                    const icuNodeIndex = startIndex + i18nVarsCount++;
                    createOpCodes.push(COMMENT_MARKER, ngDevMode ? `ICU ${icuNodeIndex}` : '', icuNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);
                    // Update codes for the ICU expression
                    /** @type {?} */
                    const mask = getBindingMask(icuExpression);
                    icuStart(icuExpressions, icuExpression, icuNodeIndex, icuNodeIndex);
                    // Since this is recursive, the last TIcu that was pushed is the one we want
                    /** @type {?} */
                    const tIcuIndex = icuExpressions.length - 1;
                    updateOpCodes.push(toMaskBit(icuExpression.mainBinding), // mask of the main binding
                    3, // skip 3 opCodes if not changed
                    -1 - icuExpression.mainBinding, icuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, tIcuIndex, mask, // mask of all the bindings of this ICU expression
                    2, // skip 2 opCodes if not changed
                    icuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, tIcuIndex);
                }
                else if (parts[j] !== '') {
                    /** @type {?} */
                    const text = (/** @type {?} */ (parts[j]));
                    // Even indexes are text (including bindings)
                    /** @type {?} */
                    const hasBinding = text.match(BINDING_REGEXP);
                    // Create text nodes
                    /** @type {?} */
                    const textNodeIndex = startIndex + i18nVarsCount++;
                    createOpCodes.push(
                    // If there is a binding, the value will be set during update
                    hasBinding ? '' : text, textNodeIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);
                    if (hasBinding) {
                        addAllToArray(generateBindingUpdateOpCodes(text, textNodeIndex), updateOpCodes);
                    }
                }
            }
        }
    }
    if (i18nVarsCount > 0) {
        allocExpando(tView, lView, i18nVarsCount);
    }
    ngDevMode &&
        attachI18nOpCodesDebug(createOpCodes, updateOpCodes, icuExpressions.length ? icuExpressions : null, lView);
    // NOTE: local var needed to properly assert the type of `TI18n`.
    /** @type {?} */
    const tI18n = {
        vars: i18nVarsCount,
        create: createOpCodes,
        update: updateOpCodes,
        icus: icuExpressions.length ? icuExpressions : null,
    };
    tView.data[index + HEADER_OFFSET] = tI18n;
}
/**
 * @param {?} tView
 * @param {?} tNode
 * @param {?} parentTNode
 * @param {?} previousTNode
 * @param {?} lView
 * @return {?}
 */
function appendI18nNode(tView, tNode, parentTNode, previousTNode, lView) {
    ngDevMode && ngDevMode.rendererMoveNode++;
    /** @type {?} */
    const nextNode = tNode.next;
    if (!previousTNode) {
        previousTNode = parentTNode;
    }
    // Re-organize node tree to put this node in the correct position.
    if (previousTNode === parentTNode && tNode !== parentTNode.child) {
        tNode.next = parentTNode.child;
        parentTNode.child = tNode;
    }
    else if (previousTNode !== parentTNode && tNode !== previousTNode.next) {
        tNode.next = previousTNode.next;
        previousTNode.next = tNode;
    }
    else {
        tNode.next = null;
    }
    if (parentTNode !== lView[T_HOST]) {
        tNode.parent = (/** @type {?} */ (parentTNode));
    }
    // If tNode was moved around, we might need to fix a broken link.
    /** @type {?} */
    let cursor = tNode.next;
    while (cursor) {
        if (cursor.next === tNode) {
            cursor.next = nextNode;
        }
        cursor = cursor.next;
    }
    // If the placeholder to append is a projection, we need to move the projected nodes instead
    if (tNode.type === 1 /* Projection */) {
        applyProjection(tView, lView, (/** @type {?} */ (tNode)));
        return tNode;
    }
    appendChild(tView, lView, getNativeByTNode(tNode, lView), tNode);
    /** @type {?} */
    const slotValue = lView[tNode.index];
    if (tNode.type !== 0 /* Container */ && isLContainer(slotValue)) {
        // Nodes that inject ViewContainerRef also have a comment node that should be moved
        appendChild(tView, lView, slotValue[NATIVE], tNode);
    }
    return tNode;
}
/**
 * Handles message string post-processing for internationalization.
 *
 * Handles message string post-processing by transforming it from intermediate
 * format (that might contain some markers that we need to replace) to the final
 * form, consumable by i18nStart instruction. Post processing steps include:
 *
 * 1. Resolve all multi-value cases (like [�*1:1��#2:1�|�#4:1�|�5�])
 * 2. Replace all ICU vars (like "VAR_PLURAL")
 * 3. Replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
 * 4. Replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�)
 *    in case multiple ICUs have the same placeholder name
 *
 * \@codeGenApi
 * @param {?} message Raw translation string for post processing
 * @param {?=} replacements Set of replacements that should be applied
 *
 * @return {?} Transformed string that can be consumed by i18nStart instruction
 *
 */
function ɵɵi18nPostprocess(message, replacements = {}) {
    /**
     * Step 1: resolve all multi-value placeholders like [�#5�|�*1:1��#2:1�|�#4:1�]
     *
     * Note: due to the way we process nested templates (BFS), multi-value placeholders are typically
     * grouped by templates, for example: [�#5�|�#6�|�#1:1�|�#3:2�] where �#5� and �#6� belong to root
     * template, �#1:1� belong to nested template with index 1 and �#1:2� - nested template with index
     * 3. However in real templates the order might be different: i.e. �#1:1� and/or �#3:2� may go in
     * front of �#6�. The post processing step restores the right order by keeping track of the
     * template id stack and looks for placeholders that belong to the currently active template.
     * @type {?}
     */
    let result = message;
    if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
        /** @type {?} */
        const matches = {};
        /** @type {?} */
        const templateIdsStack = [ROOT_TEMPLATE_ID];
        result = result.replace(PP_PLACEHOLDERS_REGEXP, (/**
         * @param {?} m
         * @param {?} phs
         * @param {?} tmpl
         * @return {?}
         */
        (m, phs, tmpl) => {
            /** @type {?} */
            const content = phs || tmpl;
            /** @type {?} */
            const placeholders = matches[content] || [];
            if (!placeholders.length) {
                content.split('|').forEach((/**
                 * @param {?} placeholder
                 * @return {?}
                 */
                (placeholder) => {
                    /** @type {?} */
                    const match = placeholder.match(PP_TEMPLATE_ID_REGEXP);
                    /** @type {?} */
                    const templateId = match ? parseInt(match[1], 10) : ROOT_TEMPLATE_ID;
                    /** @type {?} */
                    const isCloseTemplateTag = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder);
                    placeholders.push([templateId, isCloseTemplateTag, placeholder]);
                }));
                matches[content] = placeholders;
            }
            if (!placeholders.length) {
                throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);
            }
            /** @type {?} */
            const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
            /** @type {?} */
            let idx = 0;
            // find placeholder index that matches current template id
            for (let i = 0; i < placeholders.length; i++) {
                if (placeholders[i][0] === currentTemplateId) {
                    idx = i;
                    break;
                }
            }
            // update template id stack based on the current tag extracted
            const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];
            if (isCloseTemplateTag) {
                templateIdsStack.pop();
            }
            else if (currentTemplateId !== templateId) {
                templateIdsStack.push(templateId);
            }
            // remove processed tag from the list
            placeholders.splice(idx, 1);
            return placeholder;
        }));
    }
    // return current result if no replacements specified
    if (!Object.keys(replacements).length) {
        return result;
    }
    /**
     * Step 2: replace all ICU vars (like "VAR_PLURAL")
     */
    result = result.replace(PP_ICU_VARS_REGEXP, (/**
     * @param {?} match
     * @param {?} start
     * @param {?} key
     * @param {?} _type
     * @param {?} _idx
     * @param {?} end
     * @return {?}
     */
    (match, start, key, _type, _idx, end) => {
        return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match;
    }));
    /**
     * Step 3: replace all placeholders used inside ICUs in a form of {PLACEHOLDER}
     */
    result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (/**
     * @param {?} match
     * @param {?} key
     * @return {?}
     */
    (match, key) => {
        return replacements.hasOwnProperty(key) ? (/** @type {?} */ (replacements[key])) : match;
    }));
    /**
     * Step 4: replace all ICU references with corresponding values (like �ICU_EXP_ICU_1�) in case
     * multiple ICUs have the same placeholder name
     */
    result = result.replace(PP_ICUS_REGEXP, (/**
     * @param {?} match
     * @param {?} key
     * @return {?}
     */
    (match, key) => {
        if (replacements.hasOwnProperty(key)) {
            /** @type {?} */
            const list = (/** @type {?} */ (replacements[key]));
            if (!list.length) {
                throw new Error(`i18n postprocess: unmatched ICU - ${match} with key: ${key}`);
            }
            return (/** @type {?} */ (list.shift()));
        }
        return match;
    }));
    return result;
}
/**
 * Translates a translation block marked by `i18nStart` and `i18nEnd`. It inserts the text/ICU nodes
 * into the render tree, moves the placeholder nodes and removes the deleted nodes.
 *
 * \@codeGenApi
 * @return {?}
 */
function ɵɵi18nEnd() {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    ngDevMode && assertDefined(tView, `tView should be defined`);
    i18nEndFirstPass(tView, lView);
    // Stop delaying projections
    setDelayProjection(false);
}
/**
 * See `i18nEnd` above.
 * @param {?} tView
 * @param {?} lView
 * @return {?}
 */
function i18nEndFirstPass(tView, lView) {
    ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, 'i18nEnd should be called before any binding');
    /** @type {?} */
    const rootIndex = i18nIndexStack[i18nIndexStackPointer--];
    /** @type {?} */
    const tI18n = (/** @type {?} */ (tView.data[rootIndex + HEADER_OFFSET]));
    ngDevMode && assertDefined(tI18n, `You should call i18nStart before i18nEnd`);
    // Find the last node that was added before `i18nEnd`
    /** @type {?} */
    const lastCreatedNode = getPreviousOrParentTNode();
    // Read the instructions to insert/move/remove DOM elements
    /** @type {?} */
    const visitedNodes = readCreateOpCodes(rootIndex, tI18n.create, tView, lView);
    // Remove deleted nodes
    /** @type {?} */
    let index = rootIndex + 1;
    while (index <= lastCreatedNode.index - HEADER_OFFSET) {
        if (visitedNodes.indexOf(index) === -1) {
            removeNode(tView, lView, index, /* markAsDetached */ true);
        }
        // Check if an element has any local refs and skip them
        /** @type {?} */
        const tNode = getTNode(tView, index);
        if (tNode && (tNode.type === 0 /* Container */ || tNode.type === 3 /* Element */ ||
            tNode.type === 4 /* ElementContainer */) &&
            tNode.localNames !== null) {
            // Divide by 2 to get the number of local refs,
            // since they are stored as an array that also includes directive indexes,
            // i.e. ["localRef", directiveIndex, ...]
            index += tNode.localNames.length >> 1;
        }
        index++;
    }
}
/**
 * Creates and stores the dynamic TNode, and unhooks it from the tree for now.
 * @param {?} tView
 * @param {?} lView
 * @param {?} index
 * @param {?} type
 * @param {?} native
 * @param {?} name
 * @return {?}
 */
function createDynamicNodeAtIndex(tView, lView, index, type, native, name) {
    /** @type {?} */
    const previousOrParentTNode = getPreviousOrParentTNode();
    ngDevMode && assertDataInRange(lView, index + HEADER_OFFSET);
    lView[index + HEADER_OFFSET] = native;
    /** @type {?} */
    const tNode = getOrCreateTNode(tView, lView[T_HOST], index, (/** @type {?} */ (type)), name, null);
    // We are creating a dynamic node, the previous tNode might not be pointing at this node.
    // We will link ourselves into the tree later with `appendI18nNode`.
    if (previousOrParentTNode && previousOrParentTNode.next === tNode) {
        previousOrParentTNode.next = null;
    }
    return tNode;
}
/**
 * @param {?} index
 * @param {?} createOpCodes
 * @param {?} tView
 * @param {?} lView
 * @return {?}
 */
function readCreateOpCodes(index, createOpCodes, tView, lView) {
    /** @type {?} */
    const renderer = lView[RENDERER];
    /** @type {?} */
    let currentTNode = null;
    /** @type {?} */
    let previousTNode = null;
    /** @type {?} */
    const visitedNodes = [];
    for (let i = 0; i < createOpCodes.length; i++) {
        /** @type {?} */
        const opCode = createOpCodes[i];
        if (typeof opCode == 'string') {
            /** @type {?} */
            const textRNode = createTextNode(opCode, renderer);
            /** @type {?} */
            const textNodeIndex = (/** @type {?} */ (createOpCodes[++i]));
            ngDevMode && ngDevMode.rendererCreateTextNode++;
            previousTNode = currentTNode;
            currentTNode =
                createDynamicNodeAtIndex(tView, lView, textNodeIndex, 3 /* Element */, textRNode, null);
            visitedNodes.push(textNodeIndex);
            setIsNotParent();
        }
        else if (typeof opCode == 'number') {
            switch (opCode & 7 /* MASK_OPCODE */) {
                case 1 /* AppendChild */:
                    /** @type {?} */
                    const destinationNodeIndex = opCode >>> 17 /* SHIFT_PARENT */;
                    /** @type {?} */
                    let destinationTNode;
                    if (destinationNodeIndex === index) {
                        // If the destination node is `i18nStart`, we don't have a
                        // top-level node and we should use the host node instead
                        destinationTNode = (/** @type {?} */ (lView[T_HOST]));
                    }
                    else {
                        destinationTNode = getTNode(tView, destinationNodeIndex);
                    }
                    ngDevMode &&
                        assertDefined((/** @type {?} */ (currentTNode)), `You need to create or select a node before you can insert it into the DOM`);
                    previousTNode =
                        appendI18nNode(tView, (/** @type {?} */ (currentTNode)), destinationTNode, previousTNode, lView);
                    break;
                case 0 /* Select */:
                    // Negative indicies indicate that a given TNode is a sibling node, not a parent node
                    // (see `i18nStartFirstPass` for additional information).
                    /** @type {?} */
                    const isParent = opCode >= 0;
                    /** @type {?} */
                    const nodeIndex = (isParent ? opCode : ~opCode) >>> 3 /* SHIFT_REF */;
                    visitedNodes.push(nodeIndex);
                    previousTNode = currentTNode;
                    currentTNode = getTNode(tView, nodeIndex);
                    if (currentTNode) {
                        setPreviousOrParentTNode(currentTNode, isParent);
                    }
                    break;
                case 5 /* ElementEnd */:
                    /** @type {?} */
                    const elementIndex = opCode >>> 3 /* SHIFT_REF */;
                    previousTNode = currentTNode = getTNode(tView, elementIndex);
                    setPreviousOrParentTNode(currentTNode, false);
                    break;
                case 4 /* Attr */:
                    /** @type {?} */
                    const elementNodeIndex = opCode >>> 3 /* SHIFT_REF */;
                    /** @type {?} */
                    const attrName = (/** @type {?} */ (createOpCodes[++i]));
                    /** @type {?} */
                    const attrValue = (/** @type {?} */ (createOpCodes[++i]));
                    // This code is used for ICU expressions only, since we don't support
                    // directives/components in ICUs, we don't need to worry about inputs here
                    elementAttributeInternal(getTNode(tView, elementNodeIndex), lView, attrName, attrValue, null, null);
                    break;
                default:
                    throw new Error(`Unable to determine the type of mutate operation for "${opCode}"`);
            }
        }
        else {
            switch (opCode) {
                case COMMENT_MARKER:
                    /** @type {?} */
                    const commentValue = (/** @type {?} */ (createOpCodes[++i]));
                    /** @type {?} */
                    const commentNodeIndex = (/** @type {?} */ (createOpCodes[++i]));
                    ngDevMode && assertEqual(typeof commentValue, 'string', `Expected "${commentValue}" to be a comment node value`);
                    /** @type {?} */
                    const commentRNode = renderer.createComment(commentValue);
                    ngDevMode && ngDevMode.rendererCreateComment++;
                    previousTNode = currentTNode;
                    currentTNode = createDynamicNodeAtIndex(tView, lView, commentNodeIndex, 5 /* IcuContainer */, commentRNode, null);
                    visitedNodes.push(commentNodeIndex);
                    attachPatchData(commentRNode, lView);
                    ((/** @type {?} */ (currentTNode))).activeCaseIndex = null;
                    // We will add the case nodes later, during the update phase
                    setIsNotParent();
                    break;
                case ELEMENT_MARKER:
                    /** @type {?} */
                    const tagNameValue = (/** @type {?} */ (createOpCodes[++i]));
                    /** @type {?} */
                    const elementNodeIndex = (/** @type {?} */ (createOpCodes[++i]));
                    ngDevMode && assertEqual(typeof tagNameValue, 'string', `Expected "${tagNameValue}" to be an element node tag name`);
                    /** @type {?} */
                    const elementRNode = renderer.createElement(tagNameValue);
                    ngDevMode && ngDevMode.rendererCreateElement++;
                    previousTNode = currentTNode;
                    currentTNode = createDynamicNodeAtIndex(tView, lView, elementNodeIndex, 3 /* Element */, elementRNode, tagNameValue);
                    visitedNodes.push(elementNodeIndex);
                    break;
                default:
                    throw new Error(`Unable to determine the type of mutate operation for "${opCode}"`);
            }
        }
    }
    setIsNotParent();
    return visitedNodes;
}
/**
 * @param {?} updateOpCodes
 * @param {?} icus
 * @param {?} bindingsStartIndex
 * @param {?} changeMask
 * @param {?} tView
 * @param {?} lView
 * @param {?=} bypassCheckBit
 * @return {?}
 */
function readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, tView, lView, bypassCheckBit = false) {
    /** @type {?} */
    let caseCreated = false;
    for (let i = 0; i < updateOpCodes.length; i++) {
        // bit code to check if we should apply the next update
        /** @type {?} */
        const checkBit = (/** @type {?} */ (updateOpCodes[i]));
        // Number of opCodes to skip until next set of update codes
        /** @type {?} */
        const skipCodes = (/** @type {?} */ (updateOpCodes[++i]));
        if (bypassCheckBit || (checkBit & changeMask)) {
            // The value has been updated since last checked
            /** @type {?} */
            let value = '';
            for (let j = i + 1; j <= (i + skipCodes); j++) {
                /** @type {?} */
                const opCode = updateOpCodes[j];
                if (typeof opCode == 'string') {
                    value += opCode;
                }
                else if (typeof opCode == 'number') {
                    if (opCode < 0) {
                        // It's a binding index whose value is negative
                        value += renderStringify(lView[bindingsStartIndex - opCode]);
                    }
                    else {
                        /** @type {?} */
                        const nodeIndex = opCode >>> 2 /* SHIFT_REF */;
                        /** @type {?} */
                        let tIcuIndex;
                        /** @type {?} */
                        let tIcu;
                        /** @type {?} */
                        let icuTNode;
                        switch (opCode & 3 /* MASK_OPCODE */) {
                            case 1 /* Attr */:
                                /** @type {?} */
                                const propName = (/** @type {?} */ (updateOpCodes[++j]));
                                /** @type {?} */
                                const sanitizeFn = (/** @type {?} */ (updateOpCodes[++j]));
                                elementPropertyInternal(tView, getTNode(tView, nodeIndex), lView, propName, value, lView[RENDERER], sanitizeFn, false);
                                break;
                            case 0 /* Text */:
                                textBindingInternal(lView, nodeIndex, value);
                                break;
                            case 2 /* IcuSwitch */:
                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));
                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];
                                icuTNode = (/** @type {?} */ (getTNode(tView, nodeIndex)));
                                // If there is an active case, delete the old nodes
                                if (icuTNode.activeCaseIndex !== null) {
                                    /** @type {?} */
                                    const removeCodes = tIcu.remove[icuTNode.activeCaseIndex];
                                    for (let k = 0; k < removeCodes.length; k++) {
                                        /** @type {?} */
                                        const removeOpCode = (/** @type {?} */ (removeCodes[k]));
                                        switch (removeOpCode & 7 /* MASK_OPCODE */) {
                                            case 3 /* Remove */:
                                                /** @type {?} */
                                                const nodeIndex = removeOpCode >>> 3 /* SHIFT_REF */;
                                                // Remove DOM element, but do *not* mark TNode as detached, since we are
                                                // just switching ICU cases (while keeping the same TNode), so a DOM element
                                                // representing a new ICU case will be re-created.
                                                removeNode(tView, lView, nodeIndex, /* markAsDetached */ false);
                                                break;
                                            case 6 /* RemoveNestedIcu */:
                                                /** @type {?} */
                                                const nestedIcuNodeIndex = (/** @type {?} */ (removeCodes[k + 1])) >>> 3 /* SHIFT_REF */;
                                                /** @type {?} */
                                                const nestedIcuTNode = (/** @type {?} */ (getTNode(tView, nestedIcuNodeIndex)));
                                                /** @type {?} */
                                                const activeIndex = nestedIcuTNode.activeCaseIndex;
                                                if (activeIndex !== null) {
                                                    /** @type {?} */
                                                    const nestedIcuTIndex = removeOpCode >>> 3 /* SHIFT_REF */;
                                                    /** @type {?} */
                                                    const nestedTIcu = (/** @type {?} */ (icus))[nestedIcuTIndex];
                                                    addAllToArray(nestedTIcu.remove[activeIndex], removeCodes);
                                                }
                                                break;
                                        }
                                    }
                                }
                                // Update the active caseIndex
                                /** @type {?} */
                                const caseIndex = getCaseIndex(tIcu, value);
                                icuTNode.activeCaseIndex = caseIndex !== -1 ? caseIndex : null;
                                if (caseIndex > -1) {
                                    // Add the nodes for the new case
                                    readCreateOpCodes(-1, tIcu.create[caseIndex], tView, lView);
                                    caseCreated = true;
                                }
                                break;
                            case 3 /* IcuUpdate */:
                                tIcuIndex = (/** @type {?} */ (updateOpCodes[++j]));
                                tIcu = (/** @type {?} */ (icus))[tIcuIndex];
                                icuTNode = (/** @type {?} */ (getTNode(tView, nodeIndex)));
                                if (icuTNode.activeCaseIndex !== null) {
                                    readUpdateOpCodes(tIcu.update[icuTNode.activeCaseIndex], icus, bindingsStartIndex, changeMask, tView, lView, caseCreated);
                                }
                                break;
                        }
                    }
                }
            }
        }
        i += skipCodes;
    }
}
/**
 * @param {?} tView
 * @param {?} lView
 * @param {?} index
 * @param {?} markAsDetached
 * @return {?}
 */
function removeNode(tView, lView, index, markAsDetached) {
    /** @type {?} */
    const removedPhTNode = getTNode(tView, index);
    /** @type {?} */
    const removedPhRNode = getNativeByIndex(index, lView);
    if (removedPhRNode) {
        nativeRemoveNode(lView[RENDERER], removedPhRNode);
    }
    /** @type {?} */
    const slotValue = (/** @type {?} */ (load(lView, index)));
    if (isLContainer(slotValue)) {
        /** @type {?} */
        const lContainer = (/** @type {?} */ (slotValue));
        if (removedPhTNode.type !== 0 /* Container */) {
            nativeRemoveNode(lView[RENDERER], lContainer[NATIVE]);
        }
    }
    if (markAsDetached) {
        // Define this node as detached to avoid projecting it later
        removedPhTNode.flags |= 64 /* isDetached */;
    }
    ngDevMode && ngDevMode.rendererRemoveNode++;
}
/**
 *
 * Use this instruction to create a translation block that doesn't contain any placeholder.
 * It calls both {\@link i18nStart} and {\@link i18nEnd} in one instruction.
 *
 * The translation `message` is the value which is locale specific. The translation string may
 * contain placeholders which associate inner elements and sub-templates within the translation.
 *
 * The translation `message` placeholders are:
 * - `�{index}(:{block})�`: *Binding Placeholder*: Marks a location where an expression will be
 *   interpolated into. The placeholder `index` points to the expression binding index. An optional
 *   `block` that matches the sub-template in which it was declared.
 * - `�#{index}(:{block})�`/`�/#{index}(:{block})�`: *Element Placeholder*:  Marks the beginning
 *   and end of DOM element that were embedded in the original translation block. The placeholder
 *   `index` points to the element index in the template instructions set. An optional `block` that
 *   matches the sub-template in which it was declared.
 * - `�*{index}:{block}�`/`�/*{index}:{block}�`: *Sub-template Placeholder*: Sub-templates must be
 *   split up and translated separately in each angular template function. The `index` points to the
 *   `template` instruction index. A `block` that matches the sub-template in which it was declared.
 *
 * \@codeGenApi
 * @param {?} index A unique index of the translation in the static block.
 * @param {?} message The translation message.
 * @param {?=} subTemplateIndex Optional sub-template index in the `message`.
 *
 * @return {?}
 */
function ɵɵi18n(index, message, subTemplateIndex) {
    ɵɵi18nStart(index, message, subTemplateIndex);
    ɵɵi18nEnd();
}
/**
 * Marks a list of attributes as translatable.
 *
 * \@codeGenApi
 * @param {?} index A unique index in the static block
 * @param {?} values
 *
 * @return {?}
 */
function ɵɵi18nAttributes(index, values) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    ngDevMode && assertDefined(tView, `tView should be defined`);
    i18nAttributesFirstPass(lView, tView, index, values);
}
/**
 * See `i18nAttributes` above.
 * @param {?} lView
 * @param {?} tView
 * @param {?} index
 * @param {?} values
 * @return {?}
 */
function i18nAttributesFirstPass(lView, tView, index, values) {
    /** @type {?} */
    const previousElement = getPreviousOrParentTNode();
    /** @type {?} */
    const previousElementIndex = previousElement.index - HEADER_OFFSET;
    /** @type {?} */
    const updateOpCodes = [];
    for (let i = 0; i < values.length; i += 2) {
        /** @type {?} */
        const attrName = values[i];
        /** @type {?} */
        const message = values[i + 1];
        /** @type {?} */
        const parts = message.split(ICU_REGEXP);
        for (let j = 0; j < parts.length; j++) {
            /** @type {?} */
            const value = parts[j];
            if (j & 1) {
                // Odd indexes are ICU expressions
                // TODO(ocombe): support ICU expressions in attributes
                throw new Error('ICU expressions are not yet supported in attributes');
            }
            else if (value !== '') {
                // Even indexes are text (including bindings)
                /** @type {?} */
                const hasBinding = !!value.match(BINDING_REGEXP);
                if (hasBinding) {
                    if (tView.firstCreatePass && tView.data[index + HEADER_OFFSET] === null) {
                        addAllToArray(generateBindingUpdateOpCodes(value, previousElementIndex, attrName), updateOpCodes);
                    }
                }
                else {
                    /** @type {?} */
                    const tNode = getTNode(tView, previousElementIndex);
                    // Set attributes for Elements only, for other types (like ElementContainer),
                    // only set inputs below
                    if (tNode.type === 3 /* Element */) {
                        elementAttributeInternal(tNode, lView, attrName, value, null, null);
                    }
                    // Check if that attribute is a directive input
                    /** @type {?} */
                    const dataValue = tNode.inputs !== null && tNode.inputs[attrName];
                    if (dataValue) {
                        setInputsForProperty(tView, lView, dataValue, attrName, value);
                        if (ngDevMode) {
                            /** @type {?} */
                            const element = (/** @type {?} */ (getNativeByIndex(previousElementIndex, lView)));
                            setNgReflectProperties(lView, element, tNode.type, dataValue, value);
                        }
                    }
                }
            }
        }
    }
    if (tView.firstCreatePass && tView.data[index + HEADER_OFFSET] === null) {
        tView.data[index + HEADER_OFFSET] = updateOpCodes;
    }
}
/** @type {?} */
let changeMask = 0b0;
/** @type {?} */
let shiftsCounter = 0;
/**
 * Stores the values of the bindings during each update cycle in order to determine if we need to
 * update the translated nodes.
 *
 * \@codeGenApi
 * @template T
 * @param {?} value The binding's value
 * @return {?} This function returns itself so that it may be chained
 * (e.g. `i18nExp(ctx.name)(ctx.title)`)
 *
 */
function ɵɵi18nExp(value) {
    /** @type {?} */
    const lView = getLView();
    if (bindingUpdated(lView, nextBindingIndex(), value)) {
        changeMask = changeMask | (1 << shiftsCounter);
    }
    shiftsCounter++;
    return ɵɵi18nExp;
}
/**
 * Updates a translation block or an i18n attribute when the bindings have changed.
 *
 * \@codeGenApi
 * @param {?} index Index of either {\@link i18nStart} (translation block) or {\@link i18nAttributes}
 * (i18n attribute) on which it should update the content.
 *
 * @return {?}
 */
function ɵɵi18nApply(index) {
    if (shiftsCounter) {
        /** @type {?} */
        const tView = getTView();
        ngDevMode && assertDefined(tView, `tView should be defined`);
        /** @type {?} */
        const tI18n = tView.data[index + HEADER_OFFSET];
        /** @type {?} */
        let updateOpCodes;
        /** @type {?} */
        let icus = null;
        if (Array.isArray(tI18n)) {
            updateOpCodes = (/** @type {?} */ (tI18n));
        }
        else {
            updateOpCodes = ((/** @type {?} */ (tI18n))).update;
            icus = ((/** @type {?} */ (tI18n))).icus;
        }
        /** @type {?} */
        const bindingsStartIndex = getBindingIndex() - shiftsCounter - 1;
        /** @type {?} */
        const lView = getLView();
        readUpdateOpCodes(updateOpCodes, icus, bindingsStartIndex, changeMask, tView, lView);
        // Reset changeMask & maskBit to default for the next update cycle
        changeMask = 0b0;
        shiftsCounter = 0;
    }
}
/**
 * Returns the index of the current case of an ICU expression depending on the main binding value
 *
 * @param {?} icuExpression
 * @param {?} bindingValue The value of the main binding used by this ICU expression
 * @return {?}
 */
function getCaseIndex(icuExpression, bindingValue) {
    /** @type {?} */
    let index = icuExpression.cases.indexOf(bindingValue);
    if (index === -1) {
        switch (icuExpression.type) {
            case 1 /* plural */: {
                /** @type {?} */
                const resolvedCase = getPluralCase(bindingValue, getLocaleId());
                index = icuExpression.cases.indexOf(resolvedCase);
                if (index === -1 && resolvedCase !== 'other') {
                    index = icuExpression.cases.indexOf('other');
                }
                break;
            }
            case 0 /* select */: {
                index = icuExpression.cases.indexOf('other');
                break;
            }
        }
    }
    return index;
}
/**
 * Generate the OpCodes for ICU expressions.
 *
 * @param {?} tIcus
 * @param {?} icuExpression
 * @param {?} startIndex
 * @param {?} expandoStartIndex
 * @return {?}
 */
function icuStart(tIcus, icuExpression, startIndex, expandoStartIndex) {
    /** @type {?} */
    const createCodes = [];
    /** @type {?} */
    const removeCodes = [];
    /** @type {?} */
    const updateCodes = [];
    /** @type {?} */
    const vars = [];
    /** @type {?} */
    const childIcus = [];
    for (let i = 0; i < icuExpression.values.length; i++) {
        // Each value is an array of strings & other ICU expressions
        /** @type {?} */
        const valueArr = icuExpression.values[i];
        /** @type {?} */
        const nestedIcus = [];
        for (let j = 0; j < valueArr.length; j++) {
            /** @type {?} */
            const value = valueArr[j];
            if (typeof value !== 'string') {
                // It is an nested ICU expression
                /** @type {?} */
                const icuIndex = nestedIcus.push((/** @type {?} */ (value))) - 1;
                // Replace nested ICU expression by a comment node
                valueArr[j] = `<!--�${icuIndex}�-->`;
            }
        }
        /** @type {?} */
        const icuCase = parseIcuCase(valueArr.join(''), startIndex, nestedIcus, tIcus, expandoStartIndex);
        createCodes.push(icuCase.create);
        removeCodes.push(icuCase.remove);
        updateCodes.push(icuCase.update);
        vars.push(icuCase.vars);
        childIcus.push(icuCase.childIcus);
    }
    /** @type {?} */
    const tIcu = {
        type: icuExpression.type,
        vars,
        childIcus,
        cases: icuExpression.cases,
        create: createCodes,
        remove: removeCodes,
        update: updateCodes
    };
    tIcus.push(tIcu);
    // Adding the maximum possible of vars needed (based on the cases with the most vars)
    i18nVarsCount += Math.max(...vars);
}
/**
 * Transforms a string template into an HTML template and a list of instructions used to update
 * attributes or nodes that contain bindings.
 *
 * @param {?} unsafeHtml The string to parse
 * @param {?} parentIndex
 * @param {?} nestedIcus
 * @param {?} tIcus
 * @param {?} expandoStartIndex
 * @return {?}
 */
function parseIcuCase(unsafeHtml, parentIndex, nestedIcus, tIcus, expandoStartIndex) {
    /** @type {?} */
    const inertBodyHelper = new InertBodyHelper(getDocument());
    /** @type {?} */
    const inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    if (!inertBodyElement) {
        throw new Error('Unable to generate inert body element');
    }
    /** @type {?} */
    const wrapper = (/** @type {?} */ (getTemplateContent((/** @type {?} */ (inertBodyElement))))) || inertBodyElement;
    /** @type {?} */
    const opCodes = { vars: 0, childIcus: [], create: [], remove: [], update: [] };
    parseNodes(wrapper.firstChild, opCodes, parentIndex, nestedIcus, tIcus, expandoStartIndex);
    return opCodes;
}
/** @type {?} */
const NESTED_ICU = /�(\d+)�/;
/**
 * Parses a node, its children and its siblings, and generates the mutate & update OpCodes.
 *
 * @param {?} currentNode The first node to parse
 * @param {?} icuCase The data for the ICU expression case that contains those nodes
 * @param {?} parentIndex Index of the current node's parent
 * @param {?} nestedIcus Data for the nested ICU expressions that this case contains
 * @param {?} tIcus Data for all ICU expressions of the current message
 * @param {?} expandoStartIndex Expando start index for the current ICU expression
 * @return {?}
 */
function parseNodes(currentNode, icuCase, parentIndex, nestedIcus, tIcus, expandoStartIndex) {
    if (currentNode) {
        /** @type {?} */
        const nestedIcusToCreate = [];
        while (currentNode) {
            /** @type {?} */
            const nextNode = currentNode.nextSibling;
            /** @type {?} */
            const newIndex = expandoStartIndex + ++icuCase.vars;
            switch (currentNode.nodeType) {
                case Node.ELEMENT_NODE:
                    /** @type {?} */
                    const element = (/** @type {?} */ (currentNode));
                    /** @type {?} */
                    const tagName = element.tagName.toLowerCase();
                    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
                        // This isn't a valid element, we won't create an element for it
                        icuCase.vars--;
                    }
                    else {
                        icuCase.create.push(ELEMENT_MARKER, tagName, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);
                        /** @type {?} */
                        const elAttrs = element.attributes;
                        for (let i = 0; i < elAttrs.length; i++) {
                            /** @type {?} */
                            const attr = (/** @type {?} */ (elAttrs.item(i)));
                            /** @type {?} */
                            const lowerAttrName = attr.name.toLowerCase();
                            /** @type {?} */
                            const hasBinding = !!attr.value.match(BINDING_REGEXP);
                            // we assume the input string is safe, unless it's using a binding
                            if (hasBinding) {
                                if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                                    if (URI_ATTRS[lowerAttrName]) {
                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, _sanitizeUrl), icuCase.update);
                                    }
                                    else if (SRCSET_ATTRS[lowerAttrName]) {
                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name, sanitizeSrcset), icuCase.update);
                                    }
                                    else {
                                        addAllToArray(generateBindingUpdateOpCodes(attr.value, newIndex, attr.name), icuCase.update);
                                    }
                                }
                                else {
                                    ngDevMode &&
                                        console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see http://g.co/ng/security#xss)`);
                                }
                            }
                            else {
                                icuCase.create.push(newIndex << 3 /* SHIFT_REF */ | 4 /* Attr */, attr.name, attr.value);
                            }
                        }
                        // Parse the children of this node (if any)
                        parseNodes(currentNode.firstChild, icuCase, newIndex, nestedIcus, tIcus, expandoStartIndex);
                        // Remove the parent node after the children
                        icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);
                    }
                    break;
                case Node.TEXT_NODE:
                    /** @type {?} */
                    const value = currentNode.textContent || '';
                    /** @type {?} */
                    const hasBinding = value.match(BINDING_REGEXP);
                    icuCase.create.push(hasBinding ? '' : value, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);
                    icuCase.remove.push(newIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);
                    if (hasBinding) {
                        addAllToArray(generateBindingUpdateOpCodes(value, newIndex), icuCase.update);
                    }
                    break;
                case Node.COMMENT_NODE:
                    // Check if the comment node is a placeholder for a nested ICU
                    /** @type {?} */
                    const match = NESTED_ICU.exec(currentNode.textContent || '');
                    if (match) {
                        /** @type {?} */
                        const nestedIcuIndex = parseInt(match[1], 10);
                        /** @type {?} */
                        const newLocal = ngDevMode ? `nested ICU ${nestedIcuIndex}` : '';
                        // Create the comment node that will anchor the ICU expression
                        icuCase.create.push(COMMENT_MARKER, newLocal, newIndex, parentIndex << 17 /* SHIFT_PARENT */ | 1 /* AppendChild */);
                        /** @type {?} */
                        const nestedIcu = nestedIcus[nestedIcuIndex];
                        nestedIcusToCreate.push([nestedIcu, newIndex]);
                    }
                    else {
                        // We do not handle any other type of comment
                        icuCase.vars--;
                    }
                    break;
                default:
                    // We do not handle any other type of element
                    icuCase.vars--;
            }
            currentNode = (/** @type {?} */ (nextNode));
        }
        for (let i = 0; i < nestedIcusToCreate.length; i++) {
            /** @type {?} */
            const nestedIcu = nestedIcusToCreate[i][0];
            /** @type {?} */
            const nestedIcuNodeIndex = nestedIcusToCreate[i][1];
            icuStart(tIcus, nestedIcu, nestedIcuNodeIndex, expandoStartIndex + icuCase.vars);
            // Since this is recursive, the last TIcu that was pushed is the one we want
            /** @type {?} */
            const nestTIcuIndex = tIcus.length - 1;
            icuCase.vars += Math.max(...tIcus[nestTIcuIndex].vars);
            icuCase.childIcus.push(nestTIcuIndex);
            /** @type {?} */
            const mask = getBindingMask(nestedIcu);
            icuCase.update.push(toMaskBit(nestedIcu.mainBinding), // mask of the main binding
            3, // skip 3 opCodes if not changed
            -1 - nestedIcu.mainBinding, nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 2 /* IcuSwitch */, nestTIcuIndex, mask, // mask of all the bindings of this ICU expression
            2, // skip 2 opCodes if not changed
            nestedIcuNodeIndex << 2 /* SHIFT_REF */ | 3 /* IcuUpdate */, nestTIcuIndex);
            icuCase.remove.push(nestTIcuIndex << 3 /* SHIFT_REF */ | 6 /* RemoveNestedIcu */, nestedIcuNodeIndex << 3 /* SHIFT_REF */ | 3 /* Remove */);
        }
    }
}
/**
 * Angular Dart introduced &ngsp; as a placeholder for non-removable space, see:
 * https://github.com/dart-lang/angular/blob/0bb611387d29d65b5af7f9d2515ab571fd3fbee4/_tests/test/compiler/preserve_whitespace_test.dart#L25-L32
 * In Angular Dart &ngsp; is converted to the 0xE500 PUA (Private Use Areas) unicode character
 * and later on replaced by a space. We are re-implementing the same idea here, since translations
 * might contain this special character.
 * @type {?}
 */
const NGSP_UNICODE_REGEXP = /\uE500/g;
/**
 * @param {?} value
 * @return {?}
 */
function replaceNgsp(value) {
    return value.replace(NGSP_UNICODE_REGEXP, ' ');
}
/**
 * The locale id that the application is currently using (for translations and ICU expressions).
 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
 * but is now defined as a global value.
 * @type {?}
 */
let LOCALE_ID = DEFAULT_LOCALE_ID;
/**
 * Sets the locale id that will be used for translations and ICU expressions.
 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
 * but is now defined as a global value.
 *
 * @param {?} localeId
 * @return {?}
 */
function setLocaleId(localeId) {
    assertDefined(localeId, `Expected localeId to be defined`);
    if (typeof localeId === 'string') {
        LOCALE_ID = localeId.toLowerCase().replace(/_/g, '-');
    }
}
/**
 * Gets the locale id that will be used for translations and ICU expressions.
 * This is the ivy version of `LOCALE_ID` that was defined as an injection token for the view engine
 * but is now defined as a global value.
 * @return {?}
 */
function getLocaleId() {
    return LOCALE_ID;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/ng_module_factory_registration.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Map of module-id to the corresponding NgModule.
 * - In pre Ivy we track NgModuleFactory,
 * - In post Ivy we track the NgModuleType
 * @type {?}
 */
const modules = new Map();
/**
 * Registers a loaded module. Should only be called from generated NgModuleFactory code.
 * \@publicApi
 * @param {?} id
 * @param {?} factory
 * @return {?}
 */
function registerModuleFactory(id, factory) {
    /** @type {?} */
    const existing = (/** @type {?} */ (modules.get(id)));
    assertSameOrNotExisting(id, existing && existing.moduleType, factory.moduleType);
    modules.set(id, factory);
}
/**
 * @param {?} id
 * @param {?} type
 * @param {?} incoming
 * @return {?}
 */
function assertSameOrNotExisting(id, type, incoming) {
    if (type && type !== incoming) {
        throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);
    }
}
/**
 * @param {?} ngModuleType
 * @return {?}
 */
function registerNgModuleType(ngModuleType) {
    if (ngModuleType.ɵmod.id !== null) {
        /** @type {?} */
        const id = ngModuleType.ɵmod.id;
        /** @type {?} */
        const existing = (/** @type {?} */ (modules.get(id)));
        assertSameOrNotExisting(id, existing, ngModuleType);
        modules.set(id, ngModuleType);
    }
    /** @type {?} */
    let imports = ngModuleType.ɵmod.imports;
    if (imports instanceof Function) {
        imports = imports();
    }
    if (imports) {
        imports.forEach((/**
         * @param {?} i
         * @return {?}
         */
        i => registerNgModuleType((/** @type {?} */ (i)))));
    }
}
/**
 * @return {?}
 */
function clearModulesForTest() {
    modules.clear();
}
/**
 * @param {?} id
 * @return {?}
 */
function getRegisteredNgModuleType(id) {
    return modules.get(id) || autoRegisterModuleById[id];
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/ng_module_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 * @template T
 */
function NgModuleType() { }
if (false) {}
/**
 * @template T
 */
class NgModuleRef$1 extends NgModuleRef {
    /**
     * @param {?} ngModuleType
     * @param {?} _parent
     */
    constructor(ngModuleType, _parent) {
        super();
        this._parent = _parent;
        // tslint:disable-next-line:require-internal-with-underscore
        this._bootstrapComponents = [];
        this.injector = this;
        this.destroyCbs = [];
        // When bootstrapping a module we have a dependency graph that looks like this:
        // ApplicationRef -> ComponentFactoryResolver -> NgModuleRef. The problem is that if the
        // module being resolved tries to inject the ComponentFactoryResolver, it'll create a
        // circular dependency which will result in a runtime error, because the injector doesn't
        // exist yet. We work around the issue by creating the ComponentFactoryResolver ourselves
        // and providing it, rather than letting the injector resolve it.
        this.componentFactoryResolver = new ComponentFactoryResolver$1(this);
        /** @type {?} */
        const ngModuleDef = getNgModuleDef(ngModuleType);
        ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);
        /** @type {?} */
        const ngLocaleIdDef = getNgLocaleIdDef(ngModuleType);
        ngLocaleIdDef && setLocaleId(ngLocaleIdDef);
        this._bootstrapComponents = maybeUnwrapFn((/** @type {?} */ (ngModuleDef)).bootstrap);
        this._r3Injector = (/** @type {?} */ (createInjectorWithoutInjectorInstances(ngModuleType, _parent, [
            { provide: NgModuleRef, useValue: this },
            { provide: ComponentFactoryResolver, useValue: this.componentFactoryResolver }
        ], stringify(ngModuleType))));
        // We need to resolve the injector types separately from the injector creation, because
        // the module might be trying to use this ref in its contructor for DI which will cause a
        // circular error that will eventually error out, because the injector isn't created yet.
        this._r3Injector._resolveInjectorDefTypes();
        this.instance = this.get(ngModuleType);
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @param {?=} injectFlags
     * @return {?}
     */
    get(token, notFoundValue = Injector.THROW_IF_NOT_FOUND, injectFlags = InjectFlags.Default) {
        if (token === Injector || token === NgModuleRef || token === INJECTOR) {
            return this;
        }
        return this._r3Injector.get(token, notFoundValue, injectFlags);
    }
    /**
     * @return {?}
     */
    destroy() {
        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
        /** @type {?} */
        const injector = this._r3Injector;
        !injector.destroyed && injector.destroy();
        (/** @type {?} */ (this.destroyCbs)).forEach((/**
         * @param {?} fn
         * @return {?}
         */
        fn => fn()));
        this.destroyCbs = null;
    }
    /**
     * @param {?} callback
     * @return {?}
     */
    onDestroy(callback) {
        ngDevMode && assertDefined(this.destroyCbs, 'NgModule already destroyed');
        (/** @type {?} */ (this.destroyCbs)).push(callback);
    }
}
if (false) {}
/**
 * @template T
 */
class NgModuleFactory$1 extends NgModuleFactory {
    /**
     * @param {?} moduleType
     */
    constructor(moduleType) {
        super();
        this.moduleType = moduleType;
        /** @type {?} */
        const ngModuleDef = getNgModuleDef(moduleType);
        if (ngModuleDef !== null) {
            // Register the NgModule with Angular's module registry. The location (and hence timing) of
            // this call is critical to ensure this works correctly (modules get registered when expected)
            // without bloating bundles (modules are registered when otherwise not referenced).
            //
            // In View Engine, registration occurs in the .ngfactory.js file as a side effect. This has
            // several practical consequences:
            //
            // - If an .ngfactory file is not imported from, the module won't be registered (and can be
            //   tree shaken).
            // - If an .ngfactory file is imported from, the module will be registered even if an instance
            //   is not actually created (via `create` below).
            // - Since an .ngfactory file in View Engine references the .ngfactory files of the NgModule's
            //   imports,
            //
            // In Ivy, things are a bit different. .ngfactory files still exist for compatibility, but are
            // not a required API to use - there are other ways to obtain an NgModuleFactory for a given
            // NgModule. Thus, relying on a side effect in the .ngfactory file is not sufficient. Instead,
            // the side effect of registration is added here, in the constructor of NgModuleFactory,
            // ensuring no matter how a factory is created, the module is registered correctly.
            //
            // An alternative would be to include the registration side effect inline following the actual
            // NgModule definition. This also has the correct timing, but breaks tree-shaking - modules
            // will be registered and retained even if they're otherwise never referenced.
            registerNgModuleType((/** @type {?} */ (moduleType)));
        }
    }
    /**
     * @param {?} parentInjector
     * @return {?}
     */
    create(parentInjector) {
        return new NgModuleRef$1(this.moduleType, parentInjector);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/metadata.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function TypeWithMetadata() { }
if (false) {}
/**
 * Adds decorator, constructor, and property metadata to a given type via static metadata fields
 * on the type.
 *
 * These metadata fields can later be read with Angular's `ReflectionCapabilities` API.
 *
 * Calls to `setClassMetadata` can be marked as pure, resulting in the metadata assignments being
 * tree-shaken away during production builds.
 * @param {?} type
 * @param {?} decorators
 * @param {?} ctorParameters
 * @param {?} propDecorators
 * @return {?}
 */
function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
    return (/** @type {?} */ (noSideEffects((/**
     * @return {?}
     */
    () => {
        /** @type {?} */
        const clazz = (/** @type {?} */ (type));
        // We determine whether a class has its own metadata by taking the metadata from the parent
        // constructor and checking whether it's the same as the subclass metadata below. We can't use
        // `hasOwnProperty` here because it doesn't work correctly in IE10 for static fields that are
        // defined by TS. See https://github.com/angular/angular/pull/28439#issuecomment-459349218.
        /** @type {?} */
        const parentPrototype = clazz.prototype ? Object.getPrototypeOf(clazz.prototype) : null;
        /** @type {?} */
        const parentConstructor = parentPrototype && parentPrototype.constructor;
        if (decorators !== null) {
            if (clazz.decorators !== undefined &&
                (!parentConstructor || parentConstructor.decorators !== clazz.decorators)) {
                clazz.decorators.push(...decorators);
            }
            else {
                clazz.decorators = decorators;
            }
        }
        if (ctorParameters !== null) {
            // Rather than merging, clobber the existing parameters. If other projects exist which use
            // tsickle-style annotations and reflect over them in the same way, this could cause issues,
            // but that is vanishingly unlikely.
            clazz.ctorParameters = ctorParameters;
        }
        if (propDecorators !== null) {
            // The property decorator objects are merged as it is possible different fields have different
            // decorator types. Decorators on individual fields are not merged, as it's also incredibly
            // unlikely that a field will be decorated both with an Angular decorator and a non-Angular
            // decorator that's also been downleveled.
            if (clazz.propDecorators !== undefined &&
                (!parentConstructor || parentConstructor.propDecorators !== clazz.propDecorators)) {
                clazz.propDecorators = Object.assign(Object.assign({}, clazz.propDecorators), propDecorators);
            }
            else {
                clazz.propDecorators = propDecorators;
            }
        }
    }))));
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/pure_function.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Bindings for pure functions are stored after regular bindings.
 *
 * |-------decls------|---------vars---------|                 |----- hostVars (dir1) ------|
 * ------------------------------------------------------------------------------------------
 * | nodes/refs/pipes | bindings | fn slots  | injector | dir1 | host bindings | host slots |
 * ------------------------------------------------------------------------------------------
 *                    ^                      ^
 *      TView.bindingStartIndex      TView.expandoStartIndex
 *
 * Pure function instructions are given an offset from the binding root. Adding the offset to the
 * binding root gives the first index where the bindings are stored. In component views, the binding
 * root is the bindingStartIndex. In host bindings, the binding root is the expandoStartIndex +
 * any directive instances + any hostVars in directives evaluated before it.
 *
 * See VIEW_DATA.md for more information about host binding resolution.
 */
/**
 * If the value hasn't been saved, calls the pure function to store and return the
 * value. If it has been saved, returns the saved value.
 *
 * \@codeGenApi
 * @template T
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn Function that returns a value
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} value
 *
 */
function ɵɵpureFunction0(slotOffset, pureFn, thisArg) {
    /** @type {?} */
    const bindingIndex = getBindingRoot() + slotOffset;
    /** @type {?} */
    const lView = getLView();
    return lView[bindingIndex] === NO_CHANGE ?
        updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) :
        getBinding(lView, bindingIndex);
}
/**
 * If the value of the provided exp has changed, calls the pure function to return
 * an updated value. Or if the value has not changed, returns cached value.
 *
 * \@codeGenApi
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn Function that returns an updated value
 * @param {?} exp Updated expression value
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function ɵɵpureFunction1(slotOffset, pureFn, exp, thisArg) {
    return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * \@codeGenApi
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function ɵɵpureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
    return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * \@codeGenApi
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function ɵɵpureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
    return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * \@codeGenApi
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @param {?} exp4
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function ɵɵpureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
    return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * \@codeGenApi
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @param {?} exp4
 * @param {?} exp5
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function ɵɵpureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
    /** @type {?} */
    const bindingIndex = getBindingRoot() + slotOffset;
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
    return bindingUpdated(lView, bindingIndex + 4, exp5) || different ?
        updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) :
            pureFn(exp1, exp2, exp3, exp4, exp5)) :
        getBinding(lView, bindingIndex + 5);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * \@codeGenApi
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @param {?} exp4
 * @param {?} exp5
 * @param {?} exp6
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function ɵɵpureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
    /** @type {?} */
    const bindingIndex = getBindingRoot() + slotOffset;
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
    return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ?
        updateBinding(lView, bindingIndex + 6, thisArg ?
            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) :
            pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) :
        getBinding(lView, bindingIndex + 6);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * \@codeGenApi
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @param {?} exp4
 * @param {?} exp5
 * @param {?} exp6
 * @param {?} exp7
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function ɵɵpureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
    /** @type {?} */
    const bindingIndex = getBindingRoot() + slotOffset;
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
    return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ?
        updateBinding(lView, bindingIndex + 7, thisArg ?
            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) :
            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) :
        getBinding(lView, bindingIndex + 7);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * \@codeGenApi
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @param {?} exp4
 * @param {?} exp5
 * @param {?} exp6
 * @param {?} exp7
 * @param {?} exp8
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function ɵɵpureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
    /** @type {?} */
    const bindingIndex = getBindingRoot() + slotOffset;
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
    return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ?
        updateBinding(lView, bindingIndex + 8, thisArg ?
            pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) :
            pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) :
        getBinding(lView, bindingIndex + 8);
}
/**
 * pureFunction instruction that can support any number of bindings.
 *
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * \@codeGenApi
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn A pure function that takes binding values and builds an object or array
 * containing those values.
 * @param {?} exps An array of binding values
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function ɵɵpureFunctionV(slotOffset, pureFn, exps, thisArg) {
    return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
}
/**
 * Results of a pure function invocation are stored in LView in a dedicated slot that is initialized
 * to NO_CHANGE. In rare situations a pure pipe might throw an exception on the very first
 * invocation and not produce any valid results. In this case LView would keep holding the NO_CHANGE
 * value. The NO_CHANGE is not something that we can use in expressions / bindings thus we convert
 * it to `undefined`.
 * @param {?} lView
 * @param {?} returnValueIndex
 * @return {?}
 */
function getPureFunctionReturnValue(lView, returnValueIndex) {
    ngDevMode && assertDataInRange(lView, returnValueIndex);
    /** @type {?} */
    const lastReturnValue = lView[returnValueIndex];
    return lastReturnValue === NO_CHANGE ? undefined : lastReturnValue;
}
/**
 * If the value of the provided exp has changed, calls the pure function to return
 * an updated value. Or if the value has not changed, returns cached value.
 *
 * @param {?} lView LView in which the function is being executed.
 * @param {?} bindingRoot Binding root index.
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn Function that returns an updated value
 * @param {?} exp Updated expression value
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 */
function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
    /** @type {?} */
    const bindingIndex = bindingRoot + slotOffset;
    return bindingUpdated(lView, bindingIndex, exp) ?
        updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) :
        getPureFunctionReturnValue(lView, bindingIndex + 1);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param {?} lView LView in which the function is being executed.
 * @param {?} bindingRoot Binding root index.
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 */
function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
    /** @type {?} */
    const bindingIndex = bindingRoot + slotOffset;
    return bindingUpdated2(lView, bindingIndex, exp1, exp2) ?
        updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) :
        getPureFunctionReturnValue(lView, bindingIndex + 2);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param {?} lView LView in which the function is being executed.
 * @param {?} bindingRoot Binding root index.
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 */
function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
    /** @type {?} */
    const bindingIndex = bindingRoot + slotOffset;
    return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ?
        updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) :
        getPureFunctionReturnValue(lView, bindingIndex + 3);
}
/**
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param {?} lView LView in which the function is being executed.
 * @param {?} bindingRoot Binding root index.
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn
 * @param {?} exp1
 * @param {?} exp2
 * @param {?} exp3
 * @param {?} exp4
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 *
 */
function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
    /** @type {?} */
    const bindingIndex = bindingRoot + slotOffset;
    return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ?
        updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) :
        getPureFunctionReturnValue(lView, bindingIndex + 4);
}
/**
 * pureFunction instruction that can support any number of bindings.
 *
 * If the value of any provided exp has changed, calls the pure function to return
 * an updated value. Or if no values have changed, returns cached value.
 *
 * @param {?} lView LView in which the function is being executed.
 * @param {?} bindingRoot Binding root index.
 * @param {?} slotOffset the offset from binding root to the reserved slot
 * @param {?} pureFn A pure function that takes binding values and builds an object or array
 * containing those values.
 * @param {?} exps An array of binding values
 * @param {?=} thisArg Optional calling context of pureFn
 * @return {?} Updated or cached value
 */
function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
    /** @type {?} */
    let bindingIndex = bindingRoot + slotOffset;
    /** @type {?} */
    let different = false;
    for (let i = 0; i < exps.length; i++) {
        bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
    }
    return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) :
        getPureFunctionReturnValue(lView, bindingIndex);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Create a pipe.
 *
 * \@codeGenApi
 * @param {?} index Pipe index where the pipe will be stored.
 * @param {?} pipeName The name of the pipe
 * @return {?} T the instance of the pipe.
 *
 */
function ɵɵpipe(index, pipeName) {
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    let pipeDef;
    /** @type {?} */
    const adjustedIndex = index + HEADER_OFFSET;
    if (tView.firstCreatePass) {
        pipeDef = getPipeDef$1(pipeName, tView.pipeRegistry);
        tView.data[adjustedIndex] = pipeDef;
        if (pipeDef.onDestroy) {
            (tView.destroyHooks || (tView.destroyHooks = [])).push(adjustedIndex, pipeDef.onDestroy);
        }
    }
    else {
        pipeDef = (/** @type {?} */ (tView.data[adjustedIndex]));
    }
    /** @type {?} */
    const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
    /** @type {?} */
    const previousInjectImplementation = setInjectImplementation(ɵɵdirectiveInject);
    /** @type {?} */
    const pipeInstance = pipeFactory();
    setInjectImplementation(previousInjectImplementation);
    store(tView, getLView(), index, pipeInstance);
    return pipeInstance;
}
/**
 * Searches the pipe registry for a pipe with the given name. If one is found,
 * returns the pipe. Otherwise, an error is thrown because the pipe cannot be resolved.
 *
 * @param {?} name Name of pipe to resolve
 * @param {?} registry Full list of available pipes
 * @return {?} Matching PipeDef
 */
function getPipeDef$1(name, registry) {
    if (registry) {
        for (let i = registry.length - 1; i >= 0; i--) {
            /** @type {?} */
            const pipeDef = registry[i];
            if (name === pipeDef.name) {
                return pipeDef;
            }
        }
    }
    throw new Error(`The pipe '${name}' could not be found!`);
}
/**
 * Invokes a pipe with 1 arguments.
 *
 * This instruction acts as a guard to {\@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * \@codeGenApi
 * @param {?} index Pipe index where the pipe was stored on creation.
 * @param {?} slotOffset the offset in the reserved slot space
 * @param {?} v1 1st argument to {\@link PipeTransform#transform}.
 *
 * @return {?}
 */
function ɵɵpipeBind1(index, slotOffset, v1) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const pipeInstance = load(lView, index);
    return unwrapValue$1(lView, isPure(lView, index) ?
        pureFunction1Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, pipeInstance) :
        pipeInstance.transform(v1));
}
/**
 * Invokes a pipe with 2 arguments.
 *
 * This instruction acts as a guard to {\@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * \@codeGenApi
 * @param {?} index Pipe index where the pipe was stored on creation.
 * @param {?} slotOffset the offset in the reserved slot space
 * @param {?} v1 1st argument to {\@link PipeTransform#transform}.
 * @param {?} v2 2nd argument to {\@link PipeTransform#transform}.
 *
 * @return {?}
 */
function ɵɵpipeBind2(index, slotOffset, v1, v2) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const pipeInstance = load(lView, index);
    return unwrapValue$1(lView, isPure(lView, index) ?
        pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) :
        pipeInstance.transform(v1, v2));
}
/**
 * Invokes a pipe with 3 arguments.
 *
 * This instruction acts as a guard to {\@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * \@codeGenApi
 * @param {?} index Pipe index where the pipe was stored on creation.
 * @param {?} slotOffset the offset in the reserved slot space
 * @param {?} v1 1st argument to {\@link PipeTransform#transform}.
 * @param {?} v2 2nd argument to {\@link PipeTransform#transform}.
 * @param {?} v3 4rd argument to {\@link PipeTransform#transform}.
 *
 * @return {?}
 */
function ɵɵpipeBind3(index, slotOffset, v1, v2, v3) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const pipeInstance = load(lView, index);
    return unwrapValue$1(lView, isPure(lView, index) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) :
        pipeInstance.transform(v1, v2, v3));
}
/**
 * Invokes a pipe with 4 arguments.
 *
 * This instruction acts as a guard to {\@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * \@codeGenApi
 * @param {?} index Pipe index where the pipe was stored on creation.
 * @param {?} slotOffset the offset in the reserved slot space
 * @param {?} v1 1st argument to {\@link PipeTransform#transform}.
 * @param {?} v2 2nd argument to {\@link PipeTransform#transform}.
 * @param {?} v3 3rd argument to {\@link PipeTransform#transform}.
 * @param {?} v4 4th argument to {\@link PipeTransform#transform}.
 *
 * @return {?}
 */
function ɵɵpipeBind4(index, slotOffset, v1, v2, v3, v4) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const pipeInstance = load(lView, index);
    return unwrapValue$1(lView, isPure(lView, index) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) :
        pipeInstance.transform(v1, v2, v3, v4));
}
/**
 * Invokes a pipe with variable number of arguments.
 *
 * This instruction acts as a guard to {\@link PipeTransform#transform} invoking
 * the pipe only when an input to the pipe changes.
 *
 * \@codeGenApi
 * @param {?} index Pipe index where the pipe was stored on creation.
 * @param {?} slotOffset the offset in the reserved slot space
 * @param {?} values Array of arguments to pass to {\@link PipeTransform#transform} method.
 *
 * @return {?}
 */
function ɵɵpipeBindV(index, slotOffset, values) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const pipeInstance = load(lView, index);
    return unwrapValue$1(lView, isPure(lView, index) ?
        pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) :
        pipeInstance.transform.apply(pipeInstance, values));
}
/**
 * @param {?} lView
 * @param {?} index
 * @return {?}
 */
function isPure(lView, index) {
    return ((/** @type {?} */ (lView[TVIEW].data[index + HEADER_OFFSET]))).pure;
}
/**
 * Unwrap the output of a pipe transformation.
 * In order to trick change detection into considering that the new value is always different from
 * the old one, the old value is overwritten by NO_CHANGE.
 *
 * @param {?} lView
 * @param {?} newValue the pipe transformation output.
 * @return {?}
 */
function unwrapValue$1(lView, newValue) {
    if (WrappedValue.isWrapped(newValue)) {
        newValue = WrappedValue.unwrap(newValue);
        // The NO_CHANGE value needs to be written at the index where the impacted binding value is
        // stored
        /** @type {?} */
        const bindingToInvalidateIdx = getBindingIndex();
        lView[bindingToInvalidateIdx] = NO_CHANGE;
    }
    return newValue;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/event_emitter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Use in components with the `\@Output` directive to emit custom events
 * synchronously or asynchronously, and register handlers for those events
 * by subscribing to an instance.
 *
 * \@usageNotes
 *
 * Extends
 * [RxJS `Subject`](https://rxjs.dev/api/index/class/Subject)
 * for Angular by adding the `emit()` method.
 *
 * In the following example, a component defines two output properties
 * that create event emitters. When the title is clicked, the emitter
 * emits an open or close event to toggle the current visibility state.
 *
 * ```html
 * \@Component({
 *   selector: 'zippy',
 *   template: `
 *   <div class="zippy">
 *     <div (click)="toggle()">Toggle</div>
 *     <div [hidden]="!visible">
 *       <ng-content></ng-content>
 *     </div>
 *  </div>`})
 * export class Zippy {
 *   visible: boolean = true;
 * \@Output() open: EventEmitter<any> = new EventEmitter();
 * \@Output() close: EventEmitter<any> = new EventEmitter();
 *
 *   toggle() {
 *     this.visible = !this.visible;
 *     if (this.visible) {
 *       this.open.emit(null);
 *     } else {
 *       this.close.emit(null);
 *     }
 *   }
 * }
 * ```
 *
 * Access the event object with the `$event` argument passed to the output event
 * handler:
 *
 * ```html
 * <zippy (open)="onOpen($event)" (close)="onClose($event)"></zippy>
 * ```
 *
 * @see [Observables in Angular](guide/observables-in-angular)
 * \@publicApi
 * @template T
 */
class EventEmitter extends rxjs__WEBPACK_IMPORTED_MODULE_0__["Subject"] {
    // tslint:disable-line
    /**
     * Creates an instance of this class that can
     * deliver events synchronously or asynchronously.
     *
     * @param {?=} isAsync When true, deliver events asynchronously.
     *
     */
    constructor(isAsync = false) {
        super();
        this.__isAsync = isAsync;
    }
    /**
     * Emits an event containing a given value.
     * @param {?=} value The value to emit.
     * @return {?}
     */
    emit(value) { super.next(value); }
    /**
     * Registers handlers for events emitted by this instance.
     * @param {?=} generatorOrNext When supplied, a custom handler for emitted events.
     * @param {?=} error When supplied, a custom handler for an error notification
     * from this emitter.
     * @param {?=} complete When supplied, a custom handler for a completion
     * notification from this emitter.
     * @return {?}
     */
    subscribe(generatorOrNext, error, complete) {
        /** @type {?} */
        let schedulerFn;
        /** @type {?} */
        let errorFn = (/**
         * @param {?} err
         * @return {?}
         */
        (err) => null);
        /** @type {?} */
        let completeFn = (/**
         * @return {?}
         */
        () => null);
        if (generatorOrNext && typeof generatorOrNext === 'object') {
            schedulerFn = this.__isAsync ? (/**
             * @param {?} value
             * @return {?}
             */
            (value) => {
                setTimeout((/**
                 * @return {?}
                 */
                () => generatorOrNext.next(value)));
            }) : (/**
             * @param {?} value
             * @return {?}
             */
            (value) => { generatorOrNext.next(value); });
            if (generatorOrNext.error) {
                errorFn = this.__isAsync ? (/**
                 * @param {?} err
                 * @return {?}
                 */
                (err) => { setTimeout((/**
                 * @return {?}
                 */
                () => generatorOrNext.error(err))); }) :
                    (/**
                     * @param {?} err
                     * @return {?}
                     */
                    (err) => { generatorOrNext.error(err); });
            }
            if (generatorOrNext.complete) {
                completeFn = this.__isAsync ? (/**
                 * @return {?}
                 */
                () => { setTimeout((/**
                 * @return {?}
                 */
                () => generatorOrNext.complete())); }) :
                    (/**
                     * @return {?}
                     */
                    () => { generatorOrNext.complete(); });
            }
        }
        else {
            schedulerFn = this.__isAsync ? (/**
             * @param {?} value
             * @return {?}
             */
            (value) => { setTimeout((/**
             * @return {?}
             */
            () => generatorOrNext(value))); }) :
                (/**
                 * @param {?} value
                 * @return {?}
                 */
                (value) => { generatorOrNext(value); });
            if (error) {
                errorFn =
                    this.__isAsync ? (/**
                     * @param {?} err
                     * @return {?}
                     */
                    (err) => { setTimeout((/**
                     * @return {?}
                     */
                    () => error(err))); }) : (/**
                     * @param {?} err
                     * @return {?}
                     */
                    (err) => { error(err); });
            }
            if (complete) {
                completeFn =
                    this.__isAsync ? (/**
                     * @return {?}
                     */
                    () => { setTimeout((/**
                     * @return {?}
                     */
                    () => complete())); }) : (/**
                     * @return {?}
                     */
                    () => { complete(); });
            }
        }
        /** @type {?} */
        const sink = super.subscribe(schedulerFn, errorFn, completeFn);
        if (generatorOrNext instanceof rxjs__WEBPACK_IMPORTED_MODULE_0__["Subscription"]) {
            generatorOrNext.add(sink);
        }
        return sink;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/query_list.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 * @this {?}
 * @return {?}
 */
function symbolIterator() {
    return ((/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._results)))[getSymbolIterator()]();
}
/**
 * An unmodifiable list of items that Angular keeps up to date when the state
 * of the application changes.
 *
 * The type of object that {\@link ViewChildren}, {\@link ContentChildren}, and {\@link QueryList}
 * provide.
 *
 * Implements an iterable interface, therefore it can be used in both ES6
 * javascript `for (var i of items)` loops as well as in Angular templates with
 * `*ngFor="let i of myList"`.
 *
 * Changes can be observed by subscribing to the changes `Observable`.
 *
 * NOTE: In the future this class will implement an `Observable` interface.
 *
 * \@usageNotes
 * ### Example
 * ```typescript
 * \@Component({...})
 * class Container {
 * \@ViewChildren(Item) items:QueryList<Item>;
 * }
 * ```
 *
 * \@publicApi
 * @template T
 */
class QueryList {
    constructor() {
        this.dirty = true;
        this._results = [];
        this.changes = new EventEmitter();
        this.length = 0;
        // This function should be declared on the prototype, but doing so there will cause the class
        // declaration to have side-effects and become not tree-shakable. For this reason we do it in
        // the constructor.
        // [getSymbolIterator()](): Iterator<T> { ... }
        /** @type {?} */
        const symbol = getSymbolIterator();
        /** @type {?} */
        const proto = (/** @type {?} */ (QueryList.prototype));
        if (!proto[symbol])
            proto[symbol] = symbolIterator;
    }
    /**
     * See
     * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
     * @template U
     * @param {?} fn
     * @return {?}
     */
    map(fn) { return this._results.map(fn); }
    /**
     * See
     * [Array.filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter)
     * @param {?} fn
     * @return {?}
     */
    filter(fn) {
        return this._results.filter(fn);
    }
    /**
     * See
     * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
     * @param {?} fn
     * @return {?}
     */
    find(fn) {
        return this._results.find(fn);
    }
    /**
     * See
     * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
     * @template U
     * @param {?} fn
     * @param {?} init
     * @return {?}
     */
    reduce(fn, init) {
        return this._results.reduce(fn, init);
    }
    /**
     * See
     * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
     * @param {?} fn
     * @return {?}
     */
    forEach(fn) { this._results.forEach(fn); }
    /**
     * See
     * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
     * @param {?} fn
     * @return {?}
     */
    some(fn) {
        return this._results.some(fn);
    }
    /**
     * Returns a copy of the internal results list as an Array.
     * @return {?}
     */
    toArray() { return this._results.slice(); }
    /**
     * @return {?}
     */
    toString() { return this._results.toString(); }
    /**
     * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
     * on change detection, it will not notify of changes to the queries, unless a new change
     * occurs.
     *
     * @param {?} resultsTree The query results to store
     * @return {?}
     */
    reset(resultsTree) {
        this._results = flatten(resultsTree);
        ((/** @type {?} */ (this))).dirty = false;
        ((/** @type {?} */ (this))).length = this._results.length;
        ((/** @type {?} */ (this))).last = this._results[this.length - 1];
        ((/** @type {?} */ (this))).first = this._results[0];
    }
    /**
     * Triggers a change event by emitting on the `changes` {\@link EventEmitter}.
     * @return {?}
     */
    notifyOnChanges() { ((/** @type {?} */ (this.changes))).emit(this); }
    /**
     * internal
     * @return {?}
     */
    setDirty() { ((/** @type {?} */ (this))).dirty = true; }
    /**
     * internal
     * @return {?}
     */
    destroy() {
        ((/** @type {?} */ (this.changes))).complete();
        ((/** @type {?} */ (this.changes))).unsubscribe();
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/definition.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @enum {number} */
const RenderFlags = {
    /* Whether to run the creation block (e.g. create elements and directives) */
    Create: 1,
    /* Whether to run the update block (e.g. refresh bindings) */
    Update: 2,
};
/**
 * A subclass of `Type` which has a static `ɵcmp`:`ComponentDef` field making it
 * consumable for rendering.
 * @record
 * @template T
 */
function ComponentType() { }
if (false) {}
/**
 * A subclass of `Type` which has a static `ɵdir`:`DirectiveDef` field making it
 * consumable for rendering.
 * @record
 * @template T
 */
function DirectiveType() { }
if (false) {}
/**
 * A subclass of `Type` which has a static `ɵpipe`:`PipeDef` field making it
 * consumable for rendering.
 * @record
 * @template T
 */
function PipeType() { }
if (false) {}
/**
 * Runtime link information for Directives.
 *
 * This is an internal data structure used by the render to link
 * directives into templates.
 *
 * NOTE: Always use `defineDirective` function to create this object,
 * never create the object directly since the shape of this object
 * can change between versions.
 *
 * @param Selector type metadata specifying the selector of the directive or component
 *
 * See: {\@link defineDirective}
 * @record
 * @template T
 */
function DirectiveDef() { }
if (false) {}
/**
 * Runtime link information for Components.
 *
 * This is an internal data structure used by the render to link
 * components into templates.
 *
 * NOTE: Always use `defineComponent` function to create this object,
 * never create the object directly since the shape of this object
 * can change between versions.
 *
 * See: {\@link defineComponent}
 * @record
 * @template T
 */
function ComponentDef() { }
if (false) {}
/**
 * Runtime link information for Pipes.
 *
 * This is an internal data structure used by the renderer to link
 * pipes into templates.
 *
 * NOTE: Always use `definePipe` function to create this object,
 * never create the object directly since the shape of this object
 * can change between versions.
 *
 * See: {\@link definePipe}
 * @record
 * @template T
 */
function PipeDef() { }
if (false) {}
/**
 * @record
 */
function DirectiveDefFeature() { }
if (false) {}
/**
 * @record
 */
function ComponentDefFeature() { }
if (false) {}
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
/** @type {?} */
const unusedValueExportToPlacateAjd$7 = 1;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/interfaces/query.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * An object representing query metadata extracted from query annotations.
 * @record
 */
function TQueryMetadata() { }
if (false) {}
/**
 * TQuery objects represent all the query-related data that remain the same from one view instance
 * to another and can be determined on the very first template pass. Most notably TQuery holds all
 * the matches for a given view.
 * @record
 */
function TQuery() { }
if (false) {}
/**
 * TQueries represent a collection of individual TQuery objects tracked in a given view. Most of the
 * methods on this interface are simple proxy methods to the corresponding functionality on TQuery.
 * @record
 */
function TQueries() { }
if (false) {}
/**
 * An interface that represents query-related information specific to a view instance. Most notably
 * it contains:
 * - materialized query matches;
 * - a pointer to a QueryList where materialized query results should be reported.
 * @record
 * @template T
 */
function LQuery() { }
if (false) {}
/**
 * lQueries represent a collection of individual LQuery objects tracked in a given view.
 * @record
 */
function LQueries() { }
if (false) {}
// Note: This hack is necessary so we don't erroneously get a circular dependency
// failure based on types.
/** @type {?} */
const unusedValueExportToPlacateAjd$8 = 1;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/query.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const unusedValueToPlacateAjd$2 = unusedValueExportToPlacateAjd$7 + unusedValueExportToPlacateAjd$3 + unusedValueExportToPlacateAjd$4 + unusedValueExportToPlacateAjd$8;
/**
 * @template T
 */
class LQuery_ {
    /**
     * @param {?} queryList
     */
    constructor(queryList) {
        this.queryList = queryList;
        this.matches = null;
    }
    /**
     * @return {?}
     */
    clone() { return new LQuery_(this.queryList); }
    /**
     * @return {?}
     */
    setDirty() { this.queryList.setDirty(); }
}
if (false) {}
class LQueries_ {
    /**
     * @param {?=} queries
     */
    constructor(queries = []) {
        this.queries = queries;
    }
    /**
     * @param {?} tView
     * @return {?}
     */
    createEmbeddedView(tView) {
        /** @type {?} */
        const tQueries = tView.queries;
        if (tQueries !== null) {
            /** @type {?} */
            const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
            /** @type {?} */
            const viewLQueries = [];
            // An embedded view has queries propagated from a declaration view at the beginning of the
            // TQueries collection and up until a first content query declared in the embedded view. Only
            // propagated LQueries are created at this point (LQuery corresponding to declared content
            // queries will be instantiated from the content query instructions for each directive).
            for (let i = 0; i < noOfInheritedQueries; i++) {
                /** @type {?} */
                const tQuery = tQueries.getByIndex(i);
                /** @type {?} */
                const parentLQuery = this.queries[tQuery.indexInDeclarationView];
                viewLQueries.push(parentLQuery.clone());
            }
            return new LQueries_(viewLQueries);
        }
        return null;
    }
    /**
     * @param {?} tView
     * @return {?}
     */
    insertView(tView) { this.dirtyQueriesWithMatches(tView); }
    /**
     * @param {?} tView
     * @return {?}
     */
    detachView(tView) { this.dirtyQueriesWithMatches(tView); }
    /**
     * @private
     * @param {?} tView
     * @return {?}
     */
    dirtyQueriesWithMatches(tView) {
        for (let i = 0; i < this.queries.length; i++) {
            if (getTQuery(tView, i).matches !== null) {
                this.queries[i].setDirty();
            }
        }
    }
}
if (false) {}
class TQueryMetadata_ {
    /**
     * @param {?} predicate
     * @param {?} descendants
     * @param {?} isStatic
     * @param {?=} read
     */
    constructor(predicate, descendants, isStatic, read = null) {
        this.predicate = predicate;
        this.descendants = descendants;
        this.isStatic = isStatic;
        this.read = read;
    }
}
if (false) {}
class TQueries_ {
    /**
     * @param {?=} queries
     */
    constructor(queries = []) {
        this.queries = queries;
    }
    /**
     * @param {?} tView
     * @param {?} tNode
     * @return {?}
     */
    elementStart(tView, tNode) {
        ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');
        for (let i = 0; i < this.queries.length; i++) {
            this.queries[i].elementStart(tView, tNode);
        }
    }
    /**
     * @param {?} tNode
     * @return {?}
     */
    elementEnd(tNode) {
        for (let i = 0; i < this.queries.length; i++) {
            this.queries[i].elementEnd(tNode);
        }
    }
    /**
     * @param {?} tNode
     * @return {?}
     */
    embeddedTView(tNode) {
        /** @type {?} */
        let queriesForTemplateRef = null;
        for (let i = 0; i < this.length; i++) {
            /** @type {?} */
            const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
            /** @type {?} */
            const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);
            if (tqueryClone) {
                tqueryClone.indexInDeclarationView = i;
                if (queriesForTemplateRef !== null) {
                    queriesForTemplateRef.push(tqueryClone);
                }
                else {
                    queriesForTemplateRef = [tqueryClone];
                }
            }
        }
        return queriesForTemplateRef !== null ? new TQueries_(queriesForTemplateRef) : null;
    }
    /**
     * @param {?} tView
     * @param {?} tNode
     * @return {?}
     */
    template(tView, tNode) {
        ngDevMode && assertFirstCreatePass(tView, 'Queries should collect results on the first template pass only');
        for (let i = 0; i < this.queries.length; i++) {
            this.queries[i].template(tView, tNode);
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    getByIndex(index) {
        ngDevMode && assertDataInRange(this.queries, index);
        return this.queries[index];
    }
    /**
     * @return {?}
     */
    get length() { return this.queries.length; }
    /**
     * @param {?} tquery
     * @return {?}
     */
    track(tquery) { this.queries.push(tquery); }
}
if (false) {}
class TQuery_ {
    /**
     * @param {?} metadata
     * @param {?=} nodeIndex
     */
    constructor(metadata, nodeIndex = -1) {
        this.metadata = metadata;
        this.matches = null;
        this.indexInDeclarationView = -1;
        this.crossesNgTemplate = false;
        /**
         * A flag indicating if a given query still applies to nodes it is crossing. We use this flag
         * (alongside with _declarationNodeIndex) to know when to stop applying content queries to
         * elements in a template.
         */
        this._appliesToNextNode = true;
        this._declarationNodeIndex = nodeIndex;
    }
    /**
     * @param {?} tView
     * @param {?} tNode
     * @return {?}
     */
    elementStart(tView, tNode) {
        if (this.isApplyingToNode(tNode)) {
            this.matchTNode(tView, tNode);
        }
    }
    /**
     * @param {?} tNode
     * @return {?}
     */
    elementEnd(tNode) {
        if (this._declarationNodeIndex === tNode.index) {
            this._appliesToNextNode = false;
        }
    }
    /**
     * @param {?} tView
     * @param {?} tNode
     * @return {?}
     */
    template(tView, tNode) { this.elementStart(tView, tNode); }
    /**
     * @param {?} tNode
     * @param {?} childQueryIndex
     * @return {?}
     */
    embeddedTView(tNode, childQueryIndex) {
        if (this.isApplyingToNode(tNode)) {
            this.crossesNgTemplate = true;
            // A marker indicating a `<ng-template>` element (a placeholder for query results from
            // embedded views created based on this `<ng-template>`).
            this.addMatch(-tNode.index, childQueryIndex);
            return new TQuery_(this.metadata);
        }
        return null;
    }
    /**
     * @private
     * @param {?} tNode
     * @return {?}
     */
    isApplyingToNode(tNode) {
        if (this._appliesToNextNode && this.metadata.descendants === false) {
            /** @type {?} */
            const declarationNodeIdx = this._declarationNodeIndex;
            /** @type {?} */
            let parent = tNode.parent;
            // Determine if a given TNode is a "direct" child of a node on which a content query was
            // declared (only direct children of query's host node can match with the descendants: false
            // option). There are 3 main use-case / conditions to consider here:
            // - <needs-target><i #target></i></needs-target>: here <i #target> parent node is a query
            // host node;
            // - <needs-target><ng-template [ngIf]="true"><i #target></i></ng-template></needs-target>:
            // here <i #target> parent node is null;
            // - <needs-target><ng-container><i #target></i></ng-container></needs-target>: here we need
            // to go past `<ng-container>` to determine <i #target> parent node (but we shouldn't traverse
            // up past the query's host node!).
            while (parent !== null && parent.type === 4 /* ElementContainer */ &&
                parent.index !== declarationNodeIdx) {
                parent = parent.parent;
            }
            return declarationNodeIdx === (parent !== null ? parent.index : -1);
        }
        return this._appliesToNextNode;
    }
    /**
     * @private
     * @param {?} tView
     * @param {?} tNode
     * @return {?}
     */
    matchTNode(tView, tNode) {
        if (Array.isArray(this.metadata.predicate)) {
            /** @type {?} */
            const localNames = this.metadata.predicate;
            for (let i = 0; i < localNames.length; i++) {
                this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, localNames[i]));
            }
        }
        else {
            /** @type {?} */
            const typePredicate = (/** @type {?} */ (this.metadata.predicate));
            if (typePredicate === TemplateRef) {
                if (tNode.type === 0 /* Container */) {
                    this.matchTNodeWithReadOption(tView, tNode, -1);
                }
            }
            else {
                this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, typePredicate, false, false));
            }
        }
    }
    /**
     * @private
     * @param {?} tView
     * @param {?} tNode
     * @param {?} nodeMatchIdx
     * @return {?}
     */
    matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
        if (nodeMatchIdx !== null) {
            /** @type {?} */
            const read = this.metadata.read;
            if (read !== null) {
                if (read === ElementRef || read === ViewContainerRef ||
                    read === TemplateRef && tNode.type === 0 /* Container */) {
                    this.addMatch(tNode.index, -2);
                }
                else {
                    /** @type {?} */
                    const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);
                    if (directiveOrProviderIdx !== null) {
                        this.addMatch(tNode.index, directiveOrProviderIdx);
                    }
                }
            }
            else {
                this.addMatch(tNode.index, nodeMatchIdx);
            }
        }
    }
    /**
     * @private
     * @param {?} tNodeIdx
     * @param {?} matchIdx
     * @return {?}
     */
    addMatch(tNodeIdx, matchIdx) {
        if (this.matches === null) {
            this.matches = [tNodeIdx, matchIdx];
        }
        else {
            this.matches.push(tNodeIdx, matchIdx);
        }
    }
}
if (false) {}
/**
 * Iterates over local names for a given node and returns directive index
 * (or -1 if a local name points to an element).
 *
 * @param {?} tNode static data of a node to check
 * @param {?} selector selector to match
 * @return {?} directive index, -1 or null if a selector didn't match any of the local names
 */
function getIdxOfMatchingSelector(tNode, selector) {
    /** @type {?} */
    const localNames = tNode.localNames;
    if (localNames !== null) {
        for (let i = 0; i < localNames.length; i += 2) {
            if (localNames[i] === selector) {
                return (/** @type {?} */ (localNames[i + 1]));
            }
        }
    }
    return null;
}
/**
 * @param {?} tNode
 * @param {?} currentView
 * @return {?}
 */
function createResultByTNodeType(tNode, currentView) {
    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {
        return createElementRef(ElementRef, tNode, currentView);
    }
    else if (tNode.type === 0 /* Container */) {
        return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);
    }
    return null;
}
/**
 * @param {?} lView
 * @param {?} tNode
 * @param {?} matchingIdx
 * @param {?} read
 * @return {?}
 */
function createResultForNode(lView, tNode, matchingIdx, read) {
    if (matchingIdx === -1) {
        // if read token and / or strategy is not specified, detect it using appropriate tNode type
        return createResultByTNodeType(tNode, lView);
    }
    else if (matchingIdx === -2) {
        // read a special token from a node injector
        return createSpecialToken(lView, tNode, read);
    }
    else {
        // read a token
        return getNodeInjectable(lView, lView[TVIEW], matchingIdx, (/** @type {?} */ (tNode)));
    }
}
/**
 * @param {?} lView
 * @param {?} tNode
 * @param {?} read
 * @return {?}
 */
function createSpecialToken(lView, tNode, read) {
    if (read === ElementRef) {
        return createElementRef(ElementRef, tNode, lView);
    }
    else if (read === TemplateRef) {
        return createTemplateRef(TemplateRef, ElementRef, tNode, lView);
    }
    else if (read === ViewContainerRef) {
        ngDevMode && assertNodeOfPossibleTypes(tNode, 3 /* Element */, 0 /* Container */, 4 /* ElementContainer */);
        return createContainerRef(ViewContainerRef, ElementRef, (/** @type {?} */ (tNode)), lView);
    }
    else {
        ngDevMode &&
            throwError(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);
    }
}
/**
 * A helper function that creates query results for a given view. This function is meant to do the
 * processing once and only once for a given view instance (a set of results for a given view
 * doesn't change).
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} tQuery
 * @param {?} queryIndex
 * @return {?}
 */
function materializeViewResults(tView, lView, tQuery, queryIndex) {
    /** @type {?} */
    const lQuery = (/** @type {?} */ ((/** @type {?} */ (lView[QUERIES])).queries))[queryIndex];
    if (lQuery.matches === null) {
        /** @type {?} */
        const tViewData = tView.data;
        /** @type {?} */
        const tQueryMatches = (/** @type {?} */ (tQuery.matches));
        /** @type {?} */
        const result = [];
        for (let i = 0; i < tQueryMatches.length; i += 2) {
            /** @type {?} */
            const matchedNodeIdx = tQueryMatches[i];
            if (matchedNodeIdx < 0) {
                // we at the <ng-template> marker which might have results in views created based on this
                // <ng-template> - those results will be in separate views though, so here we just leave
                // null as a placeholder
                result.push(null);
            }
            else {
                ngDevMode && assertDataInRange(tViewData, matchedNodeIdx);
                /** @type {?} */
                const tNode = (/** @type {?} */ (tViewData[matchedNodeIdx]));
                result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
            }
        }
        lQuery.matches = result;
    }
    return lQuery.matches;
}
/**
 * A helper function that collects (already materialized) query results from a tree of views,
 * starting with a provided LView.
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} queryIndex
 * @param {?} result
 * @return {?}
 */
function collectQueryResults(tView, lView, queryIndex, result) {
    /** @type {?} */
    const tQuery = (/** @type {?} */ (tView.queries)).getByIndex(queryIndex);
    /** @type {?} */
    const tQueryMatches = tQuery.matches;
    if (tQueryMatches !== null) {
        /** @type {?} */
        const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);
        for (let i = 0; i < tQueryMatches.length; i += 2) {
            /** @type {?} */
            const tNodeIdx = tQueryMatches[i];
            if (tNodeIdx > 0) {
                result.push((/** @type {?} */ (lViewResults[i / 2])));
            }
            else {
                /** @type {?} */
                const childQueryIndex = tQueryMatches[i + 1];
                /** @type {?} */
                const declarationLContainer = (/** @type {?} */ (lView[-tNodeIdx]));
                ngDevMode && assertLContainer(declarationLContainer);
                // collect matches for views inserted in this container
                for (let i = CONTAINER_HEADER_OFFSET; i < declarationLContainer.length; i++) {
                    /** @type {?} */
                    const embeddedLView = declarationLContainer[i];
                    if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
                    }
                }
                // collect matches for views created from this declaration container and inserted into
                // different containers
                if (declarationLContainer[MOVED_VIEWS] !== null) {
                    /** @type {?} */
                    const embeddedLViews = (/** @type {?} */ (declarationLContainer[MOVED_VIEWS]));
                    for (let i = 0; i < embeddedLViews.length; i++) {
                        /** @type {?} */
                        const embeddedLView = embeddedLViews[i];
                        collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
                    }
                }
            }
        }
    }
    return result;
}
/**
 * Refreshes a query by combining matches from all active views and removing matches from deleted
 * views.
 *
 * \@codeGenApi
 * @param {?} queryList
 * @return {?} `true` if a query got dirty during change detection or if this is a static query
 * resolving in creation mode, `false` otherwise.
 *
 */
function ɵɵqueryRefresh(queryList) {
    /** @type {?} */
    const lView = getLView();
    /** @type {?} */
    const tView = getTView();
    /** @type {?} */
    const queryIndex = getCurrentQueryIndex();
    setCurrentQueryIndex(queryIndex + 1);
    /** @type {?} */
    const tQuery = getTQuery(tView, queryIndex);
    if (queryList.dirty && (isCreationMode(lView) === tQuery.metadata.isStatic)) {
        if (tQuery.matches === null) {
            queryList.reset([]);
        }
        else {
            /** @type {?} */
            const result = tQuery.crossesNgTemplate ?
                collectQueryResults(tView, lView, queryIndex, []) :
                materializeViewResults(tView, lView, tQuery, queryIndex);
            queryList.reset(result);
            queryList.notifyOnChanges();
        }
        return true;
    }
    return false;
}
/**
 * Creates new QueryList for a static view query.
 *
 * \@codeGenApi
 * @template T
 * @param {?} predicate The type for which the query will search
 * @param {?} descend Whether or not to descend into children
 * @param {?=} read What to save in the query
 *
 * @return {?}
 */
function ɵɵstaticViewQuery(predicate, descend, read) {
    viewQueryInternal(getTView(), getLView(), predicate, descend, read, true);
}
/**
 * Creates new QueryList, stores the reference in LView and returns QueryList.
 *
 * \@codeGenApi
 * @template T
 * @param {?} predicate The type for which the query will search
 * @param {?} descend Whether or not to descend into children
 * @param {?=} read What to save in the query
 *
 * @return {?}
 */
function ɵɵviewQuery(predicate, descend, read) {
    viewQueryInternal(getTView(), getLView(), predicate, descend, read, false);
}
/**
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} predicate
 * @param {?} descend
 * @param {?} read
 * @param {?} isStatic
 * @return {?}
 */
function viewQueryInternal(tView, lView, predicate, descend, read, isStatic) {
    if (tView.firstCreatePass) {
        createTQuery(tView, new TQueryMetadata_(predicate, descend, isStatic, read), -1);
        if (isStatic) {
            tView.staticViewQueries = true;
        }
    }
    createLQuery(tView, lView);
}
/**
 * Registers a QueryList, associated with a content query, for later refresh (part of a view
 * refresh).
 *
 * \@codeGenApi
 * @template T
 * @param {?} directiveIndex Current directive index
 * @param {?} predicate The type for which the query will search
 * @param {?} descend Whether or not to descend into children
 * @param {?=} read What to save in the query
 * @return {?} QueryList<T>
 *
 */
function ɵɵcontentQuery(directiveIndex, predicate, descend, read) {
    contentQueryInternal(getTView(), getLView(), predicate, descend, read, false, getPreviousOrParentTNode(), directiveIndex);
}
/**
 * Registers a QueryList, associated with a static content query, for later refresh
 * (part of a view refresh).
 *
 * \@codeGenApi
 * @template T
 * @param {?} directiveIndex Current directive index
 * @param {?} predicate The type for which the query will search
 * @param {?} descend Whether or not to descend into children
 * @param {?=} read What to save in the query
 * @return {?} QueryList<T>
 *
 */
function ɵɵstaticContentQuery(directiveIndex, predicate, descend, read) {
    contentQueryInternal(getTView(), getLView(), predicate, descend, read, true, getPreviousOrParentTNode(), directiveIndex);
}
/**
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @param {?} predicate
 * @param {?} descend
 * @param {?} read
 * @param {?} isStatic
 * @param {?} tNode
 * @param {?} directiveIndex
 * @return {?}
 */
function contentQueryInternal(tView, lView, predicate, descend, read, isStatic, tNode, directiveIndex) {
    if (tView.firstCreatePass) {
        createTQuery(tView, new TQueryMetadata_(predicate, descend, isStatic, read), tNode.index);
        saveContentQueryAndDirectiveIndex(tView, directiveIndex);
        if (isStatic) {
            tView.staticContentQueries = true;
        }
    }
    createLQuery(tView, lView);
}
/**
 * Loads a QueryList corresponding to the current view or content query.
 *
 * \@codeGenApi
 * @template T
 * @return {?}
 */
function ɵɵloadQuery() {
    return loadQueryInternal(getLView(), getCurrentQueryIndex());
}
/**
 * @template T
 * @param {?} lView
 * @param {?} queryIndex
 * @return {?}
 */
function loadQueryInternal(lView, queryIndex) {
    ngDevMode &&
        assertDefined(lView[QUERIES], 'LQueries should be defined when trying to load a query');
    ngDevMode && assertDataInRange((/** @type {?} */ (lView[QUERIES])).queries, queryIndex);
    return (/** @type {?} */ (lView[QUERIES])).queries[queryIndex].queryList;
}
/**
 * @template T
 * @param {?} tView
 * @param {?} lView
 * @return {?}
 */
function createLQuery(tView, lView) {
    /** @type {?} */
    const queryList = new QueryList();
    storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
    if (lView[QUERIES] === null)
        lView[QUERIES] = new LQueries_();
    (/** @type {?} */ (lView[QUERIES])).queries.push(new LQuery_(queryList));
}
/**
 * @param {?} tView
 * @param {?} metadata
 * @param {?} nodeIndex
 * @return {?}
 */
function createTQuery(tView, metadata, nodeIndex) {
    if (tView.queries === null)
        tView.queries = new TQueries_();
    tView.queries.track(new TQuery_(metadata, nodeIndex));
}
/**
 * @param {?} tView
 * @param {?} directiveIndex
 * @return {?}
 */
function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
    /** @type {?} */
    const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
    /** @type {?} */
    const lastSavedDirectiveIndex = tView.contentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;
    if (directiveIndex !== lastSavedDirectiveIndex) {
        tViewContentQueries.push((/** @type {?} */ (tView.queries)).length - 1, directiveIndex);
    }
}
/**
 * @param {?} tView
 * @param {?} index
 * @return {?}
 */
function getTQuery(tView, index) {
    ngDevMode && assertDefined(tView.queries, 'TQueries must be defined to retrieve a TQuery');
    return (/** @type {?} */ (tView.queries)).getByIndex(index);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/view_engine_compatibility_prebound.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Retrieves `TemplateRef` instance from `Injector` when a local reference is placed on the
 * `<ng-template>` element.
 *
 * \@codeGenApi
 * @param {?} tNode
 * @param {?} currentView
 * @return {?}
 */
function ɵɵtemplateRefExtractor(tNode, currentView) {
    return createTemplateRef(TemplateRef, ElementRef, tNode, currentView);
}
/**
 * Returns the appropriate `ChangeDetectorRef` for a pipe.
 *
 * \@codeGenApi
 * @param {?=} flags
 * @return {?}
 */
function ɵɵinjectPipeChangeDetectorRef(flags = InjectFlags.Default) {
    /** @type {?} */
    const value = injectChangeDetectorRef(true);
    if (value == null && !(flags & InjectFlags.Optional)) {
        throw new Error(`No provider for ChangeDetectorRef!`);
    }
    else {
        return value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/jit/environment.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$d = /**
 * @return {?}
 */
() => ({
    'ɵɵattribute': ɵɵattribute,
    'ɵɵattributeInterpolate1': ɵɵattributeInterpolate1,
    'ɵɵattributeInterpolate2': ɵɵattributeInterpolate2,
    'ɵɵattributeInterpolate3': ɵɵattributeInterpolate3,
    'ɵɵattributeInterpolate4': ɵɵattributeInterpolate4,
    'ɵɵattributeInterpolate5': ɵɵattributeInterpolate5,
    'ɵɵattributeInterpolate6': ɵɵattributeInterpolate6,
    'ɵɵattributeInterpolate7': ɵɵattributeInterpolate7,
    'ɵɵattributeInterpolate8': ɵɵattributeInterpolate8,
    'ɵɵattributeInterpolateV': ɵɵattributeInterpolateV,
    'ɵɵdefineComponent': ɵɵdefineComponent,
    'ɵɵdefineDirective': ɵɵdefineDirective,
    'ɵɵdefineInjectable': ɵɵdefineInjectable,
    'ɵɵdefineInjector': ɵɵdefineInjector,
    'ɵɵdefineNgModule': ɵɵdefineNgModule,
    'ɵɵdefinePipe': ɵɵdefinePipe,
    'ɵɵdirectiveInject': ɵɵdirectiveInject,
    'ɵɵgetFactoryOf': ɵɵgetFactoryOf,
    'ɵɵgetInheritedFactory': ɵɵgetInheritedFactory,
    'ɵɵinject': ɵɵinject,
    'ɵɵinjectAttribute': ɵɵinjectAttribute,
    'ɵɵinvalidFactory': ɵɵinvalidFactory,
    'ɵɵinvalidFactoryDep': ɵɵinvalidFactoryDep,
    'ɵɵinjectPipeChangeDetectorRef': ɵɵinjectPipeChangeDetectorRef,
    'ɵɵtemplateRefExtractor': ɵɵtemplateRefExtractor,
    'ɵɵNgOnChangesFeature': ɵɵNgOnChangesFeature,
    'ɵɵProvidersFeature': ɵɵProvidersFeature,
    'ɵɵCopyDefinitionFeature': ɵɵCopyDefinitionFeature,
    'ɵɵInheritDefinitionFeature': ɵɵInheritDefinitionFeature,
    'ɵɵcontainer': ɵɵcontainer,
    'ɵɵnextContext': ɵɵnextContext,
    'ɵɵcontainerRefreshStart': ɵɵcontainerRefreshStart,
    'ɵɵcontainerRefreshEnd': ɵɵcontainerRefreshEnd,
    'ɵɵnamespaceHTML': ɵɵnamespaceHTML,
    'ɵɵnamespaceMathML': ɵɵnamespaceMathML,
    'ɵɵnamespaceSVG': ɵɵnamespaceSVG,
    'ɵɵenableBindings': ɵɵenableBindings,
    'ɵɵdisableBindings': ɵɵdisableBindings,
    'ɵɵelementStart': ɵɵelementStart,
    'ɵɵelementEnd': ɵɵelementEnd,
    'ɵɵelement': ɵɵelement,
    'ɵɵelementContainerStart': ɵɵelementContainerStart,
    'ɵɵelementContainerEnd': ɵɵelementContainerEnd,
    'ɵɵelementContainer': ɵɵelementContainer,
    'ɵɵpureFunction0': ɵɵpureFunction0,
    'ɵɵpureFunction1': ɵɵpureFunction1,
    'ɵɵpureFunction2': ɵɵpureFunction2,
    'ɵɵpureFunction3': ɵɵpureFunction3,
    'ɵɵpureFunction4': ɵɵpureFunction4,
    'ɵɵpureFunction5': ɵɵpureFunction5,
    'ɵɵpureFunction6': ɵɵpureFunction6,
    'ɵɵpureFunction7': ɵɵpureFunction7,
    'ɵɵpureFunction8': ɵɵpureFunction8,
    'ɵɵpureFunctionV': ɵɵpureFunctionV,
    'ɵɵgetCurrentView': ɵɵgetCurrentView,
    'ɵɵrestoreView': ɵɵrestoreView,
    'ɵɵlistener': ɵɵlistener,
    'ɵɵprojection': ɵɵprojection,
    'ɵɵupdateSyntheticHostBinding': ɵɵupdateSyntheticHostBinding,
    'ɵɵcomponentHostSyntheticListener': ɵɵcomponentHostSyntheticListener,
    'ɵɵpipeBind1': ɵɵpipeBind1,
    'ɵɵpipeBind2': ɵɵpipeBind2,
    'ɵɵpipeBind3': ɵɵpipeBind3,
    'ɵɵpipeBind4': ɵɵpipeBind4,
    'ɵɵpipeBindV': ɵɵpipeBindV,
    'ɵɵprojectionDef': ɵɵprojectionDef,
    'ɵɵhostProperty': ɵɵhostProperty,
    'ɵɵproperty': ɵɵproperty,
    'ɵɵpropertyInterpolate': ɵɵpropertyInterpolate,
    'ɵɵpropertyInterpolate1': ɵɵpropertyInterpolate1,
    'ɵɵpropertyInterpolate2': ɵɵpropertyInterpolate2,
    'ɵɵpropertyInterpolate3': ɵɵpropertyInterpolate3,
    'ɵɵpropertyInterpolate4': ɵɵpropertyInterpolate4,
    'ɵɵpropertyInterpolate5': ɵɵpropertyInterpolate5,
    'ɵɵpropertyInterpolate6': ɵɵpropertyInterpolate6,
    'ɵɵpropertyInterpolate7': ɵɵpropertyInterpolate7,
    'ɵɵpropertyInterpolate8': ɵɵpropertyInterpolate8,
    'ɵɵpropertyInterpolateV': ɵɵpropertyInterpolateV,
    'ɵɵpipe': ɵɵpipe,
    'ɵɵqueryRefresh': ɵɵqueryRefresh,
    'ɵɵviewQuery': ɵɵviewQuery,
    'ɵɵstaticViewQuery': ɵɵstaticViewQuery,
    'ɵɵstaticContentQuery': ɵɵstaticContentQuery,
    'ɵɵloadQuery': ɵɵloadQuery,
    'ɵɵcontentQuery': ɵɵcontentQuery,
    'ɵɵreference': ɵɵreference,
    'ɵɵclassMap': ɵɵclassMap,
    'ɵɵclassMapInterpolate1': ɵɵclassMapInterpolate1,
    'ɵɵclassMapInterpolate2': ɵɵclassMapInterpolate2,
    'ɵɵclassMapInterpolate3': ɵɵclassMapInterpolate3,
    'ɵɵclassMapInterpolate4': ɵɵclassMapInterpolate4,
    'ɵɵclassMapInterpolate5': ɵɵclassMapInterpolate5,
    'ɵɵclassMapInterpolate6': ɵɵclassMapInterpolate6,
    'ɵɵclassMapInterpolate7': ɵɵclassMapInterpolate7,
    'ɵɵclassMapInterpolate8': ɵɵclassMapInterpolate8,
    'ɵɵclassMapInterpolateV': ɵɵclassMapInterpolateV,
    'ɵɵstyleMap': ɵɵstyleMap,
    'ɵɵstyleMapInterpolate1': ɵɵstyleMapInterpolate1,
    'ɵɵstyleMapInterpolate2': ɵɵstyleMapInterpolate2,
    'ɵɵstyleMapInterpolate3': ɵɵstyleMapInterpolate3,
    'ɵɵstyleMapInterpolate4': ɵɵstyleMapInterpolate4,
    'ɵɵstyleMapInterpolate5': ɵɵstyleMapInterpolate5,
    'ɵɵstyleMapInterpolate6': ɵɵstyleMapInterpolate6,
    'ɵɵstyleMapInterpolate7': ɵɵstyleMapInterpolate7,
    'ɵɵstyleMapInterpolate8': ɵɵstyleMapInterpolate8,
    'ɵɵstyleMapInterpolateV': ɵɵstyleMapInterpolateV,
    'ɵɵstyleProp': ɵɵstyleProp,
    'ɵɵstylePropInterpolate1': ɵɵstylePropInterpolate1,
    'ɵɵstylePropInterpolate2': ɵɵstylePropInterpolate2,
    'ɵɵstylePropInterpolate3': ɵɵstylePropInterpolate3,
    'ɵɵstylePropInterpolate4': ɵɵstylePropInterpolate4,
    'ɵɵstylePropInterpolate5': ɵɵstylePropInterpolate5,
    'ɵɵstylePropInterpolate6': ɵɵstylePropInterpolate6,
    'ɵɵstylePropInterpolate7': ɵɵstylePropInterpolate7,
    'ɵɵstylePropInterpolate8': ɵɵstylePropInterpolate8,
    'ɵɵstylePropInterpolateV': ɵɵstylePropInterpolateV,
    'ɵɵstyleSanitizer': ɵɵstyleSanitizer,
    'ɵɵclassProp': ɵɵclassProp,
    'ɵɵselect': ɵɵselect,
    'ɵɵadvance': ɵɵadvance,
    'ɵɵtemplate': ɵɵtemplate,
    'ɵɵtext': ɵɵtext,
    'ɵɵtextInterpolate': ɵɵtextInterpolate,
    'ɵɵtextInterpolate1': ɵɵtextInterpolate1,
    'ɵɵtextInterpolate2': ɵɵtextInterpolate2,
    'ɵɵtextInterpolate3': ɵɵtextInterpolate3,
    'ɵɵtextInterpolate4': ɵɵtextInterpolate4,
    'ɵɵtextInterpolate5': ɵɵtextInterpolate5,
    'ɵɵtextInterpolate6': ɵɵtextInterpolate6,
    'ɵɵtextInterpolate7': ɵɵtextInterpolate7,
    'ɵɵtextInterpolate8': ɵɵtextInterpolate8,
    'ɵɵtextInterpolateV': ɵɵtextInterpolateV,
    'ɵɵembeddedViewStart': ɵɵembeddedViewStart,
    'ɵɵembeddedViewEnd': ɵɵembeddedViewEnd,
    'ɵɵi18n': ɵɵi18n,
    'ɵɵi18nAttributes': ɵɵi18nAttributes,
    'ɵɵi18nExp': ɵɵi18nExp,
    'ɵɵi18nStart': ɵɵi18nStart,
    'ɵɵi18nEnd': ɵɵi18nEnd,
    'ɵɵi18nApply': ɵɵi18nApply,
    'ɵɵi18nPostprocess': ɵɵi18nPostprocess,
    'ɵɵresolveWindow': ɵɵresolveWindow,
    'ɵɵresolveDocument': ɵɵresolveDocument,
    'ɵɵresolveBody': ɵɵresolveBody,
    'ɵɵsetComponentScope': ɵɵsetComponentScope,
    'ɵɵsetNgModuleScope': ɵɵsetNgModuleScope,
    'ɵɵsanitizeHtml': ɵɵsanitizeHtml,
    'ɵɵsanitizeStyle': ɵɵsanitizeStyle,
    'ɵɵdefaultStyleSanitizer': ɵɵdefaultStyleSanitizer,
    'ɵɵsanitizeResourceUrl': ɵɵsanitizeResourceUrl,
    'ɵɵsanitizeScript': ɵɵsanitizeScript,
    'ɵɵsanitizeUrl': ɵɵsanitizeUrl,
    'ɵɵsanitizeUrlOrResourceUrl': ɵɵsanitizeUrlOrResourceUrl,
});
/**
 * A mapping of the \@angular/core API surface used in generated expressions to the actual symbols.
 *
 * This should be kept up to date with the public exports of \@angular/core.
 * @type {?}
 */
const angularCoreEnv = ((ɵ0$d))();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/jit/module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const EMPTY_ARRAY$5 = [];
/**
 * @record
 */
function ModuleQueueItem() { }
if (false) {}
/** @type {?} */
const moduleQueue = [];
/**
 * Enqueues moduleDef to be checked later to see if scope can be set on its
 * component declarations.
 * @param {?} moduleType
 * @param {?} ngModule
 * @return {?}
 */
function enqueueModuleForDelayedScoping(moduleType, ngModule) {
    moduleQueue.push({ moduleType, ngModule });
}
/** @type {?} */
let flushingModuleQueue = false;
/**
 * Loops over queued module definitions, if a given module definition has all of its
 * declarations resolved, it dequeues that module definition and sets the scope on
 * its declarations.
 * @return {?}
 */
function flushModuleScopingQueueAsMuchAsPossible() {
    if (!flushingModuleQueue) {
        flushingModuleQueue = true;
        try {
            for (let i = moduleQueue.length - 1; i >= 0; i--) {
                const { moduleType, ngModule } = moduleQueue[i];
                if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
                    // dequeue
                    moduleQueue.splice(i, 1);
                    setScopeOnDeclaredComponents(moduleType, ngModule);
                }
            }
        }
        finally {
            flushingModuleQueue = false;
        }
    }
}
/**
 * Returns truthy if a declaration has resolved. If the declaration happens to be
 * an array of declarations, it will recurse to check each declaration in that array
 * (which may also be arrays).
 * @param {?} declaration
 * @return {?}
 */
function isResolvedDeclaration(declaration) {
    if (Array.isArray(declaration)) {
        return declaration.every(isResolvedDeclaration);
    }
    return !!resolveForwardRef(declaration);
}
/**
 * Compiles a module in JIT mode.
 *
 * This function automatically gets called when a class has a `\@NgModule` decorator.
 * @param {?} moduleType
 * @param {?=} ngModule
 * @return {?}
 */
function compileNgModule(moduleType, ngModule = {}) {
    compileNgModuleDefs((/** @type {?} */ (moduleType)), ngModule);
    // Because we don't know if all declarations have resolved yet at the moment the
    // NgModule decorator is executing, we're enqueueing the setting of module scope
    // on its declarations to be run at a later time when all declarations for the module,
    // including forward refs, have resolved.
    enqueueModuleForDelayedScoping(moduleType, ngModule);
}
/**
 * Compiles and adds the `ɵmod` and `ɵinj` properties to the module class.
 *
 * It's possible to compile a module via this API which will allow duplicate declarations in its
 * root.
 * @param {?} moduleType
 * @param {?} ngModule
 * @param {?=} allowDuplicateDeclarationsInRoot
 * @return {?}
 */
function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {
    ngDevMode && assertDefined(moduleType, 'Required value moduleType');
    ngDevMode && assertDefined(ngModule, 'Required value ngModule');
    /** @type {?} */
    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY$5);
    /** @type {?} */
    let ngModuleDef = null;
    Object.defineProperty(moduleType, NG_MOD_DEF, {
        configurable: true,
        get: (/**
         * @return {?}
         */
        () => {
            if (ngModuleDef === null) {
                if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
                    // We need to assert this immediately, because allowing it to continue will cause it to
                    // go into an infinite loop before we've reached the point where we throw all the errors.
                    throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);
                }
                ngModuleDef = getCompilerFacade().compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/ɵmod.js`, {
                    type: moduleType,
                    bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY$5).map(resolveForwardRef),
                    declarations: declarations.map(resolveForwardRef),
                    imports: flatten(ngModule.imports || EMPTY_ARRAY$5)
                        .map(resolveForwardRef)
                        .map(expandModuleWithProviders),
                    exports: flatten(ngModule.exports || EMPTY_ARRAY$5)
                        .map(resolveForwardRef)
                        .map(expandModuleWithProviders),
                    schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
                    id: ngModule.id || null,
                });
                // Set `schemas` on ngModuleDef to an empty array in JIT mode to indicate that runtime
                // should verify that there are no unknown elements in a template. In AOT mode, that check
                // happens at compile time and `schemas` information is not present on Component and Module
                // defs after compilation (so the check doesn't happen the second time at runtime).
                if (!ngModuleDef.schemas) {
                    ngModuleDef.schemas = [];
                }
            }
            return ngModuleDef;
        })
    });
    /** @type {?} */
    let ngInjectorDef = null;
    Object.defineProperty(moduleType, NG_INJ_DEF, {
        get: (/**
         * @return {?}
         */
        () => {
            if (ngInjectorDef === null) {
                ngDevMode && verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (moduleType)))), allowDuplicateDeclarationsInRoot);
                /** @type {?} */
                const meta = {
                    name: moduleType.name,
                    type: moduleType,
                    deps: reflectDependencies(moduleType),
                    providers: ngModule.providers || EMPTY_ARRAY$5,
                    imports: [
                        (ngModule.imports || EMPTY_ARRAY$5).map(resolveForwardRef),
                        (ngModule.exports || EMPTY_ARRAY$5).map(resolveForwardRef),
                    ],
                };
                ngInjectorDef = getCompilerFacade().compileInjector(angularCoreEnv, `ng:///${moduleType.name}/ɵinj.js`, meta);
            }
            return ngInjectorDef;
        }),
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode,
    });
}
/**
 * @param {?} moduleType
 * @param {?} allowDuplicateDeclarationsInRoot
 * @param {?=} importingModule
 * @return {?}
 */
function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
    if (verifiedNgModule.get(moduleType))
        return;
    verifiedNgModule.set(moduleType, true);
    moduleType = resolveForwardRef(moduleType);
    /** @type {?} */
    let ngModuleDef;
    if (importingModule) {
        ngModuleDef = (/** @type {?} */ (getNgModuleDef(moduleType)));
        if (!ngModuleDef) {
            throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
        }
    }
    else {
        ngModuleDef = getNgModuleDef(moduleType, true);
    }
    /** @type {?} */
    const errors = [];
    /** @type {?} */
    const declarations = maybeUnwrapFn(ngModuleDef.declarations);
    /** @type {?} */
    const imports = maybeUnwrapFn(ngModuleDef.imports);
    flatten(imports).map(unwrapModuleWithProvidersImports).forEach((/**
     * @param {?} mod
     * @return {?}
     */
    mod => {
        verifySemanticsOfNgModuleImport(mod, moduleType);
        verifySemanticsOfNgModuleDef(mod, false, moduleType);
    }));
    /** @type {?} */
    const exports = maybeUnwrapFn(ngModuleDef.exports);
    declarations.forEach(verifyDeclarationsHaveDefinitions);
    declarations.forEach(verifyDirectivesHaveSelector);
    /** @type {?} */
    const combinedDeclarations = [
        ...declarations.map(resolveForwardRef),
        ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef),
    ];
    exports.forEach(verifyExportsAreDeclaredOrReExported);
    declarations.forEach((/**
     * @param {?} decl
     * @return {?}
     */
    decl => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot)));
    declarations.forEach(verifyComponentEntryComponentsIsPartOfNgModule);
    /** @type {?} */
    const ngModule = getAnnotation(moduleType, 'NgModule');
    if (ngModule) {
        ngModule.imports &&
            flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach((/**
             * @param {?} mod
             * @return {?}
             */
            mod => {
                verifySemanticsOfNgModuleImport(mod, moduleType);
                verifySemanticsOfNgModuleDef(mod, false, moduleType);
            }));
        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
        ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
        ngModule.entryComponents &&
            deepForEach(ngModule.entryComponents, verifyComponentIsPartOfNgModule);
    }
    // Throw Error if any errors were detected.
    if (errors.length) {
        throw new Error(errors.join('\n'));
    }
    ////////////////////////////////////////////////////////////////////////////////////////////////
    /**
     * @param {?} type
     * @return {?}
     */
    function verifyDeclarationsHaveDefinitions(type) {
        type = resolveForwardRef(type);
        /** @type {?} */
        const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef(type);
        if (!def) {
            errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function verifyDirectivesHaveSelector(type) {
        type = resolveForwardRef(type);
        /** @type {?} */
        const def = getDirectiveDef(type);
        if (!getComponentDef(type) && def && def.selectors.length == 0) {
            errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function verifyExportsAreDeclaredOrReExported(type) {
        type = resolveForwardRef(type);
        /** @type {?} */
        const kind = getComponentDef(type) && 'component' || getDirectiveDef(type) && 'directive' ||
            getPipeDef(type) && 'pipe';
        if (kind) {
            // only checked if we are declared as Component, Directive, or Pipe
            // Modules don't need to be declared or imported.
            if (combinedDeclarations.lastIndexOf(type) === -1) {
                // We are exporting something which we don't explicitly declare or import.
                errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);
            }
        }
    }
    /**
     * @param {?} type
     * @param {?} suppressErrors
     * @return {?}
     */
    function verifyDeclarationIsUnique(type, suppressErrors) {
        type = resolveForwardRef(type);
        /** @type {?} */
        const existingModule = ownerNgModule.get(type);
        if (existingModule && existingModule !== moduleType) {
            if (!suppressErrors) {
                /** @type {?} */
                const modules = [existingModule, moduleType].map(stringifyForError).sort();
                errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules[0]} and ${modules[1]}! ` +
                    `Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules[0]} and ${modules[1]}. ` +
                    `You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules[0]} and ${modules[1]}.`);
            }
        }
        else {
            // Mark type as having owner.
            ownerNgModule.set(type, moduleType);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function verifyComponentIsPartOfNgModule(type) {
        type = resolveForwardRef(type);
        /** @type {?} */
        const existingModule = ownerNgModule.get(type);
        if (!existingModule) {
            errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function verifyCorrectBootstrapType(type) {
        type = resolveForwardRef(type);
        if (!getComponentDef(type)) {
            errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);
        }
    }
    /**
     * @param {?} type
     * @return {?}
     */
    function verifyComponentEntryComponentsIsPartOfNgModule(type) {
        type = resolveForwardRef(type);
        if (getComponentDef(type)) {
            // We know we are component
            /** @type {?} */
            const component = getAnnotation(type, 'Component');
            if (component && component.entryComponents) {
                deepForEach(component.entryComponents, verifyComponentIsPartOfNgModule);
            }
        }
    }
    /**
     * @param {?} type
     * @param {?} importingModule
     * @return {?}
     */
    function verifySemanticsOfNgModuleImport(type, importingModule) {
        type = resolveForwardRef(type);
        if (getComponentDef(type) || getDirectiveDef(type)) {
            throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
        }
        if (getPipeDef(type)) {
            throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
        }
    }
}
/**
 * @param {?} typeOrWithProviders
 * @return {?}
 */
function unwrapModuleWithProvidersImports(typeOrWithProviders) {
    typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
    return ((/** @type {?} */ (typeOrWithProviders))).ngModule || typeOrWithProviders;
}
/**
 * @template T
 * @param {?} type
 * @param {?} name
 * @return {?}
 */
function getAnnotation(type, name) {
    /** @type {?} */
    let annotation = null;
    collect(type.__annotations__);
    collect(type.decorators);
    return annotation;
    /**
     * @param {?} annotations
     * @return {?}
     */
    function collect(annotations) {
        if (annotations) {
            annotations.forEach(readAnnotation);
        }
    }
    /**
     * @param {?} decorator
     * @return {?}
     */
    function readAnnotation(decorator) {
        if (!annotation) {
            /** @type {?} */
            const proto = Object.getPrototypeOf(decorator);
            if (proto.ngMetadataName == name) {
                annotation = (/** @type {?} */ (decorator));
            }
            else if (decorator.type) {
                /** @type {?} */
                const proto = Object.getPrototypeOf(decorator.type);
                if (proto.ngMetadataName == name) {
                    annotation = decorator.args[0];
                }
            }
        }
    }
}
/**
 * Keep track of compiled components. This is needed because in tests we often want to compile the
 * same component with more than one NgModule. This would cause an error unless we reset which
 * NgModule the component belongs to. We keep the list of compiled components here so that the
 * TestBed can reset it later.
 * @type {?}
 */
let ownerNgModule = new Map();
/** @type {?} */
let verifiedNgModule = new Map();
/**
 * @return {?}
 */
function resetCompiledComponents() {
    ownerNgModule = new Map();
    verifiedNgModule = new Map();
    moduleQueue.length = 0;
}
/**
 * Computes the combined declarations of explicit declarations, as well as declarations inherited by
 * traversing the exports of imported modules.
 * @param {?} type
 * @return {?}
 */
function computeCombinedExports(type) {
    type = resolveForwardRef(type);
    /** @type {?} */
    const ngModuleDef = getNgModuleDef(type, true);
    return [...flatten(maybeUnwrapFn(ngModuleDef.exports).map((/**
         * @param {?} type
         * @return {?}
         */
        (type) => {
            /** @type {?} */
            const ngModuleDef = getNgModuleDef(type);
            if (ngModuleDef) {
                verifySemanticsOfNgModuleDef((/** @type {?} */ ((/** @type {?} */ (type)))), false);
                return computeCombinedExports(type);
            }
            else {
                return type;
            }
        })))];
}
/**
 * Some declared components may be compiled asynchronously, and thus may not have their
 * ɵcmp set yet. If this is the case, then a reference to the module is written into
 * the `ngSelectorScope` property of the declared type.
 * @param {?} moduleType
 * @param {?} ngModule
 * @return {?}
 */
function setScopeOnDeclaredComponents(moduleType, ngModule) {
    /** @type {?} */
    const declarations = flatten(ngModule.declarations || EMPTY_ARRAY$5);
    /** @type {?} */
    const transitiveScopes = transitiveScopesFor(moduleType);
    declarations.forEach((/**
     * @param {?} declaration
     * @return {?}
     */
    declaration => {
        if (declaration.hasOwnProperty(NG_COMP_DEF)) {
            // A `ɵcmp` field exists - go ahead and patch the component directly.
            /** @type {?} */
            const component = (/** @type {?} */ (declaration));
            /** @type {?} */
            const componentDef = (/** @type {?} */ (getComponentDef(component)));
            patchComponentDefWithScope(componentDef, transitiveScopes);
        }
        else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
            // Set `ngSelectorScope` for future reference when the component compilation finishes.
            ((/** @type {?} */ (declaration))).ngSelectorScope = moduleType;
        }
    }));
}
/**
 * Patch the definition of a component with directives and pipes from the compilation scope of
 * a given module.
 * @template C
 * @param {?} componentDef
 * @param {?} transitiveScopes
 * @return {?}
 */
function patchComponentDefWithScope(componentDef, transitiveScopes) {
    componentDef.directiveDefs = (/**
     * @return {?}
     */
    () => Array.from(transitiveScopes.compilation.directives)
        .map((/**
     * @param {?} dir
     * @return {?}
     */
    dir => dir.hasOwnProperty(NG_COMP_DEF) ? (/** @type {?} */ (getComponentDef(dir))) : (/** @type {?} */ (getDirectiveDef(dir)))))
        .filter((/**
     * @param {?} def
     * @return {?}
     */
    def => !!def)));
    componentDef.pipeDefs = (/**
     * @return {?}
     */
    () => Array.from(transitiveScopes.compilation.pipes).map((/**
     * @param {?} pipe
     * @return {?}
     */
    pipe => (/** @type {?} */ (getPipeDef(pipe))))));
    componentDef.schemas = transitiveScopes.schemas;
    // Since we avoid Components/Directives/Pipes recompiling in case there are no overrides, we
    // may face a problem where previously compiled defs available to a given Component/Directive
    // are cached in TView and may become stale (in case any of these defs gets recompiled). In
    // order to avoid this problem, we force fresh TView to be created.
    componentDef.tView = null;
}
/**
 * Compute the pair of transitive scopes (compilation scope and exported scope) for a given module.
 *
 * This operation is memoized and the result is cached on the module's definition. This function can
 * be called on modules with components that have not fully compiled yet, but the result should not
 * be used until they have.
 *
 * @template T
 * @param {?} moduleType module that transitive scope should be calculated for.
 * @return {?}
 */
function transitiveScopesFor(moduleType) {
    if (!isNgModule(moduleType)) {
        throw new Error(`${moduleType.name} does not have a module def (ɵmod property)`);
    }
    /** @type {?} */
    const def = (/** @type {?} */ (getNgModuleDef(moduleType)));
    if (def.transitiveCompileScopes !== null) {
        return def.transitiveCompileScopes;
    }
    /** @type {?} */
    const scopes = {
        schemas: def.schemas || null,
        compilation: {
            directives: new Set(),
            pipes: new Set(),
        },
        exported: {
            directives: new Set(),
            pipes: new Set(),
        },
    };
    maybeUnwrapFn(def.imports).forEach((/**
     * @template I
     * @param {?} imported
     * @return {?}
     */
    (imported) => {
        /** @type {?} */
        const importedType = (/** @type {?} */ (imported));
        if (!isNgModule(importedType)) {
            throw new Error(`Importing ${importedType.name} which does not have a ɵmod property`);
        }
        // When this module imports another, the imported module's exported directives and pipes are
        // added to the compilation scope of this module.
        /** @type {?} */
        const importedScope = transitiveScopesFor(importedType);
        importedScope.exported.directives.forEach((/**
         * @param {?} entry
         * @return {?}
         */
        entry => scopes.compilation.directives.add(entry)));
        importedScope.exported.pipes.forEach((/**
         * @param {?} entry
         * @return {?}
         */
        entry => scopes.compilation.pipes.add(entry)));
    }));
    maybeUnwrapFn(def.declarations).forEach((/**
     * @param {?} declared
     * @return {?}
     */
    declared => {
        /** @type {?} */
        const declaredWithDefs = (/** @type {?} */ (declared));
        if (getPipeDef(declaredWithDefs)) {
            scopes.compilation.pipes.add(declared);
        }
        else {
            // Either declared has a ɵcmp or ɵdir, or it's a component which hasn't
            // had its template compiled yet. In either case, it gets added to the compilation's
            // directives.
            scopes.compilation.directives.add(declared);
        }
    }));
    maybeUnwrapFn(def.exports).forEach((/**
     * @template E
     * @param {?} exported
     * @return {?}
     */
    (exported) => {
        /** @type {?} */
        const exportedType = (/** @type {?} */ (exported));
        // Either the type is a module, a pipe, or a component/directive (which may not have a
        // ɵcmp as it might be compiled asynchronously).
        if (isNgModule(exportedType)) {
            // When this module exports another, the exported module's exported directives and pipes are
            // added to both the compilation and exported scopes of this module.
            /** @type {?} */
            const exportedScope = transitiveScopesFor(exportedType);
            exportedScope.exported.directives.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            entry => {
                scopes.compilation.directives.add(entry);
                scopes.exported.directives.add(entry);
            }));
            exportedScope.exported.pipes.forEach((/**
             * @param {?} entry
             * @return {?}
             */
            entry => {
                scopes.compilation.pipes.add(entry);
                scopes.exported.pipes.add(entry);
            }));
        }
        else if (getPipeDef(exportedType)) {
            scopes.exported.pipes.add(exportedType);
        }
        else {
            scopes.exported.directives.add(exportedType);
        }
    }));
    def.transitiveCompileScopes = scopes;
    return scopes;
}
/**
 * @param {?} value
 * @return {?}
 */
function expandModuleWithProviders(value) {
    if (isModuleWithProviders(value)) {
        return value.ngModule;
    }
    return value;
}
/**
 * @param {?} value
 * @return {?}
 */
function isModuleWithProviders(value) {
    return ((/** @type {?} */ (value))).ngModule !== undefined;
}
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function isNgModule(value) {
    return !!getNgModuleDef(value);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/jit/directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Compile an Angular component according to its decorator metadata, and patch the resulting
 * component def (ɵcmp) onto the component type.
 *
 * Compilation may be asynchronous (due to the need to resolve URLs for the component template or
 * other resources, for example). In the event that compilation is not immediate, `compileComponent`
 * will enqueue resource resolution into a global queue and will fail to return the `ɵcmp`
 * until the global queue has been resolved with a call to `resolveComponentResources`.
 * @param {?} type
 * @param {?} metadata
 * @return {?}
 */
function compileComponent(type, metadata) {
    // Initialize ngDevMode. This must be the first statement in compileComponent.
    // See the `initNgDevMode` docstring for more information.
    (typeof ngDevMode === 'undefined' || ngDevMode) && initNgDevMode();
    /** @type {?} */
    let ngComponentDef = null;
    // Metadata may have resources which need to be resolved.
    maybeQueueResolutionOfComponentResources(type, metadata);
    // Note that we're using the same function as `Directive`, because that's only subset of metadata
    // that we need to create the ngFactoryDef. We're avoiding using the component metadata
    // because we'd have to resolve the asynchronous templates.
    addDirectiveFactoryDef(type, metadata);
    Object.defineProperty(type, NG_COMP_DEF, {
        get: (/**
         * @return {?}
         */
        () => {
            if (ngComponentDef === null) {
                /** @type {?} */
                const compiler = getCompilerFacade();
                if (componentNeedsResolution(metadata)) {
                    /** @type {?} */
                    const error = [`Component '${type.name}' is not resolved:`];
                    if (metadata.templateUrl) {
                        error.push(` - templateUrl: ${metadata.templateUrl}`);
                    }
                    if (metadata.styleUrls && metadata.styleUrls.length) {
                        error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);
                    }
                    error.push(`Did you run and wait for 'resolveComponentResources()'?`);
                    throw new Error(error.join('\n'));
                }
                /** @type {?} */
                const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;
                /** @type {?} */
                const meta = Object.assign(Object.assign({}, directiveMetadata(type, metadata)), { typeSourceSpan: compiler.createParseSourceSpan('Component', type.name, templateUrl), template: metadata.template || '', preserveWhitespaces: metadata.preserveWhitespaces || false, styles: metadata.styles || EMPTY_ARRAY, animations: metadata.animations, directives: [], changeDetection: metadata.changeDetection, pipes: new Map(), encapsulation: metadata.encapsulation || ViewEncapsulation$1.Emulated, interpolation: metadata.interpolation, viewProviders: metadata.viewProviders || null });
                if (meta.usesInheritance) {
                    addDirectiveDefToUndecoratedParents(type);
                }
                ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
                // When NgModule decorator executed, we enqueued the module definition such that
                // it would only dequeue and add itself as module scope to all of its declarations,
                // but only if  if all of its declarations had resolved. This call runs the check
                // to see if any modules that are in the queue can be dequeued and add scope to
                // their declarations.
                flushModuleScopingQueueAsMuchAsPossible();
                // If component compilation is async, then the @NgModule annotation which declares the
                // component may execute and set an ngSelectorScope property on the component type. This
                // allows the component to patch itself with directiveDefs from the module after it
                // finishes compiling.
                if (hasSelectorScope(type)) {
                    /** @type {?} */
                    const scopes = transitiveScopesFor(type.ngSelectorScope);
                    patchComponentDefWithScope(ngComponentDef, scopes);
                }
            }
            return ngComponentDef;
        }),
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode,
    });
}
/**
 * @template T
 * @param {?} component
 * @return {?}
 */
function hasSelectorScope(component) {
    return ((/** @type {?} */ (component))).ngSelectorScope !== undefined;
}
/**
 * Compile an Angular directive according to its decorator metadata, and patch the resulting
 * directive def onto the component type.
 *
 * In the event that compilation is not immediate, `compileDirective` will return a `Promise` which
 * will resolve when compilation completes and the directive becomes usable.
 * @param {?} type
 * @param {?} directive
 * @return {?}
 */
function compileDirective(type, directive) {
    /** @type {?} */
    let ngDirectiveDef = null;
    addDirectiveFactoryDef(type, directive || {});
    Object.defineProperty(type, NG_DIR_DEF, {
        get: (/**
         * @return {?}
         */
        () => {
            if (ngDirectiveDef === null) {
                // `directive` can be null in the case of abstract directives as a base class
                // that use `@Directive()` with no selector. In that case, pass empty object to the
                // `directiveMetadata` function instead of null.
                /** @type {?} */
                const meta = getDirectiveMetadata(type, directive || {});
                ngDirectiveDef =
                    getCompilerFacade().compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
            }
            return ngDirectiveDef;
        }),
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode,
    });
}
/**
 * @param {?} type
 * @param {?} metadata
 * @return {?}
 */
function getDirectiveMetadata(type, metadata) {
    /** @type {?} */
    const name = type && type.name;
    /** @type {?} */
    const sourceMapUrl = `ng:///${name}/ɵdir.js`;
    /** @type {?} */
    const compiler = getCompilerFacade();
    /** @type {?} */
    const facade = directiveMetadata((/** @type {?} */ (type)), metadata);
    facade.typeSourceSpan = compiler.createParseSourceSpan('Directive', name, sourceMapUrl);
    if (facade.usesInheritance) {
        addDirectiveDefToUndecoratedParents(type);
    }
    return { metadata: facade, sourceMapUrl };
}
/**
 * @param {?} type
 * @param {?} metadata
 * @return {?}
 */
function addDirectiveFactoryDef(type, metadata) {
    /** @type {?} */
    let ngFactoryDef = null;
    Object.defineProperty(type, NG_FACTORY_DEF, {
        get: (/**
         * @return {?}
         */
        () => {
            if (ngFactoryDef === null) {
                /** @type {?} */
                const meta = getDirectiveMetadata(type, metadata);
                /** @type {?} */
                const compiler = getCompilerFacade();
                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/ɵfac.js`, Object.assign(Object.assign({}, meta.metadata), { injectFn: 'directiveInject', target: compiler.R3FactoryTarget.Directive }));
            }
            return ngFactoryDef;
        }),
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode,
    });
}
/**
 * @param {?} type
 * @return {?}
 */
function extendsDirectlyFromObject(type) {
    return Object.getPrototypeOf(type.prototype) === Object.prototype;
}
/**
 * Extract the `R3DirectiveMetadata` for a particular directive (either a `Directive` or a
 * `Component`).
 * @param {?} type
 * @param {?} metadata
 * @return {?}
 */
function directiveMetadata(type, metadata) {
    // Reflect inputs and outputs.
    /** @type {?} */
    const reflect = getReflect();
    /** @type {?} */
    const propMetadata = reflect.ownPropMetadata(type);
    return {
        name: type.name,
        type: type,
        typeArgumentCount: 0,
        selector: metadata.selector !== undefined ? metadata.selector : null,
        deps: reflectDependencies(type),
        host: metadata.host || EMPTY_OBJ,
        propMetadata: propMetadata,
        inputs: metadata.inputs || EMPTY_ARRAY,
        outputs: metadata.outputs || EMPTY_ARRAY,
        queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
        lifecycle: { usesOnChanges: reflect.hasLifecycleHook(type, 'ngOnChanges') },
        typeSourceSpan: (/** @type {?} */ (null)),
        usesInheritance: !extendsDirectlyFromObject(type),
        exportAs: extractExportAs(metadata.exportAs),
        providers: metadata.providers || null,
        viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery)
    };
}
/**
 * Adds a directive definition to all parent classes of a type that don't have an Angular decorator.
 * @param {?} type
 * @return {?}
 */
function addDirectiveDefToUndecoratedParents(type) {
    /** @type {?} */
    const objPrototype = Object.prototype;
    /** @type {?} */
    let parent = Object.getPrototypeOf(type.prototype).constructor;
    // Go up the prototype until we hit `Object`.
    while (parent && parent !== objPrototype) {
        // Since inheritance works if the class was annotated already, we only need to add
        // the def if there are no annotations and the def hasn't been created already.
        if (!getDirectiveDef(parent) && !getComponentDef(parent) &&
            shouldAddAbstractDirective(parent)) {
            compileDirective(parent, null);
        }
        parent = Object.getPrototypeOf(parent);
    }
}
/**
 * @param {?} selector
 * @return {?}
 */
function convertToR3QueryPredicate(selector) {
    return typeof selector === 'string' ? splitByComma(selector) : resolveForwardRef(selector);
}
/**
 * @param {?} propertyName
 * @param {?} ann
 * @return {?}
 */
function convertToR3QueryMetadata(propertyName, ann) {
    return {
        propertyName: propertyName,
        predicate: convertToR3QueryPredicate(ann.selector),
        descendants: ann.descendants,
        first: ann.first,
        read: ann.read ? ann.read : null,
        static: !!ann.static
    };
}
/**
 * @param {?} type
 * @param {?} propMetadata
 * @param {?} isQueryAnn
 * @return {?}
 */
function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
    /** @type {?} */
    const queriesMeta = [];
    for (const field in propMetadata) {
        if (propMetadata.hasOwnProperty(field)) {
            /** @type {?} */
            const annotations = propMetadata[field];
            annotations.forEach((/**
             * @param {?} ann
             * @return {?}
             */
            ann => {
                if (isQueryAnn(ann)) {
                    if (!ann.selector) {
                        throw new Error(`Can't construct a query for the property "${field}" of ` +
                            `"${stringifyForError(type)}" since the query selector wasn't defined.`);
                    }
                    if (annotations.some(isInputAnnotation)) {
                        throw new Error(`Cannot combine @Input decorators with query decorators`);
                    }
                    queriesMeta.push(convertToR3QueryMetadata(field, ann));
                }
            }));
        }
    }
    return queriesMeta;
}
/**
 * @param {?} exportAs
 * @return {?}
 */
function extractExportAs(exportAs) {
    return exportAs === undefined ? null : splitByComma(exportAs);
}
/**
 * @param {?} value
 * @return {?}
 */
function isContentQuery(value) {
    /** @type {?} */
    const name = value.ngMetadataName;
    return name === 'ContentChild' || name === 'ContentChildren';
}
/**
 * @param {?} value
 * @return {?}
 */
function isViewQuery(value) {
    /** @type {?} */
    const name = value.ngMetadataName;
    return name === 'ViewChild' || name === 'ViewChildren';
}
/**
 * @param {?} value
 * @return {?}
 */
function isInputAnnotation(value) {
    return value.ngMetadataName === 'Input';
}
/**
 * @param {?} value
 * @return {?}
 */
function splitByComma(value) {
    return value.split(',').map((/**
     * @param {?} piece
     * @return {?}
     */
    piece => piece.trim()));
}
/** @type {?} */
const LIFECYCLE_HOOKS = [
    'ngOnChanges', 'ngOnInit', 'ngOnDestroy', 'ngDoCheck', 'ngAfterViewInit', 'ngAfterViewChecked',
    'ngAfterContentInit', 'ngAfterContentChecked'
];
/**
 * @param {?} type
 * @return {?}
 */
function shouldAddAbstractDirective(type) {
    /** @type {?} */
    const reflect = getReflect();
    if (LIFECYCLE_HOOKS.some((/**
     * @param {?} hookName
     * @return {?}
     */
    hookName => reflect.hasLifecycleHook(type, hookName)))) {
        return true;
    }
    /** @type {?} */
    const propMetadata = reflect.propMetadata(type);
    for (const field in propMetadata) {
        /** @type {?} */
        const annotations = propMetadata[field];
        for (let i = 0; i < annotations.length; i++) {
            /** @type {?} */
            const current = annotations[i];
            /** @type {?} */
            const metadataName = current.ngMetadataName;
            if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) ||
                metadataName === 'Output' || metadataName === 'HostBinding' ||
                metadataName === 'HostListener') {
                return true;
            }
        }
    }
    return false;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render3/jit/pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} type
 * @param {?} meta
 * @return {?}
 */
function compilePipe(type, meta) {
    /** @type {?} */
    let ngPipeDef = null;
    /** @type {?} */
    let ngFactoryDef = null;
    Object.defineProperty(type, NG_FACTORY_DEF, {
        get: (/**
         * @return {?}
         */
        () => {
            if (ngFactoryDef === null) {
                /** @type {?} */
                const metadata = getPipeMetadata(type, meta);
                /** @type {?} */
                const compiler = getCompilerFacade();
                ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/ɵfac.js`, Object.assign(Object.assign({}, metadata), { injectFn: 'directiveInject', target: compiler.R3FactoryTarget.Pipe }));
            }
            return ngFactoryDef;
        }),
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode,
    });
    Object.defineProperty(type, NG_PIPE_DEF, {
        get: (/**
         * @return {?}
         */
        () => {
            if (ngPipeDef === null) {
                /** @type {?} */
                const metadata = getPipeMetadata(type, meta);
                ngPipeDef = getCompilerFacade().compilePipe(angularCoreEnv, `ng:///${metadata.name}/ɵpipe.js`, metadata);
            }
            return ngPipeDef;
        }),
        // Make the property configurable in dev mode to allow overriding in tests
        configurable: !!ngDevMode,
    });
}
/**
 * @param {?} type
 * @param {?} meta
 * @return {?}
 */
function getPipeMetadata(type, meta) {
    return {
        type: type,
        typeArgumentCount: 0,
        name: type.name,
        deps: reflectDependencies(type),
        pipeName: meta.name,
        pure: meta.pure !== undefined ? meta.pure : true
    };
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/metadata/directives.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Type of the Directive decorator / constructor function.
 * \@publicApi
 * @record
 */
function DirectiveDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ0$e = /**
 * @param {?=} dir
 * @return {?}
 */
(dir = {}) => dir, ɵ1$3 = /**
 * @param {?} type
 * @param {?} meta
 * @return {?}
 */
(type, meta) => SWITCH_COMPILE_DIRECTIVE(type, meta);
/**
 * Type of the Directive metadata.
 *
 * \@publicApi
 * @type {?}
 */
const Directive = makeDecorator('Directive', (ɵ0$e), undefined, undefined, (ɵ1$3));
/**
 * Component decorator interface
 *
 * \@publicApi
 * @record
 */
function ComponentDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ2$1 = /**
 * @param {?=} c
 * @return {?}
 */
(c = {}) => (Object.assign({ changeDetection: ChangeDetectionStrategy.Default }, c)), ɵ3$1 = /**
 * @param {?} type
 * @param {?} meta
 * @return {?}
 */
(type, meta) => SWITCH_COMPILE_COMPONENT(type, meta);
/**
 * Component decorator and metadata.
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Component = makeDecorator('Component', (ɵ2$1), Directive, undefined, (ɵ3$1));
/**
 * Type of the Pipe decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function PipeDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ4 = /**
 * @param {?} p
 * @return {?}
 */
(p) => (Object.assign({ pure: true }, p)), ɵ5 = /**
 * @param {?} type
 * @param {?} meta
 * @return {?}
 */
(type, meta) => SWITCH_COMPILE_PIPE(type, meta);
/**
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Pipe = makeDecorator('Pipe', (ɵ4), undefined, undefined, (ɵ5));
/**
 * \@publicApi
 * @record
 */
function InputDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ6 = /**
 * @param {?=} bindingPropertyName
 * @return {?}
 */
(bindingPropertyName) => ({ bindingPropertyName });
/**
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Input = makePropDecorator('Input', (ɵ6));
/**
 * Type of the Output decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function OutputDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ7 = /**
 * @param {?=} bindingPropertyName
 * @return {?}
 */
(bindingPropertyName) => ({ bindingPropertyName });
/**
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const Output = makePropDecorator('Output', (ɵ7));
/**
 * Type of the HostBinding decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function HostBindingDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ8 = /**
 * @param {?=} hostPropertyName
 * @return {?}
 */
(hostPropertyName) => ({ hostPropertyName });
/**
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const HostBinding = makePropDecorator('HostBinding', (ɵ8));
/**
 * Type of the HostListener decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function HostListenerDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ9 = /**
 * @param {?=} eventName
 * @param {?=} args
 * @return {?}
 */
(eventName, args) => ({ eventName, args });
/**
 * Decorator that binds a DOM event to a host listener and supplies configuration metadata.
 * Angular invokes the supplied handler method when the host element emits the specified event,
 * and updates the bound element with the result.
 *
 * If the handler method returns false, applies `preventDefault` on the bound element.
 *
 * \@usageNotes
 *
 * The following example declares a directive
 * that attaches a click listener to a button and counts clicks.
 *
 * ```ts
 * \@Directive({selector: 'button[counting]'})
 * class CountClicks {
 *   numberOfClicks = 0;
 *
 * \@HostListener('click', ['$event.target'])
 *   onClick(btn) {
 *     console.log('button', btn, 'number of clicks:', this.numberOfClicks++);
 *  }
 * }
 *
 * \@Component({
 *   selector: 'app',
 *   template: '<button counting>Increment</button>',
 * })
 * class App {}
 *
 * ```
 *
 * The following example registers another DOM event handler that listens for key-press events.
 * ``` ts
 * import { HostListener, Component } from "\@angular/core";
 *
 * \@Component({
 *   selector: 'app',
 *   template: `<h1>Hello, you have pressed keys {{counter}} number of times!</h1> Press any key to
 * increment the counter.
 *   <button (click)="resetCounter()">Reset Counter</button>`
 * })
 * class AppComponent {
 *   counter = 0;
 * \@HostListener('window:keydown', ['$event'])
 *   handleKeyDown(event: KeyboardEvent) {
 *     this.counter++;
 *   }
 *   resetCounter() {
 *     this.counter = 0;
 *   }
 * }
 * ```
 *
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const HostListener = makePropDecorator('HostListener', (ɵ9));
/** @type {?} */
const SWITCH_COMPILE_COMPONENT__POST_R3__ = compileComponent;
/** @type {?} */
const SWITCH_COMPILE_DIRECTIVE__POST_R3__ = compileDirective;
/** @type {?} */
const SWITCH_COMPILE_PIPE__POST_R3__ = compilePipe;
/** @type {?} */
const SWITCH_COMPILE_COMPONENT__PRE_R3__ = noop;
/** @type {?} */
const SWITCH_COMPILE_DIRECTIVE__PRE_R3__ = noop;
/** @type {?} */
const SWITCH_COMPILE_PIPE__PRE_R3__ = noop;
/** @type {?} */
const SWITCH_COMPILE_COMPONENT = SWITCH_COMPILE_COMPONENT__POST_R3__;
/** @type {?} */
const SWITCH_COMPILE_DIRECTIVE = SWITCH_COMPILE_DIRECTIVE__POST_R3__;
/** @type {?} */
const SWITCH_COMPILE_PIPE = SWITCH_COMPILE_PIPE__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/metadata/ng_module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Represents the expansion of an `NgModule` into its scopes.
 *
 * A scope is a set of directives and pipes that are visible in a particular context. Each
 * `NgModule` has two scopes. The `compilation` scope is the set of directives and pipes that will
 * be recognized in the templates of components declared by the module. The `exported` scope is the
 * set of directives and pipes exported by a module (that is, module B's exported scope gets added
 * to module A's compilation scope when module A imports B).
 * @record
 */
function NgModuleTransitiveScopes() { }
if (false) {}
/**
 * Runtime link information for NgModules.
 *
 * This is the internal data structure used by the runtime to assemble components, directives,
 * pipes, and injectors.
 *
 * NOTE: Always use `ɵɵdefineNgModule` function to create this object,
 * never create the object directly since the shape of this object
 * can change between versions.
 * @record
 * @template T
 */
function NgModuleDef() { }
if (false) {}
/**
 * A wrapper around an NgModule that associates it with the providers.
 *
 * @param T the module type. In Ivy applications, this must be explicitly
 * provided.
 *
 * Note that using ModuleWithProviders without a generic type is deprecated.
 * The generic will become required in a future version of Angular.
 *
 * \@publicApi
 * @record
 * @template T
 */
function ModuleWithProviders() { }
if (false) {}
/**
 * Type of the NgModule decorator / constructor function.
 *
 * \@publicApi
 * @record
 */
function NgModuleDecorator() { }
// WARNING: interface has both a type and a value, skipping emit
const ɵ0$f = /**
 * @param {?} ngModule
 * @return {?}
 */
(ngModule) => ngModule, ɵ1$4 = /**
 * Decorator that marks the following class as an NgModule, and supplies
 * configuration metadata for it.
 *
 * * The `declarations` and `entryComponents` options configure the compiler
 * with information about what belongs to the NgModule.
 * * The `providers` options configures the NgModule's injector to provide
 * dependencies the NgModule members.
 * * The `imports` and `exports` options bring in members from other modules, and make
 * this module's members available to others.
 * @param {?} type
 * @param {?} meta
 * @return {?}
 */
(type, meta) => SWITCH_COMPILE_NGMODULE(type, meta);
/**
 * \@Annotation
 * \@publicApi
 * @type {?}
 */
const NgModule = makeDecorator('NgModule', (ɵ0$f), undefined, undefined, (ɵ1$4));
/**
 * \@description
 * Hook for manual bootstrapping of the application instead of using bootstrap array in \@NgModule
 * annotation.
 *
 * Reference to the current application is provided as a parameter.
 *
 * See ["Bootstrapping"](guide/bootstrapping) and ["Entry components"](guide/entry-components).
 *
 * \@usageNotes
 * ```typescript
 * class AppModule implements DoBootstrap {
 *   ngDoBootstrap(appRef: ApplicationRef) {
 *     appRef.bootstrap(AppComponent); // Or some other component
 *   }
 * }
 * ```
 *
 * \@publicApi
 * @record
 */
function DoBootstrap() { }
if (false) {}
/**
 * @param {?} moduleType
 * @param {?=} metadata
 * @return {?}
 */
function preR3NgModuleCompile(moduleType, metadata) {
    /** @type {?} */
    let imports = (metadata && metadata.imports) || [];
    if (metadata && metadata.exports) {
        imports = [...imports, metadata.exports];
    }
    ((/** @type {?} */ (moduleType))).ɵinj = ɵɵdefineInjector({
        factory: convertInjectableProviderToFactory(moduleType, { useClass: moduleType }),
        providers: metadata && metadata.providers,
        imports: imports,
    });
}
/** @type {?} */
const SWITCH_COMPILE_NGMODULE__POST_R3__ = compileNgModule;
/** @type {?} */
const SWITCH_COMPILE_NGMODULE__PRE_R3__ = preR3NgModuleCompile;
/** @type {?} */
const SWITCH_COMPILE_NGMODULE = SWITCH_COMPILE_NGMODULE__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/metadata.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/application_init.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An injection token that allows you to provide one or more initialization functions.
 * These function are injected at application startup and executed during
 * app initialization. If any of these functions returns a Promise, initialization
 * does not complete until the Promise is resolved.
 *
 * You can, for example, create a factory function that loads language data
 * or an external configuration, and provide that function to the `APP_INITIALIZER` token.
 * That way, the function is executed during the application bootstrap process,
 * and the needed data is available on startup.
 *
 * \@publicApi
 * @type {?}
 */
const APP_INITIALIZER = new InjectionToken('Application Initializer');
/**
 * A class that reflects the state of running {\@link APP_INITIALIZER}s.
 *
 * \@publicApi
 */
class ApplicationInitStatus {
    /**
     * @param {?} appInits
     */
    constructor(appInits) {
        this.appInits = appInits;
        this.initialized = false;
        this.done = false;
        this.donePromise = new Promise((/**
         * @param {?} res
         * @param {?} rej
         * @return {?}
         */
        (res, rej) => {
            this.resolve = res;
            this.reject = rej;
        }));
    }
    /**
     * \@internal
     * @return {?}
     */
    runInitializers() {
        if (this.initialized) {
            return;
        }
        /** @type {?} */
        const asyncInitPromises = [];
        /** @type {?} */
        const complete = (/**
         * @return {?}
         */
        () => {
            ((/** @type {?} */ (this))).done = true;
            this.resolve();
        });
        if (this.appInits) {
            for (let i = 0; i < this.appInits.length; i++) {
                /** @type {?} */
                const initResult = this.appInits[i]();
                if (isPromise(initResult)) {
                    asyncInitPromises.push(initResult);
                }
            }
        }
        Promise.all(asyncInitPromises).then((/**
         * @return {?}
         */
        () => { complete(); })).catch((/**
         * @param {?} e
         * @return {?}
         */
        e => { this.reject(e); }));
        if (asyncInitPromises.length === 0) {
            complete();
        }
        this.initialized = true;
    }
}
ApplicationInitStatus.ɵfac = function ApplicationInitStatus_Factory(t) { return new (t || ApplicationInitStatus)(ɵɵinject(APP_INITIALIZER, 8)); };
ApplicationInitStatus.ɵprov = ɵɵdefineInjectable({ token: ApplicationInitStatus, factory: ApplicationInitStatus.ɵfac });
/** @nocollapse */
ApplicationInitStatus.ctorParameters = () => [
    { type: Array, decorators: [{ type: Inject, args: [APP_INITIALIZER,] }, { type: Optional }] }
];
/*@__PURE__*/ (function () { setClassMetadata(ApplicationInitStatus, [{
        type: Injectable
    }], function () { return [{ type: Array, decorators: [{
                type: Inject,
                args: [APP_INITIALIZER]
            }, {
                type: Optional
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/application_tokens.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A DI Token representing a unique string id assigned to the application by Angular and used
 * primarily for prefixing application attributes and CSS styles when
 * {\@link ViewEncapsulation#Emulated ViewEncapsulation.Emulated} is being used.
 *
 * If you need to avoid randomly generated value to be used as an application id, you can provide
 * a custom value via a DI provider <!-- TODO: provider --> configuring the root {\@link Injector}
 * using this token.
 * \@publicApi
 * @type {?}
 */
const APP_ID = new InjectionToken('AppId');
/**
 * @return {?}
 */
function _appIdRandomProviderFactory() {
    return `${_randomChar()}${_randomChar()}${_randomChar()}`;
}
/**
 * Providers that will generate a random APP_ID_TOKEN.
 * \@publicApi
 * @type {?}
 */
const APP_ID_RANDOM_PROVIDER = {
    provide: APP_ID,
    useFactory: _appIdRandomProviderFactory,
    deps: (/** @type {?} */ ([])),
};
/**
 * @return {?}
 */
function _randomChar() {
    return String.fromCharCode(97 + Math.floor(Math.random() * 25));
}
/**
 * A function that will be executed when a platform is initialized.
 * \@publicApi
 * @type {?}
 */
const PLATFORM_INITIALIZER = new InjectionToken('Platform Initializer');
/**
 * A token that indicates an opaque platform id.
 * \@publicApi
 * @type {?}
 */
const PLATFORM_ID = new InjectionToken('Platform ID');
/**
 * All callbacks provided via this token will be called for every component that is bootstrapped.
 * Signature of the callback:
 *
 * `(componentRef: ComponentRef) => void`.
 *
 * \@publicApi
 * @type {?}
 */
const APP_BOOTSTRAP_LISTENER = new InjectionToken('appBootstrapListener');
/**
 * A token which indicates the root directory of the application
 * \@publicApi
 * @type {?}
 */
const PACKAGE_ROOT_URL = new InjectionToken('Application Packages Root URL');

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/console.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Console {
    /**
     * @param {?} message
     * @return {?}
     */
    log(message) {
        // tslint:disable-next-line:no-console
        console.log(message);
    }
    // Note: for reporting errors use `DOM.logError()` as it is platform specific
    /**
     * @param {?} message
     * @return {?}
     */
    warn(message) {
        // tslint:disable-next-line:no-console
        console.warn(message);
    }
}
Console.ɵfac = function Console_Factory(t) { return new (t || Console)(); };
Console.ɵprov = ɵɵdefineInjectable({ token: Console, factory: Console.ɵfac });
/*@__PURE__*/ (function () { setClassMetadata(Console, [{
        type: Injectable
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/i18n/tokens.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Provide this token to set the locale of your application.
 * It is used for i18n extraction, by i18n pipes (DatePipe, I18nPluralPipe, CurrencyPipe,
 * DecimalPipe and PercentPipe) and by ICU expressions.
 *
 * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * import { LOCALE_ID } from '\@angular/core';
 * import { platformBrowserDynamic } from '\@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: LOCALE_ID, useValue: 'en-US' }]
 * });
 * ```
 *
 * \@publicApi
 * @type {?}
 */
const LOCALE_ID$1 = new InjectionToken('LocaleId');
/**
 * Provide this token to set the default currency code your application uses for
 * CurrencyPipe when there is no currency code passed into it. This is only used by
 * CurrencyPipe and has no relation to locale currency. Defaults to USD if not configured.
 *
 * See the [i18n guide](guide/i18n#setting-up-locale) for more information.
 *
 * <div class="alert is-helpful">
 *
 * **Deprecation notice:**
 *
 * The default currency code is currently always `USD` but this is deprecated from v9.
 *
 * **In v10 the default currency code will be taken from the current locale.**
 *
 * If you need the previous behavior then set it by creating a `DEFAULT_CURRENCY_CODE` provider in
 * your application `NgModule`:
 *
 * ```ts
 * {provide: DEFAULT_CURRENCY_CODE, useValue: 'USD'}
 * ```
 *
 * </div>
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * import { platformBrowserDynamic } from '\@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: DEFAULT_CURRENCY_CODE, useValue: 'EUR' }]
 * });
 * ```
 *
 * \@publicApi
 * @type {?}
 */
const DEFAULT_CURRENCY_CODE = new InjectionToken('DefaultCurrencyCode');
/**
 * Use this token at bootstrap to provide the content of your translation file (`xtb`,
 * `xlf` or `xlf2`) when you want to translate your application in another language.
 *
 * See the [i18n guide](guide/i18n#merge) for more information.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * import { TRANSLATIONS } from '\@angular/core';
 * import { platformBrowserDynamic } from '\@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * // content of your translation file
 * const translations = '....';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: TRANSLATIONS, useValue: translations }]
 * });
 * ```
 *
 * \@publicApi
 * @type {?}
 */
const TRANSLATIONS = new InjectionToken('Translations');
/**
 * Provide this token at bootstrap to set the format of your {\@link TRANSLATIONS}: `xtb`,
 * `xlf` or `xlf2`.
 *
 * See the [i18n guide](guide/i18n#merge) for more information.
 *
 * \@usageNotes
 * ### Example
 *
 * ```typescript
 * import { TRANSLATIONS_FORMAT } from '\@angular/core';
 * import { platformBrowserDynamic } from '\@angular/platform-browser-dynamic';
 * import { AppModule } from './app/app.module';
 *
 * platformBrowserDynamic().bootstrapModule(AppModule, {
 *   providers: [{provide: TRANSLATIONS_FORMAT, useValue: 'xlf' }]
 * });
 * ```
 *
 * \@publicApi
 * @type {?}
 */
const TRANSLATIONS_FORMAT = new InjectionToken('TranslationsFormat');
/** @enum {number} */
const MissingTranslationStrategy = {
    Error: 0,
    Warning: 1,
    Ignore: 2,
};
MissingTranslationStrategy[MissingTranslationStrategy.Error] = 'Error';
MissingTranslationStrategy[MissingTranslationStrategy.Warning] = 'Warning';
MissingTranslationStrategy[MissingTranslationStrategy.Ignore] = 'Ignore';

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/ivy_switch.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @type {?} */
const SWITCH_IVY_ENABLED__POST_R3__ = true;
/** @type {?} */
const SWITCH_IVY_ENABLED__PRE_R3__ = false;
/** @type {?} */
const ivyEnabled = SWITCH_IVY_ENABLED__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/compiler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Combination of NgModuleFactory and ComponentFactorys.
 *
 * \@publicApi
 * @template T
 */
class ModuleWithComponentFactories {
    /**
     * @param {?} ngModuleFactory
     * @param {?} componentFactories
     */
    constructor(ngModuleFactory, componentFactories) {
        this.ngModuleFactory = ngModuleFactory;
        this.componentFactories = componentFactories;
    }
}
if (false) {}
/**
 * @return {?}
 */
function _throwError() {
    throw new Error(`Runtime compiler is not loaded`);
}
/** @type {?} */
const Compiler_compileModuleSync__PRE_R3__ = (/** @type {?} */ (_throwError));
/** @type {?} */
const Compiler_compileModuleSync__POST_R3__ = (/**
 * @template T
 * @param {?} moduleType
 * @return {?}
 */
function (moduleType) {
    return new NgModuleFactory$1(moduleType);
});
/** @type {?} */
const Compiler_compileModuleSync = Compiler_compileModuleSync__POST_R3__;
/** @type {?} */
const Compiler_compileModuleAsync__PRE_R3__ = (/** @type {?} */ (_throwError));
/** @type {?} */
const Compiler_compileModuleAsync__POST_R3__ = (/**
 * @template T
 * @param {?} moduleType
 * @return {?}
 */
function (moduleType) {
    return Promise.resolve(Compiler_compileModuleSync__POST_R3__(moduleType));
});
/** @type {?} */
const Compiler_compileModuleAsync = Compiler_compileModuleAsync__POST_R3__;
/** @type {?} */
const Compiler_compileModuleAndAllComponentsSync__PRE_R3__ = (/** @type {?} */ (_throwError));
/** @type {?} */
const Compiler_compileModuleAndAllComponentsSync__POST_R3__ = (/**
 * @template T
 * @param {?} moduleType
 * @return {?}
 */
function (moduleType) {
    /** @type {?} */
    const ngModuleFactory = Compiler_compileModuleSync__POST_R3__(moduleType);
    /** @type {?} */
    const moduleDef = (/** @type {?} */ (getNgModuleDef(moduleType)));
    /** @type {?} */
    const componentFactories = maybeUnwrapFn(moduleDef.declarations)
        .reduce((/**
     * @param {?} factories
     * @param {?} declaration
     * @return {?}
     */
    (factories, declaration) => {
        /** @type {?} */
        const componentDef = getComponentDef(declaration);
        componentDef && factories.push(new ComponentFactory$1(componentDef));
        return factories;
    }), (/** @type {?} */ ([])));
    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
});
/** @type {?} */
const Compiler_compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync__POST_R3__;
/** @type {?} */
const Compiler_compileModuleAndAllComponentsAsync__PRE_R3__ = (/** @type {?} */ (_throwError));
/** @type {?} */
const Compiler_compileModuleAndAllComponentsAsync__POST_R3__ = (/**
 * @template T
 * @param {?} moduleType
 * @return {?}
 */
function (moduleType) {
    return Promise.resolve(Compiler_compileModuleAndAllComponentsSync__POST_R3__(moduleType));
});
/** @type {?} */
const Compiler_compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync__POST_R3__;
/**
 * Low-level service for running the angular compiler during runtime
 * to create {\@link ComponentFactory}s, which
 * can later be used to create and render a Component instance.
 *
 * Each `\@NgModule` provides an own `Compiler` to its injector,
 * that will use the directives/pipes of the ng module for compilation
 * of components.
 *
 * \@publicApi
 */
class Compiler {
    constructor() {
        /**
         * Compiles the given NgModule and all of its components. All templates of the components listed
         * in `entryComponents` have to be inlined.
         */
        this.compileModuleSync = Compiler_compileModuleSync;
        /**
         * Compiles the given NgModule and all of its components
         */
        this.compileModuleAsync = Compiler_compileModuleAsync;
        /**
         * Same as {\@link #compileModuleSync} but also creates ComponentFactories for all components.
         */
        this.compileModuleAndAllComponentsSync = Compiler_compileModuleAndAllComponentsSync;
        /**
         * Same as {\@link #compileModuleAsync} but also creates ComponentFactories for all components.
         */
        this.compileModuleAndAllComponentsAsync = Compiler_compileModuleAndAllComponentsAsync;
    }
    /**
     * Clears all caches.
     * @return {?}
     */
    clearCache() { }
    /**
     * Clears the cache for the given component/ngModule.
     * @param {?} type
     * @return {?}
     */
    clearCacheFor(type) { }
    /**
     * Returns the id for a given NgModule, if one is defined and known to the compiler.
     * @param {?} moduleType
     * @return {?}
     */
    getModuleId(moduleType) { return undefined; }
}
Compiler.ɵfac = function Compiler_Factory(t) { return new (t || Compiler)(); };
Compiler.ɵprov = ɵɵdefineInjectable({ token: Compiler, factory: Compiler.ɵfac });
/*@__PURE__*/ (function () { setClassMetadata(Compiler, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {}
/**
 * Token to provide CompilerOptions in the platform injector.
 *
 * \@publicApi
 * @type {?}
 */
const COMPILER_OPTIONS = new InjectionToken('compilerOptions');
/**
 * A factory for creating a Compiler
 *
 * \@publicApi
 * @abstract
 */
class CompilerFactory {
}
if (false) {}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
const promise = (() => Promise.resolve(0))();
function scheduleMicroTask(fn) {
    if (typeof Zone === 'undefined') {
        // use promise to schedule microTask instead of use Zone
        promise.then(() => { fn && fn.apply(null, null); });
    }
    else {
        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);
    }
}

/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
function getNativeRequestAnimationFrame() {
    let nativeRequestAnimationFrame = _global['requestAnimationFrame'];
    let nativeCancelAnimationFrame = _global['cancelAnimationFrame'];
    if (typeof Zone !== 'undefined' && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
        // use unpatched version of requestAnimationFrame(native delegate) if possible
        // to avoid another Change detection
        const unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__('OriginalDelegate')];
        if (unpatchedRequestAnimationFrame) {
            nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
        }
        const unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__('OriginalDelegate')];
        if (unpatchedCancelAnimationFrame) {
            nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
        }
    }
    return { nativeRequestAnimationFrame, nativeCancelAnimationFrame };
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/zone/ng_zone.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An injectable service for executing work inside or outside of the Angular zone.
 *
 * The most common use of this service is to optimize performance when starting a work consisting of
 * one or more asynchronous tasks that don't require UI updates or error handling to be handled by
 * Angular. Such tasks can be kicked off via {\@link #runOutsideAngular} and if needed, these tasks
 * can reenter the Angular zone via {\@link #run}.
 *
 * <!-- TODO: add/fix links to:
 *   - docs explaining zones and the use of zones in Angular and change-detection
 *   - link to runOutsideAngular/run (throughout this file!)
 *   -->
 *
 * \@usageNotes
 * ### Example
 *
 * ```
 * import {Component, NgZone} from '\@angular/core';
 * import {NgIf} from '\@angular/common';
 *
 * \@Component({
 *   selector: 'ng-zone-demo',
 *   template: `
 *     <h2>Demo: NgZone</h2>
 *
 *     <p>Progress: {{progress}}%</p>
 *     <p *ngIf="progress >= 100">Done processing {{label}} of Angular zone!</p>
 *
 *     <button (click)="processWithinAngularZone()">Process within Angular zone</button>
 *     <button (click)="processOutsideOfAngularZone()">Process outside of Angular zone</button>
 *   `,
 * })
 * export class NgZoneDemo {
 *   progress: number = 0;
 *   label: string;
 *
 *   constructor(private _ngZone: NgZone) {}
 *
 *   // Loop inside the Angular zone
 *   // so the UI DOES refresh after each setTimeout cycle
 *   processWithinAngularZone() {
 *     this.label = 'inside';
 *     this.progress = 0;
 *     this._increaseProgress(() => console.log('Inside Done!'));
 *   }
 *
 *   // Loop outside of the Angular zone
 *   // so the UI DOES NOT refresh after each setTimeout cycle
 *   processOutsideOfAngularZone() {
 *     this.label = 'outside';
 *     this.progress = 0;
 *     this._ngZone.runOutsideAngular(() => {
 *       this._increaseProgress(() => {
 *         // reenter the Angular zone and display done
 *         this._ngZone.run(() => { console.log('Outside Done!'); });
 *       });
 *     });
 *   }
 *
 *   _increaseProgress(doneCallback: () => void) {
 *     this.progress += 1;
 *     console.log(`Current progress: ${this.progress}%`);
 *
 *     if (this.progress < 100) {
 *       window.setTimeout(() => this._increaseProgress(doneCallback), 10);
 *     } else {
 *       doneCallback();
 *     }
 *   }
 * }
 * ```
 *
 * \@publicApi
 */
class NgZone {
    /**
     * @param {?} __0
     */
    constructor({ enableLongStackTrace = false, shouldCoalesceEventChangeDetection = false }) {
        this.hasPendingMacrotasks = false;
        this.hasPendingMicrotasks = false;
        /**
         * Whether there are no outstanding microtasks or macrotasks.
         */
        this.isStable = true;
        /**
         * Notifies when code enters Angular Zone. This gets fired first on VM Turn.
         */
        this.onUnstable = new EventEmitter(false);
        /**
         * Notifies when there is no more microtasks enqueued in the current VM Turn.
         * This is a hint for Angular to do change detection, which may enqueue more microtasks.
         * For this reason this event can fire multiple times per VM Turn.
         */
        this.onMicrotaskEmpty = new EventEmitter(false);
        /**
         * Notifies when the last `onMicrotaskEmpty` has run and there are no more microtasks, which
         * implies we are about to relinquish VM turn.
         * This event gets called just once.
         */
        this.onStable = new EventEmitter(false);
        /**
         * Notifies that an error has been delivered.
         */
        this.onError = new EventEmitter(false);
        if (typeof Zone == 'undefined') {
            throw new Error(`In this configuration Angular requires Zone.js`);
        }
        Zone.assertZonePatched();
        /** @type {?} */
        const self = (/** @type {?} */ ((/** @type {?} */ (this))));
        self._nesting = 0;
        self._outer = self._inner = Zone.current;
        if (((/** @type {?} */ (Zone)))['wtfZoneSpec']) {
            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['wtfZoneSpec']);
        }
        if (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']) {
            self._inner = self._inner.fork(new ((/** @type {?} */ (((/** @type {?} */ (Zone)))['TaskTrackingZoneSpec']))));
        }
        if (enableLongStackTrace && ((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']) {
            self._inner = self._inner.fork(((/** @type {?} */ (Zone)))['longStackTraceZoneSpec']);
        }
        self.shouldCoalesceEventChangeDetection = shouldCoalesceEventChangeDetection;
        self.lastRequestAnimationFrameId = -1;
        self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
        forkInnerZoneWithAngularBehavior(self);
    }
    /**
     * @return {?}
     */
    static isInAngularZone() { return Zone.current.get('isAngularZone') === true; }
    /**
     * @return {?}
     */
    static assertInAngularZone() {
        if (!NgZone.isInAngularZone()) {
            throw new Error('Expected to be in Angular Zone, but it is not!');
        }
    }
    /**
     * @return {?}
     */
    static assertNotInAngularZone() {
        if (NgZone.isInAngularZone()) {
            throw new Error('Expected to not be in Angular Zone, but it is!');
        }
    }
    /**
     * Executes the `fn` function synchronously within the Angular zone and returns value returned by
     * the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {\@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     * @template T
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @return {?}
     */
    run(fn, applyThis, applyArgs) {
        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.run(fn, applyThis, applyArgs)));
    }
    /**
     * Executes the `fn` function synchronously within the Angular zone as a task and returns value
     * returned by the function.
     *
     * Running functions via `run` allows you to reenter Angular zone from a task that was executed
     * outside of the Angular zone (typically started via {\@link #runOutsideAngular}).
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * within the Angular zone.
     *
     * If a synchronous error happens it will be rethrown and not reported via `onError`.
     * @template T
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @param {?=} name
     * @return {?}
     */
    runTask(fn, applyThis, applyArgs, name) {
        /** @type {?} */
        const zone = ((/** @type {?} */ ((/** @type {?} */ (this)))))._inner;
        /** @type {?} */
        const task = zone.scheduleEventTask('NgZoneEvent: ' + name, fn, EMPTY_PAYLOAD, noop$1, noop$1);
        try {
            return (/** @type {?} */ (zone.runTask(task, applyThis, applyArgs)));
        }
        finally {
            zone.cancelTask(task);
        }
    }
    /**
     * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
     * rethrown.
     * @template T
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @return {?}
     */
    runGuarded(fn, applyThis, applyArgs) {
        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._inner.runGuarded(fn, applyThis, applyArgs)));
    }
    /**
     * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
     * the function.
     *
     * Running functions via {\@link #runOutsideAngular} allows you to escape Angular's zone and do
     * work that
     * doesn't trigger Angular change-detection or is subject to Angular's error handling.
     *
     * Any future tasks or microtasks scheduled from within this function will continue executing from
     * outside of the Angular zone.
     *
     * Use {\@link #run} to reenter the Angular zone and do work that updates the application model.
     * @template T
     * @param {?} fn
     * @return {?}
     */
    runOutsideAngular(fn) {
        return (/** @type {?} */ (((/** @type {?} */ ((/** @type {?} */ (this)))))._outer.run(fn)));
    }
}
if (false) {}
/**
 * @return {?}
 */
function noop$1() { }
/** @type {?} */
const EMPTY_PAYLOAD = {};
/**
 * @record
 */
function NgZonePrivate() { }
if (false) {}
/**
 * @param {?} zone
 * @return {?}
 */
function checkStable(zone) {
    if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
        try {
            zone._nesting++;
            zone.onMicrotaskEmpty.emit(null);
        }
        finally {
            zone._nesting--;
            if (!zone.hasPendingMicrotasks) {
                try {
                    zone.runOutsideAngular((/**
                     * @return {?}
                     */
                    () => zone.onStable.emit(null)));
                }
                finally {
                    zone.isStable = true;
                }
            }
        }
    }
}
/**
 * @param {?} zone
 * @return {?}
 */
function delayChangeDetectionForEvents(zone) {
    if (zone.lastRequestAnimationFrameId !== -1) {
        return;
    }
    zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, (/**
     * @return {?}
     */
    () => {
        zone.lastRequestAnimationFrameId = -1;
        updateMicroTaskStatus(zone);
        checkStable(zone);
    }));
    updateMicroTaskStatus(zone);
}
/**
 * @param {?} zone
 * @return {?}
 */
function forkInnerZoneWithAngularBehavior(zone) {
    /** @type {?} */
    const delayChangeDetectionForEventsDelegate = (/**
     * @return {?}
     */
    () => { delayChangeDetectionForEvents(zone); });
    /** @type {?} */
    const maybeDelayChangeDetection = !!zone.shouldCoalesceEventChangeDetection &&
        zone.nativeRequestAnimationFrame && delayChangeDetectionForEventsDelegate;
    zone._inner = zone._inner.fork({
        name: 'angular',
        properties: (/** @type {?} */ ({ 'isAngularZone': true, 'maybeDelayChangeDetection': maybeDelayChangeDetection })),
        onInvokeTask: (/**
         * @param {?} delegate
         * @param {?} current
         * @param {?} target
         * @param {?} task
         * @param {?} applyThis
         * @param {?} applyArgs
         * @return {?}
         */
        (delegate, current, target, task, applyThis, applyArgs) => {
            try {
                onEnter(zone);
                return delegate.invokeTask(target, task, applyThis, applyArgs);
            }
            finally {
                if (maybeDelayChangeDetection && task.type === 'eventTask') {
                    maybeDelayChangeDetection();
                }
                onLeave(zone);
            }
        }),
        onInvoke: (/**
         * @param {?} delegate
         * @param {?} current
         * @param {?} target
         * @param {?} callback
         * @param {?} applyThis
         * @param {?=} applyArgs
         * @param {?=} source
         * @return {?}
         */
        (delegate, current, target, callback, applyThis, applyArgs, source) => {
            try {
                onEnter(zone);
                return delegate.invoke(target, callback, applyThis, applyArgs, source);
            }
            finally {
                onLeave(zone);
            }
        }),
        onHasTask: (/**
         * @param {?} delegate
         * @param {?} current
         * @param {?} target
         * @param {?} hasTaskState
         * @return {?}
         */
        (delegate, current, target, hasTaskState) => {
            delegate.hasTask(target, hasTaskState);
            if (current === target) {
                // We are only interested in hasTask events which originate from our zone
                // (A child hasTask event is not interesting to us)
                if (hasTaskState.change == 'microTask') {
                    zone._hasPendingMicrotasks = hasTaskState.microTask;
                    updateMicroTaskStatus(zone);
                    checkStable(zone);
                }
                else if (hasTaskState.change == 'macroTask') {
                    zone.hasPendingMacrotasks = hasTaskState.macroTask;
                }
            }
        }),
        onHandleError: (/**
         * @param {?} delegate
         * @param {?} current
         * @param {?} target
         * @param {?} error
         * @return {?}
         */
        (delegate, current, target, error) => {
            delegate.handleError(target, error);
            zone.runOutsideAngular((/**
             * @return {?}
             */
            () => zone.onError.emit(error)));
            return false;
        })
    });
}
/**
 * @param {?} zone
 * @return {?}
 */
function updateMicroTaskStatus(zone) {
    if (zone._hasPendingMicrotasks ||
        (zone.shouldCoalesceEventChangeDetection && zone.lastRequestAnimationFrameId !== -1)) {
        zone.hasPendingMicrotasks = true;
    }
    else {
        zone.hasPendingMicrotasks = false;
    }
}
/**
 * @param {?} zone
 * @return {?}
 */
function onEnter(zone) {
    zone._nesting++;
    if (zone.isStable) {
        zone.isStable = false;
        zone.onUnstable.emit(null);
    }
}
/**
 * @param {?} zone
 * @return {?}
 */
function onLeave(zone) {
    zone._nesting--;
    checkStable(zone);
}
/**
 * Provides a noop implementation of `NgZone` which does nothing. This zone requires explicit calls
 * to framework to perform rendering.
 */
class NoopNgZone {
    constructor() {
        this.hasPendingMicrotasks = false;
        this.hasPendingMacrotasks = false;
        this.isStable = true;
        this.onUnstable = new EventEmitter();
        this.onMicrotaskEmpty = new EventEmitter();
        this.onStable = new EventEmitter();
        this.onError = new EventEmitter();
    }
    /**
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @return {?}
     */
    run(fn, applyThis, applyArgs) {
        return fn.apply(applyThis, applyArgs);
    }
    /**
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @return {?}
     */
    runGuarded(fn, applyThis, applyArgs) {
        return fn.apply(applyThis, applyArgs);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    runOutsideAngular(fn) { return fn(); }
    /**
     * @param {?} fn
     * @param {?=} applyThis
     * @param {?=} applyArgs
     * @param {?=} name
     * @return {?}
     */
    runTask(fn, applyThis, applyArgs, name) {
        return fn.apply(applyThis, applyArgs);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/testability/testability.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function PendingMacrotask() { }
if (false) {}
/**
 * @record
 */
function TaskData() { }
if (false) {}
/**
 * @record
 */
function WaitCallback() { }
if (false) {}
/**
 * The Testability service provides testing hooks that can be accessed from
 * the browser and by services such as Protractor. Each bootstrapped Angular
 * application on the page will have an instance of Testability.
 * \@publicApi
 */
class Testability {
    /**
     * @param {?} _ngZone
     */
    constructor(_ngZone) {
        this._ngZone = _ngZone;
        this._pendingCount = 0;
        this._isZoneStable = true;
        /**
         * Whether any work was done since the last 'whenStable' callback. This is
         * useful to detect if this could have potentially destabilized another
         * component while it is stabilizing.
         * \@internal
         */
        this._didWork = false;
        this._callbacks = [];
        this.taskTrackingZone = null;
        this._watchAngularEvents();
        _ngZone.run((/**
         * @return {?}
         */
        () => {
            this.taskTrackingZone =
                typeof Zone == 'undefined' ? null : Zone.current.get('TaskTrackingZone');
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _watchAngularEvents() {
        this._ngZone.onUnstable.subscribe({
            next: (/**
             * @return {?}
             */
            () => {
                this._didWork = true;
                this._isZoneStable = false;
            })
        });
        this._ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this._ngZone.onStable.subscribe({
                next: (/**
                 * @return {?}
                 */
                () => {
                    NgZone.assertNotInAngularZone();
                    scheduleMicroTask((/**
                     * @return {?}
                     */
                    () => {
                        this._isZoneStable = true;
                        this._runCallbacksIfReady();
                    }));
                })
            });
        }));
    }
    /**
     * Increases the number of pending request
     * @deprecated pending requests are now tracked with zones.
     * @return {?}
     */
    increasePendingRequestCount() {
        this._pendingCount += 1;
        this._didWork = true;
        return this._pendingCount;
    }
    /**
     * Decreases the number of pending request
     * @deprecated pending requests are now tracked with zones
     * @return {?}
     */
    decreasePendingRequestCount() {
        this._pendingCount -= 1;
        if (this._pendingCount < 0) {
            throw new Error('pending async requests below zero');
        }
        this._runCallbacksIfReady();
        return this._pendingCount;
    }
    /**
     * Whether an associated application is stable
     * @return {?}
     */
    isStable() {
        return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
    }
    /**
     * @private
     * @return {?}
     */
    _runCallbacksIfReady() {
        if (this.isStable()) {
            // Schedules the call backs in a new frame so that it is always async.
            scheduleMicroTask((/**
             * @return {?}
             */
            () => {
                while (this._callbacks.length !== 0) {
                    /** @type {?} */
                    let cb = (/** @type {?} */ (this._callbacks.pop()));
                    clearTimeout(cb.timeoutId);
                    cb.doneCb(this._didWork);
                }
                this._didWork = false;
            }));
        }
        else {
            // Still not stable, send updates.
            /** @type {?} */
            let pending = this.getPendingTasks();
            this._callbacks = this._callbacks.filter((/**
             * @param {?} cb
             * @return {?}
             */
            (cb) => {
                if (cb.updateCb && cb.updateCb(pending)) {
                    clearTimeout(cb.timeoutId);
                    return false;
                }
                return true;
            }));
            this._didWork = true;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getPendingTasks() {
        if (!this.taskTrackingZone) {
            return [];
        }
        // Copy the tasks data so that we don't leak tasks.
        return this.taskTrackingZone.macroTasks.map((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            return {
                source: t.source,
                // From TaskTrackingZone:
                // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
                creationLocation: (/** @type {?} */ (((/** @type {?} */ (t))).creationLocation)),
                data: t.data
            };
        }));
    }
    /**
     * @private
     * @param {?} cb
     * @param {?=} timeout
     * @param {?=} updateCb
     * @return {?}
     */
    addCallback(cb, timeout, updateCb) {
        /** @type {?} */
        let timeoutId = -1;
        if (timeout && timeout > 0) {
            timeoutId = setTimeout((/**
             * @return {?}
             */
            () => {
                this._callbacks = this._callbacks.filter((/**
                 * @param {?} cb
                 * @return {?}
                 */
                (cb) => cb.timeoutId !== timeoutId));
                cb(this._didWork, this.getPendingTasks());
            }), timeout);
        }
        this._callbacks.push((/** @type {?} */ ({ doneCb: cb, timeoutId: timeoutId, updateCb: updateCb })));
    }
    /**
     * Wait for the application to be stable with a timeout. If the timeout is reached before that
     * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
     *
     * @param {?} doneCb The callback to invoke when Angular is stable or the timeout expires
     *    whichever comes first.
     * @param {?=} timeout Optional. The maximum time to wait for Angular to become stable. If not
     *    specified, whenStable() will wait forever.
     * @param {?=} updateCb Optional. If specified, this callback will be invoked whenever the set of
     *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
     *    and no further updates will be issued.
     * @return {?}
     */
    whenStable(doneCb, timeout, updateCb) {
        if (updateCb && !this.taskTrackingZone) {
            throw new Error('Task tracking zone is required when passing an update callback to ' +
                'whenStable(). Is "zone.js/dist/task-tracking.js" loaded?');
        }
        // These arguments are 'Function' above to keep the public API simple.
        this.addCallback((/** @type {?} */ (doneCb)), timeout, (/** @type {?} */ (updateCb)));
        this._runCallbacksIfReady();
    }
    /**
     * Get the number of pending requests
     * @deprecated pending requests are now tracked with zones
     * @return {?}
     */
    getPendingRequestCount() { return this._pendingCount; }
    /**
     * Find providers by name
     * @param {?} using The root element to search from
     * @param {?} provider The name of binding variable
     * @param {?} exactMatch Whether using exactMatch
     * @return {?}
     */
    findProviders(using, provider, exactMatch) {
        // TODO(juliemr): implement.
        return [];
    }
}
Testability.ɵfac = function Testability_Factory(t) { return new (t || Testability)(ɵɵinject(NgZone)); };
Testability.ɵprov = ɵɵdefineInjectable({ token: Testability, factory: Testability.ɵfac });
/** @nocollapse */
Testability.ctorParameters = () => [
    { type: NgZone }
];
/*@__PURE__*/ (function () { setClassMetadata(Testability, [{
        type: Injectable
    }], function () { return [{ type: NgZone }]; }, null); })();
if (false) {}
/**
 * A global registry of {\@link Testability} instances for specific elements.
 * \@publicApi
 */
class TestabilityRegistry {
    constructor() {
        /**
         * \@internal
         */
        this._applications = new Map();
        _testabilityGetter.addToWindow(this);
    }
    /**
     * Registers an application with a testability hook so that it can be tracked
     * @param {?} token token of application, root element
     * @param {?} testability Testability hook
     * @return {?}
     */
    registerApplication(token, testability) {
        this._applications.set(token, testability);
    }
    /**
     * Unregisters an application.
     * @param {?} token token of application, root element
     * @return {?}
     */
    unregisterApplication(token) { this._applications.delete(token); }
    /**
     * Unregisters all applications
     * @return {?}
     */
    unregisterAllApplications() { this._applications.clear(); }
    /**
     * Get a testability hook associated with the application
     * @param {?} elem root element
     * @return {?}
     */
    getTestability(elem) { return this._applications.get(elem) || null; }
    /**
     * Get all registered testabilities
     * @return {?}
     */
    getAllTestabilities() { return Array.from(this._applications.values()); }
    /**
     * Get all registered applications(root elements)
     * @return {?}
     */
    getAllRootElements() { return Array.from(this._applications.keys()); }
    /**
     * Find testability of a node in the Tree
     * @param {?} elem node
     * @param {?=} findInAncestors whether finding testability in ancestors if testability was not found in
     * current node
     * @return {?}
     */
    findTestabilityInTree(elem, findInAncestors = true) {
        return _testabilityGetter.findTestabilityInTree(this, elem, findInAncestors);
    }
}
TestabilityRegistry.ɵfac = function TestabilityRegistry_Factory(t) { return new (t || TestabilityRegistry)(); };
TestabilityRegistry.ɵprov = ɵɵdefineInjectable({ token: TestabilityRegistry, factory: TestabilityRegistry.ɵfac });
/** @nocollapse */
TestabilityRegistry.ctorParameters = () => [];
/*@__PURE__*/ (function () { setClassMetadata(TestabilityRegistry, [{
        type: Injectable
    }], function () { return []; }, null); })();
if (false) {}
/**
 * Adapter interface for retrieving the `Testability` service associated for a
 * particular context.
 *
 * \@publicApi
 * @record
 */
function GetTestability() { }
if (false) {}
class _NoopGetTestability {
    /**
     * @param {?} registry
     * @return {?}
     */
    addToWindow(registry) { }
    /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    findTestabilityInTree(registry, elem, findInAncestors) {
        return null;
    }
}
/**
 * Set the {\@link GetTestability} implementation used by the Angular testing framework.
 * \@publicApi
 * @param {?} getter
 * @return {?}
 */
function setTestabilityGetter(getter) {
    _testabilityGetter = getter;
}
/** @type {?} */
let _testabilityGetter = new _NoopGetTestability();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/application_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let _platform;
/** @type {?} */
let compileNgModuleFactory = compileNgModuleFactory__POST_R3__;
/**
 * @template M
 * @param {?} injector
 * @param {?} options
 * @param {?} moduleType
 * @return {?}
 */
function compileNgModuleFactory__PRE_R3__(injector, options, moduleType) {
    /** @type {?} */
    const compilerFactory = injector.get(CompilerFactory);
    /** @type {?} */
    const compiler = compilerFactory.createCompiler([options]);
    return compiler.compileModuleAsync(moduleType);
}
/**
 * @template M
 * @param {?} injector
 * @param {?} options
 * @param {?} moduleType
 * @return {?}
 */
function compileNgModuleFactory__POST_R3__(injector, options, moduleType) {
    ngDevMode && assertNgModuleType(moduleType);
    /** @type {?} */
    const moduleFactory = new NgModuleFactory$1(moduleType);
    if (isComponentResourceResolutionQueueEmpty()) {
        return Promise.resolve(moduleFactory);
    }
    /** @type {?} */
    const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);
    /** @type {?} */
    const compilerProviders = _mergeArrays(compilerOptions.map((/**
     * @param {?} o
     * @return {?}
     */
    o => (/** @type {?} */ (o.providers)))));
    // In case there are no compiler providers, we just return the module factory as
    // there won't be any resource loader. This can happen with Ivy, because AOT compiled
    // modules can be still passed through "bootstrapModule". In that case we shouldn't
    // unnecessarily require the JIT compiler.
    if (compilerProviders.length === 0) {
        return Promise.resolve(moduleFactory);
    }
    /** @type {?} */
    const compiler = getCompilerFacade();
    /** @type {?} */
    const compilerInjector = Injector.create({ providers: compilerProviders });
    /** @type {?} */
    const resourceLoader = compilerInjector.get(compiler.ResourceLoader);
    // The resource loader can also return a string while the "resolveComponentResources"
    // always expects a promise. Therefore we need to wrap the returned value in a promise.
    return resolveComponentResources((/**
     * @param {?} url
     * @return {?}
     */
    url => Promise.resolve(resourceLoader.get(url))))
        .then((/**
     * @return {?}
     */
    () => moduleFactory));
}
// the `window.ng` global utilities are only available in non-VE versions of
// Angular. The function switch below will make sure that the code is not
// included into Angular when PRE mode is active.
/**
 * @return {?}
 */
function publishDefaultGlobalUtils__PRE_R3__() { }
/**
 * @return {?}
 */
function publishDefaultGlobalUtils__POST_R3__() {
    ngDevMode && publishDefaultGlobalUtils();
}
/** @type {?} */
let publishDefaultGlobalUtils$1 = publishDefaultGlobalUtils__POST_R3__;
/** @type {?} */
let isBoundToModule = isBoundToModule__POST_R3__;
/**
 * @template C
 * @param {?} cf
 * @return {?}
 */
function isBoundToModule__PRE_R3__(cf) {
    return cf instanceof ComponentFactoryBoundToModule;
}
/**
 * @template C
 * @param {?} cf
 * @return {?}
 */
function isBoundToModule__POST_R3__(cf) {
    return ((/** @type {?} */ (cf))).isBoundToModule;
}
/** @type {?} */
const ALLOW_MULTIPLE_PLATFORMS = new InjectionToken('AllowMultipleToken');
/**
 * A token for third-party components that can register themselves with NgProbe.
 *
 * \@publicApi
 */
class NgProbeToken {
    /**
     * @param {?} name
     * @param {?} token
     */
    constructor(name, token) {
        this.name = name;
        this.token = token;
    }
}
if (false) {}
/**
 * Creates a platform.
 * Platforms have to be eagerly created via this function.
 *
 * \@publicApi
 * @param {?} injector
 * @return {?}
 */
function createPlatform(injector) {
    if (_platform && !_platform.destroyed &&
        !_platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
        throw new Error('There can be only one platform. Destroy the previous one to create a new one.');
    }
    publishDefaultGlobalUtils$1();
    _platform = injector.get(PlatformRef);
    /** @type {?} */
    const inits = injector.get(PLATFORM_INITIALIZER, null);
    if (inits)
        inits.forEach((/**
         * @param {?} init
         * @return {?}
         */
        (init) => init()));
    return _platform;
}
/**
 * Creates a factory for a platform
 *
 * \@publicApi
 * @param {?} parentPlatformFactory
 * @param {?} name
 * @param {?=} providers
 * @return {?}
 */
function createPlatformFactory(parentPlatformFactory, name, providers = []) {
    /** @type {?} */
    const desc = `Platform: ${name}`;
    /** @type {?} */
    const marker = new InjectionToken(desc);
    return (/**
     * @param {?=} extraProviders
     * @return {?}
     */
    (extraProviders = []) => {
        /** @type {?} */
        let platform = getPlatform();
        if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
            if (parentPlatformFactory) {
                parentPlatformFactory(providers.concat(extraProviders).concat({ provide: marker, useValue: true }));
            }
            else {
                /** @type {?} */
                const injectedProviders = providers.concat(extraProviders).concat({ provide: marker, useValue: true }, {
                    provide: INJECTOR_SCOPE,
                    useValue: 'platform'
                });
                createPlatform(Injector.create({ providers: injectedProviders, name: desc }));
            }
        }
        return assertPlatform(marker);
    });
}
/**
 * Checks that there currently is a platform which contains the given token as a provider.
 *
 * \@publicApi
 * @param {?} requiredToken
 * @return {?}
 */
function assertPlatform(requiredToken) {
    /** @type {?} */
    const platform = getPlatform();
    if (!platform) {
        throw new Error('No platform exists!');
    }
    if (!platform.injector.get(requiredToken, null)) {
        throw new Error('A platform with a different configuration has been created. Please destroy it first.');
    }
    return platform;
}
/**
 * Destroy the existing platform.
 *
 * \@publicApi
 * @return {?}
 */
function destroyPlatform() {
    if (_platform && !_platform.destroyed) {
        _platform.destroy();
    }
}
/**
 * Returns the current platform.
 *
 * \@publicApi
 * @return {?}
 */
function getPlatform() {
    return _platform && !_platform.destroyed ? _platform : null;
}
/**
 * Provides additional options to the bootstraping process.
 *
 *
 * @record
 */
function BootstrapOptions() { }
if (false) {}
/**
 * The Angular platform is the entry point for Angular on a web page. Each page
 * has exactly one platform, and services (such as reflection) which are common
 * to every Angular application running on the page are bound in its scope.
 *
 * A page's platform is initialized implicitly when a platform is created via a platform factory
 * (e.g. {\@link platformBrowser}), or explicitly by calling the {\@link createPlatform} function.
 *
 * \@publicApi
 */
class PlatformRef {
    /**
     * \@internal
     * @param {?} _injector
     */
    constructor(_injector) {
        this._injector = _injector;
        this._modules = [];
        this._destroyListeners = [];
        this._destroyed = false;
    }
    /**
     * Creates an instance of an `\@NgModule` for the given platform
     * for offline compilation.
     *
     * \@usageNotes
     * ### Simple Example
     *
     * ```typescript
     * my_module.ts:
     *
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * main.ts:
     * import {MyModuleNgFactory} from './my_module.ngfactory';
     * import {platformBrowser} from '\@angular/platform-browser';
     *
     * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);
     * ```
     * @template M
     * @param {?} moduleFactory
     * @param {?=} options
     * @return {?}
     */
    bootstrapModuleFactory(moduleFactory, options) {
        // Note: We need to create the NgZone _before_ we instantiate the module,
        // as instantiating the module creates some providers eagerly.
        // So we create a mini parent injector that just contains the new NgZone and
        // pass that as parent to the NgModuleFactory.
        /** @type {?} */
        const ngZoneOption = options ? options.ngZone : undefined;
        /** @type {?} */
        const ngZoneEventCoalescing = (options && options.ngZoneEventCoalescing) || false;
        /** @type {?} */
        const ngZone = getNgZone(ngZoneOption, ngZoneEventCoalescing);
        /** @type {?} */
        const providers = [{ provide: NgZone, useValue: ngZone }];
        // Attention: Don't use ApplicationRef.run here,
        // as we want to be sure that all possible constructor calls are inside `ngZone.run`!
        return ngZone.run((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const ngZoneInjector = Injector.create({ providers: providers, parent: this.injector, name: moduleFactory.moduleType.name });
            /** @type {?} */
            const moduleRef = (/** @type {?} */ (moduleFactory.create(ngZoneInjector)));
            /** @type {?} */
            const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
            if (!exceptionHandler) {
                throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');
            }
            moduleRef.onDestroy((/**
             * @return {?}
             */
            () => remove(this._modules, moduleRef)));
            (/** @type {?} */ (ngZone)).runOutsideAngular((/**
             * @return {?}
             */
            () => (/** @type {?} */ (ngZone)).onError.subscribe({ next: (/**
                 * @param {?} error
                 * @return {?}
                 */
                (error) => { exceptionHandler.handleError(error); }) })));
            return _callAndReportToErrorHandler(exceptionHandler, (/** @type {?} */ (ngZone)), (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const initStatus = moduleRef.injector.get(ApplicationInitStatus);
                initStatus.runInitializers();
                return initStatus.donePromise.then((/**
                 * @return {?}
                 */
                () => {
                    if (ivyEnabled) {
                        // If the `LOCALE_ID` provider is defined at bootstrap then we set the value for ivy
                        /** @type {?} */
                        const localeId = moduleRef.injector.get(LOCALE_ID$1, DEFAULT_LOCALE_ID);
                        setLocaleId(localeId || DEFAULT_LOCALE_ID);
                    }
                    this._moduleDoBootstrap(moduleRef);
                    return moduleRef;
                }));
            }));
        }));
    }
    /**
     * Creates an instance of an `\@NgModule` for a given platform using the given runtime compiler.
     *
     * \@usageNotes
     * ### Simple Example
     *
     * ```typescript
     * \@NgModule({
     *   imports: [BrowserModule]
     * })
     * class MyModule {}
     *
     * let moduleRef = platformBrowser().bootstrapModule(MyModule);
     * ```
     *
     * @template M
     * @param {?} moduleType
     * @param {?=} compilerOptions
     * @return {?}
     */
    bootstrapModule(moduleType, compilerOptions = []) {
        /** @type {?} */
        const options = optionsReducer({}, compilerOptions);
        return compileNgModuleFactory(this.injector, options, moduleType)
            .then((/**
         * @param {?} moduleFactory
         * @return {?}
         */
        moduleFactory => this.bootstrapModuleFactory(moduleFactory, options)));
    }
    /**
     * @private
     * @param {?} moduleRef
     * @return {?}
     */
    _moduleDoBootstrap(moduleRef) {
        /** @type {?} */
        const appRef = (/** @type {?} */ (moduleRef.injector.get(ApplicationRef)));
        if (moduleRef._bootstrapComponents.length > 0) {
            moduleRef._bootstrapComponents.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => appRef.bootstrap(f)));
        }
        else if (moduleRef.instance.ngDoBootstrap) {
            moduleRef.instance.ngDoBootstrap(appRef);
        }
        else {
            throw new Error(`The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. ` +
                `Please define one of these.`);
        }
        this._modules.push(moduleRef);
    }
    /**
     * Register a listener to be called when the platform is disposed.
     * @param {?} callback
     * @return {?}
     */
    onDestroy(callback) { this._destroyListeners.push(callback); }
    /**
     * Retrieve the platform {\@link Injector}, which is the parent injector for
     * every Angular application on the page and provides singleton providers.
     * @return {?}
     */
    get injector() { return this._injector; }
    /**
     * Destroy the Angular platform and all Angular applications on the page.
     * @return {?}
     */
    destroy() {
        if (this._destroyed) {
            throw new Error('The platform has already been destroyed!');
        }
        this._modules.slice().forEach((/**
         * @param {?} module
         * @return {?}
         */
        module => module.destroy()));
        this._destroyListeners.forEach((/**
         * @param {?} listener
         * @return {?}
         */
        listener => listener()));
        this._destroyed = true;
    }
    /**
     * @return {?}
     */
    get destroyed() { return this._destroyed; }
}
PlatformRef.ɵfac = function PlatformRef_Factory(t) { return new (t || PlatformRef)(ɵɵinject(Injector)); };
PlatformRef.ɵprov = ɵɵdefineInjectable({ token: PlatformRef, factory: PlatformRef.ɵfac });
/** @nocollapse */
PlatformRef.ctorParameters = () => [
    { type: Injector }
];
/*@__PURE__*/ (function () { setClassMetadata(PlatformRef, [{
        type: Injectable
    }], function () { return [{ type: Injector }]; }, null); })();
if (false) {}
/**
 * @param {?} ngZoneOption
 * @param {?} ngZoneEventCoalescing
 * @return {?}
 */
function getNgZone(ngZoneOption, ngZoneEventCoalescing) {
    /** @type {?} */
    let ngZone;
    if (ngZoneOption === 'noop') {
        ngZone = new NoopNgZone();
    }
    else {
        ngZone = (ngZoneOption === 'zone.js' ? undefined : ngZoneOption) || new NgZone({
            enableLongStackTrace: isDevMode(),
            shouldCoalesceEventChangeDetection: ngZoneEventCoalescing
        });
    }
    return ngZone;
}
/**
 * @param {?} errorHandler
 * @param {?} ngZone
 * @param {?} callback
 * @return {?}
 */
function _callAndReportToErrorHandler(errorHandler, ngZone, callback) {
    try {
        /** @type {?} */
        const result = callback();
        if (isPromise(result)) {
            return result.catch((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => errorHandler.handleError(e)));
                // rethrow as the exception handler might not do it
                throw e;
            }));
        }
        return result;
    }
    catch (e) {
        ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => errorHandler.handleError(e)));
        // rethrow as the exception handler might not do it
        throw e;
    }
}
/**
 * @template T
 * @param {?} dst
 * @param {?} objs
 * @return {?}
 */
function optionsReducer(dst, objs) {
    if (Array.isArray(objs)) {
        dst = objs.reduce(optionsReducer, dst);
    }
    else {
        dst = Object.assign(Object.assign({}, dst), ((/** @type {?} */ (objs))));
    }
    return dst;
}
/**
 * A reference to an Angular application running on a page.
 *
 * \@usageNotes
 *
 * {\@a is-stable-examples}
 * ### isStable examples and caveats
 *
 * Note two important points about `isStable`, demonstrated in the examples below:
 * - the application will never be stable if you start any kind
 * of recurrent asynchronous task when the application starts
 * (for example for a polling process, started with a `setInterval`, a `setTimeout`
 * or using RxJS operators like `interval`);
 * - the `isStable` Observable runs outside of the Angular zone.
 *
 * Let's imagine that you start a recurrent task
 * (here incrementing a counter, using RxJS `interval`),
 * and at the same time subscribe to `isStable`.
 *
 * ```
 * constructor(appRef: ApplicationRef) {
 *   appRef.isStable.pipe(
 *      filter(stable => stable)
 *   ).subscribe(() => console.log('App is stable now');
 *   interval(1000).subscribe(counter => console.log(counter));
 * }
 * ```
 * In this example, `isStable` will never emit `true`,
 * and the trace "App is stable now" will never get logged.
 *
 * If you want to execute something when the app is stable,
 * you have to wait for the application to be stable
 * before starting your polling process.
 *
 * ```
 * constructor(appRef: ApplicationRef) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     tap(stable => console.log('App is stable now')),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => console.log(counter));
 * }
 * ```
 * In this example, the trace "App is stable now" will be logged
 * and then the counter starts incrementing every second.
 *
 * Note also that this Observable runs outside of the Angular zone,
 * which means that the code in the subscription
 * to this Observable will not trigger the change detection.
 *
 * Let's imagine that instead of logging the counter value,
 * you update a field of your component
 * and display it in its template.
 *
 * ```
 * constructor(appRef: ApplicationRef) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => this.value = counter);
 * }
 * ```
 * As the `isStable` Observable runs outside the zone,
 * the `value` field will be updated properly,
 * but the template will not be refreshed!
 *
 * You'll have to manually trigger the change detection to update the template.
 *
 * ```
 * constructor(appRef: ApplicationRef, cd: ChangeDetectorRef) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => {
 *     this.value = counter;
 *     cd.detectChanges();
 *   });
 * }
 * ```
 *
 * Or make the subscription callback run inside the zone.
 *
 * ```
 * constructor(appRef: ApplicationRef, zone: NgZone) {
 *   appRef.isStable.pipe(
 *     first(stable => stable),
 *     switchMap(() => interval(1000))
 *   ).subscribe(counter => zone.run(() => this.value = counter));
 * }
 * ```
 *
 * \@publicApi
 */
class ApplicationRef {
    /**
     * \@internal
     * @param {?} _zone
     * @param {?} _console
     * @param {?} _injector
     * @param {?} _exceptionHandler
     * @param {?} _componentFactoryResolver
     * @param {?} _initStatus
     */
    constructor(_zone, _console, _injector, _exceptionHandler, _componentFactoryResolver, _initStatus) {
        this._zone = _zone;
        this._console = _console;
        this._injector = _injector;
        this._exceptionHandler = _exceptionHandler;
        this._componentFactoryResolver = _componentFactoryResolver;
        this._initStatus = _initStatus;
        /**
         * \@internal
         */
        this._bootstrapListeners = [];
        this._views = [];
        this._runningTick = false;
        this._enforceNoNewChanges = false;
        this._stable = true;
        /**
         * Get a list of component types registered to this application.
         * This list is populated even before the component is created.
         */
        this.componentTypes = [];
        /**
         * Get a list of components registered to this application.
         */
        this.components = [];
        this._enforceNoNewChanges = isDevMode();
        this._zone.onMicrotaskEmpty.subscribe({ next: (/**
             * @return {?}
             */
            () => { this._zone.run((/**
             * @return {?}
             */
            () => { this.tick(); })); }) });
        /** @type {?} */
        const isCurrentlyStable = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Observable"]((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this._stable = this._zone.isStable && !this._zone.hasPendingMacrotasks &&
                !this._zone.hasPendingMicrotasks;
            this._zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                observer.next(this._stable);
                observer.complete();
            }));
        }));
        /** @type {?} */
        const isStable = new rxjs__WEBPACK_IMPORTED_MODULE_0__["Observable"]((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            // Create the subscription to onStable outside the Angular Zone so that
            // the callback is run outside the Angular Zone.
            /** @type {?} */
            let stableSub;
            this._zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                stableSub = this._zone.onStable.subscribe((/**
                 * @return {?}
                 */
                () => {
                    NgZone.assertNotInAngularZone();
                    // Check whether there are no pending macro/micro tasks in the next tick
                    // to allow for NgZone to update the state.
                    scheduleMicroTask((/**
                     * @return {?}
                     */
                    () => {
                        if (!this._stable && !this._zone.hasPendingMacrotasks &&
                            !this._zone.hasPendingMicrotasks) {
                            this._stable = true;
                            observer.next(true);
                        }
                    }));
                }));
            }));
            /** @type {?} */
            const unstableSub = this._zone.onUnstable.subscribe((/**
             * @return {?}
             */
            () => {
                NgZone.assertInAngularZone();
                if (this._stable) {
                    this._stable = false;
                    this._zone.runOutsideAngular((/**
                     * @return {?}
                     */
                    () => { observer.next(false); }));
                }
            }));
            return (/**
             * @return {?}
             */
            () => {
                stableSub.unsubscribe();
                unstableSub.unsubscribe();
            });
        }));
        ((/** @type {?} */ (this))).isStable =
            Object(rxjs__WEBPACK_IMPORTED_MODULE_0__["merge"])(isCurrentlyStable, isStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_1__["share"])()));
    }
    /**
     * Bootstrap a new component at the root level of the application.
     *
     * \@usageNotes
     * ### Bootstrap process
     *
     * When bootstrapping a new root component into an application, Angular mounts the
     * specified application component onto DOM elements identified by the componentType's
     * selector and kicks off automatic change detection to finish initializing the component.
     *
     * Optionally, a component can be mounted onto a DOM element that does not match the
     * componentType's selector.
     *
     * ### Example
     * {\@example core/ts/platform/platform.ts region='longform'}
     * @template C
     * @param {?} componentOrFactory
     * @param {?=} rootSelectorOrNode
     * @return {?}
     */
    bootstrap(componentOrFactory, rootSelectorOrNode) {
        if (!this._initStatus.done) {
            throw new Error('Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');
        }
        /** @type {?} */
        let componentFactory;
        if (componentOrFactory instanceof ComponentFactory) {
            componentFactory = componentOrFactory;
        }
        else {
            componentFactory =
                (/** @type {?} */ (this._componentFactoryResolver.resolveComponentFactory(componentOrFactory)));
        }
        this.componentTypes.push(componentFactory.componentType);
        // Create a factory associated with the current module if it's not bound to some other
        /** @type {?} */
        const ngModule = isBoundToModule(componentFactory) ? undefined : this._injector.get(NgModuleRef);
        /** @type {?} */
        const selectorOrNode = rootSelectorOrNode || componentFactory.selector;
        /** @type {?} */
        const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
        compRef.onDestroy((/**
         * @return {?}
         */
        () => { this._unloadComponent(compRef); }));
        /** @type {?} */
        const testability = compRef.injector.get(Testability, null);
        if (testability) {
            compRef.injector.get(TestabilityRegistry)
                .registerApplication(compRef.location.nativeElement, testability);
        }
        this._loadComponent(compRef);
        if (isDevMode()) {
            this._console.log(`Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);
        }
        return compRef;
    }
    /**
     * Invoke this method to explicitly process change detection and its side-effects.
     *
     * In development mode, `tick()` also performs a second change detection cycle to ensure that no
     * further changes are detected. If additional changes are picked up during this second cycle,
     * bindings in the app have side-effects that cannot be resolved in a single change detection
     * pass.
     * In this case, Angular throws an error, since an Angular application can only have one change
     * detection pass during which all change detection must complete.
     * @return {?}
     */
    tick() {
        if (this._runningTick) {
            throw new Error('ApplicationRef.tick is called recursively');
        }
        try {
            this._runningTick = true;
            for (let view of this._views) {
                view.detectChanges();
            }
            if (this._enforceNoNewChanges) {
                for (let view of this._views) {
                    view.checkNoChanges();
                }
            }
        }
        catch (e) {
            // Attention: Don't rethrow as it could cancel subscriptions to Observables!
            this._zone.runOutsideAngular((/**
             * @return {?}
             */
            () => this._exceptionHandler.handleError(e)));
        }
        finally {
            this._runningTick = false;
        }
    }
    /**
     * Attaches a view so that it will be dirty checked.
     * The view will be automatically detached when it is destroyed.
     * This will throw if the view is already attached to a ViewContainer.
     * @param {?} viewRef
     * @return {?}
     */
    attachView(viewRef) {
        /** @type {?} */
        const view = ((/** @type {?} */ (viewRef)));
        this._views.push(view);
        view.attachToAppRef(this);
    }
    /**
     * Detaches a view from dirty checking again.
     * @param {?} viewRef
     * @return {?}
     */
    detachView(viewRef) {
        /** @type {?} */
        const view = ((/** @type {?} */ (viewRef)));
        remove(this._views, view);
        view.detachFromAppRef();
    }
    /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    _loadComponent(componentRef) {
        this.attachView(componentRef.hostView);
        this.tick();
        this.components.push(componentRef);
        // Get the listeners lazily to prevent DI cycles.
        /** @type {?} */
        const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []).concat(this._bootstrapListeners);
        listeners.forEach((/**
         * @param {?} listener
         * @return {?}
         */
        (listener) => listener(componentRef)));
    }
    /**
     * @private
     * @param {?} componentRef
     * @return {?}
     */
    _unloadComponent(componentRef) {
        this.detachView(componentRef.hostView);
        remove(this.components, componentRef);
    }
    /**
     * \@internal
     * @return {?}
     */
    ngOnDestroy() {
        // TODO(alxhub): Dispose of the NgZone.
        this._views.slice().forEach((/**
         * @param {?} view
         * @return {?}
         */
        (view) => view.destroy()));
    }
    /**
     * Returns the number of attached views.
     * @return {?}
     */
    get viewCount() { return this._views.length; }
}
ApplicationRef.ɵfac = function ApplicationRef_Factory(t) { return new (t || ApplicationRef)(ɵɵinject(NgZone), ɵɵinject(Console), ɵɵinject(Injector), ɵɵinject(ErrorHandler), ɵɵinject(ComponentFactoryResolver), ɵɵinject(ApplicationInitStatus)); };
ApplicationRef.ɵprov = ɵɵdefineInjectable({ token: ApplicationRef, factory: ApplicationRef.ɵfac });
/** @nocollapse */
ApplicationRef.ctorParameters = () => [
    { type: NgZone },
    { type: Console },
    { type: Injector },
    { type: ErrorHandler },
    { type: ComponentFactoryResolver },
    { type: ApplicationInitStatus }
];
/*@__PURE__*/ (function () { setClassMetadata(ApplicationRef, [{
        type: Injectable
    }], function () { return [{ type: NgZone }, { type: Console }, { type: Injector }, { type: ErrorHandler }, { type: ComponentFactoryResolver }, { type: ApplicationInitStatus }]; }, null); })();
if (false) {}
/**
 * @template T
 * @param {?} list
 * @param {?} el
 * @return {?}
 */
function remove(list, el) {
    /** @type {?} */
    const index = list.indexOf(el);
    if (index > -1) {
        list.splice(index, 1);
    }
}
/**
 * @param {?} parts
 * @return {?}
 */
function _mergeArrays(parts) {
    /** @type {?} */
    const result = [];
    parts.forEach((/**
     * @param {?} part
     * @return {?}
     */
    (part) => part && result.push(...part)));
    return result;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/zone.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/render.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/ng_module_factory_loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Used to load ng module factories.
 *
 * \@publicApi
 * @deprecated the `string` form of `loadChildren` is deprecated, and `NgModuleFactoryLoader` is
 * part of its implementation. See `LoadChildren` for more details.
 * @abstract
 */
class NgModuleFactoryLoader {
}
if (false) {}
/**
 * @param {?} id
 * @return {?}
 */
function getModuleFactory__PRE_R3__(id) {
    /** @type {?} */
    const factory = (/** @type {?} */ (getRegisteredNgModuleType(id)));
    if (!factory)
        throw noModuleError(id);
    return factory;
}
/**
 * @param {?} id
 * @return {?}
 */
function getModuleFactory__POST_R3__(id) {
    /** @type {?} */
    const type = (/** @type {?} */ (getRegisteredNgModuleType(id)));
    if (!type)
        throw noModuleError(id);
    return new NgModuleFactory$1(type);
}
/**
 * Returns the NgModuleFactory with the given id, if it exists and has been loaded.
 * Factories for modules that do not specify an `id` cannot be retrieved. Throws if the module
 * cannot be found.
 * \@publicApi
 * @type {?}
 */
const getModuleFactory = getModuleFactory__POST_R3__;
/**
 * @param {?} id
 * @return {?}
 */
function noModuleError(id) {
    return new Error(`No module with ID ${id} loaded`);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/system_js_ng_module_factory_loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const _SEPARATOR = '#';
/** @type {?} */
const FACTORY_CLASS_SUFFIX = 'NgFactory';
/**
 * Configuration for SystemJsNgModuleLoader.
 * token.
 *
 * \@publicApi
 * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoaderConfig`
 * is part of its implementation. See `LoadChildren` for more details.
 * @abstract
 */
class SystemJsNgModuleLoaderConfig {
}
if (false) {}
/** @type {?} */
const DEFAULT_CONFIG = {
    factoryPathPrefix: '',
    factoryPathSuffix: '.ngfactory',
};
/**
 * NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory
 * \@publicApi
 * @deprecated the `string` form of `loadChildren` is deprecated, and `SystemJsNgModuleLoader` is
 * part of its implementation. See `LoadChildren` for more details.
 */
class SystemJsNgModuleLoader {
    /**
     * @param {?} _compiler
     * @param {?=} config
     */
    constructor(_compiler, config) {
        this._compiler = _compiler;
        this._config = config || DEFAULT_CONFIG;
    }
    /**
     * @param {?} path
     * @return {?}
     */
    load(path) {
        /** @type {?} */
        const legacyOfflineMode = !ivyEnabled && this._compiler instanceof Compiler;
        return legacyOfflineMode ? this.loadFactory(path) : this.loadAndCompile(path);
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    loadAndCompile(path) {
        let [module, exportName] = path.split(_SEPARATOR);
        if (exportName === undefined) {
            exportName = 'default';
        }
        return __webpack_require__("./$$_lazy_route_resource lazy recursive")(module)
            .then((/**
         * @param {?} module
         * @return {?}
         */
        (module) => module[exportName]))
            .then((/**
         * @param {?} type
         * @return {?}
         */
        (type) => checkNotEmpty(type, module, exportName)))
            .then((/**
         * @param {?} type
         * @return {?}
         */
        (type) => this._compiler.compileModuleAsync(type)));
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    loadFactory(path) {
        let [module, exportName] = path.split(_SEPARATOR);
        /** @type {?} */
        let factoryClassSuffix = FACTORY_CLASS_SUFFIX;
        if (exportName === undefined) {
            exportName = 'default';
            factoryClassSuffix = '';
        }
        return __webpack_require__("./$$_lazy_route_resource lazy recursive")(this._config.factoryPathPrefix + module + this._config.factoryPathSuffix)
            .then((/**
         * @param {?} module
         * @return {?}
         */
        (module) => module[exportName + factoryClassSuffix]))
            .then((/**
         * @param {?} factory
         * @return {?}
         */
        (factory) => checkNotEmpty(factory, module, exportName)));
    }
}
SystemJsNgModuleLoader.ɵfac = function SystemJsNgModuleLoader_Factory(t) { return new (t || SystemJsNgModuleLoader)(ɵɵinject(Compiler), ɵɵinject(SystemJsNgModuleLoaderConfig, 8)); };
SystemJsNgModuleLoader.ɵprov = ɵɵdefineInjectable({ token: SystemJsNgModuleLoader, factory: SystemJsNgModuleLoader.ɵfac });
/** @nocollapse */
SystemJsNgModuleLoader.ctorParameters = () => [
    { type: Compiler },
    { type: SystemJsNgModuleLoaderConfig, decorators: [{ type: Optional }] }
];
/*@__PURE__*/ (function () { setClassMetadata(SystemJsNgModuleLoader, [{
        type: Injectable
    }], function () { return [{ type: Compiler }, { type: SystemJsNgModuleLoaderConfig, decorators: [{
                type: Optional
            }] }]; }, null); })();
if (false) {}
/**
 * @param {?} value
 * @param {?} modulePath
 * @param {?} exportName
 * @return {?}
 */
function checkNotEmpty(value, modulePath, exportName) {
    if (!value) {
        throw new Error(`Cannot find '${exportName}' in '${modulePath}'`);
    }
    return value;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker/view_ref.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Represents an Angular [view](guide/glossary#view),
 * specifically the [host view](guide/glossary#view-tree) that is defined by a component.
 * Also serves as the base class
 * that adds destroy methods for [embedded views](guide/glossary#view-tree).
 *
 * @see `EmbeddedViewRef`
 *
 * \@publicApi
 * @abstract
 */
class ViewRef$1 extends ChangeDetectorRef {
}
if (false) {}
/**
 * Represents an Angular [view](guide/glossary#view) in a view container.
 * An [embedded view](guide/glossary#view-tree) can be referenced from a component
 * other than the hosting component whose template defines it, or it can be defined
 * independently by a `TemplateRef`.
 *
 * Properties of elements in a view can change, but the structure (number and order) of elements in
 * a view cannot. Change the structure of elements by inserting, moving, or
 * removing nested views in a view container.
 *
 * @see `ViewContainerRef`
 *
 * \@usageNotes
 *
 * The following template breaks down into two separate `TemplateRef` instances,
 * an outer one and an inner one.
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <li *ngFor="let  item of items">{{item}}</li>
 * </ul>
 * ```
 *
 * This is the outer `TemplateRef`:
 *
 * ```
 * Count: {{items.length}}
 * <ul>
 *   <ng-template ngFor let-item [ngForOf]="items"></ng-template>
 * </ul>
 * ```
 *
 * This is the inner `TemplateRef`:
 *
 * ```
 *   <li>{{item}}</li>
 * ```
 *
 * The outer and inner `TemplateRef` instances are assembled into views as follows:
 *
 * ```
 * <!-- ViewRef: outer-0 -->
 * Count: 2
 * <ul>
 *   <ng-template view-container-ref></ng-template>
 *   <!-- ViewRef: inner-1 --><li>first</li><!-- /ViewRef: inner-1 -->
 *   <!-- ViewRef: inner-2 --><li>second</li><!-- /ViewRef: inner-2 -->
 * </ul>
 * <!-- /ViewRef: outer-0 -->
 * ```
 * \@publicApi
 * @abstract
 * @template C
 */
class EmbeddedViewRef extends ViewRef$1 {
}
if (false) {}
/**
 * @record
 */
function InternalViewRef() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/linker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/debug/debug_node.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@publicApi
 */
class DebugEventListener {
    /**
     * @param {?} name
     * @param {?} callback
     */
    constructor(name, callback) {
        this.name = name;
        this.callback = callback;
    }
}
if (false) {}
// WARNING: interface has both a type and a value, skipping emit
class DebugNode__PRE_R3__ {
    /**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugContext
     */
    constructor(nativeNode, parent, _debugContext) {
        this.listeners = [];
        this.parent = null;
        this._debugContext = _debugContext;
        this.nativeNode = nativeNode;
        if (parent && parent instanceof DebugElement__PRE_R3__) {
            parent.addChild(this);
        }
    }
    /**
     * @return {?}
     */
    get injector() { return this._debugContext.injector; }
    /**
     * @return {?}
     */
    get componentInstance() { return this._debugContext.component; }
    /**
     * @return {?}
     */
    get context() { return this._debugContext.context; }
    /**
     * @return {?}
     */
    get references() { return this._debugContext.references; }
    /**
     * @return {?}
     */
    get providerTokens() { return this._debugContext.providerTokens; }
}
if (false) {}
// WARNING: interface has both a type and a value, skipping emit
class DebugElement__PRE_R3__ extends DebugNode__PRE_R3__ {
    /**
     * @param {?} nativeNode
     * @param {?} parent
     * @param {?} _debugContext
     */
    constructor(nativeNode, parent, _debugContext) {
        super(nativeNode, parent, _debugContext);
        this.properties = {};
        this.attributes = {};
        this.classes = {};
        this.styles = {};
        this.childNodes = [];
        this.nativeElement = nativeNode;
    }
    /**
     * @param {?} child
     * @return {?}
     */
    addChild(child) {
        if (child) {
            this.childNodes.push(child);
            ((/** @type {?} */ (child))).parent = this;
        }
    }
    /**
     * @param {?} child
     * @return {?}
     */
    removeChild(child) {
        /** @type {?} */
        const childIndex = this.childNodes.indexOf(child);
        if (childIndex !== -1) {
            ((/** @type {?} */ (child))).parent = null;
            this.childNodes.splice(childIndex, 1);
        }
    }
    /**
     * @param {?} child
     * @param {?} newChildren
     * @return {?}
     */
    insertChildrenAfter(child, newChildren) {
        /** @type {?} */
        const siblingIndex = this.childNodes.indexOf(child);
        if (siblingIndex !== -1) {
            this.childNodes.splice(siblingIndex + 1, 0, ...newChildren);
            newChildren.forEach((/**
             * @param {?} c
             * @return {?}
             */
            c => {
                if (c.parent) {
                    ((/** @type {?} */ (c.parent))).removeChild(c);
                }
                ((/** @type {?} */ (child))).parent = this;
            }));
        }
    }
    /**
     * @param {?} refChild
     * @param {?} newChild
     * @return {?}
     */
    insertBefore(refChild, newChild) {
        /** @type {?} */
        const refIndex = this.childNodes.indexOf(refChild);
        if (refIndex === -1) {
            this.addChild(newChild);
        }
        else {
            if (newChild.parent) {
                ((/** @type {?} */ (newChild.parent))).removeChild(newChild);
            }
            ((/** @type {?} */ (newChild))).parent = this;
            this.childNodes.splice(refIndex, 0, newChild);
        }
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    query(predicate) {
        /** @type {?} */
        const results = this.queryAll(predicate);
        return results[0] || null;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    queryAll(predicate) {
        /** @type {?} */
        const matches = [];
        _queryElementChildren(this, predicate, matches);
        return matches;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    queryAllNodes(predicate) {
        /** @type {?} */
        const matches = [];
        _queryNodeChildren(this, predicate, matches);
        return matches;
    }
    /**
     * @return {?}
     */
    get children() {
        return (/** @type {?} */ (this
            .childNodes //
            .filter((/**
         * @param {?} node
         * @return {?}
         */
        (node) => node instanceof DebugElement__PRE_R3__))));
    }
    /**
     * @param {?} eventName
     * @param {?} eventObj
     * @return {?}
     */
    triggerEventHandler(eventName, eventObj) {
        this.listeners.forEach((/**
         * @param {?} listener
         * @return {?}
         */
        (listener) => {
            if (listener.name == eventName) {
                listener.callback(eventObj);
            }
        }));
    }
}
if (false) {}
/**
 * \@publicApi
 * @param {?} debugEls
 * @return {?}
 */
function asNativeElements(debugEls) {
    return debugEls.map((/**
     * @param {?} el
     * @return {?}
     */
    (el) => el.nativeElement));
}
/**
 * @param {?} element
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryElementChildren(element, predicate, matches) {
    element.childNodes.forEach((/**
     * @param {?} node
     * @return {?}
     */
    node => {
        if (node instanceof DebugElement__PRE_R3__) {
            if (predicate(node)) {
                matches.push(node);
            }
            _queryElementChildren(node, predicate, matches);
        }
    }));
}
/**
 * @param {?} parentNode
 * @param {?} predicate
 * @param {?} matches
 * @return {?}
 */
function _queryNodeChildren(parentNode, predicate, matches) {
    if (parentNode instanceof DebugElement__PRE_R3__) {
        parentNode.childNodes.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            if (predicate(node)) {
                matches.push(node);
            }
            if (node instanceof DebugElement__PRE_R3__) {
                _queryNodeChildren(node, predicate, matches);
            }
        }));
    }
}
class DebugNode__POST_R3__ {
    /**
     * @param {?} nativeNode
     */
    constructor(nativeNode) { this.nativeNode = nativeNode; }
    /**
     * @return {?}
     */
    get parent() {
        /** @type {?} */
        const parent = (/** @type {?} */ (this.nativeNode.parentNode));
        return parent ? new DebugElement__POST_R3__(parent) : null;
    }
    /**
     * @return {?}
     */
    get injector() { return getInjector(this.nativeNode); }
    /**
     * @return {?}
     */
    get componentInstance() {
        /** @type {?} */
        const nativeElement = this.nativeNode;
        return nativeElement &&
            (getComponent((/** @type {?} */ (nativeElement))) || getOwningComponent(nativeElement));
    }
    /**
     * @return {?}
     */
    get context() {
        return getComponent((/** @type {?} */ (this.nativeNode))) || getContext((/** @type {?} */ (this.nativeNode)));
    }
    /**
     * @return {?}
     */
    get listeners() {
        return getListeners((/** @type {?} */ (this.nativeNode))).filter((/**
         * @param {?} listener
         * @return {?}
         */
        listener => listener.type === 'dom'));
    }
    /**
     * @return {?}
     */
    get references() { return getLocalRefs(this.nativeNode); }
    /**
     * @return {?}
     */
    get providerTokens() { return getInjectionTokens((/** @type {?} */ (this.nativeNode))); }
}
if (false) {}
class DebugElement__POST_R3__ extends DebugNode__POST_R3__ {
    /**
     * @param {?} nativeNode
     */
    constructor(nativeNode) {
        ngDevMode && assertDomNode(nativeNode);
        super(nativeNode);
    }
    /**
     * @return {?}
     */
    get nativeElement() {
        return this.nativeNode.nodeType == Node.ELEMENT_NODE ? (/** @type {?} */ (this.nativeNode)) : null;
    }
    /**
     * @return {?}
     */
    get name() {
        try {
            /** @type {?} */
            const context = (/** @type {?} */ (loadLContext(this.nativeNode)));
            /** @type {?} */
            const lView = context.lView;
            /** @type {?} */
            const tData = lView[TVIEW].data;
            /** @type {?} */
            const tNode = (/** @type {?} */ (tData[context.nodeIndex]));
            return (/** @type {?} */ (tNode.tagName));
        }
        catch (e) {
            return this.nativeNode.nodeName;
        }
    }
    /**
     *  Gets a map of property names to property values for an element.
     *
     *  This map includes:
     *  - Regular property bindings (e.g. `[id]="id"`)
     *  - Host property bindings (e.g. `host: { '[id]': "id" }`)
     *  - Interpolated property bindings (e.g. `id="{{ value }}")
     *
     *  It does not include:
     *  - input property bindings (e.g. `[myCustomInput]="value"`)
     *  - attribute bindings (e.g. `[attr.role]="menu"`)
     * @return {?}
     */
    get properties() {
        /** @type {?} */
        const context = loadLContext(this.nativeNode, false);
        if (context == null) {
            return {};
        }
        /** @type {?} */
        const lView = context.lView;
        /** @type {?} */
        const tData = lView[TVIEW].data;
        /** @type {?} */
        const tNode = (/** @type {?} */ (tData[context.nodeIndex]));
        /** @type {?} */
        const properties = {};
        // Collect properties from the DOM.
        copyDomProperties(this.nativeElement, properties);
        // Collect properties from the bindings. This is needed for animation renderer which has
        // synthetic properties which don't get reflected into the DOM.
        collectPropertyBindings(properties, tNode, lView, tData);
        return properties;
    }
    /**
     * @return {?}
     */
    get attributes() {
        /** @type {?} */
        const attributes = {};
        /** @type {?} */
        const element = this.nativeElement;
        if (!element) {
            return attributes;
        }
        /** @type {?} */
        const context = loadLContext(element, false);
        if (context == null) {
            return {};
        }
        /** @type {?} */
        const lView = context.lView;
        /** @type {?} */
        const tNodeAttrs = ((/** @type {?} */ (lView[TVIEW].data[context.nodeIndex]))).attrs;
        /** @type {?} */
        const lowercaseTNodeAttrs = [];
        // For debug nodes we take the element's attribute directly from the DOM since it allows us
        // to account for ones that weren't set via bindings (e.g. ViewEngine keeps track of the ones
        // that are set through `Renderer2`). The problem is that the browser will lowercase all names,
        // however since we have the attributes already on the TNode, we can preserve the case by going
        // through them once, adding them to the `attributes` map and putting their lower-cased name
        // into an array. Afterwards when we're going through the native DOM attributes, we can check
        // whether we haven't run into an attribute already through the TNode.
        if (tNodeAttrs) {
            /** @type {?} */
            let i = 0;
            while (i < tNodeAttrs.length) {
                /** @type {?} */
                const attrName = tNodeAttrs[i];
                // Stop as soon as we hit a marker. We only care about the regular attributes. Everything
                // else will be handled below when we read the final attributes off the DOM.
                if (typeof attrName !== 'string')
                    break;
                /** @type {?} */
                const attrValue = tNodeAttrs[i + 1];
                attributes[attrName] = (/** @type {?} */ (attrValue));
                lowercaseTNodeAttrs.push(attrName.toLowerCase());
                i += 2;
            }
        }
        /** @type {?} */
        const eAttrs = element.attributes;
        for (let i = 0; i < eAttrs.length; i++) {
            /** @type {?} */
            const attr = eAttrs[i];
            /** @type {?} */
            const lowercaseName = attr.name.toLowerCase();
            // Make sure that we don't assign the same attribute both in its
            // case-sensitive form and the lower-cased one from the browser.
            if (lowercaseTNodeAttrs.indexOf(lowercaseName) === -1) {
                // Save the lowercase name to align the behavior between browsers.
                // IE preserves the case, while all other browser convert it to lower case.
                attributes[lowercaseName] = attr.value;
            }
        }
        return attributes;
    }
    /**
     * @return {?}
     */
    get styles() {
        if (this.nativeElement && ((/** @type {?} */ (this.nativeElement))).style) {
            return (/** @type {?} */ (((/** @type {?} */ (this.nativeElement))).style));
        }
        return {};
    }
    /**
     * @return {?}
     */
    get classes() {
        /** @type {?} */
        const result = {};
        /** @type {?} */
        const element = (/** @type {?} */ (this.nativeElement));
        // SVG elements return an `SVGAnimatedString` instead of a plain string for the `className`.
        /** @type {?} */
        const className = (/** @type {?} */ (element.className));
        /** @type {?} */
        const classes = className && typeof className !== 'string' ? className.baseVal.split(' ') :
            className.split(' ');
        classes.forEach((/**
         * @param {?} value
         * @return {?}
         */
        (value) => result[value] = true));
        return result;
    }
    /**
     * @return {?}
     */
    get childNodes() {
        /** @type {?} */
        const childNodes = this.nativeNode.childNodes;
        /** @type {?} */
        const children = [];
        for (let i = 0; i < childNodes.length; i++) {
            /** @type {?} */
            const element = childNodes[i];
            children.push(getDebugNode__POST_R3__(element));
        }
        return children;
    }
    /**
     * @return {?}
     */
    get children() {
        /** @type {?} */
        const nativeElement = this.nativeElement;
        if (!nativeElement)
            return [];
        /** @type {?} */
        const childNodes = nativeElement.children;
        /** @type {?} */
        const children = [];
        for (let i = 0; i < childNodes.length; i++) {
            /** @type {?} */
            const element = childNodes[i];
            children.push(getDebugNode__POST_R3__(element));
        }
        return children;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    query(predicate) {
        /** @type {?} */
        const results = this.queryAll(predicate);
        return results[0] || null;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    queryAll(predicate) {
        /** @type {?} */
        const matches = [];
        _queryAllR3(this, predicate, matches, true);
        return matches;
    }
    /**
     * @param {?} predicate
     * @return {?}
     */
    queryAllNodes(predicate) {
        /** @type {?} */
        const matches = [];
        _queryAllR3(this, predicate, matches, false);
        return matches;
    }
    /**
     * @param {?} eventName
     * @param {?} eventObj
     * @return {?}
     */
    triggerEventHandler(eventName, eventObj) {
        /** @type {?} */
        const node = (/** @type {?} */ (this.nativeNode));
        /** @type {?} */
        const invokedListeners = [];
        this.listeners.forEach((/**
         * @param {?} listener
         * @return {?}
         */
        listener => {
            if (listener.name === eventName) {
                /** @type {?} */
                const callback = listener.callback;
                callback.call(node, eventObj);
                invokedListeners.push(callback);
            }
        }));
        // We need to check whether `eventListeners` exists, because it's something
        // that Zone.js only adds to `EventTarget` in browser environments.
        if (typeof node.eventListeners === 'function') {
            // Note that in Ivy we wrap event listeners with a call to `event.preventDefault` in some
            // cases. We use '__ngUnwrap__' as a special token that gives us access to the actual event
            // listener.
            node.eventListeners(eventName).forEach((/**
             * @param {?} listener
             * @return {?}
             */
            (listener) => {
                // In order to ensure that we can detect the special __ngUnwrap__ token described above, we
                // use `toString` on the listener and see if it contains the token. We use this approach to
                // ensure that it still worked with compiled code since it cannot remove or rename string
                // literals. We also considered using a special function name (i.e. if(listener.name ===
                // special)) but that was more cumbersome and we were also concerned the compiled code could
                // strip the name, turning the condition in to ("" === "") and always returning true.
                if (listener.toString().indexOf('__ngUnwrap__') !== -1) {
                    /** @type {?} */
                    const unwrappedListener = listener('__ngUnwrap__');
                    return invokedListeners.indexOf(unwrappedListener) === -1 &&
                        unwrappedListener.call(node, eventObj);
                }
            }));
        }
    }
}
/**
 * @param {?} element
 * @param {?} properties
 * @return {?}
 */
function copyDomProperties(element, properties) {
    if (element) {
        // Skip own properties (as those are patched)
        /** @type {?} */
        let obj = Object.getPrototypeOf(element);
        /** @type {?} */
        const NodePrototype = Node.prototype;
        while (obj !== null && obj !== NodePrototype) {
            /** @type {?} */
            const descriptors = Object.getOwnPropertyDescriptors(obj);
            for (let key in descriptors) {
                if (!key.startsWith('__') && !key.startsWith('on')) {
                    // don't include properties starting with `__` and `on`.
                    // `__` are patched values which should not be included.
                    // `on` are listeners which also should not be included.
                    /** @type {?} */
                    const value = ((/** @type {?} */ (element)))[key];
                    if (isPrimitiveValue(value)) {
                        properties[key] = value;
                    }
                }
            }
            obj = Object.getPrototypeOf(obj);
        }
    }
}
/**
 * @param {?} value
 * @return {?}
 */
function isPrimitiveValue(value) {
    return typeof value === 'string' || typeof value === 'boolean' || typeof value === 'number' ||
        value === null;
}
/**
 * @param {?} parentElement
 * @param {?} predicate
 * @param {?} matches
 * @param {?} elementsOnly
 * @return {?}
 */
function _queryAllR3(parentElement, predicate, matches, elementsOnly) {
    /** @type {?} */
    const context = loadLContext(parentElement.nativeNode, false);
    if (context !== null) {
        /** @type {?} */
        const parentTNode = (/** @type {?} */ (context.lView[TVIEW].data[context.nodeIndex]));
        _queryNodeChildrenR3(parentTNode, context.lView, predicate, matches, elementsOnly, parentElement.nativeNode);
    }
    else {
        // If the context is null, then `parentElement` was either created with Renderer2 or native DOM
        // APIs.
        _queryNativeNodeDescendants(parentElement.nativeNode, predicate, matches, elementsOnly);
    }
}
/**
 * Recursively match the current TNode against the predicate, and goes on with the next ones.
 *
 * @param {?} tNode the current TNode
 * @param {?} lView the LView of this TNode
 * @param {?} predicate the predicate to match
 * @param {?} matches the list of positive matches
 * @param {?} elementsOnly whether only elements should be searched
 * @param {?} rootNativeNode the root native node on which predicate should not be matched
 * @return {?}
 */
function _queryNodeChildrenR3(tNode, lView, predicate, matches, elementsOnly, rootNativeNode) {
    /** @type {?} */
    const nativeNode = getNativeByTNodeOrNull(tNode, lView);
    // For each type of TNode, specific logic is executed.
    if (tNode.type === 3 /* Element */ || tNode.type === 4 /* ElementContainer */) {
        // Case 1: the TNode is an element
        // The native node has to be checked.
        _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);
        if (isComponentHost(tNode)) {
            // If the element is the host of a component, then all nodes in its view have to be processed.
            // Note: the component's content (tNode.child) will be processed from the insertion points.
            /** @type {?} */
            const componentView = getComponentLViewByIndex(tNode.index, lView);
            if (componentView && componentView[TVIEW].firstChild) {
                _queryNodeChildrenR3((/** @type {?} */ (componentView[TVIEW].firstChild)), componentView, predicate, matches, elementsOnly, rootNativeNode);
            }
        }
        else {
            if (tNode.child) {
                // Otherwise, its children have to be processed.
                _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
            }
            // We also have to query the DOM directly in order to catch elements inserted through
            // Renderer2. Note that this is __not__ optimal, because we're walking similar trees multiple
            // times. ViewEngine could do it more efficiently, because all the insertions go through
            // Renderer2, however that's not the case in Ivy. This approach is being used because:
            // 1. Matching the ViewEngine behavior would mean potentially introducing a depedency
            //    from `Renderer2` to Ivy which could bring Ivy code into ViewEngine.
            // 2. We would have to make `Renderer3` "know" about debug nodes.
            // 3. It allows us to capture nodes that were inserted directly via the DOM.
            nativeNode && _queryNativeNodeDescendants(nativeNode, predicate, matches, elementsOnly);
        }
        // In all cases, if a dynamic container exists for this node, each view inside it has to be
        // processed.
        /** @type {?} */
        const nodeOrContainer = lView[tNode.index];
        if (isLContainer(nodeOrContainer)) {
            _queryNodeChildrenInContainerR3(nodeOrContainer, predicate, matches, elementsOnly, rootNativeNode);
        }
    }
    else if (tNode.type === 0 /* Container */) {
        // Case 2: the TNode is a container
        // The native node has to be checked.
        /** @type {?} */
        const lContainer = lView[tNode.index];
        _addQueryMatchR3(lContainer[NATIVE], predicate, matches, elementsOnly, rootNativeNode);
        // Each view inside the container has to be processed.
        _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode);
    }
    else if (tNode.type === 1 /* Projection */) {
        // Case 3: the TNode is a projection insertion point (i.e. a <ng-content>).
        // The nodes projected at this location all need to be processed.
        /** @type {?} */
        const componentView = (/** @type {?} */ (lView))[DECLARATION_COMPONENT_VIEW];
        /** @type {?} */
        const componentHost = (/** @type {?} */ (componentView[T_HOST]));
        /** @type {?} */
        const head = ((/** @type {?} */ (componentHost.projection)))[(/** @type {?} */ (tNode.projection))];
        if (Array.isArray(head)) {
            for (let nativeNode of head) {
                _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode);
            }
        }
        else if (head) {
            /** @type {?} */
            const nextLView = (/** @type {?} */ ((/** @type {?} */ (componentView[PARENT]))));
            /** @type {?} */
            const nextTNode = (/** @type {?} */ (nextLView[TVIEW].data[head.index]));
            _queryNodeChildrenR3(nextTNode, nextLView, predicate, matches, elementsOnly, rootNativeNode);
        }
    }
    else if (tNode.child) {
        // Case 4: the TNode is a view.
        _queryNodeChildrenR3(tNode.child, lView, predicate, matches, elementsOnly, rootNativeNode);
    }
    // We don't want to go to the next sibling of the root node.
    if (rootNativeNode !== nativeNode) {
        // To determine the next node to be processed, we need to use the next or the projectionNext
        // link, depending on whether the current node has been projected.
        /** @type {?} */
        const nextTNode = (tNode.flags & 4 /* isProjected */) ? tNode.projectionNext : tNode.next;
        if (nextTNode) {
            _queryNodeChildrenR3(nextTNode, lView, predicate, matches, elementsOnly, rootNativeNode);
        }
    }
}
/**
 * Process all TNodes in a given container.
 *
 * @param {?} lContainer the container to be processed
 * @param {?} predicate the predicate to match
 * @param {?} matches the list of positive matches
 * @param {?} elementsOnly whether only elements should be searched
 * @param {?} rootNativeNode the root native node on which predicate should not be matched
 * @return {?}
 */
function _queryNodeChildrenInContainerR3(lContainer, predicate, matches, elementsOnly, rootNativeNode) {
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
        /** @type {?} */
        const childView = lContainer[i];
        _queryNodeChildrenR3((/** @type {?} */ (childView[TVIEW].node)), childView, predicate, matches, elementsOnly, rootNativeNode);
    }
}
/**
 * Match the current native node against the predicate.
 *
 * @param {?} nativeNode the current native node
 * @param {?} predicate the predicate to match
 * @param {?} matches the list of positive matches
 * @param {?} elementsOnly whether only elements should be searched
 * @param {?} rootNativeNode the root native node on which predicate should not be matched
 * @return {?}
 */
function _addQueryMatchR3(nativeNode, predicate, matches, elementsOnly, rootNativeNode) {
    if (rootNativeNode !== nativeNode) {
        /** @type {?} */
        const debugNode = getDebugNode$1(nativeNode);
        if (!debugNode) {
            return;
        }
        // Type of the "predicate and "matches" array are set based on the value of
        // the "elementsOnly" parameter. TypeScript is not able to properly infer these
        // types with generics, so we manually cast the parameters accordingly.
        if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&
            matches.indexOf(debugNode) === -1) {
            matches.push(debugNode);
        }
        else if (!elementsOnly && ((/** @type {?} */ (predicate)))(debugNode) &&
            ((/** @type {?} */ (matches))).indexOf(debugNode) === -1) {
            ((/** @type {?} */ (matches))).push(debugNode);
        }
    }
}
/**
 * Match all the descendants of a DOM node against a predicate.
 *
 * @param {?} parentNode
 * @param {?} predicate the predicate to match
 * @param {?} matches the list of positive matches
 * @param {?} elementsOnly whether only elements should be searched
 * @return {?}
 */
function _queryNativeNodeDescendants(parentNode, predicate, matches, elementsOnly) {
    /** @type {?} */
    const nodes = parentNode.childNodes;
    /** @type {?} */
    const length = nodes.length;
    for (let i = 0; i < length; i++) {
        /** @type {?} */
        const node = nodes[i];
        /** @type {?} */
        const debugNode = getDebugNode$1(node);
        if (debugNode) {
            if (elementsOnly && debugNode instanceof DebugElement__POST_R3__ && predicate(debugNode) &&
                matches.indexOf(debugNode) === -1) {
                matches.push(debugNode);
            }
            else if (!elementsOnly && ((/** @type {?} */ (predicate)))(debugNode) &&
                ((/** @type {?} */ (matches))).indexOf(debugNode) === -1) {
                ((/** @type {?} */ (matches))).push(debugNode);
            }
            _queryNativeNodeDescendants(node, predicate, matches, elementsOnly);
        }
    }
}
/**
 * Iterates through the property bindings for a given node and generates
 * a map of property names to values. This map only contains property bindings
 * defined in templates, not in host bindings.
 * @param {?} properties
 * @param {?} tNode
 * @param {?} lView
 * @param {?} tData
 * @return {?}
 */
function collectPropertyBindings(properties, tNode, lView, tData) {
    /** @type {?} */
    let bindingIndexes = tNode.propertyBindings;
    if (bindingIndexes !== null) {
        for (let i = 0; i < bindingIndexes.length; i++) {
            /** @type {?} */
            const bindingIndex = bindingIndexes[i];
            /** @type {?} */
            const propMetadata = (/** @type {?} */ (tData[bindingIndex]));
            /** @type {?} */
            const metadataParts = propMetadata.split(INTERPOLATION_DELIMITER);
            /** @type {?} */
            const propertyName = metadataParts[0];
            if (metadataParts.length > 1) {
                /** @type {?} */
                let value = metadataParts[1];
                for (let j = 1; j < metadataParts.length - 1; j++) {
                    value += renderStringify(lView[bindingIndex + j - 1]) + metadataParts[j + 1];
                }
                properties[propertyName] = value;
            }
            else {
                properties[propertyName] = lView[bindingIndex];
            }
        }
    }
}
// Need to keep the nodes in a global Map so that multiple angular apps are supported.
/** @type {?} */
const _nativeNodeToDebugNode = new Map();
/**
 * @param {?} nativeNode
 * @return {?}
 */
function getDebugNode__PRE_R3__(nativeNode) {
    return _nativeNodeToDebugNode.get(nativeNode) || null;
}
/** @type {?} */
const NG_DEBUG_PROPERTY = '__ng_debug__';
/**
 * @param {?} nativeNode
 * @return {?}
 */
function getDebugNode__POST_R3__(nativeNode) {
    if (nativeNode instanceof Node) {
        if (!(nativeNode.hasOwnProperty(NG_DEBUG_PROPERTY))) {
            ((/** @type {?} */ (nativeNode)))[NG_DEBUG_PROPERTY] = nativeNode.nodeType == Node.ELEMENT_NODE ?
                new DebugElement__POST_R3__((/** @type {?} */ (nativeNode))) :
                new DebugNode__POST_R3__(nativeNode);
        }
        return ((/** @type {?} */ (nativeNode)))[NG_DEBUG_PROPERTY];
    }
    return null;
}
/**
 * \@publicApi
 * @type {?}
 */
const getDebugNode$1 = getDebugNode__POST_R3__;
/**
 * @param {?} nativeNode
 * @return {?}
 */
function getDebugNodeR2__PRE_R3__(nativeNode) {
    return getDebugNode__PRE_R3__(nativeNode);
}
/**
 * @param {?} _nativeNode
 * @return {?}
 */
function getDebugNodeR2__POST_R3__(_nativeNode) {
    return null;
}
/** @type {?} */
const getDebugNodeR2 = getDebugNodeR2__POST_R3__;
/**
 * @return {?}
 */
function getAllDebugNodes() {
    return Array.from(_nativeNodeToDebugNode.values());
}
/**
 * @param {?} node
 * @return {?}
 */
function indexDebugNode(node) {
    _nativeNodeToDebugNode.set(node.nativeNode, node);
}
/**
 * @param {?} node
 * @return {?}
 */
function removeDebugNodeFromIndex(node) {
    _nativeNodeToDebugNode.delete(node.nativeNode);
}
/**
 * A boolean-valued function over a value, possibly including context information
 * regarding that value's position in an array.
 *
 * \@publicApi
 * @record
 * @template T
 */
function Predicate() { }
/**
 * \@publicApi
 * @type {?}
 */
const DebugNode$1 = DebugNode__POST_R3__;
/**
 * \@publicApi
 * @type {?}
 */
const DebugElement = DebugElement__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/change_detection.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/platform_core_providers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const _CORE_PLATFORM_PROVIDERS = [
    // Set a default platform name for platforms that don't set it explicitly.
    { provide: PLATFORM_ID, useValue: 'unknown' },
    { provide: PlatformRef, deps: [Injector] },
    { provide: TestabilityRegistry, deps: [] },
    { provide: Console, deps: [] },
];
/**
 * This platform has to be included in any other platform
 *
 * \@publicApi
 * @type {?}
 */
const platformCore = createPlatformFactory(null, 'core', _CORE_PLATFORM_PROVIDERS);

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/application_module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function _iterableDiffersFactory() {
    return defaultIterableDiffers;
}
/**
 * @return {?}
 */
function _keyValueDiffersFactory() {
    return defaultKeyValueDiffers;
}
/**
 * @param {?=} locale
 * @return {?}
 */
function _localeFactory(locale) {
    locale = locale || getGlobalLocale();
    if (ivyEnabled) {
        setLocaleId(locale);
    }
    return locale;
}
/**
 * Work out the locale from the potential global properties.
 *
 * * Closure Compiler: use `goog.LOCALE`.
 * * Ivy enabled: use `$localize.locale`
 * @return {?}
 */
function getGlobalLocale() {
    if (typeof ngI18nClosureMode !== 'undefined' && ngI18nClosureMode &&
        typeof goog !== 'undefined' && goog.LOCALE !== 'en') {
        // * The default `goog.LOCALE` value is `en`, while Angular used `en-US`.
        // * In order to preserve backwards compatibility, we use Angular default value over
        //   Closure Compiler's one.
        return goog.LOCALE;
    }
    else {
        // KEEP `typeof $localize !== 'undefined' && $localize.locale` IN SYNC WITH THE LOCALIZE
        // COMPILE-TIME INLINER.
        //
        // * During compile time inlining of translations the expression will be replaced
        //   with a string literal that is the current locale. Other forms of this expression are not
        //   guaranteed to be replaced.
        //
        // * During runtime translation evaluation, the developer is required to set `$localize.locale`
        //   if required, or just to provide their own `LOCALE_ID` provider.
        return (ivyEnabled && typeof $localize !== 'undefined' && $localize.locale) ||
            DEFAULT_LOCALE_ID;
    }
}
const ɵ0$g = USD_CURRENCY_CODE;
/**
 * A built-in [dependency injection token](guide/glossary#di-token)
 * that is used to configure the root injector for bootstrapping.
 * @type {?}
 */
const APPLICATION_MODULE_PROVIDERS = [
    {
        provide: ApplicationRef,
        useClass: ApplicationRef,
        deps: [NgZone, Console, Injector, ErrorHandler, ComponentFactoryResolver, ApplicationInitStatus]
    },
    { provide: SCHEDULER, deps: [NgZone], useFactory: zoneSchedulerFactory },
    {
        provide: ApplicationInitStatus,
        useClass: ApplicationInitStatus,
        deps: [[new Optional(), APP_INITIALIZER]]
    },
    { provide: Compiler, useClass: Compiler, deps: [] },
    APP_ID_RANDOM_PROVIDER,
    { provide: IterableDiffers, useFactory: _iterableDiffersFactory, deps: [] },
    { provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory, deps: [] },
    {
        provide: LOCALE_ID$1,
        useFactory: _localeFactory,
        deps: [[new Inject(LOCALE_ID$1), new Optional(), new SkipSelf()]]
    },
    { provide: DEFAULT_CURRENCY_CODE, useValue: ɵ0$g },
];
/**
 * Schedule work at next available slot.
 *
 * In Ivy this is just `requestAnimationFrame`. For compatibility reasons when bootstrapped
 * using `platformRef.bootstrap` we need to use `NgZone.onStable` as the scheduling mechanism.
 * This overrides the scheduling mechanism in Ivy to `NgZone.onStable`.
 *
 * @param {?} ngZone NgZone to use for scheduling.
 * @return {?}
 */
function zoneSchedulerFactory(ngZone) {
    /** @type {?} */
    let queue = [];
    ngZone.onStable.subscribe((/**
     * @return {?}
     */
    () => {
        while (queue.length) {
            (/** @type {?} */ (queue.pop()))();
        }
    }));
    return (/**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { queue.push(fn); });
}
/**
 * Configures the root injector for an app with
 * providers of `\@angular/core` dependencies that `ApplicationRef` needs
 * to bootstrap components.
 *
 * Re-exported by `BrowserModule`, which is included automatically in the root
 * `AppModule` when you create a new app with the CLI `new` command.
 *
 * \@publicApi
 */
class ApplicationModule {
    // Inject ApplicationRef to make it eager...
    /**
     * @param {?} appRef
     */
    constructor(appRef) {
    }
}
ApplicationModule.ɵmod = ɵɵdefineNgModule({ type: ApplicationModule });
ApplicationModule.ɵinj = ɵɵdefineInjector({ factory: function ApplicationModule_Factory(t) { return new (t || ApplicationModule)(ɵɵinject(ApplicationRef)); }, providers: APPLICATION_MODULE_PROVIDERS });
/** @nocollapse */
ApplicationModule.ctorParameters = () => [
    { type: ApplicationRef }
];
/*@__PURE__*/ (function () { setClassMetadata(ApplicationModule, [{
        type: NgModule,
        args: [{ providers: APPLICATION_MODULE_PROVIDERS }]
    }], function () { return [{ type: ApplicationRef }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/element.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?=} handleEvent
 * @param {?=} templateFactory
 * @return {?}
 */
function anchorDef(flags, matchedQueriesDsl, ngContentIndex, childCount, handleEvent, templateFactory) {
    flags |= 1 /* TypeElement */;
    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);
    /** @type {?} */
    const template = templateFactory ? resolveDefinition(templateFactory) : null;
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        flags,
        checkIndex: -1,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: {
            ns: null,
            name: null,
            attrs: null, template,
            componentProvider: null,
            componentView: null,
            componentRendererType: null,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP
        },
        provider: null,
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} checkIndex
 * @param {?} flags
 * @param {?} matchedQueriesDsl
 * @param {?} ngContentIndex
 * @param {?} childCount
 * @param {?} namespaceAndName
 * @param {?=} fixedAttrs
 * @param {?=} bindings
 * @param {?=} outputs
 * @param {?=} handleEvent
 * @param {?=} componentView
 * @param {?=} componentRendererType
 * @return {?}
 */
function elementDef(checkIndex, flags, matchedQueriesDsl, ngContentIndex, childCount, namespaceAndName, fixedAttrs = [], bindings, outputs, handleEvent, componentView, componentRendererType) {
    if (!handleEvent) {
        handleEvent = NOOP;
    }
    const { matchedQueries, references, matchedQueryIds } = splitMatchedQueriesDsl(matchedQueriesDsl);
    /** @type {?} */
    let ns = (/** @type {?} */ (null));
    /** @type {?} */
    let name = (/** @type {?} */ (null));
    if (namespaceAndName) {
        [ns, name] = splitNamespace(namespaceAndName);
    }
    bindings = bindings || [];
    /** @type {?} */
    const bindingDefs = [];
    for (let i = 0; i < bindings.length; i++) {
        const [bindingFlags, namespaceAndName, suffixOrSecurityContext] = bindings[i];
        const [ns, name] = splitNamespace(namespaceAndName);
        /** @type {?} */
        let securityContext = (/** @type {?} */ (undefined));
        /** @type {?} */
        let suffix = (/** @type {?} */ (undefined));
        switch (bindingFlags & 15 /* Types */) {
            case 4 /* TypeElementStyle */:
                suffix = (/** @type {?} */ (suffixOrSecurityContext));
                break;
            case 1 /* TypeElementAttribute */:
            case 8 /* TypeProperty */:
                securityContext = (/** @type {?} */ (suffixOrSecurityContext));
                break;
        }
        bindingDefs[i] =
            { flags: bindingFlags, ns, name, nonMinifiedName: name, securityContext, suffix };
    }
    outputs = outputs || [];
    /** @type {?} */
    const outputDefs = [];
    for (let i = 0; i < outputs.length; i++) {
        const [target, eventName] = outputs[i];
        outputDefs[i] = {
            type: 0 /* ElementOutput */,
            target: (/** @type {?} */ (target)), eventName,
            propName: null
        };
    }
    fixedAttrs = fixedAttrs || [];
    /** @type {?} */
    const attrs = (/** @type {?} */ (fixedAttrs.map((/**
     * @param {?} __0
     * @return {?}
     */
    ([namespaceAndName, value]) => {
        const [ns, name] = splitNamespace(namespaceAndName);
        return [ns, name, value];
    }))));
    componentRendererType = resolveRendererType2(componentRendererType);
    if (componentView) {
        flags |= 33554432 /* ComponentView */;
    }
    flags |= 1 /* TypeElement */;
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex,
        flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0, matchedQueries, matchedQueryIds, references, ngContentIndex, childCount,
        bindings: bindingDefs,
        bindingFlags: calcBindingFlags(bindingDefs),
        outputs: outputDefs,
        element: {
            ns,
            name,
            attrs,
            template: null,
            // will bet set by the view definition
            componentProvider: null,
            componentView: componentView || null,
            componentRendererType: componentRendererType,
            publicProviders: null,
            allProviders: null,
            handleEvent: handleEvent || NOOP,
        },
        provider: null,
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function createElement(view, renderHost, def) {
    /** @type {?} */
    const elDef = (/** @type {?} */ (def.element));
    /** @type {?} */
    const rootSelectorOrNode = view.root.selectorOrNode;
    /** @type {?} */
    const renderer = view.renderer;
    /** @type {?} */
    let el;
    if (view.parent || !rootSelectorOrNode) {
        if (elDef.name) {
            el = renderer.createElement(elDef.name, elDef.ns);
        }
        else {
            el = renderer.createComment('');
        }
        /** @type {?} */
        const parentEl = getParentRenderElement(view, renderHost, def);
        if (parentEl) {
            renderer.appendChild(parentEl, el);
        }
    }
    else {
        // when using native Shadow DOM, do not clear the root element contents to allow slot projection
        /** @type {?} */
        const preserveContent = (!!elDef.componentRendererType &&
            elDef.componentRendererType.encapsulation === ViewEncapsulation$1.ShadowDom);
        el = renderer.selectRootElement(rootSelectorOrNode, preserveContent);
    }
    if (elDef.attrs) {
        for (let i = 0; i < elDef.attrs.length; i++) {
            const [ns, name, value] = elDef.attrs[i];
            renderer.setAttribute(el, name, value, ns);
        }
    }
    return el;
}
/**
 * @param {?} view
 * @param {?} compView
 * @param {?} def
 * @param {?} el
 * @return {?}
 */
function listenToElementOutputs(view, compView, def, el) {
    for (let i = 0; i < def.outputs.length; i++) {
        /** @type {?} */
        const output = def.outputs[i];
        /** @type {?} */
        const handleEventClosure = renderEventHandlerClosure(view, def.nodeIndex, elementEventFullName(output.target, output.eventName));
        /** @type {?} */
        let listenTarget = output.target;
        /** @type {?} */
        let listenerView = view;
        if (output.target === 'component') {
            listenTarget = null;
            listenerView = compView;
        }
        /** @type {?} */
        const disposable = (/** @type {?} */ (listenerView.renderer.listen(listenTarget || el, output.eventName, handleEventClosure)));
        (/** @type {?} */ (view.disposables))[def.outputIndex + i] = disposable;
    }
}
/**
 * @param {?} view
 * @param {?} index
 * @param {?} eventName
 * @return {?}
 */
function renderEventHandlerClosure(view, index, eventName) {
    return (/**
     * @param {?} event
     * @return {?}
     */
    (event) => dispatchEvent(view, index, eventName, event));
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateElementInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    /** @type {?} */
    const bindLen = def.bindings.length;
    /** @type {?} */
    let changed = false;
    if (bindLen > 0 && checkAndUpdateElementValue(view, def, 0, v0))
        changed = true;
    if (bindLen > 1 && checkAndUpdateElementValue(view, def, 1, v1))
        changed = true;
    if (bindLen > 2 && checkAndUpdateElementValue(view, def, 2, v2))
        changed = true;
    if (bindLen > 3 && checkAndUpdateElementValue(view, def, 3, v3))
        changed = true;
    if (bindLen > 4 && checkAndUpdateElementValue(view, def, 4, v4))
        changed = true;
    if (bindLen > 5 && checkAndUpdateElementValue(view, def, 5, v5))
        changed = true;
    if (bindLen > 6 && checkAndUpdateElementValue(view, def, 6, v6))
        changed = true;
    if (bindLen > 7 && checkAndUpdateElementValue(view, def, 7, v7))
        changed = true;
    if (bindLen > 8 && checkAndUpdateElementValue(view, def, 8, v8))
        changed = true;
    if (bindLen > 9 && checkAndUpdateElementValue(view, def, 9, v9))
        changed = true;
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateElementDynamic(view, def, values) {
    /** @type {?} */
    let changed = false;
    for (let i = 0; i < values.length; i++) {
        if (checkAndUpdateElementValue(view, def, i, values[i]))
            changed = true;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} bindingIdx
 * @param {?} value
 * @return {?}
 */
function checkAndUpdateElementValue(view, def, bindingIdx, value) {
    if (!checkAndUpdateBinding(view, def, bindingIdx, value)) {
        return false;
    }
    /** @type {?} */
    const binding = def.bindings[bindingIdx];
    /** @type {?} */
    const elData = asElementData(view, def.nodeIndex);
    /** @type {?} */
    const renderNode = elData.renderElement;
    /** @type {?} */
    const name = (/** @type {?} */ (binding.name));
    switch (binding.flags & 15 /* Types */) {
        case 1 /* TypeElementAttribute */:
            setElementAttribute(view, binding, renderNode, binding.ns, name, value);
            break;
        case 2 /* TypeElementClass */:
            setElementClass(view, renderNode, name, value);
            break;
        case 4 /* TypeElementStyle */:
            setElementStyle(view, binding, renderNode, name, value);
            break;
        case 8 /* TypeProperty */:
            /** @type {?} */
            const bindView = (def.flags & 33554432 /* ComponentView */ &&
                binding.flags & 32 /* SyntheticHostProperty */) ?
                elData.componentView :
                view;
            setElementProperty(bindView, binding, renderNode, name, value);
            break;
    }
    return true;
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} ns
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementAttribute(view, binding, renderNode, ns, name, value) {
    /** @type {?} */
    const securityContext = binding.securityContext;
    /** @type {?} */
    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
    renderValue = renderValue != null ? renderValue.toString() : null;
    /** @type {?} */
    const renderer = view.renderer;
    if (value != null) {
        renderer.setAttribute(renderNode, name, renderValue, ns);
    }
    else {
        renderer.removeAttribute(renderNode, name, ns);
    }
}
/**
 * @param {?} view
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementClass(view, renderNode, name, value) {
    /** @type {?} */
    const renderer = view.renderer;
    if (value) {
        renderer.addClass(renderNode, name);
    }
    else {
        renderer.removeClass(renderNode, name);
    }
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementStyle(view, binding, renderNode, name, value) {
    /** @type {?} */
    let renderValue = view.root.sanitizer.sanitize(SecurityContext.STYLE, (/** @type {?} */ (value)));
    if (renderValue != null) {
        renderValue = renderValue.toString();
        /** @type {?} */
        const unit = binding.suffix;
        if (unit != null) {
            renderValue = renderValue + unit;
        }
    }
    else {
        renderValue = null;
    }
    /** @type {?} */
    const renderer = view.renderer;
    if (renderValue != null) {
        renderer.setStyle(renderNode, name, renderValue);
    }
    else {
        renderer.removeStyle(renderNode, name);
    }
}
/**
 * @param {?} view
 * @param {?} binding
 * @param {?} renderNode
 * @param {?} name
 * @param {?} value
 * @return {?}
 */
function setElementProperty(view, binding, renderNode, name, value) {
    /** @type {?} */
    const securityContext = binding.securityContext;
    /** @type {?} */
    let renderValue = securityContext ? view.root.sanitizer.sanitize(securityContext, value) : value;
    view.renderer.setProperty(renderNode, name, renderValue);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/query.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} flags
 * @param {?} id
 * @param {?} bindings
 * @return {?}
 */
function queryDef(flags, id, bindings) {
    /** @type {?} */
    let bindingDefs = [];
    for (let propName in bindings) {
        /** @type {?} */
        const bindingType = bindings[propName];
        bindingDefs.push({ propName, bindingType });
    }
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        // TODO(vicb): check
        checkIndex: -1, flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        ngContentIndex: -1,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        childCount: 0,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: { id, filterId: filterQueryId(id), bindings: bindingDefs },
        ngContent: null
    };
}
/**
 * @return {?}
 */
function createQuery() {
    return new QueryList();
}
/**
 * @param {?} view
 * @return {?}
 */
function dirtyParentQueries(view) {
    /** @type {?} */
    const queryIds = view.def.nodeMatchedQueries;
    while (view.parent && isEmbeddedView(view)) {
        /** @type {?} */
        let tplDef = (/** @type {?} */ (view.parentNodeDef));
        view = view.parent;
        // content queries
        /** @type {?} */
        const end = tplDef.nodeIndex + tplDef.childCount;
        for (let i = 0; i <= end; i++) {
            /** @type {?} */
            const nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & 67108864 /* TypeContentQuery */) &&
                (nodeDef.flags & 536870912 /* DynamicQuery */) &&
                ((/** @type {?} */ (nodeDef.query)).filterId & queryIds) === (/** @type {?} */ (nodeDef.query)).filterId) {
                asQueryList(view, i).setDirty();
            }
            if ((nodeDef.flags & 1 /* TypeElement */ && i + nodeDef.childCount < tplDef.nodeIndex) ||
                !(nodeDef.childFlags & 67108864 /* TypeContentQuery */) ||
                !(nodeDef.childFlags & 536870912 /* DynamicQuery */)) {
                // skip elements that don't contain the template element or no query.
                i += nodeDef.childCount;
            }
        }
    }
    // view queries
    if (view.def.nodeFlags & 134217728 /* TypeViewQuery */) {
        for (let i = 0; i < view.def.nodes.length; i++) {
            /** @type {?} */
            const nodeDef = view.def.nodes[i];
            if ((nodeDef.flags & 134217728 /* TypeViewQuery */) && (nodeDef.flags & 536870912 /* DynamicQuery */)) {
                asQueryList(view, i).setDirty();
            }
            // only visit the root nodes
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */
function checkAndUpdateQuery(view, nodeDef) {
    /** @type {?} */
    const queryList = asQueryList(view, nodeDef.nodeIndex);
    if (!queryList.dirty) {
        return;
    }
    /** @type {?} */
    let directiveInstance;
    /** @type {?} */
    let newValues = (/** @type {?} */ (undefined));
    if (nodeDef.flags & 67108864 /* TypeContentQuery */) {
        /** @type {?} */
        const elementDef = (/** @type {?} */ ((/** @type {?} */ (nodeDef.parent)).parent));
        newValues = calcQueryValues(view, elementDef.nodeIndex, elementDef.nodeIndex + elementDef.childCount, (/** @type {?} */ (nodeDef.query)), []);
        directiveInstance = asProviderData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).instance;
    }
    else if (nodeDef.flags & 134217728 /* TypeViewQuery */) {
        newValues = calcQueryValues(view, 0, view.def.nodes.length - 1, (/** @type {?} */ (nodeDef.query)), []);
        directiveInstance = view.component;
    }
    queryList.reset(newValues);
    /** @type {?} */
    const bindings = (/** @type {?} */ (nodeDef.query)).bindings;
    /** @type {?} */
    let notify = false;
    for (let i = 0; i < bindings.length; i++) {
        /** @type {?} */
        const binding = bindings[i];
        /** @type {?} */
        let boundValue;
        switch (binding.bindingType) {
            case 0 /* First */:
                boundValue = queryList.first;
                break;
            case 1 /* All */:
                boundValue = queryList;
                notify = true;
                break;
        }
        directiveInstance[binding.propName] = boundValue;
    }
    if (notify) {
        queryList.notifyOnChanges();
    }
}
/**
 * @param {?} view
 * @param {?} startIndex
 * @param {?} endIndex
 * @param {?} queryDef
 * @param {?} values
 * @return {?}
 */
function calcQueryValues(view, startIndex, endIndex, queryDef, values) {
    for (let i = startIndex; i <= endIndex; i++) {
        /** @type {?} */
        const nodeDef = view.def.nodes[i];
        /** @type {?} */
        const valueType = nodeDef.matchedQueries[queryDef.id];
        if (valueType != null) {
            values.push(getQueryValue(view, nodeDef, valueType));
        }
        if (nodeDef.flags & 1 /* TypeElement */ && (/** @type {?} */ (nodeDef.element)).template &&
            ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).template)).nodeMatchedQueries & queryDef.filterId) ===
                queryDef.filterId) {
            /** @type {?} */
            const elementData = asElementData(view, i);
            // check embedded views that were attached at the place of their template,
            // but process child nodes first if some match the query (see issue #16568)
            if ((nodeDef.childMatchedQueries & queryDef.filterId) === queryDef.filterId) {
                calcQueryValues(view, i + 1, i + nodeDef.childCount, queryDef, values);
                i += nodeDef.childCount;
            }
            if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                /** @type {?} */
                const embeddedViews = (/** @type {?} */ (elementData.viewContainer))._embeddedViews;
                for (let k = 0; k < embeddedViews.length; k++) {
                    /** @type {?} */
                    const embeddedView = embeddedViews[k];
                    /** @type {?} */
                    const dvc = declaredViewContainer(embeddedView);
                    if (dvc && dvc === elementData) {
                        calcQueryValues(embeddedView, 0, embeddedView.def.nodes.length - 1, queryDef, values);
                    }
                }
            }
            /** @type {?} */
            const projectedViews = elementData.template._projectedViews;
            if (projectedViews) {
                for (let k = 0; k < projectedViews.length; k++) {
                    /** @type {?} */
                    const projectedView = projectedViews[k];
                    calcQueryValues(projectedView, 0, projectedView.def.nodes.length - 1, queryDef, values);
                }
            }
        }
        if ((nodeDef.childMatchedQueries & queryDef.filterId) !== queryDef.filterId) {
            // if no child matches the query, skip the children.
            i += nodeDef.childCount;
        }
    }
    return values;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} queryValueType
 * @return {?}
 */
function getQueryValue(view, nodeDef, queryValueType) {
    if (queryValueType != null) {
        // a match
        switch (queryValueType) {
            case 1 /* RenderElement */:
                return asElementData(view, nodeDef.nodeIndex).renderElement;
            case 0 /* ElementRef */:
                return new ElementRef(asElementData(view, nodeDef.nodeIndex).renderElement);
            case 2 /* TemplateRef */:
                return asElementData(view, nodeDef.nodeIndex).template;
            case 3 /* ViewContainerRef */:
                return asElementData(view, nodeDef.nodeIndex).viewContainer;
            case 4 /* Provider */:
                return asProviderData(view, nodeDef.nodeIndex).instance;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/ng_content.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} ngContentIndex
 * @param {?} index
 * @return {?}
 */
function ngContentDef(ngContentIndex, index) {
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex: -1,
        flags: 8 /* TypeNgContent */,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {}, ngContentIndex,
        childCount: 0,
        bindings: [],
        bindingFlags: 0,
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: null,
        ngContent: { index }
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function appendNgContent(view, renderHost, def) {
    /** @type {?} */
    const parentEl = getParentRenderElement(view, renderHost, def);
    if (!parentEl) {
        // Nothing to do if there is no parent element.
        return;
    }
    /** @type {?} */
    const ngContentIndex = (/** @type {?} */ (def.ngContent)).index;
    visitProjectedRenderNodes(view, ngContentIndex, 1 /* AppendChild */, parentEl, null, undefined);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/pure_expression.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} checkIndex
 * @param {?} argCount
 * @return {?}
 */
function purePipeDef(checkIndex, argCount) {
    // argCount + 1 to include the pipe as first arg
    return _pureExpressionDef(128 /* TypePurePipe */, checkIndex, newArray(argCount + 1));
}
/**
 * @param {?} checkIndex
 * @param {?} argCount
 * @return {?}
 */
function pureArrayDef(checkIndex, argCount) {
    return _pureExpressionDef(32 /* TypePureArray */, checkIndex, newArray(argCount));
}
/**
 * @param {?} checkIndex
 * @param {?} propToIndex
 * @return {?}
 */
function pureObjectDef(checkIndex, propToIndex) {
    /** @type {?} */
    const keys = Object.keys(propToIndex);
    /** @type {?} */
    const nbKeys = keys.length;
    /** @type {?} */
    const propertyNames = [];
    for (let i = 0; i < nbKeys; i++) {
        /** @type {?} */
        const key = keys[i];
        /** @type {?} */
        const index = propToIndex[key];
        propertyNames.push(key);
    }
    return _pureExpressionDef(64 /* TypePureObject */, checkIndex, propertyNames);
}
/**
 * @param {?} flags
 * @param {?} checkIndex
 * @param {?} propertyNames
 * @return {?}
 */
function _pureExpressionDef(flags, checkIndex, propertyNames) {
    /** @type {?} */
    const bindings = [];
    for (let i = 0; i < propertyNames.length; i++) {
        /** @type {?} */
        const prop = propertyNames[i];
        bindings.push({
            flags: 8 /* TypeProperty */,
            name: prop,
            ns: null,
            nonMinifiedName: prop,
            securityContext: null,
            suffix: null
        });
    }
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex,
        flags,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {},
        ngContentIndex: -1,
        childCount: 0, bindings,
        bindingFlags: calcBindingFlags(bindings),
        outputs: [],
        element: null,
        provider: null,
        text: null,
        query: null,
        ngContent: null
    };
}
/**
 * @param {?} view
 * @param {?} def
 * @return {?}
 */
function createPureExpression(view, def) {
    return { value: undefined };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdatePureExpressionInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    /** @type {?} */
    const bindings = def.bindings;
    /** @type {?} */
    let changed = false;
    /** @type {?} */
    const bindLen = bindings.length;
    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
        changed = true;
    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
        changed = true;
    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
        changed = true;
    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
        changed = true;
    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
        changed = true;
    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
        changed = true;
    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
        changed = true;
    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
        changed = true;
    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
        changed = true;
    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
        changed = true;
    if (changed) {
        /** @type {?} */
        const data = asPureExpressionData(view, def.nodeIndex);
        /** @type {?} */
        let value;
        switch (def.flags & 201347067 /* Types */) {
            case 32 /* TypePureArray */:
                value = [];
                if (bindLen > 0)
                    value.push(v0);
                if (bindLen > 1)
                    value.push(v1);
                if (bindLen > 2)
                    value.push(v2);
                if (bindLen > 3)
                    value.push(v3);
                if (bindLen > 4)
                    value.push(v4);
                if (bindLen > 5)
                    value.push(v5);
                if (bindLen > 6)
                    value.push(v6);
                if (bindLen > 7)
                    value.push(v7);
                if (bindLen > 8)
                    value.push(v8);
                if (bindLen > 9)
                    value.push(v9);
                break;
            case 64 /* TypePureObject */:
                value = {};
                if (bindLen > 0)
                    value[(/** @type {?} */ (bindings[0].name))] = v0;
                if (bindLen > 1)
                    value[(/** @type {?} */ (bindings[1].name))] = v1;
                if (bindLen > 2)
                    value[(/** @type {?} */ (bindings[2].name))] = v2;
                if (bindLen > 3)
                    value[(/** @type {?} */ (bindings[3].name))] = v3;
                if (bindLen > 4)
                    value[(/** @type {?} */ (bindings[4].name))] = v4;
                if (bindLen > 5)
                    value[(/** @type {?} */ (bindings[5].name))] = v5;
                if (bindLen > 6)
                    value[(/** @type {?} */ (bindings[6].name))] = v6;
                if (bindLen > 7)
                    value[(/** @type {?} */ (bindings[7].name))] = v7;
                if (bindLen > 8)
                    value[(/** @type {?} */ (bindings[8].name))] = v8;
                if (bindLen > 9)
                    value[(/** @type {?} */ (bindings[9].name))] = v9;
                break;
            case 128 /* TypePurePipe */:
                /** @type {?} */
                const pipe = v0;
                switch (bindLen) {
                    case 1:
                        value = pipe.transform(v0);
                        break;
                    case 2:
                        value = pipe.transform(v1);
                        break;
                    case 3:
                        value = pipe.transform(v1, v2);
                        break;
                    case 4:
                        value = pipe.transform(v1, v2, v3);
                        break;
                    case 5:
                        value = pipe.transform(v1, v2, v3, v4);
                        break;
                    case 6:
                        value = pipe.transform(v1, v2, v3, v4, v5);
                        break;
                    case 7:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6);
                        break;
                    case 8:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7);
                        break;
                    case 9:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8);
                        break;
                    case 10:
                        value = pipe.transform(v1, v2, v3, v4, v5, v6, v7, v8, v9);
                        break;
                }
                break;
        }
        data.value = value;
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdatePureExpressionDynamic(view, def, values) {
    /** @type {?} */
    const bindings = def.bindings;
    /** @type {?} */
    let changed = false;
    for (let i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
        }
    }
    if (changed) {
        /** @type {?} */
        const data = asPureExpressionData(view, def.nodeIndex);
        /** @type {?} */
        let value;
        switch (def.flags & 201347067 /* Types */) {
            case 32 /* TypePureArray */:
                value = values;
                break;
            case 64 /* TypePureObject */:
                value = {};
                for (let i = 0; i < values.length; i++) {
                    value[(/** @type {?} */ (bindings[i].name))] = values[i];
                }
                break;
            case 128 /* TypePurePipe */:
                /** @type {?} */
                const pipe = values[0];
                /** @type {?} */
                const params = values.slice(1);
                value = ((/** @type {?} */ (pipe.transform)))(...params);
                break;
        }
        data.value = value;
    }
    return changed;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/text.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} checkIndex
 * @param {?} ngContentIndex
 * @param {?} staticText
 * @return {?}
 */
function textDef(checkIndex, ngContentIndex, staticText) {
    /** @type {?} */
    const bindings = [];
    for (let i = 1; i < staticText.length; i++) {
        bindings[i - 1] = {
            flags: 8 /* TypeProperty */,
            name: null,
            ns: null,
            nonMinifiedName: null,
            securityContext: null,
            suffix: staticText[i],
        };
    }
    return {
        // will bet set by the view definition
        nodeIndex: -1,
        parent: null,
        renderParent: null,
        bindingIndex: -1,
        outputIndex: -1,
        // regular values
        checkIndex,
        flags: 2 /* TypeText */,
        childFlags: 0,
        directChildFlags: 0,
        childMatchedQueries: 0,
        matchedQueries: {},
        matchedQueryIds: 0,
        references: {}, ngContentIndex,
        childCount: 0, bindings,
        bindingFlags: 8 /* TypeProperty */,
        outputs: [],
        element: null,
        provider: null,
        text: { prefix: staticText[0] },
        query: null,
        ngContent: null,
    };
}
/**
 * @param {?} view
 * @param {?} renderHost
 * @param {?} def
 * @return {?}
 */
function createText(view, renderHost, def) {
    /** @type {?} */
    let renderNode;
    /** @type {?} */
    const renderer = view.renderer;
    renderNode = renderer.createText((/** @type {?} */ (def.text)).prefix);
    /** @type {?} */
    const parentEl = getParentRenderElement(view, renderHost, def);
    if (parentEl) {
        renderer.appendChild(parentEl, renderNode);
    }
    return { renderText: renderNode };
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkAndUpdateTextInline(view, def, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    /** @type {?} */
    let changed = false;
    /** @type {?} */
    const bindings = def.bindings;
    /** @type {?} */
    const bindLen = bindings.length;
    if (bindLen > 0 && checkAndUpdateBinding(view, def, 0, v0))
        changed = true;
    if (bindLen > 1 && checkAndUpdateBinding(view, def, 1, v1))
        changed = true;
    if (bindLen > 2 && checkAndUpdateBinding(view, def, 2, v2))
        changed = true;
    if (bindLen > 3 && checkAndUpdateBinding(view, def, 3, v3))
        changed = true;
    if (bindLen > 4 && checkAndUpdateBinding(view, def, 4, v4))
        changed = true;
    if (bindLen > 5 && checkAndUpdateBinding(view, def, 5, v5))
        changed = true;
    if (bindLen > 6 && checkAndUpdateBinding(view, def, 6, v6))
        changed = true;
    if (bindLen > 7 && checkAndUpdateBinding(view, def, 7, v7))
        changed = true;
    if (bindLen > 8 && checkAndUpdateBinding(view, def, 8, v8))
        changed = true;
    if (bindLen > 9 && checkAndUpdateBinding(view, def, 9, v9))
        changed = true;
    if (changed) {
        /** @type {?} */
        let value = (/** @type {?} */ (def.text)).prefix;
        if (bindLen > 0)
            value += _addInterpolationPart(v0, bindings[0]);
        if (bindLen > 1)
            value += _addInterpolationPart(v1, bindings[1]);
        if (bindLen > 2)
            value += _addInterpolationPart(v2, bindings[2]);
        if (bindLen > 3)
            value += _addInterpolationPart(v3, bindings[3]);
        if (bindLen > 4)
            value += _addInterpolationPart(v4, bindings[4]);
        if (bindLen > 5)
            value += _addInterpolationPart(v5, bindings[5]);
        if (bindLen > 6)
            value += _addInterpolationPart(v6, bindings[6]);
        if (bindLen > 7)
            value += _addInterpolationPart(v7, bindings[7]);
        if (bindLen > 8)
            value += _addInterpolationPart(v8, bindings[8]);
        if (bindLen > 9)
            value += _addInterpolationPart(v9, bindings[9]);
        /** @type {?} */
        const renderNode = asTextData(view, def.nodeIndex).renderText;
        view.renderer.setValue(renderNode, value);
    }
    return changed;
}
/**
 * @param {?} view
 * @param {?} def
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateTextDynamic(view, def, values) {
    /** @type {?} */
    const bindings = def.bindings;
    /** @type {?} */
    let changed = false;
    for (let i = 0; i < values.length; i++) {
        // Note: We need to loop over all values, so that
        // the old values are updates as well!
        if (checkAndUpdateBinding(view, def, i, values[i])) {
            changed = true;
        }
    }
    if (changed) {
        /** @type {?} */
        let value = '';
        for (let i = 0; i < values.length; i++) {
            value = value + _addInterpolationPart(values[i], bindings[i]);
        }
        value = (/** @type {?} */ (def.text)).prefix + value;
        /** @type {?} */
        const renderNode = asTextData(view, def.nodeIndex).renderText;
        view.renderer.setValue(renderNode, value);
    }
    return changed;
}
/**
 * @param {?} value
 * @param {?} binding
 * @return {?}
 */
function _addInterpolationPart(value, binding) {
    /** @type {?} */
    const valueStr = value != null ? value.toString() : '';
    return valueStr + binding.suffix;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/view.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} flags
 * @param {?} nodes
 * @param {?=} updateDirectives
 * @param {?=} updateRenderer
 * @return {?}
 */
function viewDef(flags, nodes, updateDirectives, updateRenderer) {
    // clone nodes and set auto calculated values
    /** @type {?} */
    let viewBindingCount = 0;
    /** @type {?} */
    let viewDisposableCount = 0;
    /** @type {?} */
    let viewNodeFlags = 0;
    /** @type {?} */
    let viewRootNodeFlags = 0;
    /** @type {?} */
    let viewMatchedQueries = 0;
    /** @type {?} */
    let currentParent = null;
    /** @type {?} */
    let currentRenderParent = null;
    /** @type {?} */
    let currentElementHasPublicProviders = false;
    /** @type {?} */
    let currentElementHasPrivateProviders = false;
    /** @type {?} */
    let lastRenderRootNode = null;
    for (let i = 0; i < nodes.length; i++) {
        /** @type {?} */
        const node = nodes[i];
        node.nodeIndex = i;
        node.parent = currentParent;
        node.bindingIndex = viewBindingCount;
        node.outputIndex = viewDisposableCount;
        node.renderParent = currentRenderParent;
        viewNodeFlags |= node.flags;
        viewMatchedQueries |= node.matchedQueryIds;
        if (node.element) {
            /** @type {?} */
            const elDef = node.element;
            elDef.publicProviders =
                currentParent ? (/** @type {?} */ (currentParent.element)).publicProviders : Object.create(null);
            elDef.allProviders = elDef.publicProviders;
            // Note: We assume that all providers of an element are before any child element!
            currentElementHasPublicProviders = false;
            currentElementHasPrivateProviders = false;
            if (node.element.template) {
                viewMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
        }
        validateNode(currentParent, node, nodes.length);
        viewBindingCount += node.bindings.length;
        viewDisposableCount += node.outputs.length;
        if (!currentRenderParent && (node.flags & 3 /* CatRenderNode */)) {
            lastRenderRootNode = node;
        }
        if (node.flags & 20224 /* CatProvider */) {
            if (!currentElementHasPublicProviders) {
                currentElementHasPublicProviders = true;
                // Use prototypical inheritance to not get O(n^2) complexity...
                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders =
                    Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);
                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders = (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders;
            }
            /** @type {?} */
            const isPrivateService = (node.flags & 8192 /* PrivateProvider */) !== 0;
            /** @type {?} */
            const isComponent = (node.flags & 32768 /* Component */) !== 0;
            if (!isPrivateService || isComponent) {
                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;
            }
            else {
                if (!currentElementHasPrivateProviders) {
                    currentElementHasPrivateProviders = true;
                    // Use prototypical inheritance to not get O(n^2) complexity...
                    (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders =
                        Object.create((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).publicProviders);
                }
                (/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).allProviders))[tokenKey((/** @type {?} */ (node.provider)).token)] = node;
            }
            if (isComponent) {
                (/** @type {?} */ ((/** @type {?} */ (currentParent)).element)).componentProvider = node;
            }
        }
        if (currentParent) {
            currentParent.childFlags |= node.flags;
            currentParent.directChildFlags |= node.flags;
            currentParent.childMatchedQueries |= node.matchedQueryIds;
            if (node.element && node.element.template) {
                currentParent.childMatchedQueries |= node.element.template.nodeMatchedQueries;
            }
        }
        else {
            viewRootNodeFlags |= node.flags;
        }
        if (node.childCount > 0) {
            currentParent = node;
            if (!isNgContainer(node)) {
                currentRenderParent = node;
            }
        }
        else {
            // When the current node has no children, check if it is the last children of its parent.
            // When it is, propagate the flags up.
            // The loop is required because an element could be the last transitive children of several
            // elements. We loop to either the root or the highest opened element (= with remaining
            // children)
            while (currentParent && i === currentParent.nodeIndex + currentParent.childCount) {
                /** @type {?} */
                const newParent = currentParent.parent;
                if (newParent) {
                    newParent.childFlags |= currentParent.childFlags;
                    newParent.childMatchedQueries |= currentParent.childMatchedQueries;
                }
                currentParent = newParent;
                // We also need to update the render parent & account for ng-container
                if (currentParent && isNgContainer(currentParent)) {
                    currentRenderParent = currentParent.renderParent;
                }
                else {
                    currentRenderParent = currentParent;
                }
            }
        }
    }
    /** @type {?} */
    const handleEvent = (/**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} eventName
     * @param {?} event
     * @return {?}
     */
    (view, nodeIndex, eventName, event) => (/** @type {?} */ ((/** @type {?} */ (nodes[nodeIndex].element)).handleEvent))(view, eventName, event));
    return {
        // Will be filled later...
        factory: null,
        nodeFlags: viewNodeFlags,
        rootNodeFlags: viewRootNodeFlags,
        nodeMatchedQueries: viewMatchedQueries, flags,
        nodes: nodes,
        updateDirectives: updateDirectives || NOOP,
        updateRenderer: updateRenderer || NOOP, handleEvent,
        bindingCount: viewBindingCount,
        outputCount: viewDisposableCount, lastRenderRootNode
    };
}
/**
 * @param {?} node
 * @return {?}
 */
function isNgContainer(node) {
    return (node.flags & 1 /* TypeElement */) !== 0 && (/** @type {?} */ (node.element)).name === null;
}
/**
 * @param {?} parent
 * @param {?} node
 * @param {?} nodeCount
 * @return {?}
 */
function validateNode(parent, node, nodeCount) {
    /** @type {?} */
    const template = node.element && node.element.template;
    if (template) {
        if (!template.lastRenderRootNode) {
            throw new Error(`Illegal State: Embedded templates without nodes are not allowed!`);
        }
        if (template.lastRenderRootNode &&
            template.lastRenderRootNode.flags & 16777216 /* EmbeddedViews */) {
            throw new Error(`Illegal State: Last root node of a template can't have embedded views, at index ${node.nodeIndex}!`);
        }
    }
    if (node.flags & 20224 /* CatProvider */) {
        /** @type {?} */
        const parentFlags = parent ? parent.flags : 0;
        if ((parentFlags & 1 /* TypeElement */) === 0) {
            throw new Error(`Illegal State: StaticProvider/Directive nodes need to be children of elements or anchors, at index ${node.nodeIndex}!`);
        }
    }
    if (node.query) {
        if (node.flags & 67108864 /* TypeContentQuery */ &&
            (!parent || (parent.flags & 16384 /* TypeDirective */) === 0)) {
            throw new Error(`Illegal State: Content Query nodes need to be children of directives, at index ${node.nodeIndex}!`);
        }
        if (node.flags & 134217728 /* TypeViewQuery */ && parent) {
            throw new Error(`Illegal State: View Query nodes have to be top level nodes, at index ${node.nodeIndex}!`);
        }
    }
    if (node.childCount) {
        /** @type {?} */
        const parentEnd = parent ? parent.nodeIndex + parent.childCount : nodeCount - 1;
        if (node.nodeIndex <= parentEnd && node.nodeIndex + node.childCount > parentEnd) {
            throw new Error(`Illegal State: childCount of node leads outside of parent, at index ${node.nodeIndex}!`);
        }
    }
}
/**
 * @param {?} parent
 * @param {?} anchorDef
 * @param {?} viewDef
 * @param {?=} context
 * @return {?}
 */
function createEmbeddedView(parent, anchorDef, viewDef, context) {
    // embedded views are seen as siblings to the anchor, so we need
    // to get the parent of the anchor and use it as parentIndex.
    /** @type {?} */
    const view = createView(parent.root, parent.renderer, parent, anchorDef, viewDef);
    initView(view, parent.component, context);
    createViewNodes(view);
    return view;
}
/**
 * @param {?} root
 * @param {?} def
 * @param {?=} context
 * @return {?}
 */
function createRootView(root, def, context) {
    /** @type {?} */
    const view = createView(root, root.renderer, null, null, def);
    initView(view, context, context);
    createViewNodes(view);
    return view;
}
/**
 * @param {?} parentView
 * @param {?} nodeDef
 * @param {?} viewDef
 * @param {?} hostElement
 * @return {?}
 */
function createComponentView(parentView, nodeDef, viewDef, hostElement) {
    /** @type {?} */
    const rendererType = (/** @type {?} */ (nodeDef.element)).componentRendererType;
    /** @type {?} */
    let compRenderer;
    if (!rendererType) {
        compRenderer = parentView.root.renderer;
    }
    else {
        compRenderer = parentView.root.rendererFactory.createRenderer(hostElement, rendererType);
    }
    return createView(parentView.root, compRenderer, parentView, (/** @type {?} */ (nodeDef.element)).componentProvider, viewDef);
}
/**
 * @param {?} root
 * @param {?} renderer
 * @param {?} parent
 * @param {?} parentNodeDef
 * @param {?} def
 * @return {?}
 */
function createView(root, renderer, parent, parentNodeDef, def) {
    /** @type {?} */
    const nodes = new Array(def.nodes.length);
    /** @type {?} */
    const disposables = def.outputCount ? new Array(def.outputCount) : null;
    /** @type {?} */
    const view = {
        def,
        parent,
        viewContainerParent: null, parentNodeDef,
        context: null,
        component: null, nodes,
        state: 13 /* CatInit */, root, renderer,
        oldValues: new Array(def.bindingCount), disposables,
        initIndex: -1
    };
    return view;
}
/**
 * @param {?} view
 * @param {?} component
 * @param {?} context
 * @return {?}
 */
function initView(view, component, context) {
    view.component = component;
    view.context = context;
}
/**
 * @param {?} view
 * @return {?}
 */
function createViewNodes(view) {
    /** @type {?} */
    let renderHost;
    if (isComponentView(view)) {
        /** @type {?} */
        const hostDef = view.parentNodeDef;
        renderHost = asElementData((/** @type {?} */ (view.parent)), (/** @type {?} */ ((/** @type {?} */ (hostDef)).parent)).nodeIndex).renderElement;
    }
    /** @type {?} */
    const def = view.def;
    /** @type {?} */
    const nodes = view.nodes;
    for (let i = 0; i < def.nodes.length; i++) {
        /** @type {?} */
        const nodeDef = def.nodes[i];
        Services.setCurrentNode(view, i);
        /** @type {?} */
        let nodeData;
        switch (nodeDef.flags & 201347067 /* Types */) {
            case 1 /* TypeElement */:
                /** @type {?} */
                const el = (/** @type {?} */ (createElement(view, renderHost, nodeDef)));
                /** @type {?} */
                let componentView = (/** @type {?} */ (undefined));
                if (nodeDef.flags & 33554432 /* ComponentView */) {
                    /** @type {?} */
                    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentView)));
                    componentView = Services.createComponentView(view, nodeDef, compViewDef, el);
                }
                listenToElementOutputs(view, componentView, nodeDef, el);
                nodeData = (/** @type {?} */ ({
                    renderElement: el,
                    componentView,
                    viewContainer: null,
                    template: (/** @type {?} */ (nodeDef.element)).template ? createTemplateData(view, nodeDef) : undefined
                }));
                if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
                    nodeData.viewContainer = createViewContainerData(view, nodeDef, nodeData);
                }
                break;
            case 2 /* TypeText */:
                nodeData = (/** @type {?} */ (createText(view, renderHost, nodeDef)));
                break;
            case 512 /* TypeClassProvider */:
            case 1024 /* TypeFactoryProvider */:
            case 2048 /* TypeUseExistingProvider */:
            case 256 /* TypeValueProvider */: {
                nodeData = nodes[i];
                if (!nodeData && !(nodeDef.flags & 4096 /* LazyProvider */)) {
                    /** @type {?} */
                    const instance = createProviderInstance(view, nodeDef);
                    nodeData = (/** @type {?} */ ({ instance }));
                }
                break;
            }
            case 16 /* TypePipe */: {
                /** @type {?} */
                const instance = createPipeInstance(view, nodeDef);
                nodeData = (/** @type {?} */ ({ instance }));
                break;
            }
            case 16384 /* TypeDirective */: {
                nodeData = nodes[i];
                if (!nodeData) {
                    /** @type {?} */
                    const instance = createDirectiveInstance(view, nodeDef);
                    nodeData = (/** @type {?} */ ({ instance }));
                }
                if (nodeDef.flags & 32768 /* Component */) {
                    /** @type {?} */
                    const compView = asElementData(view, (/** @type {?} */ (nodeDef.parent)).nodeIndex).componentView;
                    initView(compView, nodeData.instance, nodeData.instance);
                }
                break;
            }
            case 32 /* TypePureArray */:
            case 64 /* TypePureObject */:
            case 128 /* TypePurePipe */:
                nodeData = (/** @type {?} */ (createPureExpression(view, nodeDef)));
                break;
            case 67108864 /* TypeContentQuery */:
            case 134217728 /* TypeViewQuery */:
                nodeData = (/** @type {?} */ (createQuery()));
                break;
            case 8 /* TypeNgContent */:
                appendNgContent(view, renderHost, nodeDef);
                // no runtime data needed for NgContent...
                nodeData = undefined;
                break;
        }
        nodes[i] = nodeData;
    }
    // Create the ViewData.nodes of component views after we created everything else,
    // so that e.g. ng-content works
    execComponentViewsAction(view, ViewAction.CreateViewNodes);
    // fill static content and view queries
    execQueriesAction(view, 67108864 /* TypeContentQuery */ | 134217728 /* TypeViewQuery */, 268435456 /* StaticQuery */, 0 /* CheckAndUpdate */);
}
/**
 * @param {?} view
 * @return {?}
 */
function checkNoChangesView(view) {
    markProjectedViewsForCheck(view);
    Services.updateDirectives(view, 1 /* CheckNoChanges */);
    execEmbeddedViewsAction(view, ViewAction.CheckNoChanges);
    Services.updateRenderer(view, 1 /* CheckNoChanges */);
    execComponentViewsAction(view, ViewAction.CheckNoChanges);
    // Note: We don't check queries for changes as we didn't do this in v2.x.
    // TODO(tbosch): investigate if we can enable the check again in v5.x with a nicer error message.
    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
}
/**
 * @param {?} view
 * @return {?}
 */
function checkAndUpdateView(view) {
    if (view.state & 1 /* BeforeFirstCheck */) {
        view.state &= ~1 /* BeforeFirstCheck */;
        view.state |= 2 /* FirstCheck */;
    }
    else {
        view.state &= ~2 /* FirstCheck */;
    }
    shiftInitState(view, 0 /* InitState_BeforeInit */, 256 /* InitState_CallingOnInit */);
    markProjectedViewsForCheck(view);
    Services.updateDirectives(view, 0 /* CheckAndUpdate */);
    execEmbeddedViewsAction(view, ViewAction.CheckAndUpdate);
    execQueriesAction(view, 67108864 /* TypeContentQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
    /** @type {?} */
    let callInit = shiftInitState(view, 256 /* InitState_CallingOnInit */, 512 /* InitState_CallingAfterContentInit */);
    callLifecycleHooksChildrenFirst(view, 2097152 /* AfterContentChecked */ | (callInit ? 1048576 /* AfterContentInit */ : 0));
    Services.updateRenderer(view, 0 /* CheckAndUpdate */);
    execComponentViewsAction(view, ViewAction.CheckAndUpdate);
    execQueriesAction(view, 134217728 /* TypeViewQuery */, 536870912 /* DynamicQuery */, 0 /* CheckAndUpdate */);
    callInit = shiftInitState(view, 512 /* InitState_CallingAfterContentInit */, 768 /* InitState_CallingAfterViewInit */);
    callLifecycleHooksChildrenFirst(view, 8388608 /* AfterViewChecked */ | (callInit ? 4194304 /* AfterViewInit */ : 0));
    if (view.def.flags & 2 /* OnPush */) {
        view.state &= ~8 /* ChecksEnabled */;
    }
    view.state &= ~(64 /* CheckProjectedViews */ | 32 /* CheckProjectedView */);
    shiftInitState(view, 768 /* InitState_CallingAfterViewInit */, 1024 /* InitState_AfterInit */);
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    if (argStyle === 0 /* Inline */) {
        return checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    }
    else {
        return checkAndUpdateNodeDynamic(view, nodeDef, v0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function markProjectedViewsForCheck(view) {
    /** @type {?} */
    const def = view.def;
    if (!(def.nodeFlags & 4 /* ProjectedTemplate */)) {
        return;
    }
    for (let i = 0; i < def.nodes.length; i++) {
        /** @type {?} */
        const nodeDef = def.nodes[i];
        if (nodeDef.flags & 4 /* ProjectedTemplate */) {
            /** @type {?} */
            const projectedViews = asElementData(view, i).template._projectedViews;
            if (projectedViews) {
                for (let i = 0; i < projectedViews.length; i++) {
                    /** @type {?} */
                    const projectedView = projectedViews[i];
                    projectedView.state |= 32 /* CheckProjectedView */;
                    markParentViewsForCheckProjectedViews(projectedView, view);
                }
            }
        }
        else if ((nodeDef.childFlags & 4 /* ProjectedTemplate */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkAndUpdateNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    switch (nodeDef.flags & 201347067 /* Types */) {
        case 1 /* TypeElement */:
            return checkAndUpdateElementInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        case 2 /* TypeText */:
            return checkAndUpdateTextInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        case 16384 /* TypeDirective */:
            return checkAndUpdateDirectiveInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        case 32 /* TypePureArray */:
        case 64 /* TypePureObject */:
        case 128 /* TypePurePipe */:
            return checkAndUpdatePureExpressionInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
        default:
            throw 'unreachable';
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */
function checkAndUpdateNodeDynamic(view, nodeDef, values) {
    switch (nodeDef.flags & 201347067 /* Types */) {
        case 1 /* TypeElement */:
            return checkAndUpdateElementDynamic(view, nodeDef, values);
        case 2 /* TypeText */:
            return checkAndUpdateTextDynamic(view, nodeDef, values);
        case 16384 /* TypeDirective */:
            return checkAndUpdateDirectiveDynamic(view, nodeDef, values);
        case 32 /* TypePureArray */:
        case 64 /* TypePureObject */:
        case 128 /* TypePurePipe */:
            return checkAndUpdatePureExpressionDynamic(view, nodeDef, values);
        default:
            throw 'unreachable';
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    if (argStyle === 0 /* Inline */) {
        checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    }
    else {
        checkNoChangesNodeDynamic(view, nodeDef, v0);
    }
    // Returning false is ok here as we would have thrown in case of a change.
    return false;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} v0
 * @param {?} v1
 * @param {?} v2
 * @param {?} v3
 * @param {?} v4
 * @param {?} v5
 * @param {?} v6
 * @param {?} v7
 * @param {?} v8
 * @param {?} v9
 * @return {?}
 */
function checkNoChangesNodeInline(view, nodeDef, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    /** @type {?} */
    const bindLen = nodeDef.bindings.length;
    if (bindLen > 0)
        checkBindingNoChanges(view, nodeDef, 0, v0);
    if (bindLen > 1)
        checkBindingNoChanges(view, nodeDef, 1, v1);
    if (bindLen > 2)
        checkBindingNoChanges(view, nodeDef, 2, v2);
    if (bindLen > 3)
        checkBindingNoChanges(view, nodeDef, 3, v3);
    if (bindLen > 4)
        checkBindingNoChanges(view, nodeDef, 4, v4);
    if (bindLen > 5)
        checkBindingNoChanges(view, nodeDef, 5, v5);
    if (bindLen > 6)
        checkBindingNoChanges(view, nodeDef, 6, v6);
    if (bindLen > 7)
        checkBindingNoChanges(view, nodeDef, 7, v7);
    if (bindLen > 8)
        checkBindingNoChanges(view, nodeDef, 8, v8);
    if (bindLen > 9)
        checkBindingNoChanges(view, nodeDef, 9, v9);
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} values
 * @return {?}
 */
function checkNoChangesNodeDynamic(view, nodeDef, values) {
    for (let i = 0; i < values.length; i++) {
        checkBindingNoChanges(view, nodeDef, i, values[i]);
    }
}
/**
 * Workaround https://github.com/angular/tsickle/issues/497
 * @suppress {misplacedTypeAnnotation}
 * @param {?} view
 * @param {?} nodeDef
 * @return {?}
 */
function checkNoChangesQuery(view, nodeDef) {
    /** @type {?} */
    const queryList = asQueryList(view, nodeDef.nodeIndex);
    if (queryList.dirty) {
        throw expressionChangedAfterItHasBeenCheckedError(Services.createDebugContext(view, nodeDef.nodeIndex), `Query ${(/** @type {?} */ (nodeDef.query)).id} not dirty`, `Query ${(/** @type {?} */ (nodeDef.query)).id} dirty`, (view.state & 1 /* BeforeFirstCheck */) !== 0);
    }
}
/**
 * @param {?} view
 * @return {?}
 */
function destroyView(view) {
    if (view.state & 128 /* Destroyed */) {
        return;
    }
    execEmbeddedViewsAction(view, ViewAction.Destroy);
    execComponentViewsAction(view, ViewAction.Destroy);
    callLifecycleHooksChildrenFirst(view, 131072 /* OnDestroy */);
    if (view.disposables) {
        for (let i = 0; i < view.disposables.length; i++) {
            view.disposables[i]();
        }
    }
    detachProjectedView(view);
    if (view.renderer.destroyNode) {
        destroyViewNodes(view);
    }
    if (isComponentView(view)) {
        view.renderer.destroy();
    }
    view.state |= 128 /* Destroyed */;
}
/**
 * @param {?} view
 * @return {?}
 */
function destroyViewNodes(view) {
    /** @type {?} */
    const len = view.def.nodes.length;
    for (let i = 0; i < len; i++) {
        /** @type {?} */
        const def = view.def.nodes[i];
        if (def.flags & 1 /* TypeElement */) {
            (/** @type {?} */ (view.renderer.destroyNode))(asElementData(view, i).renderElement);
        }
        else if (def.flags & 2 /* TypeText */) {
            (/** @type {?} */ (view.renderer.destroyNode))(asTextData(view, i).renderText);
        }
        else if (def.flags & 67108864 /* TypeContentQuery */ || def.flags & 134217728 /* TypeViewQuery */) {
            asQueryList(view, i).destroy();
        }
    }
}
/** @enum {number} */
const ViewAction = {
    CreateViewNodes: 0,
    CheckNoChanges: 1,
    CheckNoChangesProjectedViews: 2,
    CheckAndUpdate: 3,
    CheckAndUpdateProjectedViews: 4,
    Destroy: 5,
};
ViewAction[ViewAction.CreateViewNodes] = 'CreateViewNodes';
ViewAction[ViewAction.CheckNoChanges] = 'CheckNoChanges';
ViewAction[ViewAction.CheckNoChangesProjectedViews] = 'CheckNoChangesProjectedViews';
ViewAction[ViewAction.CheckAndUpdate] = 'CheckAndUpdate';
ViewAction[ViewAction.CheckAndUpdateProjectedViews] = 'CheckAndUpdateProjectedViews';
ViewAction[ViewAction.Destroy] = 'Destroy';
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execComponentViewsAction(view, action) {
    /** @type {?} */
    const def = view.def;
    if (!(def.nodeFlags & 33554432 /* ComponentView */)) {
        return;
    }
    for (let i = 0; i < def.nodes.length; i++) {
        /** @type {?} */
        const nodeDef = def.nodes[i];
        if (nodeDef.flags & 33554432 /* ComponentView */) {
            // a leaf
            callViewAction(asElementData(view, i).componentView, action);
        }
        else if ((nodeDef.childFlags & 33554432 /* ComponentView */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execEmbeddedViewsAction(view, action) {
    /** @type {?} */
    const def = view.def;
    if (!(def.nodeFlags & 16777216 /* EmbeddedViews */)) {
        return;
    }
    for (let i = 0; i < def.nodes.length; i++) {
        /** @type {?} */
        const nodeDef = def.nodes[i];
        if (nodeDef.flags & 16777216 /* EmbeddedViews */) {
            // a leaf
            /** @type {?} */
            const embeddedViews = (/** @type {?} */ (asElementData(view, i).viewContainer))._embeddedViews;
            for (let k = 0; k < embeddedViews.length; k++) {
                callViewAction(embeddedViews[k], action);
            }
        }
        else if ((nodeDef.childFlags & 16777216 /* EmbeddedViews */) === 0) {
            // a parent with leafs
            // no child is a component,
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function callViewAction(view, action) {
    /** @type {?} */
    const viewState = view.state;
    switch (action) {
        case ViewAction.CheckNoChanges:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
                    checkNoChangesView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, ViewAction.CheckNoChangesProjectedViews);
                }
            }
            break;
        case ViewAction.CheckNoChangesProjectedViews:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if (viewState & 32 /* CheckProjectedView */) {
                    checkNoChangesView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, action);
                }
            }
            break;
        case ViewAction.CheckAndUpdate:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if ((viewState & 12 /* CatDetectChanges */) === 12 /* CatDetectChanges */) {
                    checkAndUpdateView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, ViewAction.CheckAndUpdateProjectedViews);
                }
            }
            break;
        case ViewAction.CheckAndUpdateProjectedViews:
            if ((viewState & 128 /* Destroyed */) === 0) {
                if (viewState & 32 /* CheckProjectedView */) {
                    checkAndUpdateView(view);
                }
                else if (viewState & 64 /* CheckProjectedViews */) {
                    execProjectedViewsAction(view, action);
                }
            }
            break;
        case ViewAction.Destroy:
            // Note: destroyView recurses over all views,
            // so we don't need to special case projected views here.
            destroyView(view);
            break;
        case ViewAction.CreateViewNodes:
            createViewNodes(view);
            break;
    }
}
/**
 * @param {?} view
 * @param {?} action
 * @return {?}
 */
function execProjectedViewsAction(view, action) {
    execEmbeddedViewsAction(view, action);
    execComponentViewsAction(view, action);
}
/**
 * @param {?} view
 * @param {?} queryFlags
 * @param {?} staticDynamicQueryFlag
 * @param {?} checkType
 * @return {?}
 */
function execQueriesAction(view, queryFlags, staticDynamicQueryFlag, checkType) {
    if (!(view.def.nodeFlags & queryFlags) || !(view.def.nodeFlags & staticDynamicQueryFlag)) {
        return;
    }
    /** @type {?} */
    const nodeCount = view.def.nodes.length;
    for (let i = 0; i < nodeCount; i++) {
        /** @type {?} */
        const nodeDef = view.def.nodes[i];
        if ((nodeDef.flags & queryFlags) && (nodeDef.flags & staticDynamicQueryFlag)) {
            Services.setCurrentNode(view, nodeDef.nodeIndex);
            switch (checkType) {
                case 0 /* CheckAndUpdate */:
                    checkAndUpdateQuery(view, nodeDef);
                    break;
                case 1 /* CheckNoChanges */:
                    checkNoChangesQuery(view, nodeDef);
                    break;
            }
        }
        if (!(nodeDef.childFlags & queryFlags) || !(nodeDef.childFlags & staticDynamicQueryFlag)) {
            // no child has a matching query
            // then skip the children
            i += nodeDef.childCount;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/services.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
let initialized = false;
/**
 * @return {?}
 */
function initServicesIfNeeded() {
    if (initialized) {
        return;
    }
    initialized = true;
    /** @type {?} */
    const services = isDevMode() ? createDebugServices() : createProdServices();
    Services.setCurrentNode = services.setCurrentNode;
    Services.createRootView = services.createRootView;
    Services.createEmbeddedView = services.createEmbeddedView;
    Services.createComponentView = services.createComponentView;
    Services.createNgModuleRef = services.createNgModuleRef;
    Services.overrideProvider = services.overrideProvider;
    Services.overrideComponentView = services.overrideComponentView;
    Services.clearOverrides = services.clearOverrides;
    Services.checkAndUpdateView = services.checkAndUpdateView;
    Services.checkNoChangesView = services.checkNoChangesView;
    Services.destroyView = services.destroyView;
    Services.resolveDep = resolveDep;
    Services.createDebugContext = services.createDebugContext;
    Services.handleEvent = services.handleEvent;
    Services.updateDirectives = services.updateDirectives;
    Services.updateRenderer = services.updateRenderer;
    Services.dirtyParentQueries = dirtyParentQueries;
}
/**
 * @return {?}
 */
function createProdServices() {
    return {
        setCurrentNode: (/**
         * @return {?}
         */
        () => { }),
        createRootView: createProdRootView,
        createEmbeddedView: createEmbeddedView,
        createComponentView: createComponentView,
        createNgModuleRef: createNgModuleRef,
        overrideProvider: NOOP,
        overrideComponentView: NOOP,
        clearOverrides: NOOP,
        checkAndUpdateView: checkAndUpdateView,
        checkNoChangesView: checkNoChangesView,
        destroyView: destroyView,
        createDebugContext: (/**
         * @param {?} view
         * @param {?} nodeIndex
         * @return {?}
         */
        (view, nodeIndex) => new DebugContext_(view, nodeIndex)),
        handleEvent: (/**
         * @param {?} view
         * @param {?} nodeIndex
         * @param {?} eventName
         * @param {?} event
         * @return {?}
         */
        (view, nodeIndex, eventName, event) => view.def.handleEvent(view, nodeIndex, eventName, event)),
        updateDirectives: (/**
         * @param {?} view
         * @param {?} checkType
         * @return {?}
         */
        (view, checkType) => view.def.updateDirectives(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
            prodCheckNoChangesNode, view)),
        updateRenderer: (/**
         * @param {?} view
         * @param {?} checkType
         * @return {?}
         */
        (view, checkType) => view.def.updateRenderer(checkType === 0 /* CheckAndUpdate */ ? prodCheckAndUpdateNode :
            prodCheckNoChangesNode, view)),
    };
}
/**
 * @return {?}
 */
function createDebugServices() {
    return {
        setCurrentNode: debugSetCurrentNode,
        createRootView: debugCreateRootView,
        createEmbeddedView: debugCreateEmbeddedView,
        createComponentView: debugCreateComponentView,
        createNgModuleRef: debugCreateNgModuleRef,
        overrideProvider: debugOverrideProvider,
        overrideComponentView: debugOverrideComponentView,
        clearOverrides: debugClearOverrides,
        checkAndUpdateView: debugCheckAndUpdateView,
        checkNoChangesView: debugCheckNoChangesView,
        destroyView: debugDestroyView,
        createDebugContext: (/**
         * @param {?} view
         * @param {?} nodeIndex
         * @return {?}
         */
        (view, nodeIndex) => new DebugContext_(view, nodeIndex)),
        handleEvent: debugHandleEvent,
        updateDirectives: debugUpdateDirectives,
        updateRenderer: debugUpdateRenderer,
    };
}
/**
 * @param {?} elInjector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?} ngModule
 * @param {?=} context
 * @return {?}
 */
function createProdRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
    /** @type {?} */
    const rendererFactory = ngModule.injector.get(RendererFactory2);
    return createRootView(createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode), def, context);
}
/**
 * @param {?} elInjector
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @param {?} def
 * @param {?} ngModule
 * @param {?=} context
 * @return {?}
 */
function debugCreateRootView(elInjector, projectableNodes, rootSelectorOrNode, def, ngModule, context) {
    /** @type {?} */
    const rendererFactory = ngModule.injector.get(RendererFactory2);
    /** @type {?} */
    const root = createRootData(elInjector, ngModule, new DebugRendererFactory2(rendererFactory), projectableNodes, rootSelectorOrNode);
    /** @type {?} */
    const defWithOverride = applyProviderOverridesToView(def);
    return callWithDebugContext(DebugAction.create, createRootView, null, [root, defWithOverride, context]);
}
/**
 * @param {?} elInjector
 * @param {?} ngModule
 * @param {?} rendererFactory
 * @param {?} projectableNodes
 * @param {?} rootSelectorOrNode
 * @return {?}
 */
function createRootData(elInjector, ngModule, rendererFactory, projectableNodes, rootSelectorOrNode) {
    /** @type {?} */
    const sanitizer = ngModule.injector.get(Sanitizer);
    /** @type {?} */
    const errorHandler = ngModule.injector.get(ErrorHandler);
    /** @type {?} */
    const renderer = rendererFactory.createRenderer(null, null);
    return {
        ngModule,
        injector: elInjector, projectableNodes,
        selectorOrNode: rootSelectorOrNode, sanitizer, rendererFactory, renderer, errorHandler
    };
}
/**
 * @param {?} parentView
 * @param {?} anchorDef
 * @param {?} viewDef
 * @param {?=} context
 * @return {?}
 */
function debugCreateEmbeddedView(parentView, anchorDef, viewDef, context) {
    /** @type {?} */
    const defWithOverride = applyProviderOverridesToView(viewDef);
    return callWithDebugContext(DebugAction.create, createEmbeddedView, null, [parentView, anchorDef, defWithOverride, context]);
}
/**
 * @param {?} parentView
 * @param {?} nodeDef
 * @param {?} viewDef
 * @param {?} hostElement
 * @return {?}
 */
function debugCreateComponentView(parentView, nodeDef, viewDef, hostElement) {
    /** @type {?} */
    const overrideComponentView = viewDefOverrides.get((/** @type {?} */ ((/** @type {?} */ ((/** @type {?} */ (nodeDef.element)).componentProvider)).provider)).token);
    if (overrideComponentView) {
        viewDef = overrideComponentView;
    }
    else {
        viewDef = applyProviderOverridesToView(viewDef);
    }
    return callWithDebugContext(DebugAction.create, createComponentView, null, [parentView, nodeDef, viewDef, hostElement]);
}
/**
 * @param {?} moduleType
 * @param {?} parentInjector
 * @param {?} bootstrapComponents
 * @param {?} def
 * @return {?}
 */
function debugCreateNgModuleRef(moduleType, parentInjector, bootstrapComponents, def) {
    /** @type {?} */
    const defWithOverride = applyProviderOverridesToNgModule(def);
    return createNgModuleRef(moduleType, parentInjector, bootstrapComponents, defWithOverride);
}
/** @type {?} */
const providerOverrides = new Map();
/** @type {?} */
const providerOverridesWithScope = new Map();
/** @type {?} */
const viewDefOverrides = new Map();
/**
 * @param {?} override
 * @return {?}
 */
function debugOverrideProvider(override) {
    providerOverrides.set(override.token, override);
    /** @type {?} */
    let injectableDef;
    if (typeof override.token === 'function' && (injectableDef = getInjectableDef(override.token)) &&
        typeof injectableDef.providedIn === 'function') {
        providerOverridesWithScope.set((/** @type {?} */ (override.token)), override);
    }
}
/**
 * @param {?} comp
 * @param {?} compFactory
 * @return {?}
 */
function debugOverrideComponentView(comp, compFactory) {
    /** @type {?} */
    const hostViewDef = resolveDefinition(getComponentViewDefinitionFactory(compFactory));
    /** @type {?} */
    const compViewDef = resolveDefinition((/** @type {?} */ ((/** @type {?} */ (hostViewDef.nodes[0].element)).componentView)));
    viewDefOverrides.set(comp, compViewDef);
}
/**
 * @return {?}
 */
function debugClearOverrides() {
    providerOverrides.clear();
    providerOverridesWithScope.clear();
    viewDefOverrides.clear();
}
// Notes about the algorithm:
// 1) Locate the providers of an element and check if one of them was overwritten
// 2) Change the providers of that element
//
// We only create new datastructures if we need to, to keep perf impact
// reasonable.
/**
 * @param {?} def
 * @return {?}
 */
function applyProviderOverridesToView(def) {
    if (providerOverrides.size === 0) {
        return def;
    }
    /** @type {?} */
    const elementIndicesWithOverwrittenProviders = findElementIndicesWithOverwrittenProviders(def);
    if (elementIndicesWithOverwrittenProviders.length === 0) {
        return def;
    }
    // clone the whole view definition,
    // as it maintains references between the nodes that are hard to update.
    def = (/** @type {?} */ (def.factory))((/**
     * @return {?}
     */
    () => NOOP));
    for (let i = 0; i < elementIndicesWithOverwrittenProviders.length; i++) {
        applyProviderOverridesToElement(def, elementIndicesWithOverwrittenProviders[i]);
    }
    return def;
    /**
     * @param {?} def
     * @return {?}
     */
    function findElementIndicesWithOverwrittenProviders(def) {
        /** @type {?} */
        const elIndicesWithOverwrittenProviders = [];
        /** @type {?} */
        let lastElementDef = null;
        for (let i = 0; i < def.nodes.length; i++) {
            /** @type {?} */
            const nodeDef = def.nodes[i];
            if (nodeDef.flags & 1 /* TypeElement */) {
                lastElementDef = nodeDef;
            }
            if (lastElementDef && nodeDef.flags & 3840 /* CatProviderNoDirective */ &&
                providerOverrides.has((/** @type {?} */ (nodeDef.provider)).token)) {
                elIndicesWithOverwrittenProviders.push((/** @type {?} */ (lastElementDef)).nodeIndex);
                lastElementDef = null;
            }
        }
        return elIndicesWithOverwrittenProviders;
    }
    /**
     * @param {?} viewDef
     * @param {?} elIndex
     * @return {?}
     */
    function applyProviderOverridesToElement(viewDef, elIndex) {
        for (let i = elIndex + 1; i < viewDef.nodes.length; i++) {
            /** @type {?} */
            const nodeDef = viewDef.nodes[i];
            if (nodeDef.flags & 1 /* TypeElement */) {
                // stop at the next element
                return;
            }
            if (nodeDef.flags & 3840 /* CatProviderNoDirective */) {
                /** @type {?} */
                const provider = (/** @type {?} */ (nodeDef.provider));
                /** @type {?} */
                const override = providerOverrides.get(provider.token);
                if (override) {
                    nodeDef.flags = (nodeDef.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
                    provider.deps = splitDepsDsl(override.deps);
                    provider.value = override.value;
                }
            }
        }
    }
}
// Notes about the algorithm:
// We only create new datastructures if we need to, to keep perf impact
// reasonable.
/**
 * @param {?} def
 * @return {?}
 */
function applyProviderOverridesToNgModule(def) {
    const { hasOverrides, hasDeprecatedOverrides } = calcHasOverrides(def);
    if (!hasOverrides) {
        return def;
    }
    // clone the whole view definition,
    // as it maintains references between the nodes that are hard to update.
    def = (/** @type {?} */ (def.factory))((/**
     * @return {?}
     */
    () => NOOP));
    applyProviderOverrides(def);
    return def;
    /**
     * @param {?} def
     * @return {?}
     */
    function calcHasOverrides(def) {
        /** @type {?} */
        let hasOverrides = false;
        /** @type {?} */
        let hasDeprecatedOverrides = false;
        if (providerOverrides.size === 0) {
            return { hasOverrides, hasDeprecatedOverrides };
        }
        def.providers.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            /** @type {?} */
            const override = providerOverrides.get(node.token);
            if ((node.flags & 3840 /* CatProviderNoDirective */) && override) {
                hasOverrides = true;
                hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
            }
        }));
        def.modules.forEach((/**
         * @param {?} module
         * @return {?}
         */
        module => {
            providerOverridesWithScope.forEach((/**
             * @param {?} override
             * @param {?} token
             * @return {?}
             */
            (override, token) => {
                if ((/** @type {?} */ (getInjectableDef(token))).providedIn === module) {
                    hasOverrides = true;
                    hasDeprecatedOverrides = hasDeprecatedOverrides || override.deprecatedBehavior;
                }
            }));
        }));
        return { hasOverrides, hasDeprecatedOverrides };
    }
    /**
     * @param {?} def
     * @return {?}
     */
    function applyProviderOverrides(def) {
        for (let i = 0; i < def.providers.length; i++) {
            /** @type {?} */
            const provider = def.providers[i];
            if (hasDeprecatedOverrides) {
                // We had a bug where me made
                // all providers lazy. Keep this logic behind a flag
                // for migrating existing users.
                provider.flags |= 4096 /* LazyProvider */;
            }
            /** @type {?} */
            const override = providerOverrides.get(provider.token);
            if (override) {
                provider.flags = (provider.flags & ~3840 /* CatProviderNoDirective */) | override.flags;
                provider.deps = splitDepsDsl(override.deps);
                provider.value = override.value;
            }
        }
        if (providerOverridesWithScope.size > 0) {
            /** @type {?} */
            let moduleSet = new Set(def.modules);
            providerOverridesWithScope.forEach((/**
             * @param {?} override
             * @param {?} token
             * @return {?}
             */
            (override, token) => {
                if (moduleSet.has((/** @type {?} */ (getInjectableDef(token))).providedIn)) {
                    /** @type {?} */
                    let provider = {
                        token: token,
                        flags: override.flags | (hasDeprecatedOverrides ? 4096 /* LazyProvider */ : 0 /* None */),
                        deps: splitDepsDsl(override.deps),
                        value: override.value,
                        index: def.providers.length,
                    };
                    def.providers.push(provider);
                    def.providersByKey[tokenKey(token)] = provider;
                }
            }));
        }
    }
}
/**
 * @param {?} view
 * @param {?} checkIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function prodCheckAndUpdateNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    /** @type {?} */
    const nodeDef = view.def.nodes[checkIndex];
    checkAndUpdateNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    return (nodeDef.flags & 224 /* CatPureExpression */) ?
        asPureExpressionData(view, checkIndex).value :
        undefined;
}
/**
 * @param {?} view
 * @param {?} checkIndex
 * @param {?} argStyle
 * @param {?=} v0
 * @param {?=} v1
 * @param {?=} v2
 * @param {?=} v3
 * @param {?=} v4
 * @param {?=} v5
 * @param {?=} v6
 * @param {?=} v7
 * @param {?=} v8
 * @param {?=} v9
 * @return {?}
 */
function prodCheckNoChangesNode(view, checkIndex, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9) {
    /** @type {?} */
    const nodeDef = view.def.nodes[checkIndex];
    checkNoChangesNode(view, nodeDef, argStyle, v0, v1, v2, v3, v4, v5, v6, v7, v8, v9);
    return (nodeDef.flags & 224 /* CatPureExpression */) ?
        asPureExpressionData(view, checkIndex).value :
        undefined;
}
/**
 * @param {?} view
 * @return {?}
 */
function debugCheckAndUpdateView(view) {
    return callWithDebugContext(DebugAction.detectChanges, checkAndUpdateView, null, [view]);
}
/**
 * @param {?} view
 * @return {?}
 */
function debugCheckNoChangesView(view) {
    return callWithDebugContext(DebugAction.checkNoChanges, checkNoChangesView, null, [view]);
}
/**
 * @param {?} view
 * @return {?}
 */
function debugDestroyView(view) {
    return callWithDebugContext(DebugAction.destroy, destroyView, null, [view]);
}
/** @enum {number} */
const DebugAction = {
    create: 0,
    detectChanges: 1,
    checkNoChanges: 2,
    destroy: 3,
    handleEvent: 4,
};
DebugAction[DebugAction.create] = 'create';
DebugAction[DebugAction.detectChanges] = 'detectChanges';
DebugAction[DebugAction.checkNoChanges] = 'checkNoChanges';
DebugAction[DebugAction.destroy] = 'destroy';
DebugAction[DebugAction.handleEvent] = 'handleEvent';
/** @type {?} */
let _currentAction;
/** @type {?} */
let _currentView;
/** @type {?} */
let _currentNodeIndex;
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function debugSetCurrentNode(view, nodeIndex) {
    _currentView = view;
    _currentNodeIndex = nodeIndex;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @param {?} eventName
 * @param {?} event
 * @return {?}
 */
function debugHandleEvent(view, nodeIndex, eventName, event) {
    debugSetCurrentNode(view, nodeIndex);
    return callWithDebugContext(DebugAction.handleEvent, view.def.handleEvent, null, [view, nodeIndex, eventName, event]);
}
/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */
function debugUpdateDirectives(view, checkType) {
    if (view.state & 128 /* Destroyed */) {
        throw viewDestroyedError(DebugAction[_currentAction]);
    }
    debugSetCurrentNode(view, nextDirectiveWithBinding(view, 0));
    return view.def.updateDirectives(debugCheckDirectivesFn, view);
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */
    function debugCheckDirectivesFn(view, nodeIndex, argStyle, ...values) {
        /** @type {?} */
        const nodeDef = view.def.nodes[nodeIndex];
        if (checkType === 0 /* CheckAndUpdate */) {
            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
        }
        else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }
        if (nodeDef.flags & 16384 /* TypeDirective */) {
            debugSetCurrentNode(view, nextDirectiveWithBinding(view, nodeIndex));
        }
        return (nodeDef.flags & 224 /* CatPureExpression */) ?
            asPureExpressionData(view, nodeDef.nodeIndex).value :
            undefined;
    }
}
/**
 * @param {?} view
 * @param {?} checkType
 * @return {?}
 */
function debugUpdateRenderer(view, checkType) {
    if (view.state & 128 /* Destroyed */) {
        throw viewDestroyedError(DebugAction[_currentAction]);
    }
    debugSetCurrentNode(view, nextRenderNodeWithBinding(view, 0));
    return view.def.updateRenderer(debugCheckRenderNodeFn, view);
    /**
     * @param {?} view
     * @param {?} nodeIndex
     * @param {?} argStyle
     * @param {...?} values
     * @return {?}
     */
    function debugCheckRenderNodeFn(view, nodeIndex, argStyle, ...values) {
        /** @type {?} */
        const nodeDef = view.def.nodes[nodeIndex];
        if (checkType === 0 /* CheckAndUpdate */) {
            debugCheckAndUpdateNode(view, nodeDef, argStyle, values);
        }
        else {
            debugCheckNoChangesNode(view, nodeDef, argStyle, values);
        }
        if (nodeDef.flags & 3 /* CatRenderNode */) {
            debugSetCurrentNode(view, nextRenderNodeWithBinding(view, nodeIndex));
        }
        return (nodeDef.flags & 224 /* CatPureExpression */) ?
            asPureExpressionData(view, nodeDef.nodeIndex).value :
            undefined;
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} givenValues
 * @return {?}
 */
function debugCheckAndUpdateNode(view, nodeDef, argStyle, givenValues) {
    /** @type {?} */
    const changed = ((/** @type {?} */ (checkAndUpdateNode)))(view, nodeDef, argStyle, ...givenValues);
    if (changed) {
        /** @type {?} */
        const values = argStyle === 1 /* Dynamic */ ? givenValues[0] : givenValues;
        if (nodeDef.flags & 16384 /* TypeDirective */) {
            /** @type {?} */
            const bindingValues = {};
            for (let i = 0; i < nodeDef.bindings.length; i++) {
                /** @type {?} */
                const binding = nodeDef.bindings[i];
                /** @type {?} */
                const value = values[i];
                if (binding.flags & 8 /* TypeProperty */) {
                    bindingValues[normalizeDebugBindingName((/** @type {?} */ (binding.nonMinifiedName)))] =
                        normalizeDebugBindingValue(value);
                }
            }
            /** @type {?} */
            const elDef = (/** @type {?} */ (nodeDef.parent));
            /** @type {?} */
            const el = asElementData(view, elDef.nodeIndex).renderElement;
            if (!(/** @type {?} */ (elDef.element)).name) {
                // a comment.
                view.renderer.setValue(el, `bindings=${JSON.stringify(bindingValues, null, 2)}`);
            }
            else {
                // a regular element.
                for (let attr in bindingValues) {
                    /** @type {?} */
                    const value = bindingValues[attr];
                    if (value != null) {
                        view.renderer.setAttribute(el, attr, value);
                    }
                    else {
                        view.renderer.removeAttribute(el, attr);
                    }
                }
            }
        }
    }
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} argStyle
 * @param {?} values
 * @return {?}
 */
function debugCheckNoChangesNode(view, nodeDef, argStyle, values) {
    ((/** @type {?} */ (checkNoChangesNode)))(view, nodeDef, argStyle, ...values);
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function nextDirectiveWithBinding(view, nodeIndex) {
    for (let i = nodeIndex; i < view.def.nodes.length; i++) {
        /** @type {?} */
        const nodeDef = view.def.nodes[i];
        if (nodeDef.flags & 16384 /* TypeDirective */ && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
        }
    }
    return null;
}
/**
 * @param {?} view
 * @param {?} nodeIndex
 * @return {?}
 */
function nextRenderNodeWithBinding(view, nodeIndex) {
    for (let i = nodeIndex; i < view.def.nodes.length; i++) {
        /** @type {?} */
        const nodeDef = view.def.nodes[i];
        if ((nodeDef.flags & 3 /* CatRenderNode */) && nodeDef.bindings && nodeDef.bindings.length) {
            return i;
        }
    }
    return null;
}
class DebugContext_ {
    /**
     * @param {?} view
     * @param {?} nodeIndex
     */
    constructor(view, nodeIndex) {
        this.view = view;
        this.nodeIndex = nodeIndex;
        if (nodeIndex == null) {
            this.nodeIndex = nodeIndex = 0;
        }
        this.nodeDef = view.def.nodes[nodeIndex];
        /** @type {?} */
        let elDef = this.nodeDef;
        /** @type {?} */
        let elView = view;
        while (elDef && (elDef.flags & 1 /* TypeElement */) === 0) {
            elDef = (/** @type {?} */ (elDef.parent));
        }
        if (!elDef) {
            while (!elDef && elView) {
                elDef = (/** @type {?} */ (viewParentEl(elView)));
                elView = (/** @type {?} */ (elView.parent));
            }
        }
        this.elDef = elDef;
        this.elView = elView;
    }
    /**
     * @private
     * @return {?}
     */
    get elOrCompView() {
        // Has to be done lazily as we use the DebugContext also during creation of elements...
        return asElementData(this.elView, this.elDef.nodeIndex).componentView || this.view;
    }
    /**
     * @return {?}
     */
    get injector() { return createInjector$1(this.elView, this.elDef); }
    /**
     * @return {?}
     */
    get component() { return this.elOrCompView.component; }
    /**
     * @return {?}
     */
    get context() { return this.elOrCompView.context; }
    /**
     * @return {?}
     */
    get providerTokens() {
        /** @type {?} */
        const tokens = [];
        if (this.elDef) {
            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                /** @type {?} */
                const childDef = this.elView.def.nodes[i];
                if (childDef.flags & 20224 /* CatProvider */) {
                    tokens.push((/** @type {?} */ (childDef.provider)).token);
                }
                i += childDef.childCount;
            }
        }
        return tokens;
    }
    /**
     * @return {?}
     */
    get references() {
        /** @type {?} */
        const references = {};
        if (this.elDef) {
            collectReferences(this.elView, this.elDef, references);
            for (let i = this.elDef.nodeIndex + 1; i <= this.elDef.nodeIndex + this.elDef.childCount; i++) {
                /** @type {?} */
                const childDef = this.elView.def.nodes[i];
                if (childDef.flags & 20224 /* CatProvider */) {
                    collectReferences(this.elView, childDef, references);
                }
                i += childDef.childCount;
            }
        }
        return references;
    }
    /**
     * @return {?}
     */
    get componentRenderElement() {
        /** @type {?} */
        const elData = findHostElement(this.elOrCompView);
        return elData ? elData.renderElement : undefined;
    }
    /**
     * @return {?}
     */
    get renderNode() {
        return this.nodeDef.flags & 2 /* TypeText */ ? renderNode(this.view, this.nodeDef) :
            renderNode(this.elView, this.elDef);
    }
    /**
     * @param {?} console
     * @param {...?} values
     * @return {?}
     */
    logError(console, ...values) {
        /** @type {?} */
        let logViewDef;
        /** @type {?} */
        let logNodeIndex;
        if (this.nodeDef.flags & 2 /* TypeText */) {
            logViewDef = this.view.def;
            logNodeIndex = this.nodeDef.nodeIndex;
        }
        else {
            logViewDef = this.elView.def;
            logNodeIndex = this.elDef.nodeIndex;
        }
        // Note: we only generate a log function for text and element nodes
        // to make the generated code as small as possible.
        /** @type {?} */
        const renderNodeIndex = getRenderNodeIndex(logViewDef, logNodeIndex);
        /** @type {?} */
        let currRenderNodeIndex = -1;
        /** @type {?} */
        let nodeLogger = (/**
         * @return {?}
         */
        () => {
            currRenderNodeIndex++;
            if (currRenderNodeIndex === renderNodeIndex) {
                return console.error.bind(console, ...values);
            }
            else {
                return NOOP;
            }
        });
        (/** @type {?} */ (logViewDef.factory))(nodeLogger);
        if (currRenderNodeIndex < renderNodeIndex) {
            console.error('Illegal state: the ViewDefinitionFactory did not call the logger!');
            ((/** @type {?} */ (console.error)))(...values);
        }
    }
}
if (false) {}
/**
 * @param {?} viewDef
 * @param {?} nodeIndex
 * @return {?}
 */
function getRenderNodeIndex(viewDef, nodeIndex) {
    /** @type {?} */
    let renderNodeIndex = -1;
    for (let i = 0; i <= nodeIndex; i++) {
        /** @type {?} */
        const nodeDef = viewDef.nodes[i];
        if (nodeDef.flags & 3 /* CatRenderNode */) {
            renderNodeIndex++;
        }
    }
    return renderNodeIndex;
}
/**
 * @param {?} view
 * @return {?}
 */
function findHostElement(view) {
    while (view && !isComponentView(view)) {
        view = (/** @type {?} */ (view.parent));
    }
    if (view.parent) {
        return asElementData(view.parent, (/** @type {?} */ (viewParentEl(view))).nodeIndex);
    }
    return null;
}
/**
 * @param {?} view
 * @param {?} nodeDef
 * @param {?} references
 * @return {?}
 */
function collectReferences(view, nodeDef, references) {
    for (let refName in nodeDef.references) {
        references[refName] = getQueryValue(view, nodeDef, nodeDef.references[refName]);
    }
}
/**
 * @param {?} action
 * @param {?} fn
 * @param {?} self
 * @param {?} args
 * @return {?}
 */
function callWithDebugContext(action, fn, self, args) {
    /** @type {?} */
    const oldAction = _currentAction;
    /** @type {?} */
    const oldView = _currentView;
    /** @type {?} */
    const oldNodeIndex = _currentNodeIndex;
    try {
        _currentAction = action;
        /** @type {?} */
        const result = fn.apply(self, args);
        _currentView = oldView;
        _currentNodeIndex = oldNodeIndex;
        _currentAction = oldAction;
        return result;
    }
    catch (e) {
        if (isViewDebugError(e) || !_currentView) {
            throw e;
        }
        throw viewWrappedDebugError(e, (/** @type {?} */ (getCurrentDebugContext())));
    }
}
/**
 * @return {?}
 */
function getCurrentDebugContext() {
    return _currentView ? new DebugContext_(_currentView, _currentNodeIndex) : null;
}
class DebugRendererFactory2 {
    /**
     * @param {?} delegate
     */
    constructor(delegate) {
        this.delegate = delegate;
    }
    /**
     * @param {?} element
     * @param {?} renderData
     * @return {?}
     */
    createRenderer(element, renderData) {
        return new DebugRenderer2(this.delegate.createRenderer(element, renderData));
    }
    /**
     * @return {?}
     */
    begin() {
        if (this.delegate.begin) {
            this.delegate.begin();
        }
    }
    /**
     * @return {?}
     */
    end() {
        if (this.delegate.end) {
            this.delegate.end();
        }
    }
    /**
     * @return {?}
     */
    whenRenderingDone() {
        if (this.delegate.whenRenderingDone) {
            return this.delegate.whenRenderingDone();
        }
        return Promise.resolve(null);
    }
}
if (false) {}
class DebugRenderer2 {
    /**
     * @param {?} delegate
     */
    constructor(delegate) {
        this.delegate = delegate;
        /**
         * Factory function used to create a `DebugContext` when a node is created.
         *
         * The `DebugContext` allows to retrieve information about the nodes that are useful in tests.
         *
         * The factory is configurable so that the `DebugRenderer2` could instantiate either a View Engine
         * or a Render context.
         */
        this.debugContextFactory = getCurrentDebugContext;
        this.data = this.delegate.data;
    }
    /**
     * @private
     * @param {?} nativeElement
     * @return {?}
     */
    createDebugContext(nativeElement) { return this.debugContextFactory(nativeElement); }
    /**
     * @param {?} node
     * @return {?}
     */
    destroyNode(node) {
        /** @type {?} */
        const debugNode = (/** @type {?} */ (getDebugNode$1(node)));
        removeDebugNodeFromIndex(debugNode);
        if (debugNode instanceof DebugNode__PRE_R3__) {
            debugNode.listeners.length = 0;
        }
        if (this.delegate.destroyNode) {
            this.delegate.destroyNode(node);
        }
    }
    /**
     * @return {?}
     */
    destroy() { this.delegate.destroy(); }
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    createElement(name, namespace) {
        /** @type {?} */
        const el = this.delegate.createElement(name, namespace);
        /** @type {?} */
        const debugCtx = this.createDebugContext(el);
        if (debugCtx) {
            /** @type {?} */
            const debugEl = new DebugElement__PRE_R3__(el, null, debugCtx);
            ((/** @type {?} */ (debugEl))).name = name;
            indexDebugNode(debugEl);
        }
        return el;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    createComment(value) {
        /** @type {?} */
        const comment = this.delegate.createComment(value);
        /** @type {?} */
        const debugCtx = this.createDebugContext(comment);
        if (debugCtx) {
            indexDebugNode(new DebugNode__PRE_R3__(comment, null, debugCtx));
        }
        return comment;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    createText(value) {
        /** @type {?} */
        const text = this.delegate.createText(value);
        /** @type {?} */
        const debugCtx = this.createDebugContext(text);
        if (debugCtx) {
            indexDebugNode(new DebugNode__PRE_R3__(text, null, debugCtx));
        }
        return text;
    }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    appendChild(parent, newChild) {
        /** @type {?} */
        const debugEl = getDebugNode$1(parent);
        /** @type {?} */
        const debugChildEl = getDebugNode$1(newChild);
        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.addChild(debugChildEl);
        }
        this.delegate.appendChild(parent, newChild);
    }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    insertBefore(parent, newChild, refChild) {
        /** @type {?} */
        const debugEl = getDebugNode$1(parent);
        /** @type {?} */
        const debugChildEl = getDebugNode$1(newChild);
        /** @type {?} */
        const debugRefEl = (/** @type {?} */ (getDebugNode$1(refChild)));
        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.insertBefore(debugRefEl, debugChildEl);
        }
        this.delegate.insertBefore(parent, newChild, refChild);
    }
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    removeChild(parent, oldChild) {
        /** @type {?} */
        const debugEl = getDebugNode$1(parent);
        /** @type {?} */
        const debugChildEl = getDebugNode$1(oldChild);
        if (debugEl && debugChildEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.removeChild(debugChildEl);
        }
        this.delegate.removeChild(parent, oldChild);
    }
    /**
     * @param {?} selectorOrNode
     * @param {?=} preserveContent
     * @return {?}
     */
    selectRootElement(selectorOrNode, preserveContent) {
        /** @type {?} */
        const el = this.delegate.selectRootElement(selectorOrNode, preserveContent);
        /** @type {?} */
        const debugCtx = getCurrentDebugContext();
        if (debugCtx) {
            indexDebugNode(new DebugElement__PRE_R3__(el, null, debugCtx));
        }
        return el;
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    setAttribute(el, name, value, namespace) {
        /** @type {?} */
        const debugEl = getDebugNode$1(el);
        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            /** @type {?} */
            const fullName = namespace ? namespace + ':' + name : name;
            debugEl.attributes[fullName] = value;
        }
        this.delegate.setAttribute(el, name, value, namespace);
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    removeAttribute(el, name, namespace) {
        /** @type {?} */
        const debugEl = getDebugNode$1(el);
        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            /** @type {?} */
            const fullName = namespace ? namespace + ':' + name : name;
            debugEl.attributes[fullName] = null;
        }
        this.delegate.removeAttribute(el, name, namespace);
    }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    addClass(el, name) {
        /** @type {?} */
        const debugEl = getDebugNode$1(el);
        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.classes[name] = true;
        }
        this.delegate.addClass(el, name);
    }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    removeClass(el, name) {
        /** @type {?} */
        const debugEl = getDebugNode$1(el);
        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.classes[name] = false;
        }
        this.delegate.removeClass(el, name);
    }
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    setStyle(el, style, value, flags) {
        /** @type {?} */
        const debugEl = getDebugNode$1(el);
        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.styles[style] = value;
        }
        this.delegate.setStyle(el, style, value, flags);
    }
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    removeStyle(el, style, flags) {
        /** @type {?} */
        const debugEl = getDebugNode$1(el);
        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.styles[style] = null;
        }
        this.delegate.removeStyle(el, style, flags);
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    setProperty(el, name, value) {
        /** @type {?} */
        const debugEl = getDebugNode$1(el);
        if (debugEl && debugEl instanceof DebugElement__PRE_R3__) {
            debugEl.properties[name] = value;
        }
        this.delegate.setProperty(el, name, value);
    }
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    listen(target, eventName, callback) {
        if (typeof target !== 'string') {
            /** @type {?} */
            const debugEl = getDebugNode$1(target);
            if (debugEl) {
                debugEl.listeners.push(new DebugEventListener(eventName, callback));
            }
        }
        return this.delegate.listen(target, eventName, callback);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    parentNode(node) { return this.delegate.parentNode(node); }
    /**
     * @param {?} node
     * @return {?}
     */
    nextSibling(node) { return this.delegate.nextSibling(node); }
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    setValue(node, value) { return this.delegate.setValue(node, value); }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/entrypoint.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} override
 * @return {?}
 */
function overrideProvider(override) {
    initServicesIfNeeded();
    return Services.overrideProvider(override);
}
/**
 * @param {?} comp
 * @param {?} componentFactory
 * @return {?}
 */
function overrideComponentView(comp, componentFactory) {
    initServicesIfNeeded();
    return Services.overrideComponentView(comp, componentFactory);
}
/**
 * @return {?}
 */
function clearOverrides() {
    initServicesIfNeeded();
    return Services.clearOverrides();
}
// Attention: this function is called as top level function.
// Putting any logic in here will destroy closure tree shaking!
/**
 * @param {?} ngModuleType
 * @param {?} bootstrapComponents
 * @param {?} defFactory
 * @return {?}
 */
function createNgModuleFactory(ngModuleType, bootstrapComponents, defFactory) {
    return new NgModuleFactory_(ngModuleType, bootstrapComponents, defFactory);
}
/**
 * @param {?} def
 * @return {?}
 */
function cloneNgModuleDefinition(def) {
    /** @type {?} */
    const providers = Array.from(def.providers);
    /** @type {?} */
    const modules = Array.from(def.modules);
    /** @type {?} */
    const providersByKey = {};
    for (const key in def.providersByKey) {
        providersByKey[key] = def.providersByKey[key];
    }
    return {
        factory: def.factory,
        scope: def.scope, providers, modules, providersByKey,
    };
}
class NgModuleFactory_ extends NgModuleFactory {
    /**
     * @param {?} moduleType
     * @param {?} _bootstrapComponents
     * @param {?} _ngModuleDefFactory
     */
    constructor(moduleType, _bootstrapComponents, _ngModuleDefFactory) {
        // Attention: this ctor is called as top level function.
        // Putting any logic in here will destroy closure tree shaking!
        super();
        this.moduleType = moduleType;
        this._bootstrapComponents = _bootstrapComponents;
        this._ngModuleDefFactory = _ngModuleDefFactory;
    }
    /**
     * @param {?} parentInjector
     * @return {?}
     */
    create(parentInjector) {
        initServicesIfNeeded();
        // Clone the NgModuleDefinition so that any tree shakeable provider definition
        // added to this instance of the NgModuleRef doesn't affect the cached copy.
        // See https://github.com/angular/angular/issues/25018.
        /** @type {?} */
        const def = cloneNgModuleDefinition(resolveDefinition(this._ngModuleDefFactory));
        return Services.createNgModuleRef(this.moduleType, parentInjector || Injector.NULL, this._bootstrapComponents, def);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/view/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/core_private_export.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/core_render3_private_export.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/codegen_private_exports.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/src/core.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
if (ngDevMode) {
    // This helper is to give a reasonable error message to people upgrading to v9 that have not yet
    // installed `@angular/localize` in their app.
    // tslint:disable-next-line: no-toplevel-property-access
    _global.$localize = _global.$localize || (/**
     * @return {?}
     */
    function () {
        throw new Error('It looks like your application or one of its dependencies is using i18n.\n' +
            'Angular 9 introduced a global `$localize()` function that needs to be loaded.\n' +
            'Please run `ng add @angular/localize` from the Angular CLI.\n' +
            '(For non-CLI projects, add `import \'@angular/localize/init\';` to your `polyfills.ts` file.\n' +
            'For server-side rendering applications add the import to your `main.server.ts` file.)');
    });
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/core/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=core.js.map

/***/ }),

/***/ "./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/animations.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/animations.js ***!
  \************************************************************************************/
/*! exports provided: ANIMATION_MODULE_TYPE, BrowserAnimationsModule, NoopAnimationsModule, ɵAnimationRenderer, ɵAnimationRendererFactory, ɵBrowserAnimationBuilder, ɵBrowserAnimationFactory, ɵInjectableAnimationEngine, ɵangular_packages_platform_browser_animations_animations_a, ɵangular_packages_platform_browser_animations_animations_b, ɵangular_packages_platform_browser_animations_animations_c, ɵangular_packages_platform_browser_animations_animations_d, ɵangular_packages_platform_browser_animations_animations_e, ɵangular_packages_platform_browser_animations_animations_f */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ANIMATION_MODULE_TYPE", function() { return ANIMATION_MODULE_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserAnimationsModule", function() { return BrowserAnimationsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoopAnimationsModule", function() { return NoopAnimationsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationRenderer", function() { return AnimationRenderer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵAnimationRendererFactory", function() { return AnimationRendererFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserAnimationBuilder", function() { return BrowserAnimationBuilder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserAnimationFactory", function() { return BrowserAnimationFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵInjectableAnimationEngine", function() { return InjectableAnimationEngine; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_a", function() { return instantiateSupportedAnimationDriver; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_b", function() { return instantiateDefaultStyleNormalizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_c", function() { return instantiateRendererFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_d", function() { return BROWSER_ANIMATIONS_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_e", function() { return BROWSER_NOOP_ANIMATIONS_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_animations_animations_f", function() { return BaseAnimationRenderer; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js");
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/animations */ "./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/animations.js");
/* harmony import */ var _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/animations/browser */ "./node_modules/@angular/animations/__ivy_ngcc__/fesm2015/browser.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
/**
 * @license Angular v9.0.7
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */







/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/animations/src/animation_builder.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */


class BrowserAnimationBuilder extends _angular_animations__WEBPACK_IMPORTED_MODULE_2__["AnimationBuilder"] {
    /**
     * @param {?} rootRenderer
     * @param {?} doc
     */
    constructor(rootRenderer, doc) {
        super();
        this._nextAnimationId = 0;
        /** @type {?} */
        const typeData = (/** @type {?} */ ({
            id: '0',
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None,
            styles: [],
            data: { animation: [] }
        }));
        this._renderer = (/** @type {?} */ (rootRenderer.createRenderer(doc.body, typeData)));
    }
    /**
     * @param {?} animation
     * @return {?}
     */
    build(animation) {
        /** @type {?} */
        const id = this._nextAnimationId.toString();
        this._nextAnimationId++;
        /** @type {?} */
        const entry = Array.isArray(animation) ? Object(_angular_animations__WEBPACK_IMPORTED_MODULE_2__["sequence"])(animation) : animation;
        issueAnimationCommand(this._renderer, null, id, 'register', [entry]);
        return new BrowserAnimationFactory(id, this._renderer);
    }
}
BrowserAnimationBuilder.ɵfac = function BrowserAnimationBuilder_Factory(t) { return new (t || BrowserAnimationBuilder)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"])); };
BrowserAnimationBuilder.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: BrowserAnimationBuilder, factory: BrowserAnimationBuilder.ɵfac });
/** @nocollapse */
BrowserAnimationBuilder.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserAnimationBuilder, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"] }, { type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]]
            }] }]; }, null); })();
if (false) {}
class BrowserAnimationFactory extends _angular_animations__WEBPACK_IMPORTED_MODULE_2__["AnimationFactory"] {
    /**
     * @param {?} _id
     * @param {?} _renderer
     */
    constructor(_id, _renderer) {
        super();
        this._id = _id;
        this._renderer = _renderer;
    }
    /**
     * @param {?} element
     * @param {?=} options
     * @return {?}
     */
    create(element, options) {
        return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
    }
}
if (false) {}
class RendererAnimationPlayer {
    /**
     * @param {?} id
     * @param {?} element
     * @param {?} options
     * @param {?} _renderer
     */
    constructor(id, element, options, _renderer) {
        this.id = id;
        this.element = element;
        this._renderer = _renderer;
        this.parentPlayer = null;
        this._started = false;
        this.totalTime = 0;
        this._command('create', options);
    }
    /**
     * @private
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    _listen(eventName, callback) {
        return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);
    }
    /**
     * @private
     * @param {?} command
     * @param {...?} args
     * @return {?}
     */
    _command(command, ...args) {
        return issueAnimationCommand(this._renderer, this.element, this.id, command, args);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDone(fn) { this._listen('done', fn); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onStart(fn) { this._listen('start', fn); }
    /**
     * @param {?} fn
     * @return {?}
     */
    onDestroy(fn) { this._listen('destroy', fn); }
    /**
     * @return {?}
     */
    init() { this._command('init'); }
    /**
     * @return {?}
     */
    hasStarted() { return this._started; }
    /**
     * @return {?}
     */
    play() {
        this._command('play');
        this._started = true;
    }
    /**
     * @return {?}
     */
    pause() { this._command('pause'); }
    /**
     * @return {?}
     */
    restart() { this._command('restart'); }
    /**
     * @return {?}
     */
    finish() { this._command('finish'); }
    /**
     * @return {?}
     */
    destroy() { this._command('destroy'); }
    /**
     * @return {?}
     */
    reset() { this._command('reset'); }
    /**
     * @param {?} p
     * @return {?}
     */
    setPosition(p) { this._command('setPosition', p); }
    /**
     * @return {?}
     */
    getPosition() { return 0; }
}
if (false) {}
/**
 * @param {?} renderer
 * @param {?} element
 * @param {?} id
 * @param {?} command
 * @param {?} args
 * @return {?}
 */
function issueAnimationCommand(renderer, element, id, command, args) {
    return renderer.setProperty(element, `@@${id}:${command}`, args);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/animations/src/animation_renderer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const ANIMATION_PREFIX = '@';
/** @type {?} */
const DISABLE_ANIMATIONS_FLAG = '@.disabled';
/**
 * @record
 */
function RecursiveAnimationTriggerMetadata() { }
class AnimationRendererFactory {
    /**
     * @param {?} delegate
     * @param {?} engine
     * @param {?} _zone
     */
    constructor(delegate, engine, _zone) {
        this.delegate = delegate;
        this.engine = engine;
        this._zone = _zone;
        this._currentId = 0;
        this._microtaskId = 1;
        this._animationCallbacksBuffer = [];
        this._rendererCache = new Map();
        this._cdRecurDepth = 0;
        this.promise = Promise.resolve(0);
        engine.onRemovalComplete = (/**
         * @param {?} element
         * @param {?} delegate
         * @return {?}
         */
        (element, delegate) => {
            // Note: if an component element has a leave animation, and the component
            // a host leave animation, the view engine will call `removeChild` for the parent
            // component renderer as well as for the child component renderer.
            // Therefore, we need to check if we already removed the element.
            if (delegate && delegate.parentNode(element)) {
                delegate.removeChild(element.parentNode, element);
            }
        });
    }
    /**
     * @param {?} hostElement
     * @param {?} type
     * @return {?}
     */
    createRenderer(hostElement, type) {
        /** @type {?} */
        const EMPTY_NAMESPACE_ID = '';
        // cache the delegates to find out which cached delegate can
        // be used by which cached renderer
        /** @type {?} */
        const delegate = this.delegate.createRenderer(hostElement, type);
        if (!hostElement || !type || !type.data || !type.data['animation']) {
            /** @type {?} */
            let renderer = this._rendererCache.get(delegate);
            if (!renderer) {
                renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine);
                // only cache this result when the base renderer is used
                this._rendererCache.set(delegate, renderer);
            }
            return renderer;
        }
        /** @type {?} */
        const componentId = type.id;
        /** @type {?} */
        const namespaceId = type.id + '-' + this._currentId;
        this._currentId++;
        this.engine.register(namespaceId, hostElement);
        /** @type {?} */
        const registerTrigger = (/**
         * @param {?} trigger
         * @return {?}
         */
        (trigger) => {
            if (Array.isArray(trigger)) {
                trigger.forEach(registerTrigger);
            }
            else {
                this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger.name, trigger);
            }
        });
        /** @type {?} */
        const animationTriggers = (/** @type {?} */ (type.data['animation']));
        animationTriggers.forEach(registerTrigger);
        return new AnimationRenderer(this, namespaceId, delegate, this.engine);
    }
    /**
     * @return {?}
     */
    begin() {
        this._cdRecurDepth++;
        if (this.delegate.begin) {
            this.delegate.begin();
        }
    }
    /**
     * @private
     * @return {?}
     */
    _scheduleCountTask() {
        // always use promise to schedule microtask instead of use Zone
        this.promise.then((/**
         * @return {?}
         */
        () => { this._microtaskId++; }));
    }
    /**
     * \@internal
     * @param {?} count
     * @param {?} fn
     * @param {?} data
     * @return {?}
     */
    scheduleListenerCallback(count, fn, data) {
        if (count >= 0 && count < this._microtaskId) {
            this._zone.run((/**
             * @return {?}
             */
            () => fn(data)));
            return;
        }
        if (this._animationCallbacksBuffer.length == 0) {
            Promise.resolve(null).then((/**
             * @return {?}
             */
            () => {
                this._zone.run((/**
                 * @return {?}
                 */
                () => {
                    this._animationCallbacksBuffer.forEach((/**
                     * @param {?} tuple
                     * @return {?}
                     */
                    tuple => {
                        const [fn, data] = tuple;
                        fn(data);
                    }));
                    this._animationCallbacksBuffer = [];
                }));
            }));
        }
        this._animationCallbacksBuffer.push([fn, data]);
    }
    /**
     * @return {?}
     */
    end() {
        this._cdRecurDepth--;
        // this is to prevent animations from running twice when an inner
        // component does CD when a parent component instead has inserted it
        if (this._cdRecurDepth == 0) {
            this._zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this._scheduleCountTask();
                this.engine.flush(this._microtaskId);
            }));
        }
        if (this.delegate.end) {
            this.delegate.end();
        }
    }
    /**
     * @return {?}
     */
    whenRenderingDone() { return this.engine.whenRenderingDone(); }
}
AnimationRendererFactory.ɵfac = function AnimationRendererFactory_Factory(t) { return new (t || AnimationRendererFactory)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"])); };
AnimationRendererFactory.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: AnimationRendererFactory, factory: AnimationRendererFactory.ɵfac });
/** @nocollapse */
AnimationRendererFactory.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"] },
    { type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](AnimationRendererFactory, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"] }, { type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"] }]; }, null); })();
if (false) {}
class BaseAnimationRenderer {
    /**
     * @param {?} namespaceId
     * @param {?} delegate
     * @param {?} engine
     */
    constructor(namespaceId, delegate, engine) {
        this.namespaceId = namespaceId;
        this.delegate = delegate;
        this.engine = engine;
        this.destroyNode = this.delegate.destroyNode ? (/**
         * @param {?} n
         * @return {?}
         */
        (n) => (/** @type {?} */ (delegate.destroyNode))(n)) : null;
    }
    /**
     * @return {?}
     */
    get data() { return this.delegate.data; }
    /**
     * @return {?}
     */
    destroy() {
        this.engine.destroy(this.namespaceId, this.delegate);
        this.delegate.destroy();
    }
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    createElement(name, namespace) {
        return this.delegate.createElement(name, namespace);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    createComment(value) { return this.delegate.createComment(value); }
    /**
     * @param {?} value
     * @return {?}
     */
    createText(value) { return this.delegate.createText(value); }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    appendChild(parent, newChild) {
        this.delegate.appendChild(parent, newChild);
        this.engine.onInsert(this.namespaceId, newChild, parent, false);
    }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    insertBefore(parent, newChild, refChild) {
        this.delegate.insertBefore(parent, newChild, refChild);
        this.engine.onInsert(this.namespaceId, newChild, parent, true);
    }
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @param {?} isHostElement
     * @return {?}
     */
    removeChild(parent, oldChild, isHostElement) {
        this.engine.onRemove(this.namespaceId, oldChild, this.delegate, isHostElement);
    }
    /**
     * @param {?} selectorOrNode
     * @param {?=} preserveContent
     * @return {?}
     */
    selectRootElement(selectorOrNode, preserveContent) {
        return this.delegate.selectRootElement(selectorOrNode, preserveContent);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    parentNode(node) { return this.delegate.parentNode(node); }
    /**
     * @param {?} node
     * @return {?}
     */
    nextSibling(node) { return this.delegate.nextSibling(node); }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    setAttribute(el, name, value, namespace) {
        this.delegate.setAttribute(el, name, value, namespace);
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    removeAttribute(el, name, namespace) {
        this.delegate.removeAttribute(el, name, namespace);
    }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    addClass(el, name) { this.delegate.addClass(el, name); }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    removeClass(el, name) { this.delegate.removeClass(el, name); }
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?=} flags
     * @return {?}
     */
    setStyle(el, style, value, flags) {
        this.delegate.setStyle(el, style, value, flags);
    }
    /**
     * @param {?} el
     * @param {?} style
     * @param {?=} flags
     * @return {?}
     */
    removeStyle(el, style, flags) {
        this.delegate.removeStyle(el, style, flags);
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    setProperty(el, name, value) {
        if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
            this.disableAnimations(el, !!value);
        }
        else {
            this.delegate.setProperty(el, name, value);
        }
    }
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    setValue(node, value) { this.delegate.setValue(node, value); }
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    listen(target, eventName, callback) {
        return this.delegate.listen(target, eventName, callback);
    }
    /**
     * @protected
     * @param {?} element
     * @param {?} value
     * @return {?}
     */
    disableAnimations(element, value) {
        this.engine.disableAnimations(element, value);
    }
}
if (false) {}
class AnimationRenderer extends BaseAnimationRenderer {
    /**
     * @param {?} factory
     * @param {?} namespaceId
     * @param {?} delegate
     * @param {?} engine
     */
    constructor(factory, namespaceId, delegate, engine) {
        super(namespaceId, delegate, engine);
        this.factory = factory;
        this.namespaceId = namespaceId;
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    setProperty(el, name, value) {
        if (name.charAt(0) == ANIMATION_PREFIX) {
            if (name.charAt(1) == '.' && name == DISABLE_ANIMATIONS_FLAG) {
                value = value === undefined ? true : !!value;
                this.disableAnimations(el, (/** @type {?} */ (value)));
            }
            else {
                this.engine.process(this.namespaceId, el, name.substr(1), value);
            }
        }
        else {
            this.delegate.setProperty(el, name, value);
        }
    }
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    listen(target, eventName, callback) {
        if (eventName.charAt(0) == ANIMATION_PREFIX) {
            /** @type {?} */
            const element = resolveElementFromTarget(target);
            /** @type {?} */
            let name = eventName.substr(1);
            /** @type {?} */
            let phase = '';
            // @listener.phase is for trigger animation callbacks
            // @@listener is for animation builder callbacks
            if (name.charAt(0) != ANIMATION_PREFIX) {
                [name, phase] = parseTriggerCallbackName(name);
            }
            return this.engine.listen(this.namespaceId, element, name, phase, (/**
             * @param {?} event
             * @return {?}
             */
            event => {
                /** @type {?} */
                const countId = ((/** @type {?} */ (event)))['_data'] || -1;
                this.factory.scheduleListenerCallback(countId, callback, event);
            }));
        }
        return this.delegate.listen(target, eventName, callback);
    }
}
if (false) {}
/**
 * @param {?} target
 * @return {?}
 */
function resolveElementFromTarget(target) {
    switch (target) {
        case 'body':
            return document.body;
        case 'document':
            return document;
        case 'window':
            return window;
        default:
            return target;
    }
}
/**
 * @param {?} triggerName
 * @return {?}
 */
function parseTriggerCallbackName(triggerName) {
    /** @type {?} */
    const dotIndex = triggerName.indexOf('.');
    /** @type {?} */
    const trigger = triggerName.substring(0, dotIndex);
    /** @type {?} */
    const phase = triggerName.substr(dotIndex + 1);
    return [trigger, phase];
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/animations/src/providers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class InjectableAnimationEngine extends _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"] {
    /**
     * @param {?} doc
     * @param {?} driver
     * @param {?} normalizer
     */
    constructor(doc, driver, normalizer) {
        super(doc.body, driver, normalizer);
    }
}
InjectableAnimationEngine.ɵfac = function InjectableAnimationEngine_Factory(t) { return new (t || InjectableAnimationEngine)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"]), _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"](_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"])); };
InjectableAnimationEngine.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: InjectableAnimationEngine, factory: InjectableAnimationEngine.ɵfac });
/** @nocollapse */
InjectableAnimationEngine.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"],] }] },
    { type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"] },
    { type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](InjectableAnimationEngine, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_4__["DOCUMENT"]]
            }] }, { type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"] }, { type: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"] }]; }, null); })();
/**
 * @return {?}
 */
function instantiateSupportedAnimationDriver() {
    return Object(_angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵsupportsWebAnimations"])() ? new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵWebAnimationsDriver"]() : new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵCssKeyframesDriver"]();
}
/**
 * @return {?}
 */
function instantiateDefaultStyleNormalizer() {
    return new _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵWebAnimationsStyleNormalizer"]();
}
/**
 * @param {?} renderer
 * @param {?} engine
 * @param {?} zone
 * @return {?}
 */
function instantiateRendererFactory(renderer, engine, zone) {
    return new AnimationRendererFactory(renderer, engine, zone);
}
/**
 * \@publicApi
 * @type {?}
 */
const ANIMATION_MODULE_TYPE = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["InjectionToken"]('AnimationModuleType');
/** @type {?} */
const SHARED_ANIMATION_PROVIDERS = [
    { provide: _angular_animations__WEBPACK_IMPORTED_MODULE_2__["AnimationBuilder"], useClass: BrowserAnimationBuilder },
    { provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationStyleNormalizer"], useFactory: instantiateDefaultStyleNormalizer },
    { provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"], useClass: InjectableAnimationEngine }, {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_0__["RendererFactory2"],
        useFactory: instantiateRendererFactory,
        deps: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["ɵDomRendererFactory2"], _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵAnimationEngine"], _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgZone"]]
    }
];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserModule.
 * @type {?}
 */
const BROWSER_ANIMATIONS_PROVIDERS = [
    { provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"], useFactory: instantiateSupportedAnimationDriver },
    { provide: ANIMATION_MODULE_TYPE, useValue: 'BrowserAnimations' }, ...SHARED_ANIMATION_PROVIDERS
];
/**
 * Separate providers from the actual module so that we can do a local modification in Google3 to
 * include them in the BrowserTestingModule.
 * @type {?}
 */
const BROWSER_NOOP_ANIMATIONS_PROVIDERS = [
    { provide: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["AnimationDriver"], useClass: _angular_animations_browser__WEBPACK_IMPORTED_MODULE_3__["ɵNoopAnimationDriver"] },
    { provide: ANIMATION_MODULE_TYPE, useValue: 'NoopAnimations' }, ...SHARED_ANIMATION_PROVIDERS
];

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/animations/src/module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Exports `BrowserModule` with additional [dependency-injection providers](guide/glossary#provider)
 * for use with animations. See [Animations](guide/animations).
 * \@publicApi
 */
class BrowserAnimationsModule {
}
BrowserAnimationsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: BrowserAnimationsModule });
BrowserAnimationsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ factory: function BrowserAnimationsModule_Factory(t) { return new (t || BrowserAnimationsModule)(); }, providers: BROWSER_ANIMATIONS_PROVIDERS, imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](BrowserAnimationsModule, { exports: function () { return [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]]; } }); })();
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](BrowserAnimationsModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
                exports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]],
                providers: BROWSER_ANIMATIONS_PROVIDERS
            }]
    }], null, null); })();
/**
 * A null player that must be imported to allow disabling of animations.
 * \@publicApi
 */
class NoopAnimationsModule {
}
NoopAnimationsModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: NoopAnimationsModule });
NoopAnimationsModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ factory: function NoopAnimationsModule_Factory(t) { return new (t || NoopAnimationsModule)(); }, providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS, imports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](NoopAnimationsModule, { exports: function () { return [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]]; } }); })();
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](NoopAnimationsModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
                exports: [_angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"]],
                providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/animations/src/private_export.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/animations/src/animations.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/animations/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/animations/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=animations.js.map

/***/ }),

/***/ "./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/@angular/platform-browser/__ivy_ngcc__/fesm2015/platform-browser.js ***!
  \******************************************************************************************/
/*! exports provided: ɵgetDOM, BrowserModule, BrowserTransferStateModule, By, DomSanitizer, EVENT_MANAGER_PLUGINS, EventManager, HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerModule, Meta, Title, TransferState, VERSION, disableDebugTools, enableDebugTools, makeStateKey, platformBrowser, ɵBROWSER_SANITIZATION_PROVIDERS, ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__, ɵBrowserDomAdapter, ɵBrowserGetTestability, ɵDomEventsPlugin, ɵDomRendererFactory2, ɵDomSanitizerImpl, ɵDomSharedStylesHost, ɵELEMENT_PROBE_PROVIDERS, ɵELEMENT_PROBE_PROVIDERS__POST_R3__, ɵHAMMER_PROVIDERS__POST_R3__, ɵHammerGesturesPlugin, ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS, ɵKeyEventsPlugin, ɵNAMESPACE_URIS, ɵSharedStylesHost, ɵTRANSITION_ID, ɵangular_packages_platform_browser_platform_browser_a, ɵangular_packages_platform_browser_platform_browser_b, ɵangular_packages_platform_browser_platform_browser_c, ɵangular_packages_platform_browser_platform_browser_d, ɵangular_packages_platform_browser_platform_browser_e, ɵangular_packages_platform_browser_platform_browser_f, ɵangular_packages_platform_browser_platform_browser_g, ɵangular_packages_platform_browser_platform_browser_h, ɵangular_packages_platform_browser_platform_browser_i, ɵangular_packages_platform_browser_platform_browser_j, ɵangular_packages_platform_browser_platform_browser_k, ɵangular_packages_platform_browser_platform_browser_l, ɵangular_packages_platform_browser_platform_browser_m, ɵangular_packages_platform_browser_platform_browser_n, ɵangular_packages_platform_browser_platform_browser_o, ɵescapeHtml, ɵflattenStyles, ɵinitDomAdapter, ɵshimContentAttribute, ɵshimHostAttribute */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserModule", function() { return BrowserModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserTransferStateModule", function() { return BrowserTransferStateModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "By", function() { return By; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DomSanitizer", function() { return DomSanitizer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EVENT_MANAGER_PLUGINS", function() { return EVENT_MANAGER_PLUGINS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventManager", function() { return EventManager; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HAMMER_GESTURE_CONFIG", function() { return HAMMER_GESTURE_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HAMMER_LOADER", function() { return HAMMER_LOADER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HammerGestureConfig", function() { return HammerGestureConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HammerModule", function() { return HammerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Meta", function() { return Meta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Title", function() { return Title; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TransferState", function() { return TransferState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "disableDebugTools", function() { return disableDebugTools; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "enableDebugTools", function() { return enableDebugTools; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "makeStateKey", function() { return makeStateKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "platformBrowser", function() { return platformBrowser; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBROWSER_SANITIZATION_PROVIDERS", function() { return BROWSER_SANITIZATION_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBROWSER_SANITIZATION_PROVIDERS__POST_R3__", function() { return BROWSER_SANITIZATION_PROVIDERS__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserDomAdapter", function() { return BrowserDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵBrowserGetTestability", function() { return BrowserGetTestability; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomEventsPlugin", function() { return DomEventsPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomRendererFactory2", function() { return DomRendererFactory2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomSanitizerImpl", function() { return DomSanitizerImpl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵDomSharedStylesHost", function() { return DomSharedStylesHost; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵELEMENT_PROBE_PROVIDERS", function() { return ELEMENT_PROBE_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵELEMENT_PROBE_PROVIDERS__POST_R3__", function() { return ELEMENT_PROBE_PROVIDERS__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵHAMMER_PROVIDERS__POST_R3__", function() { return HAMMER_PROVIDERS__POST_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵHammerGesturesPlugin", function() { return HammerGesturesPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵINTERNAL_BROWSER_PLATFORM_PROVIDERS", function() { return INTERNAL_BROWSER_PLATFORM_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵKeyEventsPlugin", function() { return KeyEventsPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵNAMESPACE_URIS", function() { return NAMESPACE_URIS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵSharedStylesHost", function() { return SharedStylesHost; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵTRANSITION_ID", function() { return TRANSITION_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_a", function() { return errorHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_b", function() { return _document; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_c", function() { return BROWSER_MODULE_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_d", function() { return createMeta; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_e", function() { return createTitle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_f", function() { return initTransferState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_g", function() { return EventManagerPlugin; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_h", function() { return HAMMER_PROVIDERS__PRE_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_i", function() { return HAMMER_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_j", function() { return domSanitizerImplFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_k", function() { return appInitializerFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_l", function() { return SERVER_TRANSITION_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_m", function() { return _createNgProbeR2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_n", function() { return ELEMENT_PROBE_PROVIDERS__PRE_R3__; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_platform_browser_platform_browser_o", function() { return GenericBrowserDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵescapeHtml", function() { return escapeHtml; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵflattenStyles", function() { return flattenStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵinitDomAdapter", function() { return initDomAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵshimContentAttribute", function() { return shimContentAttribute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵshimHostAttribute", function() { return shimHostAttribute; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ɵgetDOM", function() { return _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"]; });

/**
 * @license Angular v9.0.7
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */






/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/generic_browser_adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Provides DOM operations in any browser environment.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 * @abstract
 */
class GenericBrowserDomAdapter extends _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵDomAdapter"] {
    constructor() { super(); }
    /**
     * @return {?}
     */
    supportsDOMEvents() { return true; }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/browser_adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0 = /**
 * @return {?}
 */
() => {
    if (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['Node']) {
        return _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['Node'].prototype.contains || (/**
         * @this {?}
         * @param {?} node
         * @return {?}
         */
        function (node) {
            return !!(this.compareDocumentPosition(node) & 16);
        });
    }
    return (/** @type {?} */ (undefined));
};
/** @type {?} */
const nodeContains = ((ɵ0))();
/**
 * A `DomAdapter` powered by full browser DOM APIs.
 *
 * \@security Tread carefully! Interacting with the DOM directly is dangerous and
 * can introduce XSS risks.
 */
/* tslint:disable:requireParameterType no-console */
class BrowserDomAdapter extends GenericBrowserDomAdapter {
    /**
     * @return {?}
     */
    static makeCurrent() { Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵsetRootDomAdapter"])(new BrowserDomAdapter()); }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    getProperty(el, name) { return ((/** @type {?} */ (el)))[name]; }
    /**
     * @param {?} error
     * @return {?}
     */
    log(error) {
        if (window.console) {
            window.console.log && window.console.log(error);
        }
    }
    /**
     * @param {?} error
     * @return {?}
     */
    logGroup(error) {
        if (window.console) {
            window.console.group && window.console.group(error);
        }
    }
    /**
     * @return {?}
     */
    logGroupEnd() {
        if (window.console) {
            window.console.groupEnd && window.console.groupEnd();
        }
    }
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} listener
     * @return {?}
     */
    onAndCancel(el, evt, listener) {
        el.addEventListener(evt, listener, false);
        // Needed to follow Dart's subscription semantic, until fix of
        // https://code.google.com/p/dart/issues/detail?id=17406
        return (/**
         * @return {?}
         */
        () => { el.removeEventListener(evt, listener, false); });
    }
    /**
     * @param {?} el
     * @param {?} evt
     * @return {?}
     */
    dispatchEvent(el, evt) { el.dispatchEvent(evt); }
    /**
     * @param {?} node
     * @return {?}
     */
    remove(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
        return node;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    getValue(el) { return el.value; }
    /**
     * @param {?} tagName
     * @param {?=} doc
     * @return {?}
     */
    createElement(tagName, doc) {
        doc = doc || this.getDefaultDocument();
        return doc.createElement(tagName);
    }
    /**
     * @return {?}
     */
    createHtmlDocument() {
        return document.implementation.createHTMLDocument('fakeTitle');
    }
    /**
     * @return {?}
     */
    getDefaultDocument() { return document; }
    /**
     * @param {?} node
     * @return {?}
     */
    isElementNode(node) { return node.nodeType === Node.ELEMENT_NODE; }
    /**
     * @param {?} node
     * @return {?}
     */
    isShadowRoot(node) { return node instanceof DocumentFragment; }
    /**
     * @param {?} doc
     * @param {?} target
     * @return {?}
     */
    getGlobalEventTarget(doc, target) {
        if (target === 'window') {
            return window;
        }
        if (target === 'document') {
            return doc;
        }
        if (target === 'body') {
            return doc.body;
        }
        return null;
    }
    /**
     * @return {?}
     */
    getHistory() { return window.history; }
    /**
     * @return {?}
     */
    getLocation() { return window.location; }
    /**
     * @param {?} doc
     * @return {?}
     */
    getBaseHref(doc) {
        /** @type {?} */
        const href = getBaseElementHref();
        return href == null ? null : relativePath(href);
    }
    /**
     * @return {?}
     */
    resetBaseElement() { baseElement = null; }
    /**
     * @return {?}
     */
    getUserAgent() { return window.navigator.userAgent; }
    /**
     * @return {?}
     */
    performanceNow() {
        // performance.now() is not available in all browsers, see
        // http://caniuse.com/#search=performance.now
        return window.performance && window.performance.now ? window.performance.now() :
            new Date().getTime();
    }
    /**
     * @return {?}
     */
    supportsCookies() { return true; }
    /**
     * @param {?} name
     * @return {?}
     */
    getCookie(name) { return Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵparseCookieValue"])(document.cookie, name); }
}
/** @type {?} */
let baseElement = null;
/**
 * @return {?}
 */
function getBaseElementHref() {
    if (!baseElement) {
        baseElement = (/** @type {?} */ (document.querySelector('base')));
        if (!baseElement) {
            return null;
        }
    }
    return baseElement.getAttribute('href');
}
// based on urlUtils.js in AngularJS 1
/** @type {?} */
let urlParsingNode;
/**
 * @param {?} url
 * @return {?}
 */
function relativePath(url) {
    if (!urlParsingNode) {
        urlParsingNode = document.createElement('a');
    }
    urlParsingNode.setAttribute('href', url);
    return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :
        '/' + urlParsingNode.pathname;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/server-transition.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * An id that identifies a particular application being bootstrapped, that should
 * match across the client/server boundary.
 * @type {?}
 */
const TRANSITION_ID = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('TRANSITION_ID');
/**
 * @param {?} transitionId
 * @param {?} document
 * @param {?} injector
 * @return {?}
 */
function appInitializerFactory(transitionId, document, injector) {
    return (/**
     * @return {?}
     */
    () => {
        // Wait for all application initializers to be completed before removing the styles set by
        // the server.
        injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationInitStatus"]).donePromise.then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const dom = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
            /** @type {?} */
            const styles = Array.prototype.slice.apply(document.querySelectorAll(`style[ng-transition]`));
            styles.filter((/**
             * @param {?} el
             * @return {?}
             */
            el => el.getAttribute('ng-transition') === transitionId))
                .forEach((/**
             * @param {?} el
             * @return {?}
             */
            el => dom.remove(el)));
        }));
    });
}
/** @type {?} */
const SERVER_TRANSITION_PROVIDERS = [
    {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_INITIALIZER"],
        useFactory: appInitializerFactory,
        deps: [TRANSITION_ID, _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]],
        multi: true
    },
];

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/testability.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BrowserGetTestability {
    /**
     * @return {?}
     */
    static init() { Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["setTestabilityGetter"])(new BrowserGetTestability()); }
    /**
     * @param {?} registry
     * @return {?}
     */
    addToWindow(registry) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAngularTestability'] = (/**
         * @param {?} elem
         * @param {?=} findInAncestors
         * @return {?}
         */
        (elem, findInAncestors = true) => {
            /** @type {?} */
            const testability = registry.findTestabilityInTree(elem, findInAncestors);
            if (testability == null) {
                throw new Error('Could not find testability for element.');
            }
            return testability;
        });
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAllAngularTestabilities'] = (/**
         * @return {?}
         */
        () => registry.getAllTestabilities());
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAllAngularRootElements'] = (/**
         * @return {?}
         */
        () => registry.getAllRootElements());
        /** @type {?} */
        const whenAllStable = (/**
         * @param {?} callback
         * @return {?}
         */
        (callback /** TODO #9100 */) => {
            /** @type {?} */
            const testabilities = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['getAllAngularTestabilities']();
            /** @type {?} */
            let count = testabilities.length;
            /** @type {?} */
            let didWork = false;
            /** @type {?} */
            const decrement = (/**
             * @param {?} didWork_
             * @return {?}
             */
            function (didWork_ /** TODO #9100 */) {
                didWork = didWork || didWork_;
                count--;
                if (count == 0) {
                    callback(didWork);
                }
            });
            testabilities.forEach((/**
             * @param {?} testability
             * @return {?}
             */
            function (testability /** TODO #9100 */) {
                testability.whenStable(decrement);
            }));
        });
        if (!_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['frameworkStabilizers']) {
            _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['frameworkStabilizers'] = [];
        }
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['frameworkStabilizers'].push(whenAllStable);
    }
    /**
     * @param {?} registry
     * @param {?} elem
     * @param {?} findInAncestors
     * @return {?}
     */
    findTestabilityInTree(registry, elem, findInAncestors) {
        if (elem == null) {
            return null;
        }
        /** @type {?} */
        const t = registry.getTestability(elem);
        if (t != null) {
            return t;
        }
        else if (!findInAncestors) {
            return null;
        }
        if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isShadowRoot(elem)) {
            return this.findTestabilityInTree(registry, ((/** @type {?} */ (elem))).host, true);
        }
        return this.findTestabilityInTree(registry, elem.parentElement, true);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/dom/util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const CAMEL_CASE_REGEXP = /([A-Z])/g;
/** @type {?} */
const DASH_CASE_REGEXP = /-([a-z])/g;
/**
 * @param {?} input
 * @return {?}
 */
function camelCaseToDashCase(input) {
    return input.replace(CAMEL_CASE_REGEXP, (/**
     * @param {...?} m
     * @return {?}
     */
    (...m) => '-' + m[1].toLowerCase()));
}
/**
 * @param {?} input
 * @return {?}
 */
function dashCaseToCamelCase(input) {
    return input.replace(DASH_CASE_REGEXP, (/**
     * @param {...?} m
     * @return {?}
     */
    (...m) => m[1].toUpperCase()));
}
/**
 * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if
 * `name` is `'probe'`.
 * @param {?} name Name under which it will be exported. Keep in mind this will be a property of the
 * global `ng` object.
 * @param {?} value The value to export.
 * @return {?}
 */
function exportNgVar(name, value) {
    if (typeof COMPILED === 'undefined' || !COMPILED) {
        // Note: we can't export `ng` when using closure enhanced optimization as:
        // - closure declares globals itself for minified names, which sometimes clobber our `ng` global
        // - we can't declare a closure extern as the namespace `ng` is already used within Google
        //   for typings for angularJS (via `goog.provide('ng....')`).
        /** @type {?} */
        const ng = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['ng'] = ((/** @type {?} */ (_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵglobal"]['ng']))) || {};
        ng[name] = value;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/dom/debug/ng_probe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$1 = /**
 * @return {?}
 */
() => ({
    'ApplicationRef': _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"],
    'NgZone': _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"],
});
/** @type {?} */
const CORE_TOKENS = ((ɵ0$1))();
/** @type {?} */
const INSPECT_GLOBAL_NAME = 'probe';
/** @type {?} */
const CORE_TOKENS_GLOBAL_NAME = 'coreTokens';
/**
 * Returns a {\@link DebugElement} for the given native DOM element, or
 * null if the given native element does not have an Angular view associated
 * with it.
 * @param {?} element
 * @return {?}
 */
function inspectNativeElementR2(element) {
    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵgetDebugNodeR2"])(element);
}
/**
 * @param {?} coreTokens
 * @return {?}
 */
function _createNgProbeR2(coreTokens) {
    exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElementR2);
    exportNgVar(CORE_TOKENS_GLOBAL_NAME, Object.assign(Object.assign({}, CORE_TOKENS), _ngProbeTokensToMap(coreTokens || [])));
    return (/**
     * @return {?}
     */
    () => inspectNativeElementR2);
}
/**
 * @param {?} tokens
 * @return {?}
 */
function _ngProbeTokensToMap(tokens) {
    return tokens.reduce((/**
     * @param {?} prev
     * @param {?} t
     * @return {?}
     */
    (prev, t) => (prev[t.name] = t.token, prev)), {});
}
/**
 * In Ivy, we don't support NgProbe because we have our own set of testing utilities
 * with more robust functionality.
 *
 * We shouldn't bring in NgProbe because it prevents DebugNode and friends from
 * tree-shaking properly.
 * @type {?}
 */
const ELEMENT_PROBE_PROVIDERS__POST_R3__ = [];
/**
 * Providers which support debugging Angular applications (e.g. via `ng.probe`).
 * @type {?}
 */
const ELEMENT_PROBE_PROVIDERS__PRE_R3__ = [
    {
        provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_INITIALIZER"],
        useFactory: _createNgProbeR2,
        deps: [
            [_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgProbeToken"], new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]()],
        ],
        multi: true,
    },
];
/** @type {?} */
const ELEMENT_PROBE_PROVIDERS = ELEMENT_PROBE_PROVIDERS__POST_R3__;

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/dom/events/event_manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The injection token for the event-manager plug-in service.
 *
 * \@publicApi
 * @type {?}
 */
const EVENT_MANAGER_PLUGINS = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('EventManagerPlugins');
/**
 * An injectable service that provides event management for Angular
 * through a browser plug-in.
 *
 * \@publicApi
 */
class EventManager {
    /**
     * Initializes an instance of the event-manager service.
     * @param {?} plugins
     * @param {?} _zone
     */
    constructor(plugins, _zone) {
        this._zone = _zone;
        this._eventNameToPlugin = new Map();
        plugins.forEach((/**
         * @template THIS
         * @this {THIS}
         * @param {?} p
         * @return {THIS}
         */
        p => p.manager = this));
        this._plugins = plugins.slice().reverse();
    }
    /**
     * Registers a handler for a specific element and event.
     *
     * @param {?} element The HTML element to receive event notifications.
     * @param {?} eventName The name of the event to listen for.
     * @param {?} handler A function to call when the notification occurs. Receives the
     * event object as an argument.
     * @return {?} A callback function that can be used to remove the handler.
     */
    addEventListener(element, eventName, handler) {
        /** @type {?} */
        const plugin = this._findPluginFor(eventName);
        return plugin.addEventListener(element, eventName, handler);
    }
    /**
     * Registers a global handler for an event in a target view.
     *
     * @param {?} target A target for global event notifications. One of "window", "document", or "body".
     * @param {?} eventName The name of the event to listen for.
     * @param {?} handler A function to call when the notification occurs. Receives the
     * event object as an argument.
     * @return {?} A callback function that can be used to remove the handler.
     */
    addGlobalEventListener(target, eventName, handler) {
        /** @type {?} */
        const plugin = this._findPluginFor(eventName);
        return plugin.addGlobalEventListener(target, eventName, handler);
    }
    /**
     * Retrieves the compilation zone in which event listeners are registered.
     * @return {?}
     */
    getZone() { return this._zone; }
    /**
     * \@internal
     * @param {?} eventName
     * @return {?}
     */
    _findPluginFor(eventName) {
        /** @type {?} */
        const plugin = this._eventNameToPlugin.get(eventName);
        if (plugin) {
            return plugin;
        }
        /** @type {?} */
        const plugins = this._plugins;
        for (let i = 0; i < plugins.length; i++) {
            /** @type {?} */
            const plugin = plugins[i];
            if (plugin.supports(eventName)) {
                this._eventNameToPlugin.set(eventName, plugin);
                return plugin;
            }
        }
        throw new Error(`No event manager plugin found for event ${eventName}`);
    }
}
EventManager.ɵfac = function EventManager_Factory(t) { return new (t || EventManager)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](EVENT_MANAGER_PLUGINS), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"])); };
EventManager.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: EventManager, factory: EventManager.ɵfac });
/** @nocollapse */
EventManager.ctorParameters = () => [
    { type: Array, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [EVENT_MANAGER_PLUGINS,] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](EventManager, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: Array, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [EVENT_MANAGER_PLUGINS]
            }] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"] }]; }, null); })();
if (false) {}
/**
 * @abstract
 */
class EventManagerPlugin {
    /**
     * @param {?} _doc
     */
    constructor(_doc) {
        this._doc = _doc;
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    addGlobalEventListener(element, eventName, handler) {
        /** @type {?} */
        const target = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().getGlobalEventTarget(this._doc, element);
        if (!target) {
            throw new Error(`Unsupported event target ${target} for event ${eventName}`);
        }
        return this.addEventListener(target, eventName, handler);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/dom/shared_styles_host.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SharedStylesHost {
    constructor() {
        /**
         * \@internal
         */
        this._stylesSet = new Set();
    }
    /**
     * @param {?} styles
     * @return {?}
     */
    addStyles(styles) {
        /** @type {?} */
        const additions = new Set();
        styles.forEach((/**
         * @param {?} style
         * @return {?}
         */
        style => {
            if (!this._stylesSet.has(style)) {
                this._stylesSet.add(style);
                additions.add(style);
            }
        }));
        this.onStylesAdded(additions);
    }
    /**
     * @param {?} additions
     * @return {?}
     */
    onStylesAdded(additions) { }
    /**
     * @return {?}
     */
    getAllStyles() { return Array.from(this._stylesSet); }
}
SharedStylesHost.ɵfac = function SharedStylesHost_Factory(t) { return new (t || SharedStylesHost)(); };
SharedStylesHost.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: SharedStylesHost, factory: SharedStylesHost.ɵfac });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](SharedStylesHost, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return []; }, null); })();
if (false) {}
class DomSharedStylesHost extends SharedStylesHost {
    /**
     * @param {?} _doc
     */
    constructor(_doc) {
        super();
        this._doc = _doc;
        this._hostNodes = new Set();
        this._styleNodes = new Set();
        this._hostNodes.add(_doc.head);
    }
    /**
     * @private
     * @param {?} styles
     * @param {?} host
     * @return {?}
     */
    _addStylesToHost(styles, host) {
        styles.forEach((/**
         * @param {?} style
         * @return {?}
         */
        (style) => {
            /** @type {?} */
            const styleEl = this._doc.createElement('style');
            styleEl.textContent = style;
            this._styleNodes.add(host.appendChild(styleEl));
        }));
    }
    /**
     * @param {?} hostNode
     * @return {?}
     */
    addHost(hostNode) {
        this._addStylesToHost(this._stylesSet, hostNode);
        this._hostNodes.add(hostNode);
    }
    /**
     * @param {?} hostNode
     * @return {?}
     */
    removeHost(hostNode) { this._hostNodes.delete(hostNode); }
    /**
     * @param {?} additions
     * @return {?}
     */
    onStylesAdded(additions) {
        this._hostNodes.forEach((/**
         * @param {?} hostNode
         * @return {?}
         */
        hostNode => this._addStylesToHost(additions, hostNode)));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { this._styleNodes.forEach((/**
     * @param {?} styleNode
     * @return {?}
     */
    styleNode => Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().remove(styleNode))); }
}
DomSharedStylesHost.ɵfac = function DomSharedStylesHost_Factory(t) { return new (t || DomSharedStylesHost)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); };
DomSharedStylesHost.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: DomSharedStylesHost, factory: DomSharedStylesHost.ɵfac });
/** @nocollapse */
DomSharedStylesHost.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomSharedStylesHost, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/dom/dom_renderer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NAMESPACE_URIS = {
    'svg': 'http://www.w3.org/2000/svg',
    'xhtml': 'http://www.w3.org/1999/xhtml',
    'xlink': 'http://www.w3.org/1999/xlink',
    'xml': 'http://www.w3.org/XML/1998/namespace',
    'xmlns': 'http://www.w3.org/2000/xmlns/',
};
/** @type {?} */
const COMPONENT_REGEX = /%COMP%/g;
/** @type {?} */
const NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;
/** @type {?} */
const COMPONENT_VARIABLE = '%COMP%';
/** @type {?} */
const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
/** @type {?} */
const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimContentAttribute(componentShortId) {
    return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} componentShortId
 * @return {?}
 */
function shimHostAttribute(componentShortId) {
    return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
/**
 * @param {?} compId
 * @param {?} styles
 * @param {?} target
 * @return {?}
 */
function flattenStyles(compId, styles, target) {
    for (let i = 0; i < styles.length; i++) {
        /** @type {?} */
        let style = styles[i];
        if (Array.isArray(style)) {
            flattenStyles(compId, style, target);
        }
        else {
            style = style.replace(COMPONENT_REGEX, compId);
            target.push(style);
        }
    }
    return target;
}
/**
 * @param {?} eventHandler
 * @return {?}
 */
function decoratePreventDefault(eventHandler) {
    // `DebugNode.triggerEventHandler` needs to know if the listener was created with
    // decoratePreventDefault or is a listener added outside the Angular context so it can handle the
    // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap
    // the listener (see below).
    return (/**
     * @param {?} event
     * @return {?}
     */
    (event) => {
        // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function
        // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node
        // can inspect the listener toString contents for the existence of this special token. Because
        // the token is a string literal, it is ensured to not be modified by compiled code.
        if (event === '__ngUnwrap__') {
            return eventHandler;
        }
        /** @type {?} */
        const allowDefaultBehavior = eventHandler(event);
        if (allowDefaultBehavior === false) {
            // TODO(tbosch): move preventDefault into event plugins...
            event.preventDefault();
            event.returnValue = false;
        }
        return undefined;
    });
}
class DomRendererFactory2 {
    /**
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     * @param {?} appId
     */
    constructor(eventManager, sharedStylesHost, appId) {
        this.eventManager = eventManager;
        this.sharedStylesHost = sharedStylesHost;
        this.appId = appId;
        this.rendererByCompId = new Map();
        this.defaultRenderer = new DefaultDomRenderer2(eventManager);
    }
    /**
     * @param {?} element
     * @param {?} type
     * @return {?}
     */
    createRenderer(element, type) {
        if (!element || !type) {
            return this.defaultRenderer;
        }
        switch (type.encapsulation) {
            case _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].Emulated: {
                /** @type {?} */
                let renderer = this.rendererByCompId.get(type.id);
                if (!renderer) {
                    renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);
                    this.rendererByCompId.set(type.id, renderer);
                }
                ((/** @type {?} */ (renderer))).applyToHost(element);
                return renderer;
            }
            case _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].Native:
            case _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].ShadowDom:
                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
            default: {
                if (!this.rendererByCompId.has(type.id)) {
                    /** @type {?} */
                    const styles = flattenStyles(type.id, type.styles, []);
                    this.sharedStylesHost.addStyles(styles);
                    this.rendererByCompId.set(type.id, this.defaultRenderer);
                }
                return this.defaultRenderer;
            }
        }
    }
    /**
     * @return {?}
     */
    begin() { }
    /**
     * @return {?}
     */
    end() { }
}
DomRendererFactory2.ɵfac = function DomRendererFactory2_Factory(t) { return new (t || DomRendererFactory2)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](EventManager), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](DomSharedStylesHost), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"])); };
DomRendererFactory2.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: DomRendererFactory2, factory: DomRendererFactory2.ɵfac });
/** @nocollapse */
DomRendererFactory2.ctorParameters = () => [
    { type: EventManager },
    { type: DomSharedStylesHost },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomRendererFactory2, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: EventManager }, { type: DomSharedStylesHost }, { type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]]
            }] }]; }, null); })();
if (false) {}
class DefaultDomRenderer2 {
    /**
     * @param {?} eventManager
     */
    constructor(eventManager) {
        this.eventManager = eventManager;
        this.data = Object.create(null);
    }
    /**
     * @return {?}
     */
    destroy() { }
    /**
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    createElement(name, namespace) {
        if (namespace) {
            // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key
            // will result in undefined, so we just return the namespace here.
            return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
        }
        return document.createElement(name);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    createComment(value) { return document.createComment(value); }
    /**
     * @param {?} value
     * @return {?}
     */
    createText(value) { return document.createTextNode(value); }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    appendChild(parent, newChild) { parent.appendChild(newChild); }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    insertBefore(parent, newChild, refChild) {
        if (parent) {
            parent.insertBefore(newChild, refChild);
        }
    }
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    removeChild(parent, oldChild) {
        if (parent) {
            parent.removeChild(oldChild);
        }
    }
    /**
     * @param {?} selectorOrNode
     * @param {?=} preserveContent
     * @return {?}
     */
    selectRootElement(selectorOrNode, preserveContent) {
        /** @type {?} */
        let el = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :
            selectorOrNode;
        if (!el) {
            throw new Error(`The selector "${selectorOrNode}" did not match any elements`);
        }
        if (!preserveContent) {
            el.textContent = '';
        }
        return el;
    }
    /**
     * @param {?} node
     * @return {?}
     */
    parentNode(node) { return node.parentNode; }
    /**
     * @param {?} node
     * @return {?}
     */
    nextSibling(node) { return node.nextSibling; }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @param {?=} namespace
     * @return {?}
     */
    setAttribute(el, name, value, namespace) {
        if (namespace) {
            name = namespace + ':' + name;
            // TODO(FW-811): Ivy may cause issues here because it's passing around
            // full URIs for namespaces, therefore this lookup will fail.
            /** @type {?} */
            const namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
                el.setAttributeNS(namespaceUri, name, value);
            }
            else {
                el.setAttribute(name, value);
            }
        }
        else {
            el.setAttribute(name, value);
        }
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?=} namespace
     * @return {?}
     */
    removeAttribute(el, name, namespace) {
        if (namespace) {
            // TODO(FW-811): Ivy may cause issues here because it's passing around
            // full URIs for namespaces, therefore this lookup will fail.
            /** @type {?} */
            const namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
                el.removeAttributeNS(namespaceUri, name);
            }
            else {
                // TODO(FW-811): Since ivy is passing around full URIs for namespaces
                // this could result in properties like `http://www.w3.org/2000/svg:cx="123"`,
                // which is wrong.
                el.removeAttribute(`${namespace}:${name}`);
            }
        }
        else {
            el.removeAttribute(name);
        }
    }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    addClass(el, name) { el.classList.add(name); }
    /**
     * @param {?} el
     * @param {?} name
     * @return {?}
     */
    removeClass(el, name) { el.classList.remove(name); }
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} value
     * @param {?} flags
     * @return {?}
     */
    setStyle(el, style, value, flags) {
        if (flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].DashCase) {
            el.style.setProperty(style, value, !!(flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].Important) ? 'important' : '');
        }
        else {
            el.style[style] = value;
        }
    }
    /**
     * @param {?} el
     * @param {?} style
     * @param {?} flags
     * @return {?}
     */
    removeStyle(el, style, flags) {
        if (flags & _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererStyleFlags2"].DashCase) {
            el.style.removeProperty(style);
        }
        else {
            // IE requires '' instead of null
            // see https://github.com/angular/angular/issues/7916
            el.style[style] = '';
        }
    }
    /**
     * @param {?} el
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    setProperty(el, name, value) {
        NG_DEV_MODE && checkNoSyntheticProp(name, 'property');
        el[name] = value;
    }
    /**
     * @param {?} node
     * @param {?} value
     * @return {?}
     */
    setValue(node, value) { node.nodeValue = value; }
    /**
     * @param {?} target
     * @param {?} event
     * @param {?} callback
     * @return {?}
     */
    listen(target, event, callback) {
        NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');
        if (typeof target === 'string') {
            return (/** @type {?} */ (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback))));
        }
        return (/** @type {?} */ ((/** @type {?} */ (this.eventManager.addEventListener(target, event, decoratePreventDefault(callback))))));
    }
}
if (false) {}
const ɵ0$2 = /**
 * @return {?}
 */
() => '@'.charCodeAt(0);
/** @type {?} */
const AT_CHARCODE = ((ɵ0$2))();
/**
 * @param {?} name
 * @param {?} nameKind
 * @return {?}
 */
function checkNoSyntheticProp(name, nameKind) {
    if (name.charCodeAt(0) === AT_CHARCODE) {
        throw new Error(`Found the synthetic ${nameKind} ${name}. Please include either "BrowserAnimationsModule" or "NoopAnimationsModule" in your application.`);
    }
}
class EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {
    /**
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     * @param {?} component
     * @param {?} appId
     */
    constructor(eventManager, sharedStylesHost, component, appId) {
        super(eventManager);
        this.component = component;
        /** @type {?} */
        const styles = flattenStyles(appId + '-' + component.id, component.styles, []);
        sharedStylesHost.addStyles(styles);
        this.contentAttr = shimContentAttribute(appId + '-' + component.id);
        this.hostAttr = shimHostAttribute(appId + '-' + component.id);
    }
    /**
     * @param {?} element
     * @return {?}
     */
    applyToHost(element) { super.setAttribute(element, this.hostAttr, ''); }
    /**
     * @param {?} parent
     * @param {?} name
     * @return {?}
     */
    createElement(parent, name) {
        /** @type {?} */
        const el = super.createElement(parent, name);
        super.setAttribute(el, this.contentAttr, '');
        return el;
    }
}
if (false) {}
class ShadowDomRenderer extends DefaultDomRenderer2 {
    /**
     * @param {?} eventManager
     * @param {?} sharedStylesHost
     * @param {?} hostEl
     * @param {?} component
     */
    constructor(eventManager, sharedStylesHost, hostEl, component) {
        super(eventManager);
        this.sharedStylesHost = sharedStylesHost;
        this.hostEl = hostEl;
        this.component = component;
        if (component.encapsulation === _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].ShadowDom) {
            this.shadowRoot = ((/** @type {?} */ (hostEl))).attachShadow({ mode: 'open' });
        }
        else {
            this.shadowRoot = ((/** @type {?} */ (hostEl))).createShadowRoot();
        }
        this.sharedStylesHost.addHost(this.shadowRoot);
        /** @type {?} */
        const styles = flattenStyles(component.id, component.styles, []);
        for (let i = 0; i < styles.length; i++) {
            /** @type {?} */
            const styleEl = document.createElement('style');
            styleEl.textContent = styles[i];
            this.shadowRoot.appendChild(styleEl);
        }
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    nodeOrShadowRoot(node) { return node === this.hostEl ? this.shadowRoot : node; }
    /**
     * @return {?}
     */
    destroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @return {?}
     */
    appendChild(parent, newChild) {
        return super.appendChild(this.nodeOrShadowRoot(parent), newChild);
    }
    /**
     * @param {?} parent
     * @param {?} newChild
     * @param {?} refChild
     * @return {?}
     */
    insertBefore(parent, newChild, refChild) {
        return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);
    }
    /**
     * @param {?} parent
     * @param {?} oldChild
     * @return {?}
     */
    removeChild(parent, oldChild) {
        return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);
    }
    /**
     * @param {?} node
     * @return {?}
     */
    parentNode(node) {
        return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/dom/events/dom_events.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DomEventsPlugin extends EventManagerPlugin {
    /**
     * @param {?} doc
     */
    constructor(doc) {
        super(doc);
    }
    // This plugin should come last in the list of plugins, because it accepts all
    // events.
    /**
     * @param {?} eventName
     * @return {?}
     */
    supports(eventName) { return true; }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    addEventListener(element, eventName, handler) {
        element.addEventListener(eventName, (/** @type {?} */ (handler)), false);
        return (/**
         * @return {?}
         */
        () => this.removeEventListener(element, eventName, (/** @type {?} */ (handler))));
    }
    /**
     * @param {?} target
     * @param {?} eventName
     * @param {?} callback
     * @return {?}
     */
    removeEventListener(target, eventName, callback) {
        return target.removeEventListener(eventName, (/** @type {?} */ (callback)));
    }
}
DomEventsPlugin.ɵfac = function DomEventsPlugin_Factory(t) { return new (t || DomEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); };
DomEventsPlugin.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: DomEventsPlugin, factory: DomEventsPlugin.ɵfac });
/** @nocollapse */
DomEventsPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomEventsPlugin, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/dom/events/hammer_gestures.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Supported HammerJS recognizer event names.
 * @type {?}
 */
const EVENT_NAMES = {
    // pan
    'pan': true,
    'panstart': true,
    'panmove': true,
    'panend': true,
    'pancancel': true,
    'panleft': true,
    'panright': true,
    'panup': true,
    'pandown': true,
    // pinch
    'pinch': true,
    'pinchstart': true,
    'pinchmove': true,
    'pinchend': true,
    'pinchcancel': true,
    'pinchin': true,
    'pinchout': true,
    // press
    'press': true,
    'pressup': true,
    // rotate
    'rotate': true,
    'rotatestart': true,
    'rotatemove': true,
    'rotateend': true,
    'rotatecancel': true,
    // swipe
    'swipe': true,
    'swipeleft': true,
    'swiperight': true,
    'swipeup': true,
    'swipedown': true,
    // tap
    'tap': true,
};
/**
 * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.
 * @see `HammerGestureConfig`
 *
 * \@ngModule HammerModule
 * \@publicApi
 * @type {?}
 */
const HAMMER_GESTURE_CONFIG = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('HammerGestureConfig');
/**
 * Injection token used to provide a {\@link HammerLoader} to Angular.
 *
 * \@publicApi
 * @type {?}
 */
const HAMMER_LOADER = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('HammerLoader');
/**
 * @record
 */
function HammerInstance() { }
if (false) {}
/**
 * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)
 * for gesture recognition. Configures specific event recognition.
 * \@publicApi
 */
class HammerGestureConfig {
    constructor() {
        /**
         * A set of supported event names for gestures to be used in Angular.
         * Angular supports all built-in recognizers, as listed in
         * [HammerJS documentation](http://hammerjs.github.io/).
         */
        this.events = [];
        /**
         * Maps gesture event names to a set of configuration options
         * that specify overrides to the default values for specific properties.
         *
         * The key is a supported event name to be configured,
         * and the options object contains a set of properties, with override values
         * to be applied to the named recognizer event.
         * For example, to disable recognition of the rotate event, specify
         *  `{"rotate": {"enable": false}}`.
         *
         * Properties that are not present take the HammerJS default values.
         * For information about which properties are supported for which events,
         * and their allowed and default values, see
         * [HammerJS documentation](http://hammerjs.github.io/).
         *
         */
        this.overrides = {};
    }
    /**
     * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)
     * and attaches it to a given HTML element.
     * @param {?} element The element that will recognize gestures.
     * @return {?} A HammerJS event-manager object.
     */
    buildHammer(element) {
        /** @type {?} */
        const mc = new (/** @type {?} */ (Hammer))(element, this.options);
        mc.get('pinch').set({ enable: true });
        mc.get('rotate').set({ enable: true });
        for (const eventName in this.overrides) {
            mc.get(eventName).set(this.overrides[eventName]);
        }
        return mc;
    }
}
HammerGestureConfig.ɵfac = function HammerGestureConfig_Factory(t) { return new (t || HammerGestureConfig)(); };
HammerGestureConfig.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: HammerGestureConfig, factory: HammerGestureConfig.ɵfac });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HammerGestureConfig, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return []; }, null); })();
if (false) {}
/**
 * Event plugin that adds Hammer support to an application.
 *
 * \@ngModule HammerModule
 */
class HammerGesturesPlugin extends EventManagerPlugin {
    /**
     * @param {?} doc
     * @param {?} _config
     * @param {?} console
     * @param {?=} loader
     */
    constructor(doc, _config, console, loader) {
        super(doc);
        this._config = _config;
        this.console = console;
        this.loader = loader;
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    supports(eventName) {
        if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
            return false;
        }
        if (!((/** @type {?} */ (window))).Hammer && !this.loader) {
            this.console.warn(`The "${eventName}" event cannot be bound because Hammer.JS is not ` +
                `loaded and no custom loader has been specified.`);
            return false;
        }
        return true;
    }
    /**
     * @param {?} element
     * @param {?} eventName
     * @param {?} handler
     * @return {?}
     */
    addEventListener(element, eventName, handler) {
        /** @type {?} */
        const zone = this.manager.getZone();
        eventName = eventName.toLowerCase();
        // If Hammer is not present but a loader is specified, we defer adding the event listener
        // until Hammer is loaded.
        if (!((/** @type {?} */ (window))).Hammer && this.loader) {
            // This `addEventListener` method returns a function to remove the added listener.
            // Until Hammer is loaded, the returned function needs to *cancel* the registration rather
            // than remove anything.
            /** @type {?} */
            let cancelRegistration = false;
            /** @type {?} */
            let deregister = (/**
             * @return {?}
             */
            () => { cancelRegistration = true; });
            this.loader()
                .then((/**
             * @return {?}
             */
            () => {
                // If Hammer isn't actually loaded when the custom loader resolves, give up.
                if (!((/** @type {?} */ (window))).Hammer) {
                    this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);
                    deregister = (/**
                     * @return {?}
                     */
                    () => { });
                    return;
                }
                if (!cancelRegistration) {
                    // Now that Hammer is loaded and the listener is being loaded for real,
                    // the deregistration function changes from canceling registration to removal.
                    deregister = this.addEventListener(element, eventName, handler);
                }
            }))
                .catch((/**
             * @return {?}
             */
            () => {
                this.console.warn(`The "${eventName}" event cannot be bound because the custom ` +
                    `Hammer.JS loader failed.`);
                deregister = (/**
                 * @return {?}
                 */
                () => { });
            }));
            // Return a function that *executes* `deregister` (and not `deregister` itself) so that we
            // can change the behavior of `deregister` once the listener is added. Using a closure in
            // this way allows us to avoid any additional data structures to track listener removal.
            return (/**
             * @return {?}
             */
            () => { deregister(); });
        }
        return zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            // Creating the manager bind events, must be done outside of angular
            /** @type {?} */
            const mc = this._config.buildHammer(element);
            /** @type {?} */
            const callback = (/**
             * @param {?} eventObj
             * @return {?}
             */
            function (eventObj) {
                zone.runGuarded((/**
                 * @return {?}
                 */
                function () { handler(eventObj); }));
            });
            mc.on(eventName, callback);
            return (/**
             * @return {?}
             */
            () => {
                mc.off(eventName, callback);
                // destroy mc to prevent memory leak
                if (typeof mc.destroy === 'function') {
                    mc.destroy();
                }
            });
        }));
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    isCustomEvent(eventName) { return this._config.events.indexOf(eventName) > -1; }
}
HammerGesturesPlugin.ɵfac = function HammerGesturesPlugin_Factory(t) { return new (t || HammerGesturesPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](HAMMER_GESTURE_CONFIG), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](HAMMER_LOADER, 8)); };
HammerGesturesPlugin.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: HammerGesturesPlugin, factory: HammerGesturesPlugin.ɵfac });
/** @nocollapse */
HammerGesturesPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] },
    { type: HammerGestureConfig, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [HAMMER_GESTURE_CONFIG,] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"] },
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [HAMMER_LOADER,] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HammerGesturesPlugin, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }] }, { type: HammerGestureConfig, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [HAMMER_GESTURE_CONFIG]
            }] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"] }, { type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [HAMMER_LOADER]
            }] }]; }, null); })();
if (false) {}
/**
 * In Ivy, support for Hammer gestures is optional, so applications must
 * import the `HammerModule` at root to turn on support. This means that
 * Hammer-specific code can be tree-shaken away if not needed.
 * @type {?}
 */
const HAMMER_PROVIDERS__POST_R3__ = [];
/**
 * In View Engine, support for Hammer gestures is built-in by default.
 * @type {?}
 */
const HAMMER_PROVIDERS__PRE_R3__ = [
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: true,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], HAMMER_GESTURE_CONFIG, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"], [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), HAMMER_LOADER]]
    },
    { provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: [] },
];
/** @type {?} */
const HAMMER_PROVIDERS = HAMMER_PROVIDERS__POST_R3__;
/**
 * Adds support for HammerJS.
 *
 * Import this module at the root of your application so that Angular can work with
 * HammerJS to detect gesture events.
 *
 * Note that applications still need to include the HammerJS script itself. This module
 * simply sets up the coordination layer between HammerJS and Angular's EventManager.
 *
 * \@publicApi
 */
class HammerModule {
}
HammerModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({ type: HammerModule });
HammerModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({ factory: function HammerModule_Factory(t) { return new (t || HammerModule)(); }, providers: HAMMER_PROVIDERS__PRE_R3__ });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](HammerModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{ providers: HAMMER_PROVIDERS__PRE_R3__ }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/dom/events/key_events.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Defines supported modifiers for key events.
 * @type {?}
 */
const MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];
/** @type {?} */
const DOM_KEY_LOCATION_NUMPAD = 3;
// Map to convert some key or keyIdentifier values to what will be returned by getEventKey
/** @type {?} */
const _keyMap = {
    // The following values are here for cross-browser compatibility and to match the W3C standard
    // cf http://www.w3.org/TR/DOM-Level-3-Events-key/
    '\b': 'Backspace',
    '\t': 'Tab',
    '\x7F': 'Delete',
    '\x1B': 'Escape',
    'Del': 'Delete',
    'Esc': 'Escape',
    'Left': 'ArrowLeft',
    'Right': 'ArrowRight',
    'Up': 'ArrowUp',
    'Down': 'ArrowDown',
    'Menu': 'ContextMenu',
    'Scroll': 'ScrollLock',
    'Win': 'OS'
};
// There is a bug in Chrome for numeric keypad keys:
// https://code.google.com/p/chromium/issues/detail?id=155654
// 1, 2, 3 ... are reported as A, B, C ...
/** @type {?} */
const _chromeNumKeyPadMap = {
    'A': '1',
    'B': '2',
    'C': '3',
    'D': '4',
    'E': '5',
    'F': '6',
    'G': '7',
    'H': '8',
    'I': '9',
    'J': '*',
    'K': '+',
    'M': '-',
    'N': '.',
    'O': '/',
    '\x60': '0',
    '\x90': 'NumLock'
};
const ɵ0$3 = /**
 * @param {?} event
 * @return {?}
 */
(event) => event.altKey, ɵ1 = /**
 * @param {?} event
 * @return {?}
 */
(event) => event.ctrlKey, ɵ2 = /**
 * @param {?} event
 * @return {?}
 */
(event) => event.metaKey, ɵ3 = /**
 * @param {?} event
 * @return {?}
 */
(event) => event.shiftKey;
/**
 * Retrieves modifiers from key-event objects.
 * @type {?}
 */
const MODIFIER_KEY_GETTERS = {
    'alt': (ɵ0$3),
    'control': (ɵ1),
    'meta': (ɵ2),
    'shift': (ɵ3)
};
/**
 * \@publicApi
 * A browser plug-in that provides support for handling of key events in Angular.
 */
class KeyEventsPlugin extends EventManagerPlugin {
    /**
     * Initializes an instance of the browser plug-in.
     * @param {?} doc The document in which key events will be detected.
     */
    constructor(doc) {
        super(doc);
    }
    /**
     * Reports whether a named key event is supported.
     * @param {?} eventName The event name to query.
     * @return {?} True if the named key event is supported.
     */
    supports(eventName) { return KeyEventsPlugin.parseEventName(eventName) != null; }
    /**
     * Registers a handler for a specific element and key event.
     * @param {?} element The HTML element to receive event notifications.
     * @param {?} eventName The name of the key event to listen for.
     * @param {?} handler A function to call when the notification occurs. Receives the
     * event object as an argument.
     * @return {?} The key event that was registered.
     */
    addEventListener(element, eventName, handler) {
        /** @type {?} */
        const parsedEvent = (/** @type {?} */ (KeyEventsPlugin.parseEventName(eventName)));
        /** @type {?} */
        const outsideHandler = KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());
        return this.manager.getZone().runOutsideAngular((/**
         * @return {?}
         */
        () => {
            return Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);
        }));
    }
    /**
     * @param {?} eventName
     * @return {?}
     */
    static parseEventName(eventName) {
        /** @type {?} */
        const parts = eventName.toLowerCase().split('.');
        /** @type {?} */
        const domEventName = parts.shift();
        if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {
            return null;
        }
        /** @type {?} */
        const key = KeyEventsPlugin._normalizeKey((/** @type {?} */ (parts.pop())));
        /** @type {?} */
        let fullKey = '';
        MODIFIER_KEYS.forEach((/**
         * @param {?} modifierName
         * @return {?}
         */
        modifierName => {
            /** @type {?} */
            const index = parts.indexOf(modifierName);
            if (index > -1) {
                parts.splice(index, 1);
                fullKey += modifierName + '.';
            }
        }));
        fullKey += key;
        if (parts.length != 0 || key.length === 0) {
            // returning null instead of throwing to let another plugin process the event
            return null;
        }
        /** @type {?} */
        const result = {};
        result['domEventName'] = domEventName;
        result['fullKey'] = fullKey;
        return result;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    static getEventFullKey(event) {
        /** @type {?} */
        let fullKey = '';
        /** @type {?} */
        let key = getEventKey(event);
        key = key.toLowerCase();
        if (key === ' ') {
            key = 'space'; // for readability
        }
        else if (key === '.') {
            key = 'dot'; // because '.' is used as a separator in event names
        }
        MODIFIER_KEYS.forEach((/**
         * @param {?} modifierName
         * @return {?}
         */
        modifierName => {
            if (modifierName != key) {
                /** @type {?} */
                const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
                if (modifierGetter(event)) {
                    fullKey += modifierName + '.';
                }
            }
        }));
        fullKey += key;
        return fullKey;
    }
    /**
     * Configures a handler callback for a key event.
     * @param {?} fullKey The event name that combines all simultaneous keystrokes.
     * @param {?} handler The function that responds to the key event.
     * @param {?} zone The zone in which the event occurred.
     * @return {?} A callback function.
     */
    static eventCallback(fullKey, handler, zone) {
        return (/**
         * @param {?} event
         * @return {?}
         */
        (event /** TODO #9100 */) => {
            if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {
                zone.runGuarded((/**
                 * @return {?}
                 */
                () => handler(event)));
            }
        });
    }
    /**
     * \@internal
     * @param {?} keyName
     * @return {?}
     */
    static _normalizeKey(keyName) {
        // TODO: switch to a Map if the mapping grows too much
        switch (keyName) {
            case 'esc':
                return 'escape';
            default:
                return keyName;
        }
    }
}
KeyEventsPlugin.ɵfac = function KeyEventsPlugin_Factory(t) { return new (t || KeyEventsPlugin)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); };
KeyEventsPlugin.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: KeyEventsPlugin, factory: KeyEventsPlugin.ɵfac });
/** @nocollapse */
KeyEventsPlugin.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](KeyEventsPlugin, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }] }]; }, null); })();
/**
 * @param {?} event
 * @return {?}
 */
function getEventKey(event) {
    /** @type {?} */
    let key = event.key;
    if (key == null) {
        key = event.keyIdentifier;
        // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and
        // Safari cf
        // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces
        if (key == null) {
            return 'Unidentified';
        }
        if (key.startsWith('U+')) {
            key = String.fromCharCode(parseInt(key.substring(2), 16));
            if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {
                // There is a bug in Chrome for numeric keypad keys:
                // https://code.google.com/p/chromium/issues/detail?id=155654
                // 1, 2, 3 ... are reported as A, B, C ...
                key = ((/** @type {?} */ (_chromeNumKeyPadMap)))[key];
            }
        }
    }
    return _keyMap[key] || key;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/security/dom_sanitization_service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Marker interface for a value that's safe to use in a particular context.
 *
 * \@publicApi
 * @record
 */
function SafeValue() { }
/**
 * Marker interface for a value that's safe to use as HTML.
 *
 * \@publicApi
 * @record
 */
function SafeHtml() { }
/**
 * Marker interface for a value that's safe to use as style (CSS).
 *
 * \@publicApi
 * @record
 */
function SafeStyle() { }
/**
 * Marker interface for a value that's safe to use as JavaScript.
 *
 * \@publicApi
 * @record
 */
function SafeScript() { }
/**
 * Marker interface for a value that's safe to use as a URL linking to a document.
 *
 * \@publicApi
 * @record
 */
function SafeUrl() { }
/**
 * Marker interface for a value that's safe to use as a URL to load executable code from.
 *
 * \@publicApi
 * @record
 */
function SafeResourceUrl() { }
/**
 * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing
 * values to be safe to use in the different DOM contexts.
 *
 * For example, when binding a URL in an `<a [href]="someValue">` hyperlink, `someValue` will be
 * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on
 * the website.
 *
 * In specific situations, it might be necessary to disable sanitization, for example if the
 * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.
 * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`
 * methods, and then binding to that value from the template.
 *
 * These situations should be very rare, and extraordinary care must be taken to avoid creating a
 * Cross Site Scripting (XSS) security bug!
 *
 * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as
 * close as possible to the source of the value, to make it easy to verify no security bug is
 * created by its use.
 *
 * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that
 * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous
 * code. The sanitizer leaves safe values intact.
 *
 * \@security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in
 * sanitization for the value passed in. Carefully check and audit all values and code paths going
 * into this call. Make sure any user data is appropriately escaped for this security context.
 * For more detail, see the [Security Guide](http://g.co/ng/security).
 *
 * \@publicApi
 * @abstract
 */
class DomSanitizer {
}
DomSanitizer.ɵfac = function DomSanitizer_Factory(t) { return new (t || DomSanitizer)(); };
/** @nocollapse */ DomSanitizer.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function DomSanitizer_Factory() { return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(DomSanitizerImpl); }, token: DomSanitizer, providedIn: "root" });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomSanitizer, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
        args: [{ providedIn: 'root', useExisting: Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["forwardRef"])(( /**
                             * @return {?}
                             */() => DomSanitizerImpl)) }]
    }], null, null); })();
if (false) {}
/**
 * @param {?} injector
 * @return {?}
 */
function domSanitizerImplFactory(injector) {
    return new DomSanitizerImpl(injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
}
class DomSanitizerImpl extends DomSanitizer {
    /**
     * @param {?} _doc
     */
    constructor(_doc) {
        super();
        this._doc = _doc;
    }
    /**
     * @param {?} ctx
     * @param {?} value
     * @return {?}
     */
    sanitize(ctx, value) {
        if (value == null)
            return null;
        switch (ctx) {
            case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].NONE:
                return (/** @type {?} */ (value));
            case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].HTML:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "HTML" /* Html */)) {
                    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }
                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeHtml"])(this._doc, String(value));
            case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].STYLE:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Style" /* Style */)) {
                    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }
                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeStyle"])((/** @type {?} */ (value)));
            case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].SCRIPT:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "Script" /* Script */)) {
                    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }
                throw new Error('unsafe value used in a script context');
            case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].URL:
                /** @type {?} */
                const type = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵgetSanitizationBypassType"])(value);
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "URL" /* Url */)) {
                    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }
                return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵ_sanitizeUrl"])(String(value));
            case _angular_core__WEBPACK_IMPORTED_MODULE_1__["SecurityContext"].RESOURCE_URL:
                if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵallowSanitizationBypassAndThrow"])(value, "ResourceURL" /* ResourceUrl */)) {
                    return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵunwrapSafeValue"])(value);
                }
                throw new Error('unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');
            default:
                throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    bypassSecurityTrustHtml(value) { return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustHtml"])(value); }
    /**
     * @param {?} value
     * @return {?}
     */
    bypassSecurityTrustStyle(value) { return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustStyle"])(value); }
    /**
     * @param {?} value
     * @return {?}
     */
    bypassSecurityTrustScript(value) {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustScript"])(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    bypassSecurityTrustUrl(value) { return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustUrl"])(value); }
    /**
     * @param {?} value
     * @return {?}
     */
    bypassSecurityTrustResourceUrl(value) {
        return Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵbypassSanitizationTrustResourceUrl"])(value);
    }
}
DomSanitizerImpl.ɵfac = function DomSanitizerImpl_Factory(t) { return new (t || DomSanitizerImpl)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); };
/** @nocollapse */
DomSanitizerImpl.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
];
/** @nocollapse */ DomSanitizerImpl.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function DomSanitizerImpl_Factory() { return domSanitizerImplFactory(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["INJECTOR"])); }, token: DomSanitizerImpl, providedIn: "root" });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](DomSanitizerImpl, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
        args: [{ providedIn: 'root', useFactory: domSanitizerImplFactory, deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]] }]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function initDomAdapter() {
    BrowserDomAdapter.makeCurrent();
    BrowserGetTestability.init();
}
/**
 * @return {?}
 */
function errorHandler() {
    return new _angular_core__WEBPACK_IMPORTED_MODULE_1__["ErrorHandler"]();
}
/**
 * @return {?}
 */
function _document() {
    // Tell ivy about the global document
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetDocument"])(document);
    return document;
}
const ɵ0$4 = _angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵPLATFORM_BROWSER_ID"];
/** @type {?} */
const INTERNAL_BROWSER_PLATFORM_PROVIDERS = [
    { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"], useValue: ɵ0$4 },
    { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_INITIALIZER"], useValue: initDomAdapter, multi: true },
    { provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], useFactory: _document, deps: [] },
];
/** @type {?} */
const BROWSER_SANITIZATION_PROVIDERS__PRE_R3__ = [
    { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Sanitizer"], useExisting: DomSanitizer },
    { provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]] },
];
/** @type {?} */
const BROWSER_SANITIZATION_PROVIDERS__POST_R3__ = [];
/**
 * \@security Replacing built-in sanitization providers exposes the application to XSS risks.
 * Attacker-controlled data introduced by an unsanitized provider could expose your
 * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).
 * \@publicApi
 * @type {?}
 */
const BROWSER_SANITIZATION_PROVIDERS = BROWSER_SANITIZATION_PROVIDERS__POST_R3__;
/**
 * \@publicApi
 * @type {?}
 */
const platformBrowser = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["createPlatformFactory"])(_angular_core__WEBPACK_IMPORTED_MODULE_1__["platformCore"], 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);
/** @type {?} */
const BROWSER_MODULE_PROVIDERS = [
    BROWSER_SANITIZATION_PROVIDERS,
    { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵINJECTOR_SCOPE"], useValue: 'root' },
    { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ErrorHandler"], useFactory: errorHandler, deps: [] },
    {
        provide: EVENT_MANAGER_PLUGINS,
        useClass: DomEventsPlugin,
        multi: true,
        deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]]
    },
    { provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]] },
    HAMMER_PROVIDERS,
    {
        provide: DomRendererFactory2,
        useClass: DomRendererFactory2,
        deps: [EventManager, DomSharedStylesHost, _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]]
    },
    { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["RendererFactory2"], useExisting: DomRendererFactory2 },
    { provide: SharedStylesHost, useExisting: DomSharedStylesHost },
    { provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]] },
    { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Testability"], useClass: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Testability"], deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]] },
    { provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]] },
    ELEMENT_PROBE_PROVIDERS,
];
/**
 * Exports required infrastructure for all Angular apps.
 * Included by default in all Angular apps created with the CLI
 * `new` command.
 * Re-exports `CommonModule` and `ApplicationModule`, making their
 * exports and providers available to all apps.
 *
 * \@publicApi
 */
class BrowserModule {
    /**
     * @param {?} parentModule
     */
    constructor(parentModule) {
        if (parentModule) {
            throw new Error(`BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);
        }
    }
    /**
     * Configures a browser-based app to transition from a server-rendered app, if
     * one is present on the page.
     *
     * @param {?} params An object containing an identifier for the app to transition.
     * The ID must match between the client and server versions of the app.
     * @return {?} The reconfigured `BrowserModule` to import into the app's root `AppModule`.
     */
    static withServerTransition(params) {
        return {
            ngModule: BrowserModule,
            providers: [
                { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"], useValue: params.appId },
                { provide: TRANSITION_ID, useExisting: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"] },
                SERVER_TRANSITION_PROVIDERS,
            ],
        };
    }
}
BrowserModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({ type: BrowserModule });
BrowserModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({ factory: function BrowserModule_Factory(t) { return new (t || BrowserModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](BrowserModule, 12)); }, providers: BROWSER_MODULE_PROVIDERS, imports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationModule"]] });
/** @nocollapse */
BrowserModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [BrowserModule,] }] }
];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](BrowserModule, { exports: function () { return [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationModule"]]; } }); })();
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](BrowserModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{ providers: BROWSER_MODULE_PROVIDERS, exports: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationModule"]] }]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"]
            }, {
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [BrowserModule]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/meta.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Factory to create Meta service.
 * @return {?}
 */
function createMeta() {
    return new Meta(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
}
/**
 * A service that can be used to get and add meta tags.
 *
 * \@publicApi
 */
class Meta {
    /**
     * @param {?} _doc
     */
    constructor(_doc) {
        this._doc = _doc;
        this._dom = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
    }
    /**
     * @param {?} tag
     * @param {?=} forceCreation
     * @return {?}
     */
    addTag(tag, forceCreation = false) {
        if (!tag)
            return null;
        return this._getOrCreateElement(tag, forceCreation);
    }
    /**
     * @param {?} tags
     * @param {?=} forceCreation
     * @return {?}
     */
    addTags(tags, forceCreation = false) {
        if (!tags)
            return [];
        return tags.reduce((/**
         * @param {?} result
         * @param {?} tag
         * @return {?}
         */
        (result, tag) => {
            if (tag) {
                result.push(this._getOrCreateElement(tag, forceCreation));
            }
            return result;
        }), []);
    }
    /**
     * @param {?} attrSelector
     * @return {?}
     */
    getTag(attrSelector) {
        if (!attrSelector)
            return null;
        return this._doc.querySelector(`meta[${attrSelector}]`) || null;
    }
    /**
     * @param {?} attrSelector
     * @return {?}
     */
    getTags(attrSelector) {
        if (!attrSelector)
            return [];
        /** @type {?} */
        const list /*NodeList*/ = this._doc.querySelectorAll(`meta[${attrSelector}]`);
        return list ? [].slice.call(list) : [];
    }
    /**
     * @param {?} tag
     * @param {?=} selector
     * @return {?}
     */
    updateTag(tag, selector) {
        if (!tag)
            return null;
        selector = selector || this._parseSelector(tag);
        /** @type {?} */
        const meta = (/** @type {?} */ (this.getTag(selector)));
        if (meta) {
            return this._setMetaElementAttributes(tag, meta);
        }
        return this._getOrCreateElement(tag, true);
    }
    /**
     * @param {?} attrSelector
     * @return {?}
     */
    removeTag(attrSelector) { this.removeTagElement((/** @type {?} */ (this.getTag(attrSelector)))); }
    /**
     * @param {?} meta
     * @return {?}
     */
    removeTagElement(meta) {
        if (meta) {
            this._dom.remove(meta);
        }
    }
    /**
     * @private
     * @param {?} meta
     * @param {?=} forceCreation
     * @return {?}
     */
    _getOrCreateElement(meta, forceCreation = false) {
        if (!forceCreation) {
            /** @type {?} */
            const selector = this._parseSelector(meta);
            /** @type {?} */
            const elem = (/** @type {?} */ (this.getTag(selector)));
            // It's allowed to have multiple elements with the same name so it's not enough to
            // just check that element with the same name already present on the page. We also need to
            // check if element has tag attributes
            if (elem && this._containsAttributes(meta, elem))
                return elem;
        }
        /** @type {?} */
        const element = (/** @type {?} */ (this._dom.createElement('meta')));
        this._setMetaElementAttributes(meta, element);
        /** @type {?} */
        const head = this._doc.getElementsByTagName('head')[0];
        head.appendChild(element);
        return element;
    }
    /**
     * @private
     * @param {?} tag
     * @param {?} el
     * @return {?}
     */
    _setMetaElementAttributes(tag, el) {
        Object.keys(tag).forEach((/**
         * @param {?} prop
         * @return {?}
         */
        (prop) => el.setAttribute(prop, tag[prop])));
        return el;
    }
    /**
     * @private
     * @param {?} tag
     * @return {?}
     */
    _parseSelector(tag) {
        /** @type {?} */
        const attr = tag.name ? 'name' : 'property';
        return `${attr}="${tag[attr]}"`;
    }
    /**
     * @private
     * @param {?} tag
     * @param {?} elem
     * @return {?}
     */
    _containsAttributes(tag, elem) {
        return Object.keys(tag).every((/**
         * @param {?} key
         * @return {?}
         */
        (key) => elem.getAttribute(key) === tag[key]));
    }
}
Meta.ɵfac = function Meta_Factory(t) { return new (t || Meta)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); };
/** @nocollapse */
Meta.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
];
/** @nocollapse */ Meta.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: createMeta, token: Meta, providedIn: "root" });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](Meta, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
        args: [{ providedIn: 'root', useFactory: createMeta, deps: [] }]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/title.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Factory to create Title service.
 * @return {?}
 */
function createTitle() {
    return new Title(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]));
}
/**
 * A service that can be used to get and set the title of a current HTML document.
 *
 * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)
 * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements
 * (representing the `<title>` tag). Instead, this service can be used to set and get the current
 * title value.
 *
 * \@publicApi
 */
class Title {
    /**
     * @param {?} _doc
     */
    constructor(_doc) {
        this._doc = _doc;
    }
    /**
     * Get the title of the current HTML document.
     * @return {?}
     */
    getTitle() { return this._doc.title; }
    /**
     * Set the title of the current HTML document.
     * @param {?} newTitle
     * @return {?}
     */
    setTitle(newTitle) { this._doc.title = newTitle || ''; }
}
Title.ɵfac = function Title_Factory(t) { return new (t || Title)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"])); };
/** @nocollapse */
Title.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"],] }] }
];
/** @nocollapse */ Title.ɵprov = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: createTitle, token: Title, providedIn: "root" });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](Title, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"],
        args: [{ providedIn: 'root', useFactory: createTitle, deps: [] }]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"]]
            }] }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/tools/browser.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/** @type {?} */
const win = typeof window !== 'undefined' && window || (/** @type {?} */ ({}));

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/tools/common_tools.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ChangeDetectionPerfRecord {
    /**
     * @param {?} msPerTick
     * @param {?} numTicks
     */
    constructor(msPerTick, numTicks) {
        this.msPerTick = msPerTick;
        this.numTicks = numTicks;
    }
}
if (false) {}
/**
 * Entry point for all Angular profiling-related debug tools. This object
 * corresponds to the `ng.profiler` in the dev console.
 */
class AngularProfiler {
    /**
     * @param {?} ref
     */
    constructor(ref) { this.appRef = ref.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]); }
    // tslint:disable:no-console
    /**
     * Exercises change detection in a loop and then prints the average amount of
     * time in milliseconds how long a single round of change detection takes for
     * the current state of the UI. It runs a minimum of 5 rounds for a minimum
     * of 500 milliseconds.
     *
     * Optionally, a user may pass a `config` parameter containing a map of
     * options. Supported options are:
     *
     * `record` (boolean) - causes the profiler to record a CPU profile while
     * it exercises the change detector. Example:
     *
     * ```
     * ng.profiler.timeChangeDetection({record: true})
     * ```
     * @param {?} config
     * @return {?}
     */
    timeChangeDetection(config) {
        /** @type {?} */
        const record = config && config['record'];
        /** @type {?} */
        const profileName = 'Change Detection';
        // Profiler is not available in Android browsers, nor in IE 9 without dev tools opened
        /** @type {?} */
        const isProfilerAvailable = win.console.profile != null;
        if (record && isProfilerAvailable) {
            win.console.profile(profileName);
        }
        /** @type {?} */
        const start = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().performanceNow();
        /** @type {?} */
        let numTicks = 0;
        while (numTicks < 5 || (Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().performanceNow() - start) < 500) {
            this.appRef.tick();
            numTicks++;
        }
        /** @type {?} */
        const end = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().performanceNow();
        if (record && isProfilerAvailable) {
            win.console.profileEnd(profileName);
        }
        /** @type {?} */
        const msPerTick = (end - start) / numTicks;
        win.console.log(`ran ${numTicks} change detection cycles`);
        win.console.log(`${msPerTick.toFixed(2)} ms per check`);
        return new ChangeDetectionPerfRecord(msPerTick, numTicks);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/tools/tools.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const PROFILER_GLOBAL_NAME = 'profiler';
/**
 * Enabled Angular debug tools that are accessible via your browser's
 * developer console.
 *
 * Usage:
 *
 * 1. Open developer console (e.g. in Chrome Ctrl + Shift + j)
 * 1. Type `ng.` (usually the console will show auto-complete suggestion)
 * 1. Try the change detection profiler `ng.profiler.timeChangeDetection()`
 *    then hit Enter.
 *
 * \@publicApi
 * @template T
 * @param {?} ref
 * @return {?}
 */
function enableDebugTools(ref) {
    exportNgVar(PROFILER_GLOBAL_NAME, new AngularProfiler(ref));
    return ref;
}
/**
 * Disables Angular tools.
 *
 * \@publicApi
 * @return {?}
 */
function disableDebugTools() {
    exportNgVar(PROFILER_GLOBAL_NAME, null);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/browser/transfer_state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} text
 * @return {?}
 */
function escapeHtml(text) {
    /** @type {?} */
    const escapedText = {
        '&': '&a;',
        '"': '&q;',
        '\'': '&s;',
        '<': '&l;',
        '>': '&g;',
    };
    return text.replace(/[&"'<>]/g, (/**
     * @param {?} s
     * @return {?}
     */
    s => escapedText[s]));
}
/**
 * @param {?} text
 * @return {?}
 */
function unescapeHtml(text) {
    /** @type {?} */
    const unescapedText = {
        '&a;': '&',
        '&q;': '"',
        '&s;': '\'',
        '&l;': '<',
        '&g;': '>',
    };
    return text.replace(/&[^;]+;/g, (/**
     * @param {?} s
     * @return {?}
     */
    s => unescapedText[s]));
}
/**
 * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.
 *
 * Example:
 *
 * ```
 * const COUNTER_KEY = makeStateKey<number>('counter');
 * let value = 10;
 *
 * transferState.set(COUNTER_KEY, value);
 * ```
 *
 * \@publicApi
 * @template T
 * @param {?} key
 * @return {?}
 */
function makeStateKey(key) {
    return (/** @type {?} */ (key));
}
/**
 * A key value store that is transferred from the application on the server side to the application
 * on the client side.
 *
 * `TransferState` will be available as an injectable token. To use it import
 * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.
 *
 * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only
 * boolean, number, string, null and non-class objects will be serialized and deserialzied in a
 * non-lossy manner.
 *
 * \@publicApi
 */
class TransferState {
    constructor() {
        this.store = {};
        this.onSerializeCallbacks = {};
    }
    /**
     * \@internal
     * @param {?} initState
     * @return {?}
     */
    static init(initState) {
        /** @type {?} */
        const transferState = new TransferState();
        transferState.store = initState;
        return transferState;
    }
    /**
     * Get the value corresponding to a key. Return `defaultValue` if key is not found.
     * @template T
     * @param {?} key
     * @param {?} defaultValue
     * @return {?}
     */
    get(key, defaultValue) {
        return this.store[key] !== undefined ? (/** @type {?} */ (this.store[key])) : defaultValue;
    }
    /**
     * Set the value corresponding to a key.
     * @template T
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    set(key, value) { this.store[key] = value; }
    /**
     * Remove a key from the store.
     * @template T
     * @param {?} key
     * @return {?}
     */
    remove(key) { delete this.store[key]; }
    /**
     * Test whether a key exists in the store.
     * @template T
     * @param {?} key
     * @return {?}
     */
    hasKey(key) { return this.store.hasOwnProperty(key); }
    /**
     * Register a callback to provide the value for a key when `toJson` is called.
     * @template T
     * @param {?} key
     * @param {?} callback
     * @return {?}
     */
    onSerialize(key, callback) {
        this.onSerializeCallbacks[key] = callback;
    }
    /**
     * Serialize the current state of the store to JSON.
     * @return {?}
     */
    toJson() {
        // Call the onSerialize callbacks and put those values into the store.
        for (const key in this.onSerializeCallbacks) {
            if (this.onSerializeCallbacks.hasOwnProperty(key)) {
                try {
                    this.store[key] = this.onSerializeCallbacks[key]();
                }
                catch (e) {
                    console.warn('Exception in onSerialize callback: ', e);
                }
            }
        }
        return JSON.stringify(this.store);
    }
}
TransferState.ɵfac = function TransferState_Factory(t) { return new (t || TransferState)(); };
TransferState.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: TransferState, factory: TransferState.ɵfac });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](TransferState, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return []; }, null); })();
if (false) {}
/**
 * @param {?} doc
 * @param {?} appId
 * @return {?}
 */
function initTransferState(doc, appId) {
    // Locate the script tag with the JSON data transferred from the server.
    // The id of the script tag is set to the Angular appId + 'state'.
    /** @type {?} */
    const script = doc.getElementById(appId + '-state');
    /** @type {?} */
    let initialState = {};
    if (script && script.textContent) {
        try {
            initialState = JSON.parse(unescapeHtml(script.textContent));
        }
        catch (e) {
            console.warn('Exception while restoring TransferState for app ' + appId, e);
        }
    }
    return TransferState.init(initialState);
}
/**
 * NgModule to install on the client side while using the `TransferState` to transfer state from
 * server to client.
 *
 * \@publicApi
 */
class BrowserTransferStateModule {
}
BrowserTransferStateModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({ type: BrowserTransferStateModule });
BrowserTransferStateModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({ factory: function BrowserTransferStateModule_Factory(t) { return new (t || BrowserTransferStateModule)(); }, providers: [{ provide: TransferState, useFactory: initTransferState, deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]] }] });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](BrowserTransferStateModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
                providers: [{ provide: TransferState, useFactory: initTransferState, deps: [_angular_common__WEBPACK_IMPORTED_MODULE_0__["DOCUMENT"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_ID"]] }]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/dom/debug/by.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Predicates for use with {\@link DebugElement}'s query functions.
 *
 * \@publicApi
 */
class By {
    /**
     * Match all nodes.
     *
     * \@usageNotes
     * ### Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}
     * @return {?}
     */
    static all() { return (/**
     * @return {?}
     */
    () => true); }
    /**
     * Match elements by the given CSS selector.
     *
     * \@usageNotes
     * ### Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}
     * @param {?} selector
     * @return {?}
     */
    static css(selector) {
        return (/**
         * @param {?} debugElement
         * @return {?}
         */
        (debugElement) => {
            return debugElement.nativeElement != null ?
                elementMatches(debugElement.nativeElement, selector) :
                false;
        });
    }
    /**
     * Match nodes that have the given directive present.
     *
     * \@usageNotes
     * ### Example
     *
     * {\@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}
     * @param {?} type
     * @return {?}
     */
    static directive(type) {
        return (/**
         * @param {?} debugNode
         * @return {?}
         */
        (debugNode) => (/** @type {?} */ (debugNode.providerTokens)).indexOf(type) !== -1);
    }
}
/**
 * @param {?} n
 * @param {?} selector
 * @return {?}
 */
function elementMatches(n, selector) {
    if (Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])().isElementNode(n)) {
        return n.matches && n.matches(selector) ||
            n.msMatchesSelector && n.msMatchesSelector(selector) ||
            n.webkitMatchesSelector && n.webkitMatchesSelector(selector);
    }
    return false;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/private_export.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/version.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@publicApi
 * @type {?}
 */
const VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Version"]('9.0.7');

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/src/platform-browser.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/platform-browser/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=platform-browser.js.map

/***/ }),

/***/ "./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@angular/router/__ivy_ngcc__/fesm2015/router.js ***!
  \**********************************************************************/
/*! exports provided: ActivatedRoute, ActivatedRouteSnapshot, ActivationEnd, ActivationStart, ChildActivationEnd, ChildActivationStart, ChildrenOutletContexts, DefaultUrlSerializer, GuardsCheckEnd, GuardsCheckStart, NavigationCancel, NavigationEnd, NavigationError, NavigationStart, NoPreloading, OutletContext, PRIMARY_OUTLET, PreloadAllModules, PreloadingStrategy, ROUTER_CONFIGURATION, ROUTER_INITIALIZER, ROUTES, ResolveEnd, ResolveStart, RouteConfigLoadEnd, RouteConfigLoadStart, RouteReuseStrategy, Router, RouterEvent, RouterLink, RouterLinkActive, RouterLinkWithHref, RouterModule, RouterOutlet, RouterPreloader, RouterState, RouterStateSnapshot, RoutesRecognized, Scroll, UrlHandlingStrategy, UrlSegment, UrlSegmentGroup, UrlSerializer, UrlTree, VERSION, convertToParamMap, provideRoutes, ɵEmptyOutletComponent, ɵROUTER_PROVIDERS, ɵangular_packages_router_router_a, ɵangular_packages_router_router_b, ɵangular_packages_router_router_c, ɵangular_packages_router_router_d, ɵangular_packages_router_router_e, ɵangular_packages_router_router_f, ɵangular_packages_router_router_g, ɵangular_packages_router_router_h, ɵangular_packages_router_router_i, ɵangular_packages_router_router_j, ɵangular_packages_router_router_k, ɵangular_packages_router_router_l, ɵangular_packages_router_router_m, ɵangular_packages_router_router_n, ɵangular_packages_router_router_o, ɵflatten */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivatedRoute", function() { return ActivatedRoute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivatedRouteSnapshot", function() { return ActivatedRouteSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivationEnd", function() { return ActivationEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ActivationStart", function() { return ActivationStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChildActivationEnd", function() { return ChildActivationEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChildActivationStart", function() { return ChildActivationStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ChildrenOutletContexts", function() { return ChildrenOutletContexts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DefaultUrlSerializer", function() { return DefaultUrlSerializer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GuardsCheckEnd", function() { return GuardsCheckEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GuardsCheckStart", function() { return GuardsCheckStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavigationCancel", function() { return NavigationCancel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavigationEnd", function() { return NavigationEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavigationError", function() { return NavigationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavigationStart", function() { return NavigationStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NoPreloading", function() { return NoPreloading; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OutletContext", function() { return OutletContext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRIMARY_OUTLET", function() { return PRIMARY_OUTLET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreloadAllModules", function() { return PreloadAllModules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreloadingStrategy", function() { return PreloadingStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROUTER_CONFIGURATION", function() { return ROUTER_CONFIGURATION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROUTER_INITIALIZER", function() { return ROUTER_INITIALIZER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ROUTES", function() { return ROUTES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResolveEnd", function() { return ResolveEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResolveStart", function() { return ResolveStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteConfigLoadEnd", function() { return RouteConfigLoadEnd; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteConfigLoadStart", function() { return RouteConfigLoadStart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouteReuseStrategy", function() { return RouteReuseStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Router", function() { return Router; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouterEvent", function() { return RouterEvent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouterLink", function() { return RouterLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouterLinkActive", function() { return RouterLinkActive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouterLinkWithHref", function() { return RouterLinkWithHref; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouterModule", function() { return RouterModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouterOutlet", function() { return RouterOutlet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouterPreloader", function() { return RouterPreloader; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouterState", function() { return RouterState; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RouterStateSnapshot", function() { return RouterStateSnapshot; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RoutesRecognized", function() { return RoutesRecognized; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Scroll", function() { return Scroll; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlHandlingStrategy", function() { return UrlHandlingStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlSegment", function() { return UrlSegment; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlSegmentGroup", function() { return UrlSegmentGroup; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlSerializer", function() { return UrlSerializer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UrlTree", function() { return UrlTree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VERSION", function() { return VERSION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "convertToParamMap", function() { return convertToParamMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "provideRoutes", function() { return provideRoutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵEmptyOutletComponent", function() { return ɵEmptyOutletComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵROUTER_PROVIDERS", function() { return ROUTER_PROVIDERS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_a", function() { return ROUTER_FORROOT_GUARD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_b", function() { return routerNgProbeToken; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_c", function() { return createRouterScroller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_d", function() { return provideLocationStrategy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_e", function() { return provideForRootGuard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_f", function() { return setupRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_g", function() { return rootRoute; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_h", function() { return RouterInitializer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_i", function() { return getAppInitializer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_j", function() { return getBootstrapListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_k", function() { return provideRouterInitializer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_l", function() { return ɵEmptyOutletComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_m", function() { return Tree; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_n", function() { return TreeNode; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_router_router_o", function() { return RouterScroller; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵflatten", function() { return flatten; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/**
 * @license Angular v9.0.7
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */






/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/events.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Base for events the router goes through, as opposed to events tied to a specific
 * route. Fired one time for any given navigation.
 *
 * \@usageNotes
 *
 * ```ts
 * class MyService {
 *   constructor(public router: Router, logger: Logger) {
 *     router.events.pipe(
 *       filter(e => e instanceof RouterEvent)
 *     ).subscribe(e => {
 *       logger.log(e.id, e.url);
 *     });
 *   }
 * }
 * ```
 *
 * @see `Event`
 * \@publicApi
 */


class RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     */
    constructor(id, url) {
        this.id = id;
        this.url = url;
    }
}
if (false) {}
/**
 * An event triggered when a navigation starts.
 *
 * \@publicApi
 */
class NavigationStart extends RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?=} navigationTrigger
     * @param {?=} restoredState
     */
    constructor(
    /** @docsNotRequired */
    id, 
    /** @docsNotRequired */
    url, 
    /** @docsNotRequired */
    navigationTrigger = 'imperative', 
    /** @docsNotRequired */
    restoredState = null) {
        super(id, url);
        this.navigationTrigger = navigationTrigger;
        this.restoredState = restoredState;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    toString() { return `NavigationStart(id: ${this.id}, url: '${this.url}')`; }
}
if (false) {}
/**
 * An event triggered when a navigation ends successfully.
 *
 * \@publicApi
 */
class NavigationEnd extends RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     */
    constructor(
    /** @docsNotRequired */
    id, 
    /** @docsNotRequired */
    url, urlAfterRedirects) {
        super(id, url);
        this.urlAfterRedirects = urlAfterRedirects;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    toString() {
        return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;
    }
}
if (false) {}
/**
 * An event triggered when a navigation is canceled, directly or indirectly.
 *
 * This can happen when a [route guard](guide/router#milestone-5-route-guards)
 * returns `false` or initiates a redirect by returning a `UrlTree`.
 *
 * \@publicApi
 */
class NavigationCancel extends RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} reason
     */
    constructor(
    /** @docsNotRequired */
    id, 
    /** @docsNotRequired */
    url, reason) {
        super(id, url);
        this.reason = reason;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    toString() { return `NavigationCancel(id: ${this.id}, url: '${this.url}')`; }
}
if (false) {}
/**
 * An event triggered when a navigation fails due to an unexpected error.
 *
 * \@publicApi
 */
class NavigationError extends RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} error
     */
    constructor(
    /** @docsNotRequired */
    id, 
    /** @docsNotRequired */
    url, error) {
        super(id, url);
        this.error = error;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    toString() {
        return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;
    }
}
if (false) {}
/**
 * An event triggered when routes are recognized.
 *
 * \@publicApi
 */
class RoutesRecognized extends RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */
    constructor(
    /** @docsNotRequired */
    id, 
    /** @docsNotRequired */
    url, urlAfterRedirects, state) {
        super(id, url);
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    toString() {
        return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
    }
}
if (false) {}
/**
 * An event triggered at the start of the Guard phase of routing.
 *
 * \@publicApi
 */
class GuardsCheckStart extends RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */
    constructor(
    /** @docsNotRequired */
    id, 
    /** @docsNotRequired */
    url, urlAfterRedirects, state) {
        super(id, url);
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
    }
    /**
     * @return {?}
     */
    toString() {
        return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
    }
}
if (false) {}
/**
 * An event triggered at the end of the Guard phase of routing.
 *
 * \@publicApi
 */
class GuardsCheckEnd extends RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     * @param {?} shouldActivate
     */
    constructor(
    /** @docsNotRequired */
    id, 
    /** @docsNotRequired */
    url, urlAfterRedirects, state, shouldActivate) {
        super(id, url);
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
        this.shouldActivate = shouldActivate;
    }
    /**
     * @return {?}
     */
    toString() {
        return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;
    }
}
if (false) {}
/**
 * An event triggered at the the start of the Resolve phase of routing.
 *
 * Runs in the "resolve" phase whether or not there is anything to resolve.
 * In future, may change to only run when there are things to be resolved.
 *
 * \@publicApi
 */
class ResolveStart extends RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */
    constructor(
    /** @docsNotRequired */
    id, 
    /** @docsNotRequired */
    url, urlAfterRedirects, state) {
        super(id, url);
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
    }
    /**
     * @return {?}
     */
    toString() {
        return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
    }
}
if (false) {}
/**
 * An event triggered at the end of the Resolve phase of routing.
 * @see `ResolveStart`.
 *
 * \@publicApi
 */
class ResolveEnd extends RouterEvent {
    /**
     * @param {?} id
     * @param {?} url
     * @param {?} urlAfterRedirects
     * @param {?} state
     */
    constructor(
    /** @docsNotRequired */
    id, 
    /** @docsNotRequired */
    url, urlAfterRedirects, state) {
        super(id, url);
        this.urlAfterRedirects = urlAfterRedirects;
        this.state = state;
    }
    /**
     * @return {?}
     */
    toString() {
        return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
    }
}
if (false) {}
/**
 * An event triggered before lazy loading a route configuration.
 *
 * \@publicApi
 */
class RouteConfigLoadStart {
    /**
     * @param {?} route
     */
    constructor(route) {
        this.route = route;
    }
    /**
     * @return {?}
     */
    toString() { return `RouteConfigLoadStart(path: ${this.route.path})`; }
}
if (false) {}
/**
 * An event triggered when a route has been lazy loaded.
 *
 * \@publicApi
 */
class RouteConfigLoadEnd {
    /**
     * @param {?} route
     */
    constructor(route) {
        this.route = route;
    }
    /**
     * @return {?}
     */
    toString() { return `RouteConfigLoadEnd(path: ${this.route.path})`; }
}
if (false) {}
/**
 * An event triggered at the start of the child-activation
 * part of the Resolve phase of routing.
 * @see `ChildActivationEnd`
 * @see `ResolveStart`
 *
 * \@publicApi
 */
class ChildActivationStart {
    /**
     * @param {?} snapshot
     */
    constructor(snapshot) {
        this.snapshot = snapshot;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
        return `ChildActivationStart(path: '${path}')`;
    }
}
if (false) {}
/**
 * An event triggered at the end of the child-activation part
 * of the Resolve phase of routing.
 * @see `ChildActivationStart`
 * @see `ResolveStart` *
 * \@publicApi
 */
class ChildActivationEnd {
    /**
     * @param {?} snapshot
     */
    constructor(snapshot) {
        this.snapshot = snapshot;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
        return `ChildActivationEnd(path: '${path}')`;
    }
}
if (false) {}
/**
 * An event triggered at the start of the activation part
 * of the Resolve phase of routing.
 * @see ActivationEnd`
 * @see `ResolveStart`
 *
 * \@publicApi
 */
class ActivationStart {
    /**
     * @param {?} snapshot
     */
    constructor(snapshot) {
        this.snapshot = snapshot;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
        return `ActivationStart(path: '${path}')`;
    }
}
if (false) {}
/**
 * An event triggered at the end of the activation part
 * of the Resolve phase of routing.
 * @see `ActivationStart`
 * @see `ResolveStart`
 *
 * \@publicApi
 */
class ActivationEnd {
    /**
     * @param {?} snapshot
     */
    constructor(snapshot) {
        this.snapshot = snapshot;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || '';
        return `ActivationEnd(path: '${path}')`;
    }
}
if (false) {}
/**
 * An event triggered by scrolling.
 *
 * \@publicApi
 */
class Scroll {
    /**
     * @param {?} routerEvent
     * @param {?} position
     * @param {?} anchor
     */
    constructor(routerEvent, position, anchor) {
        this.routerEvent = routerEvent;
        this.position = position;
        this.anchor = anchor;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;
        return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/components/empty_outlet.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * This component is used internally within the router to be a placeholder when an empty
 * router-outlet is needed. For example, with a config such as:
 *
 * `{path: 'parent', outlet: 'nav', children: [...]}`
 *
 * In order to render, there needs to be a component on this config, which will default
 * to this `EmptyOutletComponent`.
 */
class ɵEmptyOutletComponent {
}
ɵEmptyOutletComponent.ɵfac = function ɵEmptyOutletComponent_Factory(t) { return new (t || ɵEmptyOutletComponent)(); };
ɵEmptyOutletComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineComponent"]({ type: ɵEmptyOutletComponent, selectors: [["ng-component"]], decls: 1, vars: 0, template: function ɵEmptyOutletComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵelement"](0, "router-outlet");
    } }, directives: function () { return [RouterOutlet]; }, encapsulation: 2 });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ɵEmptyOutletComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"],
        args: [{ template: `<router-outlet></router-outlet>` }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/shared.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * The primary routing outlet.
 *
 * \@publicApi
 * @type {?}
 */
const PRIMARY_OUTLET = 'primary';
/**
 * A map that provides access to the required and optional parameters
 * specific to a route.
 * The map supports retrieving a single value with `get()`
 * or multiple values with `getAll()`.
 *
 * @see [URLSearchParams](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams)
 *
 * \@publicApi
 * @record
 */
function ParamMap() { }
if (false) {}
class ParamsAsMap {
    /**
     * @param {?} params
     */
    constructor(params) { this.params = params || {}; }
    /**
     * @param {?} name
     * @return {?}
     */
    has(name) { return this.params.hasOwnProperty(name); }
    /**
     * @param {?} name
     * @return {?}
     */
    get(name) {
        if (this.has(name)) {
            /** @type {?} */
            const v = this.params[name];
            return Array.isArray(v) ? v[0] : v;
        }
        return null;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getAll(name) {
        if (this.has(name)) {
            /** @type {?} */
            const v = this.params[name];
            return Array.isArray(v) ? v : [v];
        }
        return [];
    }
    /**
     * @return {?}
     */
    get keys() { return Object.keys(this.params); }
}
if (false) {}
/**
 * Converts a `Params` instance to a `ParamMap`.
 * \@publicApi
 * @param {?} params The instance to convert.
 * @return {?} The new map instance.
 *
 */
function convertToParamMap(params) {
    return new ParamsAsMap(params);
}
/** @type {?} */
const NAVIGATION_CANCELING_ERROR = 'ngNavigationCancelingError';
/**
 * @param {?} message
 * @return {?}
 */
function navigationCancelingError(message) {
    /** @type {?} */
    const error = Error('NavigationCancelingError: ' + message);
    ((/** @type {?} */ (error)))[NAVIGATION_CANCELING_ERROR] = true;
    return error;
}
/**
 * @param {?} error
 * @return {?}
 */
function isNavigationCancelingError(error) {
    return error && ((/** @type {?} */ (error)))[NAVIGATION_CANCELING_ERROR];
}
// Matches the route configuration (`route`) against the actual URL (`segments`).
/**
 * @param {?} segments
 * @param {?} segmentGroup
 * @param {?} route
 * @return {?}
 */
function defaultUrlMatcher(segments, segmentGroup, route) {
    /** @type {?} */
    const parts = (/** @type {?} */ (route.path)).split('/');
    if (parts.length > segments.length) {
        // The actual URL is shorter than the config, no match
        return null;
    }
    if (route.pathMatch === 'full' &&
        (segmentGroup.hasChildren() || parts.length < segments.length)) {
        // The config is longer than the actual URL but we are looking for a full match, return null
        return null;
    }
    /** @type {?} */
    const posParams = {};
    // Check each config part against the actual URL
    for (let index = 0; index < parts.length; index++) {
        /** @type {?} */
        const part = parts[index];
        /** @type {?} */
        const segment = segments[index];
        /** @type {?} */
        const isParameter = part.startsWith(':');
        if (isParameter) {
            posParams[part.substring(1)] = segment;
        }
        else if (part !== segment.path) {
            // The actual URL part does not match the config, no match
            return null;
        }
    }
    return { consumed: segments.slice(0, parts.length), posParams };
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A configuration object that defines a single route.
 * A set of routes are collected in a `Routes` array to define a `Router` configuration.
 * The router attempts to match segments of a given URL against each route,
 * using the configuration options defined in this object.
 *
 * Supports static, parameterized, redirect, and wildcard routes, as well as
 * custom route data and resolve methods.
 *
 * For detailed usage information, see the [Routing Guide](guide/router).
 *
 * \@usageNotes
 *
 * ### Simple Configuration
 *
 * The following route specifies that when navigating to, for example,
 * `/team/11/user/bob`, the router creates the 'Team' component
 * with the 'User' child component in it.
 *
 * ```
 * [{
 *   path: 'team/:id',
 *  component: Team,
 *   children: [{
 *     path: 'user/:name',
 *     component: User
 *   }]
 * }]
 * ```
 *
 * ### Multiple Outlets
 *
 * The following route creates sibling components with multiple outlets.
 * When navigating to `/team/11(aux:chat/jim)`, the router creates the 'Team' component next to
 * the 'Chat' component. The 'Chat' component is placed into the 'aux' outlet.
 *
 * ```
 * [{
 *   path: 'team/:id',
 *   component: Team
 * }, {
 *   path: 'chat/:user',
 *   component: Chat
 *   outlet: 'aux'
 * }]
 * ```
 *
 * ### Wild Cards
 *
 * The following route uses wild-card notation to specify a component
 * that is always instantiated regardless of where you navigate to.
 *
 * ```
 * [{
 *   path: '**',
 *   component: WildcardComponent
 * }]
 * ```
 *
 * ### Redirects
 *
 * The following route uses the `redirectTo` property to ignore a segment of
 * a given URL when looking for a child path.
 *
 * When navigating to '/team/11/legacy/user/jim', the router changes the URL segment
 * '/team/11/legacy/user/jim' to '/team/11/user/jim', and then instantiates
 * the Team component with the User child component in it.
 *
 * ```
 * [{
 *   path: 'team/:id',
 *   component: Team,
 *   children: [{
 *     path: 'legacy/user/:name',
 *     redirectTo: 'user/:name'
 *   }, {
 *     path: 'user/:name',
 *     component: User
 *   }]
 * }]
 * ```
 *
 * The redirect path can be relative, as shown in this example, or absolute.
 * If we change the `redirectTo` value in the example to the absolute URL segment '/user/:name',
 * the result URL is also absolute, '/user/jim'.
 * ### Empty Path
 *
 * Empty-path route configurations can be used to instantiate components that do not 'consume'
 * any URL segments.
 *
 * In the following configuration, when navigating to
 * `/team/11`, the router instantiates the 'AllUsers' component.
 *
 * ```
 * [{
 *   path: 'team/:id',
 *   component: Team,
 *   children: [{
 *     path: '',
 *     component: AllUsers
 *   }, {
 *     path: 'user/:name',
 *     component: User
 *   }]
 * }]
 * ```
 *
 * Empty-path routes can have children. In the following example, when navigating
 * to `/team/11/user/jim`, the router instantiates the wrapper component with
 * the user component in it.
 *
 * Note that an empty path route inherits its parent's parameters and data.
 *
 * ```
 * [{
 *   path: 'team/:id',
 *   component: Team,
 *   children: [{
 *     path: '',
 *     component: WrapperCmp,
 *     children: [{
 *       path: 'user/:name',
 *       component: User
 *     }]
 *   }]
 * }]
 * ```
 *
 * ### Matching Strategy
 *
 * The default path-match strategy is 'prefix', which means that the router
 * checks URL elements from the left to see if the URL matches a specified path.
 * For example, '/team/11/user' matches 'team/:id'.
 *
 * ```
 * [{
 *   path: '',
 *   pathMatch: 'prefix', //default
 *   redirectTo: 'main'
 * }, {
 *   path: 'main',
 *   component: Main
 * }]
 * ```
 *
 * You can specify the path-match strategy 'full' to make sure that the path
 * covers the whole unconsumed URL. It is important to do this when redirecting
 * empty-path routes. Otherwise, because an empty path is a prefix of any URL,
 * the router would apply the redirect even when navigating to the redirect destination,
 * creating an endless loop.
 *
 * In the following example, supplying the 'full' `pathMatch` strategy ensures
 * that the router applies the redirect if and only if navigating to '/'.
 *
 * ```
 * [{
 *   path: '',
 *   pathMatch: 'full',
 *   redirectTo: 'main'
 * }, {
 *   path: 'main',
 *   component: Main
 * }]
 * ```
 *
 * ### Componentless Routes
 *
 * You can share parameters between sibling components.
 * For example, suppose that two sibling components should go next to each other,
 * and both of them require an ID parameter. You can accomplish this using a route
 * that does not specify a component at the top level.
 *
 * In the following example, 'MainChild' and 'AuxChild' are siblings.
 * When navigating to 'parent/10/(a//aux:b)', the route instantiates
 * the main child and aux child components next to each other.
 * For this to work, the application component must have the primary and aux outlets defined.
 *
 * ```
 * [{
 *    path: 'parent/:id',
 *    children: [
 *      { path: 'a', component: MainChild },
 *      { path: 'b', component: AuxChild, outlet: 'aux' }
 *    ]
 * }]
 * ```
 *
 * The router merges the parameters, data, and resolve of the componentless
 * parent into the parameters, data, and resolve of the children.
 *
 * This is especially useful when child components are defined
 * with an empty path string, as in the following example.
 * With this configuration, navigating to '/parent/10' creates
 * the main child and aux components.
 *
 * ```
 * [{
 *    path: 'parent/:id',
 *    children: [
 *      { path: '', component: MainChild },
 *      { path: '', component: AuxChild, outlet: 'aux' }
 *    ]
 * }]
 * ```
 *
 * ### Lazy Loading
 *
 * Lazy loading speeds up application load time by splitting the application
 * into multiple bundles and loading them on demand.
 * To use lazy loading, provide the `loadChildren` property  instead of the `children` property.
 *
 * Given the following example route, the router will lazy load
 * the associated module on demand using the browser native import system.
 *
 * ```
 * [{
 *   path: 'lazy',
 *   loadChildren: () => import('./lazy-route/lazy.module').then(mod => mod.LazyModule),
 * }];
 * ```
 *
 * \@publicApi
 * @record
 */
function Route() { }
if (false) {}
class LoadedRouterConfig {
    /**
     * @param {?} routes
     * @param {?} module
     */
    constructor(routes, module) {
        this.routes = routes;
        this.module = module;
    }
}
if (false) {}
/**
 * @param {?} config
 * @param {?=} parentPath
 * @return {?}
 */
function validateConfig(config, parentPath = '') {
    // forEach doesn't iterate undefined values
    for (let i = 0; i < config.length; i++) {
        /** @type {?} */
        const route = config[i];
        /** @type {?} */
        const fullPath = getFullPath(parentPath, route);
        validateNode(route, fullPath);
    }
}
/**
 * @param {?} route
 * @param {?} fullPath
 * @return {?}
 */
function validateNode(route, fullPath) {
    if (!route) {
        throw new Error(`
      Invalid configuration of route '${fullPath}': Encountered undefined route.
      The reason might be an extra comma.

      Example:
      const routes: Routes = [
        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
        { path: 'dashboard',  component: DashboardComponent },, << two commas
        { path: 'detail/:id', component: HeroDetailComponent }
      ];
    `);
    }
    if (Array.isArray(route)) {
        throw new Error(`Invalid configuration of route '${fullPath}': Array cannot be specified`);
    }
    if (!route.component && !route.children && !route.loadChildren &&
        (route.outlet && route.outlet !== PRIMARY_OUTLET)) {
        throw new Error(`Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);
    }
    if (route.redirectTo && route.children) {
        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);
    }
    if (route.redirectTo && route.loadChildren) {
        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);
    }
    if (route.children && route.loadChildren) {
        throw new Error(`Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);
    }
    if (route.redirectTo && route.component) {
        throw new Error(`Invalid configuration of route '${fullPath}': redirectTo and component cannot be used together`);
    }
    if (route.path && route.matcher) {
        throw new Error(`Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);
    }
    if (route.redirectTo === void 0 && !route.component && !route.children && !route.loadChildren) {
        throw new Error(`Invalid configuration of route '${fullPath}'. One of the following must be provided: component, redirectTo, children or loadChildren`);
    }
    if (route.path === void 0 && route.matcher === void 0) {
        throw new Error(`Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);
    }
    if (typeof route.path === 'string' && route.path.charAt(0) === '/') {
        throw new Error(`Invalid configuration of route '${fullPath}': path cannot start with a slash`);
    }
    if (route.path === '' && route.redirectTo !== void 0 && route.pathMatch === void 0) {
        /** @type {?} */
        const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;
        throw new Error(`Invalid configuration of route '{path: "${fullPath}", redirectTo: "${route.redirectTo}"}': please provide 'pathMatch'. ${exp}`);
    }
    if (route.pathMatch !== void 0 && route.pathMatch !== 'full' && route.pathMatch !== 'prefix') {
        throw new Error(`Invalid configuration of route '${fullPath}': pathMatch can only be set to 'prefix' or 'full'`);
    }
    if (route.children) {
        validateConfig(route.children, fullPath);
    }
}
/**
 * @param {?} parentPath
 * @param {?} currentRoute
 * @return {?}
 */
function getFullPath(parentPath, currentRoute) {
    if (!currentRoute) {
        return parentPath;
    }
    if (!parentPath && !currentRoute.path) {
        return '';
    }
    else if (parentPath && !currentRoute.path) {
        return `${parentPath}/`;
    }
    else if (!parentPath && currentRoute.path) {
        return currentRoute.path;
    }
    else {
        return `${parentPath}/${currentRoute.path}`;
    }
}
/**
 * Makes a copy of the config and adds any default required properties.
 * @param {?} r
 * @return {?}
 */
function standardizeConfig(r) {
    /** @type {?} */
    const children = r.children && r.children.map(standardizeConfig);
    /** @type {?} */
    const c = children ? Object.assign(Object.assign({}, r), { children }) : Object.assign({}, r);
    if (!c.component && (children || c.loadChildren) && (c.outlet && c.outlet !== PRIMARY_OUTLET)) {
        c.component = ɵEmptyOutletComponent;
    }
    return c;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/utils/collection.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function shallowEqualArrays(a, b) {
    if (a.length !== b.length)
        return false;
    for (let i = 0; i < a.length; ++i) {
        if (!shallowEqual(a[i], b[i]))
            return false;
    }
    return true;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function shallowEqual(a, b) {
    // Casting Object.keys return values to include `undefined` as there are some cases
    // in IE 11 where this can happen. Cannot provide a test because the behavior only
    // exists in certain circumstances in IE 11, therefore doing this cast ensures the
    // logic is correct for when this edge case is hit.
    /** @type {?} */
    const k1 = (/** @type {?} */ (Object.keys(a)));
    /** @type {?} */
    const k2 = (/** @type {?} */ (Object.keys(b)));
    if (!k1 || !k2 || k1.length != k2.length) {
        return false;
    }
    /** @type {?} */
    let key;
    for (let i = 0; i < k1.length; i++) {
        key = k1[i];
        if (!equalArraysOrString(a[key], b[key])) {
            return false;
        }
    }
    return true;
}
/**
 * Test equality for arrays of strings or a string.
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function equalArraysOrString(a, b) {
    if (Array.isArray(a) && Array.isArray(b)) {
        if (a.length != b.length)
            return false;
        return a.every((/**
         * @param {?} aItem
         * @return {?}
         */
        aItem => b.indexOf(aItem) > -1));
    }
    else {
        return a === b;
    }
}
/**
 * Flattens single-level nested arrays.
 * @template T
 * @param {?} arr
 * @return {?}
 */
function flatten(arr) {
    return Array.prototype.concat.apply([], arr);
}
/**
 * Return the last element of an array.
 * @template T
 * @param {?} a
 * @return {?}
 */
function last(a) {
    return a.length > 0 ? a[a.length - 1] : null;
}
/**
 * Verifys all booleans in an array are `true`.
 * @param {?} bools
 * @return {?}
 */
function and(bools) {
    return !bools.some((/**
     * @param {?} v
     * @return {?}
     */
    v => !v));
}
/**
 * @template K, V
 * @param {?} map
 * @param {?} callback
 * @return {?}
 */
function forEach(map, callback) {
    for (const prop in map) {
        if (map.hasOwnProperty(prop)) {
            callback(map[prop], prop);
        }
    }
}
/**
 * @template A, B
 * @param {?} obj
 * @param {?} fn
 * @return {?}
 */
function waitForMap(obj, fn) {
    if (Object.keys(obj).length === 0) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])({});
    }
    /** @type {?} */
    const waitHead = [];
    /** @type {?} */
    const waitTail = [];
    /** @type {?} */
    const res = {};
    forEach(obj, (/**
     * @param {?} a
     * @param {?} k
     * @return {?}
     */
    (a, k) => {
        /** @type {?} */
        const mapped = fn(k, a).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} r
         * @return {?}
         */
        (r) => res[k] = r)));
        if (k === PRIMARY_OUTLET) {
            waitHead.push(mapped);
        }
        else {
            waitTail.push(mapped);
        }
    }));
    // Closure compiler has problem with using spread operator here. So we use "Array.concat".
    // Note that we also need to cast the new promise because TypeScript cannot infer the type
    // when calling the "of" function through "Function.apply"
    return ((/** @type {?} */ (rxjs__WEBPACK_IMPORTED_MODULE_2__["of"].apply(null, waitHead.concat(waitTail)))))
        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["concatAll"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["last"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
     * @return {?}
     */
    () => res)));
}
/**
 * @template T
 * @param {?} value
 * @return {?}
 */
function wrapIntoObservable(value) {
    if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵisObservable"])(value)) {
        return value;
    }
    if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵisPromise"])(value)) {
        // Use `Promise.resolve()` to wrap promise-like instances.
        // Required ie when a Resolver returns a AngularJS `$q` promise to correctly trigger the
        // change detection.
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(Promise.resolve(value));
    }
    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(value);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/url_tree.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function createEmptyUrlTree() {
    return new UrlTree(new UrlSegmentGroup([], {}), {}, null);
}
/**
 * @param {?} container
 * @param {?} containee
 * @param {?} exact
 * @return {?}
 */
function containsTree(container, containee, exact) {
    if (exact) {
        return equalQueryParams(container.queryParams, containee.queryParams) &&
            equalSegmentGroups(container.root, containee.root);
    }
    return containsQueryParams(container.queryParams, containee.queryParams) &&
        containsSegmentGroup(container.root, containee.root);
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function equalQueryParams(container, containee) {
    // TODO: This does not handle array params correctly.
    return shallowEqual(container, containee);
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function equalSegmentGroups(container, containee) {
    if (!equalPath(container.segments, containee.segments))
        return false;
    if (container.numberOfChildren !== containee.numberOfChildren)
        return false;
    for (const c in containee.children) {
        if (!container.children[c])
            return false;
        if (!equalSegmentGroups(container.children[c], containee.children[c]))
            return false;
    }
    return true;
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function containsQueryParams(container, containee) {
    // TODO: This does not handle array params correctly.
    return Object.keys(containee).length <= Object.keys(container).length &&
        Object.keys(containee).every((/**
         * @param {?} key
         * @return {?}
         */
        key => equalArraysOrString(container[key], containee[key])));
}
/**
 * @param {?} container
 * @param {?} containee
 * @return {?}
 */
function containsSegmentGroup(container, containee) {
    return containsSegmentGroupHelper(container, containee, containee.segments);
}
/**
 * @param {?} container
 * @param {?} containee
 * @param {?} containeePaths
 * @return {?}
 */
function containsSegmentGroupHelper(container, containee, containeePaths) {
    if (container.segments.length > containeePaths.length) {
        /** @type {?} */
        const current = container.segments.slice(0, containeePaths.length);
        if (!equalPath(current, containeePaths))
            return false;
        if (containee.hasChildren())
            return false;
        return true;
    }
    else if (container.segments.length === containeePaths.length) {
        if (!equalPath(container.segments, containeePaths))
            return false;
        for (const c in containee.children) {
            if (!container.children[c])
                return false;
            if (!containsSegmentGroup(container.children[c], containee.children[c]))
                return false;
        }
        return true;
    }
    else {
        /** @type {?} */
        const current = containeePaths.slice(0, container.segments.length);
        /** @type {?} */
        const next = containeePaths.slice(container.segments.length);
        if (!equalPath(container.segments, current))
            return false;
        if (!container.children[PRIMARY_OUTLET])
            return false;
        return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next);
    }
}
/**
 * \@description
 *
 * Represents the parsed URL.
 *
 * Since a router state is a tree, and the URL is nothing but a serialized state, the URL is a
 * serialized tree.
 * UrlTree is a data structure that provides a lot of affordances in dealing with URLs
 *
 * \@usageNotes
 * ### Example
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree =
 *       router.parseUrl('/team/33/(user/victor//support:help)?debug=true#fragment');
 *     const f = tree.fragment; // return 'fragment'
 *     const q = tree.queryParams; // returns {debug: 'true'}
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments; // returns 2 segments 'team' and '33'
 *     g.children[PRIMARY_OUTLET].segments; // returns 2 segments 'user' and 'victor'
 *     g.children['support'].segments; // return 1 segment 'help'
 *   }
 * }
 * ```
 *
 * \@publicApi
 */
class UrlTree {
    /**
     * \@internal
     * @param {?} root
     * @param {?} queryParams
     * @param {?} fragment
     */
    constructor(root, queryParams, fragment) {
        this.root = root;
        this.queryParams = queryParams;
        this.fragment = fragment;
    }
    /**
     * @return {?}
     */
    get queryParamMap() {
        if (!this._queryParamMap) {
            this._queryParamMap = convertToParamMap(this.queryParams);
        }
        return this._queryParamMap;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    toString() { return DEFAULT_SERIALIZER.serialize(this); }
}
if (false) {}
/**
 * \@description
 *
 * Represents the parsed URL segment group.
 *
 * See `UrlTree` for more information.
 *
 * \@publicApi
 */
class UrlSegmentGroup {
    /**
     * @param {?} segments
     * @param {?} children
     */
    constructor(segments, children) {
        this.segments = segments;
        this.children = children;
        /**
         * The parent node in the url tree
         */
        this.parent = null;
        forEach(children, (/**
         * @template THIS
         * @this {THIS}
         * @param {?} v
         * @param {?} k
         * @return {THIS}
         */
        (v, k) => v.parent = this));
    }
    /**
     * Whether the segment has child segments
     * @return {?}
     */
    hasChildren() { return this.numberOfChildren > 0; }
    /**
     * Number of child segments
     * @return {?}
     */
    get numberOfChildren() { return Object.keys(this.children).length; }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    toString() { return serializePaths(this); }
}
if (false) {}
/**
 * \@description
 *
 * Represents a single URL segment.
 *
 * A UrlSegment is a part of a URL between the two slashes. It contains a path and the matrix
 * parameters associated with the segment.
 *
 * \@usageNotes
 *  ### Example
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const tree: UrlTree = router.parseUrl('/team;id=33');
 *     const g: UrlSegmentGroup = tree.root.children[PRIMARY_OUTLET];
 *     const s: UrlSegment[] = g.segments;
 *     s[0].path; // returns 'team'
 *     s[0].parameters; // returns {id: 33}
 *   }
 * }
 * ```
 *
 * \@publicApi
 */
class UrlSegment {
    /**
     * @param {?} path
     * @param {?} parameters
     */
    constructor(path, parameters) {
        this.path = path;
        this.parameters = parameters;
    }
    /**
     * @return {?}
     */
    get parameterMap() {
        if (!this._parameterMap) {
            this._parameterMap = convertToParamMap(this.parameters);
        }
        return this._parameterMap;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    toString() { return serializePath(this); }
}
if (false) {}
/**
 * @param {?} as
 * @param {?} bs
 * @return {?}
 */
function equalSegments(as, bs) {
    return equalPath(as, bs) && as.every((/**
     * @param {?} a
     * @param {?} i
     * @return {?}
     */
    (a, i) => shallowEqual(a.parameters, bs[i].parameters)));
}
/**
 * @param {?} as
 * @param {?} bs
 * @return {?}
 */
function equalPath(as, bs) {
    if (as.length !== bs.length)
        return false;
    return as.every((/**
     * @param {?} a
     * @param {?} i
     * @return {?}
     */
    (a, i) => a.path === bs[i].path));
}
/**
 * @template T
 * @param {?} segment
 * @param {?} fn
 * @return {?}
 */
function mapChildrenIntoArray(segment, fn) {
    /** @type {?} */
    let res = [];
    forEach(segment.children, (/**
     * @param {?} child
     * @param {?} childOutlet
     * @return {?}
     */
    (child, childOutlet) => {
        if (childOutlet === PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
        }
    }));
    forEach(segment.children, (/**
     * @param {?} child
     * @param {?} childOutlet
     * @return {?}
     */
    (child, childOutlet) => {
        if (childOutlet !== PRIMARY_OUTLET) {
            res = res.concat(fn(child, childOutlet));
        }
    }));
    return res;
}
/**
 * \@description
 *
 * Serializes and deserializes a URL string into a URL tree.
 *
 * The url serialization strategy is customizable. You can
 * make all URLs case insensitive by providing a custom UrlSerializer.
 *
 * See `DefaultUrlSerializer` for an example of a URL serializer.
 *
 * \@publicApi
 * @abstract
 */
class UrlSerializer {
}
if (false) {}
/**
 * \@description
 *
 * A default implementation of the `UrlSerializer`.
 *
 * Example URLs:
 *
 * ```
 * /inbox/33(popup:compose)
 * /inbox/33;open=true/messages/44
 * ```
 *
 * DefaultUrlSerializer uses parentheses to serialize secondary segments (e.g., popup:compose), the
 * colon syntax to specify the outlet, and the ';parameter=value' syntax (e.g., open=true) to
 * specify route specific parameters.
 *
 * \@publicApi
 */
class DefaultUrlSerializer {
    /**
     * Parses a url into a `UrlTree`
     * @param {?} url
     * @return {?}
     */
    parse(url) {
        /** @type {?} */
        const p = new UrlParser(url);
        return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
    }
    /**
     * Converts a `UrlTree` into a url
     * @param {?} tree
     * @return {?}
     */
    serialize(tree) {
        /** @type {?} */
        const segment = `/${serializeSegment(tree.root, true)}`;
        /** @type {?} */
        const query = serializeQueryParams(tree.queryParams);
        /** @type {?} */
        const fragment = typeof tree.fragment === `string` ? `#${encodeUriFragment((/** @type {?} */ (tree.fragment)))}` : '';
        return `${segment}${query}${fragment}`;
    }
}
/** @type {?} */
const DEFAULT_SERIALIZER = new DefaultUrlSerializer();
/**
 * @param {?} segment
 * @return {?}
 */
function serializePaths(segment) {
    return segment.segments.map((/**
     * @param {?} p
     * @return {?}
     */
    p => serializePath(p))).join('/');
}
/**
 * @param {?} segment
 * @param {?} root
 * @return {?}
 */
function serializeSegment(segment, root) {
    if (!segment.hasChildren()) {
        return serializePaths(segment);
    }
    if (root) {
        /** @type {?} */
        const primary = segment.children[PRIMARY_OUTLET] ?
            serializeSegment(segment.children[PRIMARY_OUTLET], false) :
            '';
        /** @type {?} */
        const children = [];
        forEach(segment.children, (/**
         * @param {?} v
         * @param {?} k
         * @return {?}
         */
        (v, k) => {
            if (k !== PRIMARY_OUTLET) {
                children.push(`${k}:${serializeSegment(v, false)}`);
            }
        }));
        return children.length > 0 ? `${primary}(${children.join('//')})` : primary;
    }
    else {
        /** @type {?} */
        const children = mapChildrenIntoArray(segment, (/**
         * @param {?} v
         * @param {?} k
         * @return {?}
         */
        (v, k) => {
            if (k === PRIMARY_OUTLET) {
                return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
            }
            return [`${k}:${serializeSegment(v, false)}`];
        }));
        return `${serializePaths(segment)}/(${children.join('//')})`;
    }
}
/**
 * Encodes a URI string with the default encoding. This function will only ever be called from
 * `encodeUriQuery` or `encodeUriSegment` as it's the base set of encodings to be used. We need
 * a custom encoding because encodeURIComponent is too aggressive and encodes stuff that doesn't
 * have to be encoded per https://url.spec.whatwg.org.
 * @param {?} s
 * @return {?}
 */
function encodeUriString(s) {
    return encodeURIComponent(s)
        .replace(/%40/g, '@')
        .replace(/%3A/gi, ':')
        .replace(/%24/g, '$')
        .replace(/%2C/gi, ',');
}
/**
 * This function should be used to encode both keys and values in a query string key/value. In
 * the following URL, you need to call encodeUriQuery on "k" and "v":
 *
 * http://www.site.org/html;mk=mv?k=v#f
 * @param {?} s
 * @return {?}
 */
function encodeUriQuery(s) {
    return encodeUriString(s).replace(/%3B/gi, ';');
}
/**
 * This function should be used to encode a URL fragment. In the following URL, you need to call
 * encodeUriFragment on "f":
 *
 * http://www.site.org/html;mk=mv?k=v#f
 * @param {?} s
 * @return {?}
 */
function encodeUriFragment(s) {
    return encodeURI(s);
}
/**
 * This function should be run on any URI segment as well as the key and value in a key/value
 * pair for matrix params. In the following URL, you need to call encodeUriSegment on "html",
 * "mk", and "mv":
 *
 * http://www.site.org/html;mk=mv?k=v#f
 * @param {?} s
 * @return {?}
 */
function encodeUriSegment(s) {
    return encodeUriString(s).replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/%26/gi, '&');
}
/**
 * @param {?} s
 * @return {?}
 */
function decode(s) {
    return decodeURIComponent(s);
}
// Query keys/values should have the "+" replaced first, as "+" in a query string is " ".
// decodeURIComponent function will not decode "+" as a space.
/**
 * @param {?} s
 * @return {?}
 */
function decodeQuery(s) {
    return decode(s.replace(/\+/g, '%20'));
}
/**
 * @param {?} path
 * @return {?}
 */
function serializePath(path) {
    return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;
}
/**
 * @param {?} params
 * @return {?}
 */
function serializeMatrixParams(params) {
    return Object.keys(params)
        .map((/**
     * @param {?} key
     * @return {?}
     */
    key => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`))
        .join('');
}
/**
 * @param {?} params
 * @return {?}
 */
function serializeQueryParams(params) {
    /** @type {?} */
    const strParams = Object.keys(params).map((/**
     * @param {?} name
     * @return {?}
     */
    (name) => {
        /** @type {?} */
        const value = params[name];
        return Array.isArray(value) ?
            value.map((/**
             * @param {?} v
             * @return {?}
             */
            v => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`)).join('&') :
            `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;
    }));
    return strParams.length ? `?${strParams.join("&")}` : '';
}
/** @type {?} */
const SEGMENT_RE = /^[^\/()?;=#]+/;
/**
 * @param {?} str
 * @return {?}
 */
function matchSegments(str) {
    /** @type {?} */
    const match = str.match(SEGMENT_RE);
    return match ? match[0] : '';
}
/** @type {?} */
const QUERY_PARAM_RE = /^[^=?&#]+/;
// Return the name of the query param at the start of the string or an empty string
/**
 * @param {?} str
 * @return {?}
 */
function matchQueryParams(str) {
    /** @type {?} */
    const match = str.match(QUERY_PARAM_RE);
    return match ? match[0] : '';
}
/** @type {?} */
const QUERY_PARAM_VALUE_RE = /^[^?&#]+/;
// Return the value of the query param at the start of the string or an empty string
/**
 * @param {?} str
 * @return {?}
 */
function matchUrlQueryParamValue(str) {
    /** @type {?} */
    const match = str.match(QUERY_PARAM_VALUE_RE);
    return match ? match[0] : '';
}
class UrlParser {
    /**
     * @param {?} url
     */
    constructor(url) {
        this.url = url;
        this.remaining = url;
    }
    /**
     * @return {?}
     */
    parseRootSegment() {
        this.consumeOptional('/');
        if (this.remaining === '' || this.peekStartsWith('?') || this.peekStartsWith('#')) {
            return new UrlSegmentGroup([], {});
        }
        // The root segment group never has segments
        return new UrlSegmentGroup([], this.parseChildren());
    }
    /**
     * @return {?}
     */
    parseQueryParams() {
        /** @type {?} */
        const params = {};
        if (this.consumeOptional('?')) {
            do {
                this.parseQueryParam(params);
            } while (this.consumeOptional('&'));
        }
        return params;
    }
    /**
     * @return {?}
     */
    parseFragment() {
        return this.consumeOptional('#') ? decodeURIComponent(this.remaining) : null;
    }
    /**
     * @private
     * @return {?}
     */
    parseChildren() {
        if (this.remaining === '') {
            return {};
        }
        this.consumeOptional('/');
        /** @type {?} */
        const segments = [];
        if (!this.peekStartsWith('(')) {
            segments.push(this.parseSegment());
        }
        while (this.peekStartsWith('/') && !this.peekStartsWith('//') && !this.peekStartsWith('/(')) {
            this.capture('/');
            segments.push(this.parseSegment());
        }
        /** @type {?} */
        let children = {};
        if (this.peekStartsWith('/(')) {
            this.capture('/');
            children = this.parseParens(true);
        }
        /** @type {?} */
        let res = {};
        if (this.peekStartsWith('(')) {
            res = this.parseParens(false);
        }
        if (segments.length > 0 || Object.keys(children).length > 0) {
            res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
        }
        return res;
    }
    // parse a segment with its matrix parameters
    // ie `name;k1=v1;k2`
    /**
     * @private
     * @return {?}
     */
    parseSegment() {
        /** @type {?} */
        const path = matchSegments(this.remaining);
        if (path === '' && this.peekStartsWith(';')) {
            throw new Error(`Empty path url segment cannot have parameters: '${this.remaining}'.`);
        }
        this.capture(path);
        return new UrlSegment(decode(path), this.parseMatrixParams());
    }
    /**
     * @private
     * @return {?}
     */
    parseMatrixParams() {
        /** @type {?} */
        const params = {};
        while (this.consumeOptional(';')) {
            this.parseParam(params);
        }
        return params;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    parseParam(params) {
        /** @type {?} */
        const key = matchSegments(this.remaining);
        if (!key) {
            return;
        }
        this.capture(key);
        /** @type {?} */
        let value = '';
        if (this.consumeOptional('=')) {
            /** @type {?} */
            const valueMatch = matchSegments(this.remaining);
            if (valueMatch) {
                value = valueMatch;
                this.capture(value);
            }
        }
        params[decode(key)] = decode(value);
    }
    // Parse a single query parameter `name[=value]`
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    parseQueryParam(params) {
        /** @type {?} */
        const key = matchQueryParams(this.remaining);
        if (!key) {
            return;
        }
        this.capture(key);
        /** @type {?} */
        let value = '';
        if (this.consumeOptional('=')) {
            /** @type {?} */
            const valueMatch = matchUrlQueryParamValue(this.remaining);
            if (valueMatch) {
                value = valueMatch;
                this.capture(value);
            }
        }
        /** @type {?} */
        const decodedKey = decodeQuery(key);
        /** @type {?} */
        const decodedVal = decodeQuery(value);
        if (params.hasOwnProperty(decodedKey)) {
            // Append to existing values
            /** @type {?} */
            let currentVal = params[decodedKey];
            if (!Array.isArray(currentVal)) {
                currentVal = [currentVal];
                params[decodedKey] = currentVal;
            }
            currentVal.push(decodedVal);
        }
        else {
            // Create a new value
            params[decodedKey] = decodedVal;
        }
    }
    // parse `(a/b//outlet_name:c/d)`
    /**
     * @private
     * @param {?} allowPrimary
     * @return {?}
     */
    parseParens(allowPrimary) {
        /** @type {?} */
        const segments = {};
        this.capture('(');
        while (!this.consumeOptional(')') && this.remaining.length > 0) {
            /** @type {?} */
            const path = matchSegments(this.remaining);
            /** @type {?} */
            const next = this.remaining[path.length];
            // if is is not one of these characters, then the segment was unescaped
            // or the group was not closed
            if (next !== '/' && next !== ')' && next !== ';') {
                throw new Error(`Cannot parse url '${this.url}'`);
            }
            /** @type {?} */
            let outletName = (/** @type {?} */ (undefined));
            if (path.indexOf(':') > -1) {
                outletName = path.substr(0, path.indexOf(':'));
                this.capture(outletName);
                this.capture(':');
            }
            else if (allowPrimary) {
                outletName = PRIMARY_OUTLET;
            }
            /** @type {?} */
            const children = this.parseChildren();
            segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] :
                new UrlSegmentGroup([], children);
            this.consumeOptional('//');
        }
        return segments;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    peekStartsWith(str) { return this.remaining.startsWith(str); }
    // Consumes the prefix when it is present and returns whether it has been consumed
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    consumeOptional(str) {
        if (this.peekStartsWith(str)) {
            this.remaining = this.remaining.substring(str.length);
            return true;
        }
        return false;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    capture(str) {
        if (!this.consumeOptional(str)) {
            throw new Error(`Expected "${str}".`);
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/utils/tree.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * @template T
 */
class Tree {
    /**
     * @param {?} root
     */
    constructor(root) { this._root = root; }
    /**
     * @return {?}
     */
    get root() { return this._root.value; }
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    parent(t) {
        /** @type {?} */
        const p = this.pathFromRoot(t);
        return p.length > 1 ? p[p.length - 2] : null;
    }
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    children(t) {
        /** @type {?} */
        const n = findNode(t, this._root);
        return n ? n.children.map((/**
         * @param {?} t
         * @return {?}
         */
        t => t.value)) : [];
    }
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    firstChild(t) {
        /** @type {?} */
        const n = findNode(t, this._root);
        return n && n.children.length > 0 ? n.children[0].value : null;
    }
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    siblings(t) {
        /** @type {?} */
        const p = findPath(t, this._root);
        if (p.length < 2)
            return [];
        /** @type {?} */
        const c = p[p.length - 2].children.map((/**
         * @param {?} c
         * @return {?}
         */
        c => c.value));
        return c.filter((/**
         * @param {?} cc
         * @return {?}
         */
        cc => cc !== t));
    }
    /**
     * \@internal
     * @param {?} t
     * @return {?}
     */
    pathFromRoot(t) { return findPath(t, this._root).map((/**
     * @param {?} s
     * @return {?}
     */
    s => s.value)); }
}
if (false) {}
// DFS for the node matching the value
/**
 * @template T
 * @param {?} value
 * @param {?} node
 * @return {?}
 */
function findNode(value, node) {
    if (value === node.value)
        return node;
    for (const child of node.children) {
        /** @type {?} */
        const node = findNode(value, child);
        if (node)
            return node;
    }
    return null;
}
// Return the path to the node with the given value using DFS
/**
 * @template T
 * @param {?} value
 * @param {?} node
 * @return {?}
 */
function findPath(value, node) {
    if (value === node.value)
        return [node];
    for (const child of node.children) {
        /** @type {?} */
        const path = findPath(value, child);
        if (path.length) {
            path.unshift(node);
            return path;
        }
    }
    return [];
}
/**
 * @template T
 */
class TreeNode {
    /**
     * @param {?} value
     * @param {?} children
     */
    constructor(value, children) {
        this.value = value;
        this.children = children;
    }
    /**
     * @return {?}
     */
    toString() { return `TreeNode(${this.value})`; }
}
if (false) {}
// Return the list of T indexed by outlet name
/**
 * @template T
 * @param {?} node
 * @return {?}
 */
function nodeChildrenAsMap(node) {
    /** @type {?} */
    const map = {};
    if (node) {
        node.children.forEach((/**
         * @param {?} child
         * @return {?}
         */
        child => map[child.value.outlet] = child));
    }
    return map;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/router_state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Represents the state of the router as a tree of activated routes.
 *
 * \@usageNotes
 *
 * Every node in the route tree is an `ActivatedRoute` instance
 * that knows about the "consumed" URL segments, the extracted parameters,
 * and the resolved data.
 * Use the `ActivatedRoute` properties to traverse the tree from any node.
 *
 * ### Example
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const root: ActivatedRoute = state.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * @see `ActivatedRoute`
 *
 * \@publicApi
 */
class RouterState extends Tree {
    /**
     * \@internal
     * @param {?} root
     * @param {?} snapshot
     */
    constructor(root, snapshot) {
        super(root);
        this.snapshot = snapshot;
        setRouterState((/** @type {?} */ (this)), root);
    }
    /**
     * @return {?}
     */
    toString() { return this.snapshot.toString(); }
}
if (false) {}
/**
 * @param {?} urlTree
 * @param {?} rootComponent
 * @return {?}
 */
function createEmptyState(urlTree, rootComponent) {
    /** @type {?} */
    const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
    /** @type {?} */
    const emptyUrl = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"]([new UrlSegment('', {})]);
    /** @type {?} */
    const emptyParams = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"]({});
    /** @type {?} */
    const emptyData = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"]({});
    /** @type {?} */
    const emptyQueryParams = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"]({});
    /** @type {?} */
    const fragment = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"]('');
    /** @type {?} */
    const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
    activated.snapshot = snapshot.root;
    return new RouterState(new TreeNode(activated, []), snapshot);
}
/**
 * @param {?} urlTree
 * @param {?} rootComponent
 * @return {?}
 */
function createEmptyStateSnapshot(urlTree, rootComponent) {
    /** @type {?} */
    const emptyParams = {};
    /** @type {?} */
    const emptyData = {};
    /** @type {?} */
    const emptyQueryParams = {};
    /** @type {?} */
    const fragment = '';
    /** @type {?} */
    const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, urlTree.root, -1, {});
    return new RouterStateSnapshot('', new TreeNode(activated, []));
}
/**
 * Provides access to information about a route associated with a component
 * that is loaded in an outlet.
 * Use to traverse the `RouterState` tree and extract information from nodes.
 *
 * {\@example router/activated-route/module.ts region="activated-route"
 *     header="activated-route.component.ts"}
 *
 * \@publicApi
 */
class ActivatedRoute {
    /**
     * \@internal
     * @param {?} url
     * @param {?} params
     * @param {?} queryParams
     * @param {?} fragment
     * @param {?} data
     * @param {?} outlet
     * @param {?} component
     * @param {?} futureSnapshot
     */
    constructor(url, params, queryParams, fragment, data, outlet, component, futureSnapshot) {
        this.url = url;
        this.params = params;
        this.queryParams = queryParams;
        this.fragment = fragment;
        this.data = data;
        this.outlet = outlet;
        this.component = component;
        this._futureSnapshot = futureSnapshot;
    }
    /**
     * The configuration used to match this route.
     * @return {?}
     */
    get routeConfig() { return this._futureSnapshot.routeConfig; }
    /**
     * The root of the router state.
     * @return {?}
     */
    get root() { return this._routerState.root; }
    /**
     * The parent of this route in the router state tree.
     * @return {?}
     */
    get parent() { return this._routerState.parent(this); }
    /**
     * The first child of this route in the router state tree.
     * @return {?}
     */
    get firstChild() { return this._routerState.firstChild(this); }
    /**
     * The children of this route in the router state tree.
     * @return {?}
     */
    get children() { return this._routerState.children(this); }
    /**
     * The path from the root of the router state tree to this route.
     * @return {?}
     */
    get pathFromRoot() { return this._routerState.pathFromRoot(this); }
    /**
     * An Observable that contains a map of the required and optional parameters
     * specific to the route.
     * The map supports retrieving single and multiple values from the same parameter.
     * @return {?}
     */
    get paramMap() {
        if (!this._paramMap) {
            this._paramMap = this.params.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @param {?} p
             * @return {?}
             */
            (p) => convertToParamMap(p))));
        }
        return this._paramMap;
    }
    /**
     * An Observable that contains a map of the query parameters available to all routes.
     * The map supports retrieving single and multiple values from the query parameter.
     * @return {?}
     */
    get queryParamMap() {
        if (!this._queryParamMap) {
            this._queryParamMap =
                this.queryParams.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
                 * @param {?} p
                 * @return {?}
                 */
                (p) => convertToParamMap(p))));
        }
        return this._queryParamMap;
    }
    /**
     * @return {?}
     */
    toString() {
        return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;
    }
}
if (false) {}
/**
 * Returns the inherited params, data, and resolve for a given route.
 * By default, this only inherits values up to the nearest path-less or component-less route.
 * \@internal
 * @param {?} route
 * @param {?=} paramsInheritanceStrategy
 * @return {?}
 */
function inheritedParamsDataResolve(route, paramsInheritanceStrategy = 'emptyOnly') {
    /** @type {?} */
    const pathFromRoot = route.pathFromRoot;
    /** @type {?} */
    let inheritingStartingFrom = 0;
    if (paramsInheritanceStrategy !== 'always') {
        inheritingStartingFrom = pathFromRoot.length - 1;
        while (inheritingStartingFrom >= 1) {
            /** @type {?} */
            const current = pathFromRoot[inheritingStartingFrom];
            /** @type {?} */
            const parent = pathFromRoot[inheritingStartingFrom - 1];
            // current route is an empty path => inherits its parent's params and data
            if (current.routeConfig && current.routeConfig.path === '') {
                inheritingStartingFrom--;
                // parent is componentless => current route should inherit its params and data
            }
            else if (!parent.component) {
                inheritingStartingFrom--;
            }
            else {
                break;
            }
        }
    }
    return flattenInherited(pathFromRoot.slice(inheritingStartingFrom));
}
/**
 * \@internal
 * @param {?} pathFromRoot
 * @return {?}
 */
function flattenInherited(pathFromRoot) {
    return pathFromRoot.reduce((/**
     * @param {?} res
     * @param {?} curr
     * @return {?}
     */
    (res, curr) => {
        /** @type {?} */
        const params = Object.assign(Object.assign({}, res.params), curr.params);
        /** @type {?} */
        const data = Object.assign(Object.assign({}, res.data), curr.data);
        /** @type {?} */
        const resolve = Object.assign(Object.assign({}, res.resolve), curr._resolvedData);
        return { params, data, resolve };
    }), (/** @type {?} */ ({ params: {}, data: {}, resolve: {} })));
}
/**
 * \@description
 *
 * Contains the information about a route associated with a component loaded in an
 * outlet at a particular moment in time. ActivatedRouteSnapshot can also be used to
 * traverse the router state tree.
 *
 * ```
 * \@Component({templateUrl:'./my-component.html'})
 * class MyComponent {
 *   constructor(route: ActivatedRoute) {
 *     const id: string = route.snapshot.params.id;
 *     const url: string = route.snapshot.url.join('');
 *     const user = route.snapshot.data.user;
 *   }
 * }
 * ```
 *
 * \@publicApi
 */
class ActivatedRouteSnapshot {
    /**
     * \@internal
     * @param {?} url
     * @param {?} params
     * @param {?} queryParams
     * @param {?} fragment
     * @param {?} data
     * @param {?} outlet
     * @param {?} component
     * @param {?} routeConfig
     * @param {?} urlSegment
     * @param {?} lastPathIndex
     * @param {?} resolve
     */
    constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, urlSegment, lastPathIndex, resolve) {
        this.url = url;
        this.params = params;
        this.queryParams = queryParams;
        this.fragment = fragment;
        this.data = data;
        this.outlet = outlet;
        this.component = component;
        this.routeConfig = routeConfig;
        this._urlSegment = urlSegment;
        this._lastPathIndex = lastPathIndex;
        this._resolve = resolve;
    }
    /**
     * The root of the router state
     * @return {?}
     */
    get root() { return this._routerState.root; }
    /**
     * The parent of this route in the router state tree
     * @return {?}
     */
    get parent() { return this._routerState.parent(this); }
    /**
     * The first child of this route in the router state tree
     * @return {?}
     */
    get firstChild() { return this._routerState.firstChild(this); }
    /**
     * The children of this route in the router state tree
     * @return {?}
     */
    get children() { return this._routerState.children(this); }
    /**
     * The path from the root of the router state tree to this route
     * @return {?}
     */
    get pathFromRoot() { return this._routerState.pathFromRoot(this); }
    /**
     * @return {?}
     */
    get paramMap() {
        if (!this._paramMap) {
            this._paramMap = convertToParamMap(this.params);
        }
        return this._paramMap;
    }
    /**
     * @return {?}
     */
    get queryParamMap() {
        if (!this._queryParamMap) {
            this._queryParamMap = convertToParamMap(this.queryParams);
        }
        return this._queryParamMap;
    }
    /**
     * @return {?}
     */
    toString() {
        /** @type {?} */
        const url = this.url.map((/**
         * @param {?} segment
         * @return {?}
         */
        segment => segment.toString())).join('/');
        /** @type {?} */
        const matched = this.routeConfig ? this.routeConfig.path : '';
        return `Route(url:'${url}', path:'${matched}')`;
    }
}
if (false) {}
/**
 * \@description
 *
 * Represents the state of the router at a moment in time.
 *
 * This is a tree of activated route snapshots. Every node in this tree knows about
 * the "consumed" URL segments, the extracted parameters, and the resolved data.
 *
 * \@usageNotes
 * ### Example
 *
 * ```
 * \@Component({templateUrl:'template.html'})
 * class MyComponent {
 *   constructor(router: Router) {
 *     const state: RouterState = router.routerState;
 *     const snapshot: RouterStateSnapshot = state.snapshot;
 *     const root: ActivatedRouteSnapshot = snapshot.root;
 *     const child = root.firstChild;
 *     const id: Observable<string> = child.params.map(p => p.id);
 *     //...
 *   }
 * }
 * ```
 *
 * \@publicApi
 */
class RouterStateSnapshot extends Tree {
    /**
     * \@internal
     * @param {?} url
     * @param {?} root
     */
    constructor(url, root) {
        super(root);
        this.url = url;
        setRouterState((/** @type {?} */ (this)), root);
    }
    /**
     * @return {?}
     */
    toString() { return serializeNode(this._root); }
}
if (false) {}
/**
 * @template U, T
 * @param {?} state
 * @param {?} node
 * @return {?}
 */
function setRouterState(state, node) {
    node.value._routerState = state;
    node.children.forEach((/**
     * @param {?} c
     * @return {?}
     */
    c => setRouterState(state, c)));
}
/**
 * @param {?} node
 * @return {?}
 */
function serializeNode(node) {
    /** @type {?} */
    const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(', ')} } ` : '';
    return `${node.value}${c}`;
}
/**
 * The expectation is that the activate route is created with the right set of parameters.
 * So we push new values into the observables only when they are not the initial values.
 * And we detect that by checking if the snapshot field is set.
 * @param {?} route
 * @return {?}
 */
function advanceActivatedRoute(route) {
    if (route.snapshot) {
        /** @type {?} */
        const currentSnapshot = route.snapshot;
        /** @type {?} */
        const nextSnapshot = route._futureSnapshot;
        route.snapshot = nextSnapshot;
        if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
            ((/** @type {?} */ (route.queryParams))).next(nextSnapshot.queryParams);
        }
        if (currentSnapshot.fragment !== nextSnapshot.fragment) {
            ((/** @type {?} */ (route.fragment))).next(nextSnapshot.fragment);
        }
        if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
            ((/** @type {?} */ (route.params))).next(nextSnapshot.params);
        }
        if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
            ((/** @type {?} */ (route.url))).next(nextSnapshot.url);
        }
        if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
            ((/** @type {?} */ (route.data))).next(nextSnapshot.data);
        }
    }
    else {
        route.snapshot = route._futureSnapshot;
        // this is for resolved data
        ((/** @type {?} */ (route.data))).next(route._futureSnapshot.data);
    }
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
function equalParamsAndUrlSegments(a, b) {
    /** @type {?} */
    const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
    /** @type {?} */
    const parentsMismatch = !a.parent !== !b.parent;
    return equalUrlParams && !parentsMismatch &&
        (!a.parent || equalParamsAndUrlSegments(a.parent, (/** @type {?} */ (b.parent))));
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/create_router_state.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?} prevState
 * @return {?}
 */
function createRouterState(routeReuseStrategy, curr, prevState) {
    /** @type {?} */
    const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : undefined);
    return new RouterState(root, curr);
}
/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?=} prevState
 * @return {?}
 */
function createNode(routeReuseStrategy, curr, prevState) {
    // reuse an activated route that is currently displayed on the screen
    if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
        /** @type {?} */
        const value = prevState.value;
        value._futureSnapshot = curr.value;
        /** @type {?} */
        const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
        return new TreeNode(value, children);
        // retrieve an activated route that is used to be displayed, but is not currently displayed
    }
    else {
        /** @type {?} */
        const detachedRouteHandle = (/** @type {?} */ (routeReuseStrategy.retrieve(curr.value)));
        if (detachedRouteHandle) {
            /** @type {?} */
            const tree = detachedRouteHandle.route;
            setFutureSnapshotsOfActivatedRoutes(curr, tree);
            return tree;
        }
        else {
            /** @type {?} */
            const value = createActivatedRoute(curr.value);
            /** @type {?} */
            const children = curr.children.map((/**
             * @param {?} c
             * @return {?}
             */
            c => createNode(routeReuseStrategy, c)));
            return new TreeNode(value, children);
        }
    }
}
/**
 * @param {?} curr
 * @param {?} result
 * @return {?}
 */
function setFutureSnapshotsOfActivatedRoutes(curr, result) {
    if (curr.value.routeConfig !== result.value.routeConfig) {
        throw new Error('Cannot reattach ActivatedRouteSnapshot created from a different route');
    }
    if (curr.children.length !== result.children.length) {
        throw new Error('Cannot reattach ActivatedRouteSnapshot with a different number of children');
    }
    result.value._futureSnapshot = curr.value;
    for (let i = 0; i < curr.children.length; ++i) {
        setFutureSnapshotsOfActivatedRoutes(curr.children[i], result.children[i]);
    }
}
/**
 * @param {?} routeReuseStrategy
 * @param {?} curr
 * @param {?} prevState
 * @return {?}
 */
function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
    return curr.children.map((/**
     * @param {?} child
     * @return {?}
     */
    child => {
        for (const p of prevState.children) {
            if (routeReuseStrategy.shouldReuseRoute(p.value.snapshot, child.value)) {
                return createNode(routeReuseStrategy, child, p);
            }
        }
        return createNode(routeReuseStrategy, child);
    }));
}
/**
 * @param {?} c
 * @return {?}
 */
function createActivatedRoute(c) {
    return new ActivatedRoute(new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](c.url), new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](c.params), new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](c.queryParams), new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](c.fragment), new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"](c.data), c.outlet, c.component, c);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/create_url_tree.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} route
 * @param {?} urlTree
 * @param {?} commands
 * @param {?} queryParams
 * @param {?} fragment
 * @return {?}
 */
function createUrlTree(route, urlTree, commands, queryParams, fragment) {
    if (commands.length === 0) {
        return tree(urlTree.root, urlTree.root, urlTree, queryParams, fragment);
    }
    /** @type {?} */
    const nav = computeNavigation(commands);
    if (nav.toRoot()) {
        return tree(urlTree.root, new UrlSegmentGroup([], {}), urlTree, queryParams, fragment);
    }
    /** @type {?} */
    const startingPosition = findStartingPosition(nav, urlTree, route);
    /** @type {?} */
    const segmentGroup = startingPosition.processChildren ?
        updateSegmentGroupChildren(startingPosition.segmentGroup, startingPosition.index, nav.commands) :
        updateSegmentGroup(startingPosition.segmentGroup, startingPosition.index, nav.commands);
    return tree(startingPosition.segmentGroup, segmentGroup, urlTree, queryParams, fragment);
}
/**
 * @param {?} command
 * @return {?}
 */
function isMatrixParams(command) {
    return typeof command === 'object' && command != null && !command.outlets && !command.segmentPath;
}
/**
 * @param {?} oldSegmentGroup
 * @param {?} newSegmentGroup
 * @param {?} urlTree
 * @param {?} queryParams
 * @param {?} fragment
 * @return {?}
 */
function tree(oldSegmentGroup, newSegmentGroup, urlTree, queryParams, fragment) {
    /** @type {?} */
    let qp = {};
    if (queryParams) {
        forEach(queryParams, (/**
         * @param {?} value
         * @param {?} name
         * @return {?}
         */
        (value, name) => {
            qp[name] = Array.isArray(value) ? value.map((/**
             * @param {?} v
             * @return {?}
             */
            (v) => `${v}`)) : `${value}`;
        }));
    }
    if (urlTree.root === oldSegmentGroup) {
        return new UrlTree(newSegmentGroup, qp, fragment);
    }
    return new UrlTree(replaceSegment(urlTree.root, oldSegmentGroup, newSegmentGroup), qp, fragment);
}
/**
 * @param {?} current
 * @param {?} oldSegment
 * @param {?} newSegment
 * @return {?}
 */
function replaceSegment(current, oldSegment, newSegment) {
    /** @type {?} */
    const children = {};
    forEach(current.children, (/**
     * @param {?} c
     * @param {?} outletName
     * @return {?}
     */
    (c, outletName) => {
        if (c === oldSegment) {
            children[outletName] = newSegment;
        }
        else {
            children[outletName] = replaceSegment(c, oldSegment, newSegment);
        }
    }));
    return new UrlSegmentGroup(current.segments, children);
}
class Navigation {
    /**
     * @param {?} isAbsolute
     * @param {?} numberOfDoubleDots
     * @param {?} commands
     */
    constructor(isAbsolute, numberOfDoubleDots, commands) {
        this.isAbsolute = isAbsolute;
        this.numberOfDoubleDots = numberOfDoubleDots;
        this.commands = commands;
        if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
            throw new Error('Root segment cannot have matrix parameters');
        }
        /** @type {?} */
        const cmdWithOutlet = commands.find((/**
         * @param {?} c
         * @return {?}
         */
        c => typeof c === 'object' && c != null && c.outlets));
        if (cmdWithOutlet && cmdWithOutlet !== last(commands)) {
            throw new Error('{outlets:{}} has to be the last command');
        }
    }
    /**
     * @return {?}
     */
    toRoot() {
        return this.isAbsolute && this.commands.length === 1 && this.commands[0] == '/';
    }
}
if (false) {}
/**
 * Transforms commands to a normalized `Navigation`
 * @param {?} commands
 * @return {?}
 */
function computeNavigation(commands) {
    if ((typeof commands[0] === 'string') && commands.length === 1 && commands[0] === '/') {
        return new Navigation(true, 0, commands);
    }
    /** @type {?} */
    let numberOfDoubleDots = 0;
    /** @type {?} */
    let isAbsolute = false;
    /** @type {?} */
    const res = commands.reduce((/**
     * @param {?} res
     * @param {?} cmd
     * @param {?} cmdIdx
     * @return {?}
     */
    (res, cmd, cmdIdx) => {
        if (typeof cmd === 'object' && cmd != null) {
            if (cmd.outlets) {
                /** @type {?} */
                const outlets = {};
                forEach(cmd.outlets, (/**
                 * @param {?} commands
                 * @param {?} name
                 * @return {?}
                 */
                (commands, name) => {
                    outlets[name] = typeof commands === 'string' ? commands.split('/') : commands;
                }));
                return [...res, { outlets }];
            }
            if (cmd.segmentPath) {
                return [...res, cmd.segmentPath];
            }
        }
        if (!(typeof cmd === 'string')) {
            return [...res, cmd];
        }
        if (cmdIdx === 0) {
            cmd.split('/').forEach((/**
             * @param {?} urlPart
             * @param {?} partIndex
             * @return {?}
             */
            (urlPart, partIndex) => {
                if (partIndex == 0 && urlPart === '.') {
                    // skip './a'
                }
                else if (partIndex == 0 && urlPart === '') { //  '/a'
                    isAbsolute = true;
                }
                else if (urlPart === '..') { //  '../a'
                    numberOfDoubleDots++;
                }
                else if (urlPart != '') {
                    res.push(urlPart);
                }
            }));
            return res;
        }
        return [...res, cmd];
    }), []);
    return new Navigation(isAbsolute, numberOfDoubleDots, res);
}
class Position {
    /**
     * @param {?} segmentGroup
     * @param {?} processChildren
     * @param {?} index
     */
    constructor(segmentGroup, processChildren, index) {
        this.segmentGroup = segmentGroup;
        this.processChildren = processChildren;
        this.index = index;
    }
}
if (false) {}
/**
 * @param {?} nav
 * @param {?} tree
 * @param {?} route
 * @return {?}
 */
function findStartingPosition(nav, tree, route) {
    if (nav.isAbsolute) {
        return new Position(tree.root, true, 0);
    }
    if (route.snapshot._lastPathIndex === -1) {
        return new Position(route.snapshot._urlSegment, true, 0);
    }
    /** @type {?} */
    const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
    /** @type {?} */
    const index = route.snapshot._lastPathIndex + modifier;
    return createPositionApplyingDoubleDots(route.snapshot._urlSegment, index, nav.numberOfDoubleDots);
}
/**
 * @param {?} group
 * @param {?} index
 * @param {?} numberOfDoubleDots
 * @return {?}
 */
function createPositionApplyingDoubleDots(group, index, numberOfDoubleDots) {
    /** @type {?} */
    let g = group;
    /** @type {?} */
    let ci = index;
    /** @type {?} */
    let dd = numberOfDoubleDots;
    while (dd > ci) {
        dd -= ci;
        g = (/** @type {?} */ (g.parent));
        if (!g) {
            throw new Error('Invalid number of \'../\'');
        }
        ci = g.segments.length;
    }
    return new Position(g, false, ci - dd);
}
/**
 * @param {?} command
 * @return {?}
 */
function getPath(command) {
    if (typeof command === 'object' && command != null && command.outlets) {
        return command.outlets[PRIMARY_OUTLET];
    }
    return `${command}`;
}
/**
 * @param {?} commands
 * @return {?}
 */
function getOutlets(commands) {
    if (!(typeof commands[0] === 'object'))
        return { [PRIMARY_OUTLET]: commands };
    if (commands[0].outlets === undefined)
        return { [PRIMARY_OUTLET]: commands };
    return commands[0].outlets;
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function updateSegmentGroup(segmentGroup, startIndex, commands) {
    if (!segmentGroup) {
        segmentGroup = new UrlSegmentGroup([], {});
    }
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
        return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
    }
    /** @type {?} */
    const m = prefixedWith(segmentGroup, startIndex, commands);
    /** @type {?} */
    const slicedCommands = commands.slice(m.commandIndex);
    if (m.match && m.pathIndex < segmentGroup.segments.length) {
        /** @type {?} */
        const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
        g.children[PRIMARY_OUTLET] =
            new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
        return updateSegmentGroupChildren(g, 0, slicedCommands);
    }
    else if (m.match && slicedCommands.length === 0) {
        return new UrlSegmentGroup(segmentGroup.segments, {});
    }
    else if (m.match && !segmentGroup.hasChildren()) {
        return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
    else if (m.match) {
        return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
    }
    else {
        return createNewSegmentGroup(segmentGroup, startIndex, commands);
    }
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
    if (commands.length === 0) {
        return new UrlSegmentGroup(segmentGroup.segments, {});
    }
    else {
        /** @type {?} */
        const outlets = getOutlets(commands);
        /** @type {?} */
        const children = {};
        forEach(outlets, (/**
         * @param {?} commands
         * @param {?} outlet
         * @return {?}
         */
        (commands, outlet) => {
            if (commands !== null) {
                children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands);
            }
        }));
        forEach(segmentGroup.children, (/**
         * @param {?} child
         * @param {?} childOutlet
         * @return {?}
         */
        (child, childOutlet) => {
            if (outlets[childOutlet] === undefined) {
                children[childOutlet] = child;
            }
        }));
        return new UrlSegmentGroup(segmentGroup.segments, children);
    }
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function prefixedWith(segmentGroup, startIndex, commands) {
    /** @type {?} */
    let currentCommandIndex = 0;
    /** @type {?} */
    let currentPathIndex = startIndex;
    /** @type {?} */
    const noMatch = { match: false, pathIndex: 0, commandIndex: 0 };
    while (currentPathIndex < segmentGroup.segments.length) {
        if (currentCommandIndex >= commands.length)
            return noMatch;
        /** @type {?} */
        const path = segmentGroup.segments[currentPathIndex];
        /** @type {?} */
        const curr = getPath(commands[currentCommandIndex]);
        /** @type {?} */
        const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
        if (currentPathIndex > 0 && curr === undefined)
            break;
        if (curr && next && (typeof next === 'object') && next.outlets === undefined) {
            if (!compare(curr, next, path))
                return noMatch;
            currentCommandIndex += 2;
        }
        else {
            if (!compare(curr, {}, path))
                return noMatch;
            currentCommandIndex++;
        }
        currentPathIndex++;
    }
    return { match: true, pathIndex: currentPathIndex, commandIndex: currentCommandIndex };
}
/**
 * @param {?} segmentGroup
 * @param {?} startIndex
 * @param {?} commands
 * @return {?}
 */
function createNewSegmentGroup(segmentGroup, startIndex, commands) {
    /** @type {?} */
    const paths = segmentGroup.segments.slice(0, startIndex);
    /** @type {?} */
    let i = 0;
    while (i < commands.length) {
        if (typeof commands[i] === 'object' && commands[i].outlets !== undefined) {
            /** @type {?} */
            const children = createNewSegmentChildren(commands[i].outlets);
            return new UrlSegmentGroup(paths, children);
        }
        // if we start with an object literal, we need to reuse the path part from the segment
        if (i === 0 && isMatrixParams(commands[0])) {
            /** @type {?} */
            const p = segmentGroup.segments[startIndex];
            paths.push(new UrlSegment(p.path, commands[0]));
            i++;
            continue;
        }
        /** @type {?} */
        const curr = getPath(commands[i]);
        /** @type {?} */
        const next = (i < commands.length - 1) ? commands[i + 1] : null;
        if (curr && next && isMatrixParams(next)) {
            paths.push(new UrlSegment(curr, stringify(next)));
            i += 2;
        }
        else {
            paths.push(new UrlSegment(curr, {}));
            i++;
        }
    }
    return new UrlSegmentGroup(paths, {});
}
/**
 * @param {?} outlets
 * @return {?}
 */
function createNewSegmentChildren(outlets) {
    /** @type {?} */
    const children = {};
    forEach(outlets, (/**
     * @param {?} commands
     * @param {?} outlet
     * @return {?}
     */
    (commands, outlet) => {
        if (commands !== null) {
            children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
        }
    }));
    return children;
}
/**
 * @param {?} params
 * @return {?}
 */
function stringify(params) {
    /** @type {?} */
    const res = {};
    forEach(params, (/**
     * @param {?} v
     * @param {?} k
     * @return {?}
     */
    (v, k) => res[k] = `${v}`));
    return res;
}
/**
 * @param {?} path
 * @param {?} params
 * @param {?} segment
 * @return {?}
 */
function compare(path, params, segment) {
    return path == segment.path && shallowEqual(params, segment.parameters);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/operators/activate_routes.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const activateRoutes = (/**
 * @param {?} rootContexts
 * @param {?} routeReuseStrategy
 * @param {?} forwardEvent
 * @return {?}
 */
(rootContexts, routeReuseStrategy, forwardEvent) => Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
 * @param {?} t
 * @return {?}
 */
t => {
    new ActivateRoutes(routeReuseStrategy, (/** @type {?} */ (t.targetRouterState)), t.currentRouterState, forwardEvent)
        .activate(rootContexts);
    return t;
})));
class ActivateRoutes {
    /**
     * @param {?} routeReuseStrategy
     * @param {?} futureState
     * @param {?} currState
     * @param {?} forwardEvent
     */
    constructor(routeReuseStrategy, futureState, currState, forwardEvent) {
        this.routeReuseStrategy = routeReuseStrategy;
        this.futureState = futureState;
        this.currState = currState;
        this.forwardEvent = forwardEvent;
    }
    /**
     * @param {?} parentContexts
     * @return {?}
     */
    activate(parentContexts) {
        /** @type {?} */
        const futureRoot = this.futureState._root;
        /** @type {?} */
        const currRoot = this.currState ? this.currState._root : null;
        this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
        advanceActivatedRoute(this.futureState.root);
        this.activateChildRoutes(futureRoot, currRoot, parentContexts);
    }
    // De-activate the child route that are not re-used for the future state
    /**
     * @private
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} contexts
     * @return {?}
     */
    deactivateChildRoutes(futureNode, currNode, contexts) {
        /** @type {?} */
        const children = nodeChildrenAsMap(currNode);
        // Recurse on the routes active in the future state to de-activate deeper children
        futureNode.children.forEach((/**
         * @param {?} futureChild
         * @return {?}
         */
        futureChild => {
            /** @type {?} */
            const childOutletName = futureChild.value.outlet;
            this.deactivateRoutes(futureChild, children[childOutletName], contexts);
            delete children[childOutletName];
        }));
        // De-activate the routes that will not be re-used
        forEach(children, (/**
         * @param {?} v
         * @param {?} childName
         * @return {?}
         */
        (v, childName) => {
            this.deactivateRouteAndItsChildren(v, contexts);
        }));
    }
    /**
     * @private
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentContext
     * @return {?}
     */
    deactivateRoutes(futureNode, currNode, parentContext) {
        /** @type {?} */
        const future = futureNode.value;
        /** @type {?} */
        const curr = currNode ? currNode.value : null;
        if (future === curr) {
            // Reusing the node, check to see if the children need to be de-activated
            if (future.component) {
                // If we have a normal route, we need to go through an outlet.
                /** @type {?} */
                const context = parentContext.getContext(future.outlet);
                if (context) {
                    this.deactivateChildRoutes(futureNode, currNode, context.children);
                }
            }
            else {
                // if we have a componentless route, we recurse but keep the same outlet map.
                this.deactivateChildRoutes(futureNode, currNode, parentContext);
            }
        }
        else {
            if (curr) {
                // Deactivate the current route which will not be re-used
                this.deactivateRouteAndItsChildren(currNode, parentContext);
            }
        }
    }
    /**
     * @private
     * @param {?} route
     * @param {?} parentContexts
     * @return {?}
     */
    deactivateRouteAndItsChildren(route, parentContexts) {
        if (this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
            this.detachAndStoreRouteSubtree(route, parentContexts);
        }
        else {
            this.deactivateRouteAndOutlet(route, parentContexts);
        }
    }
    /**
     * @private
     * @param {?} route
     * @param {?} parentContexts
     * @return {?}
     */
    detachAndStoreRouteSubtree(route, parentContexts) {
        /** @type {?} */
        const context = parentContexts.getContext(route.value.outlet);
        if (context && context.outlet) {
            /** @type {?} */
            const componentRef = context.outlet.detach();
            /** @type {?} */
            const contexts = context.children.onOutletDeactivated();
            this.routeReuseStrategy.store(route.value.snapshot, { componentRef, route, contexts });
        }
    }
    /**
     * @private
     * @param {?} route
     * @param {?} parentContexts
     * @return {?}
     */
    deactivateRouteAndOutlet(route, parentContexts) {
        /** @type {?} */
        const context = parentContexts.getContext(route.value.outlet);
        if (context) {
            /** @type {?} */
            const children = nodeChildrenAsMap(route);
            /** @type {?} */
            const contexts = route.value.component ? context.children : parentContexts;
            forEach(children, (/**
             * @param {?} v
             * @param {?} k
             * @return {?}
             */
            (v, k) => this.deactivateRouteAndItsChildren(v, contexts)));
            if (context.outlet) {
                // Destroy the component
                context.outlet.deactivate();
                // Destroy the contexts for all the outlets that were in the component
                context.children.onOutletDeactivated();
            }
        }
    }
    /**
     * @private
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} contexts
     * @return {?}
     */
    activateChildRoutes(futureNode, currNode, contexts) {
        /** @type {?} */
        const children = nodeChildrenAsMap(currNode);
        futureNode.children.forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => {
            this.activateRoutes(c, children[c.value.outlet], contexts);
            this.forwardEvent(new ActivationEnd(c.value.snapshot));
        }));
        if (futureNode.children.length) {
            this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));
        }
    }
    /**
     * @private
     * @param {?} futureNode
     * @param {?} currNode
     * @param {?} parentContexts
     * @return {?}
     */
    activateRoutes(futureNode, currNode, parentContexts) {
        /** @type {?} */
        const future = futureNode.value;
        /** @type {?} */
        const curr = currNode ? currNode.value : null;
        advanceActivatedRoute(future);
        // reusing the node
        if (future === curr) {
            if (future.component) {
                // If we have a normal route, we need to go through an outlet.
                /** @type {?} */
                const context = parentContexts.getOrCreateContext(future.outlet);
                this.activateChildRoutes(futureNode, currNode, context.children);
            }
            else {
                // if we have a componentless route, we recurse but keep the same outlet map.
                this.activateChildRoutes(futureNode, currNode, parentContexts);
            }
        }
        else {
            if (future.component) {
                // if we have a normal route, we need to place the component into the outlet and recurse.
                /** @type {?} */
                const context = parentContexts.getOrCreateContext(future.outlet);
                if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
                    /** @type {?} */
                    const stored = ((/** @type {?} */ (this.routeReuseStrategy.retrieve(future.snapshot))));
                    this.routeReuseStrategy.store(future.snapshot, null);
                    context.children.onOutletReAttached(stored.contexts);
                    context.attachRef = stored.componentRef;
                    context.route = stored.route.value;
                    if (context.outlet) {
                        // Attach right away when the outlet has already been instantiated
                        // Otherwise attach from `RouterOutlet.ngOnInit` when it is instantiated
                        context.outlet.attach(stored.componentRef, stored.route.value);
                    }
                    advanceActivatedRouteNodeAndItsChildren(stored.route);
                }
                else {
                    /** @type {?} */
                    const config = parentLoadedConfig(future.snapshot);
                    /** @type {?} */
                    const cmpFactoryResolver = config ? config.module.componentFactoryResolver : null;
                    context.attachRef = null;
                    context.route = future;
                    context.resolver = cmpFactoryResolver;
                    if (context.outlet) {
                        // Activate the outlet when it has already been instantiated
                        // Otherwise it will get activated from its `ngOnInit` when instantiated
                        context.outlet.activateWith(future, cmpFactoryResolver);
                    }
                    this.activateChildRoutes(futureNode, null, context.children);
                }
            }
            else {
                // if we have a componentless route, we recurse but keep the same outlet map.
                this.activateChildRoutes(futureNode, null, parentContexts);
            }
        }
    }
}
if (false) {}
/**
 * @param {?} node
 * @return {?}
 */
function advanceActivatedRouteNodeAndItsChildren(node) {
    advanceActivatedRoute(node.value);
    node.children.forEach(advanceActivatedRouteNodeAndItsChildren);
}
/**
 * @param {?} snapshot
 * @return {?}
 */
function parentLoadedConfig(snapshot) {
    for (let s = snapshot.parent; s; s = s.parent) {
        /** @type {?} */
        const route = s.routeConfig;
        if (route && route._loadedConfig)
            return route._loadedConfig;
        if (route && route.component)
            return null;
    }
    return null;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/utils/type_guards.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Simple function check, but generic so type inference will flow. Example:
 *
 * function product(a: number, b: number) {
 *   return a * b;
 * }
 *
 * if (isFunction<product>(fn)) {
 *   return fn(1, 2);
 * } else {
 *   throw "Must provide the `product` function";
 * }
 * @template T
 * @param {?} v
 * @return {?}
 */
function isFunction(v) {
    return typeof v === 'function';
}
/**
 * @param {?} v
 * @return {?}
 */
function isBoolean(v) {
    return typeof v === 'boolean';
}
/**
 * @param {?} v
 * @return {?}
 */
function isUrlTree(v) {
    return v instanceof UrlTree;
}
/**
 * @param {?} guard
 * @return {?}
 */
function isCanLoad(guard) {
    return guard && isFunction(guard.canLoad);
}
/**
 * @param {?} guard
 * @return {?}
 */
function isCanActivate(guard) {
    return guard && isFunction(guard.canActivate);
}
/**
 * @param {?} guard
 * @return {?}
 */
function isCanActivateChild(guard) {
    return guard && isFunction(guard.canActivateChild);
}
/**
 * @template T
 * @param {?} guard
 * @return {?}
 */
function isCanDeactivate(guard) {
    return guard && isFunction(guard.canDeactivate);
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/apply_redirects.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NoMatch {
    /**
     * @param {?=} segmentGroup
     */
    constructor(segmentGroup) { this.segmentGroup = segmentGroup || null; }
}
if (false) {}
class AbsoluteRedirect {
    /**
     * @param {?} urlTree
     */
    constructor(urlTree) {
        this.urlTree = urlTree;
    }
}
if (false) {}
/**
 * @param {?} segmentGroup
 * @return {?}
 */
function noMatch(segmentGroup) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]((/**
     * @param {?} obs
     * @return {?}
     */
    (obs) => obs.error(new NoMatch(segmentGroup))));
}
/**
 * @param {?} newTree
 * @return {?}
 */
function absoluteRedirect(newTree) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]((/**
     * @param {?} obs
     * @return {?}
     */
    (obs) => obs.error(new AbsoluteRedirect(newTree))));
}
/**
 * @param {?} redirectTo
 * @return {?}
 */
function namedOutletsRedirect(redirectTo) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]((/**
     * @param {?} obs
     * @return {?}
     */
    (obs) => obs.error(new Error(`Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`))));
}
/**
 * @param {?} route
 * @return {?}
 */
function canLoadFails(route) {
    return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]((/**
     * @param {?} obs
     * @return {?}
     */
    (obs) => obs.error(navigationCancelingError(`Cannot load children because the guard of the route "path: '${route.path}'" returned false`))));
}
/**
 * Returns the `UrlTree` with the redirection applied.
 *
 * Lazy modules are loaded along the way.
 * @param {?} moduleInjector
 * @param {?} configLoader
 * @param {?} urlSerializer
 * @param {?} urlTree
 * @param {?} config
 * @return {?}
 */
function applyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config) {
    return new ApplyRedirects(moduleInjector, configLoader, urlSerializer, urlTree, config).apply();
}
class ApplyRedirects {
    /**
     * @param {?} moduleInjector
     * @param {?} configLoader
     * @param {?} urlSerializer
     * @param {?} urlTree
     * @param {?} config
     */
    constructor(moduleInjector, configLoader, urlSerializer, urlTree, config) {
        this.configLoader = configLoader;
        this.urlSerializer = urlSerializer;
        this.urlTree = urlTree;
        this.config = config;
        this.allowRedirects = true;
        this.ngModule = moduleInjector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModuleRef"]);
    }
    /**
     * @return {?}
     */
    apply() {
        /** @type {?} */
        const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, this.urlTree.root, PRIMARY_OUTLET);
        /** @type {?} */
        const urlTrees$ = expanded$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} rootSegmentGroup
         * @return {?}
         */
        (rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, this.urlTree.queryParams, (/** @type {?} */ (this.urlTree.fragment))))));
        return urlTrees$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e instanceof AbsoluteRedirect) {
                // after an absolute redirect we do not apply any more redirects!
                this.allowRedirects = false;
                // we need to run matching, so we can fetch all lazy-loaded modules
                return this.match(e.urlTree);
            }
            if (e instanceof NoMatch) {
                throw this.noMatchError(e);
            }
            throw e;
        })));
    }
    /**
     * @private
     * @param {?} tree
     * @return {?}
     */
    match(tree) {
        /** @type {?} */
        const expanded$ = this.expandSegmentGroup(this.ngModule, this.config, tree.root, PRIMARY_OUTLET);
        /** @type {?} */
        const mapped$ = expanded$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} rootSegmentGroup
         * @return {?}
         */
        (rootSegmentGroup) => this.createUrlTree(rootSegmentGroup, tree.queryParams, (/** @type {?} */ (tree.fragment))))));
        return mapped$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e instanceof NoMatch) {
                throw this.noMatchError(e);
            }
            throw e;
        })));
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    noMatchError(e) {
        return new Error(`Cannot match any routes. URL Segment: '${e.segmentGroup}'`);
    }
    /**
     * @private
     * @param {?} rootCandidate
     * @param {?} queryParams
     * @param {?} fragment
     * @return {?}
     */
    createUrlTree(rootCandidate, queryParams, fragment) {
        /** @type {?} */
        const root = rootCandidate.segments.length > 0 ?
            new UrlSegmentGroup([], { [PRIMARY_OUTLET]: rootCandidate }) :
            rootCandidate;
        return new UrlTree(root, queryParams, fragment);
    }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} routes
     * @param {?} segmentGroup
     * @param {?} outlet
     * @return {?}
     */
    expandSegmentGroup(ngModule, routes, segmentGroup, outlet) {
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return this.expandChildren(ngModule, routes, segmentGroup)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @param {?} children
             * @return {?}
             */
            (children) => new UrlSegmentGroup([], children))));
        }
        return this.expandSegment(ngModule, segmentGroup, routes, segmentGroup.segments, outlet, true);
    }
    // Recursively expand segment groups for all the child outlets
    /**
     * @private
     * @param {?} ngModule
     * @param {?} routes
     * @param {?} segmentGroup
     * @return {?}
     */
    expandChildren(ngModule, routes, segmentGroup) {
        return waitForMap(segmentGroup.children, (/**
         * @param {?} childOutlet
         * @param {?} child
         * @return {?}
         */
        (childOutlet, child) => this.expandSegmentGroup(ngModule, routes, child, childOutlet)));
    }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} segments
     * @param {?} outlet
     * @param {?} allowRedirects
     * @return {?}
     */
    expandSegment(ngModule, segmentGroup, routes, segments, outlet, allowRedirects) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(...routes).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            /** @type {?} */
            const expanded$ = this.expandSegmentAgainstRoute(ngModule, segmentGroup, routes, r, segments, outlet, allowRedirects);
            return expanded$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e instanceof NoMatch) {
                    // TODO(i): this return type doesn't match the declared Observable<UrlSegmentGroup> -
                    // talk to Jason
                    return (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null)));
                }
                throw e;
            })));
        })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["concatAll"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["first"])((/**
         * @param {?} s
         * @return {?}
         */
        (s) => !!s)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])((/**
         * @param {?} e
         * @param {?} _
         * @return {?}
         */
        (e, _) => {
            if (e instanceof rxjs__WEBPACK_IMPORTED_MODULE_2__["EmptyError"] || e.name === 'EmptyError') {
                if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(new UrlSegmentGroup([], {}));
                }
                throw new NoMatch(segmentGroup);
            }
            throw e;
        })));
    }
    /**
     * @private
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    noLeftoversInUrl(segmentGroup, segments, outlet) {
        return segments.length === 0 && !segmentGroup.children[outlet];
    }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} paths
     * @param {?} outlet
     * @param {?} allowRedirects
     * @return {?}
     */
    expandSegmentAgainstRoute(ngModule, segmentGroup, routes, route, paths, outlet, allowRedirects) {
        if (getOutlet(route) !== outlet) {
            return noMatch(segmentGroup);
        }
        if (route.redirectTo === undefined) {
            return this.matchSegmentAgainstRoute(ngModule, segmentGroup, route, paths);
        }
        if (allowRedirects && this.allowRedirects) {
            return this.expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, paths, outlet);
        }
        return noMatch(segmentGroup);
    }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    expandSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {
        if (route.path === '**') {
            return this.expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet);
        }
        return this.expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet);
    }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} routes
     * @param {?} route
     * @param {?} outlet
     * @return {?}
     */
    expandWildCardWithParamsAgainstRouteUsingRedirect(ngModule, routes, route, outlet) {
        /** @type {?} */
        const newTree = this.applyRedirectCommands([], (/** @type {?} */ (route.redirectTo)), {});
        if ((/** @type {?} */ (route.redirectTo)).startsWith('/')) {
            return absoluteRedirect(newTree);
        }
        return this.lineralizeSegments(route, newTree).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
         * @param {?} newSegments
         * @return {?}
         */
        (newSegments) => {
            /** @type {?} */
            const group = new UrlSegmentGroup(newSegments, {});
            return this.expandSegment(ngModule, group, routes, newSegments, outlet, false);
        })));
    }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} segmentGroup
     * @param {?} routes
     * @param {?} route
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    expandRegularSegmentAgainstRouteUsingRedirect(ngModule, segmentGroup, routes, route, segments, outlet) {
        const { matched, consumedSegments, lastChild, positionalParamSegments } = match(segmentGroup, route, segments);
        if (!matched)
            return noMatch(segmentGroup);
        /** @type {?} */
        const newTree = this.applyRedirectCommands(consumedSegments, (/** @type {?} */ (route.redirectTo)), (/** @type {?} */ (positionalParamSegments)));
        if ((/** @type {?} */ (route.redirectTo)).startsWith('/')) {
            return absoluteRedirect(newTree);
        }
        return this.lineralizeSegments(route, newTree).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
         * @param {?} newSegments
         * @return {?}
         */
        (newSegments) => {
            return this.expandSegment(ngModule, segmentGroup, routes, newSegments.concat(segments.slice(lastChild)), outlet, false);
        })));
    }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} rawSegmentGroup
     * @param {?} route
     * @param {?} segments
     * @return {?}
     */
    matchSegmentAgainstRoute(ngModule, rawSegmentGroup, route, segments) {
        if (route.path === '**') {
            if (route.loadChildren) {
                return this.configLoader.load(ngModule.injector, route)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
                 * @param {?} cfg
                 * @return {?}
                 */
                (cfg) => {
                    route._loadedConfig = cfg;
                    return new UrlSegmentGroup(segments, {});
                })));
            }
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(new UrlSegmentGroup(segments, {}));
        }
        const { matched, consumedSegments, lastChild } = match(rawSegmentGroup, route, segments);
        if (!matched)
            return noMatch(rawSegmentGroup);
        /** @type {?} */
        const rawSlicedSegments = segments.slice(lastChild);
        /** @type {?} */
        const childConfig$ = this.getChildConfig(ngModule, route, segments);
        return childConfig$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
         * @param {?} routerConfig
         * @return {?}
         */
        (routerConfig) => {
            /** @type {?} */
            const childModule = routerConfig.module;
            /** @type {?} */
            const childConfig = routerConfig.routes;
            const { segmentGroup, slicedSegments } = split(rawSegmentGroup, consumedSegments, rawSlicedSegments, childConfig);
            if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
                /** @type {?} */
                const expanded$ = this.expandChildren(childModule, childConfig, segmentGroup);
                return expanded$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
                 * @param {?} children
                 * @return {?}
                 */
                (children) => new UrlSegmentGroup(consumedSegments, children))));
            }
            if (childConfig.length === 0 && slicedSegments.length === 0) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(new UrlSegmentGroup(consumedSegments, {}));
            }
            /** @type {?} */
            const expanded$ = this.expandSegment(childModule, segmentGroup, childConfig, slicedSegments, PRIMARY_OUTLET, true);
            return expanded$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @param {?} cs
             * @return {?}
             */
            (cs) => new UrlSegmentGroup(consumedSegments.concat(cs.segments), cs.children))));
        })));
    }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} route
     * @param {?} segments
     * @return {?}
     */
    getChildConfig(ngModule, route, segments) {
        if (route.children) {
            // The children belong to the same module
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(new LoadedRouterConfig(route.children, ngModule));
        }
        if (route.loadChildren) {
            // lazy children belong to the loaded module
            if (route._loadedConfig !== undefined) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(route._loadedConfig);
            }
            return runCanLoadGuard(ngModule.injector, route, segments)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
             * @param {?} shouldLoad
             * @return {?}
             */
            (shouldLoad) => {
                if (shouldLoad) {
                    return this.configLoader.load(ngModule.injector, route)
                        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
                     * @param {?} cfg
                     * @return {?}
                     */
                    (cfg) => {
                        route._loadedConfig = cfg;
                        return cfg;
                    })));
                }
                return canLoadFails(route);
            })));
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(new LoadedRouterConfig([], ngModule));
    }
    /**
     * @private
     * @param {?} route
     * @param {?} urlTree
     * @return {?}
     */
    lineralizeSegments(route, urlTree) {
        /** @type {?} */
        let res = [];
        /** @type {?} */
        let c = urlTree.root;
        while (true) {
            res = res.concat(c.segments);
            if (c.numberOfChildren === 0) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(res);
            }
            if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
                return namedOutletsRedirect((/** @type {?} */ (route.redirectTo)));
            }
            c = c.children[PRIMARY_OUTLET];
        }
    }
    /**
     * @private
     * @param {?} segments
     * @param {?} redirectTo
     * @param {?} posParams
     * @return {?}
     */
    applyRedirectCommands(segments, redirectTo, posParams) {
        return this.applyRedirectCreatreUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    }
    /**
     * @private
     * @param {?} redirectTo
     * @param {?} urlTree
     * @param {?} segments
     * @param {?} posParams
     * @return {?}
     */
    applyRedirectCreatreUrlTree(redirectTo, urlTree, segments, posParams) {
        /** @type {?} */
        const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
        return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
    }
    /**
     * @private
     * @param {?} redirectToParams
     * @param {?} actualParams
     * @return {?}
     */
    createQueryParams(redirectToParams, actualParams) {
        /** @type {?} */
        const res = {};
        forEach(redirectToParams, (/**
         * @param {?} v
         * @param {?} k
         * @return {?}
         */
        (v, k) => {
            /** @type {?} */
            const copySourceValue = typeof v === 'string' && v.startsWith(':');
            if (copySourceValue) {
                /** @type {?} */
                const sourceName = v.substring(1);
                res[k] = actualParams[sourceName];
            }
            else {
                res[k] = v;
            }
        }));
        return res;
    }
    /**
     * @private
     * @param {?} redirectTo
     * @param {?} group
     * @param {?} segments
     * @param {?} posParams
     * @return {?}
     */
    createSegmentGroup(redirectTo, group, segments, posParams) {
        /** @type {?} */
        const updatedSegments = this.createSegments(redirectTo, group.segments, segments, posParams);
        /** @type {?} */
        let children = {};
        forEach(group.children, (/**
         * @param {?} child
         * @param {?} name
         * @return {?}
         */
        (child, name) => {
            children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);
        }));
        return new UrlSegmentGroup(updatedSegments, children);
    }
    /**
     * @private
     * @param {?} redirectTo
     * @param {?} redirectToSegments
     * @param {?} actualSegments
     * @param {?} posParams
     * @return {?}
     */
    createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {
        return redirectToSegments.map((/**
         * @param {?} s
         * @return {?}
         */
        s => s.path.startsWith(':') ? this.findPosParam(redirectTo, s, posParams) :
            this.findOrReturn(s, actualSegments)));
    }
    /**
     * @private
     * @param {?} redirectTo
     * @param {?} redirectToUrlSegment
     * @param {?} posParams
     * @return {?}
     */
    findPosParam(redirectTo, redirectToUrlSegment, posParams) {
        /** @type {?} */
        const pos = posParams[redirectToUrlSegment.path.substring(1)];
        if (!pos)
            throw new Error(`Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);
        return pos;
    }
    /**
     * @private
     * @param {?} redirectToUrlSegment
     * @param {?} actualSegments
     * @return {?}
     */
    findOrReturn(redirectToUrlSegment, actualSegments) {
        /** @type {?} */
        let idx = 0;
        for (const s of actualSegments) {
            if (s.path === redirectToUrlSegment.path) {
                actualSegments.splice(idx);
                return s;
            }
            idx++;
        }
        return redirectToUrlSegment;
    }
}
if (false) {}
/**
 * @param {?} moduleInjector
 * @param {?} route
 * @param {?} segments
 * @return {?}
 */
function runCanLoadGuard(moduleInjector, route, segments) {
    /** @type {?} */
    const canLoad = route.canLoad;
    if (!canLoad || canLoad.length === 0)
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(true);
    /** @type {?} */
    const obs = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(canLoad).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
     * @param {?} injectionToken
     * @return {?}
     */
    (injectionToken) => {
        /** @type {?} */
        const guard = moduleInjector.get(injectionToken);
        /** @type {?} */
        let guardVal;
        if (isCanLoad(guard)) {
            guardVal = guard.canLoad(route, segments);
        }
        else if (isFunction(guard)) {
            guardVal = guard(route, segments);
        }
        else {
            throw new Error('Invalid CanLoad guard');
        }
        return wrapIntoObservable(guardVal);
    })));
    return obs.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["concatAll"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["every"])((/**
     * @param {?} result
     * @return {?}
     */
    result => result === true)));
}
/**
 * @param {?} segmentGroup
 * @param {?} route
 * @param {?} segments
 * @return {?}
 */
function match(segmentGroup, route, segments) {
    if (route.path === '') {
        if ((route.pathMatch === 'full') && (segmentGroup.hasChildren() || segments.length > 0)) {
            return { matched: false, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
        }
        return { matched: true, consumedSegments: [], lastChild: 0, positionalParamSegments: {} };
    }
    /** @type {?} */
    const matcher = route.matcher || defaultUrlMatcher;
    /** @type {?} */
    const res = matcher(segments, segmentGroup, route);
    if (!res) {
        return {
            matched: false,
            consumedSegments: (/** @type {?} */ ([])),
            lastChild: 0,
            positionalParamSegments: {},
        };
    }
    return {
        matched: true,
        consumedSegments: (/** @type {?} */ (res.consumed)),
        lastChild: (/** @type {?} */ (res.consumed.length)),
        positionalParamSegments: (/** @type {?} */ (res.posParams)),
    };
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} slicedSegments
 * @param {?} config
 * @return {?}
 */
function split(segmentGroup, consumedSegments, slicedSegments, config) {
    if (slicedSegments.length > 0 &&
        containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, slicedSegments, config)) {
        /** @type {?} */
        const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptySegments(config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
        return { segmentGroup: mergeTrivialChildren(s), slicedSegments: [] };
    }
    if (slicedSegments.length === 0 &&
        containsEmptyPathRedirects(segmentGroup, slicedSegments, config)) {
        /** @type {?} */
        const s = new UrlSegmentGroup(segmentGroup.segments, addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, config, segmentGroup.children));
        return { segmentGroup: mergeTrivialChildren(s), slicedSegments };
    }
    return { segmentGroup, slicedSegments };
}
/**
 * @param {?} s
 * @return {?}
 */
function mergeTrivialChildren(s) {
    if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
        /** @type {?} */
        const c = s.children[PRIMARY_OUTLET];
        return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
    }
    return s;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @param {?} children
 * @return {?}
 */
function addEmptySegmentsToChildrenIfNeeded(segmentGroup, slicedSegments, routes, children) {
    /** @type {?} */
    const res = {};
    for (const r of routes) {
        if (isEmptyPathRedirect(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
            res[getOutlet(r)] = new UrlSegmentGroup([], {});
        }
    }
    return Object.assign(Object.assign({}, children), res);
}
/**
 * @param {?} routes
 * @param {?} primarySegmentGroup
 * @return {?}
 */
function createChildrenForEmptySegments(routes, primarySegmentGroup) {
    /** @type {?} */
    const res = {};
    res[PRIMARY_OUTLET] = primarySegmentGroup;
    for (const r of routes) {
        if (r.path === '' && getOutlet(r) !== PRIMARY_OUTLET) {
            res[getOutlet(r)] = new UrlSegmentGroup([], {});
        }
    }
    return res;
}
/**
 * @param {?} segmentGroup
 * @param {?} segments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathRedirectsWithNamedOutlets(segmentGroup, segments, routes) {
    return routes.some((/**
     * @param {?} r
     * @return {?}
     */
    r => isEmptyPathRedirect(segmentGroup, segments, r) && getOutlet(r) !== PRIMARY_OUTLET));
}
/**
 * @param {?} segmentGroup
 * @param {?} segments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathRedirects(segmentGroup, segments, routes) {
    return routes.some((/**
     * @param {?} r
     * @return {?}
     */
    r => isEmptyPathRedirect(segmentGroup, segments, r)));
}
/**
 * @param {?} segmentGroup
 * @param {?} segments
 * @param {?} r
 * @return {?}
 */
function isEmptyPathRedirect(segmentGroup, segments, r) {
    if ((segmentGroup.hasChildren() || segments.length > 0) && r.pathMatch === 'full') {
        return false;
    }
    return r.path === '' && r.redirectTo !== undefined;
}
/**
 * @param {?} route
 * @return {?}
 */
function getOutlet(route) {
    return route.outlet || PRIMARY_OUTLET;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/operators/apply_redirects.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} moduleInjector
 * @param {?} configLoader
 * @param {?} urlSerializer
 * @param {?} config
 * @return {?}
 */
function applyRedirects$1(moduleInjector, configLoader, urlSerializer, config) {
    return (/**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return source.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
         * @param {?} t
         * @return {?}
         */
        t => applyRedirects(moduleInjector, configLoader, urlSerializer, t.extractedUrl, config)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} urlAfterRedirects
         * @return {?}
         */
        urlAfterRedirects => (Object.assign(Object.assign({}, t), { urlAfterRedirects }))))))));
    });
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/utils/preactivation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CanActivate {
    /**
     * @param {?} path
     */
    constructor(path) {
        this.path = path;
        this.route = this.path[this.path.length - 1];
    }
}
if (false) {}
class CanDeactivate {
    /**
     * @param {?} component
     * @param {?} route
     */
    constructor(component, route) {
        this.component = component;
        this.route = route;
    }
}
if (false) {}
/**
 * @param {?} future
 * @param {?} curr
 * @param {?} parentContexts
 * @return {?}
 */
function getAllRouteGuards(future, curr, parentContexts) {
    /** @type {?} */
    const futureRoot = future._root;
    /** @type {?} */
    const currRoot = curr ? curr._root : null;
    return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);
}
/**
 * @param {?} p
 * @return {?}
 */
function getCanActivateChild(p) {
    /** @type {?} */
    const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;
    if (!canActivateChild || canActivateChild.length === 0)
        return null;
    return { node: p, guards: canActivateChild };
}
/**
 * @param {?} token
 * @param {?} snapshot
 * @param {?} moduleInjector
 * @return {?}
 */
function getToken(token, snapshot, moduleInjector) {
    /** @type {?} */
    const config = getClosestLoadedConfig(snapshot);
    /** @type {?} */
    const injector = config ? config.module.injector : moduleInjector;
    return injector.get(token);
}
/**
 * @param {?} snapshot
 * @return {?}
 */
function getClosestLoadedConfig(snapshot) {
    if (!snapshot)
        return null;
    for (let s = snapshot.parent; s; s = s.parent) {
        /** @type {?} */
        const route = s.routeConfig;
        if (route && route._loadedConfig)
            return route._loadedConfig;
    }
    return null;
}
/**
 * @param {?} futureNode
 * @param {?} currNode
 * @param {?} contexts
 * @param {?} futurePath
 * @param {?=} checks
 * @return {?}
 */
function getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {
    canDeactivateChecks: [],
    canActivateChecks: []
}) {
    /** @type {?} */
    const prevChildren = nodeChildrenAsMap(currNode);
    // Process the children of the future route
    futureNode.children.forEach((/**
     * @param {?} c
     * @return {?}
     */
    c => {
        getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);
        delete prevChildren[c.value.outlet];
    }));
    // Process any children left from the current route (not active for the future route)
    forEach(prevChildren, (/**
     * @param {?} v
     * @param {?} k
     * @return {?}
     */
    (v, k) => deactivateRouteAndItsChildren(v, (/** @type {?} */ (contexts)).getContext(k), checks)));
    return checks;
}
/**
 * @param {?} futureNode
 * @param {?} currNode
 * @param {?} parentContexts
 * @param {?} futurePath
 * @param {?=} checks
 * @return {?}
 */
function getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {
    canDeactivateChecks: [],
    canActivateChecks: []
}) {
    /** @type {?} */
    const future = futureNode.value;
    /** @type {?} */
    const curr = currNode ? currNode.value : null;
    /** @type {?} */
    const context = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;
    // reusing the node
    if (curr && future.routeConfig === curr.routeConfig) {
        /** @type {?} */
        const shouldRun = shouldRunGuardsAndResolvers(curr, future, (/** @type {?} */ (future.routeConfig)).runGuardsAndResolvers);
        if (shouldRun) {
            checks.canActivateChecks.push(new CanActivate(futurePath));
        }
        else {
            // we need to set the data
            future.data = curr.data;
            future._resolvedData = curr._resolvedData;
        }
        // If we have a component, we need to go through an outlet.
        if (future.component) {
            getChildRouteGuards(futureNode, currNode, context ? context.children : null, futurePath, checks);
            // if we have a componentless route, we recurse but keep the same outlet map.
        }
        else {
            getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);
        }
        if (shouldRun) {
            /** @type {?} */
            const component = context && context.outlet && context.outlet.component || null;
            checks.canDeactivateChecks.push(new CanDeactivate(component, curr));
        }
    }
    else {
        if (curr) {
            deactivateRouteAndItsChildren(currNode, context, checks);
        }
        checks.canActivateChecks.push(new CanActivate(futurePath));
        // If we have a component, we need to go through an outlet.
        if (future.component) {
            getChildRouteGuards(futureNode, null, context ? context.children : null, futurePath, checks);
            // if we have a componentless route, we recurse but keep the same outlet map.
        }
        else {
            getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);
        }
    }
    return checks;
}
/**
 * @param {?} curr
 * @param {?} future
 * @param {?} mode
 * @return {?}
 */
function shouldRunGuardsAndResolvers(curr, future, mode) {
    if (typeof mode === 'function') {
        return mode(curr, future);
    }
    switch (mode) {
        case 'pathParamsChange':
            return !equalPath(curr.url, future.url);
        case 'pathParamsOrQueryParamsChange':
            return !equalPath(curr.url, future.url) ||
                !shallowEqual(curr.queryParams, future.queryParams);
        case 'always':
            return true;
        case 'paramsOrQueryParamsChange':
            return !equalParamsAndUrlSegments(curr, future) ||
                !shallowEqual(curr.queryParams, future.queryParams);
        case 'paramsChange':
        default:
            return !equalParamsAndUrlSegments(curr, future);
    }
}
/**
 * @param {?} route
 * @param {?} context
 * @param {?} checks
 * @return {?}
 */
function deactivateRouteAndItsChildren(route, context, checks) {
    /** @type {?} */
    const children = nodeChildrenAsMap(route);
    /** @type {?} */
    const r = route.value;
    forEach(children, (/**
     * @param {?} node
     * @param {?} childName
     * @return {?}
     */
    (node, childName) => {
        if (!r.component) {
            deactivateRouteAndItsChildren(node, context, checks);
        }
        else if (context) {
            deactivateRouteAndItsChildren(node, context.children.getContext(childName), checks);
        }
        else {
            deactivateRouteAndItsChildren(node, null, checks);
        }
    }));
    if (!r.component) {
        checks.canDeactivateChecks.push(new CanDeactivate(null, r));
    }
    else if (context && context.outlet && context.outlet.isActivated) {
        checks.canDeactivateChecks.push(new CanDeactivate(context.outlet.component, r));
    }
    else {
        checks.canDeactivateChecks.push(new CanDeactivate(null, r));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/operators/prioritized_guard_value.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const INITIAL_VALUE = Symbol('INITIAL_VALUE');
/**
 * @return {?}
 */
function prioritizedGuardValue() {
    return Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
     * @param {?} obs
     * @return {?}
     */
    obs => {
        return (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["combineLatest"])(...obs.map((/**
         * @param {?} o
         * @return {?}
         */
        o => o.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["startWith"])((/** @type {?} */ (INITIAL_VALUE)))))))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["scan"])((/**
         * @param {?} acc
         * @param {?} list
         * @return {?}
         */
        (acc, list) => {
            /** @type {?} */
            let isPending = false;
            return list.reduce((/**
             * @param {?} innerAcc
             * @param {?} val
             * @param {?} i
             * @return {?}
             */
            (innerAcc, val, i) => {
                if (innerAcc !== INITIAL_VALUE)
                    return innerAcc;
                // Toggle pending flag if any values haven't been set yet
                if (val === INITIAL_VALUE)
                    isPending = true;
                // Any other return values are only valid if we haven't yet hit a pending call.
                // This guarantees that in the case of a guard at the bottom of the tree that
                // returns a redirect, we will wait for the higher priority guard at the top to
                // finish before performing the redirect.
                if (!isPending) {
                    // Early return when we hit a `false` value as that should always cancel
                    // navigation
                    if (val === false)
                        return val;
                    if (i === list.length - 1 || isUrlTree(val)) {
                        return val;
                    }
                }
                return innerAcc;
            }), acc);
        }), INITIAL_VALUE), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])((/**
         * @param {?} item
         * @return {?}
         */
        item => item !== INITIAL_VALUE)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} item
         * @return {?}
         */
        item => isUrlTree(item) ? item : item === true)), //
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1))));
    }));
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/operators/check_guards.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} moduleInjector
 * @param {?=} forwardEvent
 * @return {?}
 */
function checkGuards(moduleInjector, forwardEvent) {
    return (/**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return source.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            const { targetSnapshot, currentSnapshot, guards: { canActivateChecks, canDeactivateChecks } } = t;
            if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(Object.assign(Object.assign({}, t), { guardsResult: true }));
            }
            return runCanDeactivateChecks(canDeactivateChecks, (/** @type {?} */ (targetSnapshot)), currentSnapshot, moduleInjector)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
             * @param {?} canDeactivate
             * @return {?}
             */
            canDeactivate => {
                return canDeactivate && isBoolean(canDeactivate) ?
                    runCanActivateChecks((/** @type {?} */ (targetSnapshot)), canActivateChecks, moduleInjector, forwardEvent) :
                    Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(canDeactivate);
            })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @param {?} guardsResult
             * @return {?}
             */
            guardsResult => (Object.assign(Object.assign({}, t), { guardsResult })))));
        })));
    });
}
/**
 * @param {?} checks
 * @param {?} futureRSS
 * @param {?} currRSS
 * @param {?} moduleInjector
 * @return {?}
 */
function runCanDeactivateChecks(checks, futureRSS, currRSS, moduleInjector) {
    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(checks).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
     * @param {?} check
     * @return {?}
     */
    check => runCanDeactivate(check.component, check.route, currRSS, futureRSS, moduleInjector))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["first"])((/**
     * @param {?} result
     * @return {?}
     */
    result => { return result !== true; }), (/** @type {?} */ (true))));
}
/**
 * @param {?} futureSnapshot
 * @param {?} checks
 * @param {?} moduleInjector
 * @param {?=} forwardEvent
 * @return {?}
 */
function runCanActivateChecks(futureSnapshot, checks, moduleInjector, forwardEvent) {
    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(checks).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["concatMap"])((/**
     * @param {?} check
     * @return {?}
     */
    (check) => {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])([
            fireChildActivationStart(check.route.parent, forwardEvent),
            fireActivationStart(check.route, forwardEvent),
            runCanActivateChild(futureSnapshot, check.path, moduleInjector),
            runCanActivate(futureSnapshot, check.route, moduleInjector)
        ])
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["concatAll"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["first"])((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            return result !== true;
        }), (/** @type {?} */ (true))));
    })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["first"])((/**
     * @param {?} result
     * @return {?}
     */
    result => { return result !== true; }), (/** @type {?} */ (true))));
}
/**
 * This should fire off `ActivationStart` events for each route being activated at this
 * level.
 * In other words, if you're activating `a` and `b` below, `path` will contain the
 * `ActivatedRouteSnapshot`s for both and we will fire `ActivationStart` for both. Always
 * return
 * `true` so checks continue to run.
 * @param {?} snapshot
 * @param {?=} forwardEvent
 * @return {?}
 */
function fireActivationStart(snapshot, forwardEvent) {
    if (snapshot !== null && forwardEvent) {
        forwardEvent(new ActivationStart(snapshot));
    }
    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(true);
}
/**
 * This should fire off `ChildActivationStart` events for each route being activated at this
 * level.
 * In other words, if you're activating `a` and `b` below, `path` will contain the
 * `ActivatedRouteSnapshot`s for both and we will fire `ChildActivationStart` for both. Always
 * return
 * `true` so checks continue to run.
 * @param {?} snapshot
 * @param {?=} forwardEvent
 * @return {?}
 */
function fireChildActivationStart(snapshot, forwardEvent) {
    if (snapshot !== null && forwardEvent) {
        forwardEvent(new ChildActivationStart(snapshot));
    }
    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(true);
}
/**
 * @param {?} futureRSS
 * @param {?} futureARS
 * @param {?} moduleInjector
 * @return {?}
 */
function runCanActivate(futureRSS, futureARS, moduleInjector) {
    /** @type {?} */
    const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;
    if (!canActivate || canActivate.length === 0)
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(true);
    /** @type {?} */
    const canActivateObservables = canActivate.map((/**
     * @param {?} c
     * @return {?}
     */
    (c) => {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["defer"])((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const guard = getToken(c, futureARS, moduleInjector);
            /** @type {?} */
            let observable;
            if (isCanActivate(guard)) {
                observable = wrapIntoObservable(guard.canActivate(futureARS, futureRSS));
            }
            else if (isFunction(guard)) {
                observable = wrapIntoObservable(guard(futureARS, futureRSS));
            }
            else {
                throw new Error('Invalid CanActivate guard');
            }
            return observable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["first"])());
        }));
    }));
    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(canActivateObservables).pipe(prioritizedGuardValue());
}
/**
 * @param {?} futureRSS
 * @param {?} path
 * @param {?} moduleInjector
 * @return {?}
 */
function runCanActivateChild(futureRSS, path, moduleInjector) {
    /** @type {?} */
    const futureARS = path[path.length - 1];
    /** @type {?} */
    const canActivateChildGuards = path.slice(0, path.length - 1)
        .reverse()
        .map((/**
     * @param {?} p
     * @return {?}
     */
    p => getCanActivateChild(p)))
        .filter((/**
     * @param {?} _
     * @return {?}
     */
    _ => _ !== null));
    /** @type {?} */
    const canActivateChildGuardsMapped = canActivateChildGuards.map((/**
     * @param {?} d
     * @return {?}
     */
    (d) => {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["defer"])((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const guardsMapped = d.guards.map((/**
             * @param {?} c
             * @return {?}
             */
            (c) => {
                /** @type {?} */
                const guard = getToken(c, d.node, moduleInjector);
                /** @type {?} */
                let observable;
                if (isCanActivateChild(guard)) {
                    observable = wrapIntoObservable(guard.canActivateChild(futureARS, futureRSS));
                }
                else if (isFunction(guard)) {
                    observable = wrapIntoObservable(guard(futureARS, futureRSS));
                }
                else {
                    throw new Error('Invalid CanActivateChild guard');
                }
                return observable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["first"])());
            }));
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(guardsMapped).pipe(prioritizedGuardValue());
        }));
    }));
    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());
}
/**
 * @param {?} component
 * @param {?} currARS
 * @param {?} currRSS
 * @param {?} futureRSS
 * @param {?} moduleInjector
 * @return {?}
 */
function runCanDeactivate(component, currARS, currRSS, futureRSS, moduleInjector) {
    /** @type {?} */
    const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;
    if (!canDeactivate || canDeactivate.length === 0)
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(true);
    /** @type {?} */
    const canDeactivateObservables = canDeactivate.map((/**
     * @param {?} c
     * @return {?}
     */
    (c) => {
        /** @type {?} */
        const guard = getToken(c, currARS, moduleInjector);
        /** @type {?} */
        let observable;
        if (isCanDeactivate(guard)) {
            observable =
                wrapIntoObservable(guard.canDeactivate((/** @type {?} */ (component)), currARS, currRSS, futureRSS));
        }
        else if (isFunction(guard)) {
            observable = wrapIntoObservable(guard(component, currARS, currRSS, futureRSS));
        }
        else {
            throw new Error('Invalid CanDeactivate guard');
        }
        return observable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["first"])());
    }));
    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(canDeactivateObservables).pipe(prioritizedGuardValue());
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/recognize.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NoMatch$1 {
}
/**
 * @param {?} rootComponentType
 * @param {?} config
 * @param {?} urlTree
 * @param {?} url
 * @param {?=} paramsInheritanceStrategy
 * @param {?=} relativeLinkResolution
 * @return {?}
 */
function recognize(rootComponentType, config, urlTree, url, paramsInheritanceStrategy = 'emptyOnly', relativeLinkResolution = 'legacy') {
    return new Recognizer(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution)
        .recognize();
}
class Recognizer {
    /**
     * @param {?} rootComponentType
     * @param {?} config
     * @param {?} urlTree
     * @param {?} url
     * @param {?} paramsInheritanceStrategy
     * @param {?} relativeLinkResolution
     */
    constructor(rootComponentType, config, urlTree, url, paramsInheritanceStrategy, relativeLinkResolution) {
        this.rootComponentType = rootComponentType;
        this.config = config;
        this.urlTree = urlTree;
        this.url = url;
        this.paramsInheritanceStrategy = paramsInheritanceStrategy;
        this.relativeLinkResolution = relativeLinkResolution;
    }
    /**
     * @return {?}
     */
    recognize() {
        try {
            /** @type {?} */
            const rootSegmentGroup = split$1(this.urlTree.root, [], [], this.config, this.relativeLinkResolution).segmentGroup;
            /** @type {?} */
            const children = this.processSegmentGroup(this.config, rootSegmentGroup, PRIMARY_OUTLET);
            /** @type {?} */
            const root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(Object.assign({}, this.urlTree.queryParams)), (/** @type {?} */ (this.urlTree.fragment)), {}, PRIMARY_OUTLET, this.rootComponentType, null, this.urlTree.root, -1, {});
            /** @type {?} */
            const rootNode = new TreeNode(root, children);
            /** @type {?} */
            const routeState = new RouterStateSnapshot(this.url, rootNode);
            this.inheritParamsAndData(routeState._root);
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(routeState);
        }
        catch (e) {
            return new rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]((/**
             * @param {?} obs
             * @return {?}
             */
            (obs) => obs.error(e)));
        }
    }
    /**
     * @param {?} routeNode
     * @return {?}
     */
    inheritParamsAndData(routeNode) {
        /** @type {?} */
        const route = routeNode.value;
        /** @type {?} */
        const i = inheritedParamsDataResolve(route, this.paramsInheritanceStrategy);
        route.params = Object.freeze(i.params);
        route.data = Object.freeze(i.data);
        routeNode.children.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => this.inheritParamsAndData(n)));
    }
    /**
     * @param {?} config
     * @param {?} segmentGroup
     * @param {?} outlet
     * @return {?}
     */
    processSegmentGroup(config, segmentGroup, outlet) {
        if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
            return this.processChildren(config, segmentGroup);
        }
        return this.processSegment(config, segmentGroup, segmentGroup.segments, outlet);
    }
    /**
     * @param {?} config
     * @param {?} segmentGroup
     * @return {?}
     */
    processChildren(config, segmentGroup) {
        /** @type {?} */
        const children = mapChildrenIntoArray(segmentGroup, (/**
         * @param {?} child
         * @param {?} childOutlet
         * @return {?}
         */
        (child, childOutlet) => this.processSegmentGroup(config, child, childOutlet)));
        checkOutletNameUniqueness(children);
        sortActivatedRouteSnapshots(children);
        return children;
    }
    /**
     * @param {?} config
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    processSegment(config, segmentGroup, segments, outlet) {
        for (const r of config) {
            try {
                return this.processSegmentAgainstRoute(r, segmentGroup, segments, outlet);
            }
            catch (e) {
                if (!(e instanceof NoMatch$1))
                    throw e;
            }
        }
        if (this.noLeftoversInUrl(segmentGroup, segments, outlet)) {
            return [];
        }
        throw new NoMatch$1();
    }
    /**
     * @private
     * @param {?} segmentGroup
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    noLeftoversInUrl(segmentGroup, segments, outlet) {
        return segments.length === 0 && !segmentGroup.children[outlet];
    }
    /**
     * @param {?} route
     * @param {?} rawSegment
     * @param {?} segments
     * @param {?} outlet
     * @return {?}
     */
    processSegmentAgainstRoute(route, rawSegment, segments, outlet) {
        if (route.redirectTo)
            throw new NoMatch$1();
        if ((route.outlet || PRIMARY_OUTLET) !== outlet)
            throw new NoMatch$1();
        /** @type {?} */
        let snapshot;
        /** @type {?} */
        let consumedSegments = [];
        /** @type {?} */
        let rawSlicedSegments = [];
        if (route.path === '**') {
            /** @type {?} */
            const params = segments.length > 0 ? (/** @type {?} */ (last(segments))).parameters : {};
            snapshot = new ActivatedRouteSnapshot(segments, params, Object.freeze(Object.assign({}, this.urlTree.queryParams)), (/** @type {?} */ (this.urlTree.fragment)), getData(route), outlet, (/** @type {?} */ (route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + segments.length, getResolve(route));
        }
        else {
            /** @type {?} */
            const result = match$1(rawSegment, route, segments);
            consumedSegments = result.consumedSegments;
            rawSlicedSegments = segments.slice(result.lastChild);
            snapshot = new ActivatedRouteSnapshot(consumedSegments, result.parameters, Object.freeze(Object.assign({}, this.urlTree.queryParams)), (/** @type {?} */ (this.urlTree.fragment)), getData(route), outlet, (/** @type {?} */ (route.component)), route, getSourceSegmentGroup(rawSegment), getPathIndexShift(rawSegment) + consumedSegments.length, getResolve(route));
        }
        /** @type {?} */
        const childConfig = getChildConfig(route);
        const { segmentGroup, slicedSegments } = split$1(rawSegment, consumedSegments, rawSlicedSegments, childConfig, this.relativeLinkResolution);
        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
            /** @type {?} */
            const children = this.processChildren(childConfig, segmentGroup);
            return [new TreeNode(snapshot, children)];
        }
        if (childConfig.length === 0 && slicedSegments.length === 0) {
            return [new TreeNode(snapshot, [])];
        }
        /** @type {?} */
        const children = this.processSegment(childConfig, segmentGroup, slicedSegments, PRIMARY_OUTLET);
        return [new TreeNode(snapshot, children)];
    }
}
if (false) {}
/**
 * @param {?} nodes
 * @return {?}
 */
function sortActivatedRouteSnapshots(nodes) {
    nodes.sort((/**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    (a, b) => {
        if (a.value.outlet === PRIMARY_OUTLET)
            return -1;
        if (b.value.outlet === PRIMARY_OUTLET)
            return 1;
        return a.value.outlet.localeCompare(b.value.outlet);
    }));
}
/**
 * @param {?} route
 * @return {?}
 */
function getChildConfig(route) {
    if (route.children) {
        return route.children;
    }
    if (route.loadChildren) {
        return (/** @type {?} */ (route._loadedConfig)).routes;
    }
    return [];
}
/**
 * @record
 */
function MatchResult() { }
if (false) {}
/**
 * @param {?} segmentGroup
 * @param {?} route
 * @param {?} segments
 * @return {?}
 */
function match$1(segmentGroup, route, segments) {
    if (route.path === '') {
        if (route.pathMatch === 'full' && (segmentGroup.hasChildren() || segments.length > 0)) {
            throw new NoMatch$1();
        }
        return { consumedSegments: [], lastChild: 0, parameters: {} };
    }
    /** @type {?} */
    const matcher = route.matcher || defaultUrlMatcher;
    /** @type {?} */
    const res = matcher(segments, segmentGroup, route);
    if (!res)
        throw new NoMatch$1();
    /** @type {?} */
    const posParams = {};
    forEach((/** @type {?} */ (res.posParams)), (/**
     * @param {?} v
     * @param {?} k
     * @return {?}
     */
    (v, k) => { posParams[k] = v.path; }));
    /** @type {?} */
    const parameters = res.consumed.length > 0 ? Object.assign(Object.assign({}, posParams), res.consumed[res.consumed.length - 1].parameters) :
        posParams;
    return { consumedSegments: res.consumed, lastChild: res.consumed.length, parameters };
}
/**
 * @param {?} nodes
 * @return {?}
 */
function checkOutletNameUniqueness(nodes) {
    /** @type {?} */
    const names = {};
    nodes.forEach((/**
     * @param {?} n
     * @return {?}
     */
    n => {
        /** @type {?} */
        const routeWithSameOutletName = names[n.value.outlet];
        if (routeWithSameOutletName) {
            /** @type {?} */
            const p = routeWithSameOutletName.url.map((/**
             * @param {?} s
             * @return {?}
             */
            s => s.toString())).join('/');
            /** @type {?} */
            const c = n.value.url.map((/**
             * @param {?} s
             * @return {?}
             */
            s => s.toString())).join('/');
            throw new Error(`Two segments cannot have the same outlet name: '${p}' and '${c}'.`);
        }
        names[n.value.outlet] = n.value;
    }));
}
/**
 * @param {?} segmentGroup
 * @return {?}
 */
function getSourceSegmentGroup(segmentGroup) {
    /** @type {?} */
    let s = segmentGroup;
    while (s._sourceSegment) {
        s = s._sourceSegment;
    }
    return s;
}
/**
 * @param {?} segmentGroup
 * @return {?}
 */
function getPathIndexShift(segmentGroup) {
    /** @type {?} */
    let s = segmentGroup;
    /** @type {?} */
    let res = (s._segmentIndexShift ? s._segmentIndexShift : 0);
    while (s._sourceSegment) {
        s = s._sourceSegment;
        res += (s._segmentIndexShift ? s._segmentIndexShift : 0);
    }
    return res - 1;
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} slicedSegments
 * @param {?} config
 * @param {?} relativeLinkResolution
 * @return {?}
 */
function split$1(segmentGroup, consumedSegments, slicedSegments, config, relativeLinkResolution) {
    if (slicedSegments.length > 0 &&
        containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config)) {
        /** @type {?} */
        const s = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(segmentGroup, consumedSegments, config, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        return { segmentGroup: s, slicedSegments: [] };
    }
    if (slicedSegments.length === 0 &&
        containsEmptyPathMatches(segmentGroup, slicedSegments, config)) {
        /** @type {?} */
        const s = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config, segmentGroup.children, relativeLinkResolution));
        s._sourceSegment = segmentGroup;
        s._segmentIndexShift = consumedSegments.length;
        return { segmentGroup: s, slicedSegments };
    }
    /** @type {?} */
    const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
    s._sourceSegment = segmentGroup;
    s._segmentIndexShift = consumedSegments.length;
    return { segmentGroup: s, slicedSegments };
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} slicedSegments
 * @param {?} routes
 * @param {?} children
 * @param {?} relativeLinkResolution
 * @return {?}
 */
function addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes, children, relativeLinkResolution) {
    /** @type {?} */
    const res = {};
    for (const r of routes) {
        if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet$1(r)]) {
            /** @type {?} */
            const s = new UrlSegmentGroup([], {});
            s._sourceSegment = segmentGroup;
            if (relativeLinkResolution === 'legacy') {
                s._segmentIndexShift = segmentGroup.segments.length;
            }
            else {
                s._segmentIndexShift = consumedSegments.length;
            }
            res[getOutlet$1(r)] = s;
        }
    }
    return Object.assign(Object.assign({}, children), res);
}
/**
 * @param {?} segmentGroup
 * @param {?} consumedSegments
 * @param {?} routes
 * @param {?} primarySegment
 * @return {?}
 */
function createChildrenForEmptyPaths(segmentGroup, consumedSegments, routes, primarySegment) {
    /** @type {?} */
    const res = {};
    res[PRIMARY_OUTLET] = primarySegment;
    primarySegment._sourceSegment = segmentGroup;
    primarySegment._segmentIndexShift = consumedSegments.length;
    for (const r of routes) {
        if (r.path === '' && getOutlet$1(r) !== PRIMARY_OUTLET) {
            /** @type {?} */
            const s = new UrlSegmentGroup([], {});
            s._sourceSegment = segmentGroup;
            s._segmentIndexShift = consumedSegments.length;
            res[getOutlet$1(r)] = s;
        }
    }
    return res;
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes) {
    return routes.some((/**
     * @param {?} r
     * @return {?}
     */
    r => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet$1(r) !== PRIMARY_OUTLET));
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} routes
 * @return {?}
 */
function containsEmptyPathMatches(segmentGroup, slicedSegments, routes) {
    return routes.some((/**
     * @param {?} r
     * @return {?}
     */
    r => emptyPathMatch(segmentGroup, slicedSegments, r)));
}
/**
 * @param {?} segmentGroup
 * @param {?} slicedSegments
 * @param {?} r
 * @return {?}
 */
function emptyPathMatch(segmentGroup, slicedSegments, r) {
    if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === 'full') {
        return false;
    }
    return r.path === '' && r.redirectTo === undefined;
}
/**
 * @param {?} route
 * @return {?}
 */
function getOutlet$1(route) {
    return route.outlet || PRIMARY_OUTLET;
}
/**
 * @param {?} route
 * @return {?}
 */
function getData(route) {
    return route.data || {};
}
/**
 * @param {?} route
 * @return {?}
 */
function getResolve(route) {
    return route.resolve || {};
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/operators/recognize.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} rootComponentType
 * @param {?} config
 * @param {?} serializer
 * @param {?} paramsInheritanceStrategy
 * @param {?} relativeLinkResolution
 * @return {?}
 */
function recognize$1(rootComponentType, config, serializer, paramsInheritanceStrategy, relativeLinkResolution) {
    return (/**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return source.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
         * @param {?} t
         * @return {?}
         */
        t => recognize(rootComponentType, config, t.urlAfterRedirects, serializer(t.urlAfterRedirects), paramsInheritanceStrategy, relativeLinkResolution)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} targetSnapshot
         * @return {?}
         */
        targetSnapshot => (Object.assign(Object.assign({}, t), { targetSnapshot }))))))));
    });
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/operators/resolve_data.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} paramsInheritanceStrategy
 * @param {?} moduleInjector
 * @return {?}
 */
function resolveData(paramsInheritanceStrategy, moduleInjector) {
    return (/**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return source.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            const { targetSnapshot, guards: { canActivateChecks } } = t;
            if (!canActivateChecks.length) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(t);
            }
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(canActivateChecks)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["concatMap"])((/**
             * @param {?} check
             * @return {?}
             */
            check => runResolve(check.route, (/** @type {?} */ (targetSnapshot)), paramsInheritanceStrategy, moduleInjector))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["reduce"])((/**
             * @param {?} _
             * @param {?} __
             * @return {?}
             */
            (_, __) => _)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @param {?} _
             * @return {?}
             */
            _ => t)));
        })));
    });
}
/**
 * @param {?} futureARS
 * @param {?} futureRSS
 * @param {?} paramsInheritanceStrategy
 * @param {?} moduleInjector
 * @return {?}
 */
function runResolve(futureARS, futureRSS, paramsInheritanceStrategy, moduleInjector) {
    /** @type {?} */
    const resolve = futureARS._resolve;
    return resolveNode(resolve, futureARS, futureRSS, moduleInjector)
        .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
     * @param {?} resolvedData
     * @return {?}
     */
    (resolvedData) => {
        futureARS._resolvedData = resolvedData;
        futureARS.data = Object.assign(Object.assign({}, futureARS.data), inheritedParamsDataResolve(futureARS, paramsInheritanceStrategy).resolve);
        return null;
    })));
}
/**
 * @param {?} resolve
 * @param {?} futureARS
 * @param {?} futureRSS
 * @param {?} moduleInjector
 * @return {?}
 */
function resolveNode(resolve, futureARS, futureRSS, moduleInjector) {
    /** @type {?} */
    const keys = Object.keys(resolve);
    if (keys.length === 0) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])({});
    }
    if (keys.length === 1) {
        /** @type {?} */
        const key = keys[0];
        return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} value
         * @return {?}
         */
        (value) => { return { [key]: value }; })));
    }
    /** @type {?} */
    const data = {};
    /** @type {?} */
    const runningResolvers$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(keys).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
     * @param {?} key
     * @return {?}
     */
    (key) => {
        return getResolver(resolve[key], futureARS, futureRSS, moduleInjector)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            data[key] = value;
            return value;
        })));
    })));
    return runningResolvers$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["last"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
     * @return {?}
     */
    () => data)));
}
/**
 * @param {?} injectionToken
 * @param {?} futureARS
 * @param {?} futureRSS
 * @param {?} moduleInjector
 * @return {?}
 */
function getResolver(injectionToken, futureARS, futureRSS, moduleInjector) {
    /** @type {?} */
    const resolver = getToken(injectionToken, futureARS, moduleInjector);
    return resolver.resolve ? wrapIntoObservable(resolver.resolve(futureARS, futureRSS)) :
        wrapIntoObservable(resolver(futureARS, futureRSS));
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/operators/switch_tap.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Perform a side effect through a switchMap for every emission on the source Observable,
 * but return an Observable that is identical to the source. It's essentially the same as
 * the `tap` operator, but if the side effectful `next` function returns an ObservableInput,
 * it will wait before continuing with the original value.
 * @template T
 * @param {?} next
 * @return {?}
 */
function switchTap(next) {
    return (/**
     * @param {?} source
     * @return {?}
     */
    function (source) {
        return source.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            /** @type {?} */
            const nextResult = next(v);
            if (nextResult) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(nextResult).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
                 * @return {?}
                 */
                () => v)));
            }
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])([v]);
        })));
    });
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/route_reuse_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@description
 *
 * Provides a way to customize when activated routes get reused.
 *
 * \@publicApi
 * @abstract
 */
class RouteReuseStrategy {
}
if (false) {}
/**
 * Does not detach any subtrees. Reuses routes as long as their route config is the same.
 */
class DefaultRouteReuseStrategy {
    /**
     * @param {?} route
     * @return {?}
     */
    shouldDetach(route) { return false; }
    /**
     * @param {?} route
     * @param {?} detachedTree
     * @return {?}
     */
    store(route, detachedTree) { }
    /**
     * @param {?} route
     * @return {?}
     */
    shouldAttach(route) { return false; }
    /**
     * @param {?} route
     * @return {?}
     */
    retrieve(route) { return null; }
    /**
     * @param {?} future
     * @param {?} curr
     * @return {?}
     */
    shouldReuseRoute(future, curr) {
        return future.routeConfig === curr.routeConfig;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/router_config_loader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The [DI token](guide/glossary/#di-token) for a router configuration.
 * @see `ROUTES`
 * \@publicApi
 * @type {?}
 */
const ROUTES = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('ROUTES');
class RouterConfigLoader {
    /**
     * @param {?} loader
     * @param {?} compiler
     * @param {?=} onLoadStartListener
     * @param {?=} onLoadEndListener
     */
    constructor(loader, compiler, onLoadStartListener, onLoadEndListener) {
        this.loader = loader;
        this.compiler = compiler;
        this.onLoadStartListener = onLoadStartListener;
        this.onLoadEndListener = onLoadEndListener;
    }
    /**
     * @param {?} parentInjector
     * @param {?} route
     * @return {?}
     */
    load(parentInjector, route) {
        if (this.onLoadStartListener) {
            this.onLoadStartListener(route);
        }
        /** @type {?} */
        const moduleFactory$ = this.loadModuleFactory((/** @type {?} */ (route.loadChildren)));
        return moduleFactory$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} factory
         * @return {?}
         */
        (factory) => {
            if (this.onLoadEndListener) {
                this.onLoadEndListener(route);
            }
            /** @type {?} */
            const module = factory.create(parentInjector);
            return new LoadedRouterConfig(flatten(module.injector.get(ROUTES)).map(standardizeConfig), module);
        })));
    }
    /**
     * @private
     * @param {?} loadChildren
     * @return {?}
     */
    loadModuleFactory(loadChildren) {
        if (typeof loadChildren === 'string') {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(this.loader.load(loadChildren));
        }
        else {
            return wrapIntoObservable(loadChildren()).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                if (t instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModuleFactory"]) {
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(t);
                }
                else {
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(this.compiler.compileModuleAsync(t));
                }
            })));
        }
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/url_handling_strategy.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * \@description
 *
 * Provides a way to migrate AngularJS applications to Angular.
 *
 * \@publicApi
 * @abstract
 */
class UrlHandlingStrategy {
}
if (false) {}
/**
 * \@publicApi
 */
class DefaultUrlHandlingStrategy {
    /**
     * @param {?} url
     * @return {?}
     */
    shouldProcessUrl(url) { return true; }
    /**
     * @param {?} url
     * @return {?}
     */
    extract(url) { return url; }
    /**
     * @param {?} newUrlPart
     * @param {?} wholeUrl
     * @return {?}
     */
    merge(newUrlPart, wholeUrl) { return newUrlPart; }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/router.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Options that modify the navigation strategy.
 *
 * \@publicApi
 * @record
 */
function NavigationExtras() { }
if (false) {}
/**
 * @param {?} error
 * @return {?}
 */
function defaultErrorHandler(error) {
    throw error;
}
/**
 * @param {?} error
 * @param {?} urlSerializer
 * @param {?} url
 * @return {?}
 */
function defaultMalformedUriErrorHandler(error, urlSerializer, url) {
    return urlSerializer.parse('/');
}
/**
 * \@internal
 * @param {?} snapshot
 * @param {?} runExtras
 * @return {?}
 */
function defaultRouterHook(snapshot, runExtras) {
    return (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null)));
}
/**
 * \@description
 *
 * A service that provides navigation and URL manipulation capabilities.
 *
 * @see `Route`.
 * @see [Routing and Navigation Guide](guide/router).
 *
 * \@ngModule RouterModule
 *
 * \@publicApi
 */
class Router {
    /**
     * Creates the router service.
     * @param {?} rootComponentType
     * @param {?} urlSerializer
     * @param {?} rootContexts
     * @param {?} location
     * @param {?} injector
     * @param {?} loader
     * @param {?} compiler
     * @param {?} config
     */
    // TODO: vsavkin make internal after the final is out.
    constructor(rootComponentType, urlSerializer, rootContexts, location, injector, loader, compiler, config) {
        this.rootComponentType = rootComponentType;
        this.urlSerializer = urlSerializer;
        this.rootContexts = rootContexts;
        this.location = location;
        this.config = config;
        this.lastSuccessfulNavigation = null;
        this.currentNavigation = null;
        this.navigationId = 0;
        this.isNgZoneEnabled = false;
        /**
         * An event stream for routing events in this NgModule.
         */
        this.events = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        /**
         * A handler for navigation errors in this NgModule.
         */
        this.errorHandler = defaultErrorHandler;
        /**
         * A handler for errors thrown by `Router.parseUrl(url)`
         * when `url` contains an invalid character.
         * The most common case is a `%` sign
         * that's not encoded and is not part of a percent encoded sequence.
         */
        this.malformedUriErrorHandler = defaultMalformedUriErrorHandler;
        /**
         * True if at least one navigation event has occurred,
         * false otherwise.
         */
        this.navigated = false;
        this.lastSuccessfulId = -1;
        /**
         * Hooks that enable you to pause navigation,
         * either before or after the preactivation phase.
         * Used by `RouterModule`.
         *
         * \@internal
         */
        this.hooks = {
            beforePreactivation: defaultRouterHook,
            afterPreactivation: defaultRouterHook
        };
        /**
         * A strategy for extracting and merging URLs.
         * Used for AngularJS to Angular migrations.
         */
        this.urlHandlingStrategy = new DefaultUrlHandlingStrategy();
        /**
         * A strategy for re-using routes.
         */
        this.routeReuseStrategy = new DefaultRouteReuseStrategy();
        /**
         * How to handle a navigation request to the current URL. One of:
         * - `'ignore'` :  The router ignores the request.
         * - `'reload'` : The router reloads the URL. Use to implement a "refresh" feature.
         */
        this.onSameUrlNavigation = 'ignore';
        /**
         * How to merge parameters, data, and resolved data from parent to child
         * routes. One of:
         *
         * - `'emptyOnly'` : Inherit parent parameters, data, and resolved data
         * for path-less or component-less routes.
         * - `'always'` : Inherit parent parameters, data, and resolved data
         * for all child routes.
         */
        this.paramsInheritanceStrategy = 'emptyOnly';
        /**
         * Determines when the router updates the browser URL.
         * By default (`"deferred"`), updates the browser URL after navigation has finished.
         * Set to `'eager'` to update the browser URL at the beginning of navigation.
         * You can choose to update early so that, if navigation fails,
         * you can show an error message with the URL that failed.
         */
        this.urlUpdateStrategy = 'deferred';
        /**
         * Enables a bug fix that corrects relative link resolution in components with empty paths.
         * @see `RouterModule`
         */
        this.relativeLinkResolution = 'legacy';
        /** @type {?} */
        const onLoadStart = (/**
         * @param {?} r
         * @return {?}
         */
        (r) => this.triggerEvent(new RouteConfigLoadStart(r)));
        /** @type {?} */
        const onLoadEnd = (/**
         * @param {?} r
         * @return {?}
         */
        (r) => this.triggerEvent(new RouteConfigLoadEnd(r)));
        this.ngModule = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModuleRef"]);
        this.console = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵConsole"]);
        /** @type {?} */
        const ngZone = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"]);
        this.isNgZoneEnabled = ngZone instanceof _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"];
        this.resetConfig(config);
        this.currentUrlTree = createEmptyUrlTree();
        this.rawUrlTree = this.currentUrlTree;
        this.browserUrlTree = this.currentUrlTree;
        this.configLoader = new RouterConfigLoader(loader, compiler, onLoadStart, onLoadEnd);
        this.routerState = createEmptyState(this.currentUrlTree, this.rootComponentType);
        this.transitions = new rxjs__WEBPACK_IMPORTED_MODULE_2__["BehaviorSubject"]({
            id: 0,
            currentUrlTree: this.currentUrlTree,
            currentRawUrl: this.currentUrlTree,
            extractedUrl: this.urlHandlingStrategy.extract(this.currentUrlTree),
            urlAfterRedirects: this.urlHandlingStrategy.extract(this.currentUrlTree),
            rawUrl: this.currentUrlTree,
            extras: {},
            resolve: null,
            reject: null,
            promise: Promise.resolve(true),
            source: 'imperative',
            restoredState: null,
            currentSnapshot: this.routerState.snapshot,
            targetSnapshot: null,
            currentRouterState: this.routerState,
            targetRouterState: null,
            guards: { canActivateChecks: [], canDeactivateChecks: [] },
            guardsResult: null,
        });
        this.navigations = this.setupNavigations(this.transitions);
        this.processNavigations();
    }
    /**
     * @private
     * @param {?} transitions
     * @return {?}
     */
    setupNavigations(transitions) {
        /** @type {?} */
        const eventsSubject = ((/** @type {?} */ (this.events)));
        return (/** @type {?} */ ((/** @type {?} */ (transitions.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])((/**
         * @param {?} t
         * @return {?}
         */
        t => t.id !== 0)), 
        // Extract URL
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} t
         * @return {?}
         */
        t => ((/** @type {?} */ (Object.assign(Object.assign({}, t), { extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl) })))))), 
        // Using switchMap so we cancel executing navigations when a new one comes in
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            /** @type {?} */
            let completed = false;
            /** @type {?} */
            let errored = false;
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(t).pipe(
            // Store the Navigation object
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                this.currentNavigation = {
                    id: t.id,
                    initialUrl: t.currentRawUrl,
                    extractedUrl: t.extractedUrl,
                    trigger: t.source,
                    extras: t.extras,
                    previousNavigation: this.lastSuccessfulNavigation ? Object.assign(Object.assign({}, this.lastSuccessfulNavigation), { previousNavigation: null }) :
                        null
                };
            })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                /** @type {?} */
                const urlTransition = !this.navigated || t.extractedUrl.toString() !== this.browserUrlTree.toString();
                /** @type {?} */
                const processCurrentUrl = (this.onSameUrlNavigation === 'reload' ? true : urlTransition) &&
                    this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl);
                if (processCurrentUrl) {
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(t).pipe(
                    // Fire NavigationStart event
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        /** @type {?} */
                        const transition = this.transitions.getValue();
                        eventsSubject.next(new NavigationStart(t.id, this.serializeUrl(t.extractedUrl), t.source, t.restoredState));
                        if (transition !== this.transitions.getValue()) {
                            return rxjs__WEBPACK_IMPORTED_MODULE_2__["EMPTY"];
                        }
                        return [t];
                    })), 
                    // This delay is required to match old behavior that forced navigation to
                    // always be async
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => Promise.resolve(t))), 
                    // ApplyRedirects
                    applyRedirects$1(this.ngModule.injector, this.configLoader, this.urlSerializer, this.config), 
                    // Update the currentNavigation
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        this.currentNavigation = Object.assign(Object.assign({}, (/** @type {?} */ (this.currentNavigation))), { finalUrl: t.urlAfterRedirects });
                    })), 
                    // Recognize
                    recognize$1(this.rootComponentType, this.config, (/**
                     * @param {?} url
                     * @return {?}
                     */
                    (url) => this.serializeUrl(url)), this.paramsInheritanceStrategy, this.relativeLinkResolution), 
                    // Update URL if in `eager` update mode
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        if (this.urlUpdateStrategy === 'eager') {
                            if (!t.extras.skipLocationChange) {
                                this.setBrowserUrl(t.urlAfterRedirects, !!t.extras.replaceUrl, t.id, t.extras.state);
                            }
                            this.browserUrlTree = t.urlAfterRedirects;
                        }
                    })), 
                    // Fire RoutesRecognized
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        /** @type {?} */
                        const routesRecognized = new RoutesRecognized(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));
                        eventsSubject.next(routesRecognized);
                    })));
                }
                else {
                    /** @type {?} */
                    const processPreviousUrl = urlTransition && this.rawUrlTree &&
                        this.urlHandlingStrategy.shouldProcessUrl(this.rawUrlTree);
                    /* When the current URL shouldn't be processed, but the previous one was, we
                     * handle this "error condition" by navigating to the previously successful URL,
                     * but leaving the URL intact.*/
                    if (processPreviousUrl) {
                        const { id, extractedUrl, source, restoredState, extras } = t;
                        /** @type {?} */
                        const navStart = new NavigationStart(id, this.serializeUrl(extractedUrl), source, restoredState);
                        eventsSubject.next(navStart);
                        /** @type {?} */
                        const targetSnapshot = createEmptyState(extractedUrl, this.rootComponentType).snapshot;
                        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(Object.assign(Object.assign({}, t), { targetSnapshot, urlAfterRedirects: extractedUrl, extras: Object.assign(Object.assign({}, extras), { skipLocationChange: false, replaceUrl: false }) }));
                    }
                    else {
                        /* When neither the current or previous URL can be processed, do nothing other
                         * than update router's internal reference to the current "settled" URL. This
                         * way the next navigation will be coming from the current URL in the browser.
                         */
                        this.rawUrlTree = t.rawUrl;
                        this.browserUrlTree = t.urlAfterRedirects;
                        t.resolve(null);
                        return rxjs__WEBPACK_IMPORTED_MODULE_2__["EMPTY"];
                    }
                }
            })), 
            // Before Preactivation
            switchTap((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                const { targetSnapshot, id: navigationId, extractedUrl: appliedUrlTree, rawUrl: rawUrlTree, extras: { skipLocationChange, replaceUrl } } = t;
                return this.hooks.beforePreactivation((/** @type {?} */ (targetSnapshot)), {
                    navigationId,
                    appliedUrlTree,
                    rawUrlTree,
                    skipLocationChange: !!skipLocationChange,
                    replaceUrl: !!replaceUrl,
                });
            })), 
            // --- GUARDS ---
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                /** @type {?} */
                const guardsStart = new GuardsCheckStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));
                this.triggerEvent(guardsStart);
            })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @param {?} t
             * @return {?}
             */
            t => (Object.assign(Object.assign({}, t), { guards: getAllRouteGuards((/** @type {?} */ (t.targetSnapshot)), t.currentSnapshot, this.rootContexts) })))), checkGuards(this.ngModule.injector, (/**
             * @param {?} evt
             * @return {?}
             */
            (evt) => this.triggerEvent(evt))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                if (isUrlTree(t.guardsResult)) {
                    /** @type {?} */
                    const error = navigationCancelingError(`Redirecting to "${this.serializeUrl(t.guardsResult)}"`);
                    error.url = t.guardsResult;
                    throw error;
                }
            })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                /** @type {?} */
                const guardsEnd = new GuardsCheckEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)), !!t.guardsResult);
                this.triggerEvent(guardsEnd);
            })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                if (!t.guardsResult) {
                    this.resetUrlToCurrentUrlTree();
                    /** @type {?} */
                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), '');
                    eventsSubject.next(navCancel);
                    t.resolve(false);
                    return false;
                }
                return true;
            })), 
            // --- RESOLVE ---
            switchTap((/**
             * @param {?} t
             * @return {?}
             */
            t => {
                if (t.guards.canActivateChecks.length) {
                    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(t).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        /** @type {?} */
                        const resolveStart = new ResolveStart(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));
                        this.triggerEvent(resolveStart);
                    })), resolveData(this.paramsInheritanceStrategy, this.ngModule.injector), //
                    Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => {
                        /** @type {?} */
                        const resolveEnd = new ResolveEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(t.urlAfterRedirects), (/** @type {?} */ (t.targetSnapshot)));
                        this.triggerEvent(resolveEnd);
                    })));
                }
                return undefined;
            })), 
            // --- AFTER PREACTIVATION ---
            switchTap((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                const { targetSnapshot, id: navigationId, extractedUrl: appliedUrlTree, rawUrl: rawUrlTree, extras: { skipLocationChange, replaceUrl } } = t;
                return this.hooks.afterPreactivation((/** @type {?} */ (targetSnapshot)), {
                    navigationId,
                    appliedUrlTree,
                    rawUrlTree,
                    skipLocationChange: !!skipLocationChange,
                    replaceUrl: !!replaceUrl,
                });
            })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                /** @type {?} */
                const targetRouterState = createRouterState(this.routeReuseStrategy, (/** @type {?} */ (t.targetSnapshot)), t.currentRouterState);
                return (Object.assign(Object.assign({}, t), { targetRouterState }));
            })), 
            /* Once here, we are about to activate syncronously. The assumption is this will
               succeed, and user code may read from the Router service. Therefore before
               activation, we need to update router properties storing the current URL and the
               RouterState, as well as updated the browser URL. All this should happen *before*
               activating. */
            Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                this.currentUrlTree = t.urlAfterRedirects;
                this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, t.rawUrl);
                ((/** @type {?} */ (this))).routerState = (/** @type {?} */ (t.targetRouterState));
                if (this.urlUpdateStrategy === 'deferred') {
                    if (!t.extras.skipLocationChange) {
                        this.setBrowserUrl(this.rawUrlTree, !!t.extras.replaceUrl, t.id, t.extras.state);
                    }
                    this.browserUrlTree = t.urlAfterRedirects;
                }
            })), activateRoutes(this.rootContexts, this.routeReuseStrategy, (/**
             * @param {?} evt
             * @return {?}
             */
            (evt) => this.triggerEvent(evt))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])({ /**
                 * @return {?}
                 */
                next() { completed = true; }, /**
                 * @return {?}
                 */
                complete() { completed = true; } }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["finalize"])((/**
             * @return {?}
             */
            () => {
                /* When the navigation stream finishes either through error or success, we set the
                 * `completed` or `errored` flag. However, there are some situations where we could
                 * get here without either of those being set. For instance, a redirect during
                 * NavigationStart. Therefore, this is a catch-all to make sure the NavigationCancel
                 * event is fired when a navigation gets cancelled but not caught by other means. */
                if (!completed && !errored) {
                    // Must reset to current URL tree here to ensure history.state is set. On a fresh
                    // page load, if a new navigation comes in before a successful navigation
                    // completes, there will be nothing in history.state.navigationId. This can cause
                    // sync problems with AngularJS sync code which looks for a value here in order
                    // to determine whether or not to handle a given popstate event or to leave it
                    // to the Angualr router.
                    this.resetUrlToCurrentUrlTree();
                    /** @type {?} */
                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), `Navigation ID ${t.id} is not equal to the current navigation id ${this.navigationId}`);
                    eventsSubject.next(navCancel);
                    t.resolve(false);
                }
                // currentNavigation should always be reset to null here. If navigation was
                // successful, lastSuccessfulTransition will have already been set. Therefore we
                // can safely set currentNavigation to null here.
                this.currentNavigation = null;
            })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                errored = true;
                /* This error type is issued during Redirect, and is handled as a cancellation
                 * rather than an error. */
                if (isNavigationCancelingError(e)) {
                    /** @type {?} */
                    const redirecting = isUrlTree(e.url);
                    if (!redirecting) {
                        // Set property only if we're not redirecting. If we landed on a page and
                        // redirect to `/` route, the new navigation is going to see the `/` isn't
                        // a change from the default currentUrlTree and won't navigate. This is
                        // only applicable with initial navigation, so setting `navigated` only when
                        // not redirecting resolves this scenario.
                        this.navigated = true;
                        this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);
                    }
                    /** @type {?} */
                    const navCancel = new NavigationCancel(t.id, this.serializeUrl(t.extractedUrl), e.message);
                    eventsSubject.next(navCancel);
                    // When redirecting, we need to delay resolving the navigation
                    // promise and push it to the redirect navigation
                    if (!redirecting) {
                        t.resolve(false);
                    }
                    else {
                        // setTimeout is required so this navigation finishes with
                        // the return EMPTY below. If it isn't allowed to finish
                        // processing, there can be multiple navigations to the same
                        // URL.
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            /** @type {?} */
                            const mergedTree = this.urlHandlingStrategy.merge(e.url, this.rawUrlTree);
                            /** @type {?} */
                            const extras = {
                                skipLocationChange: t.extras.skipLocationChange,
                                replaceUrl: this.urlUpdateStrategy === 'eager'
                            };
                            return this.scheduleNavigation(mergedTree, 'imperative', null, extras, { resolve: t.resolve, reject: t.reject, promise: t.promise });
                        }), 0);
                    }
                    /* All other errors should reset to the router's internal URL reference to the
                     * pre-error state. */
                }
                else {
                    this.resetStateAndUrl(t.currentRouterState, t.currentUrlTree, t.rawUrl);
                    /** @type {?} */
                    const navError = new NavigationError(t.id, this.serializeUrl(t.extractedUrl), e);
                    eventsSubject.next(navError);
                    try {
                        t.resolve(this.errorHandler(e));
                    }
                    catch (ee) {
                        t.reject(ee);
                    }
                }
                return rxjs__WEBPACK_IMPORTED_MODULE_2__["EMPTY"];
            })));
            // TODO(jasonaden): remove cast once g3 is on updated TypeScript
        })))))));
    }
    /**
     * \@internal
     * TODO: this should be removed once the constructor of the router made internal
     * @param {?} rootComponentType
     * @return {?}
     */
    resetRootComponentType(rootComponentType) {
        this.rootComponentType = rootComponentType;
        // TODO: vsavkin router 4.0 should make the root component set to null
        // this will simplify the lifecycle of the router.
        this.routerState.root.component = this.rootComponentType;
    }
    /**
     * @private
     * @return {?}
     */
    getTransition() {
        /** @type {?} */
        const transition = this.transitions.value;
        // This value needs to be set. Other values such as extractedUrl are set on initial navigation
        // but the urlAfterRedirects may not get set if we aren't processing the new URL *and* not
        // processing the previous URL.
        transition.urlAfterRedirects = this.browserUrlTree;
        return transition;
    }
    /**
     * @private
     * @param {?} t
     * @return {?}
     */
    setTransition(t) {
        this.transitions.next(Object.assign(Object.assign({}, this.getTransition()), t));
    }
    /**
     * Sets up the location change listener and performs the initial navigation.
     * @return {?}
     */
    initialNavigation() {
        this.setUpLocationChangeListener();
        if (this.navigationId === 0) {
            this.navigateByUrl(this.location.path(true), { replaceUrl: true });
        }
    }
    /**
     * Sets up the location change listener.
     * @return {?}
     */
    setUpLocationChangeListener() {
        // Don't need to use Zone.wrap any more, because zone.js
        // already patch onPopState, so location change callback will
        // run into ngZone
        if (!this.locationSubscription) {
            this.locationSubscription = (/** @type {?} */ (this.location.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                /** @type {?} */
                let rawUrlTree = this.parseUrl(change['url']);
                /** @type {?} */
                const source = change['type'] === 'popstate' ? 'popstate' : 'hashchange';
                // Navigations coming from Angular router have a navigationId state property. When this
                // exists, restore the state.
                /** @type {?} */
                const state = change.state && change.state.navigationId ? change.state : null;
                setTimeout((/**
                 * @return {?}
                 */
                () => { this.scheduleNavigation(rawUrlTree, source, state, { replaceUrl: true }); }), 0);
            }))));
        }
    }
    /**
     * The current URL.
     * @return {?}
     */
    get url() { return this.serializeUrl(this.currentUrlTree); }
    /**
     * The current Navigation object if one exists
     * @return {?}
     */
    getCurrentNavigation() { return this.currentNavigation; }
    /**
     * \@internal
     * @param {?} event
     * @return {?}
     */
    triggerEvent(event) { ((/** @type {?} */ (this.events))).next(event); }
    /**
     * Resets the configuration used for navigation and generating links.
     *
     * \@usageNotes
     *
     * ```
     * router.resetConfig([
     *  { path: 'team/:id', component: TeamCmp, children: [
     *    { path: 'simple', component: SimpleCmp },
     *    { path: 'user/:name', component: UserCmp }
     *  ]}
     * ]);
     * ```
     * @param {?} config The route array for the new configuration.
     *
     * @return {?}
     */
    resetConfig(config) {
        validateConfig(config);
        this.config = config.map(standardizeConfig);
        this.navigated = false;
        this.lastSuccessfulId = -1;
    }
    /**
     * \@docsNotRequired
     * @return {?}
     */
    ngOnDestroy() { this.dispose(); }
    /**
     * Disposes of the router.
     * @return {?}
     */
    dispose() {
        if (this.locationSubscription) {
            this.locationSubscription.unsubscribe();
            this.locationSubscription = (/** @type {?} */ (null));
        }
    }
    /**
     * Applies an array of commands to the current URL tree and creates a new URL tree.
     *
     * When given an activated route, applies the given commands starting from the route.
     * Otherwise, applies the given command starting from the root.
     *
     * \@usageNotes
     *
     * ```
     * // create /team/33/user/11
     * router.createUrlTree(['/team', 33, 'user', 11]);
     *
     * // create /team/33;expand=true/user/11
     * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
     *
     * // you can collapse static segments like this (this works only with the first passed-in value):
     * router.createUrlTree(['/team/33/user', userId]);
     *
     * // If the first segment can contain slashes, and you do not want the router to split it,
     * // you can do the following:
     * router.createUrlTree([{segmentPath: '/one/two'}]);
     *
     * // create /team/33/(user/11//right:chat)
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
     *
     * // remove the right secondary node
     * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
     *
     * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
     *
     * // navigate to /team/33/user/11/details
     * router.createUrlTree(['details'], {relativeTo: route});
     *
     * // navigate to /team/33/user/22
     * router.createUrlTree(['../22'], {relativeTo: route});
     *
     * // navigate to /team/44/user/22
     * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
     * ```
     * @param {?} commands An array of commands to apply.
     * @param {?=} navigationExtras Options that control the navigation strategy. This function
     * only utilizes properties in `NavigationExtras` that would change the provided URL.
     * @return {?} The new URL tree.
     *
     */
    createUrlTree(commands, navigationExtras = {}) {
        const { relativeTo, queryParams, fragment, preserveQueryParams, queryParamsHandling, preserveFragment } = navigationExtras;
        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && preserveQueryParams && (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {
            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
        }
        /** @type {?} */
        const a = relativeTo || this.routerState.root;
        /** @type {?} */
        const f = preserveFragment ? this.currentUrlTree.fragment : fragment;
        /** @type {?} */
        let q = null;
        if (queryParamsHandling) {
            switch (queryParamsHandling) {
                case 'merge':
                    q = Object.assign(Object.assign({}, this.currentUrlTree.queryParams), queryParams);
                    break;
                case 'preserve':
                    q = this.currentUrlTree.queryParams;
                    break;
                default:
                    q = queryParams || null;
            }
        }
        else {
            q = preserveQueryParams ? this.currentUrlTree.queryParams : queryParams || null;
        }
        if (q !== null) {
            q = this.removeEmptyProps(q);
        }
        return createUrlTree(a, this.currentUrlTree, commands, (/** @type {?} */ (q)), (/** @type {?} */ (f)));
    }
    /**
     * Navigate based on the provided URL, which must be absolute.
     *
     * \@usageNotes
     *
     * ```
     * router.navigateByUrl("/team/33/user/11");
     *
     * // Navigate without updating the URL
     * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
     * ```
     *
     * @param {?} url An absolute URL. The function does not apply any delta to the current URL.
     * @param {?=} extras An object containing properties that modify the navigation strategy.
     * The function ignores any properties in the `NavigationExtras` that would change the
     * provided URL.
     *
     * @return {?} A Promise that resolves to 'true' when navigation succeeds,
     * to 'false' when navigation fails, or is rejected on error.
     *
     */
    navigateByUrl(url, extras = { skipLocationChange: false }) {
        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && this.isNgZoneEnabled && !_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgZone"].isInAngularZone()) {
            this.console.warn(`Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);
        }
        /** @type {?} */
        const urlTree = isUrlTree(url) ? url : this.parseUrl(url);
        /** @type {?} */
        const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
        return this.scheduleNavigation(mergedTree, 'imperative', null, extras);
    }
    /**
     * Navigate based on the provided array of commands and a starting point.
     * If no starting route is provided, the navigation is absolute.
     *
     * Returns a promise that:
     * - resolves to 'true' when navigation succeeds,
     * - resolves to 'false' when navigation fails,
     * - is rejected when an error happens.
     *
     * \@usageNotes
     *
     * ```
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
     *
     * // Navigate without updating the URL
     * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
     * ```
     *
     * The first parameter of `navigate()` is a delta to be applied to the current URL
     * or the one provided in the `relativeTo` property of the second parameter (the
     * `NavigationExtras`).
     *
     * In order to affect this browser's `history.state` entry, the `state`
     * parameter can be passed. This must be an object because the router
     * will add the `navigationId` property to this object before creating
     * the new history item.
     * @param {?} commands
     * @param {?=} extras
     * @return {?}
     */
    navigate(commands, extras = { skipLocationChange: false }) {
        validateCommands(commands);
        return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
    }
    /**
     * Serializes a `UrlTree` into a string
     * @param {?} url
     * @return {?}
     */
    serializeUrl(url) { return this.urlSerializer.serialize(url); }
    /**
     * Parses a string into a `UrlTree`
     * @param {?} url
     * @return {?}
     */
    parseUrl(url) {
        /** @type {?} */
        let urlTree;
        try {
            urlTree = this.urlSerializer.parse(url);
        }
        catch (e) {
            urlTree = this.malformedUriErrorHandler(e, this.urlSerializer, url);
        }
        return urlTree;
    }
    /**
     * Returns whether the url is activated
     * @param {?} url
     * @param {?} exact
     * @return {?}
     */
    isActive(url, exact) {
        if (isUrlTree(url)) {
            return containsTree(this.currentUrlTree, url, exact);
        }
        /** @type {?} */
        const urlTree = this.parseUrl(url);
        return containsTree(this.currentUrlTree, urlTree, exact);
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    removeEmptyProps(params) {
        return Object.keys(params).reduce((/**
         * @param {?} result
         * @param {?} key
         * @return {?}
         */
        (result, key) => {
            /** @type {?} */
            const value = params[key];
            if (value !== null && value !== undefined) {
                result[key] = value;
            }
            return result;
        }), {});
    }
    /**
     * @private
     * @return {?}
     */
    processNavigations() {
        this.navigations.subscribe((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            this.navigated = true;
            this.lastSuccessfulId = t.id;
            ((/** @type {?} */ (this.events)))
                .next(new NavigationEnd(t.id, this.serializeUrl(t.extractedUrl), this.serializeUrl(this.currentUrlTree)));
            this.lastSuccessfulNavigation = this.currentNavigation;
            this.currentNavigation = null;
            t.resolve(true);
        }), (/**
         * @param {?} e
         * @return {?}
         */
        e => { this.console.warn(`Unhandled Navigation Error: `); }));
    }
    /**
     * @private
     * @param {?} rawUrl
     * @param {?} source
     * @param {?} restoredState
     * @param {?} extras
     * @param {?=} priorPromise
     * @return {?}
     */
    scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {
        /** @type {?} */
        const lastNavigation = this.getTransition();
        // If the user triggers a navigation imperatively (e.g., by using navigateByUrl),
        // and that navigation results in 'replaceState' that leads to the same URL,
        // we should skip those.
        if (lastNavigation && source !== 'imperative' && lastNavigation.source === 'imperative' &&
            lastNavigation.rawUrl.toString() === rawUrl.toString()) {
            return Promise.resolve(true); // return value is not used
        }
        // Because of a bug in IE and Edge, the location class fires two events (popstate and
        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will
        // flicker. Handles the case when a popstate was emitted first.
        if (lastNavigation && source == 'hashchange' && lastNavigation.source === 'popstate' &&
            lastNavigation.rawUrl.toString() === rawUrl.toString()) {
            return Promise.resolve(true); // return value is not used
        }
        // Because of a bug in IE and Edge, the location class fires two events (popstate and
        // hashchange) every single time. The second one should be ignored. Otherwise, the URL will
        // flicker. Handles the case when a hashchange was emitted first.
        if (lastNavigation && source == 'popstate' && lastNavigation.source === 'hashchange' &&
            lastNavigation.rawUrl.toString() === rawUrl.toString()) {
            return Promise.resolve(true); // return value is not used
        }
        /** @type {?} */
        let resolve;
        /** @type {?} */
        let reject;
        /** @type {?} */
        let promise;
        if (priorPromise) {
            resolve = priorPromise.resolve;
            reject = priorPromise.reject;
            promise = priorPromise.promise;
        }
        else {
            promise = new Promise((/**
             * @param {?} res
             * @param {?} rej
             * @return {?}
             */
            (res, rej) => {
                resolve = res;
                reject = rej;
            }));
        }
        /** @type {?} */
        const id = ++this.navigationId;
        this.setTransition({
            id,
            source,
            restoredState,
            currentUrlTree: this.currentUrlTree,
            currentRawUrl: this.rawUrlTree, rawUrl, extras, resolve, reject, promise,
            currentSnapshot: this.routerState.snapshot,
            currentRouterState: this.routerState
        });
        // Make sure that the error is propagated even though `processNavigations` catch
        // handler does not rethrow
        return promise.catch((/**
         * @param {?} e
         * @return {?}
         */
        (e) => { return Promise.reject(e); }));
    }
    /**
     * @private
     * @param {?} url
     * @param {?} replaceUrl
     * @param {?} id
     * @param {?=} state
     * @return {?}
     */
    setBrowserUrl(url, replaceUrl, id, state) {
        /** @type {?} */
        const path = this.urlSerializer.serialize(url);
        state = state || {};
        if (this.location.isCurrentPathEqualTo(path) || replaceUrl) {
            // TODO(jasonaden): Remove first `navigationId` and rely on `ng` namespace.
            this.location.replaceState(path, '', Object.assign(Object.assign({}, state), { navigationId: id }));
        }
        else {
            this.location.go(path, '', Object.assign(Object.assign({}, state), { navigationId: id }));
        }
    }
    /**
     * @private
     * @param {?} storedState
     * @param {?} storedUrl
     * @param {?} rawUrl
     * @return {?}
     */
    resetStateAndUrl(storedState, storedUrl, rawUrl) {
        ((/** @type {?} */ (this))).routerState = storedState;
        this.currentUrlTree = storedUrl;
        this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, rawUrl);
        this.resetUrlToCurrentUrlTree();
    }
    /**
     * @private
     * @return {?}
     */
    resetUrlToCurrentUrlTree() {
        this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), '', { navigationId: this.lastSuccessfulId });
    }
}
Router.ɵfac = function Router_Factory(t) { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinvalidFactory"](); };
Router.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({ type: Router });

if (false) {}
/**
 * @param {?} commands
 * @return {?}
 */
function validateCommands(commands) {
    for (let i = 0; i < commands.length; i++) {
        /** @type {?} */
        const cmd = commands[i];
        if (cmd == null) {
            throw new Error(`The requested path contains ${cmd} segment at index ${i}`);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/directives/router_link.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Lets you link to specific routes in your app.
 *
 * Consider the following route configuration:
 * `[{ path: 'user/:name', component: UserCmp }]`.
 * When linking to this `user/:name` route, you use the `RouterLink` directive.
 *
 * If the link is static, you can use the directive as follows:
 * `<a routerLink="/user/bob">link to user component</a>`
 *
 * If you use dynamic values to generate the link, you can pass an array of path
 * segments, followed by the params for each segment.
 *
 * For instance `['/team', teamId, 'user', userName, {details: true}]`
 * means that we want to generate a link to `/team/11/user/bob;details=true`.
 *
 * Multiple static segments can be merged into one
 * (e.g., `['/team/11/user', userName, {details: true}]`).
 *
 * The first segment name can be prepended with `/`, `./`, or `../`:
 * * If the first segment begins with `/`, the router will look up the route from the root of the
 *   app.
 * * If the first segment begins with `./`, or doesn't begin with a slash, the router will
 *   instead look in the children of the current activated route.
 * * And if the first segment begins with `../`, the router will go up one level.
 *
 * You can set query params and fragment as follows:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" fragment="education">
 *   link to user component
 * </a>
 * ```
 * RouterLink will use these to generate this link: `/user/bob#education?debug=true`.
 *
 * (Deprecated in v4.0.0 use `queryParamsHandling` instead) You can also tell the
 * directive to preserve the current query params and fragment:
 *
 * ```
 * <a [routerLink]="['/user/bob']" preserveQueryParams preserveFragment>
 *   link to user component
 * </a>
 * ```
 *
 * You can tell the directive how to handle queryParams. Available options are:
 *  - `'merge'`: merge the queryParams into the current queryParams
 *  - `'preserve'`: preserve the current queryParams
 *  - default/`''`: use the queryParams only
 *
 * Same options for {\@link NavigationExtras#queryParamsHandling
 * NavigationExtras#queryParamsHandling}.
 *
 * ```
 * <a [routerLink]="['/user/bob']" [queryParams]="{debug: true}" queryParamsHandling="merge">
 *   link to user component
 * </a>
 * ```
 *
 * You can provide a `state` value to be persisted to the browser's History.state
 * property (See https://developer.mozilla.org/en-US/docs/Web/API/History#Properties). It's
 * used as follows:
 *
 * ```
 * <a [routerLink]="['/user/bob']" [state]="{tracingId: 123}">
 *   link to user component
 * </a>
 * ```
 *
 * And later the value can be read from the router through `router.getCurrentNavigation`.
 * For example, to capture the `tracingId` above during the `NavigationStart` event:
 *
 * ```
 * // Get NavigationStart events
 * router.events.pipe(filter(e => e instanceof NavigationStart)).subscribe(e => {
 *   const navigation = router.getCurrentNavigation();
 *   tracingService.trace({id: navigation.extras.state.tracingId});
 * });
 * ```
 *
 * The router link directive always treats the provided input as a delta to the current url.
 *
 * For instance, if the current url is `/user/(box//aux:team)`.
 *
 * Then the following link `<a [routerLink]="['/user/jim']">Jim</a>` will generate the link
 * `/user/(jim//aux:team)`.
 *
 * See {\@link Router#createUrlTree createUrlTree} for more information.
 *
 * \@ngModule RouterModule
 *
 * \@publicApi
 */
class RouterLink {
    /**
     * @param {?} router
     * @param {?} route
     * @param {?} tabIndex
     * @param {?} renderer
     * @param {?} el
     */
    constructor(router, route, tabIndex, renderer, el) {
        this.router = router;
        this.route = route;
        this.commands = [];
        if (tabIndex == null) {
            renderer.setAttribute(el.nativeElement, 'tabindex', '0');
        }
    }
    /**
     * @param {?} commands
     * @return {?}
     */
    set routerLink(commands) {
        if (commands != null) {
            this.commands = Array.isArray(commands) ? commands : [commands];
        }
        else {
            this.commands = [];
        }
    }
    /**
     * @deprecated 4.0.0 use `queryParamsHandling` instead.
     * @param {?} value
     * @return {?}
     */
    set preserveQueryParams(value) {
        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {
            console.warn('preserveQueryParams is deprecated!, use queryParamsHandling instead.');
        }
        this.preserve = value;
    }
    /**
     * @return {?}
     */
    onClick() {
        /** @type {?} */
        const extras = {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
            state: this.state
        };
        this.router.navigateByUrl(this.urlTree, extras);
        return true;
    }
    /**
     * @return {?}
     */
    get urlTree() {
        return this.router.createUrlTree(this.commands, {
            relativeTo: this.route,
            queryParams: this.queryParams,
            fragment: this.fragment,
            preserveQueryParams: attrBoolValue(this.preserve),
            queryParamsHandling: this.queryParamsHandling,
            preserveFragment: attrBoolValue(this.preserveFragment),
        });
    }
}
RouterLink.ɵfac = function RouterLink_Factory(t) { return new (t || RouterLink)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinjectAttribute"]('tabindex'), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])); };
RouterLink.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({ type: RouterLink, selectors: [["", "routerLink", "", 5, "a", 5, "area"]], hostBindings: function RouterLink_HostBindings(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function RouterLink_click_HostBindingHandler() { return ctx.onClick(); });
    } }, inputs: { routerLink: "routerLink", preserveQueryParams: "preserveQueryParams", queryParams: "queryParams", fragment: "fragment", queryParamsHandling: "queryParamsHandling", preserveFragment: "preserveFragment", skipLocationChange: "skipLocationChange", replaceUrl: "replaceUrl", state: "state" } });
/** @nocollapse */
RouterLink.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"], args: ['tabindex',] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
];
RouterLink.propDecorators = {
    queryParams: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    fragment: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    queryParamsHandling: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    preserveFragment: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    skipLocationChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    replaceUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    routerLink: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    preserveQueryParams: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    onClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"], args: ['click',] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](RouterLink, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{ selector: ':not(a):not(area)[routerLink]' }]
    }], function () { return [{ type: Router }, { type: ActivatedRoute }, { type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"],
                args: ['tabindex']
            }] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }]; }, { routerLink: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], preserveQueryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], onClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"],
            args: ['click']
        }], queryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], fragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], queryParamsHandling: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], preserveFragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], skipLocationChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], replaceUrl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], state: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }] }); })();
if (false) {}
/**
 * \@description
 *
 * Lets you link to specific routes in your app.
 *
 * See `RouterLink` for more information.
 *
 * \@ngModule RouterModule
 *
 * \@publicApi
 */
class RouterLinkWithHref {
    /**
     * @param {?} router
     * @param {?} route
     * @param {?} locationStrategy
     */
    constructor(router, route, locationStrategy) {
        this.router = router;
        this.route = route;
        this.locationStrategy = locationStrategy;
        this.commands = [];
        this.subscription = router.events.subscribe((/**
         * @param {?} s
         * @return {?}
         */
        (s) => {
            if (s instanceof NavigationEnd) {
                this.updateTargetUrlAndHref();
            }
        }));
    }
    /**
     * @param {?} commands
     * @return {?}
     */
    set routerLink(commands) {
        if (commands != null) {
            this.commands = Array.isArray(commands) ? commands : [commands];
        }
        else {
            this.commands = [];
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set preserveQueryParams(value) {
        if (Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["isDevMode"])() && (/** @type {?} */ (console)) && (/** @type {?} */ (console.warn))) {
            console.warn('preserveQueryParams is deprecated, use queryParamsHandling instead.');
        }
        this.preserve = value;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) { this.updateTargetUrlAndHref(); }
    /**
     * @return {?}
     */
    ngOnDestroy() { this.subscription.unsubscribe(); }
    /**
     * @param {?} button
     * @param {?} ctrlKey
     * @param {?} metaKey
     * @param {?} shiftKey
     * @return {?}
     */
    onClick(button, ctrlKey, metaKey, shiftKey) {
        if (button !== 0 || ctrlKey || metaKey || shiftKey) {
            return true;
        }
        if (typeof this.target === 'string' && this.target != '_self') {
            return true;
        }
        /** @type {?} */
        const extras = {
            skipLocationChange: attrBoolValue(this.skipLocationChange),
            replaceUrl: attrBoolValue(this.replaceUrl),
            state: this.state
        };
        this.router.navigateByUrl(this.urlTree, extras);
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    updateTargetUrlAndHref() {
        this.href = this.locationStrategy.prepareExternalUrl(this.router.serializeUrl(this.urlTree));
    }
    /**
     * @return {?}
     */
    get urlTree() {
        return this.router.createUrlTree(this.commands, {
            relativeTo: this.route,
            queryParams: this.queryParams,
            fragment: this.fragment,
            preserveQueryParams: attrBoolValue(this.preserve),
            queryParamsHandling: this.queryParamsHandling,
            preserveFragment: attrBoolValue(this.preserveFragment),
        });
    }
}
RouterLinkWithHref.ɵfac = function RouterLinkWithHref_Factory(t) { return new (t || RouterLinkWithHref)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](ActivatedRoute), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["LocationStrategy"])); };
RouterLinkWithHref.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({ type: RouterLinkWithHref, selectors: [["a", "routerLink", ""], ["area", "routerLink", ""]], hostVars: 2, hostBindings: function RouterLinkWithHref_HostBindings(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵlistener"]("click", function RouterLinkWithHref_click_HostBindingHandler($event) { return ctx.onClick($event.button, $event.ctrlKey, $event.metaKey, $event.shiftKey); });
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵhostProperty"]("href", ctx.href, _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsanitizeUrl"]);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵattribute"]("target", ctx.target);
    } }, inputs: { routerLink: "routerLink", preserveQueryParams: "preserveQueryParams", target: "target", queryParams: "queryParams", fragment: "fragment", queryParamsHandling: "queryParamsHandling", preserveFragment: "preserveFragment", skipLocationChange: "skipLocationChange", replaceUrl: "replaceUrl", state: "state" }, features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]] });
/** @nocollapse */
RouterLinkWithHref.ctorParameters = () => [
    { type: Router },
    { type: ActivatedRoute },
    { type: _angular_common__WEBPACK_IMPORTED_MODULE_0__["LocationStrategy"] }
];
RouterLinkWithHref.propDecorators = {
    target: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostBinding"], args: ['attr.target',] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    queryParams: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    fragment: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    queryParamsHandling: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    preserveFragment: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    skipLocationChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    replaceUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    state: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    href: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostBinding"] }],
    routerLink: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    preserveQueryParams: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    onClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"], args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey'],] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](RouterLinkWithHref, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{ selector: 'a[routerLink],area[routerLink]' }]
    }], function () { return [{ type: Router }, { type: ActivatedRoute }, { type: _angular_common__WEBPACK_IMPORTED_MODULE_0__["LocationStrategy"] }]; }, { routerLink: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], preserveQueryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], onClick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"],
            args: ['click', ['$event.button', '$event.ctrlKey', '$event.metaKey', '$event.shiftKey']]
        }], href: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostBinding"]
        }], target: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostBinding"],
            args: ['attr.target']
        }, {
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], queryParams: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], fragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], queryParamsHandling: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], preserveFragment: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], skipLocationChange: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], replaceUrl: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], state: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }] }); })();
if (false) {}
/**
 * @param {?} s
 * @return {?}
 */
function attrBoolValue(s) {
    return s === '' || !!s;
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/directives/router_link_active.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *
 * \@description
 *
 * Lets you add a CSS class to an element when the link's route becomes active.
 *
 * This directive lets you add a CSS class to an element when the link's route
 * becomes active.
 *
 * Consider the following example:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link">Bob</a>
 * ```
 *
 * When the url is either '/user' or '/user/bob', the active-link class will
 * be added to the `a` tag. If the url changes, the class will be removed.
 *
 * You can set more than one class, as follows:
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="class1 class2">Bob</a>
 * <a routerLink="/user/bob" [routerLinkActive]="['class1', 'class2']">Bob</a>
 * ```
 *
 * You can configure RouterLinkActive by passing `exact: true`. This will add the classes
 * only when the url matches the link exactly.
 *
 * ```
 * <a routerLink="/user/bob" routerLinkActive="active-link" [routerLinkActiveOptions]="{exact:
 * true}">Bob</a>
 * ```
 *
 * You can assign the RouterLinkActive instance to a template variable and directly check
 * the `isActive` status.
 * ```
 * <a routerLink="/user/bob" routerLinkActive #rla="routerLinkActive">
 *   Bob {{ rla.isActive ? '(already open)' : ''}}
 * </a>
 * ```
 *
 * Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.
 *
 * ```
 * <div routerLinkActive="active-link" [routerLinkActiveOptions]="{exact: true}">
 *   <a routerLink="/user/jim">Jim</a>
 *   <a routerLink="/user/bob">Bob</a>
 * </div>
 * ```
 *
 * This will set the active-link class on the div tag if the url is either '/user/jim' or
 * '/user/bob'.
 *
 * \@ngModule RouterModule
 *
 * \@publicApi
 */
class RouterLinkActive {
    /**
     * @param {?} router
     * @param {?} element
     * @param {?} renderer
     * @param {?=} link
     * @param {?=} linkWithHref
     */
    constructor(router, element, renderer, link, linkWithHref) {
        this.router = router;
        this.element = element;
        this.renderer = renderer;
        this.link = link;
        this.linkWithHref = linkWithHref;
        this.classes = [];
        this.isActive = false;
        this.routerLinkActiveOptions = { exact: false };
        this.subscription = router.events.subscribe((/**
         * @param {?} s
         * @return {?}
         */
        (s) => {
            if (s instanceof NavigationEnd) {
                this.update();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.links.changes.subscribe((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.update()));
        this.linksWithHrefs.changes.subscribe((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.update()));
        this.update();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set routerLinkActive(data) {
        /** @type {?} */
        const classes = Array.isArray(data) ? data : data.split(' ');
        this.classes = classes.filter((/**
         * @param {?} c
         * @return {?}
         */
        c => !!c));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) { this.update(); }
    /**
     * @return {?}
     */
    ngOnDestroy() { this.subscription.unsubscribe(); }
    /**
     * @private
     * @return {?}
     */
    update() {
        if (!this.links || !this.linksWithHrefs || !this.router.navigated)
            return;
        Promise.resolve().then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const hasActiveLinks = this.hasActiveLinks();
            if (this.isActive !== hasActiveLinks) {
                ((/** @type {?} */ (this))).isActive = hasActiveLinks;
                this.classes.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                (c) => {
                    if (hasActiveLinks) {
                        this.renderer.addClass(this.element.nativeElement, c);
                    }
                    else {
                        this.renderer.removeClass(this.element.nativeElement, c);
                    }
                }));
            }
        }));
    }
    /**
     * @private
     * @param {?} router
     * @return {?}
     */
    isLinkActive(router) {
        return (/**
         * @param {?} link
         * @return {?}
         */
        (link) => router.isActive(link.urlTree, this.routerLinkActiveOptions.exact));
    }
    /**
     * @private
     * @return {?}
     */
    hasActiveLinks() {
        /** @type {?} */
        const isActiveCheckFn = this.isLinkActive(this.router);
        return this.link && isActiveCheckFn(this.link) ||
            this.linkWithHref && isActiveCheckFn(this.linkWithHref) ||
            this.links.some(isActiveCheckFn) || this.linksWithHrefs.some(isActiveCheckFn);
    }
}
RouterLinkActive.ɵfac = function RouterLinkActive_Factory(t) { return new (t || RouterLinkActive)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](RouterLink, 8), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](RouterLinkWithHref, 8)); };
RouterLinkActive.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({ type: RouterLinkActive, selectors: [["", "routerLinkActive", ""]], contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, RouterLink, true);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵcontentQuery"](dirIndex, RouterLinkWithHref, true);
    } if (rf & 2) {
        var _t;
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.links = _t);
        _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵqueryRefresh"](_t = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵloadQuery"]()) && (ctx.linksWithHrefs = _t);
    } }, inputs: { routerLinkActiveOptions: "routerLinkActiveOptions", routerLinkActive: "routerLinkActive" }, exportAs: ["routerLinkActive"], features: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵNgOnChangesFeature"]] });
/** @nocollapse */
RouterLinkActive.ctorParameters = () => [
    { type: Router },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"] },
    { type: RouterLink, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] },
    { type: RouterLinkWithHref, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] }
];
RouterLinkActive.propDecorators = {
    links: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [RouterLink, { descendants: true },] }],
    linksWithHrefs: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"], args: [RouterLinkWithHref, { descendants: true },] }],
    routerLinkActiveOptions: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
    routerLinkActive: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](RouterLinkActive, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{
                selector: '[routerLinkActive]',
                exportAs: 'routerLinkActive'
            }]
    }], function () { return [{ type: Router }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"] }, { type: RouterLink, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }] }, { type: RouterLinkWithHref, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }] }]; }, { routerLinkActiveOptions: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], routerLinkActive: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"]
        }], links: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [RouterLink, { descendants: true }]
        }], linksWithHrefs: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ContentChildren"],
            args: [RouterLinkWithHref, { descendants: true }]
        }] }); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/router_outlet_context.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
/**
 * Store contextual information about a `RouterOutlet`
 *
 * \@publicApi
 */
class OutletContext {
    constructor() {
        this.outlet = null;
        this.route = null;
        this.resolver = null;
        this.children = new ChildrenOutletContexts();
        this.attachRef = null;
    }
}
if (false) {}
/**
 * Store contextual information about the children (= nested) `RouterOutlet`
 *
 * \@publicApi
 */
class ChildrenOutletContexts {
    constructor() {
        // contexts for child outlets, by name.
        this.contexts = new Map();
    }
    /**
     * Called when a `RouterOutlet` directive is instantiated
     * @param {?} childName
     * @param {?} outlet
     * @return {?}
     */
    onChildOutletCreated(childName, outlet) {
        /** @type {?} */
        const context = this.getOrCreateContext(childName);
        context.outlet = outlet;
        this.contexts.set(childName, context);
    }
    /**
     * Called when a `RouterOutlet` directive is destroyed.
     * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
     * re-created later.
     * @param {?} childName
     * @return {?}
     */
    onChildOutletDestroyed(childName) {
        /** @type {?} */
        const context = this.getContext(childName);
        if (context) {
            context.outlet = null;
        }
    }
    /**
     * Called when the corresponding route is deactivated during navigation.
     * Because the component get destroyed, all children outlet are destroyed.
     * @return {?}
     */
    onOutletDeactivated() {
        /** @type {?} */
        const contexts = this.contexts;
        this.contexts = new Map();
        return contexts;
    }
    /**
     * @param {?} contexts
     * @return {?}
     */
    onOutletReAttached(contexts) { this.contexts = contexts; }
    /**
     * @param {?} childName
     * @return {?}
     */
    getOrCreateContext(childName) {
        /** @type {?} */
        let context = this.getContext(childName);
        if (!context) {
            context = new OutletContext();
            this.contexts.set(childName, context);
        }
        return context;
    }
    /**
     * @param {?} childName
     * @return {?}
     */
    getContext(childName) { return this.contexts.get(childName) || null; }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/directives/router_outlet.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Acts as a placeholder that Angular dynamically fills based on the current router state.
 *
 * Each outlet can have a unique name, determined by the optional `name` attribute.
 * The name cannot be set or changed dynamically. If not set, default value is "primary".
 *
 * ```
 * <router-outlet></router-outlet>
 * <router-outlet name='left'></router-outlet>
 * <router-outlet name='right'></router-outlet>
 * ```
 *
 * A router outlet emits an activate event when a new component is instantiated,
 * and a deactivate event when a component is destroyed.
 *
 * ```
 * <router-outlet
 *   (activate)='onActivate($event)'
 *   (deactivate)='onDeactivate($event)'></router-outlet>
 * ```
 * \@ngModule RouterModule
 *
 * \@publicApi
 */
class RouterOutlet {
    /**
     * @param {?} parentContexts
     * @param {?} location
     * @param {?} resolver
     * @param {?} name
     * @param {?} changeDetector
     */
    constructor(parentContexts, location, resolver, name, changeDetector) {
        this.parentContexts = parentContexts;
        this.location = location;
        this.resolver = resolver;
        this.changeDetector = changeDetector;
        this.activated = null;
        this._activatedRoute = null;
        this.activateEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.deactivateEvents = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.name = name || PRIMARY_OUTLET;
        parentContexts.onChildOutletCreated(this.name, this);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { this.parentContexts.onChildOutletDestroyed(this.name); }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.activated) {
            // If the outlet was not instantiated at the time the route got activated we need to populate
            // the outlet when it is initialized (ie inside a NgIf)
            /** @type {?} */
            const context = this.parentContexts.getContext(this.name);
            if (context && context.route) {
                if (context.attachRef) {
                    // `attachRef` is populated when there is an existing component to mount
                    this.attach(context.attachRef, context.route);
                }
                else {
                    // otherwise the component defined in the configuration is created
                    this.activateWith(context.route, context.resolver || null);
                }
            }
        }
    }
    /**
     * @return {?}
     */
    get isActivated() { return !!this.activated; }
    /**
     * @return {?}
     */
    get component() {
        if (!this.activated)
            throw new Error('Outlet is not activated');
        return this.activated.instance;
    }
    /**
     * @return {?}
     */
    get activatedRoute() {
        if (!this.activated)
            throw new Error('Outlet is not activated');
        return (/** @type {?} */ (this._activatedRoute));
    }
    /**
     * @return {?}
     */
    get activatedRouteData() {
        if (this._activatedRoute) {
            return this._activatedRoute.snapshot.data;
        }
        return {};
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to detach the subtree
     * @return {?}
     */
    detach() {
        if (!this.activated)
            throw new Error('Outlet is not activated');
        this.location.detach();
        /** @type {?} */
        const cmp = this.activated;
        this.activated = null;
        this._activatedRoute = null;
        return cmp;
    }
    /**
     * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
     * @param {?} ref
     * @param {?} activatedRoute
     * @return {?}
     */
    attach(ref, activatedRoute) {
        this.activated = ref;
        this._activatedRoute = activatedRoute;
        this.location.insert(ref.hostView);
    }
    /**
     * @return {?}
     */
    deactivate() {
        if (this.activated) {
            /** @type {?} */
            const c = this.component;
            this.activated.destroy();
            this.activated = null;
            this._activatedRoute = null;
            this.deactivateEvents.emit(c);
        }
    }
    /**
     * @param {?} activatedRoute
     * @param {?} resolver
     * @return {?}
     */
    activateWith(activatedRoute, resolver) {
        if (this.isActivated) {
            throw new Error('Cannot activate an already activated outlet');
        }
        this._activatedRoute = activatedRoute;
        /** @type {?} */
        const snapshot = activatedRoute._futureSnapshot;
        /** @type {?} */
        const component = (/** @type {?} */ ((/** @type {?} */ (snapshot.routeConfig)).component));
        resolver = resolver || this.resolver;
        /** @type {?} */
        const factory = resolver.resolveComponentFactory(component);
        /** @type {?} */
        const childContexts = this.parentContexts.getOrCreateContext(this.name).children;
        /** @type {?} */
        const injector = new OutletInjector(activatedRoute, childContexts, this.location.injector);
        this.activated = this.location.createComponent(factory, this.location.length, injector);
        // Calling `markForCheck` to make sure we will run the change detection when the
        // `RouterOutlet` is inside a `ChangeDetectionStrategy.OnPush` component.
        this.changeDetector.markForCheck();
        this.activateEvents.emit(this.activated.instance);
    }
}
RouterOutlet.ɵfac = function RouterOutlet_Factory(t) { return new (t || RouterOutlet)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](ChildrenOutletContexts), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinjectAttribute"]('name'), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdirectiveInject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"])); };
RouterOutlet.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({ type: RouterOutlet, selectors: [["router-outlet"]], outputs: { activateEvents: "activate", deactivateEvents: "deactivate" }, exportAs: ["outlet"] });
/** @nocollapse */
RouterOutlet.ctorParameters = () => [
    { type: ChildrenOutletContexts },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"] },
    { type: String, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"], args: ['name',] }] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
];
RouterOutlet.propDecorators = {
    activateEvents: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"], args: ['activate',] }],
    deactivateEvents: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"], args: ['deactivate',] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](RouterOutlet, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"],
        args: [{ selector: 'router-outlet', exportAs: 'outlet' }]
    }], function () { return [{ type: ChildrenOutletContexts }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewContainerRef"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ComponentFactoryResolver"] }, { type: String, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Attribute"],
                args: ['name']
            }] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }]; }, { activateEvents: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
            args: ['activate']
        }], deactivateEvents: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"],
            args: ['deactivate']
        }] }); })();
if (false) {}
class OutletInjector {
    /**
     * @param {?} route
     * @param {?} childContexts
     * @param {?} parent
     */
    constructor(route, childContexts, parent) {
        this.route = route;
        this.childContexts = childContexts;
        this.parent = parent;
    }
    /**
     * @param {?} token
     * @param {?=} notFoundValue
     * @return {?}
     */
    get(token, notFoundValue) {
        if (token === ActivatedRoute) {
            return this.route;
        }
        if (token === ChildrenOutletContexts) {
            return this.childContexts;
        }
        return this.parent.get(token, notFoundValue);
    }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/router_preloader.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@description
 *
 * Provides a preloading strategy.
 *
 * \@publicApi
 * @abstract
 */
class PreloadingStrategy {
}
if (false) {}
/**
 * \@description
 *
 * Provides a preloading strategy that preloads all modules as quickly as possible.
 *
 * ```
 * RouteModule.forRoot(ROUTES, {preloadingStrategy: PreloadAllModules})
 * ```
 *
 * \@publicApi
 */
class PreloadAllModules {
    /**
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */
    preload(route, fn) {
        return fn().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["catchError"])((/**
         * @return {?}
         */
        () => Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null))));
    }
}
/**
 * \@description
 *
 * Provides a preloading strategy that does not preload any modules.
 *
 * This strategy is enabled by default.
 *
 * \@publicApi
 */
class NoPreloading {
    /**
     * @param {?} route
     * @param {?} fn
     * @return {?}
     */
    preload(route, fn) { return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null); }
}
/**
 * The preloader optimistically loads all router configurations to
 * make navigations into lazily-loaded sections of the application faster.
 *
 * The preloader runs in the background. When the router bootstraps, the preloader
 * starts listening to all navigation events. After every such event, the preloader
 * will check if any configurations can be loaded lazily.
 *
 * If a route is protected by `canLoad` guards, the preloaded will not load it.
 *
 * \@publicApi
 */
class RouterPreloader {
    /**
     * @param {?} router
     * @param {?} moduleLoader
     * @param {?} compiler
     * @param {?} injector
     * @param {?} preloadingStrategy
     */
    constructor(router, moduleLoader, compiler, injector, preloadingStrategy) {
        this.router = router;
        this.injector = injector;
        this.preloadingStrategy = preloadingStrategy;
        /** @type {?} */
        const onStartLoad = (/**
         * @param {?} r
         * @return {?}
         */
        (r) => router.triggerEvent(new RouteConfigLoadStart(r)));
        /** @type {?} */
        const onEndLoad = (/**
         * @param {?} r
         * @return {?}
         */
        (r) => router.triggerEvent(new RouteConfigLoadEnd(r)));
        this.loader = new RouterConfigLoader(moduleLoader, compiler, onStartLoad, onEndLoad);
    }
    /**
     * @return {?}
     */
    setUpPreloading() {
        this.subscription =
            this.router.events
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])((/**
             * @param {?} e
             * @return {?}
             */
            (e) => e instanceof NavigationEnd)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["concatMap"])((/**
             * @return {?}
             */
            () => this.preload())))
                .subscribe((/**
             * @return {?}
             */
            () => { }));
    }
    /**
     * @return {?}
     */
    preload() {
        /** @type {?} */
        const ngModule = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModuleRef"]);
        return this.processRoutes(ngModule, this.router.config);
    }
    // TODO(jasonaden): This class relies on code external to the class to call setUpPreloading. If
    // this hasn't been done, ngOnDestroy will fail as this.subscription will be undefined. This
    // should be refactored.
    /**
     * @return {?}
     */
    ngOnDestroy() { this.subscription.unsubscribe(); }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} routes
     * @return {?}
     */
    processRoutes(ngModule, routes) {
        /** @type {?} */
        const res = [];
        for (const route of routes) {
            // we already have the config loaded, just recurse
            if (route.loadChildren && !route.canLoad && route._loadedConfig) {
                /** @type {?} */
                const childConfig = route._loadedConfig;
                res.push(this.processRoutes(childConfig.module, childConfig.routes));
                // no config loaded, fetch the config
            }
            else if (route.loadChildren && !route.canLoad) {
                res.push(this.preloadConfig(ngModule, route));
                // recurse into children
            }
            else if (route.children) {
                res.push(this.processRoutes(ngModule, route.children));
            }
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(res).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeAll"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} _
         * @return {?}
         */
        (_) => void 0)));
    }
    /**
     * @private
     * @param {?} ngModule
     * @param {?} route
     * @return {?}
     */
    preloadConfig(ngModule, route) {
        return this.preloadingStrategy.preload(route, (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const loaded$ = this.loader.load(ngModule.injector, route);
            return loaded$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["mergeMap"])((/**
             * @param {?} config
             * @return {?}
             */
            (config) => {
                route._loadedConfig = config;
                return this.processRoutes(config.module, config.routes);
            })));
        }));
    }
}
RouterPreloader.ɵfac = function RouterPreloader_Factory(t) { return new (t || RouterPreloader)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](Router), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModuleFactoryLoader"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Compiler"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"]), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](PreloadingStrategy)); };
RouterPreloader.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: RouterPreloader, factory: RouterPreloader.ɵfac });
/** @nocollapse */
RouterPreloader.ctorParameters = () => [
    { type: Router },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModuleFactoryLoader"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Compiler"] },
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"] },
    { type: PreloadingStrategy }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](RouterPreloader, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: Router }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModuleFactoryLoader"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Compiler"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"] }, { type: PreloadingStrategy }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/router_scroller.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RouterScroller {
    /**
     * @param {?} router
     * @param {?} viewportScroller
     * @param {?=} options
     */
    constructor(router, viewportScroller, options = {}) {
        this.router = router;
        this.viewportScroller = viewportScroller;
        this.options = options;
        this.lastId = 0;
        this.lastSource = 'imperative';
        this.restoredId = 0;
        this.store = {};
        // Default both options to 'disabled'
        options.scrollPositionRestoration = options.scrollPositionRestoration || 'disabled';
        options.anchorScrolling = options.anchorScrolling || 'disabled';
    }
    /**
     * @return {?}
     */
    init() {
        // we want to disable the automatic scrolling because having two places
        // responsible for scrolling results race conditions, especially given
        // that browser don't implement this behavior consistently
        if (this.options.scrollPositionRestoration !== 'disabled') {
            this.viewportScroller.setHistoryScrollRestoration('manual');
        }
        this.routerEventsSubscription = this.createScrollEvents();
        this.scrollEventsSubscription = this.consumeScrollEvents();
    }
    /**
     * @private
     * @return {?}
     */
    createScrollEvents() {
        return this.router.events.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            if (e instanceof NavigationStart) {
                // store the scroll position of the current stable navigations.
                this.store[this.lastId] = this.viewportScroller.getScrollPosition();
                this.lastSource = e.navigationTrigger;
                this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;
            }
            else if (e instanceof NavigationEnd) {
                this.lastId = e.id;
                this.scheduleScrollEvent(e, this.router.parseUrl(e.urlAfterRedirects).fragment);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    consumeScrollEvents() {
        return this.router.events.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            if (!(e instanceof Scroll))
                return;
            // a popstate event. The pop state event will always ignore anchor scrolling.
            if (e.position) {
                if (this.options.scrollPositionRestoration === 'top') {
                    this.viewportScroller.scrollToPosition([0, 0]);
                }
                else if (this.options.scrollPositionRestoration === 'enabled') {
                    this.viewportScroller.scrollToPosition(e.position);
                }
                // imperative navigation "forward"
            }
            else {
                if (e.anchor && this.options.anchorScrolling === 'enabled') {
                    this.viewportScroller.scrollToAnchor(e.anchor);
                }
                else if (this.options.scrollPositionRestoration !== 'disabled') {
                    this.viewportScroller.scrollToPosition([0, 0]);
                }
            }
        }));
    }
    /**
     * @private
     * @param {?} routerEvent
     * @param {?} anchor
     * @return {?}
     */
    scheduleScrollEvent(routerEvent, anchor) {
        this.router.triggerEvent(new Scroll(routerEvent, this.lastSource === 'popstate' ? this.store[this.restoredId] : null, anchor));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.routerEventsSubscription) {
            this.routerEventsSubscription.unsubscribe();
        }
        if (this.scrollEventsSubscription) {
            this.scrollEventsSubscription.unsubscribe();
        }
    }
}
RouterScroller.ɵfac = function RouterScroller_Factory(t) { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinvalidFactory"](); };
RouterScroller.ɵdir = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineDirective"]({ type: RouterScroller });

if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/router_module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * The directives defined in the `RouterModule`.
 * @type {?}
 */
const ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkWithHref, RouterLinkActive, ɵEmptyOutletComponent];
/**
 * A [DI token](guide/glossary/#di-token) for the router service.
 *
 * \@publicApi
 * @type {?}
 */
const ROUTER_CONFIGURATION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('ROUTER_CONFIGURATION');
/**
 * \@docsNotRequired
 * @type {?}
 */
const ROUTER_FORROOT_GUARD = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('ROUTER_FORROOT_GUARD');
const ɵ0 = { enableTracing: false };
/** @type {?} */
const ROUTER_PROVIDERS = [
    _angular_common__WEBPACK_IMPORTED_MODULE_0__["Location"],
    { provide: UrlSerializer, useClass: DefaultUrlSerializer },
    {
        provide: Router,
        useFactory: setupRouter,
        deps: [
            UrlSerializer, ChildrenOutletContexts, _angular_common__WEBPACK_IMPORTED_MODULE_0__["Location"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModuleFactoryLoader"], _angular_core__WEBPACK_IMPORTED_MODULE_1__["Compiler"],
            ROUTES, ROUTER_CONFIGURATION, [UrlHandlingStrategy, new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]()],
            [RouteReuseStrategy, new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]()]
        ]
    },
    ChildrenOutletContexts,
    { provide: ActivatedRoute, useFactory: rootRoute, deps: [Router] },
    { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModuleFactoryLoader"], useClass: _angular_core__WEBPACK_IMPORTED_MODULE_1__["SystemJsNgModuleLoader"] },
    RouterPreloader,
    NoPreloading,
    PreloadAllModules,
    { provide: ROUTER_CONFIGURATION, useValue: ɵ0 },
];
/**
 * @return {?}
 */
function routerNgProbeToken() {
    return new _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgProbeToken"]('Router', Router);
}
/**
 * \@usageNotes
 *
 * RouterModule can be imported multiple times: once per lazily-loaded bundle.
 * Since the router deals with a global shared resource--location, we cannot have
 * more than one router service active.
 *
 * That is why there are two ways to create the module: `RouterModule.forRoot` and
 * `RouterModule.forChild`.
 *
 * * `forRoot` creates a module that contains all the directives, the given routes, and the router
 *   service itself.
 * * `forChild` creates a module that contains all the directives and the given routes, but does not
 *   include the router service.
 *
 * When registered at the root, the module should be used as follows
 *
 * ```
 * \@NgModule({
 *   imports: [RouterModule.forRoot(ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * For submodules and lazy loaded submodules the module should be used as follows:
 *
 * ```
 * \@NgModule({
 *   imports: [RouterModule.forChild(ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * \@description
 *
 * Adds router directives and providers.
 *
 * Managing state transitions is one of the hardest parts of building applications. This is
 * especially true on the web, where you also need to ensure that the state is reflected in the URL.
 * In addition, we often want to split applications into multiple bundles and load them on demand.
 * Doing this transparently is not trivial.
 *
 * The Angular router service solves these problems. Using the router, you can declaratively specify
 * application states, manage state transitions while taking care of the URL, and load bundles on
 * demand.
 *
 * @see [Routing and Navigation](guide/router.html) for an
 * overview of how the router service should be used.
 *
 * \@publicApi
 */
class RouterModule {
    // Note: We are injecting the Router so it gets created eagerly...
    /**
     * @param {?} guard
     * @param {?} router
     */
    constructor(guard, router) {
    }
    /**
     * Creates and configures a module with all the router providers and directives.
     * Optionally sets up an application listener to perform an initial navigation.
     *
     * @param {?} routes An array of `Route` objects that define the navigation paths for the application.
     * @param {?=} config An `ExtraOptions` configuration object that controls how navigation is performed.
     * @return {?} The new router module.
     */
    static forRoot(routes, config) {
        return {
            ngModule: RouterModule,
            providers: [
                ROUTER_PROVIDERS,
                provideRoutes(routes),
                {
                    provide: ROUTER_FORROOT_GUARD,
                    useFactory: provideForRootGuard,
                    deps: [[Router, new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"](), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["SkipSelf"]()]]
                },
                { provide: ROUTER_CONFIGURATION, useValue: config ? config : {} },
                {
                    provide: _angular_common__WEBPACK_IMPORTED_MODULE_0__["LocationStrategy"],
                    useFactory: provideLocationStrategy,
                    deps: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_0__["PlatformLocation"], [new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"](_angular_common__WEBPACK_IMPORTED_MODULE_0__["APP_BASE_HREF"]), new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]()], ROUTER_CONFIGURATION
                    ]
                },
                {
                    provide: RouterScroller,
                    useFactory: createRouterScroller,
                    deps: [Router, _angular_common__WEBPACK_IMPORTED_MODULE_0__["ViewportScroller"], ROUTER_CONFIGURATION]
                },
                {
                    provide: PreloadingStrategy,
                    useExisting: config && config.preloadingStrategy ? config.preloadingStrategy :
                        NoPreloading
                },
                { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgProbeToken"], multi: true, useFactory: routerNgProbeToken },
                provideRouterInitializer(),
            ],
        };
    }
    /**
     * Creates a module with all the router directives and a provider registering routes.
     * @param {?} routes
     * @return {?}
     */
    static forChild(routes) {
        return { ngModule: RouterModule, providers: [provideRoutes(routes)] };
    }
}
RouterModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({ type: RouterModule });
RouterModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({ factory: function RouterModule_Factory(t) { return new (t || RouterModule)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](ROUTER_FORROOT_GUARD, 8), _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](Router, 8)); } });
/** @nocollapse */
RouterModule.ctorParameters = () => [
    { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }, { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [ROUTER_FORROOT_GUARD,] }] },
    { type: Router, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] }
];
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵsetNgModuleScope"](RouterModule, { declarations: [RouterOutlet,
        RouterLink,
        RouterLinkWithHref,
        RouterLinkActive,
        ɵEmptyOutletComponent], exports: [RouterOutlet,
        RouterLink,
        RouterLinkWithHref,
        RouterLinkActive,
        ɵEmptyOutletComponent] }); })();
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](RouterModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
                declarations: ROUTER_DIRECTIVES,
                exports: ROUTER_DIRECTIVES,
                entryComponents: [ɵEmptyOutletComponent]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }, {
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"],
                args: [ROUTER_FORROOT_GUARD]
            }] }, { type: Router, decorators: [{
                type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"]
            }] }]; }, null); })();
/**
 * @param {?} router
 * @param {?} viewportScroller
 * @param {?} config
 * @return {?}
 */
function createRouterScroller(router, viewportScroller, config) {
    if (config.scrollOffset) {
        viewportScroller.setOffset(config.scrollOffset);
    }
    return new RouterScroller(router, viewportScroller, config);
}
/**
 * @param {?} platformLocationStrategy
 * @param {?} baseHref
 * @param {?=} options
 * @return {?}
 */
function provideLocationStrategy(platformLocationStrategy, baseHref, options = {}) {
    return options.useHash ? new _angular_common__WEBPACK_IMPORTED_MODULE_0__["HashLocationStrategy"](platformLocationStrategy, baseHref) :
        new _angular_common__WEBPACK_IMPORTED_MODULE_0__["PathLocationStrategy"](platformLocationStrategy, baseHref);
}
/**
 * @param {?} router
 * @return {?}
 */
function provideForRootGuard(router) {
    if (router) {
        throw new Error(`RouterModule.forRoot() called twice. Lazy loaded modules should use RouterModule.forChild() instead.`);
    }
    return 'guarded';
}
/**
 * Registers a [DI provider](guide/glossary#provider) for a set of routes.
 * \@usageNotes
 *
 * ```
 * \@NgModule({
 *   imports: [RouterModule.forChild(ROUTES)],
 *   providers: [provideRoutes(EXTRA_ROUTES)]
 * })
 * class MyNgModule {}
 * ```
 *
 * \@publicApi
 * @param {?} routes The route configuration to provide.
 *
 * @return {?}
 */
function provideRoutes(routes) {
    return [
        { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ANALYZE_FOR_ENTRY_COMPONENTS"], multi: true, useValue: routes },
        { provide: ROUTES, multi: true, useValue: routes },
    ];
}
/**
 * A set of configuration options for a router module, provided in the
 * `forRoot()` method.
 *
 * \@publicApi
 * @record
 */
function ExtraOptions() { }
if (false) {}
/**
 * @param {?} urlSerializer
 * @param {?} contexts
 * @param {?} location
 * @param {?} injector
 * @param {?} loader
 * @param {?} compiler
 * @param {?} config
 * @param {?=} opts
 * @param {?=} urlHandlingStrategy
 * @param {?=} routeReuseStrategy
 * @return {?}
 */
function setupRouter(urlSerializer, contexts, location, injector, loader, compiler, config, opts = {}, urlHandlingStrategy, routeReuseStrategy) {
    /** @type {?} */
    const router = new Router(null, urlSerializer, contexts, location, injector, loader, compiler, flatten(config));
    if (urlHandlingStrategy) {
        router.urlHandlingStrategy = urlHandlingStrategy;
    }
    if (routeReuseStrategy) {
        router.routeReuseStrategy = routeReuseStrategy;
    }
    if (opts.errorHandler) {
        router.errorHandler = opts.errorHandler;
    }
    if (opts.malformedUriErrorHandler) {
        router.malformedUriErrorHandler = opts.malformedUriErrorHandler;
    }
    if (opts.enableTracing) {
        /** @type {?} */
        const dom = Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["ɵgetDOM"])();
        router.events.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            dom.logGroup(`Router Event: ${((/** @type {?} */ (e.constructor))).name}`);
            dom.log(e.toString());
            dom.log(e);
            dom.logGroupEnd();
        }));
    }
    if (opts.onSameUrlNavigation) {
        router.onSameUrlNavigation = opts.onSameUrlNavigation;
    }
    if (opts.paramsInheritanceStrategy) {
        router.paramsInheritanceStrategy = opts.paramsInheritanceStrategy;
    }
    if (opts.urlUpdateStrategy) {
        router.urlUpdateStrategy = opts.urlUpdateStrategy;
    }
    if (opts.relativeLinkResolution) {
        router.relativeLinkResolution = opts.relativeLinkResolution;
    }
    return router;
}
/**
 * @param {?} router
 * @return {?}
 */
function rootRoute(router) {
    return router.routerState.root;
}
/**
 * Router initialization requires two steps:
 *
 * First, we start the navigation in a `APP_INITIALIZER` to block the bootstrap if
 * a resolver or a guard executes asynchronously.
 *
 * Next, we actually run activation in a `BOOTSTRAP_LISTENER`, using the
 * `afterPreactivation` hook provided by the router.
 * The router navigation starts, reaches the point when preactivation is done, and then
 * pauses. It waits for the hook to be resolved. We then resolve it only in a bootstrap listener.
 */
class RouterInitializer {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.initNavigation = false;
        this.resultOfPreactivationDone = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
    }
    /**
     * @return {?}
     */
    appInitializer() {
        /** @type {?} */
        const p = this.injector.get(_angular_common__WEBPACK_IMPORTED_MODULE_0__["LOCATION_INITIALIZED"], Promise.resolve(null));
        return p.then((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let resolve = (/** @type {?} */ (null));
            /** @type {?} */
            const res = new Promise((/**
             * @param {?} r
             * @return {?}
             */
            r => resolve = r));
            /** @type {?} */
            const router = this.injector.get(Router);
            /** @type {?} */
            const opts = this.injector.get(ROUTER_CONFIGURATION);
            if (this.isLegacyDisabled(opts) || this.isLegacyEnabled(opts)) {
                resolve(true);
            }
            else if (opts.initialNavigation === 'disabled') {
                router.setUpLocationChangeListener();
                resolve(true);
            }
            else if (opts.initialNavigation === 'enabled') {
                router.hooks.afterPreactivation = (/**
                 * @return {?}
                 */
                () => {
                    // only the initial navigation should be delayed
                    if (!this.initNavigation) {
                        this.initNavigation = true;
                        resolve(true);
                        return this.resultOfPreactivationDone;
                        // subsequent navigations should not be delayed
                    }
                    else {
                        return (/** @type {?} */ (Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null)));
                    }
                });
                router.initialNavigation();
            }
            else {
                throw new Error(`Invalid initialNavigation options: '${opts.initialNavigation}'`);
            }
            return res;
        }));
    }
    /**
     * @param {?} bootstrappedComponentRef
     * @return {?}
     */
    bootstrapListener(bootstrappedComponentRef) {
        /** @type {?} */
        const opts = this.injector.get(ROUTER_CONFIGURATION);
        /** @type {?} */
        const preloader = this.injector.get(RouterPreloader);
        /** @type {?} */
        const routerScroller = this.injector.get(RouterScroller);
        /** @type {?} */
        const router = this.injector.get(Router);
        /** @type {?} */
        const ref = this.injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]);
        if (bootstrappedComponentRef !== ref.components[0]) {
            return;
        }
        if (this.isLegacyEnabled(opts)) {
            router.initialNavigation();
        }
        else if (this.isLegacyDisabled(opts)) {
            router.setUpLocationChangeListener();
        }
        preloader.setUpPreloading();
        routerScroller.init();
        router.resetRootComponentType(ref.componentTypes[0]);
        this.resultOfPreactivationDone.next((/** @type {?} */ (null)));
        this.resultOfPreactivationDone.complete();
    }
    /**
     * @private
     * @param {?} opts
     * @return {?}
     */
    isLegacyEnabled(opts) {
        return opts.initialNavigation === 'legacy_enabled' || opts.initialNavigation === true ||
            opts.initialNavigation === undefined;
    }
    /**
     * @private
     * @param {?} opts
     * @return {?}
     */
    isLegacyDisabled(opts) {
        return opts.initialNavigation === 'legacy_disabled' || opts.initialNavigation === false;
    }
}
RouterInitializer.ɵfac = function RouterInitializer_Factory(t) { return new (t || RouterInitializer)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"])); };
RouterInitializer.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: RouterInitializer, factory: RouterInitializer.ɵfac });
/** @nocollapse */
RouterInitializer.ctorParameters = () => [
    { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"] }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](RouterInitializer, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"] }]; }, null); })();
if (false) {}
/**
 * @param {?} r
 * @return {?}
 */
function getAppInitializer(r) {
    return r.appInitializer.bind(r);
}
/**
 * @param {?} r
 * @return {?}
 */
function getBootstrapListener(r) {
    return r.bootstrapListener.bind(r);
}
/**
 * A [DI token](guide/glossary/#di-token) for the router initializer that
 * is called after the app is bootstrapped.
 *
 * \@publicApi
 * @type {?}
 */
const ROUTER_INITIALIZER = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('Router Initializer');
/**
 * @return {?}
 */
function provideRouterInitializer() {
    return [
        RouterInitializer,
        {
            provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_INITIALIZER"],
            multi: true,
            useFactory: getAppInitializer,
            deps: [RouterInitializer]
        },
        { provide: ROUTER_INITIALIZER, useFactory: getBootstrapListener, deps: [RouterInitializer] },
        { provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_BOOTSTRAP_LISTENER"], multi: true, useExisting: ROUTER_INITIALIZER },
    ];
}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/version.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * \@publicApi
 * @type {?}
 */
const VERSION = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["Version"]('9.0.7');

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/private_export.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/src/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/router/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=router.js.map

/***/ }),

/***/ "./node_modules/@angular/service-worker/__ivy_ngcc__/fesm2015/service-worker.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@angular/service-worker/__ivy_ngcc__/fesm2015/service-worker.js ***!
  \**************************************************************************************/
/*! exports provided: ServiceWorkerModule, SwPush, SwRegistrationOptions, SwUpdate, ɵangular_packages_service_worker_service_worker_a, ɵangular_packages_service_worker_service_worker_b, ɵangular_packages_service_worker_service_worker_c, ɵangular_packages_service_worker_service_worker_d */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServiceWorkerModule", function() { return ServiceWorkerModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwPush", function() { return SwPush; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwRegistrationOptions", function() { return SwRegistrationOptions; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SwUpdate", function() { return SwUpdate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_service_worker_service_worker_a", function() { return NgswCommChannel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_service_worker_service_worker_b", function() { return SCRIPT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_service_worker_service_worker_c", function() { return ngswAppInitializer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵangular_packages_service_worker_service_worker_d", function() { return ngswCommChannelFactory; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "./node_modules/@angular/common/__ivy_ngcc__/fesm2015/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "./node_modules/rxjs/_esm2015/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "./node_modules/rxjs/_esm2015/operators/index.js");
/**
 * @license Angular v9.0.7
 * (c) 2010-2020 Google LLC. https://angular.io/
 * License: MIT
 */






/**
 * @fileoverview added by tsickle
 * Generated from: packages/service-worker/src/low_level.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */

const ERR_SW_NOT_SUPPORTED = 'Service workers are disabled or not supported by this browser';
/**
 * An event emitted when a new version of the app is available.
 *
 * \@publicApi
 * @record
 */
function UpdateAvailableEvent() { }
if (false) {}
/**
 * An event emitted when a new version of the app has been downloaded and activated.
 *
 * \@publicApi
 * @record
 */
function UpdateActivatedEvent() { }
if (false) {}
/**
 * An event emitted when a `PushEvent` is received by the service worker.
 * @record
 */
function PushEvent() { }
if (false) {}
/**
 * @record
 */
function TypedEvent() { }
if (false) {}
/**
 * @record
 */
function StatusEvent() { }
if (false) {}
/**
 * @param {?} message
 * @return {?}
 */
function errorObservable(message) {
    return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["defer"])((/**
     * @return {?}
     */
    () => Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["throwError"])(new Error(message))));
}
/**
 * \@publicApi
 */
class NgswCommChannel {
    /**
     * @param {?} serviceWorker
     */
    constructor(serviceWorker) {
        this.serviceWorker = serviceWorker;
        if (!serviceWorker) {
            this.worker = this.events = this.registration = errorObservable(ERR_SW_NOT_SUPPORTED);
        }
        else {
            /** @type {?} */
            const controllerChangeEvents = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(serviceWorker, 'controllerchange');
            /** @type {?} */
            const controllerChanges = controllerChangeEvents.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @return {?}
             */
            () => serviceWorker.controller)));
            /** @type {?} */
            const currentController = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["defer"])((/**
             * @return {?}
             */
            () => Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(serviceWorker.controller)));
            /** @type {?} */
            const controllerWithChanges = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["concat"])(currentController, controllerChanges);
            this.worker = controllerWithChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])((/**
             * @param {?} c
             * @return {?}
             */
            (c) => !!c)));
            this.registration = (/** @type {?} */ ((this.worker.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
             * @return {?}
             */
            () => serviceWorker.getRegistration()))))));
            /** @type {?} */
            const rawEvents = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(serviceWorker, 'message');
            /** @type {?} */
            const rawEventPayload = rawEvents.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @param {?} event
             * @return {?}
             */
            event => event.data)));
            /** @type {?} */
            const eventsUnconnected = rawEventPayload.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])((/**
             * @param {?} event
             * @return {?}
             */
            event => event && event.type)));
            /** @type {?} */
            const events = (/** @type {?} */ (eventsUnconnected.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["publish"])())));
            events.connect();
            this.events = events;
        }
    }
    /**
     * @param {?} action
     * @param {?} payload
     * @return {?}
     */
    postMessage(action, payload) {
        return this.worker
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])((/**
         * @param {?} sw
         * @return {?}
         */
        (sw) => {
            sw.postMessage(Object.assign({ action }, payload));
        })))
            .toPromise()
            .then((/**
         * @return {?}
         */
        () => undefined));
    }
    /**
     * @param {?} type
     * @param {?} payload
     * @param {?} nonce
     * @return {?}
     */
    postMessageWithStatus(type, payload, nonce) {
        /** @type {?} */
        const waitForStatus = this.waitForStatus(nonce);
        /** @type {?} */
        const postMessage = this.postMessage(type, payload);
        return Promise.all([waitForStatus, postMessage]).then((/**
         * @return {?}
         */
        () => undefined));
    }
    /**
     * @return {?}
     */
    generateNonce() { return Math.round(Math.random() * 10000000); }
    /**
     * @template T
     * @param {?} type
     * @return {?}
     */
    eventsOfType(type) {
        /** @type {?} */
        const filterFn = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => event.type === type);
        return this.events.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(filterFn));
    }
    /**
     * @template T
     * @param {?} type
     * @return {?}
     */
    nextEventOfType(type) {
        return this.eventsOfType(type).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1));
    }
    /**
     * @param {?} nonce
     * @return {?}
     */
    waitForStatus(nonce) {
        return this.eventsOfType('STATUS')
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])((/**
         * @param {?} event
         * @return {?}
         */
        event => event.nonce === nonce)), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event.status) {
                return undefined;
            }
            throw new Error((/** @type {?} */ (event.error)));
        })))
            .toPromise();
    }
    /**
     * @return {?}
     */
    get isEnabled() { return !!this.serviceWorker; }
}
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/service-worker/src/push.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Subscribe and listen to
 * [Web Push Notifications](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)
 * through Angular Service Worker.
 *
 * \@usageNotes
 *
 * You can inject a `SwPush` instance into any component or service
 * as a dependency.
 *
 * <code-example path="service-worker/push/module.ts" region="inject-sw-push" header="app.component.ts"></code-example>
 *
 * To subscribe, call `SwPush.requestSubscription()`, which asks the user for permission.
 * The call returns a `Promise` with a new
 * [`PushSubscription`](https://developer.mozilla.org/en-US/docs/Web/API/PushSubscription)
 * instance.
 *
 * <code-example path="service-worker/push/module.ts" region="subscribe-to-push" header="app.component.ts"></code-example>
 *
 * A request is rejected if the user denies permission, or if the browser
 * blocks or does not support the Push API or ServiceWorkers.
 * Check `SwPush.isEnabled` to confirm status.
 *
 * Invoke Push Notifications by pushing a message with the following payload.
 *
 * ```ts
 * {
 *   "notification": {
 *     "actions": NotificationAction[],
 *     "badge": USVString
 *     "body": DOMString,
 *     "data": any,
 *     "dir": "auto"|"ltr"|"rtl",
 *     "icon": USVString,
 *     "image": USVString,
 *     "lang": DOMString,
 *     "renotify": boolean,
 *     "requireInteraction": boolean,
 *     "silent": boolean,
 *     "tag": DOMString,
 *     "timestamp": DOMTimeStamp,
 *     "title": DOMString,
 *     "vibrate": number[]
 *   }
 * }
 * ```
 *
 * Only `title` is required. See `Notification`
 * [instance properties](https://developer.mozilla.org/en-US/docs/Web/API/Notification#Instance_properties).
 *
 * While the subscription is active, Service Worker listens for
 * [PushEvent](https://developer.mozilla.org/en-US/docs/Web/API/PushEvent)
 * occurrences and creates
 * [Notification](https://developer.mozilla.org/en-US/docs/Web/API/Notification)
 * instances in response.
 *
 * Unsubscribe using `SwPush.unsubscribe()`.
 *
 * An application can subscribe to `SwPush.notificationClicks` observable to be notified when a user
 * clicks on a notification. For example:
 *
 * <code-example path="service-worker/push/module.ts" region="subscribe-to-notification-clicks" header="app.component.ts"></code-example>
 *
 * @see [Push Notifications](https://developers.google.com/web/fundamentals/codelabs/push-notifications/)
 * @see [Angular Push Notifications](https://blog.angular-university.io/angular-push-notifications/)
 * @see [MDN: Push API](https://developer.mozilla.org/en-US/docs/Web/API/Push_API)
 * @see [MDN: Notifications API](https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API)
 * @see [MDN: Web Push API Notifications best practices](https://developer.mozilla.org/en-US/docs/Web/API/Push_API/Best_Practices)
 *
 * \@publicApi
 */
class SwPush {
    /**
     * @param {?} sw
     */
    constructor(sw) {
        this.sw = sw;
        this.subscriptionChanges = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        if (!sw.isEnabled) {
            this.messages = rxjs__WEBPACK_IMPORTED_MODULE_2__["NEVER"];
            this.notificationClicks = rxjs__WEBPACK_IMPORTED_MODULE_2__["NEVER"];
            this.subscription = rxjs__WEBPACK_IMPORTED_MODULE_2__["NEVER"];
            return;
        }
        this.messages = this.sw.eventsOfType('PUSH').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} message
         * @return {?}
         */
        message => message.data)));
        this.notificationClicks =
            this.sw.eventsOfType('NOTIFICATION_CLICK').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
             * @param {?} message
             * @return {?}
             */
            (message) => message.data)));
        this.pushManager = this.sw.registration.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])((/**
         * @param {?} registration
         * @return {?}
         */
        registration => registration.pushManager)));
        /** @type {?} */
        const workerDrivenSubscriptions = this.pushManager.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
         * @param {?} pm
         * @return {?}
         */
        pm => pm.getSubscription())));
        this.subscription = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(workerDrivenSubscriptions, this.subscriptionChanges);
    }
    /**
     * True if the Service Worker is enabled (supported by the browser and enabled via
     * `ServiceWorkerModule`).
     * @return {?}
     */
    get isEnabled() { return this.sw.isEnabled; }
    /**
     * Subscribes to Web Push Notifications,
     * after requesting and receiving user permission.
     *
     * @param {?} options An object containing the `serverPublicKey` string.
     * @return {?} A Promise that resolves to the new subscription object.
     */
    requestSubscription(options) {
        if (!this.sw.isEnabled) {
            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));
        }
        /** @type {?} */
        const pushOptions = { userVisibleOnly: true };
        /** @type {?} */
        let key = this.decodeBase64(options.serverPublicKey.replace(/_/g, '/').replace(/-/g, '+'));
        /** @type {?} */
        let applicationServerKey = new Uint8Array(new ArrayBuffer(key.length));
        for (let i = 0; i < key.length; i++) {
            applicationServerKey[i] = key.charCodeAt(i);
        }
        pushOptions.applicationServerKey = applicationServerKey;
        return this.pushManager.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])((/**
         * @param {?} pm
         * @return {?}
         */
        pm => pm.subscribe(pushOptions))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1))
            .toPromise()
            .then((/**
         * @param {?} sub
         * @return {?}
         */
        sub => {
            this.subscriptionChanges.next(sub);
            return sub;
        }));
    }
    /**
     * Unsubscribes from Service Worker push notifications.
     *
     * @return {?} A Promise that is resolved when the operation succeeds, or is rejected if there is no
     *          active subscription or the unsubscribe operation fails.
     */
    unsubscribe() {
        if (!this.sw.isEnabled) {
            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));
        }
        /** @type {?} */
        const doUnsubscribe = (/**
         * @param {?} sub
         * @return {?}
         */
        (sub) => {
            if (sub === null) {
                throw new Error('Not subscribed to push notifications.');
            }
            return sub.unsubscribe().then((/**
             * @param {?} success
             * @return {?}
             */
            success => {
                if (!success) {
                    throw new Error('Unsubscribe failed!');
                }
                this.subscriptionChanges.next(null);
            }));
        });
        return this.subscription.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(doUnsubscribe)).toPromise();
    }
    /**
     * @private
     * @param {?} input
     * @return {?}
     */
    decodeBase64(input) { return atob(input); }
}
SwPush.ɵfac = function SwPush_Factory(t) { return new (t || SwPush)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](NgswCommChannel)); };
SwPush.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: SwPush, factory: SwPush.ɵfac });
/** @nocollapse */
SwPush.ctorParameters = () => [
    { type: NgswCommChannel }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](SwPush, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: NgswCommChannel }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/service-worker/src/update.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Subscribe to update notifications from the Service Worker, trigger update
 * checks, and forcibly activate updates.
 *
 * \@publicApi
 */
class SwUpdate {
    /**
     * @param {?} sw
     */
    constructor(sw) {
        this.sw = sw;
        if (!sw.isEnabled) {
            this.available = rxjs__WEBPACK_IMPORTED_MODULE_2__["NEVER"];
            this.activated = rxjs__WEBPACK_IMPORTED_MODULE_2__["NEVER"];
            return;
        }
        this.available = this.sw.eventsOfType('UPDATE_AVAILABLE');
        this.activated = this.sw.eventsOfType('UPDATE_ACTIVATED');
    }
    /**
     * True if the Service Worker is enabled (supported by the browser and enabled via
     * `ServiceWorkerModule`).
     * @return {?}
     */
    get isEnabled() { return this.sw.isEnabled; }
    /**
     * @return {?}
     */
    checkForUpdate() {
        if (!this.sw.isEnabled) {
            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));
        }
        /** @type {?} */
        const statusNonce = this.sw.generateNonce();
        return this.sw.postMessageWithStatus('CHECK_FOR_UPDATES', { statusNonce }, statusNonce);
    }
    /**
     * @return {?}
     */
    activateUpdate() {
        if (!this.sw.isEnabled) {
            return Promise.reject(new Error(ERR_SW_NOT_SUPPORTED));
        }
        /** @type {?} */
        const statusNonce = this.sw.generateNonce();
        return this.sw.postMessageWithStatus('ACTIVATE_UPDATE', { statusNonce }, statusNonce);
    }
}
SwUpdate.ɵfac = function SwUpdate_Factory(t) { return new (t || SwUpdate)(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"](NgswCommChannel)); };
SwUpdate.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"]({ token: SwUpdate, factory: SwUpdate.ɵfac });
/** @nocollapse */
SwUpdate.ctorParameters = () => [
    { type: NgswCommChannel }
];
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](SwUpdate, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"]
    }], function () { return [{ type: NgswCommChannel }]; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: packages/service-worker/src/module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Token that can be used to provide options for `ServiceWorkerModule` outside of
 * `ServiceWorkerModule.register()`.
 *
 * You can use this token to define a provider that generates the registration options at runtime,
 * for example via a function call:
 *
 * {\@example service-worker/registration-options/module.ts region="registration-options"
 *     header="app.module.ts"}
 *
 * \@publicApi
 * @abstract
 */
class SwRegistrationOptions {
}
if (false) {}
/** @type {?} */
const SCRIPT = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["InjectionToken"]('NGSW_REGISTER_SCRIPT');
/**
 * @param {?} injector
 * @param {?} script
 * @param {?} options
 * @param {?} platformId
 * @return {?}
 */
function ngswAppInitializer(injector, script, options, platformId) {
    /** @type {?} */
    const initializer = (/**
     * @return {?}
     */
    () => {
        if (!(Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["isPlatformBrowser"])(platformId) && ('serviceWorker' in navigator) &&
            options.enabled !== false)) {
            return;
        }
        // Wait for service worker controller changes, and fire an INITIALIZE action when a new SW
        // becomes active. This allows the SW to initialize itself even if there is no application
        // traffic.
        navigator.serviceWorker.addEventListener('controllerchange', (/**
         * @return {?}
         */
        () => {
            if (navigator.serviceWorker.controller !== null) {
                navigator.serviceWorker.controller.postMessage({ action: 'INITIALIZE' });
            }
        }));
        /** @type {?} */
        let readyToRegister$;
        if (typeof options.registrationStrategy === 'function') {
            readyToRegister$ = options.registrationStrategy();
        }
        else {
            const [strategy, ...args] = (options.registrationStrategy || 'registerWhenStable').split(':');
            switch (strategy) {
                case 'registerImmediately':
                    readyToRegister$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null);
                    break;
                case 'registerWithDelay':
                    readyToRegister$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["delay"])(+args[0] || 0));
                    break;
                case 'registerWhenStable':
                    /** @type {?} */
                    const appRef = injector.get(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ApplicationRef"]);
                    readyToRegister$ = appRef.isStable.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])((/**
                     * @param {?} stable
                     * @return {?}
                     */
                    stable => stable)));
                    break;
                default:
                    // Unknown strategy.
                    throw new Error(`Unknown ServiceWorker registration strategy: ${options.registrationStrategy}`);
            }
        }
        // Don't return anything to avoid blocking the application until the SW is registered.
        // Catch and log the error if SW registration fails to avoid uncaught rejection warning.
        readyToRegister$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(1)).subscribe((/**
         * @return {?}
         */
        () => navigator.serviceWorker.register(script, { scope: options.scope })
            .catch((/**
         * @param {?} err
         * @return {?}
         */
        err => console.error('Service worker registration failed with:', err)))));
    });
    return initializer;
}
/**
 * @param {?} opts
 * @param {?} platformId
 * @return {?}
 */
function ngswCommChannelFactory(opts, platformId) {
    return new NgswCommChannel(Object(_angular_common__WEBPACK_IMPORTED_MODULE_0__["isPlatformBrowser"])(platformId) && opts.enabled !== false ? navigator.serviceWorker :
        undefined);
}
/**
 * \@publicApi
 */
class ServiceWorkerModule {
    /**
     * Register the given Angular Service Worker script.
     *
     * If `enabled` is set to `false` in the given options, the module will behave as if service
     * workers are not supported by the browser, and the service worker will not be registered.
     * @param {?} script
     * @param {?=} opts
     * @return {?}
     */
    static register(script, opts = {}) {
        return {
            ngModule: ServiceWorkerModule,
            providers: [
                { provide: SCRIPT, useValue: script },
                { provide: SwRegistrationOptions, useValue: opts },
                {
                    provide: NgswCommChannel,
                    useFactory: ngswCommChannelFactory,
                    deps: [SwRegistrationOptions, _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]]
                },
                {
                    provide: _angular_core__WEBPACK_IMPORTED_MODULE_1__["APP_INITIALIZER"],
                    useFactory: ngswAppInitializer,
                    deps: [_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injector"], SCRIPT, SwRegistrationOptions, _angular_core__WEBPACK_IMPORTED_MODULE_1__["PLATFORM_ID"]],
                    multi: true,
                },
            ],
        };
    }
}
ServiceWorkerModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineNgModule"]({ type: ServiceWorkerModule });
ServiceWorkerModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjector"]({ factory: function ServiceWorkerModule_Factory(t) { return new (t || ServiceWorkerModule)(); }, providers: [SwPush, SwUpdate] });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵsetClassMetadata"](ServiceWorkerModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"],
        args: [{
                providers: [SwPush, SwUpdate]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: packages/service-worker/src/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/service-worker/public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: packages/service-worker/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * Generated bundle index. Do not edit.
 */



//# sourceMappingURL=service-worker.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/index.js":
/*!*********************************************!*\
  !*** ./node_modules/rxjs/_esm2015/index.js ***!
  \*********************************************/
/*! exports provided: Observable, ConnectableObservable, GroupedObservable, observable, Subject, BehaviorSubject, ReplaySubject, AsyncSubject, asapScheduler, asyncScheduler, queueScheduler, animationFrameScheduler, VirtualTimeScheduler, VirtualAction, Scheduler, Subscription, Subscriber, Notification, NotificationKind, pipe, noop, identity, isObservable, ArgumentOutOfRangeError, EmptyError, ObjectUnsubscribedError, UnsubscriptionError, TimeoutError, bindCallback, bindNodeCallback, combineLatest, concat, defer, empty, forkJoin, from, fromEvent, fromEventPattern, generate, iif, interval, merge, never, of, onErrorResumeNext, pairs, partition, race, range, throwError, timer, using, zip, scheduled, EMPTY, NEVER, config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _internal_Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Observable", function() { return _internal_Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]; });

/* harmony import */ var _internal_observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internal/observable/ConnectableObservable */ "./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function() { return _internal_observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_1__["ConnectableObservable"]; });

/* harmony import */ var _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/operators/groupBy */ "./node_modules/rxjs/_esm2015/internal/operators/groupBy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GroupedObservable", function() { return _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_2__["GroupedObservable"]; });

/* harmony import */ var _internal_symbol_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/symbol/observable */ "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return _internal_symbol_observable__WEBPACK_IMPORTED_MODULE_3__["observable"]; });

/* harmony import */ var _internal_Subject__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Subject", function() { return _internal_Subject__WEBPACK_IMPORTED_MODULE_4__["Subject"]; });

/* harmony import */ var _internal_BehaviorSubject__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/BehaviorSubject */ "./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function() { return _internal_BehaviorSubject__WEBPACK_IMPORTED_MODULE_5__["BehaviorSubject"]; });

/* harmony import */ var _internal_ReplaySubject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./internal/ReplaySubject */ "./node_modules/rxjs/_esm2015/internal/ReplaySubject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ReplaySubject", function() { return _internal_ReplaySubject__WEBPACK_IMPORTED_MODULE_6__["ReplaySubject"]; });

/* harmony import */ var _internal_AsyncSubject__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/AsyncSubject */ "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AsyncSubject", function() { return _internal_AsyncSubject__WEBPACK_IMPORTED_MODULE_7__["AsyncSubject"]; });

/* harmony import */ var _internal_scheduler_asap__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./internal/scheduler/asap */ "./node_modules/rxjs/_esm2015/internal/scheduler/asap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asapScheduler", function() { return _internal_scheduler_asap__WEBPACK_IMPORTED_MODULE_8__["asap"]; });

/* harmony import */ var _internal_scheduler_async__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./internal/scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "asyncScheduler", function() { return _internal_scheduler_async__WEBPACK_IMPORTED_MODULE_9__["async"]; });

/* harmony import */ var _internal_scheduler_queue__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./internal/scheduler/queue */ "./node_modules/rxjs/_esm2015/internal/scheduler/queue.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "queueScheduler", function() { return _internal_scheduler_queue__WEBPACK_IMPORTED_MODULE_10__["queue"]; });

/* harmony import */ var _internal_scheduler_animationFrame__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/scheduler/animationFrame */ "./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "animationFrameScheduler", function() { return _internal_scheduler_animationFrame__WEBPACK_IMPORTED_MODULE_11__["animationFrame"]; });

/* harmony import */ var _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal/scheduler/VirtualTimeScheduler */ "./node_modules/rxjs/_esm2015/internal/scheduler/VirtualTimeScheduler.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function() { return _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__["VirtualTimeScheduler"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VirtualAction", function() { return _internal_scheduler_VirtualTimeScheduler__WEBPACK_IMPORTED_MODULE_12__["VirtualAction"]; });

/* harmony import */ var _internal_Scheduler__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./internal/Scheduler */ "./node_modules/rxjs/_esm2015/internal/Scheduler.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Scheduler", function() { return _internal_Scheduler__WEBPACK_IMPORTED_MODULE_13__["Scheduler"]; });

/* harmony import */ var _internal_Subscription__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./internal/Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Subscription", function() { return _internal_Subscription__WEBPACK_IMPORTED_MODULE_14__["Subscription"]; });

/* harmony import */ var _internal_Subscriber__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./internal/Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Subscriber", function() { return _internal_Subscriber__WEBPACK_IMPORTED_MODULE_15__["Subscriber"]; });

/* harmony import */ var _internal_Notification__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./internal/Notification */ "./node_modules/rxjs/_esm2015/internal/Notification.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Notification", function() { return _internal_Notification__WEBPACK_IMPORTED_MODULE_16__["Notification"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NotificationKind", function() { return _internal_Notification__WEBPACK_IMPORTED_MODULE_16__["NotificationKind"]; });

/* harmony import */ var _internal_util_pipe__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./internal/util/pipe */ "./node_modules/rxjs/_esm2015/internal/util/pipe.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return _internal_util_pipe__WEBPACK_IMPORTED_MODULE_17__["pipe"]; });

/* harmony import */ var _internal_util_noop__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./internal/util/noop */ "./node_modules/rxjs/_esm2015/internal/util/noop.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return _internal_util_noop__WEBPACK_IMPORTED_MODULE_18__["noop"]; });

/* harmony import */ var _internal_util_identity__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./internal/util/identity */ "./node_modules/rxjs/_esm2015/internal/util/identity.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return _internal_util_identity__WEBPACK_IMPORTED_MODULE_19__["identity"]; });

/* harmony import */ var _internal_util_isObservable__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./internal/util/isObservable */ "./node_modules/rxjs/_esm2015/internal/util/isObservable.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return _internal_util_isObservable__WEBPACK_IMPORTED_MODULE_20__["isObservable"]; });

/* harmony import */ var _internal_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./internal/util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function() { return _internal_util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_21__["ArgumentOutOfRangeError"]; });

/* harmony import */ var _internal_util_EmptyError__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./internal/util/EmptyError */ "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EmptyError", function() { return _internal_util_EmptyError__WEBPACK_IMPORTED_MODULE_22__["EmptyError"]; });

/* harmony import */ var _internal_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./internal/util/ObjectUnsubscribedError */ "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function() { return _internal_util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_23__["ObjectUnsubscribedError"]; });

/* harmony import */ var _internal_util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./internal/util/UnsubscriptionError */ "./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function() { return _internal_util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_24__["UnsubscriptionError"]; });

/* harmony import */ var _internal_util_TimeoutError__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./internal/util/TimeoutError */ "./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TimeoutError", function() { return _internal_util_TimeoutError__WEBPACK_IMPORTED_MODULE_25__["TimeoutError"]; });

/* harmony import */ var _internal_observable_bindCallback__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./internal/observable/bindCallback */ "./node_modules/rxjs/_esm2015/internal/observable/bindCallback.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bindCallback", function() { return _internal_observable_bindCallback__WEBPACK_IMPORTED_MODULE_26__["bindCallback"]; });

/* harmony import */ var _internal_observable_bindNodeCallback__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./internal/observable/bindNodeCallback */ "./node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function() { return _internal_observable_bindNodeCallback__WEBPACK_IMPORTED_MODULE_27__["bindNodeCallback"]; });

/* harmony import */ var _internal_observable_combineLatest__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./internal/observable/combineLatest */ "./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "combineLatest", function() { return _internal_observable_combineLatest__WEBPACK_IMPORTED_MODULE_28__["combineLatest"]; });

/* harmony import */ var _internal_observable_concat__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./internal/observable/concat */ "./node_modules/rxjs/_esm2015/internal/observable/concat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return _internal_observable_concat__WEBPACK_IMPORTED_MODULE_29__["concat"]; });

/* harmony import */ var _internal_observable_defer__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./internal/observable/defer */ "./node_modules/rxjs/_esm2015/internal/observable/defer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defer", function() { return _internal_observable_defer__WEBPACK_IMPORTED_MODULE_30__["defer"]; });

/* harmony import */ var _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./internal/observable/empty */ "./node_modules/rxjs/_esm2015/internal/observable/empty.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__["empty"]; });

/* harmony import */ var _internal_observable_forkJoin__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./internal/observable/forkJoin */ "./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "forkJoin", function() { return _internal_observable_forkJoin__WEBPACK_IMPORTED_MODULE_32__["forkJoin"]; });

/* harmony import */ var _internal_observable_from__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./internal/observable/from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "from", function() { return _internal_observable_from__WEBPACK_IMPORTED_MODULE_33__["from"]; });

/* harmony import */ var _internal_observable_fromEvent__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./internal/observable/fromEvent */ "./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fromEvent", function() { return _internal_observable_fromEvent__WEBPACK_IMPORTED_MODULE_34__["fromEvent"]; });

/* harmony import */ var _internal_observable_fromEventPattern__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./internal/observable/fromEventPattern */ "./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "fromEventPattern", function() { return _internal_observable_fromEventPattern__WEBPACK_IMPORTED_MODULE_35__["fromEventPattern"]; });

/* harmony import */ var _internal_observable_generate__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./internal/observable/generate */ "./node_modules/rxjs/_esm2015/internal/observable/generate.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "generate", function() { return _internal_observable_generate__WEBPACK_IMPORTED_MODULE_36__["generate"]; });

/* harmony import */ var _internal_observable_iif__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./internal/observable/iif */ "./node_modules/rxjs/_esm2015/internal/observable/iif.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "iif", function() { return _internal_observable_iif__WEBPACK_IMPORTED_MODULE_37__["iif"]; });

/* harmony import */ var _internal_observable_interval__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./internal/observable/interval */ "./node_modules/rxjs/_esm2015/internal/observable/interval.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "interval", function() { return _internal_observable_interval__WEBPACK_IMPORTED_MODULE_38__["interval"]; });

/* harmony import */ var _internal_observable_merge__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./internal/observable/merge */ "./node_modules/rxjs/_esm2015/internal/observable/merge.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return _internal_observable_merge__WEBPACK_IMPORTED_MODULE_39__["merge"]; });

/* harmony import */ var _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./internal/observable/never */ "./node_modules/rxjs/_esm2015/internal/observable/never.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "never", function() { return _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__["never"]; });

/* harmony import */ var _internal_observable_of__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./internal/observable/of */ "./node_modules/rxjs/_esm2015/internal/observable/of.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "of", function() { return _internal_observable_of__WEBPACK_IMPORTED_MODULE_41__["of"]; });

/* harmony import */ var _internal_observable_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./internal/observable/onErrorResumeNext */ "./node_modules/rxjs/_esm2015/internal/observable/onErrorResumeNext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function() { return _internal_observable_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_42__["onErrorResumeNext"]; });

/* harmony import */ var _internal_observable_pairs__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./internal/observable/pairs */ "./node_modules/rxjs/_esm2015/internal/observable/pairs.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return _internal_observable_pairs__WEBPACK_IMPORTED_MODULE_43__["pairs"]; });

/* harmony import */ var _internal_observable_partition__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./internal/observable/partition */ "./node_modules/rxjs/_esm2015/internal/observable/partition.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "partition", function() { return _internal_observable_partition__WEBPACK_IMPORTED_MODULE_44__["partition"]; });

/* harmony import */ var _internal_observable_race__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./internal/observable/race */ "./node_modules/rxjs/_esm2015/internal/observable/race.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "race", function() { return _internal_observable_race__WEBPACK_IMPORTED_MODULE_45__["race"]; });

/* harmony import */ var _internal_observable_range__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./internal/observable/range */ "./node_modules/rxjs/_esm2015/internal/observable/range.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "range", function() { return _internal_observable_range__WEBPACK_IMPORTED_MODULE_46__["range"]; });

/* harmony import */ var _internal_observable_throwError__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./internal/observable/throwError */ "./node_modules/rxjs/_esm2015/internal/observable/throwError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "throwError", function() { return _internal_observable_throwError__WEBPACK_IMPORTED_MODULE_47__["throwError"]; });

/* harmony import */ var _internal_observable_timer__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./internal/observable/timer */ "./node_modules/rxjs/_esm2015/internal/observable/timer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "timer", function() { return _internal_observable_timer__WEBPACK_IMPORTED_MODULE_48__["timer"]; });

/* harmony import */ var _internal_observable_using__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./internal/observable/using */ "./node_modules/rxjs/_esm2015/internal/observable/using.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "using", function() { return _internal_observable_using__WEBPACK_IMPORTED_MODULE_49__["using"]; });

/* harmony import */ var _internal_observable_zip__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./internal/observable/zip */ "./node_modules/rxjs/_esm2015/internal/observable/zip.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return _internal_observable_zip__WEBPACK_IMPORTED_MODULE_50__["zip"]; });

/* harmony import */ var _internal_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./internal/scheduled/scheduled */ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scheduled", function() { return _internal_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_51__["scheduled"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EMPTY", function() { return _internal_observable_empty__WEBPACK_IMPORTED_MODULE_31__["EMPTY"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NEVER", function() { return _internal_observable_never__WEBPACK_IMPORTED_MODULE_40__["NEVER"]; });

/* harmony import */ var _internal_config__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./internal/config */ "./node_modules/rxjs/_esm2015/internal/config.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "config", function() { return _internal_config__WEBPACK_IMPORTED_MODULE_52__["config"]; });
























































//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/AsyncSubject.js ***!
  \*************************************************************/
/*! exports provided: AsyncSubject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncSubject", function() { return AsyncSubject; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");


class AsyncSubject extends _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"] {
    constructor() {
        super(...arguments);
        this.value = null;
        this.hasNext = false;
        this.hasCompleted = false;
    }
    _subscribe(subscriber) {
        if (this.hasError) {
            subscriber.error(this.thrownError);
            return _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
        }
        else if (this.hasCompleted && this.hasNext) {
            subscriber.next(this.value);
            subscriber.complete();
            return _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"].EMPTY;
        }
        return super._subscribe(subscriber);
    }
    next(value) {
        if (!this.hasCompleted) {
            this.value = value;
            this.hasNext = true;
        }
    }
    error(error) {
        if (!this.hasCompleted) {
            super.error(error);
        }
    }
    complete() {
        this.hasCompleted = true;
        if (this.hasNext) {
            super.next(this.value);
        }
        super.complete();
    }
}
//# sourceMappingURL=AsyncSubject.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js ***!
  \****************************************************************/
/*! exports provided: BehaviorSubject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BehaviorSubject", function() { return BehaviorSubject; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js");


class BehaviorSubject extends _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"] {
    constructor(_value) {
        super();
        this._value = _value;
    }
    get value() {
        return this.getValue();
    }
    _subscribe(subscriber) {
        const subscription = super._subscribe(subscriber);
        if (subscription && !subscription.closed) {
            subscriber.next(this._value);
        }
        return subscription;
    }
    getValue() {
        if (this.hasError) {
            throw this.thrownError;
        }
        else if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_1__["ObjectUnsubscribedError"]();
        }
        else {
            return this._value;
        }
    }
    next(value) {
        super.next(this._value = value);
    }
}
//# sourceMappingURL=BehaviorSubject.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js ***!
  \****************************************************************/
/*! exports provided: InnerSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InnerSubscriber", function() { return InnerSubscriber; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

class InnerSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(parent, outerValue, outerIndex) {
        super();
        this.parent = parent;
        this.outerValue = outerValue;
        this.outerIndex = outerIndex;
        this.index = 0;
    }
    _next(value) {
        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);
    }
    _error(error) {
        this.parent.notifyError(error, this);
        this.unsubscribe();
    }
    _complete() {
        this.parent.notifyComplete(this);
        this.unsubscribe();
    }
}
//# sourceMappingURL=InnerSubscriber.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/Notification.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Notification.js ***!
  \*************************************************************/
/*! exports provided: NotificationKind, Notification */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotificationKind", function() { return NotificationKind; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Notification", function() { return Notification; });
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable/empty */ "./node_modules/rxjs/_esm2015/internal/observable/empty.js");
/* harmony import */ var _observable_of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./observable/of */ "./node_modules/rxjs/_esm2015/internal/observable/of.js");
/* harmony import */ var _observable_throwError__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./observable/throwError */ "./node_modules/rxjs/_esm2015/internal/observable/throwError.js");



var NotificationKind;
(function (NotificationKind) {
    NotificationKind["NEXT"] = "N";
    NotificationKind["ERROR"] = "E";
    NotificationKind["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
class Notification {
    constructor(kind, value, error) {
        this.kind = kind;
        this.value = value;
        this.error = error;
        this.hasValue = kind === 'N';
    }
    observe(observer) {
        switch (this.kind) {
            case 'N':
                return observer.next && observer.next(this.value);
            case 'E':
                return observer.error && observer.error(this.error);
            case 'C':
                return observer.complete && observer.complete();
        }
    }
    do(next, error, complete) {
        const kind = this.kind;
        switch (kind) {
            case 'N':
                return next && next(this.value);
            case 'E':
                return error && error(this.error);
            case 'C':
                return complete && complete();
        }
    }
    accept(nextOrObserver, error, complete) {
        if (nextOrObserver && typeof nextOrObserver.next === 'function') {
            return this.observe(nextOrObserver);
        }
        else {
            return this.do(nextOrObserver, error, complete);
        }
    }
    toObservable() {
        const kind = this.kind;
        switch (kind) {
            case 'N':
                return Object(_observable_of__WEBPACK_IMPORTED_MODULE_1__["of"])(this.value);
            case 'E':
                return Object(_observable_throwError__WEBPACK_IMPORTED_MODULE_2__["throwError"])(this.error);
            case 'C':
                return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_0__["empty"])();
        }
        throw new Error('unexpected notification kind value');
    }
    static createNext(value) {
        if (typeof value !== 'undefined') {
            return new Notification('N', value);
        }
        return Notification.undefinedValueNotification;
    }
    static createError(err) {
        return new Notification('E', undefined, err);
    }
    static createComplete() {
        return Notification.completeNotification;
    }
}
Notification.completeNotification = new Notification('C');
Notification.undefinedValueNotification = new Notification('N', undefined);
//# sourceMappingURL=Notification.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/Observable.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Observable.js ***!
  \***********************************************************/
/*! exports provided: Observable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Observable", function() { return Observable; });
/* harmony import */ var _util_canReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/canReportError */ "./node_modules/rxjs/_esm2015/internal/util/canReportError.js");
/* harmony import */ var _util_toSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/toSubscriber */ "./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js");
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./symbol/observable */ "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");
/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/pipe */ "./node_modules/rxjs/_esm2015/internal/util/pipe.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ "./node_modules/rxjs/_esm2015/internal/config.js");





class Observable {
    constructor(subscribe) {
        this._isScalar = false;
        if (subscribe) {
            this._subscribe = subscribe;
        }
    }
    lift(operator) {
        const observable = new Observable();
        observable.source = this;
        observable.operator = operator;
        return observable;
    }
    subscribe(observerOrNext, error, complete) {
        const { operator } = this;
        const sink = Object(_util_toSubscriber__WEBPACK_IMPORTED_MODULE_1__["toSubscriber"])(observerOrNext, error, complete);
        if (operator) {
            sink.add(operator.call(sink, this.source));
        }
        else {
            sink.add(this.source || (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?
                this._subscribe(sink) :
                this._trySubscribe(sink));
        }
        if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
            if (sink.syncErrorThrowable) {
                sink.syncErrorThrowable = false;
                if (sink.syncErrorThrown) {
                    throw sink.syncErrorValue;
                }
            }
        }
        return sink;
    }
    _trySubscribe(sink) {
        try {
            return this._subscribe(sink);
        }
        catch (err) {
            if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
                sink.syncErrorThrown = true;
                sink.syncErrorValue = err;
            }
            if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_0__["canReportError"])(sink)) {
                sink.error(err);
            }
            else {
                console.warn(err);
            }
        }
    }
    forEach(next, promiseCtor) {
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor((resolve, reject) => {
            let subscription;
            subscription = this.subscribe((value) => {
                try {
                    next(value);
                }
                catch (err) {
                    reject(err);
                    if (subscription) {
                        subscription.unsubscribe();
                    }
                }
            }, reject, resolve);
        });
    }
    _subscribe(subscriber) {
        const { source } = this;
        return source && source.subscribe(subscriber);
    }
    [_symbol_observable__WEBPACK_IMPORTED_MODULE_2__["observable"]]() {
        return this;
    }
    pipe(...operations) {
        if (operations.length === 0) {
            return this;
        }
        return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipeFromArray"])(operations)(this);
    }
    toPromise(promiseCtor) {
        promiseCtor = getPromiseCtor(promiseCtor);
        return new promiseCtor((resolve, reject) => {
            let value;
            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));
        });
    }
}
Observable.create = (subscribe) => {
    return new Observable(subscribe);
};
function getPromiseCtor(promiseCtor) {
    if (!promiseCtor) {
        promiseCtor = _config__WEBPACK_IMPORTED_MODULE_4__["config"].Promise || Promise;
    }
    if (!promiseCtor) {
        throw new Error('no Promise impl found');
    }
    return promiseCtor;
}
//# sourceMappingURL=Observable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/Observer.js":
/*!*********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Observer.js ***!
  \*********************************************************/
/*! exports provided: empty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./node_modules/rxjs/_esm2015/internal/config.js");
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/hostReportError */ "./node_modules/rxjs/_esm2015/internal/util/hostReportError.js");


const empty = {
    closed: true,
    next(value) { },
    error(err) {
        if (_config__WEBPACK_IMPORTED_MODULE_0__["config"].useDeprecatedSynchronousErrorHandling) {
            throw err;
        }
        else {
            Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_1__["hostReportError"])(err);
        }
    },
    complete() { }
};
//# sourceMappingURL=Observer.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js ***!
  \****************************************************************/
/*! exports provided: OuterSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OuterSubscriber", function() { return OuterSubscriber; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

class OuterSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    }
    notifyError(error, innerSub) {
        this.destination.error(error);
    }
    notifyComplete(innerSub) {
        this.destination.complete();
    }
}
//# sourceMappingURL=OuterSubscriber.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/ReplaySubject.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/ReplaySubject.js ***!
  \**************************************************************/
/*! exports provided: ReplaySubject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReplaySubject", function() { return ReplaySubject; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _scheduler_queue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scheduler/queue */ "./node_modules/rxjs/_esm2015/internal/scheduler/queue.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _operators_observeOn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./operators/observeOn */ "./node_modules/rxjs/_esm2015/internal/operators/observeOn.js");
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js");
/* harmony import */ var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./SubjectSubscription */ "./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js");






class ReplaySubject extends _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"] {
    constructor(bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, scheduler) {
        super();
        this.scheduler = scheduler;
        this._events = [];
        this._infiniteTimeWindow = false;
        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;
        this._windowTime = windowTime < 1 ? 1 : windowTime;
        if (windowTime === Number.POSITIVE_INFINITY) {
            this._infiniteTimeWindow = true;
            this.next = this.nextInfiniteTimeWindow;
        }
        else {
            this.next = this.nextTimeWindow;
        }
    }
    nextInfiniteTimeWindow(value) {
        const _events = this._events;
        _events.push(value);
        if (_events.length > this._bufferSize) {
            _events.shift();
        }
        super.next(value);
    }
    nextTimeWindow(value) {
        this._events.push(new ReplayEvent(this._getNow(), value));
        this._trimBufferThenGetEvents();
        super.next(value);
    }
    _subscribe(subscriber) {
        const _infiniteTimeWindow = this._infiniteTimeWindow;
        const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();
        const scheduler = this.scheduler;
        const len = _events.length;
        let subscription;
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_4__["ObjectUnsubscribedError"]();
        }
        else if (this.isStopped || this.hasError) {
            subscription = _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
        }
        else {
            this.observers.push(subscriber);
            subscription = new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_5__["SubjectSubscription"](this, subscriber);
        }
        if (scheduler) {
            subscriber.add(subscriber = new _operators_observeOn__WEBPACK_IMPORTED_MODULE_3__["ObserveOnSubscriber"](subscriber, scheduler));
        }
        if (_infiniteTimeWindow) {
            for (let i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i]);
            }
        }
        else {
            for (let i = 0; i < len && !subscriber.closed; i++) {
                subscriber.next(_events[i].value);
            }
        }
        if (this.hasError) {
            subscriber.error(this.thrownError);
        }
        else if (this.isStopped) {
            subscriber.complete();
        }
        return subscription;
    }
    _getNow() {
        return (this.scheduler || _scheduler_queue__WEBPACK_IMPORTED_MODULE_1__["queue"]).now();
    }
    _trimBufferThenGetEvents() {
        const now = this._getNow();
        const _bufferSize = this._bufferSize;
        const _windowTime = this._windowTime;
        const _events = this._events;
        const eventsCount = _events.length;
        let spliceCount = 0;
        while (spliceCount < eventsCount) {
            if ((now - _events[spliceCount].time) < _windowTime) {
                break;
            }
            spliceCount++;
        }
        if (eventsCount > _bufferSize) {
            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);
        }
        if (spliceCount > 0) {
            _events.splice(0, spliceCount);
        }
        return _events;
    }
}
class ReplayEvent {
    constructor(time, value) {
        this.time = time;
        this.value = value;
    }
}
//# sourceMappingURL=ReplaySubject.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/Scheduler.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Scheduler.js ***!
  \**********************************************************/
/*! exports provided: Scheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Scheduler", function() { return Scheduler; });
class Scheduler {
    constructor(SchedulerAction, now = Scheduler.now) {
        this.SchedulerAction = SchedulerAction;
        this.now = now;
    }
    schedule(work, delay = 0, state) {
        return new this.SchedulerAction(this, work).schedule(state, delay);
    }
}
Scheduler.now = () => Date.now();
//# sourceMappingURL=Scheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/Subject.js":
/*!********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Subject.js ***!
  \********************************************************/
/*! exports provided: SubjectSubscriber, Subject, AnonymousSubject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectSubscriber", function() { return SubjectSubscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Subject", function() { return Subject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnonymousSubject", function() { return AnonymousSubject; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/ObjectUnsubscribedError */ "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js");
/* harmony import */ var _SubjectSubscription__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SubjectSubscription */ "./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js");
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ "./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js");






class SubjectSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"] {
    constructor(destination) {
        super(destination);
        this.destination = destination;
    }
}
class Subject extends _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"] {
    constructor() {
        super();
        this.observers = [];
        this.closed = false;
        this.isStopped = false;
        this.hasError = false;
        this.thrownError = null;
    }
    [_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_5__["rxSubscriber"]]() {
        return new SubjectSubscriber(this);
    }
    lift(operator) {
        const subject = new AnonymousSubject(this, this);
        subject.operator = operator;
        return subject;
    }
    next(value) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
        }
        if (!this.isStopped) {
            const { observers } = this;
            const len = observers.length;
            const copy = observers.slice();
            for (let i = 0; i < len; i++) {
                copy[i].next(value);
            }
        }
    }
    error(err) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
        }
        this.hasError = true;
        this.thrownError = err;
        this.isStopped = true;
        const { observers } = this;
        const len = observers.length;
        const copy = observers.slice();
        for (let i = 0; i < len; i++) {
            copy[i].error(err);
        }
        this.observers.length = 0;
    }
    complete() {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
        }
        this.isStopped = true;
        const { observers } = this;
        const len = observers.length;
        const copy = observers.slice();
        for (let i = 0; i < len; i++) {
            copy[i].complete();
        }
        this.observers.length = 0;
    }
    unsubscribe() {
        this.isStopped = true;
        this.closed = true;
        this.observers = null;
    }
    _trySubscribe(subscriber) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
        }
        else {
            return super._trySubscribe(subscriber);
        }
    }
    _subscribe(subscriber) {
        if (this.closed) {
            throw new _util_ObjectUnsubscribedError__WEBPACK_IMPORTED_MODULE_3__["ObjectUnsubscribedError"]();
        }
        else if (this.hasError) {
            subscriber.error(this.thrownError);
            return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
        }
        else if (this.isStopped) {
            subscriber.complete();
            return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
        }
        else {
            this.observers.push(subscriber);
            return new _SubjectSubscription__WEBPACK_IMPORTED_MODULE_4__["SubjectSubscription"](this, subscriber);
        }
    }
    asObservable() {
        const observable = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]();
        observable.source = this;
        return observable;
    }
}
Subject.create = (destination, source) => {
    return new AnonymousSubject(destination, source);
};
class AnonymousSubject extends Subject {
    constructor(destination, source) {
        super();
        this.destination = destination;
        this.source = source;
    }
    next(value) {
        const { destination } = this;
        if (destination && destination.next) {
            destination.next(value);
        }
    }
    error(err) {
        const { destination } = this;
        if (destination && destination.error) {
            this.destination.error(err);
        }
    }
    complete() {
        const { destination } = this;
        if (destination && destination.complete) {
            this.destination.complete();
        }
    }
    _subscribe(subscriber) {
        const { source } = this;
        if (source) {
            return this.source.subscribe(subscriber);
        }
        else {
            return _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"].EMPTY;
        }
    }
}
//# sourceMappingURL=Subject.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/SubjectSubscription.js ***!
  \********************************************************************/
/*! exports provided: SubjectSubscription */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubjectSubscription", function() { return SubjectSubscription; });
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");

class SubjectSubscription extends _Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"] {
    constructor(subject, subscriber) {
        super();
        this.subject = subject;
        this.subscriber = subscriber;
        this.closed = false;
    }
    unsubscribe() {
        if (this.closed) {
            return;
        }
        this.closed = true;
        const subject = this.subject;
        const observers = subject.observers;
        this.subject = null;
        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {
            return;
        }
        const subscriberIndex = observers.indexOf(this.subscriber);
        if (subscriberIndex !== -1) {
            observers.splice(subscriberIndex, 1);
        }
    }
}
//# sourceMappingURL=SubjectSubscription.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/Subscriber.js":
/*!***********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Subscriber.js ***!
  \***********************************************************/
/*! exports provided: Subscriber, SafeSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Subscriber", function() { return Subscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SafeSubscriber", function() { return SafeSubscriber; });
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/isFunction */ "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Observer */ "./node_modules/rxjs/_esm2015/internal/Observer.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/symbol/rxSubscriber */ "./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js");
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./config */ "./node_modules/rxjs/_esm2015/internal/config.js");
/* harmony import */ var _util_hostReportError__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/hostReportError */ "./node_modules/rxjs/_esm2015/internal/util/hostReportError.js");






class Subscriber extends _Subscription__WEBPACK_IMPORTED_MODULE_2__["Subscription"] {
    constructor(destinationOrNext, error, complete) {
        super();
        this.syncErrorValue = null;
        this.syncErrorThrown = false;
        this.syncErrorThrowable = false;
        this.isStopped = false;
        switch (arguments.length) {
            case 0:
                this.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__["empty"];
                break;
            case 1:
                if (!destinationOrNext) {
                    this.destination = _Observer__WEBPACK_IMPORTED_MODULE_1__["empty"];
                    break;
                }
                if (typeof destinationOrNext === 'object') {
                    if (destinationOrNext instanceof Subscriber) {
                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;
                        this.destination = destinationOrNext;
                        destinationOrNext.add(this);
                    }
                    else {
                        this.syncErrorThrowable = true;
                        this.destination = new SafeSubscriber(this, destinationOrNext);
                    }
                    break;
                }
            default:
                this.syncErrorThrowable = true;
                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);
                break;
        }
    }
    [_internal_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_3__["rxSubscriber"]]() { return this; }
    static create(next, error, complete) {
        const subscriber = new Subscriber(next, error, complete);
        subscriber.syncErrorThrowable = false;
        return subscriber;
    }
    next(value) {
        if (!this.isStopped) {
            this._next(value);
        }
    }
    error(err) {
        if (!this.isStopped) {
            this.isStopped = true;
            this._error(err);
        }
    }
    complete() {
        if (!this.isStopped) {
            this.isStopped = true;
            this._complete();
        }
    }
    unsubscribe() {
        if (this.closed) {
            return;
        }
        this.isStopped = true;
        super.unsubscribe();
    }
    _next(value) {
        this.destination.next(value);
    }
    _error(err) {
        this.destination.error(err);
        this.unsubscribe();
    }
    _complete() {
        this.destination.complete();
        this.unsubscribe();
    }
    _unsubscribeAndRecycle() {
        const { _parentOrParents } = this;
        this._parentOrParents = null;
        this.unsubscribe();
        this.closed = false;
        this.isStopped = false;
        this._parentOrParents = _parentOrParents;
        return this;
    }
}
class SafeSubscriber extends Subscriber {
    constructor(_parentSubscriber, observerOrNext, error, complete) {
        super();
        this._parentSubscriber = _parentSubscriber;
        let next;
        let context = this;
        if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(observerOrNext)) {
            next = observerOrNext;
        }
        else if (observerOrNext) {
            next = observerOrNext.next;
            error = observerOrNext.error;
            complete = observerOrNext.complete;
            if (observerOrNext !== _Observer__WEBPACK_IMPORTED_MODULE_1__["empty"]) {
                context = Object.create(observerOrNext);
                if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_0__["isFunction"])(context.unsubscribe)) {
                    this.add(context.unsubscribe.bind(context));
                }
                context.unsubscribe = this.unsubscribe.bind(this);
            }
        }
        this._context = context;
        this._next = next;
        this._error = error;
        this._complete = complete;
    }
    next(value) {
        if (!this.isStopped && this._next) {
            const { _parentSubscriber } = this;
            if (!_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                this.__tryOrUnsub(this._next, value);
            }
            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {
                this.unsubscribe();
            }
        }
    }
    error(err) {
        if (!this.isStopped) {
            const { _parentSubscriber } = this;
            const { useDeprecatedSynchronousErrorHandling } = _config__WEBPACK_IMPORTED_MODULE_4__["config"];
            if (this._error) {
                if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(this._error, err);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, this._error, err);
                    this.unsubscribe();
                }
            }
            else if (!_parentSubscriber.syncErrorThrowable) {
                this.unsubscribe();
                if (useDeprecatedSynchronousErrorHandling) {
                    throw err;
                }
                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
            }
            else {
                if (useDeprecatedSynchronousErrorHandling) {
                    _parentSubscriber.syncErrorValue = err;
                    _parentSubscriber.syncErrorThrown = true;
                }
                else {
                    Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
                }
                this.unsubscribe();
            }
        }
    }
    complete() {
        if (!this.isStopped) {
            const { _parentSubscriber } = this;
            if (this._complete) {
                const wrappedComplete = () => this._complete.call(this._context);
                if (!_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {
                    this.__tryOrUnsub(wrappedComplete);
                    this.unsubscribe();
                }
                else {
                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);
                    this.unsubscribe();
                }
            }
            else {
                this.unsubscribe();
            }
        }
    }
    __tryOrUnsub(fn, value) {
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            this.unsubscribe();
            if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
                throw err;
            }
            else {
                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
            }
        }
    }
    __tryOrSetError(parent, fn, value) {
        if (!_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
            throw new Error('bad call');
        }
        try {
            fn.call(this._context, value);
        }
        catch (err) {
            if (_config__WEBPACK_IMPORTED_MODULE_4__["config"].useDeprecatedSynchronousErrorHandling) {
                parent.syncErrorValue = err;
                parent.syncErrorThrown = true;
                return true;
            }
            else {
                Object(_util_hostReportError__WEBPACK_IMPORTED_MODULE_5__["hostReportError"])(err);
                return true;
            }
        }
        return false;
    }
    _unsubscribe() {
        const { _parentSubscriber } = this;
        this._context = null;
        this._parentSubscriber = null;
        _parentSubscriber.unsubscribe();
    }
}
//# sourceMappingURL=Subscriber.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/Subscription.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/Subscription.js ***!
  \*************************************************************/
/*! exports provided: Subscription */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Subscription", function() { return Subscription; });
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _util_isObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/isObject */ "./node_modules/rxjs/_esm2015/internal/util/isObject.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/isFunction */ "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");
/* harmony import */ var _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/UnsubscriptionError */ "./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js");




class Subscription {
    constructor(unsubscribe) {
        this.closed = false;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (unsubscribe) {
            this._unsubscribe = unsubscribe;
        }
    }
    unsubscribe() {
        let errors;
        if (this.closed) {
            return;
        }
        let { _parentOrParents, _unsubscribe, _subscriptions } = this;
        this.closed = true;
        this._parentOrParents = null;
        this._subscriptions = null;
        if (_parentOrParents instanceof Subscription) {
            _parentOrParents.remove(this);
        }
        else if (_parentOrParents !== null) {
            for (let index = 0; index < _parentOrParents.length; ++index) {
                const parent = _parentOrParents[index];
                parent.remove(this);
            }
        }
        if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(_unsubscribe)) {
            try {
                _unsubscribe.call(this);
            }
            catch (e) {
                errors = e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"] ? flattenUnsubscriptionErrors(e.errors) : [e];
            }
        }
        if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(_subscriptions)) {
            let index = -1;
            let len = _subscriptions.length;
            while (++index < len) {
                const sub = _subscriptions[index];
                if (Object(_util_isObject__WEBPACK_IMPORTED_MODULE_1__["isObject"])(sub)) {
                    try {
                        sub.unsubscribe();
                    }
                    catch (e) {
                        errors = errors || [];
                        if (e instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"]) {
                            errors = errors.concat(flattenUnsubscriptionErrors(e.errors));
                        }
                        else {
                            errors.push(e);
                        }
                    }
                }
            }
        }
        if (errors) {
            throw new _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"](errors);
        }
    }
    add(teardown) {
        let subscription = teardown;
        if (!teardown) {
            return Subscription.EMPTY;
        }
        switch (typeof teardown) {
            case 'function':
                subscription = new Subscription(teardown);
            case 'object':
                if (subscription === this || subscription.closed || typeof subscription.unsubscribe !== 'function') {
                    return subscription;
                }
                else if (this.closed) {
                    subscription.unsubscribe();
                    return subscription;
                }
                else if (!(subscription instanceof Subscription)) {
                    const tmp = subscription;
                    subscription = new Subscription();
                    subscription._subscriptions = [tmp];
                }
                break;
            default: {
                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');
            }
        }
        let { _parentOrParents } = subscription;
        if (_parentOrParents === null) {
            subscription._parentOrParents = this;
        }
        else if (_parentOrParents instanceof Subscription) {
            if (_parentOrParents === this) {
                return subscription;
            }
            subscription._parentOrParents = [_parentOrParents, this];
        }
        else if (_parentOrParents.indexOf(this) === -1) {
            _parentOrParents.push(this);
        }
        else {
            return subscription;
        }
        const subscriptions = this._subscriptions;
        if (subscriptions === null) {
            this._subscriptions = [subscription];
        }
        else {
            subscriptions.push(subscription);
        }
        return subscription;
    }
    remove(subscription) {
        const subscriptions = this._subscriptions;
        if (subscriptions) {
            const subscriptionIndex = subscriptions.indexOf(subscription);
            if (subscriptionIndex !== -1) {
                subscriptions.splice(subscriptionIndex, 1);
            }
        }
    }
}
Subscription.EMPTY = (function (empty) {
    empty.closed = true;
    return empty;
}(new Subscription()));
function flattenUnsubscriptionErrors(errors) {
    return errors.reduce((errs, err) => errs.concat((err instanceof _util_UnsubscriptionError__WEBPACK_IMPORTED_MODULE_3__["UnsubscriptionError"]) ? err.errors : err), []);
}
//# sourceMappingURL=Subscription.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/config.js":
/*!*******************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/config.js ***!
  \*******************************************************/
/*! exports provided: config */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "config", function() { return config; });
let _enable_super_gross_mode_that_will_cause_bad_things = false;
const config = {
    Promise: undefined,
    set useDeprecatedSynchronousErrorHandling(value) {
        if (value) {
            const error = new Error();
            console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \n' + error.stack);
        }
        else if (_enable_super_gross_mode_that_will_cause_bad_things) {
            console.log('RxJS: Back to a better error behavior. Thank you. <3');
        }
        _enable_super_gross_mode_that_will_cause_bad_things = value;
    },
    get useDeprecatedSynchronousErrorHandling() {
        return _enable_super_gross_mode_that_will_cause_bad_things;
    },
};
//# sourceMappingURL=config.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js ***!
  \*********************************************************************************/
/*! exports provided: ConnectableObservable, connectableObservableDescriptor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConnectableObservable", function() { return ConnectableObservable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "connectableObservableDescriptor", function() { return connectableObservableDescriptor; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _operators_refCount__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../operators/refCount */ "./node_modules/rxjs/_esm2015/internal/operators/refCount.js");





class ConnectableObservable extends _Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"] {
    constructor(source, subjectFactory) {
        super();
        this.source = source;
        this.subjectFactory = subjectFactory;
        this._refCount = 0;
        this._isComplete = false;
    }
    _subscribe(subscriber) {
        return this.getSubject().subscribe(subscriber);
    }
    getSubject() {
        const subject = this._subject;
        if (!subject || subject.isStopped) {
            this._subject = this.subjectFactory();
        }
        return this._subject;
    }
    connect() {
        let connection = this._connection;
        if (!connection) {
            this._isComplete = false;
            connection = this._connection = new _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"]();
            connection.add(this.source
                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));
            if (connection.closed) {
                this._connection = null;
                connection = _Subscription__WEBPACK_IMPORTED_MODULE_3__["Subscription"].EMPTY;
            }
        }
        return connection;
    }
    refCount() {
        return Object(_operators_refCount__WEBPACK_IMPORTED_MODULE_4__["refCount"])()(this);
    }
}
const connectableObservableDescriptor = (() => {
    const connectableProto = ConnectableObservable.prototype;
    return {
        operator: { value: null },
        _refCount: { value: 0, writable: true },
        _subject: { value: null, writable: true },
        _connection: { value: null, writable: true },
        _subscribe: { value: connectableProto._subscribe },
        _isComplete: { value: connectableProto._isComplete, writable: true },
        getSubject: { value: connectableProto.getSubject },
        connect: { value: connectableProto.connect },
        refCount: { value: connectableProto.refCount }
    };
})();
class ConnectableSubscriber extends _Subject__WEBPACK_IMPORTED_MODULE_0__["SubjectSubscriber"] {
    constructor(destination, connectable) {
        super(destination);
        this.connectable = connectable;
    }
    _error(err) {
        this._unsubscribe();
        super._error(err);
    }
    _complete() {
        this.connectable._isComplete = true;
        this._unsubscribe();
        super._complete();
    }
    _unsubscribe() {
        const connectable = this.connectable;
        if (connectable) {
            this.connectable = null;
            const connection = connectable._connection;
            connectable._refCount = 0;
            connectable._subject = null;
            connectable._connection = null;
            if (connection) {
                connection.unsubscribe();
            }
        }
    }
}
class RefCountOperator {
    constructor(connectable) {
        this.connectable = connectable;
    }
    call(subscriber, source) {
        const { connectable } = this;
        connectable._refCount++;
        const refCounter = new RefCountSubscriber(subscriber, connectable);
        const subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    }
}
class RefCountSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"] {
    constructor(destination, connectable) {
        super(destination);
        this.connectable = connectable;
    }
    _unsubscribe() {
        const { connectable } = this;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        const refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        const { connection } = this;
        const sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    }
}
//# sourceMappingURL=ConnectableObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/SubscribeOnObservable.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/SubscribeOnObservable.js ***!
  \*********************************************************************************/
/*! exports provided: SubscribeOnObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubscribeOnObservable", function() { return SubscribeOnObservable; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduler/asap */ "./node_modules/rxjs/_esm2015/internal/scheduler/asap.js");
/* harmony import */ var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isNumeric */ "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js");



class SubscribeOnObservable extends _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"] {
    constructor(source, delayTime = 0, scheduler = _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__["asap"]) {
        super();
        this.source = source;
        this.delayTime = delayTime;
        this.scheduler = scheduler;
        if (!Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(delayTime) || delayTime < 0) {
            this.delayTime = 0;
        }
        if (!scheduler || typeof scheduler.schedule !== 'function') {
            this.scheduler = _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__["asap"];
        }
    }
    static create(source, delay = 0, scheduler = _scheduler_asap__WEBPACK_IMPORTED_MODULE_1__["asap"]) {
        return new SubscribeOnObservable(source, delay, scheduler);
    }
    static dispatch(arg) {
        const { source, subscriber } = arg;
        return this.add(source.subscribe(subscriber));
    }
    _subscribe(subscriber) {
        const delay = this.delayTime;
        const source = this.source;
        const scheduler = this.scheduler;
        return scheduler.schedule(SubscribeOnObservable.dispatch, delay, {
            source, subscriber
        });
    }
}
//# sourceMappingURL=SubscribeOnObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/bindCallback.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/bindCallback.js ***!
  \************************************************************************/
/*! exports provided: bindCallback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindCallback", function() { return bindCallback; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../AsyncSubject */ "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");
/* harmony import */ var _util_canReportError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/canReportError */ "./node_modules/rxjs/_esm2015/internal/util/canReportError.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");






function bindCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_5__["isScheduler"])(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            return (...args) => bindCallback(callbackFunc, scheduler)(...args).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])((args) => Object(_util_isArray__WEBPACK_IMPORTED_MODULE_4__["isArray"])(args) ? resultSelector(...args) : resultSelector(args)));
        }
    }
    return function (...args) {
        const context = this;
        let subject;
        const params = {
            context,
            subject,
            callbackFunc,
            scheduler,
        };
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
            if (!scheduler) {
                if (!subject) {
                    subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();
                    const handler = (...innerArgs) => {
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, [...args, handler]);
                    }
                    catch (err) {
                        if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_3__["canReportError"])(subject)) {
                            subject.error(err);
                        }
                        else {
                            console.warn(err);
                        }
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                const state = {
                    args, subscriber, params,
                };
                return scheduler.schedule(dispatch, 0, state);
            }
        });
    };
}
function dispatch(state) {
    const self = this;
    const { args, subscriber, params } = state;
    const { callbackFunc, context, scheduler } = params;
    let { subject } = params;
    if (!subject) {
        subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();
        const handler = (...innerArgs) => {
            const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
            this.add(scheduler.schedule(dispatchNext, 0, { value, subject }));
        };
        try {
            callbackFunc.apply(context, [...args, handler]);
        }
        catch (err) {
            subject.error(err);
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(state) {
    const { value, subject } = state;
    subject.next(value);
    subject.complete();
}
function dispatchError(state) {
    const { err, subject } = state;
    subject.error(err);
}
//# sourceMappingURL=bindCallback.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js":
/*!****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js ***!
  \****************************************************************************/
/*! exports provided: bindNodeCallback */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindNodeCallback", function() { return bindNodeCallback; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../AsyncSubject */ "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");
/* harmony import */ var _util_canReportError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/canReportError */ "./node_modules/rxjs/_esm2015/internal/util/canReportError.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");






function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
    if (resultSelector) {
        if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(resultSelector)) {
            scheduler = resultSelector;
        }
        else {
            return (...args) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])(args => Object(_util_isArray__WEBPACK_IMPORTED_MODULE_5__["isArray"])(args) ? resultSelector(...args) : resultSelector(args)));
        }
    }
    return function (...args) {
        const params = {
            subject: undefined,
            args,
            callbackFunc,
            scheduler,
            context: this,
        };
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
            const { context } = params;
            let { subject } = params;
            if (!scheduler) {
                if (!subject) {
                    subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();
                    const handler = (...innerArgs) => {
                        const err = innerArgs.shift();
                        if (err) {
                            subject.error(err);
                            return;
                        }
                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);
                        subject.complete();
                    };
                    try {
                        callbackFunc.apply(context, [...args, handler]);
                    }
                    catch (err) {
                        if (Object(_util_canReportError__WEBPACK_IMPORTED_MODULE_3__["canReportError"])(subject)) {
                            subject.error(err);
                        }
                        else {
                            console.warn(err);
                        }
                    }
                }
                return subject.subscribe(subscriber);
            }
            else {
                return scheduler.schedule(dispatch, 0, { params, subscriber, context });
            }
        });
    };
}
function dispatch(state) {
    const { params, subscriber, context } = state;
    const { callbackFunc, args, scheduler } = params;
    let subject = params.subject;
    if (!subject) {
        subject = params.subject = new _AsyncSubject__WEBPACK_IMPORTED_MODULE_1__["AsyncSubject"]();
        const handler = (...innerArgs) => {
            const err = innerArgs.shift();
            if (err) {
                this.add(scheduler.schedule(dispatchError, 0, { err, subject }));
            }
            else {
                const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;
                this.add(scheduler.schedule(dispatchNext, 0, { value, subject }));
            }
        };
        try {
            callbackFunc.apply(context, [...args, handler]);
        }
        catch (err) {
            this.add(scheduler.schedule(dispatchError, 0, { err, subject }));
        }
    }
    this.add(subject.subscribe(subscriber));
}
function dispatchNext(arg) {
    const { value, subject } = arg;
    subject.next(value);
    subject.complete();
}
function dispatchError(arg) {
    const { err, subject } = arg;
    subject.error(err);
}
//# sourceMappingURL=bindNodeCallback.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js ***!
  \*************************************************************************/
/*! exports provided: combineLatest, CombineLatestOperator, CombineLatestSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineLatest", function() { return combineLatest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CombineLatestOperator", function() { return CombineLatestOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CombineLatestSubscriber", function() { return CombineLatestSubscriber; });
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");





const NONE = {};
function combineLatest(...observables) {
    let resultSelector = null;
    let scheduler = null;
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__["isScheduler"])(observables[observables.length - 1])) {
        scheduler = observables.pop();
    }
    if (typeof observables[observables.length - 1] === 'function') {
        resultSelector = observables.pop();
    }
    if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(observables[0])) {
        observables = observables[0];
    }
    return Object(_fromArray__WEBPACK_IMPORTED_MODULE_4__["fromArray"])(observables, scheduler).lift(new CombineLatestOperator(resultSelector));
}
class CombineLatestOperator {
    constructor(resultSelector) {
        this.resultSelector = resultSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));
    }
}
class CombineLatestSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"] {
    constructor(destination, resultSelector) {
        super(destination);
        this.resultSelector = resultSelector;
        this.active = 0;
        this.values = [];
        this.observables = [];
    }
    _next(observable) {
        this.values.push(NONE);
        this.observables.push(observable);
    }
    _complete() {
        const observables = this.observables;
        const len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            this.active = len;
            this.toRespond = len;
            for (let i = 0; i < len; i++) {
                const observable = observables[i];
                this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, observable, observable, i));
            }
        }
    }
    notifyComplete(unused) {
        if ((this.active -= 1) === 0) {
            this.destination.complete();
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        const values = this.values;
        const oldVal = values[outerIndex];
        const toRespond = !this.toRespond
            ? 0
            : oldVal === NONE ? --this.toRespond : this.toRespond;
        values[outerIndex] = innerValue;
        if (toRespond === 0) {
            if (this.resultSelector) {
                this._tryResultSelector(values);
            }
            else {
                this.destination.next(values.slice());
            }
        }
    }
    _tryResultSelector(values) {
        let result;
        try {
            result = this.resultSelector.apply(this, values);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    }
}
//# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/concat.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/concat.js ***!
  \******************************************************************/
/*! exports provided: concat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return concat; });
/* harmony import */ var _of__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./of */ "./node_modules/rxjs/_esm2015/internal/observable/of.js");
/* harmony import */ var _operators_concatAll__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../operators/concatAll */ "./node_modules/rxjs/_esm2015/internal/operators/concatAll.js");


function concat(...observables) {
    return Object(_operators_concatAll__WEBPACK_IMPORTED_MODULE_1__["concatAll"])()(Object(_of__WEBPACK_IMPORTED_MODULE_0__["of"])(...observables));
}
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/defer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/defer.js ***!
  \*****************************************************************/
/*! exports provided: defer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defer", function() { return defer; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./empty */ "./node_modules/rxjs/_esm2015/internal/observable/empty.js");



function defer(observableFactory) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        let input;
        try {
            input = observableFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        const source = input ? Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(input) : Object(_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
        return source.subscribe(subscriber);
    });
}
//# sourceMappingURL=defer.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/empty.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/empty.js ***!
  \*****************************************************************/
/*! exports provided: EMPTY, empty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY", function() { return EMPTY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "empty", function() { return empty; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");

const EMPTY = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => subscriber.complete());
function empty(scheduler) {
    return scheduler ? emptyScheduled(scheduler) : EMPTY;
}
function emptyScheduled(scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => scheduler.schedule(() => subscriber.complete()));
}
//# sourceMappingURL=empty.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/forkJoin.js ***!
  \********************************************************************/
/*! exports provided: forkJoin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forkJoin", function() { return forkJoin; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");
/* harmony import */ var _util_isObject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isObject */ "./node_modules/rxjs/_esm2015/internal/util/isObject.js");
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");





function forkJoin(...sources) {
    if (sources.length === 1) {
        const first = sources[0];
        if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(first)) {
            return forkJoinInternal(first, null);
        }
        if (Object(_util_isObject__WEBPACK_IMPORTED_MODULE_3__["isObject"])(first) && Object.getPrototypeOf(first) === Object.prototype) {
            const keys = Object.keys(first);
            return forkJoinInternal(keys.map(key => first[key]), keys);
        }
    }
    if (typeof sources[sources.length - 1] === 'function') {
        const resultSelector = sources.pop();
        sources = (sources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(sources[0])) ? sources[0] : sources;
        return forkJoinInternal(sources, null).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_2__["map"])((args) => resultSelector(...args)));
    }
    return forkJoinInternal(sources, null);
}
function forkJoinInternal(sources, keys) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        const len = sources.length;
        if (len === 0) {
            subscriber.complete();
            return;
        }
        const values = new Array(len);
        let completed = 0;
        let emitted = 0;
        for (let i = 0; i < len; i++) {
            const source = Object(_from__WEBPACK_IMPORTED_MODULE_4__["from"])(sources[i]);
            let hasValue = false;
            subscriber.add(source.subscribe({
                next: value => {
                    if (!hasValue) {
                        hasValue = true;
                        emitted++;
                    }
                    values[i] = value;
                },
                error: err => subscriber.error(err),
                complete: () => {
                    completed++;
                    if (completed === len || !hasValue) {
                        if (emitted === len) {
                            subscriber.next(keys ?
                                keys.reduce((result, key, i) => (result[key] = values[i], result), {}) :
                                values);
                        }
                        subscriber.complete();
                    }
                }
            }));
        }
    });
}
//# sourceMappingURL=forkJoin.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/from.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/from.js ***!
  \****************************************************************/
/*! exports provided: from */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "from", function() { return from; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeTo */ "./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js");
/* harmony import */ var _scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scheduled/scheduled */ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js");



function from(input, scheduler) {
    if (!scheduler) {
        if (input instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]) {
            return input;
        }
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(input));
    }
    else {
        return Object(_scheduled_scheduled__WEBPACK_IMPORTED_MODULE_2__["scheduled"])(input, scheduler);
    }
}
//# sourceMappingURL=from.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/fromArray.js ***!
  \*********************************************************************/
/*! exports provided: fromArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromArray", function() { return fromArray; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToArray */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js");
/* harmony import */ var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scheduled/scheduleArray */ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js");



function fromArray(input, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](Object(_util_subscribeToArray__WEBPACK_IMPORTED_MODULE_1__["subscribeToArray"])(input));
    }
    else {
        return Object(_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__["scheduleArray"])(input, scheduler);
    }
}
//# sourceMappingURL=fromArray.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/fromEvent.js ***!
  \*********************************************************************/
/*! exports provided: fromEvent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEvent", function() { return fromEvent; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isFunction */ "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");




const toString = (() => Object.prototype.toString)();
function fromEvent(target, eventName, options, resultSelector) {
    if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(options)) {
        resultSelector = options;
        options = undefined;
    }
    if (resultSelector) {
        return fromEvent(target, eventName, options).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_3__["map"])(args => Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(args) ? resultSelector(...args) : resultSelector(args)));
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        function handler(e) {
            if (arguments.length > 1) {
                subscriber.next(Array.prototype.slice.call(arguments));
            }
            else {
                subscriber.next(e);
            }
        }
        setupSubscription(target, eventName, handler, subscriber, options);
    });
}
function setupSubscription(sourceObj, eventName, handler, subscriber, options) {
    let unsubscribe;
    if (isEventTarget(sourceObj)) {
        const source = sourceObj;
        sourceObj.addEventListener(eventName, handler, options);
        unsubscribe = () => source.removeEventListener(eventName, handler, options);
    }
    else if (isJQueryStyleEventEmitter(sourceObj)) {
        const source = sourceObj;
        sourceObj.on(eventName, handler);
        unsubscribe = () => source.off(eventName, handler);
    }
    else if (isNodeStyleEventEmitter(sourceObj)) {
        const source = sourceObj;
        sourceObj.addListener(eventName, handler);
        unsubscribe = () => source.removeListener(eventName, handler);
    }
    else if (sourceObj && sourceObj.length) {
        for (let i = 0, len = sourceObj.length; i < len; i++) {
            setupSubscription(sourceObj[i], eventName, handler, subscriber, options);
        }
    }
    else {
        throw new TypeError('Invalid event target');
    }
    subscriber.add(unsubscribe);
}
function isNodeStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';
}
function isJQueryStyleEventEmitter(sourceObj) {
    return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';
}
function isEventTarget(sourceObj) {
    return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';
}
//# sourceMappingURL=fromEvent.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js":
/*!****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/fromEventPattern.js ***!
  \****************************************************************************/
/*! exports provided: fromEventPattern */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fromEventPattern", function() { return fromEventPattern; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isFunction */ "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");
/* harmony import */ var _operators_map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../operators/map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");




function fromEventPattern(addHandler, removeHandler, resultSelector) {
    if (resultSelector) {
        return fromEventPattern(addHandler, removeHandler).pipe(Object(_operators_map__WEBPACK_IMPORTED_MODULE_3__["map"])(args => Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(args) ? resultSelector(...args) : resultSelector(args)));
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        const handler = (...e) => subscriber.next(e.length === 1 ? e[0] : e);
        let retValue;
        try {
            retValue = addHandler(handler);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(removeHandler)) {
            return undefined;
        }
        return () => removeHandler(handler, retValue);
    });
}
//# sourceMappingURL=fromEventPattern.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/generate.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/generate.js ***!
  \********************************************************************/
/*! exports provided: generate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generate", function() { return generate; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm2015/internal/util/identity.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");



function generate(initialStateOrOptions, condition, iterate, resultSelectorOrObservable, scheduler) {
    let resultSelector;
    let initialState;
    if (arguments.length == 1) {
        const options = initialStateOrOptions;
        initialState = options.initialState;
        condition = options.condition;
        iterate = options.iterate;
        resultSelector = options.resultSelector || _util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"];
        scheduler = options.scheduler;
    }
    else if (resultSelectorOrObservable === undefined || Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_2__["isScheduler"])(resultSelectorOrObservable)) {
        initialState = initialStateOrOptions;
        resultSelector = _util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"];
        scheduler = resultSelectorOrObservable;
    }
    else {
        initialState = initialStateOrOptions;
        resultSelector = resultSelectorOrObservable;
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        let state = initialState;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                subscriber,
                iterate,
                condition,
                resultSelector,
                state
            });
        }
        do {
            if (condition) {
                let conditionResult;
                try {
                    conditionResult = condition(state);
                }
                catch (err) {
                    subscriber.error(err);
                    return undefined;
                }
                if (!conditionResult) {
                    subscriber.complete();
                    break;
                }
            }
            let value;
            try {
                value = resultSelector(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
            subscriber.next(value);
            if (subscriber.closed) {
                break;
            }
            try {
                state = iterate(state);
            }
            catch (err) {
                subscriber.error(err);
                return undefined;
            }
        } while (true);
        return undefined;
    });
}
function dispatch(state) {
    const { subscriber, condition } = state;
    if (subscriber.closed) {
        return undefined;
    }
    if (state.needIterate) {
        try {
            state.state = state.iterate(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
    }
    else {
        state.needIterate = true;
    }
    if (condition) {
        let conditionResult;
        try {
            conditionResult = condition(state.state);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        if (!conditionResult) {
            subscriber.complete();
            return undefined;
        }
        if (subscriber.closed) {
            return undefined;
        }
    }
    let value;
    try {
        value = state.resultSelector(state.state);
    }
    catch (err) {
        subscriber.error(err);
        return undefined;
    }
    if (subscriber.closed) {
        return undefined;
    }
    subscriber.next(value);
    if (subscriber.closed) {
        return undefined;
    }
    return this.schedule(state);
}
//# sourceMappingURL=generate.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/iif.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/iif.js ***!
  \***************************************************************/
/*! exports provided: iif */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iif", function() { return iif; });
/* harmony import */ var _defer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defer */ "./node_modules/rxjs/_esm2015/internal/observable/defer.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./empty */ "./node_modules/rxjs/_esm2015/internal/observable/empty.js");


function iif(condition, trueResult = _empty__WEBPACK_IMPORTED_MODULE_1__["EMPTY"], falseResult = _empty__WEBPACK_IMPORTED_MODULE_1__["EMPTY"]) {
    return Object(_defer__WEBPACK_IMPORTED_MODULE_0__["defer"])(() => condition() ? trueResult : falseResult);
}
//# sourceMappingURL=iif.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/interval.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/interval.js ***!
  \********************************************************************/
/*! exports provided: interval */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "interval", function() { return interval; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isNumeric */ "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js");



function interval(period = 0, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"]) {
    if (!Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(period) || period < 0) {
        period = 0;
    }
    if (!scheduler || typeof scheduler.schedule !== 'function') {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));
        return subscriber;
    });
}
function dispatch(state) {
    const { subscriber, counter, period } = state;
    subscriber.next(counter);
    this.schedule({ subscriber, counter: counter + 1, period }, period);
}
//# sourceMappingURL=interval.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/merge.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/merge.js ***!
  \*****************************************************************/
/*! exports provided: merge */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return merge; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");
/* harmony import */ var _operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/mergeAll */ "./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");




function merge(...observables) {
    let concurrent = Number.POSITIVE_INFINITY;
    let scheduler = null;
    let last = observables[observables.length - 1];
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__["isScheduler"])(last)) {
        scheduler = observables.pop();
        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {
            concurrent = observables.pop();
        }
    }
    else if (typeof last === 'number') {
        concurrent = observables.pop();
    }
    if (scheduler === null && observables.length === 1 && observables[0] instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"]) {
        return observables[0];
    }
    return Object(_operators_mergeAll__WEBPACK_IMPORTED_MODULE_2__["mergeAll"])(concurrent)(Object(_fromArray__WEBPACK_IMPORTED_MODULE_3__["fromArray"])(observables, scheduler));
}
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/never.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/never.js ***!
  \*****************************************************************/
/*! exports provided: NEVER, never */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEVER", function() { return NEVER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "never", function() { return never; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/noop */ "./node_modules/rxjs/_esm2015/internal/util/noop.js");


const NEVER = new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](_util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"]);
function never() {
    return NEVER;
}
//# sourceMappingURL=never.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/of.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/of.js ***!
  \**************************************************************/
/*! exports provided: of */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "of", function() { return of; });
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");
/* harmony import */ var _scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../scheduled/scheduleArray */ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js");



function of(...args) {
    let scheduler = args[args.length - 1];
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_0__["isScheduler"])(scheduler)) {
        args.pop();
        return Object(_scheduled_scheduleArray__WEBPACK_IMPORTED_MODULE_2__["scheduleArray"])(args, scheduler);
    }
    else {
        return Object(_fromArray__WEBPACK_IMPORTED_MODULE_1__["fromArray"])(args);
    }
}
//# sourceMappingURL=of.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/onErrorResumeNext.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/onErrorResumeNext.js ***!
  \*****************************************************************************/
/*! exports provided: onErrorResumeNext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function() { return onErrorResumeNext; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./empty */ "./node_modules/rxjs/_esm2015/internal/observable/empty.js");




function onErrorResumeNext(...sources) {
    if (sources.length === 0) {
        return _empty__WEBPACK_IMPORTED_MODULE_3__["EMPTY"];
    }
    const [first, ...remainder] = sources;
    if (sources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_2__["isArray"])(first)) {
        return onErrorResumeNext(...first);
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        const subNext = () => subscriber.add(onErrorResumeNext(...remainder).subscribe(subscriber));
        return Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(first).subscribe({
            next(value) { subscriber.next(value); },
            error: subNext,
            complete: subNext,
        });
    });
}
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/pairs.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/pairs.js ***!
  \*****************************************************************/
/*! exports provided: pairs, dispatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pairs", function() { return pairs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dispatch", function() { return dispatch; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");


function pairs(obj, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
            const keys = Object.keys(obj);
            for (let i = 0; i < keys.length && !subscriber.closed; i++) {
                const key = keys[i];
                if (obj.hasOwnProperty(key)) {
                    subscriber.next([key, obj[key]]);
                }
            }
            subscriber.complete();
        });
    }
    else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
            const keys = Object.keys(obj);
            const subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            subscription.add(scheduler.schedule(dispatch, 0, { keys, index: 0, subscriber, subscription, obj }));
            return subscription;
        });
    }
}
function dispatch(state) {
    const { keys, index, subscriber, subscription, obj } = state;
    if (!subscriber.closed) {
        if (index < keys.length) {
            const key = keys[index];
            subscriber.next([key, obj[key]]);
            subscription.add(this.schedule({ keys, index: index + 1, subscriber, subscription, obj }));
        }
        else {
            subscriber.complete();
        }
    }
}
//# sourceMappingURL=pairs.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/partition.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/partition.js ***!
  \*********************************************************************/
/*! exports provided: partition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partition", function() { return partition; });
/* harmony import */ var _util_not__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/not */ "./node_modules/rxjs/_esm2015/internal/util/not.js");
/* harmony import */ var _util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeTo */ "./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js");
/* harmony import */ var _operators_filter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../operators/filter */ "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");




function partition(source, predicate, thisArg) {
    return [
        Object(_operators_filter__WEBPACK_IMPORTED_MODULE_2__["filter"])(predicate, thisArg)(new _Observable__WEBPACK_IMPORTED_MODULE_3__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(source))),
        Object(_operators_filter__WEBPACK_IMPORTED_MODULE_2__["filter"])(Object(_util_not__WEBPACK_IMPORTED_MODULE_0__["not"])(predicate, thisArg))(new _Observable__WEBPACK_IMPORTED_MODULE_3__["Observable"](Object(_util_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(source)))
    ];
}
//# sourceMappingURL=partition.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/race.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/race.js ***!
  \****************************************************************/
/*! exports provided: race, RaceOperator, RaceSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "race", function() { return race; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RaceOperator", function() { return RaceOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RaceSubscriber", function() { return RaceSubscriber; });
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");




function race(...observables) {
    if (observables.length === 1) {
        if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(observables[0])) {
            observables = observables[0];
        }
        else {
            return observables[0];
        }
    }
    return Object(_fromArray__WEBPACK_IMPORTED_MODULE_1__["fromArray"])(observables, undefined).lift(new RaceOperator());
}
class RaceOperator {
    call(subscriber, source) {
        return source.subscribe(new RaceSubscriber(subscriber));
    }
}
class RaceSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"] {
    constructor(destination) {
        super(destination);
        this.hasFirst = false;
        this.observables = [];
        this.subscriptions = [];
    }
    _next(observable) {
        this.observables.push(observable);
    }
    _complete() {
        const observables = this.observables;
        const len = observables.length;
        if (len === 0) {
            this.destination.complete();
        }
        else {
            for (let i = 0; i < len && !this.hasFirst; i++) {
                let observable = observables[i];
                let subscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, observable, observable, i);
                if (this.subscriptions) {
                    this.subscriptions.push(subscription);
                }
                this.add(subscription);
            }
            this.observables = null;
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (!this.hasFirst) {
            this.hasFirst = true;
            for (let i = 0; i < this.subscriptions.length; i++) {
                if (i !== outerIndex) {
                    let subscription = this.subscriptions[i];
                    subscription.unsubscribe();
                    this.remove(subscription);
                }
            }
            this.subscriptions = null;
        }
        this.destination.next(innerValue);
    }
}
//# sourceMappingURL=race.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/range.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/range.js ***!
  \*****************************************************************/
/*! exports provided: range, dispatch */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "range", function() { return range; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dispatch", function() { return dispatch; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");

function range(start = 0, count, scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        if (count === undefined) {
            count = start;
            start = 0;
        }
        let index = 0;
        let current = start;
        if (scheduler) {
            return scheduler.schedule(dispatch, 0, {
                index, count, start, subscriber
            });
        }
        else {
            do {
                if (index++ >= count) {
                    subscriber.complete();
                    break;
                }
                subscriber.next(current++);
                if (subscriber.closed) {
                    break;
                }
            } while (true);
        }
        return undefined;
    });
}
function dispatch(state) {
    const { start, index, count, subscriber } = state;
    if (index >= count) {
        subscriber.complete();
        return;
    }
    subscriber.next(start);
    if (subscriber.closed) {
        return;
    }
    state.index = index + 1;
    state.start = start + 1;
    this.schedule(state);
}
//# sourceMappingURL=range.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/throwError.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/throwError.js ***!
  \**********************************************************************/
/*! exports provided: throwError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwError", function() { return throwError; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");

function throwError(error, scheduler) {
    if (!scheduler) {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => subscriber.error(error));
    }
    else {
        return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));
    }
}
function dispatch({ error, subscriber }) {
    subscriber.error(error);
}
//# sourceMappingURL=throwError.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/timer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/timer.js ***!
  \*****************************************************************/
/*! exports provided: timer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timer", function() { return timer; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _util_isNumeric__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isNumeric */ "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");




function timer(dueTime = 0, periodOrScheduler, scheduler) {
    let period = -1;
    if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(periodOrScheduler)) {
        period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);
    }
    else if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_3__["isScheduler"])(periodOrScheduler)) {
        scheduler = periodOrScheduler;
    }
    if (!Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_3__["isScheduler"])(scheduler)) {
        scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        const due = Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_2__["isNumeric"])(dueTime)
            ? dueTime
            : (+dueTime - scheduler.now());
        return scheduler.schedule(dispatch, due, {
            index: 0, period, subscriber
        });
    });
}
function dispatch(state) {
    const { index, period, subscriber } = state;
    subscriber.next(index);
    if (subscriber.closed) {
        return;
    }
    else if (period === -1) {
        return subscriber.complete();
    }
    state.index = index + 1;
    this.schedule(state, period);
}
//# sourceMappingURL=timer.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/using.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/using.js ***!
  \*****************************************************************/
/*! exports provided: using */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "using", function() { return using; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _from__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");
/* harmony import */ var _empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./empty */ "./node_modules/rxjs/_esm2015/internal/observable/empty.js");



function using(resourceFactory, observableFactory) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        let resource;
        try {
            resource = resourceFactory();
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        let result;
        try {
            result = observableFactory(resource);
        }
        catch (err) {
            subscriber.error(err);
            return undefined;
        }
        const source = result ? Object(_from__WEBPACK_IMPORTED_MODULE_1__["from"])(result) : _empty__WEBPACK_IMPORTED_MODULE_2__["EMPTY"];
        const subscription = source.subscribe(subscriber);
        return () => {
            subscription.unsubscribe();
            if (resource) {
                resource.unsubscribe();
            }
        };
    });
}
//# sourceMappingURL=using.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/observable/zip.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/observable/zip.js ***!
  \***************************************************************/
/*! exports provided: zip, ZipOperator, ZipSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return zip; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZipOperator", function() { return ZipOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZipSubscriber", function() { return ZipSubscriber; });
/* harmony import */ var _fromArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fromArray */ "./node_modules/rxjs/_esm2015/internal/observable/fromArray.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
/* harmony import */ var _internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../internal/symbol/iterator */ "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");






function zip(...observables) {
    const resultSelector = observables[observables.length - 1];
    if (typeof resultSelector === 'function') {
        observables.pop();
    }
    return Object(_fromArray__WEBPACK_IMPORTED_MODULE_0__["fromArray"])(observables, undefined).lift(new ZipOperator(resultSelector));
}
class ZipOperator {
    constructor(resultSelector) {
        this.resultSelector = resultSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));
    }
}
class ZipSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"] {
    constructor(destination, resultSelector, values = Object.create(null)) {
        super(destination);
        this.iterators = [];
        this.active = 0;
        this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;
        this.values = values;
    }
    _next(value) {
        const iterators = this.iterators;
        if (Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(value)) {
            iterators.push(new StaticArrayIterator(value));
        }
        else if (typeof value[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__["iterator"]] === 'function') {
            iterators.push(new StaticIterator(value[_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__["iterator"]]()));
        }
        else {
            iterators.push(new ZipBufferIterator(this.destination, this, value));
        }
    }
    _complete() {
        const iterators = this.iterators;
        const len = iterators.length;
        this.unsubscribe();
        if (len === 0) {
            this.destination.complete();
            return;
        }
        this.active = len;
        for (let i = 0; i < len; i++) {
            let iterator = iterators[i];
            if (iterator.stillUnsubscribed) {
                const destination = this.destination;
                destination.add(iterator.subscribe(iterator, i));
            }
            else {
                this.active--;
            }
        }
    }
    notifyInactive() {
        this.active--;
        if (this.active === 0) {
            this.destination.complete();
        }
    }
    checkIterators() {
        const iterators = this.iterators;
        const len = iterators.length;
        const destination = this.destination;
        for (let i = 0; i < len; i++) {
            let iterator = iterators[i];
            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {
                return;
            }
        }
        let shouldComplete = false;
        const args = [];
        for (let i = 0; i < len; i++) {
            let iterator = iterators[i];
            let result = iterator.next();
            if (iterator.hasCompleted()) {
                shouldComplete = true;
            }
            if (result.done) {
                destination.complete();
                return;
            }
            args.push(result.value);
        }
        if (this.resultSelector) {
            this._tryresultSelector(args);
        }
        else {
            destination.next(args);
        }
        if (shouldComplete) {
            destination.complete();
        }
    }
    _tryresultSelector(args) {
        let result;
        try {
            result = this.resultSelector.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    }
}
class StaticIterator {
    constructor(iterator) {
        this.iterator = iterator;
        this.nextResult = iterator.next();
    }
    hasValue() {
        return true;
    }
    next() {
        const result = this.nextResult;
        this.nextResult = this.iterator.next();
        return result;
    }
    hasCompleted() {
        const nextResult = this.nextResult;
        return nextResult && nextResult.done;
    }
}
class StaticArrayIterator {
    constructor(array) {
        this.array = array;
        this.index = 0;
        this.length = 0;
        this.length = array.length;
    }
    [_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__["iterator"]]() {
        return this;
    }
    next(value) {
        const i = this.index++;
        const array = this.array;
        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };
    }
    hasValue() {
        return this.array.length > this.index;
    }
    hasCompleted() {
        return this.array.length === this.index;
    }
}
class ZipBufferIterator extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_3__["OuterSubscriber"] {
    constructor(destination, parent, observable) {
        super(destination);
        this.parent = parent;
        this.observable = observable;
        this.stillUnsubscribed = true;
        this.buffer = [];
        this.isComplete = false;
    }
    [_internal_symbol_iterator__WEBPACK_IMPORTED_MODULE_5__["iterator"]]() {
        return this;
    }
    next() {
        const buffer = this.buffer;
        if (buffer.length === 0 && this.isComplete) {
            return { value: null, done: true };
        }
        else {
            return { value: buffer.shift(), done: false };
        }
    }
    hasValue() {
        return this.buffer.length > 0;
    }
    hasCompleted() {
        return this.buffer.length === 0 && this.isComplete;
    }
    notifyComplete() {
        if (this.buffer.length > 0) {
            this.isComplete = true;
            this.parent.notifyInactive();
        }
        else {
            this.destination.complete();
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.buffer.push(innerValue);
        this.parent.checkIterators();
    }
    subscribe(value, index) {
        return Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__["subscribeToResult"])(this, this.observable, this, index);
    }
}
//# sourceMappingURL=zip.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/audit.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/audit.js ***!
  \****************************************************************/
/*! exports provided: audit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "audit", function() { return audit; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


function audit(durationSelector) {
    return function auditOperatorFunction(source) {
        return source.lift(new AuditOperator(durationSelector));
    };
}
class AuditOperator {
    constructor(durationSelector) {
        this.durationSelector = durationSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));
    }
}
class AuditSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, durationSelector) {
        super(destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
    }
    _next(value) {
        this.value = value;
        this.hasValue = true;
        if (!this.throttled) {
            let duration;
            try {
                const { durationSelector } = this;
                duration = durationSelector(value);
            }
            catch (err) {
                return this.destination.error(err);
            }
            const innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, duration);
            if (!innerSubscription || innerSubscription.closed) {
                this.clearThrottle();
            }
            else {
                this.add(this.throttled = innerSubscription);
            }
        }
    }
    clearThrottle() {
        const { value, hasValue, throttled } = this;
        if (throttled) {
            this.remove(throttled);
            this.throttled = null;
            throttled.unsubscribe();
        }
        if (hasValue) {
            this.value = null;
            this.hasValue = false;
            this.destination.next(value);
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex) {
        this.clearThrottle();
    }
    notifyComplete() {
        this.clearThrottle();
    }
}
//# sourceMappingURL=audit.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/auditTime.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/auditTime.js ***!
  \********************************************************************/
/*! exports provided: auditTime */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "auditTime", function() { return auditTime; });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _audit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audit */ "./node_modules/rxjs/_esm2015/internal/operators/audit.js");
/* harmony import */ var _observable_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/timer */ "./node_modules/rxjs/_esm2015/internal/observable/timer.js");



function auditTime(duration, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"]) {
    return Object(_audit__WEBPACK_IMPORTED_MODULE_1__["audit"])(() => Object(_observable_timer__WEBPACK_IMPORTED_MODULE_2__["timer"])(duration, scheduler));
}
//# sourceMappingURL=auditTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/buffer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/buffer.js ***!
  \*****************************************************************/
/*! exports provided: buffer */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buffer", function() { return buffer; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


function buffer(closingNotifier) {
    return function bufferOperatorFunction(source) {
        return source.lift(new BufferOperator(closingNotifier));
    };
}
class BufferOperator {
    constructor(closingNotifier) {
        this.closingNotifier = closingNotifier;
    }
    call(subscriber, source) {
        return source.subscribe(new BufferSubscriber(subscriber, this.closingNotifier));
    }
}
class BufferSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, closingNotifier) {
        super(destination);
        this.buffer = [];
        this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, closingNotifier));
    }
    _next(value) {
        this.buffer.push(value);
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        const buffer = this.buffer;
        this.buffer = [];
        this.destination.next(buffer);
    }
}
//# sourceMappingURL=buffer.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/bufferCount.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferCount.js ***!
  \**********************************************************************/
/*! exports provided: bufferCount */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bufferCount", function() { return bufferCount; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function bufferCount(bufferSize, startBufferEvery = null) {
    return function bufferCountOperatorFunction(source) {
        return source.lift(new BufferCountOperator(bufferSize, startBufferEvery));
    };
}
class BufferCountOperator {
    constructor(bufferSize, startBufferEvery) {
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        if (!startBufferEvery || bufferSize === startBufferEvery) {
            this.subscriberClass = BufferCountSubscriber;
        }
        else {
            this.subscriberClass = BufferSkipCountSubscriber;
        }
    }
    call(subscriber, source) {
        return source.subscribe(new this.subscriberClass(subscriber, this.bufferSize, this.startBufferEvery));
    }
}
class BufferCountSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, bufferSize) {
        super(destination);
        this.bufferSize = bufferSize;
        this.buffer = [];
    }
    _next(value) {
        const buffer = this.buffer;
        buffer.push(value);
        if (buffer.length == this.bufferSize) {
            this.destination.next(buffer);
            this.buffer = [];
        }
    }
    _complete() {
        const buffer = this.buffer;
        if (buffer.length > 0) {
            this.destination.next(buffer);
        }
        super._complete();
    }
}
class BufferSkipCountSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, bufferSize, startBufferEvery) {
        super(destination);
        this.bufferSize = bufferSize;
        this.startBufferEvery = startBufferEvery;
        this.buffers = [];
        this.count = 0;
    }
    _next(value) {
        const { bufferSize, startBufferEvery, buffers, count } = this;
        this.count++;
        if (count % startBufferEvery === 0) {
            buffers.push([]);
        }
        for (let i = buffers.length; i--;) {
            const buffer = buffers[i];
            buffer.push(value);
            if (buffer.length === bufferSize) {
                buffers.splice(i, 1);
                this.destination.next(buffer);
            }
        }
    }
    _complete() {
        const { buffers, destination } = this;
        while (buffers.length > 0) {
            let buffer = buffers.shift();
            if (buffer.length > 0) {
                destination.next(buffer);
            }
        }
        super._complete();
    }
}
//# sourceMappingURL=bufferCount.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/bufferTime.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferTime.js ***!
  \*********************************************************************/
/*! exports provided: bufferTime */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bufferTime", function() { return bufferTime; });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");



function bufferTime(bufferTimeSpan) {
    let length = arguments.length;
    let scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"];
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_2__["isScheduler"])(arguments[arguments.length - 1])) {
        scheduler = arguments[arguments.length - 1];
        length--;
    }
    let bufferCreationInterval = null;
    if (length >= 2) {
        bufferCreationInterval = arguments[1];
    }
    let maxBufferSize = Number.POSITIVE_INFINITY;
    if (length >= 3) {
        maxBufferSize = arguments[2];
    }
    return function bufferTimeOperatorFunction(source) {
        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));
    };
}
class BufferTimeOperator {
    constructor(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
    }
    call(subscriber, source) {
        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));
    }
}
class Context {
    constructor() {
        this.buffer = [];
    }
}
class BufferTimeSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"] {
    constructor(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {
        super(destination);
        this.bufferTimeSpan = bufferTimeSpan;
        this.bufferCreationInterval = bufferCreationInterval;
        this.maxBufferSize = maxBufferSize;
        this.scheduler = scheduler;
        this.contexts = [];
        const context = this.openContext();
        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;
        if (this.timespanOnly) {
            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };
            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
        else {
            const closeState = { subscriber: this, context };
            const creationState = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };
            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));
            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));
        }
    }
    _next(value) {
        const contexts = this.contexts;
        const len = contexts.length;
        let filledBufferContext;
        for (let i = 0; i < len; i++) {
            const context = contexts[i];
            const buffer = context.buffer;
            buffer.push(value);
            if (buffer.length == this.maxBufferSize) {
                filledBufferContext = context;
            }
        }
        if (filledBufferContext) {
            this.onBufferFull(filledBufferContext);
        }
    }
    _error(err) {
        this.contexts.length = 0;
        super._error(err);
    }
    _complete() {
        const { contexts, destination } = this;
        while (contexts.length > 0) {
            const context = contexts.shift();
            destination.next(context.buffer);
        }
        super._complete();
    }
    _unsubscribe() {
        this.contexts = null;
    }
    onBufferFull(context) {
        this.closeContext(context);
        const closeAction = context.closeAction;
        closeAction.unsubscribe();
        this.remove(closeAction);
        if (!this.closed && this.timespanOnly) {
            context = this.openContext();
            const bufferTimeSpan = this.bufferTimeSpan;
            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };
            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));
        }
    }
    openContext() {
        const context = new Context();
        this.contexts.push(context);
        return context;
    }
    closeContext(context) {
        this.destination.next(context.buffer);
        const contexts = this.contexts;
        const spliceIndex = contexts ? contexts.indexOf(context) : -1;
        if (spliceIndex >= 0) {
            contexts.splice(contexts.indexOf(context), 1);
        }
    }
}
function dispatchBufferTimeSpanOnly(state) {
    const subscriber = state.subscriber;
    const prevContext = state.context;
    if (prevContext) {
        subscriber.closeContext(prevContext);
    }
    if (!subscriber.closed) {
        state.context = subscriber.openContext();
        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);
    }
}
function dispatchBufferCreation(state) {
    const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;
    const context = subscriber.openContext();
    const action = this;
    if (!subscriber.closed) {
        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));
        action.schedule(state, bufferCreationInterval);
    }
}
function dispatchBufferClose(arg) {
    const { subscriber, context } = arg;
    subscriber.closeContext(context);
}
//# sourceMappingURL=bufferTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/bufferToggle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferToggle.js ***!
  \***********************************************************************/
/*! exports provided: bufferToggle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bufferToggle", function() { return bufferToggle; });
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");



function bufferToggle(openings, closingSelector) {
    return function bufferToggleOperatorFunction(source) {
        return source.lift(new BufferToggleOperator(openings, closingSelector));
    };
}
class BufferToggleOperator {
    constructor(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));
    }
}
class BufferToggleSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"] {
    constructor(destination, openings, closingSelector) {
        super(destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, openings));
    }
    _next(value) {
        const contexts = this.contexts;
        const len = contexts.length;
        for (let i = 0; i < len; i++) {
            contexts[i].buffer.push(value);
        }
    }
    _error(err) {
        const contexts = this.contexts;
        while (contexts.length > 0) {
            const context = contexts.shift();
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        }
        this.contexts = null;
        super._error(err);
    }
    _complete() {
        const contexts = this.contexts;
        while (contexts.length > 0) {
            const context = contexts.shift();
            this.destination.next(context.buffer);
            context.subscription.unsubscribe();
            context.buffer = null;
            context.subscription = null;
        }
        this.contexts = null;
        super._complete();
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);
    }
    notifyComplete(innerSub) {
        this.closeBuffer(innerSub.context);
    }
    openBuffer(value) {
        try {
            const closingSelector = this.closingSelector;
            const closingNotifier = closingSelector.call(this, value);
            if (closingNotifier) {
                this.trySubscribe(closingNotifier);
            }
        }
        catch (err) {
            this._error(err);
        }
    }
    closeBuffer(context) {
        const contexts = this.contexts;
        if (contexts && context) {
            const { buffer, subscription } = context;
            this.destination.next(buffer);
            contexts.splice(contexts.indexOf(context), 1);
            this.remove(subscription);
            subscription.unsubscribe();
        }
    }
    trySubscribe(closingNotifier) {
        const contexts = this.contexts;
        const buffer = [];
        const subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]();
        const context = { buffer, subscription };
        contexts.push(context);
        const innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, closingNotifier, context);
        if (!innerSubscription || innerSubscription.closed) {
            this.closeBuffer(context);
        }
        else {
            innerSubscription.context = context;
            this.add(innerSubscription);
            subscription.add(innerSubscription);
        }
    }
}
//# sourceMappingURL=bufferToggle.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js ***!
  \*********************************************************************/
/*! exports provided: bufferWhen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bufferWhen", function() { return bufferWhen; });
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");



function bufferWhen(closingSelector) {
    return function (source) {
        return source.lift(new BufferWhenOperator(closingSelector));
    };
}
class BufferWhenOperator {
    constructor(closingSelector) {
        this.closingSelector = closingSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));
    }
}
class BufferWhenSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"] {
    constructor(destination, closingSelector) {
        super(destination);
        this.closingSelector = closingSelector;
        this.subscribing = false;
        this.openBuffer();
    }
    _next(value) {
        this.buffer.push(value);
    }
    _complete() {
        const buffer = this.buffer;
        if (buffer) {
            this.destination.next(buffer);
        }
        super._complete();
    }
    _unsubscribe() {
        this.buffer = null;
        this.subscribing = false;
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openBuffer();
    }
    notifyComplete() {
        if (this.subscribing) {
            this.complete();
        }
        else {
            this.openBuffer();
        }
    }
    openBuffer() {
        let { closingSubscription } = this;
        if (closingSubscription) {
            this.remove(closingSubscription);
            closingSubscription.unsubscribe();
        }
        const buffer = this.buffer;
        if (this.buffer) {
            this.destination.next(buffer);
        }
        this.buffer = [];
        let closingNotifier;
        try {
            const { closingSelector } = this;
            closingNotifier = closingSelector();
        }
        catch (err) {
            return this.error(err);
        }
        closingSubscription = new _Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"]();
        this.closingSubscription = closingSubscription;
        this.add(closingSubscription);
        this.subscribing = true;
        closingSubscription.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, closingNotifier));
        this.subscribing = false;
    }
}
//# sourceMappingURL=bufferWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/catchError.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/catchError.js ***!
  \*********************************************************************/
/*! exports provided: catchError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "catchError", function() { return catchError; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../InnerSubscriber */ "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");



function catchError(selector) {
    return function catchErrorOperatorFunction(source) {
        const operator = new CatchOperator(selector);
        const caught = source.lift(operator);
        return (operator.caught = caught);
    };
}
class CatchOperator {
    constructor(selector) {
        this.selector = selector;
    }
    call(subscriber, source) {
        return source.subscribe(new CatchSubscriber(subscriber, this.selector, this.caught));
    }
}
class CatchSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, selector, caught) {
        super(destination);
        this.selector = selector;
        this.caught = caught;
    }
    error(err) {
        if (!this.isStopped) {
            let result;
            try {
                result = this.selector(err, this.caught);
            }
            catch (err2) {
                super.error(err2);
                return;
            }
            this._unsubscribeAndRecycle();
            const innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__["InnerSubscriber"](this, undefined, undefined);
            this.add(innerSubscriber);
            const innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, result, undefined, undefined, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                this.add(innerSubscription);
            }
        }
    }
}
//# sourceMappingURL=catchError.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/combineAll.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/combineAll.js ***!
  \*********************************************************************/
/*! exports provided: combineAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineAll", function() { return combineAll; });
/* harmony import */ var _observable_combineLatest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/combineLatest */ "./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js");

function combineAll(project) {
    return (source) => source.lift(new _observable_combineLatest__WEBPACK_IMPORTED_MODULE_0__["CombineLatestOperator"](project));
}
//# sourceMappingURL=combineAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/combineLatest.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/combineLatest.js ***!
  \************************************************************************/
/*! exports provided: combineLatest */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineLatest", function() { return combineLatest; });
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _observable_combineLatest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/combineLatest */ "./node_modules/rxjs/_esm2015/internal/observable/combineLatest.js");
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");



const none = {};
function combineLatest(...observables) {
    let project = null;
    if (typeof observables[observables.length - 1] === 'function') {
        project = observables.pop();
    }
    if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(observables[0])) {
        observables = observables[0].slice();
    }
    return (source) => source.lift.call(Object(_observable_from__WEBPACK_IMPORTED_MODULE_2__["from"])([source, ...observables]), new _observable_combineLatest__WEBPACK_IMPORTED_MODULE_1__["CombineLatestOperator"](project));
}
//# sourceMappingURL=combineLatest.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/concat.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/concat.js ***!
  \*****************************************************************/
/*! exports provided: concat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return concat; });
/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/concat */ "./node_modules/rxjs/_esm2015/internal/observable/concat.js");

function concat(...observables) {
    return (source) => source.lift.call(Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(source, ...observables));
}
//# sourceMappingURL=concat.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/concatAll.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/concatAll.js ***!
  \********************************************************************/
/*! exports provided: concatAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatAll", function() { return concatAll; });
/* harmony import */ var _mergeAll__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeAll */ "./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js");

function concatAll() {
    return Object(_mergeAll__WEBPACK_IMPORTED_MODULE_0__["mergeAll"])(1);
}
//# sourceMappingURL=concatAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/concatMap.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/concatMap.js ***!
  \********************************************************************/
/*! exports provided: concatMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatMap", function() { return concatMap; });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeMap */ "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js");

function concatMap(project, resultSelector) {
    return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(project, resultSelector, 1);
}
//# sourceMappingURL=concatMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/concatMapTo.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/concatMapTo.js ***!
  \**********************************************************************/
/*! exports provided: concatMapTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "concatMapTo", function() { return concatMapTo; });
/* harmony import */ var _concatMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./concatMap */ "./node_modules/rxjs/_esm2015/internal/operators/concatMap.js");

function concatMapTo(innerObservable, resultSelector) {
    return Object(_concatMap__WEBPACK_IMPORTED_MODULE_0__["concatMap"])(() => innerObservable, resultSelector);
}
//# sourceMappingURL=concatMapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/count.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/count.js ***!
  \****************************************************************/
/*! exports provided: count */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "count", function() { return count; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function count(predicate) {
    return (source) => source.lift(new CountOperator(predicate, source));
}
class CountOperator {
    constructor(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    call(subscriber, source) {
        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));
    }
}
class CountSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, predicate, source) {
        super(destination);
        this.predicate = predicate;
        this.source = source;
        this.count = 0;
        this.index = 0;
    }
    _next(value) {
        if (this.predicate) {
            this._tryPredicate(value);
        }
        else {
            this.count++;
        }
    }
    _tryPredicate(value) {
        let result;
        try {
            result = this.predicate(value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.count++;
        }
    }
    _complete() {
        this.destination.next(this.count);
        this.destination.complete();
    }
}
//# sourceMappingURL=count.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/debounce.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/debounce.js ***!
  \*******************************************************************/
/*! exports provided: debounce */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return debounce; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


function debounce(durationSelector) {
    return (source) => source.lift(new DebounceOperator(durationSelector));
}
class DebounceOperator {
    constructor(durationSelector) {
        this.durationSelector = durationSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));
    }
}
class DebounceSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, durationSelector) {
        super(destination);
        this.durationSelector = durationSelector;
        this.hasValue = false;
        this.durationSubscription = null;
    }
    _next(value) {
        try {
            const result = this.durationSelector.call(this, value);
            if (result) {
                this._tryNext(value, result);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    }
    _complete() {
        this.emitValue();
        this.destination.complete();
    }
    _tryNext(value, duration) {
        let subscription = this.durationSubscription;
        this.value = value;
        this.hasValue = true;
        if (subscription) {
            subscription.unsubscribe();
            this.remove(subscription);
        }
        subscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, duration);
        if (subscription && !subscription.closed) {
            this.add(this.durationSubscription = subscription);
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    }
    notifyComplete() {
        this.emitValue();
    }
    emitValue() {
        if (this.hasValue) {
            const value = this.value;
            const subscription = this.durationSubscription;
            if (subscription) {
                this.durationSubscription = null;
                subscription.unsubscribe();
                this.remove(subscription);
            }
            this.value = null;
            this.hasValue = false;
            super._next(value);
        }
    }
}
//# sourceMappingURL=debounce.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js ***!
  \***********************************************************************/
/*! exports provided: debounceTime */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "debounceTime", function() { return debounceTime; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");


function debounceTime(dueTime, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"]) {
    return (source) => source.lift(new DebounceTimeOperator(dueTime, scheduler));
}
class DebounceTimeOperator {
    constructor(dueTime, scheduler) {
        this.dueTime = dueTime;
        this.scheduler = scheduler;
    }
    call(subscriber, source) {
        return source.subscribe(new DebounceTimeSubscriber(subscriber, this.dueTime, this.scheduler));
    }
}
class DebounceTimeSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, dueTime, scheduler) {
        super(destination);
        this.dueTime = dueTime;
        this.scheduler = scheduler;
        this.debouncedSubscription = null;
        this.lastValue = null;
        this.hasValue = false;
    }
    _next(value) {
        this.clearDebounce();
        this.lastValue = value;
        this.hasValue = true;
        this.add(this.debouncedSubscription = this.scheduler.schedule(dispatchNext, this.dueTime, this));
    }
    _complete() {
        this.debouncedNext();
        this.destination.complete();
    }
    debouncedNext() {
        this.clearDebounce();
        if (this.hasValue) {
            const { lastValue } = this;
            this.lastValue = null;
            this.hasValue = false;
            this.destination.next(lastValue);
        }
    }
    clearDebounce() {
        const debouncedSubscription = this.debouncedSubscription;
        if (debouncedSubscription !== null) {
            this.remove(debouncedSubscription);
            debouncedSubscription.unsubscribe();
            this.debouncedSubscription = null;
        }
    }
}
function dispatchNext(subscriber) {
    subscriber.debouncedNext();
}
//# sourceMappingURL=debounceTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js ***!
  \*************************************************************************/
/*! exports provided: defaultIfEmpty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultIfEmpty", function() { return defaultIfEmpty; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function defaultIfEmpty(defaultValue = null) {
    return (source) => source.lift(new DefaultIfEmptyOperator(defaultValue));
}
class DefaultIfEmptyOperator {
    constructor(defaultValue) {
        this.defaultValue = defaultValue;
    }
    call(subscriber, source) {
        return source.subscribe(new DefaultIfEmptySubscriber(subscriber, this.defaultValue));
    }
}
class DefaultIfEmptySubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, defaultValue) {
        super(destination);
        this.defaultValue = defaultValue;
        this.isEmpty = true;
    }
    _next(value) {
        this.isEmpty = false;
        this.destination.next(value);
    }
    _complete() {
        if (this.isEmpty) {
            this.destination.next(this.defaultValue);
        }
        this.destination.complete();
    }
}
//# sourceMappingURL=defaultIfEmpty.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/delay.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/delay.js ***!
  \****************************************************************/
/*! exports provided: delay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "delay", function() { return delay; });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _util_isDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isDate */ "./node_modules/rxjs/_esm2015/internal/util/isDate.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _Notification__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Notification */ "./node_modules/rxjs/_esm2015/internal/Notification.js");




function delay(delay, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"]) {
    const absoluteDelay = Object(_util_isDate__WEBPACK_IMPORTED_MODULE_1__["isDate"])(delay);
    const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);
    return (source) => source.lift(new DelayOperator(delayFor, scheduler));
}
class DelayOperator {
    constructor(delay, scheduler) {
        this.delay = delay;
        this.scheduler = scheduler;
    }
    call(subscriber, source) {
        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));
    }
}
class DelaySubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"] {
    constructor(destination, delay, scheduler) {
        super(destination);
        this.delay = delay;
        this.scheduler = scheduler;
        this.queue = [];
        this.active = false;
        this.errored = false;
    }
    static dispatch(state) {
        const source = state.source;
        const queue = source.queue;
        const scheduler = state.scheduler;
        const destination = state.destination;
        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {
            queue.shift().notification.observe(destination);
        }
        if (queue.length > 0) {
            const delay = Math.max(0, queue[0].time - scheduler.now());
            this.schedule(state, delay);
        }
        else {
            this.unsubscribe();
            source.active = false;
        }
    }
    _schedule(scheduler) {
        this.active = true;
        const destination = this.destination;
        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {
            source: this, destination: this.destination, scheduler: scheduler
        }));
    }
    scheduleNotification(notification) {
        if (this.errored === true) {
            return;
        }
        const scheduler = this.scheduler;
        const message = new DelayMessage(scheduler.now() + this.delay, notification);
        this.queue.push(message);
        if (this.active === false) {
            this._schedule(scheduler);
        }
    }
    _next(value) {
        this.scheduleNotification(_Notification__WEBPACK_IMPORTED_MODULE_3__["Notification"].createNext(value));
    }
    _error(err) {
        this.errored = true;
        this.queue = [];
        this.destination.error(err);
        this.unsubscribe();
    }
    _complete() {
        this.scheduleNotification(_Notification__WEBPACK_IMPORTED_MODULE_3__["Notification"].createComplete());
        this.unsubscribe();
    }
}
class DelayMessage {
    constructor(time, notification) {
        this.time = time;
        this.notification = notification;
    }
}
//# sourceMappingURL=delay.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/delayWhen.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/delayWhen.js ***!
  \********************************************************************/
/*! exports provided: delayWhen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "delayWhen", function() { return delayWhen; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");




function delayWhen(delayDurationSelector, subscriptionDelay) {
    if (subscriptionDelay) {
        return (source) => new SubscriptionDelayObservable(source, subscriptionDelay)
            .lift(new DelayWhenOperator(delayDurationSelector));
    }
    return (source) => source.lift(new DelayWhenOperator(delayDurationSelector));
}
class DelayWhenOperator {
    constructor(delayDurationSelector) {
        this.delayDurationSelector = delayDurationSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));
    }
}
class DelayWhenSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"] {
    constructor(destination, delayDurationSelector) {
        super(destination);
        this.delayDurationSelector = delayDurationSelector;
        this.completed = false;
        this.delayNotifierSubscriptions = [];
        this.index = 0;
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(outerValue);
        this.removeSubscription(innerSub);
        this.tryComplete();
    }
    notifyError(error, innerSub) {
        this._error(error);
    }
    notifyComplete(innerSub) {
        const value = this.removeSubscription(innerSub);
        if (value) {
            this.destination.next(value);
        }
        this.tryComplete();
    }
    _next(value) {
        const index = this.index++;
        try {
            const delayNotifier = this.delayDurationSelector(value, index);
            if (delayNotifier) {
                this.tryDelay(delayNotifier, value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    }
    _complete() {
        this.completed = true;
        this.tryComplete();
        this.unsubscribe();
    }
    removeSubscription(subscription) {
        subscription.unsubscribe();
        const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);
        if (subscriptionIdx !== -1) {
            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);
        }
        return subscription.outerValue;
    }
    tryDelay(delayNotifier, value) {
        const notifierSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, delayNotifier, value);
        if (notifierSubscription && !notifierSubscription.closed) {
            const destination = this.destination;
            destination.add(notifierSubscription);
            this.delayNotifierSubscriptions.push(notifierSubscription);
        }
    }
    tryComplete() {
        if (this.completed && this.delayNotifierSubscriptions.length === 0) {
            this.destination.complete();
        }
    }
}
class SubscriptionDelayObservable extends _Observable__WEBPACK_IMPORTED_MODULE_1__["Observable"] {
    constructor(source, subscriptionDelay) {
        super();
        this.source = source;
        this.subscriptionDelay = subscriptionDelay;
    }
    _subscribe(subscriber) {
        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));
    }
}
class SubscriptionDelaySubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(parent, source) {
        super();
        this.parent = parent;
        this.source = source;
        this.sourceSubscribed = false;
    }
    _next(unused) {
        this.subscribeToSource();
    }
    _error(err) {
        this.unsubscribe();
        this.parent.error(err);
    }
    _complete() {
        this.unsubscribe();
        this.subscribeToSource();
    }
    subscribeToSource() {
        if (!this.sourceSubscribed) {
            this.sourceSubscribed = true;
            this.unsubscribe();
            this.source.subscribe(this.parent);
        }
    }
}
//# sourceMappingURL=delayWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/dematerialize.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/dematerialize.js ***!
  \************************************************************************/
/*! exports provided: dematerialize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "dematerialize", function() { return dematerialize; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function dematerialize() {
    return function dematerializeOperatorFunction(source) {
        return source.lift(new DeMaterializeOperator());
    };
}
class DeMaterializeOperator {
    call(subscriber, source) {
        return source.subscribe(new DeMaterializeSubscriber(subscriber));
    }
}
class DeMaterializeSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination) {
        super(destination);
    }
    _next(value) {
        value.observe(this.destination);
    }
}
//# sourceMappingURL=dematerialize.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/distinct.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/distinct.js ***!
  \*******************************************************************/
/*! exports provided: distinct, DistinctSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distinct", function() { return distinct; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DistinctSubscriber", function() { return DistinctSubscriber; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


function distinct(keySelector, flushes) {
    return (source) => source.lift(new DistinctOperator(keySelector, flushes));
}
class DistinctOperator {
    constructor(keySelector, flushes) {
        this.keySelector = keySelector;
        this.flushes = flushes;
    }
    call(subscriber, source) {
        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));
    }
}
class DistinctSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, keySelector, flushes) {
        super(destination);
        this.keySelector = keySelector;
        this.values = new Set();
        if (flushes) {
            this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, flushes));
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values.clear();
    }
    notifyError(error, innerSub) {
        this._error(error);
    }
    _next(value) {
        if (this.keySelector) {
            this._useKeySelector(value);
        }
        else {
            this._finalizeNext(value, value);
        }
    }
    _useKeySelector(value) {
        let key;
        const { destination } = this;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this._finalizeNext(key, value);
    }
    _finalizeNext(key, value) {
        const { values } = this;
        if (!values.has(key)) {
            values.add(key);
            this.destination.next(value);
        }
    }
}
//# sourceMappingURL=distinct.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js ***!
  \*******************************************************************************/
/*! exports provided: distinctUntilChanged */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distinctUntilChanged", function() { return distinctUntilChanged; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function distinctUntilChanged(compare, keySelector) {
    return (source) => source.lift(new DistinctUntilChangedOperator(compare, keySelector));
}
class DistinctUntilChangedOperator {
    constructor(compare, keySelector) {
        this.compare = compare;
        this.keySelector = keySelector;
    }
    call(subscriber, source) {
        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));
    }
}
class DistinctUntilChangedSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, compare, keySelector) {
        super(destination);
        this.keySelector = keySelector;
        this.hasKey = false;
        if (typeof compare === 'function') {
            this.compare = compare;
        }
    }
    compare(x, y) {
        return x === y;
    }
    _next(value) {
        let key;
        try {
            const { keySelector } = this;
            key = keySelector ? keySelector(value) : value;
        }
        catch (err) {
            return this.destination.error(err);
        }
        let result = false;
        if (this.hasKey) {
            try {
                const { compare } = this;
                result = compare(this.key, key);
            }
            catch (err) {
                return this.destination.error(err);
            }
        }
        else {
            this.hasKey = true;
        }
        if (!result) {
            this.key = key;
            this.destination.next(value);
        }
    }
}
//# sourceMappingURL=distinctUntilChanged.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js ***!
  \**********************************************************************************/
/*! exports provided: distinctUntilKeyChanged */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "distinctUntilKeyChanged", function() { return distinctUntilKeyChanged; });
/* harmony import */ var _distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./distinctUntilChanged */ "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js");

function distinctUntilKeyChanged(key, compare) {
    return Object(_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_0__["distinctUntilChanged"])((x, y) => compare ? compare(x[key], y[key]) : x[key] === y[key]);
}
//# sourceMappingURL=distinctUntilKeyChanged.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/elementAt.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/elementAt.js ***!
  \********************************************************************/
/*! exports provided: elementAt */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "elementAt", function() { return elementAt; });
/* harmony import */ var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filter */ "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
/* harmony import */ var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./throwIfEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js");
/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultIfEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
/* harmony import */ var _take__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./take */ "./node_modules/rxjs/_esm2015/internal/operators/take.js");





function elementAt(index, defaultValue) {
    if (index < 0) {
        throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_0__["ArgumentOutOfRangeError"]();
    }
    const hasDefaultValue = arguments.length >= 2;
    return (source) => source.pipe(Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])((v, i) => i === index), Object(_take__WEBPACK_IMPORTED_MODULE_4__["take"])(1), hasDefaultValue
        ? Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__["defaultIfEmpty"])(defaultValue)
        : Object(_throwIfEmpty__WEBPACK_IMPORTED_MODULE_2__["throwIfEmpty"])(() => new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_0__["ArgumentOutOfRangeError"]()));
}
//# sourceMappingURL=elementAt.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/endWith.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/endWith.js ***!
  \******************************************************************/
/*! exports provided: endWith */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "endWith", function() { return endWith; });
/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/concat */ "./node_modules/rxjs/_esm2015/internal/observable/concat.js");
/* harmony import */ var _observable_of__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/of */ "./node_modules/rxjs/_esm2015/internal/observable/of.js");


function endWith(...array) {
    return (source) => Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(source, Object(_observable_of__WEBPACK_IMPORTED_MODULE_1__["of"])(...array));
}
//# sourceMappingURL=endWith.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/every.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/every.js ***!
  \****************************************************************/
/*! exports provided: every */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "every", function() { return every; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function every(predicate, thisArg) {
    return (source) => source.lift(new EveryOperator(predicate, thisArg, source));
}
class EveryOperator {
    constructor(predicate, thisArg, source) {
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
    }
    call(observer, source) {
        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));
    }
}
class EverySubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, predicate, thisArg, source) {
        super(destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.source = source;
        this.index = 0;
        this.thisArg = thisArg || this;
    }
    notifyComplete(everyValueMatch) {
        this.destination.next(everyValueMatch);
        this.destination.complete();
    }
    _next(value) {
        let result = false;
        try {
            result = this.predicate.call(this.thisArg, value, this.index++, this.source);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (!result) {
            this.notifyComplete(false);
        }
    }
    _complete() {
        this.notifyComplete(true);
    }
}
//# sourceMappingURL=every.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/exhaust.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/exhaust.js ***!
  \******************************************************************/
/*! exports provided: exhaust */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exhaust", function() { return exhaust; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


function exhaust() {
    return (source) => source.lift(new SwitchFirstOperator());
}
class SwitchFirstOperator {
    call(subscriber, source) {
        return source.subscribe(new SwitchFirstSubscriber(subscriber));
    }
}
class SwitchFirstSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination) {
        super(destination);
        this.hasCompleted = false;
        this.hasSubscription = false;
    }
    _next(value) {
        if (!this.hasSubscription) {
            this.hasSubscription = true;
            this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, value));
        }
    }
    _complete() {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
    }
    notifyComplete(innerSub) {
        this.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    }
}
//# sourceMappingURL=exhaust.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/exhaustMap.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/exhaustMap.js ***!
  \*********************************************************************/
/*! exports provided: exhaustMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "exhaustMap", function() { return exhaustMap; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../InnerSubscriber */ "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");





function exhaustMap(project, resultSelector) {
    if (resultSelector) {
        return (source) => source.pipe(exhaustMap((a, i) => Object(_observable_from__WEBPACK_IMPORTED_MODULE_4__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_3__["map"])((b, ii) => resultSelector(a, b, i, ii)))));
    }
    return (source) => source.lift(new ExhaustMapOperator(project));
}
class ExhaustMapOperator {
    constructor(project) {
        this.project = project;
    }
    call(subscriber, source) {
        return source.subscribe(new ExhaustMapSubscriber(subscriber, this.project));
    }
}
class ExhaustMapSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, project) {
        super(destination);
        this.project = project;
        this.hasSubscription = false;
        this.hasCompleted = false;
        this.index = 0;
    }
    _next(value) {
        if (!this.hasSubscription) {
            this.tryNext(value);
        }
    }
    tryNext(value) {
        let result;
        const index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.hasSubscription = true;
        this._innerSub(result, value, index);
    }
    _innerSub(result, value, index) {
        const innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__["InnerSubscriber"](this, value, index);
        const destination = this.destination;
        destination.add(innerSubscriber);
        const innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, result, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
        }
    }
    _complete() {
        this.hasCompleted = true;
        if (!this.hasSubscription) {
            this.destination.complete();
        }
        this.unsubscribe();
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    }
    notifyError(err) {
        this.destination.error(err);
    }
    notifyComplete(innerSub) {
        const destination = this.destination;
        destination.remove(innerSub);
        this.hasSubscription = false;
        if (this.hasCompleted) {
            this.destination.complete();
        }
    }
}
//# sourceMappingURL=exhaustMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/expand.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/expand.js ***!
  \*****************************************************************/
/*! exports provided: expand, ExpandOperator, ExpandSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "expand", function() { return expand; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpandOperator", function() { return ExpandOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExpandSubscriber", function() { return ExpandSubscriber; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


function expand(project, concurrent = Number.POSITIVE_INFINITY, scheduler = undefined) {
    concurrent = (concurrent || 0) < 1 ? Number.POSITIVE_INFINITY : concurrent;
    return (source) => source.lift(new ExpandOperator(project, concurrent, scheduler));
}
class ExpandOperator {
    constructor(project, concurrent, scheduler) {
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
    }
    call(subscriber, source) {
        return source.subscribe(new ExpandSubscriber(subscriber, this.project, this.concurrent, this.scheduler));
    }
}
class ExpandSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, project, concurrent, scheduler) {
        super(destination);
        this.project = project;
        this.concurrent = concurrent;
        this.scheduler = scheduler;
        this.index = 0;
        this.active = 0;
        this.hasCompleted = false;
        if (concurrent < Number.POSITIVE_INFINITY) {
            this.buffer = [];
        }
    }
    static dispatch(arg) {
        const { subscriber, result, value, index } = arg;
        subscriber.subscribeToProjection(result, value, index);
    }
    _next(value) {
        const destination = this.destination;
        if (destination.closed) {
            this._complete();
            return;
        }
        const index = this.index++;
        if (this.active < this.concurrent) {
            destination.next(value);
            try {
                const { project } = this;
                const result = project(value, index);
                if (!this.scheduler) {
                    this.subscribeToProjection(result, value, index);
                }
                else {
                    const state = { subscriber: this, result, value, index };
                    const destination = this.destination;
                    destination.add(this.scheduler.schedule(ExpandSubscriber.dispatch, 0, state));
                }
            }
            catch (e) {
                destination.error(e);
            }
        }
        else {
            this.buffer.push(value);
        }
    }
    subscribeToProjection(result, value, index) {
        this.active++;
        const destination = this.destination;
        destination.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, result, value, index));
    }
    _complete() {
        this.hasCompleted = true;
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this._next(innerValue);
    }
    notifyComplete(innerSub) {
        const buffer = this.buffer;
        const destination = this.destination;
        destination.remove(innerSub);
        this.active--;
        if (buffer && buffer.length > 0) {
            this._next(buffer.shift());
        }
        if (this.hasCompleted && this.active === 0) {
            this.destination.complete();
        }
    }
}
//# sourceMappingURL=expand.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/filter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/filter.js ***!
  \*****************************************************************/
/*! exports provided: filter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return filter; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function filter(predicate, thisArg) {
    return function filterOperatorFunction(source) {
        return source.lift(new FilterOperator(predicate, thisArg));
    };
}
class FilterOperator {
    constructor(predicate, thisArg) {
        this.predicate = predicate;
        this.thisArg = thisArg;
    }
    call(subscriber, source) {
        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));
    }
}
class FilterSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, predicate, thisArg) {
        super(destination);
        this.predicate = predicate;
        this.thisArg = thisArg;
        this.count = 0;
    }
    _next(value) {
        let result;
        try {
            result = this.predicate.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        if (result) {
            this.destination.next(value);
        }
    }
}
//# sourceMappingURL=filter.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/finalize.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/finalize.js ***!
  \*******************************************************************/
/*! exports provided: finalize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "finalize", function() { return finalize; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");


function finalize(callback) {
    return (source) => source.lift(new FinallyOperator(callback));
}
class FinallyOperator {
    constructor(callback) {
        this.callback = callback;
    }
    call(subscriber, source) {
        return source.subscribe(new FinallySubscriber(subscriber, this.callback));
    }
}
class FinallySubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, callback) {
        super(destination);
        this.add(new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"](callback));
    }
}
//# sourceMappingURL=finalize.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/find.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/find.js ***!
  \***************************************************************/
/*! exports provided: find, FindValueOperator, FindValueSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "find", function() { return find; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FindValueOperator", function() { return FindValueOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FindValueSubscriber", function() { return FindValueSubscriber; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function find(predicate, thisArg) {
    if (typeof predicate !== 'function') {
        throw new TypeError('predicate is not a function');
    }
    return (source) => source.lift(new FindValueOperator(predicate, source, false, thisArg));
}
class FindValueOperator {
    constructor(predicate, source, yieldIndex, thisArg) {
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
    }
    call(observer, source) {
        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));
    }
}
class FindValueSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, predicate, source, yieldIndex, thisArg) {
        super(destination);
        this.predicate = predicate;
        this.source = source;
        this.yieldIndex = yieldIndex;
        this.thisArg = thisArg;
        this.index = 0;
    }
    notifyComplete(value) {
        const destination = this.destination;
        destination.next(value);
        destination.complete();
        this.unsubscribe();
    }
    _next(value) {
        const { predicate, thisArg } = this;
        const index = this.index++;
        try {
            const result = predicate.call(thisArg || this, value, index, this.source);
            if (result) {
                this.notifyComplete(this.yieldIndex ? index : value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    }
    _complete() {
        this.notifyComplete(this.yieldIndex ? -1 : undefined);
    }
}
//# sourceMappingURL=find.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/findIndex.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/findIndex.js ***!
  \********************************************************************/
/*! exports provided: findIndex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "findIndex", function() { return findIndex; });
/* harmony import */ var _operators_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../operators/find */ "./node_modules/rxjs/_esm2015/internal/operators/find.js");

function findIndex(predicate, thisArg) {
    return (source) => source.lift(new _operators_find__WEBPACK_IMPORTED_MODULE_0__["FindValueOperator"](predicate, source, true, thisArg));
}
//# sourceMappingURL=findIndex.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/first.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/first.js ***!
  \****************************************************************/
/*! exports provided: first */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "first", function() { return first; });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/EmptyError */ "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filter */ "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
/* harmony import */ var _take__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./take */ "./node_modules/rxjs/_esm2015/internal/operators/take.js");
/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./defaultIfEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
/* harmony import */ var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./throwIfEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js");
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm2015/internal/util/identity.js");






function first(predicate, defaultValue) {
    const hasDefaultValue = arguments.length >= 2;
    return (source) => source.pipe(predicate ? Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])((v, i) => predicate(v, i, source)) : _util_identity__WEBPACK_IMPORTED_MODULE_5__["identity"], Object(_take__WEBPACK_IMPORTED_MODULE_2__["take"])(1), hasDefaultValue ? Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_3__["defaultIfEmpty"])(defaultValue) : Object(_throwIfEmpty__WEBPACK_IMPORTED_MODULE_4__["throwIfEmpty"])(() => new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__["EmptyError"]()));
}
//# sourceMappingURL=first.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/groupBy.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/groupBy.js ***!
  \******************************************************************/
/*! exports provided: groupBy, GroupedObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "groupBy", function() { return groupBy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupedObservable", function() { return GroupedObservable; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");




function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {
    return (source) => source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));
}
class GroupByOperator {
    constructor(keySelector, elementSelector, durationSelector, subjectSelector) {
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));
    }
}
class GroupBySubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, keySelector, elementSelector, durationSelector, subjectSelector) {
        super(destination);
        this.keySelector = keySelector;
        this.elementSelector = elementSelector;
        this.durationSelector = durationSelector;
        this.subjectSelector = subjectSelector;
        this.groups = null;
        this.attemptedToUnsubscribe = false;
        this.count = 0;
    }
    _next(value) {
        let key;
        try {
            key = this.keySelector(value);
        }
        catch (err) {
            this.error(err);
            return;
        }
        this._group(value, key);
    }
    _group(value, key) {
        let groups = this.groups;
        if (!groups) {
            groups = this.groups = new Map();
        }
        let group = groups.get(key);
        let element;
        if (this.elementSelector) {
            try {
                element = this.elementSelector(value);
            }
            catch (err) {
                this.error(err);
            }
        }
        else {
            element = value;
        }
        if (!group) {
            group = (this.subjectSelector ? this.subjectSelector() : new _Subject__WEBPACK_IMPORTED_MODULE_3__["Subject"]());
            groups.set(key, group);
            const groupedObservable = new GroupedObservable(key, group, this);
            this.destination.next(groupedObservable);
            if (this.durationSelector) {
                let duration;
                try {
                    duration = this.durationSelector(new GroupedObservable(key, group));
                }
                catch (err) {
                    this.error(err);
                    return;
                }
                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));
            }
        }
        if (!group.closed) {
            group.next(element);
        }
    }
    _error(err) {
        const groups = this.groups;
        if (groups) {
            groups.forEach((group, key) => {
                group.error(err);
            });
            groups.clear();
        }
        this.destination.error(err);
    }
    _complete() {
        const groups = this.groups;
        if (groups) {
            groups.forEach((group, key) => {
                group.complete();
            });
            groups.clear();
        }
        this.destination.complete();
    }
    removeGroup(key) {
        this.groups.delete(key);
    }
    unsubscribe() {
        if (!this.closed) {
            this.attemptedToUnsubscribe = true;
            if (this.count === 0) {
                super.unsubscribe();
            }
        }
    }
}
class GroupDurationSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(key, group, parent) {
        super(group);
        this.key = key;
        this.group = group;
        this.parent = parent;
    }
    _next(value) {
        this.complete();
    }
    _unsubscribe() {
        const { parent, key } = this;
        this.key = this.parent = null;
        if (parent) {
            parent.removeGroup(key);
        }
    }
}
class GroupedObservable extends _Observable__WEBPACK_IMPORTED_MODULE_2__["Observable"] {
    constructor(key, groupSubject, refCountSubscription) {
        super();
        this.key = key;
        this.groupSubject = groupSubject;
        this.refCountSubscription = refCountSubscription;
    }
    _subscribe(subscriber) {
        const subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
        const { refCountSubscription, groupSubject } = this;
        if (refCountSubscription && !refCountSubscription.closed) {
            subscription.add(new InnerRefCountSubscription(refCountSubscription));
        }
        subscription.add(groupSubject.subscribe(subscriber));
        return subscription;
    }
}
class InnerRefCountSubscription extends _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"] {
    constructor(parent) {
        super();
        this.parent = parent;
        parent.count++;
    }
    unsubscribe() {
        const parent = this.parent;
        if (!parent.closed && !this.closed) {
            super.unsubscribe();
            parent.count -= 1;
            if (parent.count === 0 && parent.attemptedToUnsubscribe) {
                parent.unsubscribe();
            }
        }
    }
}
//# sourceMappingURL=groupBy.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/ignoreElements.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/ignoreElements.js ***!
  \*************************************************************************/
/*! exports provided: ignoreElements */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ignoreElements", function() { return ignoreElements; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function ignoreElements() {
    return function ignoreElementsOperatorFunction(source) {
        return source.lift(new IgnoreElementsOperator());
    };
}
class IgnoreElementsOperator {
    call(subscriber, source) {
        return source.subscribe(new IgnoreElementsSubscriber(subscriber));
    }
}
class IgnoreElementsSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    _next(unused) {
    }
}
//# sourceMappingURL=ignoreElements.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/isEmpty.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/isEmpty.js ***!
  \******************************************************************/
/*! exports provided: isEmpty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isEmpty", function() { return isEmpty; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function isEmpty() {
    return (source) => source.lift(new IsEmptyOperator());
}
class IsEmptyOperator {
    call(observer, source) {
        return source.subscribe(new IsEmptySubscriber(observer));
    }
}
class IsEmptySubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination) {
        super(destination);
    }
    notifyComplete(isEmpty) {
        const destination = this.destination;
        destination.next(isEmpty);
        destination.complete();
    }
    _next(value) {
        this.notifyComplete(false);
    }
    _complete() {
        this.notifyComplete(true);
    }
}
//# sourceMappingURL=isEmpty.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/last.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/last.js ***!
  \***************************************************************/
/*! exports provided: last */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "last", function() { return last; });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/EmptyError */ "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filter */ "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
/* harmony import */ var _takeLast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./takeLast */ "./node_modules/rxjs/_esm2015/internal/operators/takeLast.js");
/* harmony import */ var _throwIfEmpty__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./throwIfEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js");
/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaultIfEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm2015/internal/util/identity.js");






function last(predicate, defaultValue) {
    const hasDefaultValue = arguments.length >= 2;
    return (source) => source.pipe(predicate ? Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])((v, i) => predicate(v, i, source)) : _util_identity__WEBPACK_IMPORTED_MODULE_5__["identity"], Object(_takeLast__WEBPACK_IMPORTED_MODULE_2__["takeLast"])(1), hasDefaultValue ? Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_4__["defaultIfEmpty"])(defaultValue) : Object(_throwIfEmpty__WEBPACK_IMPORTED_MODULE_3__["throwIfEmpty"])(() => new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__["EmptyError"]()));
}
//# sourceMappingURL=last.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/map.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/map.js ***!
  \**************************************************************/
/*! exports provided: map, MapOperator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MapOperator", function() { return MapOperator; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function map(project, thisArg) {
    return function mapOperation(source) {
        if (typeof project !== 'function') {
            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');
        }
        return source.lift(new MapOperator(project, thisArg));
    };
}
class MapOperator {
    constructor(project, thisArg) {
        this.project = project;
        this.thisArg = thisArg;
    }
    call(subscriber, source) {
        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));
    }
}
class MapSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, project, thisArg) {
        super(destination);
        this.project = project;
        this.count = 0;
        this.thisArg = thisArg || this;
    }
    _next(value) {
        let result;
        try {
            result = this.project.call(this.thisArg, value, this.count++);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    }
}
//# sourceMappingURL=map.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/mapTo.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/mapTo.js ***!
  \****************************************************************/
/*! exports provided: mapTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapTo", function() { return mapTo; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function mapTo(value) {
    return (source) => source.lift(new MapToOperator(value));
}
class MapToOperator {
    constructor(value) {
        this.value = value;
    }
    call(subscriber, source) {
        return source.subscribe(new MapToSubscriber(subscriber, this.value));
    }
}
class MapToSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, value) {
        super(destination);
        this.value = value;
    }
    _next(x) {
        this.destination.next(this.value);
    }
}
//# sourceMappingURL=mapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/materialize.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/materialize.js ***!
  \**********************************************************************/
/*! exports provided: materialize */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "materialize", function() { return materialize; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _Notification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Notification */ "./node_modules/rxjs/_esm2015/internal/Notification.js");


function materialize() {
    return function materializeOperatorFunction(source) {
        return source.lift(new MaterializeOperator());
    };
}
class MaterializeOperator {
    call(subscriber, source) {
        return source.subscribe(new MaterializeSubscriber(subscriber));
    }
}
class MaterializeSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination) {
        super(destination);
    }
    _next(value) {
        this.destination.next(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createNext(value));
    }
    _error(err) {
        const destination = this.destination;
        destination.next(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createError(err));
        destination.complete();
    }
    _complete() {
        const destination = this.destination;
        destination.next(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createComplete());
        destination.complete();
    }
}
//# sourceMappingURL=materialize.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/max.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/max.js ***!
  \**************************************************************/
/*! exports provided: max */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "max", function() { return max; });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reduce */ "./node_modules/rxjs/_esm2015/internal/operators/reduce.js");

function max(comparer) {
    const max = (typeof comparer === 'function')
        ? (x, y) => comparer(x, y) > 0 ? x : y
        : (x, y) => x > y ? x : y;
    return Object(_reduce__WEBPACK_IMPORTED_MODULE_0__["reduce"])(max);
}
//# sourceMappingURL=max.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/merge.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/merge.js ***!
  \****************************************************************/
/*! exports provided: merge */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return merge; });
/* harmony import */ var _observable_merge__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/merge */ "./node_modules/rxjs/_esm2015/internal/observable/merge.js");

function merge(...observables) {
    return (source) => source.lift.call(Object(_observable_merge__WEBPACK_IMPORTED_MODULE_0__["merge"])(source, ...observables));
}
//# sourceMappingURL=merge.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js ***!
  \*******************************************************************/
/*! exports provided: mergeAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeAll", function() { return mergeAll; });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeMap */ "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js");
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm2015/internal/util/identity.js");


function mergeAll(concurrent = Number.POSITIVE_INFINITY) {
    return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(_util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"], concurrent);
}
//# sourceMappingURL=mergeAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js ***!
  \*******************************************************************/
/*! exports provided: mergeMap, MergeMapOperator, MergeMapSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeMap", function() { return mergeMap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeMapOperator", function() { return MergeMapOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeMapSubscriber", function() { return MergeMapSubscriber; });
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../InnerSubscriber */ "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");





function mergeMap(project, resultSelector, concurrent = Number.POSITIVE_INFINITY) {
    if (typeof resultSelector === 'function') {
        return (source) => source.pipe(mergeMap((a, i) => Object(_observable_from__WEBPACK_IMPORTED_MODULE_4__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_3__["map"])((b, ii) => resultSelector(a, b, i, ii))), concurrent));
    }
    else if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return (source) => source.lift(new MergeMapOperator(project, concurrent));
}
class MergeMapOperator {
    constructor(project, concurrent = Number.POSITIVE_INFINITY) {
        this.project = project;
        this.concurrent = concurrent;
    }
    call(observer, source) {
        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));
    }
}
class MergeMapSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"] {
    constructor(destination, project, concurrent = Number.POSITIVE_INFINITY) {
        super(destination);
        this.project = project;
        this.concurrent = concurrent;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    _next(value) {
        if (this.active < this.concurrent) {
            this._tryNext(value);
        }
        else {
            this.buffer.push(value);
        }
    }
    _tryNext(value) {
        let result;
        const index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.active++;
        this._innerSub(result, value, index);
    }
    _innerSub(ish, value, index) {
        const innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__["InnerSubscriber"](this, value, index);
        const destination = this.destination;
        destination.add(innerSubscriber);
        const innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__["subscribeToResult"])(this, ish, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
        }
    }
    _complete() {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            this.destination.complete();
        }
        this.unsubscribe();
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    }
    notifyComplete(innerSub) {
        const buffer = this.buffer;
        this.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            this.destination.complete();
        }
    }
}
//# sourceMappingURL=mergeMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/mergeMapTo.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeMapTo.js ***!
  \*********************************************************************/
/*! exports provided: mergeMapTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeMapTo", function() { return mergeMapTo; });
/* harmony import */ var _mergeMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./mergeMap */ "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js");

function mergeMapTo(innerObservable, resultSelector, concurrent = Number.POSITIVE_INFINITY) {
    if (typeof resultSelector === 'function') {
        return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(() => innerObservable, resultSelector, concurrent);
    }
    if (typeof resultSelector === 'number') {
        concurrent = resultSelector;
    }
    return Object(_mergeMap__WEBPACK_IMPORTED_MODULE_0__["mergeMap"])(() => innerObservable, concurrent);
}
//# sourceMappingURL=mergeMapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/mergeScan.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/mergeScan.js ***!
  \********************************************************************/
/*! exports provided: mergeScan, MergeScanOperator, MergeScanSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mergeScan", function() { return mergeScan; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeScanOperator", function() { return MergeScanOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MergeScanSubscriber", function() { return MergeScanSubscriber; });
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../InnerSubscriber */ "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");



function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {
    return (source) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));
}
class MergeScanOperator {
    constructor(accumulator, seed, concurrent) {
        this.accumulator = accumulator;
        this.seed = seed;
        this.concurrent = concurrent;
    }
    call(subscriber, source) {
        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));
    }
}
class MergeScanSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"] {
    constructor(destination, accumulator, acc, concurrent) {
        super(destination);
        this.accumulator = accumulator;
        this.acc = acc;
        this.concurrent = concurrent;
        this.hasValue = false;
        this.hasCompleted = false;
        this.buffer = [];
        this.active = 0;
        this.index = 0;
    }
    _next(value) {
        if (this.active < this.concurrent) {
            const index = this.index++;
            const destination = this.destination;
            let ish;
            try {
                const { accumulator } = this;
                ish = accumulator(this.acc, value, index);
            }
            catch (e) {
                return destination.error(e);
            }
            this.active++;
            this._innerSub(ish, value, index);
        }
        else {
            this.buffer.push(value);
        }
    }
    _innerSub(ish, value, index) {
        const innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_2__["InnerSubscriber"](this, value, index);
        const destination = this.destination;
        destination.add(innerSubscriber);
        const innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_0__["subscribeToResult"])(this, ish, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            destination.add(innerSubscription);
        }
    }
    _complete() {
        this.hasCompleted = true;
        if (this.active === 0 && this.buffer.length === 0) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
        this.unsubscribe();
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        const { destination } = this;
        this.acc = innerValue;
        this.hasValue = true;
        destination.next(innerValue);
    }
    notifyComplete(innerSub) {
        const buffer = this.buffer;
        const destination = this.destination;
        destination.remove(innerSub);
        this.active--;
        if (buffer.length > 0) {
            this._next(buffer.shift());
        }
        else if (this.active === 0 && this.hasCompleted) {
            if (this.hasValue === false) {
                this.destination.next(this.acc);
            }
            this.destination.complete();
        }
    }
}
//# sourceMappingURL=mergeScan.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/min.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/min.js ***!
  \**************************************************************/
/*! exports provided: min */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "min", function() { return min; });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reduce */ "./node_modules/rxjs/_esm2015/internal/operators/reduce.js");

function min(comparer) {
    const min = (typeof comparer === 'function')
        ? (x, y) => comparer(x, y) < 0 ? x : y
        : (x, y) => x < y ? x : y;
    return Object(_reduce__WEBPACK_IMPORTED_MODULE_0__["reduce"])(min);
}
//# sourceMappingURL=min.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/multicast.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/multicast.js ***!
  \********************************************************************/
/*! exports provided: multicast, MulticastOperator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "multicast", function() { return multicast; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MulticastOperator", function() { return MulticastOperator; });
/* harmony import */ var _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/ConnectableObservable */ "./node_modules/rxjs/_esm2015/internal/observable/ConnectableObservable.js");

function multicast(subjectOrSubjectFactory, selector) {
    return function multicastOperatorFunction(source) {
        let subjectFactory;
        if (typeof subjectOrSubjectFactory === 'function') {
            subjectFactory = subjectOrSubjectFactory;
        }
        else {
            subjectFactory = function subjectFactory() {
                return subjectOrSubjectFactory;
            };
        }
        if (typeof selector === 'function') {
            return source.lift(new MulticastOperator(subjectFactory, selector));
        }
        const connectable = Object.create(source, _observable_ConnectableObservable__WEBPACK_IMPORTED_MODULE_0__["connectableObservableDescriptor"]);
        connectable.source = source;
        connectable.subjectFactory = subjectFactory;
        return connectable;
    };
}
class MulticastOperator {
    constructor(subjectFactory, selector) {
        this.subjectFactory = subjectFactory;
        this.selector = selector;
    }
    call(subscriber, source) {
        const { selector } = this;
        const subject = this.subjectFactory();
        const subscription = selector(subject).subscribe(subscriber);
        subscription.add(source.subscribe(subject));
        return subscription;
    }
}
//# sourceMappingURL=multicast.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/observeOn.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/observeOn.js ***!
  \********************************************************************/
/*! exports provided: observeOn, ObserveOnOperator, ObserveOnSubscriber, ObserveOnMessage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observeOn", function() { return observeOn; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObserveOnOperator", function() { return ObserveOnOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObserveOnSubscriber", function() { return ObserveOnSubscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObserveOnMessage", function() { return ObserveOnMessage; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _Notification__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Notification */ "./node_modules/rxjs/_esm2015/internal/Notification.js");


function observeOn(scheduler, delay = 0) {
    return function observeOnOperatorFunction(source) {
        return source.lift(new ObserveOnOperator(scheduler, delay));
    };
}
class ObserveOnOperator {
    constructor(scheduler, delay = 0) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    call(subscriber, source) {
        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));
    }
}
class ObserveOnSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, scheduler, delay = 0) {
        super(destination);
        this.scheduler = scheduler;
        this.delay = delay;
    }
    static dispatch(arg) {
        const { notification, destination } = arg;
        notification.observe(destination);
        this.unsubscribe();
    }
    scheduleMessage(notification) {
        const destination = this.destination;
        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));
    }
    _next(value) {
        this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createNext(value));
    }
    _error(err) {
        this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createError(err));
        this.unsubscribe();
    }
    _complete() {
        this.scheduleMessage(_Notification__WEBPACK_IMPORTED_MODULE_1__["Notification"].createComplete());
        this.unsubscribe();
    }
}
class ObserveOnMessage {
    constructor(notification, destination) {
        this.notification = notification;
        this.destination = destination;
    }
}
//# sourceMappingURL=observeOn.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/onErrorResumeNext.js":
/*!****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/onErrorResumeNext.js ***!
  \****************************************************************************/
/*! exports provided: onErrorResumeNext, onErrorResumeNextStatic */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function() { return onErrorResumeNext; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNextStatic", function() { return onErrorResumeNextStatic; });
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../InnerSubscriber */ "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");





function onErrorResumeNext(...nextSources) {
    if (nextSources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(nextSources[0])) {
        nextSources = nextSources[0];
    }
    return (source) => source.lift(new OnErrorResumeNextOperator(nextSources));
}
function onErrorResumeNextStatic(...nextSources) {
    let source = null;
    if (nextSources.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_1__["isArray"])(nextSources[0])) {
        nextSources = nextSources[0];
    }
    source = nextSources.shift();
    return Object(_observable_from__WEBPACK_IMPORTED_MODULE_0__["from"])(source, null).lift(new OnErrorResumeNextOperator(nextSources));
}
class OnErrorResumeNextOperator {
    constructor(nextSources) {
        this.nextSources = nextSources;
    }
    call(subscriber, source) {
        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));
    }
}
class OnErrorResumeNextSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"] {
    constructor(destination, nextSources) {
        super(destination);
        this.destination = destination;
        this.nextSources = nextSources;
    }
    notifyError(error, innerSub) {
        this.subscribeToNextSource();
    }
    notifyComplete(innerSub) {
        this.subscribeToNextSource();
    }
    _error(err) {
        this.subscribeToNextSource();
        this.unsubscribe();
    }
    _complete() {
        this.subscribeToNextSource();
        this.unsubscribe();
    }
    subscribeToNextSource() {
        const next = this.nextSources.shift();
        if (!!next) {
            const innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_3__["InnerSubscriber"](this, undefined, undefined);
            const destination = this.destination;
            destination.add(innerSubscriber);
            const innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_4__["subscribeToResult"])(this, next, undefined, undefined, innerSubscriber);
            if (innerSubscription !== innerSubscriber) {
                destination.add(innerSubscription);
            }
        }
        else {
            this.destination.complete();
        }
    }
}
//# sourceMappingURL=onErrorResumeNext.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/pairwise.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/pairwise.js ***!
  \*******************************************************************/
/*! exports provided: pairwise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pairwise", function() { return pairwise; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function pairwise() {
    return (source) => source.lift(new PairwiseOperator());
}
class PairwiseOperator {
    call(subscriber, source) {
        return source.subscribe(new PairwiseSubscriber(subscriber));
    }
}
class PairwiseSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination) {
        super(destination);
        this.hasPrev = false;
    }
    _next(value) {
        let pair;
        if (this.hasPrev) {
            pair = [this.prev, value];
        }
        else {
            this.hasPrev = true;
        }
        this.prev = value;
        if (pair) {
            this.destination.next(pair);
        }
    }
}
//# sourceMappingURL=pairwise.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/partition.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/partition.js ***!
  \********************************************************************/
/*! exports provided: partition */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "partition", function() { return partition; });
/* harmony import */ var _util_not__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/not */ "./node_modules/rxjs/_esm2015/internal/util/not.js");
/* harmony import */ var _filter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./filter */ "./node_modules/rxjs/_esm2015/internal/operators/filter.js");


function partition(predicate, thisArg) {
    return (source) => [
        Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(predicate, thisArg)(source),
        Object(_filter__WEBPACK_IMPORTED_MODULE_1__["filter"])(Object(_util_not__WEBPACK_IMPORTED_MODULE_0__["not"])(predicate, thisArg))(source)
    ];
}
//# sourceMappingURL=partition.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/pluck.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/pluck.js ***!
  \****************************************************************/
/*! exports provided: pluck */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pluck", function() { return pluck; });
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");

function pluck(...properties) {
    const length = properties.length;
    if (length === 0) {
        throw new Error('list of properties cannot be empty.');
    }
    return (source) => Object(_map__WEBPACK_IMPORTED_MODULE_0__["map"])(plucker(properties, length))(source);
}
function plucker(props, length) {
    const mapper = (x) => {
        let currentProp = x;
        for (let i = 0; i < length; i++) {
            const p = currentProp[props[i]];
            if (typeof p !== 'undefined') {
                currentProp = p;
            }
            else {
                return undefined;
            }
        }
        return currentProp;
    };
    return mapper;
}
//# sourceMappingURL=pluck.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/publish.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/publish.js ***!
  \******************************************************************/
/*! exports provided: publish */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "publish", function() { return publish; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");


function publish(selector) {
    return selector ?
        Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(() => new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"](), selector) :
        Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]());
}
//# sourceMappingURL=publish.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/publishBehavior.js":
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/publishBehavior.js ***!
  \**************************************************************************/
/*! exports provided: publishBehavior */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "publishBehavior", function() { return publishBehavior; });
/* harmony import */ var _BehaviorSubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../BehaviorSubject */ "./node_modules/rxjs/_esm2015/internal/BehaviorSubject.js");
/* harmony import */ var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");


function publishBehavior(value) {
    return (source) => Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(new _BehaviorSubject__WEBPACK_IMPORTED_MODULE_0__["BehaviorSubject"](value))(source);
}
//# sourceMappingURL=publishBehavior.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/publishLast.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/publishLast.js ***!
  \**********************************************************************/
/*! exports provided: publishLast */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "publishLast", function() { return publishLast; });
/* harmony import */ var _AsyncSubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../AsyncSubject */ "./node_modules/rxjs/_esm2015/internal/AsyncSubject.js");
/* harmony import */ var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");


function publishLast() {
    return (source) => Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(new _AsyncSubject__WEBPACK_IMPORTED_MODULE_0__["AsyncSubject"]())(source);
}
//# sourceMappingURL=publishLast.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/publishReplay.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/publishReplay.js ***!
  \************************************************************************/
/*! exports provided: publishReplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "publishReplay", function() { return publishReplay; });
/* harmony import */ var _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ReplaySubject */ "./node_modules/rxjs/_esm2015/internal/ReplaySubject.js");
/* harmony import */ var _multicast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");


function publishReplay(bufferSize, windowTime, selectorOrScheduler, scheduler) {
    if (selectorOrScheduler && typeof selectorOrScheduler !== 'function') {
        scheduler = selectorOrScheduler;
    }
    const selector = typeof selectorOrScheduler === 'function' ? selectorOrScheduler : undefined;
    const subject = new _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__["ReplaySubject"](bufferSize, windowTime, scheduler);
    return (source) => Object(_multicast__WEBPACK_IMPORTED_MODULE_1__["multicast"])(() => subject, selector)(source);
}
//# sourceMappingURL=publishReplay.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/race.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/race.js ***!
  \***************************************************************/
/*! exports provided: race */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "race", function() { return race; });
/* harmony import */ var _util_isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");
/* harmony import */ var _observable_race__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/race */ "./node_modules/rxjs/_esm2015/internal/observable/race.js");


function race(...observables) {
    return function raceOperatorFunction(source) {
        if (observables.length === 1 && Object(_util_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(observables[0])) {
            observables = observables[0];
        }
        return source.lift.call(Object(_observable_race__WEBPACK_IMPORTED_MODULE_1__["race"])(source, ...observables));
    };
}
//# sourceMappingURL=race.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/reduce.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/reduce.js ***!
  \*****************************************************************/
/*! exports provided: reduce */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reduce", function() { return reduce; });
/* harmony import */ var _scan__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scan */ "./node_modules/rxjs/_esm2015/internal/operators/scan.js");
/* harmony import */ var _takeLast__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./takeLast */ "./node_modules/rxjs/_esm2015/internal/operators/takeLast.js");
/* harmony import */ var _defaultIfEmpty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./defaultIfEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
/* harmony import */ var _util_pipe__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/pipe */ "./node_modules/rxjs/_esm2015/internal/util/pipe.js");




function reduce(accumulator, seed) {
    if (arguments.length >= 2) {
        return function reduceOperatorFunctionWithSeed(source) {
            return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipe"])(Object(_scan__WEBPACK_IMPORTED_MODULE_0__["scan"])(accumulator, seed), Object(_takeLast__WEBPACK_IMPORTED_MODULE_1__["takeLast"])(1), Object(_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_2__["defaultIfEmpty"])(seed))(source);
        };
    }
    return function reduceOperatorFunction(source) {
        return Object(_util_pipe__WEBPACK_IMPORTED_MODULE_3__["pipe"])(Object(_scan__WEBPACK_IMPORTED_MODULE_0__["scan"])((acc, value, index) => accumulator(acc, value, index + 1)), Object(_takeLast__WEBPACK_IMPORTED_MODULE_1__["takeLast"])(1))(source);
    };
}
//# sourceMappingURL=reduce.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/refCount.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/refCount.js ***!
  \*******************************************************************/
/*! exports provided: refCount */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "refCount", function() { return refCount; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function refCount() {
    return function refCountOperatorFunction(source) {
        return source.lift(new RefCountOperator(source));
    };
}
class RefCountOperator {
    constructor(connectable) {
        this.connectable = connectable;
    }
    call(subscriber, source) {
        const { connectable } = this;
        connectable._refCount++;
        const refCounter = new RefCountSubscriber(subscriber, connectable);
        const subscription = source.subscribe(refCounter);
        if (!refCounter.closed) {
            refCounter.connection = connectable.connect();
        }
        return subscription;
    }
}
class RefCountSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, connectable) {
        super(destination);
        this.connectable = connectable;
    }
    _unsubscribe() {
        const { connectable } = this;
        if (!connectable) {
            this.connection = null;
            return;
        }
        this.connectable = null;
        const refCount = connectable._refCount;
        if (refCount <= 0) {
            this.connection = null;
            return;
        }
        connectable._refCount = refCount - 1;
        if (refCount > 1) {
            this.connection = null;
            return;
        }
        const { connection } = this;
        const sharedConnection = connectable._connection;
        this.connection = null;
        if (sharedConnection && (!connection || sharedConnection === connection)) {
            sharedConnection.unsubscribe();
        }
    }
}
//# sourceMappingURL=refCount.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/repeat.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/repeat.js ***!
  \*****************************************************************/
/*! exports provided: repeat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "repeat", function() { return repeat; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../observable/empty */ "./node_modules/rxjs/_esm2015/internal/observable/empty.js");


function repeat(count = -1) {
    return (source) => {
        if (count === 0) {
            return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_1__["empty"])();
        }
        else if (count < 0) {
            return source.lift(new RepeatOperator(-1, source));
        }
        else {
            return source.lift(new RepeatOperator(count - 1, source));
        }
    };
}
class RepeatOperator {
    constructor(count, source) {
        this.count = count;
        this.source = source;
    }
    call(subscriber, source) {
        return source.subscribe(new RepeatSubscriber(subscriber, this.count, this.source));
    }
}
class RepeatSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, count, source) {
        super(destination);
        this.count = count;
        this.source = source;
    }
    complete() {
        if (!this.isStopped) {
            const { source, count } = this;
            if (count === 0) {
                return super.complete();
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    }
}
//# sourceMappingURL=repeat.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js ***!
  \*********************************************************************/
/*! exports provided: repeatWhen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "repeatWhen", function() { return repeatWhen; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");



function repeatWhen(notifier) {
    return (source) => source.lift(new RepeatWhenOperator(notifier));
}
class RepeatWhenOperator {
    constructor(notifier) {
        this.notifier = notifier;
    }
    call(subscriber, source) {
        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));
    }
}
class RepeatWhenSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"] {
    constructor(destination, notifier, source) {
        super(destination);
        this.notifier = notifier;
        this.source = source;
        this.sourceIsBeingSubscribedTo = true;
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.sourceIsBeingSubscribedTo = true;
        this.source.subscribe(this);
    }
    notifyComplete(innerSub) {
        if (this.sourceIsBeingSubscribedTo === false) {
            return super.complete();
        }
    }
    complete() {
        this.sourceIsBeingSubscribedTo = false;
        if (!this.isStopped) {
            if (!this.retries) {
                this.subscribeToRetries();
            }
            if (!this.retriesSubscription || this.retriesSubscription.closed) {
                return super.complete();
            }
            this._unsubscribeAndRecycle();
            this.notifications.next();
        }
    }
    _unsubscribe() {
        const { notifications, retriesSubscription } = this;
        if (notifications) {
            notifications.unsubscribe();
            this.notifications = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    }
    _unsubscribeAndRecycle() {
        const { _unsubscribe } = this;
        this._unsubscribe = null;
        super._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        return this;
    }
    subscribeToRetries() {
        this.notifications = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
        let retries;
        try {
            const { notifier } = this;
            retries = notifier(this.notifications);
        }
        catch (e) {
            return super.complete();
        }
        this.retries = retries;
        this.retriesSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, retries);
    }
}
//# sourceMappingURL=repeatWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/retry.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/retry.js ***!
  \****************************************************************/
/*! exports provided: retry */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "retry", function() { return retry; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function retry(count = -1) {
    return (source) => source.lift(new RetryOperator(count, source));
}
class RetryOperator {
    constructor(count, source) {
        this.count = count;
        this.source = source;
    }
    call(subscriber, source) {
        return source.subscribe(new RetrySubscriber(subscriber, this.count, this.source));
    }
}
class RetrySubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, count, source) {
        super(destination);
        this.count = count;
        this.source = source;
    }
    error(err) {
        if (!this.isStopped) {
            const { source, count } = this;
            if (count === 0) {
                return super.error(err);
            }
            else if (count > -1) {
                this.count = count - 1;
            }
            source.subscribe(this._unsubscribeAndRecycle());
        }
    }
}
//# sourceMappingURL=retry.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/retryWhen.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/retryWhen.js ***!
  \********************************************************************/
/*! exports provided: retryWhen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "retryWhen", function() { return retryWhen; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");



function retryWhen(notifier) {
    return (source) => source.lift(new RetryWhenOperator(notifier, source));
}
class RetryWhenOperator {
    constructor(notifier, source) {
        this.notifier = notifier;
        this.source = source;
    }
    call(subscriber, source) {
        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));
    }
}
class RetryWhenSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"] {
    constructor(destination, notifier, source) {
        super(destination);
        this.notifier = notifier;
        this.source = source;
    }
    error(err) {
        if (!this.isStopped) {
            let errors = this.errors;
            let retries = this.retries;
            let retriesSubscription = this.retriesSubscription;
            if (!retries) {
                errors = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
                try {
                    const { notifier } = this;
                    retries = notifier(errors);
                }
                catch (e) {
                    return super.error(e);
                }
                retriesSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, retries);
            }
            else {
                this.errors = null;
                this.retriesSubscription = null;
            }
            this._unsubscribeAndRecycle();
            this.errors = errors;
            this.retries = retries;
            this.retriesSubscription = retriesSubscription;
            errors.next(err);
        }
    }
    _unsubscribe() {
        const { errors, retriesSubscription } = this;
        if (errors) {
            errors.unsubscribe();
            this.errors = null;
        }
        if (retriesSubscription) {
            retriesSubscription.unsubscribe();
            this.retriesSubscription = null;
        }
        this.retries = null;
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        const { _unsubscribe } = this;
        this._unsubscribe = null;
        this._unsubscribeAndRecycle();
        this._unsubscribe = _unsubscribe;
        this.source.subscribe(this);
    }
}
//# sourceMappingURL=retryWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/sample.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/sample.js ***!
  \*****************************************************************/
/*! exports provided: sample */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sample", function() { return sample; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


function sample(notifier) {
    return (source) => source.lift(new SampleOperator(notifier));
}
class SampleOperator {
    constructor(notifier) {
        this.notifier = notifier;
    }
    call(subscriber, source) {
        const sampleSubscriber = new SampleSubscriber(subscriber);
        const subscription = source.subscribe(sampleSubscriber);
        subscription.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(sampleSubscriber, this.notifier));
        return subscription;
    }
}
class SampleSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor() {
        super(...arguments);
        this.hasValue = false;
    }
    _next(value) {
        this.value = value;
        this.hasValue = true;
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.emitValue();
    }
    notifyComplete() {
        this.emitValue();
    }
    emitValue() {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.value);
        }
    }
}
//# sourceMappingURL=sample.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js ***!
  \*********************************************************************/
/*! exports provided: sampleTime */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sampleTime", function() { return sampleTime; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");


function sampleTime(period, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"]) {
    return (source) => source.lift(new SampleTimeOperator(period, scheduler));
}
class SampleTimeOperator {
    constructor(period, scheduler) {
        this.period = period;
        this.scheduler = scheduler;
    }
    call(subscriber, source) {
        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));
    }
}
class SampleTimeSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, period, scheduler) {
        super(destination);
        this.period = period;
        this.scheduler = scheduler;
        this.hasValue = false;
        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));
    }
    _next(value) {
        this.lastValue = value;
        this.hasValue = true;
    }
    notifyNext() {
        if (this.hasValue) {
            this.hasValue = false;
            this.destination.next(this.lastValue);
        }
    }
}
function dispatchNotification(state) {
    let { subscriber, period } = state;
    subscriber.notifyNext();
    this.schedule(state, period);
}
//# sourceMappingURL=sampleTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/scan.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/scan.js ***!
  \***************************************************************/
/*! exports provided: scan */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scan", function() { return scan; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function scan(accumulator, seed) {
    let hasSeed = false;
    if (arguments.length >= 2) {
        hasSeed = true;
    }
    return function scanOperatorFunction(source) {
        return source.lift(new ScanOperator(accumulator, seed, hasSeed));
    };
}
class ScanOperator {
    constructor(accumulator, seed, hasSeed = false) {
        this.accumulator = accumulator;
        this.seed = seed;
        this.hasSeed = hasSeed;
    }
    call(subscriber, source) {
        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));
    }
}
class ScanSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, accumulator, _seed, hasSeed) {
        super(destination);
        this.accumulator = accumulator;
        this._seed = _seed;
        this.hasSeed = hasSeed;
        this.index = 0;
    }
    get seed() {
        return this._seed;
    }
    set seed(value) {
        this.hasSeed = true;
        this._seed = value;
    }
    _next(value) {
        if (!this.hasSeed) {
            this.seed = value;
            this.destination.next(value);
        }
        else {
            return this._tryNext(value);
        }
    }
    _tryNext(value) {
        const index = this.index++;
        let result;
        try {
            result = this.accumulator(this.seed, value, index);
        }
        catch (err) {
            this.destination.error(err);
        }
        this.seed = result;
        this.destination.next(result);
    }
}
//# sourceMappingURL=scan.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/sequenceEqual.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/sequenceEqual.js ***!
  \************************************************************************/
/*! exports provided: sequenceEqual, SequenceEqualOperator, SequenceEqualSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sequenceEqual", function() { return sequenceEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SequenceEqualOperator", function() { return SequenceEqualOperator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SequenceEqualSubscriber", function() { return SequenceEqualSubscriber; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function sequenceEqual(compareTo, comparator) {
    return (source) => source.lift(new SequenceEqualOperator(compareTo, comparator));
}
class SequenceEqualOperator {
    constructor(compareTo, comparator) {
        this.compareTo = compareTo;
        this.comparator = comparator;
    }
    call(subscriber, source) {
        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparator));
    }
}
class SequenceEqualSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, compareTo, comparator) {
        super(destination);
        this.compareTo = compareTo;
        this.comparator = comparator;
        this._a = [];
        this._b = [];
        this._oneComplete = false;
        this.destination.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));
    }
    _next(value) {
        if (this._oneComplete && this._b.length === 0) {
            this.emit(false);
        }
        else {
            this._a.push(value);
            this.checkValues();
        }
    }
    _complete() {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
        this.unsubscribe();
    }
    checkValues() {
        const { _a, _b, comparator } = this;
        while (_a.length > 0 && _b.length > 0) {
            let a = _a.shift();
            let b = _b.shift();
            let areEqual = false;
            try {
                areEqual = comparator ? comparator(a, b) : a === b;
            }
            catch (e) {
                this.destination.error(e);
            }
            if (!areEqual) {
                this.emit(false);
            }
        }
    }
    emit(value) {
        const { destination } = this;
        destination.next(value);
        destination.complete();
    }
    nextB(value) {
        if (this._oneComplete && this._a.length === 0) {
            this.emit(false);
        }
        else {
            this._b.push(value);
            this.checkValues();
        }
    }
    completeB() {
        if (this._oneComplete) {
            this.emit(this._a.length === 0 && this._b.length === 0);
        }
        else {
            this._oneComplete = true;
        }
    }
}
class SequenceEqualCompareToSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, parent) {
        super(destination);
        this.parent = parent;
    }
    _next(value) {
        this.parent.nextB(value);
    }
    _error(err) {
        this.parent.error(err);
        this.unsubscribe();
    }
    _complete() {
        this.parent.completeB();
        this.unsubscribe();
    }
}
//# sourceMappingURL=sequenceEqual.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/share.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/share.js ***!
  \****************************************************************/
/*! exports provided: share */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "share", function() { return share; });
/* harmony import */ var _multicast__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./multicast */ "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");
/* harmony import */ var _refCount__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./refCount */ "./node_modules/rxjs/_esm2015/internal/operators/refCount.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");



function shareSubjectFactory() {
    return new _Subject__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
}
function share() {
    return (source) => Object(_refCount__WEBPACK_IMPORTED_MODULE_1__["refCount"])()(Object(_multicast__WEBPACK_IMPORTED_MODULE_0__["multicast"])(shareSubjectFactory)(source));
}
//# sourceMappingURL=share.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js ***!
  \**********************************************************************/
/*! exports provided: shareReplay */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "shareReplay", function() { return shareReplay; });
/* harmony import */ var _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ReplaySubject */ "./node_modules/rxjs/_esm2015/internal/ReplaySubject.js");

function shareReplay(configOrBufferSize, windowTime, scheduler) {
    let config;
    if (configOrBufferSize && typeof configOrBufferSize === 'object') {
        config = configOrBufferSize;
    }
    else {
        config = {
            bufferSize: configOrBufferSize,
            windowTime,
            refCount: false,
            scheduler
        };
    }
    return (source) => source.lift(shareReplayOperator(config));
}
function shareReplayOperator({ bufferSize = Number.POSITIVE_INFINITY, windowTime = Number.POSITIVE_INFINITY, refCount: useRefCount, scheduler }) {
    let subject;
    let refCount = 0;
    let subscription;
    let hasError = false;
    let isComplete = false;
    return function shareReplayOperation(source) {
        refCount++;
        if (!subject || hasError) {
            hasError = false;
            subject = new _ReplaySubject__WEBPACK_IMPORTED_MODULE_0__["ReplaySubject"](bufferSize, windowTime, scheduler);
            subscription = source.subscribe({
                next(value) { subject.next(value); },
                error(err) {
                    hasError = true;
                    subject.error(err);
                },
                complete() {
                    isComplete = true;
                    subscription = undefined;
                    subject.complete();
                },
            });
        }
        const innerSub = subject.subscribe(this);
        this.add(() => {
            refCount--;
            innerSub.unsubscribe();
            if (subscription && !isComplete && useRefCount && refCount === 0) {
                subscription.unsubscribe();
                subscription = undefined;
                subject = undefined;
            }
        });
    };
}
//# sourceMappingURL=shareReplay.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/single.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/single.js ***!
  \*****************************************************************/
/*! exports provided: single */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "single", function() { return single; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/EmptyError */ "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");


function single(predicate) {
    return (source) => source.lift(new SingleOperator(predicate, source));
}
class SingleOperator {
    constructor(predicate, source) {
        this.predicate = predicate;
        this.source = source;
    }
    call(subscriber, source) {
        return source.subscribe(new SingleSubscriber(subscriber, this.predicate, this.source));
    }
}
class SingleSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, predicate, source) {
        super(destination);
        this.predicate = predicate;
        this.source = source;
        this.seenValue = false;
        this.index = 0;
    }
    applySingleValue(value) {
        if (this.seenValue) {
            this.destination.error('Sequence contains more than one element');
        }
        else {
            this.seenValue = true;
            this.singleValue = value;
        }
    }
    _next(value) {
        const index = this.index++;
        if (this.predicate) {
            this.tryNext(value, index);
        }
        else {
            this.applySingleValue(value);
        }
    }
    tryNext(value, index) {
        try {
            if (this.predicate(value, index, this.source)) {
                this.applySingleValue(value);
            }
        }
        catch (err) {
            this.destination.error(err);
        }
    }
    _complete() {
        const destination = this.destination;
        if (this.index > 0) {
            destination.next(this.seenValue ? this.singleValue : undefined);
            destination.complete();
        }
        else {
            destination.error(new _util_EmptyError__WEBPACK_IMPORTED_MODULE_1__["EmptyError"]);
        }
    }
}
//# sourceMappingURL=single.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/skip.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/skip.js ***!
  \***************************************************************/
/*! exports provided: skip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "skip", function() { return skip; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function skip(count) {
    return (source) => source.lift(new SkipOperator(count));
}
class SkipOperator {
    constructor(total) {
        this.total = total;
    }
    call(subscriber, source) {
        return source.subscribe(new SkipSubscriber(subscriber, this.total));
    }
}
class SkipSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, total) {
        super(destination);
        this.total = total;
        this.count = 0;
    }
    _next(x) {
        if (++this.count > this.total) {
            this.destination.next(x);
        }
    }
}
//# sourceMappingURL=skip.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/skipLast.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/skipLast.js ***!
  \*******************************************************************/
/*! exports provided: skipLast */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "skipLast", function() { return skipLast; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");


function skipLast(count) {
    return (source) => source.lift(new SkipLastOperator(count));
}
class SkipLastOperator {
    constructor(_skipCount) {
        this._skipCount = _skipCount;
        if (this._skipCount < 0) {
            throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__["ArgumentOutOfRangeError"];
        }
    }
    call(subscriber, source) {
        if (this._skipCount === 0) {
            return source.subscribe(new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](subscriber));
        }
        else {
            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));
        }
    }
}
class SkipLastSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, _skipCount) {
        super(destination);
        this._skipCount = _skipCount;
        this._count = 0;
        this._ring = new Array(_skipCount);
    }
    _next(value) {
        const skipCount = this._skipCount;
        const count = this._count++;
        if (count < skipCount) {
            this._ring[count] = value;
        }
        else {
            const currentIndex = count % skipCount;
            const ring = this._ring;
            const oldValue = ring[currentIndex];
            ring[currentIndex] = value;
            this.destination.next(oldValue);
        }
    }
}
//# sourceMappingURL=skipLast.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/skipUntil.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/skipUntil.js ***!
  \********************************************************************/
/*! exports provided: skipUntil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "skipUntil", function() { return skipUntil; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../InnerSubscriber */ "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");



function skipUntil(notifier) {
    return (source) => source.lift(new SkipUntilOperator(notifier));
}
class SkipUntilOperator {
    constructor(notifier) {
        this.notifier = notifier;
    }
    call(destination, source) {
        return source.subscribe(new SkipUntilSubscriber(destination, this.notifier));
    }
}
class SkipUntilSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, notifier) {
        super(destination);
        this.hasValue = false;
        const innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__["InnerSubscriber"](this, undefined, undefined);
        this.add(innerSubscriber);
        this.innerSubscription = innerSubscriber;
        const innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, notifier, undefined, undefined, innerSubscriber);
        if (innerSubscription !== innerSubscriber) {
            this.add(innerSubscription);
            this.innerSubscription = innerSubscription;
        }
    }
    _next(value) {
        if (this.hasValue) {
            super._next(value);
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.hasValue = true;
        if (this.innerSubscription) {
            this.innerSubscription.unsubscribe();
        }
    }
    notifyComplete() {
    }
}
//# sourceMappingURL=skipUntil.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/skipWhile.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/skipWhile.js ***!
  \********************************************************************/
/*! exports provided: skipWhile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "skipWhile", function() { return skipWhile; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function skipWhile(predicate) {
    return (source) => source.lift(new SkipWhileOperator(predicate));
}
class SkipWhileOperator {
    constructor(predicate) {
        this.predicate = predicate;
    }
    call(subscriber, source) {
        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));
    }
}
class SkipWhileSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, predicate) {
        super(destination);
        this.predicate = predicate;
        this.skipping = true;
        this.index = 0;
    }
    _next(value) {
        const destination = this.destination;
        if (this.skipping) {
            this.tryCallPredicate(value);
        }
        if (!this.skipping) {
            destination.next(value);
        }
    }
    tryCallPredicate(value) {
        try {
            const result = this.predicate(value, this.index++);
            this.skipping = Boolean(result);
        }
        catch (err) {
            this.destination.error(err);
        }
    }
}
//# sourceMappingURL=skipWhile.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/startWith.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/startWith.js ***!
  \********************************************************************/
/*! exports provided: startWith */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "startWith", function() { return startWith; });
/* harmony import */ var _observable_concat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/concat */ "./node_modules/rxjs/_esm2015/internal/observable/concat.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");


function startWith(...array) {
    const scheduler = array[array.length - 1];
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_1__["isScheduler"])(scheduler)) {
        array.pop();
        return (source) => Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(array, source, scheduler);
    }
    else {
        return (source) => Object(_observable_concat__WEBPACK_IMPORTED_MODULE_0__["concat"])(array, source);
    }
}
//# sourceMappingURL=startWith.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/subscribeOn.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/subscribeOn.js ***!
  \**********************************************************************/
/*! exports provided: subscribeOn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeOn", function() { return subscribeOn; });
/* harmony import */ var _observable_SubscribeOnObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/SubscribeOnObservable */ "./node_modules/rxjs/_esm2015/internal/observable/SubscribeOnObservable.js");

function subscribeOn(scheduler, delay = 0) {
    return function subscribeOnOperatorFunction(source) {
        return source.lift(new SubscribeOnOperator(scheduler, delay));
    };
}
class SubscribeOnOperator {
    constructor(scheduler, delay) {
        this.scheduler = scheduler;
        this.delay = delay;
    }
    call(subscriber, source) {
        return new _observable_SubscribeOnObservable__WEBPACK_IMPORTED_MODULE_0__["SubscribeOnObservable"](source, this.delay, this.scheduler).subscribe(subscriber);
    }
}
//# sourceMappingURL=subscribeOn.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/switchAll.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/switchAll.js ***!
  \********************************************************************/
/*! exports provided: switchAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "switchAll", function() { return switchAll; });
/* harmony import */ var _switchMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./switchMap */ "./node_modules/rxjs/_esm2015/internal/operators/switchMap.js");
/* harmony import */ var _util_identity__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/identity */ "./node_modules/rxjs/_esm2015/internal/util/identity.js");


function switchAll() {
    return Object(_switchMap__WEBPACK_IMPORTED_MODULE_0__["switchMap"])(_util_identity__WEBPACK_IMPORTED_MODULE_1__["identity"]);
}
//# sourceMappingURL=switchAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/switchMap.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/switchMap.js ***!
  \********************************************************************/
/*! exports provided: switchMap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "switchMap", function() { return switchMap; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../InnerSubscriber */ "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");
/* harmony import */ var _observable_from__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../observable/from */ "./node_modules/rxjs/_esm2015/internal/observable/from.js");





function switchMap(project, resultSelector) {
    if (typeof resultSelector === 'function') {
        return (source) => source.pipe(switchMap((a, i) => Object(_observable_from__WEBPACK_IMPORTED_MODULE_4__["from"])(project(a, i)).pipe(Object(_map__WEBPACK_IMPORTED_MODULE_3__["map"])((b, ii) => resultSelector(a, b, i, ii)))));
    }
    return (source) => source.lift(new SwitchMapOperator(project));
}
class SwitchMapOperator {
    constructor(project) {
        this.project = project;
    }
    call(subscriber, source) {
        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project));
    }
}
class SwitchMapSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, project) {
        super(destination);
        this.project = project;
        this.index = 0;
    }
    _next(value) {
        let result;
        const index = this.index++;
        try {
            result = this.project(value, index);
        }
        catch (error) {
            this.destination.error(error);
            return;
        }
        this._innerSub(result, value, index);
    }
    _innerSub(result, value, index) {
        const innerSubscription = this.innerSubscription;
        if (innerSubscription) {
            innerSubscription.unsubscribe();
        }
        const innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_1__["InnerSubscriber"](this, value, index);
        const destination = this.destination;
        destination.add(innerSubscriber);
        this.innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, result, undefined, undefined, innerSubscriber);
        if (this.innerSubscription !== innerSubscriber) {
            destination.add(this.innerSubscription);
        }
    }
    _complete() {
        const { innerSubscription } = this;
        if (!innerSubscription || innerSubscription.closed) {
            super._complete();
        }
        this.unsubscribe();
    }
    _unsubscribe() {
        this.innerSubscription = null;
    }
    notifyComplete(innerSub) {
        const destination = this.destination;
        destination.remove(innerSub);
        this.innerSubscription = null;
        if (this.isStopped) {
            super._complete();
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.destination.next(innerValue);
    }
}
//# sourceMappingURL=switchMap.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/switchMapTo.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/switchMapTo.js ***!
  \**********************************************************************/
/*! exports provided: switchMapTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "switchMapTo", function() { return switchMapTo; });
/* harmony import */ var _switchMap__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./switchMap */ "./node_modules/rxjs/_esm2015/internal/operators/switchMap.js");

function switchMapTo(innerObservable, resultSelector) {
    return resultSelector ? Object(_switchMap__WEBPACK_IMPORTED_MODULE_0__["switchMap"])(() => innerObservable, resultSelector) : Object(_switchMap__WEBPACK_IMPORTED_MODULE_0__["switchMap"])(() => innerObservable);
}
//# sourceMappingURL=switchMapTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/take.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/take.js ***!
  \***************************************************************/
/*! exports provided: take */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "take", function() { return take; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/empty */ "./node_modules/rxjs/_esm2015/internal/observable/empty.js");



function take(count) {
    return (source) => {
        if (count === 0) {
            return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
        }
        else {
            return source.lift(new TakeOperator(count));
        }
    };
}
class TakeOperator {
    constructor(total) {
        this.total = total;
        if (this.total < 0) {
            throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__["ArgumentOutOfRangeError"];
        }
    }
    call(subscriber, source) {
        return source.subscribe(new TakeSubscriber(subscriber, this.total));
    }
}
class TakeSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, total) {
        super(destination);
        this.total = total;
        this.count = 0;
    }
    _next(value) {
        const total = this.total;
        const count = ++this.count;
        if (count <= total) {
            this.destination.next(value);
            if (count === total) {
                this.destination.complete();
                this.unsubscribe();
            }
        }
    }
}
//# sourceMappingURL=take.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/takeLast.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/takeLast.js ***!
  \*******************************************************************/
/*! exports provided: takeLast */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeLast", function() { return takeLast; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/ArgumentOutOfRangeError */ "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js");
/* harmony import */ var _observable_empty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/empty */ "./node_modules/rxjs/_esm2015/internal/observable/empty.js");



function takeLast(count) {
    return function takeLastOperatorFunction(source) {
        if (count === 0) {
            return Object(_observable_empty__WEBPACK_IMPORTED_MODULE_2__["empty"])();
        }
        else {
            return source.lift(new TakeLastOperator(count));
        }
    };
}
class TakeLastOperator {
    constructor(total) {
        this.total = total;
        if (this.total < 0) {
            throw new _util_ArgumentOutOfRangeError__WEBPACK_IMPORTED_MODULE_1__["ArgumentOutOfRangeError"];
        }
    }
    call(subscriber, source) {
        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));
    }
}
class TakeLastSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, total) {
        super(destination);
        this.total = total;
        this.ring = new Array();
        this.count = 0;
    }
    _next(value) {
        const ring = this.ring;
        const total = this.total;
        const count = this.count++;
        if (ring.length < total) {
            ring.push(value);
        }
        else {
            const index = count % total;
            ring[index] = value;
        }
    }
    _complete() {
        const destination = this.destination;
        let count = this.count;
        if (count > 0) {
            const total = this.count >= this.total ? this.total : this.count;
            const ring = this.ring;
            for (let i = 0; i < total; i++) {
                const idx = (count++) % total;
                destination.next(ring[idx]);
            }
        }
        destination.complete();
    }
}
//# sourceMappingURL=takeLast.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js ***!
  \********************************************************************/
/*! exports provided: takeUntil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeUntil", function() { return takeUntil; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


function takeUntil(notifier) {
    return (source) => source.lift(new TakeUntilOperator(notifier));
}
class TakeUntilOperator {
    constructor(notifier) {
        this.notifier = notifier;
    }
    call(subscriber, source) {
        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);
        const notifierSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(takeUntilSubscriber, this.notifier);
        if (notifierSubscription && !takeUntilSubscriber.seenValue) {
            takeUntilSubscriber.add(notifierSubscription);
            return source.subscribe(takeUntilSubscriber);
        }
        return takeUntilSubscriber;
    }
}
class TakeUntilSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination) {
        super(destination);
        this.seenValue = false;
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.seenValue = true;
        this.complete();
    }
    notifyComplete() {
    }
}
//# sourceMappingURL=takeUntil.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js ***!
  \********************************************************************/
/*! exports provided: takeWhile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "takeWhile", function() { return takeWhile; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function takeWhile(predicate, inclusive = false) {
    return (source) => source.lift(new TakeWhileOperator(predicate, inclusive));
}
class TakeWhileOperator {
    constructor(predicate, inclusive) {
        this.predicate = predicate;
        this.inclusive = inclusive;
    }
    call(subscriber, source) {
        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));
    }
}
class TakeWhileSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, predicate, inclusive) {
        super(destination);
        this.predicate = predicate;
        this.inclusive = inclusive;
        this.index = 0;
    }
    _next(value) {
        const destination = this.destination;
        let result;
        try {
            result = this.predicate(value, this.index++);
        }
        catch (err) {
            destination.error(err);
            return;
        }
        this.nextOrComplete(value, result);
    }
    nextOrComplete(value, predicateResult) {
        const destination = this.destination;
        if (Boolean(predicateResult)) {
            destination.next(value);
        }
        else {
            if (this.inclusive) {
                destination.next(value);
            }
            destination.complete();
        }
    }
}
//# sourceMappingURL=takeWhile.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/tap.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/tap.js ***!
  \**************************************************************/
/*! exports provided: tap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "tap", function() { return tap; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _util_noop__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/noop */ "./node_modules/rxjs/_esm2015/internal/util/noop.js");
/* harmony import */ var _util_isFunction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/isFunction */ "./node_modules/rxjs/_esm2015/internal/util/isFunction.js");



function tap(nextOrObserver, error, complete) {
    return function tapOperatorFunction(source) {
        return source.lift(new DoOperator(nextOrObserver, error, complete));
    };
}
class DoOperator {
    constructor(nextOrObserver, error, complete) {
        this.nextOrObserver = nextOrObserver;
        this.error = error;
        this.complete = complete;
    }
    call(subscriber, source) {
        return source.subscribe(new TapSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));
    }
}
class TapSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, observerOrNext, error, complete) {
        super(destination);
        this._tapNext = _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        this._tapError = _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        this._tapComplete = _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        this._tapError = error || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        this._tapComplete = complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        if (Object(_util_isFunction__WEBPACK_IMPORTED_MODULE_2__["isFunction"])(observerOrNext)) {
            this._context = this;
            this._tapNext = observerOrNext;
        }
        else if (observerOrNext) {
            this._context = observerOrNext;
            this._tapNext = observerOrNext.next || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
            this._tapError = observerOrNext.error || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
            this._tapComplete = observerOrNext.complete || _util_noop__WEBPACK_IMPORTED_MODULE_1__["noop"];
        }
    }
    _next(value) {
        try {
            this._tapNext.call(this._context, value);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(value);
    }
    _error(err) {
        try {
            this._tapError.call(this._context, err);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.error(err);
    }
    _complete() {
        try {
            this._tapComplete.call(this._context);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        return this.destination.complete();
    }
}
//# sourceMappingURL=tap.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/throttle.js":
/*!*******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/throttle.js ***!
  \*******************************************************************/
/*! exports provided: defaultThrottleConfig, throttle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultThrottleConfig", function() { return defaultThrottleConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return throttle; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


const defaultThrottleConfig = {
    leading: true,
    trailing: false
};
function throttle(durationSelector, config = defaultThrottleConfig) {
    return (source) => source.lift(new ThrottleOperator(durationSelector, config.leading, config.trailing));
}
class ThrottleOperator {
    constructor(durationSelector, leading, trailing) {
        this.durationSelector = durationSelector;
        this.leading = leading;
        this.trailing = trailing;
    }
    call(subscriber, source) {
        return source.subscribe(new ThrottleSubscriber(subscriber, this.durationSelector, this.leading, this.trailing));
    }
}
class ThrottleSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, durationSelector, _leading, _trailing) {
        super(destination);
        this.destination = destination;
        this.durationSelector = durationSelector;
        this._leading = _leading;
        this._trailing = _trailing;
        this._hasValue = false;
    }
    _next(value) {
        this._hasValue = true;
        this._sendValue = value;
        if (!this._throttled) {
            if (this._leading) {
                this.send();
            }
            else {
                this.throttle(value);
            }
        }
    }
    send() {
        const { _hasValue, _sendValue } = this;
        if (_hasValue) {
            this.destination.next(_sendValue);
            this.throttle(_sendValue);
        }
        this._hasValue = false;
        this._sendValue = null;
    }
    throttle(value) {
        const duration = this.tryDurationSelector(value);
        if (!!duration) {
            this.add(this._throttled = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, duration));
        }
    }
    tryDurationSelector(value) {
        try {
            return this.durationSelector(value);
        }
        catch (err) {
            this.destination.error(err);
            return null;
        }
    }
    throttlingDone() {
        const { _throttled, _trailing } = this;
        if (_throttled) {
            _throttled.unsubscribe();
        }
        this._throttled = null;
        if (_trailing) {
            this.send();
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.throttlingDone();
    }
    notifyComplete() {
        this.throttlingDone();
    }
}
//# sourceMappingURL=throttle.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/throttleTime.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/throttleTime.js ***!
  \***********************************************************************/
/*! exports provided: throttleTime */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throttleTime", function() { return throttleTime; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _throttle__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./throttle */ "./node_modules/rxjs/_esm2015/internal/operators/throttle.js");



function throttleTime(duration, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"], config = _throttle__WEBPACK_IMPORTED_MODULE_2__["defaultThrottleConfig"]) {
    return (source) => source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));
}
class ThrottleTimeOperator {
    constructor(duration, scheduler, leading, trailing) {
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
    }
    call(subscriber, source) {
        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));
    }
}
class ThrottleTimeSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, duration, scheduler, leading, trailing) {
        super(destination);
        this.duration = duration;
        this.scheduler = scheduler;
        this.leading = leading;
        this.trailing = trailing;
        this._hasTrailingValue = false;
        this._trailingValue = null;
    }
    _next(value) {
        if (this.throttled) {
            if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
        else {
            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));
            if (this.leading) {
                this.destination.next(value);
            }
            else if (this.trailing) {
                this._trailingValue = value;
                this._hasTrailingValue = true;
            }
        }
    }
    _complete() {
        if (this._hasTrailingValue) {
            this.destination.next(this._trailingValue);
            this.destination.complete();
        }
        else {
            this.destination.complete();
        }
    }
    clearThrottle() {
        const throttled = this.throttled;
        if (throttled) {
            if (this.trailing && this._hasTrailingValue) {
                this.destination.next(this._trailingValue);
                this._trailingValue = null;
                this._hasTrailingValue = false;
            }
            throttled.unsubscribe();
            this.remove(throttled);
            this.throttled = null;
        }
    }
}
function dispatchNext(arg) {
    const { subscriber } = arg;
    subscriber.clearThrottle();
}
//# sourceMappingURL=throttleTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js ***!
  \***********************************************************************/
/*! exports provided: throwIfEmpty */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "throwIfEmpty", function() { return throwIfEmpty; });
/* harmony import */ var _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/EmptyError */ "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");


function throwIfEmpty(errorFactory = defaultErrorFactory) {
    return (source) => {
        return source.lift(new ThrowIfEmptyOperator(errorFactory));
    };
}
class ThrowIfEmptyOperator {
    constructor(errorFactory) {
        this.errorFactory = errorFactory;
    }
    call(subscriber, source) {
        return source.subscribe(new ThrowIfEmptySubscriber(subscriber, this.errorFactory));
    }
}
class ThrowIfEmptySubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_1__["Subscriber"] {
    constructor(destination, errorFactory) {
        super(destination);
        this.errorFactory = errorFactory;
        this.hasValue = false;
    }
    _next(value) {
        this.hasValue = true;
        this.destination.next(value);
    }
    _complete() {
        if (!this.hasValue) {
            let err;
            try {
                err = this.errorFactory();
            }
            catch (e) {
                err = e;
            }
            this.destination.error(err);
        }
        else {
            return this.destination.complete();
        }
    }
}
function defaultErrorFactory() {
    return new _util_EmptyError__WEBPACK_IMPORTED_MODULE_0__["EmptyError"]();
}
//# sourceMappingURL=throwIfEmpty.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/timeInterval.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/timeInterval.js ***!
  \***********************************************************************/
/*! exports provided: timeInterval, TimeInterval */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timeInterval", function() { return timeInterval; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeInterval", function() { return TimeInterval; });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _scan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scan */ "./node_modules/rxjs/_esm2015/internal/operators/scan.js");
/* harmony import */ var _observable_defer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../observable/defer */ "./node_modules/rxjs/_esm2015/internal/observable/defer.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");




function timeInterval(scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"]) {
    return (source) => Object(_observable_defer__WEBPACK_IMPORTED_MODULE_2__["defer"])(() => {
        return source.pipe(Object(_scan__WEBPACK_IMPORTED_MODULE_1__["scan"])(({ current }, value) => ({ value, current: scheduler.now(), last: current }), { current: scheduler.now(), value: undefined, last: undefined }), Object(_map__WEBPACK_IMPORTED_MODULE_3__["map"])(({ current, last, value }) => new TimeInterval(value, current - last)));
    });
}
class TimeInterval {
    constructor(value, interval) {
        this.value = value;
        this.interval = interval;
    }
}
//# sourceMappingURL=timeInterval.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/timeout.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/timeout.js ***!
  \******************************************************************/
/*! exports provided: timeout */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timeout", function() { return timeout; });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _util_TimeoutError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/TimeoutError */ "./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js");
/* harmony import */ var _timeoutWith__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./timeoutWith */ "./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js");
/* harmony import */ var _observable_throwError__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../observable/throwError */ "./node_modules/rxjs/_esm2015/internal/observable/throwError.js");




function timeout(due, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"]) {
    return Object(_timeoutWith__WEBPACK_IMPORTED_MODULE_2__["timeoutWith"])(due, Object(_observable_throwError__WEBPACK_IMPORTED_MODULE_3__["throwError"])(new _util_TimeoutError__WEBPACK_IMPORTED_MODULE_1__["TimeoutError"]()), scheduler);
}
//# sourceMappingURL=timeout.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js ***!
  \**********************************************************************/
/*! exports provided: timeoutWith */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timeoutWith", function() { return timeoutWith; });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _util_isDate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/isDate */ "./node_modules/rxjs/_esm2015/internal/util/isDate.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");




function timeoutWith(due, withObservable, scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"]) {
    return (source) => {
        let absoluteTimeout = Object(_util_isDate__WEBPACK_IMPORTED_MODULE_1__["isDate"])(due);
        let waitFor = absoluteTimeout ? (+due - scheduler.now()) : Math.abs(due);
        return source.lift(new TimeoutWithOperator(waitFor, absoluteTimeout, withObservable, scheduler));
    };
}
class TimeoutWithOperator {
    constructor(waitFor, absoluteTimeout, withObservable, scheduler) {
        this.waitFor = waitFor;
        this.absoluteTimeout = absoluteTimeout;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
    }
    call(subscriber, source) {
        return source.subscribe(new TimeoutWithSubscriber(subscriber, this.absoluteTimeout, this.waitFor, this.withObservable, this.scheduler));
    }
}
class TimeoutWithSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"] {
    constructor(destination, absoluteTimeout, waitFor, withObservable, scheduler) {
        super(destination);
        this.absoluteTimeout = absoluteTimeout;
        this.waitFor = waitFor;
        this.withObservable = withObservable;
        this.scheduler = scheduler;
        this.action = null;
        this.scheduleTimeout();
    }
    static dispatchTimeout(subscriber) {
        const { withObservable } = subscriber;
        subscriber._unsubscribeAndRecycle();
        subscriber.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(subscriber, withObservable));
    }
    scheduleTimeout() {
        const { action } = this;
        if (action) {
            this.action = action.schedule(this, this.waitFor);
        }
        else {
            this.add(this.action = this.scheduler.schedule(TimeoutWithSubscriber.dispatchTimeout, this.waitFor, this));
        }
    }
    _next(value) {
        if (!this.absoluteTimeout) {
            this.scheduleTimeout();
        }
        super._next(value);
    }
    _unsubscribe() {
        this.action = null;
        this.scheduler = null;
        this.withObservable = null;
    }
}
//# sourceMappingURL=timeoutWith.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/timestamp.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/timestamp.js ***!
  \********************************************************************/
/*! exports provided: timestamp, Timestamp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "timestamp", function() { return timestamp; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Timestamp", function() { return Timestamp; });
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _map__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");


function timestamp(scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_0__["async"]) {
    return Object(_map__WEBPACK_IMPORTED_MODULE_1__["map"])((value) => new Timestamp(value, scheduler.now()));
}
class Timestamp {
    constructor(value, timestamp) {
        this.value = value;
        this.timestamp = timestamp;
    }
}
//# sourceMappingURL=timestamp.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/toArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/toArray.js ***!
  \******************************************************************/
/*! exports provided: toArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toArray", function() { return toArray; });
/* harmony import */ var _reduce__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reduce */ "./node_modules/rxjs/_esm2015/internal/operators/reduce.js");

function toArrayReducer(arr, item, index) {
    if (index === 0) {
        return [item];
    }
    arr.push(item);
    return arr;
}
function toArray() {
    return Object(_reduce__WEBPACK_IMPORTED_MODULE_0__["reduce"])(toArrayReducer, []);
}
//# sourceMappingURL=toArray.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/window.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/window.js ***!
  \*****************************************************************/
/*! exports provided: window */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "window", function() { return window; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");



function window(windowBoundaries) {
    return function windowOperatorFunction(source) {
        return source.lift(new WindowOperator(windowBoundaries));
    };
}
class WindowOperator {
    constructor(windowBoundaries) {
        this.windowBoundaries = windowBoundaries;
    }
    call(subscriber, source) {
        const windowSubscriber = new WindowSubscriber(subscriber);
        const sourceSubscription = source.subscribe(windowSubscriber);
        if (!sourceSubscription.closed) {
            windowSubscriber.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(windowSubscriber, this.windowBoundaries));
        }
        return sourceSubscription;
    }
}
class WindowSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"] {
    constructor(destination) {
        super(destination);
        this.window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
        destination.next(this.window);
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow();
    }
    notifyError(error, innerSub) {
        this._error(error);
    }
    notifyComplete(innerSub) {
        this._complete();
    }
    _next(value) {
        this.window.next(value);
    }
    _error(err) {
        this.window.error(err);
        this.destination.error(err);
    }
    _complete() {
        this.window.complete();
        this.destination.complete();
    }
    _unsubscribe() {
        this.window = null;
    }
    openWindow() {
        const prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        const destination = this.destination;
        const newWindow = this.window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
        destination.next(newWindow);
    }
}
//# sourceMappingURL=window.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/windowCount.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/windowCount.js ***!
  \**********************************************************************/
/*! exports provided: windowCount */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "windowCount", function() { return windowCount; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");


function windowCount(windowSize, startWindowEvery = 0) {
    return function windowCountOperatorFunction(source) {
        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));
    };
}
class WindowCountOperator {
    constructor(windowSize, startWindowEvery) {
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
    }
    call(subscriber, source) {
        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));
    }
}
class WindowCountSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"] {
    constructor(destination, windowSize, startWindowEvery) {
        super(destination);
        this.destination = destination;
        this.windowSize = windowSize;
        this.startWindowEvery = startWindowEvery;
        this.windows = [new _Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]()];
        this.count = 0;
        destination.next(this.windows[0]);
    }
    _next(value) {
        const startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;
        const destination = this.destination;
        const windowSize = this.windowSize;
        const windows = this.windows;
        const len = windows.length;
        for (let i = 0; i < len && !this.closed; i++) {
            windows[i].next(value);
        }
        const c = this.count - windowSize + 1;
        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {
            windows.shift().complete();
        }
        if (++this.count % startWindowEvery === 0 && !this.closed) {
            const window = new _Subject__WEBPACK_IMPORTED_MODULE_1__["Subject"]();
            windows.push(window);
            destination.next(window);
        }
    }
    _error(err) {
        const windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().error(err);
            }
        }
        this.destination.error(err);
    }
    _complete() {
        const windows = this.windows;
        if (windows) {
            while (windows.length > 0 && !this.closed) {
                windows.shift().complete();
            }
        }
        this.destination.complete();
    }
    _unsubscribe() {
        this.count = 0;
        this.windows = null;
    }
}
//# sourceMappingURL=windowCount.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/windowTime.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/windowTime.js ***!
  \*********************************************************************/
/*! exports provided: windowTime */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "windowTime", function() { return windowTime; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _scheduler_async__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scheduler/async */ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js");
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _util_isNumeric__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/isNumeric */ "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js");
/* harmony import */ var _util_isScheduler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isScheduler */ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js");





function windowTime(windowTimeSpan) {
    let scheduler = _scheduler_async__WEBPACK_IMPORTED_MODULE_1__["async"];
    let windowCreationInterval = null;
    let maxWindowSize = Number.POSITIVE_INFINITY;
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(arguments[3])) {
        scheduler = arguments[3];
    }
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(arguments[2])) {
        scheduler = arguments[2];
    }
    else if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_3__["isNumeric"])(arguments[2])) {
        maxWindowSize = arguments[2];
    }
    if (Object(_util_isScheduler__WEBPACK_IMPORTED_MODULE_4__["isScheduler"])(arguments[1])) {
        scheduler = arguments[1];
    }
    else if (Object(_util_isNumeric__WEBPACK_IMPORTED_MODULE_3__["isNumeric"])(arguments[1])) {
        windowCreationInterval = arguments[1];
    }
    return function windowTimeOperatorFunction(source) {
        return source.lift(new WindowTimeOperator(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler));
    };
}
class WindowTimeOperator {
    constructor(windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
    }
    call(subscriber, source) {
        return source.subscribe(new WindowTimeSubscriber(subscriber, this.windowTimeSpan, this.windowCreationInterval, this.maxWindowSize, this.scheduler));
    }
}
class CountedSubject extends _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"] {
    constructor() {
        super(...arguments);
        this._numberOfNextedValues = 0;
    }
    next(value) {
        this._numberOfNextedValues++;
        super.next(value);
    }
    get numberOfNextedValues() {
        return this._numberOfNextedValues;
    }
}
class WindowTimeSubscriber extends _Subscriber__WEBPACK_IMPORTED_MODULE_2__["Subscriber"] {
    constructor(destination, windowTimeSpan, windowCreationInterval, maxWindowSize, scheduler) {
        super(destination);
        this.destination = destination;
        this.windowTimeSpan = windowTimeSpan;
        this.windowCreationInterval = windowCreationInterval;
        this.maxWindowSize = maxWindowSize;
        this.scheduler = scheduler;
        this.windows = [];
        const window = this.openWindow();
        if (windowCreationInterval !== null && windowCreationInterval >= 0) {
            const closeState = { subscriber: this, window, context: null };
            const creationState = { windowTimeSpan, windowCreationInterval, subscriber: this, scheduler };
            this.add(scheduler.schedule(dispatchWindowClose, windowTimeSpan, closeState));
            this.add(scheduler.schedule(dispatchWindowCreation, windowCreationInterval, creationState));
        }
        else {
            const timeSpanOnlyState = { subscriber: this, window, windowTimeSpan };
            this.add(scheduler.schedule(dispatchWindowTimeSpanOnly, windowTimeSpan, timeSpanOnlyState));
        }
    }
    _next(value) {
        const windows = this.windows;
        const len = windows.length;
        for (let i = 0; i < len; i++) {
            const window = windows[i];
            if (!window.closed) {
                window.next(value);
                if (window.numberOfNextedValues >= this.maxWindowSize) {
                    this.closeWindow(window);
                }
            }
        }
    }
    _error(err) {
        const windows = this.windows;
        while (windows.length > 0) {
            windows.shift().error(err);
        }
        this.destination.error(err);
    }
    _complete() {
        const windows = this.windows;
        while (windows.length > 0) {
            const window = windows.shift();
            if (!window.closed) {
                window.complete();
            }
        }
        this.destination.complete();
    }
    openWindow() {
        const window = new CountedSubject();
        this.windows.push(window);
        const destination = this.destination;
        destination.next(window);
        return window;
    }
    closeWindow(window) {
        window.complete();
        const windows = this.windows;
        windows.splice(windows.indexOf(window), 1);
    }
}
function dispatchWindowTimeSpanOnly(state) {
    const { subscriber, windowTimeSpan, window } = state;
    if (window) {
        subscriber.closeWindow(window);
    }
    state.window = subscriber.openWindow();
    this.schedule(state, windowTimeSpan);
}
function dispatchWindowCreation(state) {
    const { windowTimeSpan, subscriber, scheduler, windowCreationInterval } = state;
    const window = subscriber.openWindow();
    const action = this;
    let context = { action, subscription: null };
    const timeSpanState = { subscriber, window, context };
    context.subscription = scheduler.schedule(dispatchWindowClose, windowTimeSpan, timeSpanState);
    action.add(context.subscription);
    action.schedule(state, windowCreationInterval);
}
function dispatchWindowClose(state) {
    const { subscriber, window, context } = state;
    if (context && context.action && context.subscription) {
        context.action.remove(context.subscription);
    }
    subscriber.closeWindow(window);
}
//# sourceMappingURL=windowTime.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/windowToggle.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/windowToggle.js ***!
  \***********************************************************************/
/*! exports provided: windowToggle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "windowToggle", function() { return windowToggle; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");




function windowToggle(openings, closingSelector) {
    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));
}
class WindowToggleOperator {
    constructor(openings, closingSelector) {
        this.openings = openings;
        this.closingSelector = closingSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));
    }
}
class WindowToggleSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_2__["OuterSubscriber"] {
    constructor(destination, openings, closingSelector) {
        super(destination);
        this.openings = openings;
        this.closingSelector = closingSelector;
        this.contexts = [];
        this.add(this.openSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, openings, openings));
    }
    _next(value) {
        const { contexts } = this;
        if (contexts) {
            const len = contexts.length;
            for (let i = 0; i < len; i++) {
                contexts[i].window.next(value);
            }
        }
    }
    _error(err) {
        const { contexts } = this;
        this.contexts = null;
        if (contexts) {
            const len = contexts.length;
            let index = -1;
            while (++index < len) {
                const context = contexts[index];
                context.window.error(err);
                context.subscription.unsubscribe();
            }
        }
        super._error(err);
    }
    _complete() {
        const { contexts } = this;
        this.contexts = null;
        if (contexts) {
            const len = contexts.length;
            let index = -1;
            while (++index < len) {
                const context = contexts[index];
                context.window.complete();
                context.subscription.unsubscribe();
            }
        }
        super._complete();
    }
    _unsubscribe() {
        const { contexts } = this;
        this.contexts = null;
        if (contexts) {
            const len = contexts.length;
            let index = -1;
            while (++index < len) {
                const context = contexts[index];
                context.window.unsubscribe();
                context.subscription.unsubscribe();
            }
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        if (outerValue === this.openings) {
            let closingNotifier;
            try {
                const { closingSelector } = this;
                closingNotifier = closingSelector(innerValue);
            }
            catch (e) {
                return this.error(e);
            }
            const window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
            const subscription = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
            const context = { window, subscription };
            this.contexts.push(context);
            const innerSubscription = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_3__["subscribeToResult"])(this, closingNotifier, context);
            if (innerSubscription.closed) {
                this.closeWindow(this.contexts.length - 1);
            }
            else {
                innerSubscription.context = context;
                subscription.add(innerSubscription);
            }
            this.destination.next(window);
        }
        else {
            this.closeWindow(this.contexts.indexOf(outerValue));
        }
    }
    notifyError(err) {
        this.error(err);
    }
    notifyComplete(inner) {
        if (inner !== this.openSubscription) {
            this.closeWindow(this.contexts.indexOf(inner.context));
        }
    }
    closeWindow(index) {
        if (index === -1) {
            return;
        }
        const { contexts } = this;
        const context = contexts[index];
        const { window, subscription } = context;
        contexts.splice(index, 1);
        window.complete();
        subscription.unsubscribe();
    }
}
//# sourceMappingURL=windowToggle.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/windowWhen.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/windowWhen.js ***!
  \*********************************************************************/
/*! exports provided: windowWhen */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "windowWhen", function() { return windowWhen; });
/* harmony import */ var _Subject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subject */ "./node_modules/rxjs/_esm2015/internal/Subject.js");
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");



function windowWhen(closingSelector) {
    return function windowWhenOperatorFunction(source) {
        return source.lift(new WindowOperator(closingSelector));
    };
}
class WindowOperator {
    constructor(closingSelector) {
        this.closingSelector = closingSelector;
    }
    call(subscriber, source) {
        return source.subscribe(new WindowSubscriber(subscriber, this.closingSelector));
    }
}
class WindowSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_1__["OuterSubscriber"] {
    constructor(destination, closingSelector) {
        super(destination);
        this.destination = destination;
        this.closingSelector = closingSelector;
        this.openWindow();
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.openWindow(innerSub);
    }
    notifyError(error, innerSub) {
        this._error(error);
    }
    notifyComplete(innerSub) {
        this.openWindow(innerSub);
    }
    _next(value) {
        this.window.next(value);
    }
    _error(err) {
        this.window.error(err);
        this.destination.error(err);
        this.unsubscribeClosingNotification();
    }
    _complete() {
        this.window.complete();
        this.destination.complete();
        this.unsubscribeClosingNotification();
    }
    unsubscribeClosingNotification() {
        if (this.closingNotification) {
            this.closingNotification.unsubscribe();
        }
    }
    openWindow(innerSub = null) {
        if (innerSub) {
            this.remove(innerSub);
            innerSub.unsubscribe();
        }
        const prevWindow = this.window;
        if (prevWindow) {
            prevWindow.complete();
        }
        const window = this.window = new _Subject__WEBPACK_IMPORTED_MODULE_0__["Subject"]();
        this.destination.next(window);
        let closingNotifier;
        try {
            const { closingSelector } = this;
            closingNotifier = closingSelector();
        }
        catch (e) {
            this.destination.error(e);
            this.window.error(e);
            return;
        }
        this.add(this.closingNotification = Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_2__["subscribeToResult"])(this, closingNotifier));
    }
}
//# sourceMappingURL=windowWhen.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js ***!
  \*************************************************************************/
/*! exports provided: withLatestFrom */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withLatestFrom", function() { return withLatestFrom; });
/* harmony import */ var _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../OuterSubscriber */ "./node_modules/rxjs/_esm2015/internal/OuterSubscriber.js");
/* harmony import */ var _util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/subscribeToResult */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js");


function withLatestFrom(...args) {
    return (source) => {
        let project;
        if (typeof args[args.length - 1] === 'function') {
            project = args.pop();
        }
        const observables = args;
        return source.lift(new WithLatestFromOperator(observables, project));
    };
}
class WithLatestFromOperator {
    constructor(observables, project) {
        this.observables = observables;
        this.project = project;
    }
    call(subscriber, source) {
        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));
    }
}
class WithLatestFromSubscriber extends _OuterSubscriber__WEBPACK_IMPORTED_MODULE_0__["OuterSubscriber"] {
    constructor(destination, observables, project) {
        super(destination);
        this.observables = observables;
        this.project = project;
        this.toRespond = [];
        const len = observables.length;
        this.values = new Array(len);
        for (let i = 0; i < len; i++) {
            this.toRespond.push(i);
        }
        for (let i = 0; i < len; i++) {
            let observable = observables[i];
            this.add(Object(_util_subscribeToResult__WEBPACK_IMPORTED_MODULE_1__["subscribeToResult"])(this, observable, observable, i));
        }
    }
    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {
        this.values[outerIndex] = innerValue;
        const toRespond = this.toRespond;
        if (toRespond.length > 0) {
            const found = toRespond.indexOf(outerIndex);
            if (found !== -1) {
                toRespond.splice(found, 1);
            }
        }
    }
    notifyComplete() {
    }
    _next(value) {
        if (this.toRespond.length === 0) {
            const args = [value, ...this.values];
            if (this.project) {
                this._tryProject(args);
            }
            else {
                this.destination.next(args);
            }
        }
    }
    _tryProject(args) {
        let result;
        try {
            result = this.project.apply(this, args);
        }
        catch (err) {
            this.destination.error(err);
            return;
        }
        this.destination.next(result);
    }
}
//# sourceMappingURL=withLatestFrom.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/zip.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/zip.js ***!
  \**************************************************************/
/*! exports provided: zip */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return zip; });
/* harmony import */ var _observable_zip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/zip */ "./node_modules/rxjs/_esm2015/internal/observable/zip.js");

function zip(...observables) {
    return function zipOperatorFunction(source) {
        return source.lift.call(Object(_observable_zip__WEBPACK_IMPORTED_MODULE_0__["zip"])(source, ...observables));
    };
}
//# sourceMappingURL=zip.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/operators/zipAll.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/operators/zipAll.js ***!
  \*****************************************************************/
/*! exports provided: zipAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "zipAll", function() { return zipAll; });
/* harmony import */ var _observable_zip__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../observable/zip */ "./node_modules/rxjs/_esm2015/internal/observable/zip.js");

function zipAll(project) {
    return (source) => source.lift(new _observable_zip__WEBPACK_IMPORTED_MODULE_0__["ZipOperator"](project));
}
//# sourceMappingURL=zipAll.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js ***!
  \************************************************************************/
/*! exports provided: scheduleArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scheduleArray", function() { return scheduleArray; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");


function scheduleArray(input, scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        const sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
        let i = 0;
        sub.add(scheduler.schedule(function () {
            if (i === input.length) {
                subscriber.complete();
                return;
            }
            subscriber.next(input[i++]);
            if (!subscriber.closed) {
                sub.add(this.schedule());
            }
        }));
        return sub;
    });
}
//# sourceMappingURL=scheduleArray.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js":
/*!***************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js ***!
  \***************************************************************************/
/*! exports provided: scheduleIterable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scheduleIterable", function() { return scheduleIterable; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../symbol/iterator */ "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");



function scheduleIterable(input, scheduler) {
    if (!input) {
        throw new Error('Iterable cannot be null');
    }
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        const sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
        let iterator;
        sub.add(() => {
            if (iterator && typeof iterator.return === 'function') {
                iterator.return();
            }
        });
        sub.add(scheduler.schedule(() => {
            iterator = input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_2__["iterator"]]();
            sub.add(scheduler.schedule(function () {
                if (subscriber.closed) {
                    return;
                }
                let value;
                let done;
                try {
                    const result = iterator.next();
                    value = result.value;
                    done = result.done;
                }
                catch (err) {
                    subscriber.error(err);
                    return;
                }
                if (done) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(value);
                    this.schedule();
                }
            }));
        }));
        return sub;
    });
}
//# sourceMappingURL=scheduleIterable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js ***!
  \*****************************************************************************/
/*! exports provided: scheduleObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scheduleObservable", function() { return scheduleObservable; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../symbol/observable */ "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");



function scheduleObservable(input, scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        const sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
        sub.add(scheduler.schedule(() => {
            const observable = input[_symbol_observable__WEBPACK_IMPORTED_MODULE_2__["observable"]]();
            sub.add(observable.subscribe({
                next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },
                error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },
                complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },
            }));
        }));
        return sub;
    });
}
//# sourceMappingURL=scheduleObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js":
/*!**************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js ***!
  \**************************************************************************/
/*! exports provided: schedulePromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "schedulePromise", function() { return schedulePromise; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");


function schedulePromise(input, scheduler) {
    return new _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"](subscriber => {
        const sub = new _Subscription__WEBPACK_IMPORTED_MODULE_1__["Subscription"]();
        sub.add(scheduler.schedule(() => input.then(value => {
            sub.add(scheduler.schedule(() => {
                subscriber.next(value);
                sub.add(scheduler.schedule(() => subscriber.complete()));
            }));
        }, err => {
            sub.add(scheduler.schedule(() => subscriber.error(err)));
        })));
        return sub;
    });
}
//# sourceMappingURL=schedulePromise.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduled/scheduled.js ***!
  \********************************************************************/
/*! exports provided: scheduled */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scheduled", function() { return scheduled; });
/* harmony import */ var _scheduleObservable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./scheduleObservable */ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleObservable.js");
/* harmony import */ var _schedulePromise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./schedulePromise */ "./node_modules/rxjs/_esm2015/internal/scheduled/schedulePromise.js");
/* harmony import */ var _scheduleArray__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scheduleArray */ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleArray.js");
/* harmony import */ var _scheduleIterable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scheduleIterable */ "./node_modules/rxjs/_esm2015/internal/scheduled/scheduleIterable.js");
/* harmony import */ var _util_isInteropObservable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/isInteropObservable */ "./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js");
/* harmony import */ var _util_isPromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/isPromise */ "./node_modules/rxjs/_esm2015/internal/util/isPromise.js");
/* harmony import */ var _util_isArrayLike__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/isArrayLike */ "./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js");
/* harmony import */ var _util_isIterable__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../util/isIterable */ "./node_modules/rxjs/_esm2015/internal/util/isIterable.js");








function scheduled(input, scheduler) {
    if (input != null) {
        if (Object(_util_isInteropObservable__WEBPACK_IMPORTED_MODULE_4__["isInteropObservable"])(input)) {
            return Object(_scheduleObservable__WEBPACK_IMPORTED_MODULE_0__["scheduleObservable"])(input, scheduler);
        }
        else if (Object(_util_isPromise__WEBPACK_IMPORTED_MODULE_5__["isPromise"])(input)) {
            return Object(_schedulePromise__WEBPACK_IMPORTED_MODULE_1__["schedulePromise"])(input, scheduler);
        }
        else if (Object(_util_isArrayLike__WEBPACK_IMPORTED_MODULE_6__["isArrayLike"])(input)) {
            return Object(_scheduleArray__WEBPACK_IMPORTED_MODULE_2__["scheduleArray"])(input, scheduler);
        }
        else if (Object(_util_isIterable__WEBPACK_IMPORTED_MODULE_7__["isIterable"])(input) || typeof input === 'string') {
            return Object(_scheduleIterable__WEBPACK_IMPORTED_MODULE_3__["scheduleIterable"])(input, scheduler);
        }
    }
    throw new TypeError((input !== null && typeof input || input) + ' is not observable');
}
//# sourceMappingURL=scheduled.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/Action.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/Action.js ***!
  \*****************************************************************/
/*! exports provided: Action */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Action", function() { return Action; });
/* harmony import */ var _Subscription__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscription */ "./node_modules/rxjs/_esm2015/internal/Subscription.js");

class Action extends _Subscription__WEBPACK_IMPORTED_MODULE_0__["Subscription"] {
    constructor(scheduler, work) {
        super();
    }
    schedule(state, delay = 0) {
        return this;
    }
}
//# sourceMappingURL=Action.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js ***!
  \*******************************************************************************/
/*! exports provided: AnimationFrameAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationFrameAction", function() { return AnimationFrameAction; });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");

class AnimationFrameAction extends _AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"] {
    constructor(scheduler, work) {
        super(scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    requestAsyncId(scheduler, id, delay = 0) {
        if (delay !== null && delay > 0) {
            return super.requestAsyncId(scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(() => scheduler.flush(null)));
    }
    recycleAsyncId(scheduler, id, delay = 0) {
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return super.recycleAsyncId(scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            cancelAnimationFrame(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    }
}
//# sourceMappingURL=AnimationFrameAction.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js ***!
  \**********************************************************************************/
/*! exports provided: AnimationFrameScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AnimationFrameScheduler", function() { return AnimationFrameScheduler; });
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");

class AnimationFrameScheduler extends _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__["AsyncScheduler"] {
    flush(action) {
        this.active = true;
        this.scheduled = undefined;
        const { actions } = this;
        let error;
        let index = -1;
        let count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    }
}
//# sourceMappingURL=AnimationFrameScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js ***!
  \*********************************************************************/
/*! exports provided: AsapAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsapAction", function() { return AsapAction; });
/* harmony import */ var _util_Immediate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/Immediate */ "./node_modules/rxjs/_esm2015/internal/util/Immediate.js");
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");


class AsapAction extends _AsyncAction__WEBPACK_IMPORTED_MODULE_1__["AsyncAction"] {
    constructor(scheduler, work) {
        super(scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    requestAsyncId(scheduler, id, delay = 0) {
        if (delay !== null && delay > 0) {
            return super.requestAsyncId(scheduler, id, delay);
        }
        scheduler.actions.push(this);
        return scheduler.scheduled || (scheduler.scheduled = _util_Immediate__WEBPACK_IMPORTED_MODULE_0__["Immediate"].setImmediate(scheduler.flush.bind(scheduler, null)));
    }
    recycleAsyncId(scheduler, id, delay = 0) {
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return super.recycleAsyncId(scheduler, id, delay);
        }
        if (scheduler.actions.length === 0) {
            _util_Immediate__WEBPACK_IMPORTED_MODULE_0__["Immediate"].clearImmediate(id);
            scheduler.scheduled = undefined;
        }
        return undefined;
    }
}
//# sourceMappingURL=AsapAction.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js ***!
  \************************************************************************/
/*! exports provided: AsapScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsapScheduler", function() { return AsapScheduler; });
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");

class AsapScheduler extends _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__["AsyncScheduler"] {
    flush(action) {
        this.active = true;
        this.scheduled = undefined;
        const { actions } = this;
        let error;
        let index = -1;
        let count = actions.length;
        action = action || actions.shift();
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (++index < count && (action = actions.shift()));
        this.active = false;
        if (error) {
            while (++index < count && (action = actions.shift())) {
                action.unsubscribe();
            }
            throw error;
        }
    }
}
//# sourceMappingURL=AsapScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js ***!
  \**********************************************************************/
/*! exports provided: AsyncAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncAction", function() { return AsyncAction; });
/* harmony import */ var _Action__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Action */ "./node_modules/rxjs/_esm2015/internal/scheduler/Action.js");

class AsyncAction extends _Action__WEBPACK_IMPORTED_MODULE_0__["Action"] {
    constructor(scheduler, work) {
        super(scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.pending = false;
    }
    schedule(state, delay = 0) {
        if (this.closed) {
            return this;
        }
        this.state = state;
        const id = this.id;
        const scheduler = this.scheduler;
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, delay);
        }
        this.pending = true;
        this.delay = delay;
        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
        return this;
    }
    requestAsyncId(scheduler, id, delay = 0) {
        return setInterval(scheduler.flush.bind(scheduler, this), delay);
    }
    recycleAsyncId(scheduler, id, delay = 0) {
        if (delay !== null && this.delay === delay && this.pending === false) {
            return id;
        }
        clearInterval(id);
        return undefined;
    }
    execute(state, delay) {
        if (this.closed) {
            return new Error('executing a cancelled action');
        }
        this.pending = false;
        const error = this._execute(state, delay);
        if (error) {
            return error;
        }
        else if (this.pending === false && this.id != null) {
            this.id = this.recycleAsyncId(this.scheduler, this.id, null);
        }
    }
    _execute(state, delay) {
        let errored = false;
        let errorValue = undefined;
        try {
            this.work(state);
        }
        catch (e) {
            errored = true;
            errorValue = !!e && e || new Error(e);
        }
        if (errored) {
            this.unsubscribe();
            return errorValue;
        }
    }
    _unsubscribe() {
        const id = this.id;
        const scheduler = this.scheduler;
        const actions = scheduler.actions;
        const index = actions.indexOf(this);
        this.work = null;
        this.state = null;
        this.pending = false;
        this.scheduler = null;
        if (index !== -1) {
            actions.splice(index, 1);
        }
        if (id != null) {
            this.id = this.recycleAsyncId(scheduler, id, null);
        }
        this.delay = null;
    }
}
//# sourceMappingURL=AsyncAction.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js ***!
  \*************************************************************************/
/*! exports provided: AsyncScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AsyncScheduler", function() { return AsyncScheduler; });
/* harmony import */ var _Scheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Scheduler */ "./node_modules/rxjs/_esm2015/internal/Scheduler.js");

class AsyncScheduler extends _Scheduler__WEBPACK_IMPORTED_MODULE_0__["Scheduler"] {
    constructor(SchedulerAction, now = _Scheduler__WEBPACK_IMPORTED_MODULE_0__["Scheduler"].now) {
        super(SchedulerAction, () => {
            if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
                return AsyncScheduler.delegate.now();
            }
            else {
                return now();
            }
        });
        this.actions = [];
        this.active = false;
        this.scheduled = undefined;
    }
    schedule(work, delay = 0, state) {
        if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {
            return AsyncScheduler.delegate.schedule(work, delay, state);
        }
        else {
            return super.schedule(work, delay, state);
        }
    }
    flush(action) {
        const { actions } = this;
        if (this.active) {
            actions.push(action);
            return;
        }
        let error;
        this.active = true;
        do {
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        } while (action = actions.shift());
        this.active = false;
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    }
}
//# sourceMappingURL=AsyncScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js ***!
  \**********************************************************************/
/*! exports provided: QueueAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueueAction", function() { return QueueAction; });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");

class QueueAction extends _AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"] {
    constructor(scheduler, work) {
        super(scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
    }
    schedule(state, delay = 0) {
        if (delay > 0) {
            return super.schedule(state, delay);
        }
        this.delay = delay;
        this.state = state;
        this.scheduler.flush(this);
        return this;
    }
    execute(state, delay) {
        return (delay > 0 || this.closed) ?
            super.execute(state, delay) :
            this._execute(state, delay);
    }
    requestAsyncId(scheduler, id, delay = 0) {
        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {
            return super.requestAsyncId(scheduler, id, delay);
        }
        return scheduler.flush(this);
    }
}
//# sourceMappingURL=QueueAction.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js ***!
  \*************************************************************************/
/*! exports provided: QueueScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "QueueScheduler", function() { return QueueScheduler; });
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");

class QueueScheduler extends _AsyncScheduler__WEBPACK_IMPORTED_MODULE_0__["AsyncScheduler"] {
}
//# sourceMappingURL=QueueScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/VirtualTimeScheduler.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/VirtualTimeScheduler.js ***!
  \*******************************************************************************/
/*! exports provided: VirtualTimeScheduler, VirtualAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualTimeScheduler", function() { return VirtualTimeScheduler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VirtualAction", function() { return VirtualAction; });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");


class VirtualTimeScheduler extends _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"] {
    constructor(SchedulerAction = VirtualAction, maxFrames = Number.POSITIVE_INFINITY) {
        super(SchedulerAction, () => this.frame);
        this.maxFrames = maxFrames;
        this.frame = 0;
        this.index = -1;
    }
    flush() {
        const { actions, maxFrames } = this;
        let error, action;
        while ((action = actions[0]) && action.delay <= maxFrames) {
            actions.shift();
            this.frame = action.delay;
            if (error = action.execute(action.state, action.delay)) {
                break;
            }
        }
        if (error) {
            while (action = actions.shift()) {
                action.unsubscribe();
            }
            throw error;
        }
    }
}
VirtualTimeScheduler.frameTimeFactor = 10;
class VirtualAction extends _AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"] {
    constructor(scheduler, work, index = scheduler.index += 1) {
        super(scheduler, work);
        this.scheduler = scheduler;
        this.work = work;
        this.index = index;
        this.active = true;
        this.index = scheduler.index = index;
    }
    schedule(state, delay = 0) {
        if (!this.id) {
            return super.schedule(state, delay);
        }
        this.active = false;
        const action = new VirtualAction(this.scheduler, this.work);
        this.add(action);
        return action.schedule(state, delay);
    }
    requestAsyncId(scheduler, id, delay = 0) {
        this.delay = scheduler.frame + delay;
        const { actions } = scheduler;
        actions.push(this);
        actions.sort(VirtualAction.sortActions);
        return true;
    }
    recycleAsyncId(scheduler, id, delay = 0) {
        return undefined;
    }
    _execute(state, delay) {
        if (this.active === true) {
            return super._execute(state, delay);
        }
    }
    static sortActions(a, b) {
        if (a.delay === b.delay) {
            if (a.index === b.index) {
                return 0;
            }
            else if (a.index > b.index) {
                return 1;
            }
            else {
                return -1;
            }
        }
        else if (a.delay > b.delay) {
            return 1;
        }
        else {
            return -1;
        }
    }
}
//# sourceMappingURL=VirtualTimeScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/animationFrame.js ***!
  \*************************************************************************/
/*! exports provided: animationFrame */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "animationFrame", function() { return animationFrame; });
/* harmony import */ var _AnimationFrameAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AnimationFrameAction */ "./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameAction.js");
/* harmony import */ var _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AnimationFrameScheduler */ "./node_modules/rxjs/_esm2015/internal/scheduler/AnimationFrameScheduler.js");


const animationFrame = new _AnimationFrameScheduler__WEBPACK_IMPORTED_MODULE_1__["AnimationFrameScheduler"](_AnimationFrameAction__WEBPACK_IMPORTED_MODULE_0__["AnimationFrameAction"]);
//# sourceMappingURL=animationFrame.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/asap.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/asap.js ***!
  \***************************************************************/
/*! exports provided: asap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "asap", function() { return asap; });
/* harmony import */ var _AsapAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsapAction */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsapAction.js");
/* harmony import */ var _AsapScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsapScheduler */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsapScheduler.js");


const asap = new _AsapScheduler__WEBPACK_IMPORTED_MODULE_1__["AsapScheduler"](_AsapAction__WEBPACK_IMPORTED_MODULE_0__["AsapAction"]);
//# sourceMappingURL=asap.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/async.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/async.js ***!
  \****************************************************************/
/*! exports provided: async */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "async", function() { return async; });
/* harmony import */ var _AsyncAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AsyncAction */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncAction.js");
/* harmony import */ var _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AsyncScheduler */ "./node_modules/rxjs/_esm2015/internal/scheduler/AsyncScheduler.js");


const async = new _AsyncScheduler__WEBPACK_IMPORTED_MODULE_1__["AsyncScheduler"](_AsyncAction__WEBPACK_IMPORTED_MODULE_0__["AsyncAction"]);
//# sourceMappingURL=async.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/scheduler/queue.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/scheduler/queue.js ***!
  \****************************************************************/
/*! exports provided: queue */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "queue", function() { return queue; });
/* harmony import */ var _QueueAction__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./QueueAction */ "./node_modules/rxjs/_esm2015/internal/scheduler/QueueAction.js");
/* harmony import */ var _QueueScheduler__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QueueScheduler */ "./node_modules/rxjs/_esm2015/internal/scheduler/QueueScheduler.js");


const queue = new _QueueScheduler__WEBPACK_IMPORTED_MODULE_1__["QueueScheduler"](_QueueAction__WEBPACK_IMPORTED_MODULE_0__["QueueAction"]);
//# sourceMappingURL=queue.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/symbol/iterator.js ***!
  \****************************************************************/
/*! exports provided: getSymbolIterator, iterator, $$iterator */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getSymbolIterator", function() { return getSymbolIterator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iterator", function() { return iterator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$$iterator", function() { return $$iterator; });
function getSymbolIterator() {
    if (typeof Symbol !== 'function' || !Symbol.iterator) {
        return '@@iterator';
    }
    return Symbol.iterator;
}
const iterator = getSymbolIterator();
const $$iterator = iterator;
//# sourceMappingURL=iterator.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/symbol/observable.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/symbol/observable.js ***!
  \******************************************************************/
/*! exports provided: observable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "observable", function() { return observable; });
const observable = (() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();
//# sourceMappingURL=observable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js ***!
  \********************************************************************/
/*! exports provided: rxSubscriber, $$rxSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rxSubscriber", function() { return rxSubscriber; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "$$rxSubscriber", function() { return $$rxSubscriber; });
const rxSubscriber = (() => typeof Symbol === 'function'
    ? Symbol('rxSubscriber')
    : '@@rxSubscriber_' + Math.random())();
const $$rxSubscriber = rxSubscriber;
//# sourceMappingURL=rxSubscriber.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/ArgumentOutOfRangeError.js ***!
  \*****************************************************************************/
/*! exports provided: ArgumentOutOfRangeError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArgumentOutOfRangeError", function() { return ArgumentOutOfRangeError; });
const ArgumentOutOfRangeErrorImpl = (() => {
    function ArgumentOutOfRangeErrorImpl() {
        Error.call(this);
        this.message = 'argument out of range';
        this.name = 'ArgumentOutOfRangeError';
        return this;
    }
    ArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);
    return ArgumentOutOfRangeErrorImpl;
})();
const ArgumentOutOfRangeError = ArgumentOutOfRangeErrorImpl;
//# sourceMappingURL=ArgumentOutOfRangeError.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/EmptyError.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/EmptyError.js ***!
  \****************************************************************/
/*! exports provided: EmptyError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EmptyError", function() { return EmptyError; });
const EmptyErrorImpl = (() => {
    function EmptyErrorImpl() {
        Error.call(this);
        this.message = 'no elements in sequence';
        this.name = 'EmptyError';
        return this;
    }
    EmptyErrorImpl.prototype = Object.create(Error.prototype);
    return EmptyErrorImpl;
})();
const EmptyError = EmptyErrorImpl;
//# sourceMappingURL=EmptyError.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/Immediate.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/Immediate.js ***!
  \***************************************************************/
/*! exports provided: Immediate, TestTools */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Immediate", function() { return Immediate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TestTools", function() { return TestTools; });
let nextHandle = 1;
const RESOLVED = (() => Promise.resolve())();
const activeHandles = {};
function findAndClearHandle(handle) {
    if (handle in activeHandles) {
        delete activeHandles[handle];
        return true;
    }
    return false;
}
const Immediate = {
    setImmediate(cb) {
        const handle = nextHandle++;
        activeHandles[handle] = true;
        RESOLVED.then(() => findAndClearHandle(handle) && cb());
        return handle;
    },
    clearImmediate(handle) {
        findAndClearHandle(handle);
    },
};
const TestTools = {
    pending() {
        return Object.keys(activeHandles).length;
    }
};
//# sourceMappingURL=Immediate.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/ObjectUnsubscribedError.js ***!
  \*****************************************************************************/
/*! exports provided: ObjectUnsubscribedError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ObjectUnsubscribedError", function() { return ObjectUnsubscribedError; });
const ObjectUnsubscribedErrorImpl = (() => {
    function ObjectUnsubscribedErrorImpl() {
        Error.call(this);
        this.message = 'object unsubscribed';
        this.name = 'ObjectUnsubscribedError';
        return this;
    }
    ObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);
    return ObjectUnsubscribedErrorImpl;
})();
const ObjectUnsubscribedError = ObjectUnsubscribedErrorImpl;
//# sourceMappingURL=ObjectUnsubscribedError.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/TimeoutError.js ***!
  \******************************************************************/
/*! exports provided: TimeoutError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TimeoutError", function() { return TimeoutError; });
const TimeoutErrorImpl = (() => {
    function TimeoutErrorImpl() {
        Error.call(this);
        this.message = 'Timeout has occurred';
        this.name = 'TimeoutError';
        return this;
    }
    TimeoutErrorImpl.prototype = Object.create(Error.prototype);
    return TimeoutErrorImpl;
})();
const TimeoutError = TimeoutErrorImpl;
//# sourceMappingURL=TimeoutError.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/UnsubscriptionError.js ***!
  \*************************************************************************/
/*! exports provided: UnsubscriptionError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnsubscriptionError", function() { return UnsubscriptionError; });
const UnsubscriptionErrorImpl = (() => {
    function UnsubscriptionErrorImpl(errors) {
        Error.call(this);
        this.message = errors ?
            `${errors.length} errors occurred during unsubscription:
${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\n  ')}` : '';
        this.name = 'UnsubscriptionError';
        this.errors = errors;
        return this;
    }
    UnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);
    return UnsubscriptionErrorImpl;
})();
const UnsubscriptionError = UnsubscriptionErrorImpl;
//# sourceMappingURL=UnsubscriptionError.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/canReportError.js":
/*!********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/canReportError.js ***!
  \********************************************************************/
/*! exports provided: canReportError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "canReportError", function() { return canReportError; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");

function canReportError(observer) {
    while (observer) {
        const { closed, destination, isStopped } = observer;
        if (closed || isStopped) {
            return false;
        }
        else if (destination && destination instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]) {
            observer = destination;
        }
        else {
            observer = null;
        }
    }
    return true;
}
//# sourceMappingURL=canReportError.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/hostReportError.js":
/*!*********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/hostReportError.js ***!
  \*********************************************************************/
/*! exports provided: hostReportError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hostReportError", function() { return hostReportError; });
function hostReportError(err) {
    setTimeout(() => { throw err; }, 0);
}
//# sourceMappingURL=hostReportError.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/identity.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/identity.js ***!
  \**************************************************************/
/*! exports provided: identity */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "identity", function() { return identity; });
function identity(x) {
    return x;
}
//# sourceMappingURL=identity.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isArray.js":
/*!*************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isArray.js ***!
  \*************************************************************/
/*! exports provided: isArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArray", function() { return isArray; });
const isArray = (() => Array.isArray || ((x) => x && typeof x.length === 'number'))();
//# sourceMappingURL=isArray.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js ***!
  \*****************************************************************/
/*! exports provided: isArrayLike */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isArrayLike", function() { return isArrayLike; });
const isArrayLike = ((x) => x && typeof x.length === 'number' && typeof x !== 'function');
//# sourceMappingURL=isArrayLike.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isDate.js":
/*!************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isDate.js ***!
  \************************************************************/
/*! exports provided: isDate */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDate", function() { return isDate; });
function isDate(value) {
    return value instanceof Date && !isNaN(+value);
}
//# sourceMappingURL=isDate.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isFunction.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isFunction.js ***!
  \****************************************************************/
/*! exports provided: isFunction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isFunction", function() { return isFunction; });
function isFunction(x) {
    return typeof x === 'function';
}
//# sourceMappingURL=isFunction.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isInteropObservable.js ***!
  \*************************************************************************/
/*! exports provided: isInteropObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isInteropObservable", function() { return isInteropObservable; });
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/observable */ "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");

function isInteropObservable(input) {
    return input && typeof input[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__["observable"]] === 'function';
}
//# sourceMappingURL=isInteropObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isIterable.js":
/*!****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isIterable.js ***!
  \****************************************************************/
/*! exports provided: isIterable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isIterable", function() { return isIterable; });
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/iterator */ "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");

function isIterable(input) {
    return input && typeof input[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__["iterator"]] === 'function';
}
//# sourceMappingURL=isIterable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isNumeric.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isNumeric.js ***!
  \***************************************************************/
/*! exports provided: isNumeric */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumeric", function() { return isNumeric; });
/* harmony import */ var _isArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isArray */ "./node_modules/rxjs/_esm2015/internal/util/isArray.js");

function isNumeric(val) {
    return !Object(_isArray__WEBPACK_IMPORTED_MODULE_0__["isArray"])(val) && (val - parseFloat(val) + 1) >= 0;
}
//# sourceMappingURL=isNumeric.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isObject.js":
/*!**************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isObject.js ***!
  \**************************************************************/
/*! exports provided: isObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObject", function() { return isObject; });
function isObject(x) {
    return x !== null && typeof x === 'object';
}
//# sourceMappingURL=isObject.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isObservable.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isObservable.js ***!
  \******************************************************************/
/*! exports provided: isObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isObservable", function() { return isObservable; });
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");

function isObservable(obj) {
    return !!obj && (obj instanceof _Observable__WEBPACK_IMPORTED_MODULE_0__["Observable"] || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));
}
//# sourceMappingURL=isObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isPromise.js":
/*!***************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isPromise.js ***!
  \***************************************************************/
/*! exports provided: isPromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isPromise", function() { return isPromise; });
function isPromise(value) {
    return !!value && typeof value.subscribe !== 'function' && typeof value.then === 'function';
}
//# sourceMappingURL=isPromise.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/isScheduler.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/isScheduler.js ***!
  \*****************************************************************/
/*! exports provided: isScheduler */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isScheduler", function() { return isScheduler; });
function isScheduler(value) {
    return value && typeof value.schedule === 'function';
}
//# sourceMappingURL=isScheduler.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/noop.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/noop.js ***!
  \**********************************************************/
/*! exports provided: noop */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "noop", function() { return noop; });
function noop() { }
//# sourceMappingURL=noop.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/not.js":
/*!*********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/not.js ***!
  \*********************************************************/
/*! exports provided: not */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "not", function() { return not; });
function not(pred, thisArg) {
    function notPred() {
        return !(notPred.pred.apply(notPred.thisArg, arguments));
    }
    notPred.pred = pred;
    notPred.thisArg = thisArg;
    return notPred;
}
//# sourceMappingURL=not.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/pipe.js":
/*!**********************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/pipe.js ***!
  \**********************************************************/
/*! exports provided: pipe, pipeFromArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipe", function() { return pipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pipeFromArray", function() { return pipeFromArray; });
/* harmony import */ var _noop__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./noop */ "./node_modules/rxjs/_esm2015/internal/util/noop.js");

function pipe(...fns) {
    return pipeFromArray(fns);
}
function pipeFromArray(fns) {
    if (!fns) {
        return _noop__WEBPACK_IMPORTED_MODULE_0__["noop"];
    }
    if (fns.length === 1) {
        return fns[0];
    }
    return function piped(input) {
        return fns.reduce((prev, fn) => fn(prev), input);
    };
}
//# sourceMappingURL=pipe.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js":
/*!*****************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js ***!
  \*****************************************************************/
/*! exports provided: subscribeTo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeTo", function() { return subscribeTo; });
/* harmony import */ var _subscribeToArray__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./subscribeToArray */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js");
/* harmony import */ var _subscribeToPromise__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subscribeToPromise */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js");
/* harmony import */ var _subscribeToIterable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./subscribeToIterable */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js");
/* harmony import */ var _subscribeToObservable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./subscribeToObservable */ "./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js");
/* harmony import */ var _isArrayLike__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./isArrayLike */ "./node_modules/rxjs/_esm2015/internal/util/isArrayLike.js");
/* harmony import */ var _isPromise__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./isPromise */ "./node_modules/rxjs/_esm2015/internal/util/isPromise.js");
/* harmony import */ var _isObject__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./isObject */ "./node_modules/rxjs/_esm2015/internal/util/isObject.js");
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../symbol/iterator */ "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../symbol/observable */ "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");









const subscribeTo = (result) => {
    if (!!result && typeof result[_symbol_observable__WEBPACK_IMPORTED_MODULE_8__["observable"]] === 'function') {
        return Object(_subscribeToObservable__WEBPACK_IMPORTED_MODULE_3__["subscribeToObservable"])(result);
    }
    else if (Object(_isArrayLike__WEBPACK_IMPORTED_MODULE_4__["isArrayLike"])(result)) {
        return Object(_subscribeToArray__WEBPACK_IMPORTED_MODULE_0__["subscribeToArray"])(result);
    }
    else if (Object(_isPromise__WEBPACK_IMPORTED_MODULE_5__["isPromise"])(result)) {
        return Object(_subscribeToPromise__WEBPACK_IMPORTED_MODULE_1__["subscribeToPromise"])(result);
    }
    else if (!!result && typeof result[_symbol_iterator__WEBPACK_IMPORTED_MODULE_7__["iterator"]] === 'function') {
        return Object(_subscribeToIterable__WEBPACK_IMPORTED_MODULE_2__["subscribeToIterable"])(result);
    }
    else {
        const value = Object(_isObject__WEBPACK_IMPORTED_MODULE_6__["isObject"])(result) ? 'an invalid object' : `'${result}'`;
        const msg = `You provided ${value} where a stream was expected.`
            + ' You can provide an Observable, Promise, Array, or Iterable.';
        throw new TypeError(msg);
    }
};
//# sourceMappingURL=subscribeTo.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js":
/*!**********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToArray.js ***!
  \**********************************************************************/
/*! exports provided: subscribeToArray */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToArray", function() { return subscribeToArray; });
const subscribeToArray = (array) => (subscriber) => {
    for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {
        subscriber.next(array[i]);
    }
    subscriber.complete();
};
//# sourceMappingURL=subscribeToArray.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js":
/*!*************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToIterable.js ***!
  \*************************************************************************/
/*! exports provided: subscribeToIterable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToIterable", function() { return subscribeToIterable; });
/* harmony import */ var _symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/iterator */ "./node_modules/rxjs/_esm2015/internal/symbol/iterator.js");

const subscribeToIterable = (iterable) => (subscriber) => {
    const iterator = iterable[_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__["iterator"]]();
    do {
        const item = iterator.next();
        if (item.done) {
            subscriber.complete();
            break;
        }
        subscriber.next(item.value);
        if (subscriber.closed) {
            break;
        }
    } while (true);
    if (typeof iterator.return === 'function') {
        subscriber.add(() => {
            if (iterator.return) {
                iterator.return();
            }
        });
    }
    return subscriber;
};
//# sourceMappingURL=subscribeToIterable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js":
/*!***************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToObservable.js ***!
  \***************************************************************************/
/*! exports provided: subscribeToObservable */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToObservable", function() { return subscribeToObservable; });
/* harmony import */ var _symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../symbol/observable */ "./node_modules/rxjs/_esm2015/internal/symbol/observable.js");

const subscribeToObservable = (obj) => (subscriber) => {
    const obs = obj[_symbol_observable__WEBPACK_IMPORTED_MODULE_0__["observable"]]();
    if (typeof obs.subscribe !== 'function') {
        throw new TypeError('Provided object does not correctly implement Symbol.observable');
    }
    else {
        return obs.subscribe(subscriber);
    }
};
//# sourceMappingURL=subscribeToObservable.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js":
/*!************************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToPromise.js ***!
  \************************************************************************/
/*! exports provided: subscribeToPromise */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToPromise", function() { return subscribeToPromise; });
/* harmony import */ var _hostReportError__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./hostReportError */ "./node_modules/rxjs/_esm2015/internal/util/hostReportError.js");

const subscribeToPromise = (promise) => (subscriber) => {
    promise.then((value) => {
        if (!subscriber.closed) {
            subscriber.next(value);
            subscriber.complete();
        }
    }, (err) => subscriber.error(err))
        .then(null, _hostReportError__WEBPACK_IMPORTED_MODULE_0__["hostReportError"]);
    return subscriber;
};
//# sourceMappingURL=subscribeToPromise.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js":
/*!***********************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/subscribeToResult.js ***!
  \***********************************************************************/
/*! exports provided: subscribeToResult */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscribeToResult", function() { return subscribeToResult; });
/* harmony import */ var _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../InnerSubscriber */ "./node_modules/rxjs/_esm2015/internal/InnerSubscriber.js");
/* harmony import */ var _subscribeTo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./subscribeTo */ "./node_modules/rxjs/_esm2015/internal/util/subscribeTo.js");
/* harmony import */ var _Observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observable */ "./node_modules/rxjs/_esm2015/internal/Observable.js");



function subscribeToResult(outerSubscriber, result, outerValue, outerIndex, innerSubscriber = new _InnerSubscriber__WEBPACK_IMPORTED_MODULE_0__["InnerSubscriber"](outerSubscriber, outerValue, outerIndex)) {
    if (innerSubscriber.closed) {
        return undefined;
    }
    if (result instanceof _Observable__WEBPACK_IMPORTED_MODULE_2__["Observable"]) {
        return result.subscribe(innerSubscriber);
    }
    return Object(_subscribeTo__WEBPACK_IMPORTED_MODULE_1__["subscribeTo"])(result)(innerSubscriber);
}
//# sourceMappingURL=subscribeToResult.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js":
/*!******************************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/internal/util/toSubscriber.js ***!
  \******************************************************************/
/*! exports provided: toSubscriber */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toSubscriber", function() { return toSubscriber; });
/* harmony import */ var _Subscriber__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Subscriber */ "./node_modules/rxjs/_esm2015/internal/Subscriber.js");
/* harmony import */ var _symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../symbol/rxSubscriber */ "./node_modules/rxjs/_esm2015/internal/symbol/rxSubscriber.js");
/* harmony import */ var _Observer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Observer */ "./node_modules/rxjs/_esm2015/internal/Observer.js");



function toSubscriber(nextOrObserver, error, complete) {
    if (nextOrObserver) {
        if (nextOrObserver instanceof _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"]) {
            return nextOrObserver;
        }
        if (nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__["rxSubscriber"]]) {
            return nextOrObserver[_symbol_rxSubscriber__WEBPACK_IMPORTED_MODULE_1__["rxSubscriber"]]();
        }
    }
    if (!nextOrObserver && !error && !complete) {
        return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](_Observer__WEBPACK_IMPORTED_MODULE_2__["empty"]);
    }
    return new _Subscriber__WEBPACK_IMPORTED_MODULE_0__["Subscriber"](nextOrObserver, error, complete);
}
//# sourceMappingURL=toSubscriber.js.map

/***/ }),

/***/ "./node_modules/rxjs/_esm2015/operators/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/rxjs/_esm2015/operators/index.js ***!
  \*******************************************************/
/*! exports provided: audit, auditTime, buffer, bufferCount, bufferTime, bufferToggle, bufferWhen, catchError, combineAll, combineLatest, concat, concatAll, concatMap, concatMapTo, count, debounce, debounceTime, defaultIfEmpty, delay, delayWhen, dematerialize, distinct, distinctUntilChanged, distinctUntilKeyChanged, elementAt, endWith, every, exhaust, exhaustMap, expand, filter, finalize, find, findIndex, first, groupBy, ignoreElements, isEmpty, last, map, mapTo, materialize, max, merge, mergeAll, mergeMap, flatMap, mergeMapTo, mergeScan, min, multicast, observeOn, onErrorResumeNext, pairwise, partition, pluck, publish, publishBehavior, publishLast, publishReplay, race, reduce, repeat, repeatWhen, retry, retryWhen, refCount, sample, sampleTime, scan, sequenceEqual, share, shareReplay, single, skip, skipLast, skipUntil, skipWhile, startWith, subscribeOn, switchAll, switchMap, switchMapTo, take, takeLast, takeUntil, takeWhile, tap, throttle, throttleTime, throwIfEmpty, timeInterval, timeout, timeoutWith, timestamp, toArray, window, windowCount, windowTime, windowToggle, windowWhen, withLatestFrom, zip, zipAll */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _internal_operators_audit__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../internal/operators/audit */ "./node_modules/rxjs/_esm2015/internal/operators/audit.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "audit", function() { return _internal_operators_audit__WEBPACK_IMPORTED_MODULE_0__["audit"]; });

/* harmony import */ var _internal_operators_auditTime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../internal/operators/auditTime */ "./node_modules/rxjs/_esm2015/internal/operators/auditTime.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "auditTime", function() { return _internal_operators_auditTime__WEBPACK_IMPORTED_MODULE_1__["auditTime"]; });

/* harmony import */ var _internal_operators_buffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../internal/operators/buffer */ "./node_modules/rxjs/_esm2015/internal/operators/buffer.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "buffer", function() { return _internal_operators_buffer__WEBPACK_IMPORTED_MODULE_2__["buffer"]; });

/* harmony import */ var _internal_operators_bufferCount__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../internal/operators/bufferCount */ "./node_modules/rxjs/_esm2015/internal/operators/bufferCount.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bufferCount", function() { return _internal_operators_bufferCount__WEBPACK_IMPORTED_MODULE_3__["bufferCount"]; });

/* harmony import */ var _internal_operators_bufferTime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../internal/operators/bufferTime */ "./node_modules/rxjs/_esm2015/internal/operators/bufferTime.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bufferTime", function() { return _internal_operators_bufferTime__WEBPACK_IMPORTED_MODULE_4__["bufferTime"]; });

/* harmony import */ var _internal_operators_bufferToggle__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../internal/operators/bufferToggle */ "./node_modules/rxjs/_esm2015/internal/operators/bufferToggle.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bufferToggle", function() { return _internal_operators_bufferToggle__WEBPACK_IMPORTED_MODULE_5__["bufferToggle"]; });

/* harmony import */ var _internal_operators_bufferWhen__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../internal/operators/bufferWhen */ "./node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "bufferWhen", function() { return _internal_operators_bufferWhen__WEBPACK_IMPORTED_MODULE_6__["bufferWhen"]; });

/* harmony import */ var _internal_operators_catchError__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../internal/operators/catchError */ "./node_modules/rxjs/_esm2015/internal/operators/catchError.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "catchError", function() { return _internal_operators_catchError__WEBPACK_IMPORTED_MODULE_7__["catchError"]; });

/* harmony import */ var _internal_operators_combineAll__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../internal/operators/combineAll */ "./node_modules/rxjs/_esm2015/internal/operators/combineAll.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "combineAll", function() { return _internal_operators_combineAll__WEBPACK_IMPORTED_MODULE_8__["combineAll"]; });

/* harmony import */ var _internal_operators_combineLatest__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../internal/operators/combineLatest */ "./node_modules/rxjs/_esm2015/internal/operators/combineLatest.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "combineLatest", function() { return _internal_operators_combineLatest__WEBPACK_IMPORTED_MODULE_9__["combineLatest"]; });

/* harmony import */ var _internal_operators_concat__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../internal/operators/concat */ "./node_modules/rxjs/_esm2015/internal/operators/concat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concat", function() { return _internal_operators_concat__WEBPACK_IMPORTED_MODULE_10__["concat"]; });

/* harmony import */ var _internal_operators_concatAll__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../internal/operators/concatAll */ "./node_modules/rxjs/_esm2015/internal/operators/concatAll.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concatAll", function() { return _internal_operators_concatAll__WEBPACK_IMPORTED_MODULE_11__["concatAll"]; });

/* harmony import */ var _internal_operators_concatMap__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../internal/operators/concatMap */ "./node_modules/rxjs/_esm2015/internal/operators/concatMap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concatMap", function() { return _internal_operators_concatMap__WEBPACK_IMPORTED_MODULE_12__["concatMap"]; });

/* harmony import */ var _internal_operators_concatMapTo__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../internal/operators/concatMapTo */ "./node_modules/rxjs/_esm2015/internal/operators/concatMapTo.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "concatMapTo", function() { return _internal_operators_concatMapTo__WEBPACK_IMPORTED_MODULE_13__["concatMapTo"]; });

/* harmony import */ var _internal_operators_count__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../internal/operators/count */ "./node_modules/rxjs/_esm2015/internal/operators/count.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "count", function() { return _internal_operators_count__WEBPACK_IMPORTED_MODULE_14__["count"]; });

/* harmony import */ var _internal_operators_debounce__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../internal/operators/debounce */ "./node_modules/rxjs/_esm2015/internal/operators/debounce.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "debounce", function() { return _internal_operators_debounce__WEBPACK_IMPORTED_MODULE_15__["debounce"]; });

/* harmony import */ var _internal_operators_debounceTime__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ../internal/operators/debounceTime */ "./node_modules/rxjs/_esm2015/internal/operators/debounceTime.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "debounceTime", function() { return _internal_operators_debounceTime__WEBPACK_IMPORTED_MODULE_16__["debounceTime"]; });

/* harmony import */ var _internal_operators_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../internal/operators/defaultIfEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/defaultIfEmpty.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "defaultIfEmpty", function() { return _internal_operators_defaultIfEmpty__WEBPACK_IMPORTED_MODULE_17__["defaultIfEmpty"]; });

/* harmony import */ var _internal_operators_delay__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../internal/operators/delay */ "./node_modules/rxjs/_esm2015/internal/operators/delay.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "delay", function() { return _internal_operators_delay__WEBPACK_IMPORTED_MODULE_18__["delay"]; });

/* harmony import */ var _internal_operators_delayWhen__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ../internal/operators/delayWhen */ "./node_modules/rxjs/_esm2015/internal/operators/delayWhen.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "delayWhen", function() { return _internal_operators_delayWhen__WEBPACK_IMPORTED_MODULE_19__["delayWhen"]; });

/* harmony import */ var _internal_operators_dematerialize__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ../internal/operators/dematerialize */ "./node_modules/rxjs/_esm2015/internal/operators/dematerialize.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "dematerialize", function() { return _internal_operators_dematerialize__WEBPACK_IMPORTED_MODULE_20__["dematerialize"]; });

/* harmony import */ var _internal_operators_distinct__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ../internal/operators/distinct */ "./node_modules/rxjs/_esm2015/internal/operators/distinct.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "distinct", function() { return _internal_operators_distinct__WEBPACK_IMPORTED_MODULE_21__["distinct"]; });

/* harmony import */ var _internal_operators_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ../internal/operators/distinctUntilChanged */ "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "distinctUntilChanged", function() { return _internal_operators_distinctUntilChanged__WEBPACK_IMPORTED_MODULE_22__["distinctUntilChanged"]; });

/* harmony import */ var _internal_operators_distinctUntilKeyChanged__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ../internal/operators/distinctUntilKeyChanged */ "./node_modules/rxjs/_esm2015/internal/operators/distinctUntilKeyChanged.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "distinctUntilKeyChanged", function() { return _internal_operators_distinctUntilKeyChanged__WEBPACK_IMPORTED_MODULE_23__["distinctUntilKeyChanged"]; });

/* harmony import */ var _internal_operators_elementAt__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ../internal/operators/elementAt */ "./node_modules/rxjs/_esm2015/internal/operators/elementAt.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "elementAt", function() { return _internal_operators_elementAt__WEBPACK_IMPORTED_MODULE_24__["elementAt"]; });

/* harmony import */ var _internal_operators_endWith__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ../internal/operators/endWith */ "./node_modules/rxjs/_esm2015/internal/operators/endWith.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "endWith", function() { return _internal_operators_endWith__WEBPACK_IMPORTED_MODULE_25__["endWith"]; });

/* harmony import */ var _internal_operators_every__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ../internal/operators/every */ "./node_modules/rxjs/_esm2015/internal/operators/every.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "every", function() { return _internal_operators_every__WEBPACK_IMPORTED_MODULE_26__["every"]; });

/* harmony import */ var _internal_operators_exhaust__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ../internal/operators/exhaust */ "./node_modules/rxjs/_esm2015/internal/operators/exhaust.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exhaust", function() { return _internal_operators_exhaust__WEBPACK_IMPORTED_MODULE_27__["exhaust"]; });

/* harmony import */ var _internal_operators_exhaustMap__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../internal/operators/exhaustMap */ "./node_modules/rxjs/_esm2015/internal/operators/exhaustMap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "exhaustMap", function() { return _internal_operators_exhaustMap__WEBPACK_IMPORTED_MODULE_28__["exhaustMap"]; });

/* harmony import */ var _internal_operators_expand__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ../internal/operators/expand */ "./node_modules/rxjs/_esm2015/internal/operators/expand.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "expand", function() { return _internal_operators_expand__WEBPACK_IMPORTED_MODULE_29__["expand"]; });

/* harmony import */ var _internal_operators_filter__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ../internal/operators/filter */ "./node_modules/rxjs/_esm2015/internal/operators/filter.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return _internal_operators_filter__WEBPACK_IMPORTED_MODULE_30__["filter"]; });

/* harmony import */ var _internal_operators_finalize__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ../internal/operators/finalize */ "./node_modules/rxjs/_esm2015/internal/operators/finalize.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "finalize", function() { return _internal_operators_finalize__WEBPACK_IMPORTED_MODULE_31__["finalize"]; });

/* harmony import */ var _internal_operators_find__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ../internal/operators/find */ "./node_modules/rxjs/_esm2015/internal/operators/find.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "find", function() { return _internal_operators_find__WEBPACK_IMPORTED_MODULE_32__["find"]; });

/* harmony import */ var _internal_operators_findIndex__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ../internal/operators/findIndex */ "./node_modules/rxjs/_esm2015/internal/operators/findIndex.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "findIndex", function() { return _internal_operators_findIndex__WEBPACK_IMPORTED_MODULE_33__["findIndex"]; });

/* harmony import */ var _internal_operators_first__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ../internal/operators/first */ "./node_modules/rxjs/_esm2015/internal/operators/first.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "first", function() { return _internal_operators_first__WEBPACK_IMPORTED_MODULE_34__["first"]; });

/* harmony import */ var _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ../internal/operators/groupBy */ "./node_modules/rxjs/_esm2015/internal/operators/groupBy.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "groupBy", function() { return _internal_operators_groupBy__WEBPACK_IMPORTED_MODULE_35__["groupBy"]; });

/* harmony import */ var _internal_operators_ignoreElements__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ../internal/operators/ignoreElements */ "./node_modules/rxjs/_esm2015/internal/operators/ignoreElements.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ignoreElements", function() { return _internal_operators_ignoreElements__WEBPACK_IMPORTED_MODULE_36__["ignoreElements"]; });

/* harmony import */ var _internal_operators_isEmpty__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ../internal/operators/isEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/isEmpty.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "isEmpty", function() { return _internal_operators_isEmpty__WEBPACK_IMPORTED_MODULE_37__["isEmpty"]; });

/* harmony import */ var _internal_operators_last__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ../internal/operators/last */ "./node_modules/rxjs/_esm2015/internal/operators/last.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "last", function() { return _internal_operators_last__WEBPACK_IMPORTED_MODULE_38__["last"]; });

/* harmony import */ var _internal_operators_map__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ../internal/operators/map */ "./node_modules/rxjs/_esm2015/internal/operators/map.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "map", function() { return _internal_operators_map__WEBPACK_IMPORTED_MODULE_39__["map"]; });

/* harmony import */ var _internal_operators_mapTo__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ../internal/operators/mapTo */ "./node_modules/rxjs/_esm2015/internal/operators/mapTo.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mapTo", function() { return _internal_operators_mapTo__WEBPACK_IMPORTED_MODULE_40__["mapTo"]; });

/* harmony import */ var _internal_operators_materialize__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ../internal/operators/materialize */ "./node_modules/rxjs/_esm2015/internal/operators/materialize.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "materialize", function() { return _internal_operators_materialize__WEBPACK_IMPORTED_MODULE_41__["materialize"]; });

/* harmony import */ var _internal_operators_max__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ../internal/operators/max */ "./node_modules/rxjs/_esm2015/internal/operators/max.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "max", function() { return _internal_operators_max__WEBPACK_IMPORTED_MODULE_42__["max"]; });

/* harmony import */ var _internal_operators_merge__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ../internal/operators/merge */ "./node_modules/rxjs/_esm2015/internal/operators/merge.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "merge", function() { return _internal_operators_merge__WEBPACK_IMPORTED_MODULE_43__["merge"]; });

/* harmony import */ var _internal_operators_mergeAll__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ../internal/operators/mergeAll */ "./node_modules/rxjs/_esm2015/internal/operators/mergeAll.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeAll", function() { return _internal_operators_mergeAll__WEBPACK_IMPORTED_MODULE_44__["mergeAll"]; });

/* harmony import */ var _internal_operators_mergeMap__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ../internal/operators/mergeMap */ "./node_modules/rxjs/_esm2015/internal/operators/mergeMap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeMap", function() { return _internal_operators_mergeMap__WEBPACK_IMPORTED_MODULE_45__["mergeMap"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "flatMap", function() { return _internal_operators_mergeMap__WEBPACK_IMPORTED_MODULE_45__["mergeMap"]; });

/* harmony import */ var _internal_operators_mergeMapTo__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ../internal/operators/mergeMapTo */ "./node_modules/rxjs/_esm2015/internal/operators/mergeMapTo.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeMapTo", function() { return _internal_operators_mergeMapTo__WEBPACK_IMPORTED_MODULE_46__["mergeMapTo"]; });

/* harmony import */ var _internal_operators_mergeScan__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ../internal/operators/mergeScan */ "./node_modules/rxjs/_esm2015/internal/operators/mergeScan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "mergeScan", function() { return _internal_operators_mergeScan__WEBPACK_IMPORTED_MODULE_47__["mergeScan"]; });

/* harmony import */ var _internal_operators_min__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ../internal/operators/min */ "./node_modules/rxjs/_esm2015/internal/operators/min.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "min", function() { return _internal_operators_min__WEBPACK_IMPORTED_MODULE_48__["min"]; });

/* harmony import */ var _internal_operators_multicast__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ../internal/operators/multicast */ "./node_modules/rxjs/_esm2015/internal/operators/multicast.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "multicast", function() { return _internal_operators_multicast__WEBPACK_IMPORTED_MODULE_49__["multicast"]; });

/* harmony import */ var _internal_operators_observeOn__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ../internal/operators/observeOn */ "./node_modules/rxjs/_esm2015/internal/operators/observeOn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "observeOn", function() { return _internal_operators_observeOn__WEBPACK_IMPORTED_MODULE_50__["observeOn"]; });

/* harmony import */ var _internal_operators_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ../internal/operators/onErrorResumeNext */ "./node_modules/rxjs/_esm2015/internal/operators/onErrorResumeNext.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "onErrorResumeNext", function() { return _internal_operators_onErrorResumeNext__WEBPACK_IMPORTED_MODULE_51__["onErrorResumeNext"]; });

/* harmony import */ var _internal_operators_pairwise__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ../internal/operators/pairwise */ "./node_modules/rxjs/_esm2015/internal/operators/pairwise.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pairwise", function() { return _internal_operators_pairwise__WEBPACK_IMPORTED_MODULE_52__["pairwise"]; });

/* harmony import */ var _internal_operators_partition__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ../internal/operators/partition */ "./node_modules/rxjs/_esm2015/internal/operators/partition.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "partition", function() { return _internal_operators_partition__WEBPACK_IMPORTED_MODULE_53__["partition"]; });

/* harmony import */ var _internal_operators_pluck__WEBPACK_IMPORTED_MODULE_54__ = __webpack_require__(/*! ../internal/operators/pluck */ "./node_modules/rxjs/_esm2015/internal/operators/pluck.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "pluck", function() { return _internal_operators_pluck__WEBPACK_IMPORTED_MODULE_54__["pluck"]; });

/* harmony import */ var _internal_operators_publish__WEBPACK_IMPORTED_MODULE_55__ = __webpack_require__(/*! ../internal/operators/publish */ "./node_modules/rxjs/_esm2015/internal/operators/publish.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "publish", function() { return _internal_operators_publish__WEBPACK_IMPORTED_MODULE_55__["publish"]; });

/* harmony import */ var _internal_operators_publishBehavior__WEBPACK_IMPORTED_MODULE_56__ = __webpack_require__(/*! ../internal/operators/publishBehavior */ "./node_modules/rxjs/_esm2015/internal/operators/publishBehavior.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "publishBehavior", function() { return _internal_operators_publishBehavior__WEBPACK_IMPORTED_MODULE_56__["publishBehavior"]; });

/* harmony import */ var _internal_operators_publishLast__WEBPACK_IMPORTED_MODULE_57__ = __webpack_require__(/*! ../internal/operators/publishLast */ "./node_modules/rxjs/_esm2015/internal/operators/publishLast.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "publishLast", function() { return _internal_operators_publishLast__WEBPACK_IMPORTED_MODULE_57__["publishLast"]; });

/* harmony import */ var _internal_operators_publishReplay__WEBPACK_IMPORTED_MODULE_58__ = __webpack_require__(/*! ../internal/operators/publishReplay */ "./node_modules/rxjs/_esm2015/internal/operators/publishReplay.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "publishReplay", function() { return _internal_operators_publishReplay__WEBPACK_IMPORTED_MODULE_58__["publishReplay"]; });

/* harmony import */ var _internal_operators_race__WEBPACK_IMPORTED_MODULE_59__ = __webpack_require__(/*! ../internal/operators/race */ "./node_modules/rxjs/_esm2015/internal/operators/race.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "race", function() { return _internal_operators_race__WEBPACK_IMPORTED_MODULE_59__["race"]; });

/* harmony import */ var _internal_operators_reduce__WEBPACK_IMPORTED_MODULE_60__ = __webpack_require__(/*! ../internal/operators/reduce */ "./node_modules/rxjs/_esm2015/internal/operators/reduce.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "reduce", function() { return _internal_operators_reduce__WEBPACK_IMPORTED_MODULE_60__["reduce"]; });

/* harmony import */ var _internal_operators_repeat__WEBPACK_IMPORTED_MODULE_61__ = __webpack_require__(/*! ../internal/operators/repeat */ "./node_modules/rxjs/_esm2015/internal/operators/repeat.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "repeat", function() { return _internal_operators_repeat__WEBPACK_IMPORTED_MODULE_61__["repeat"]; });

/* harmony import */ var _internal_operators_repeatWhen__WEBPACK_IMPORTED_MODULE_62__ = __webpack_require__(/*! ../internal/operators/repeatWhen */ "./node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "repeatWhen", function() { return _internal_operators_repeatWhen__WEBPACK_IMPORTED_MODULE_62__["repeatWhen"]; });

/* harmony import */ var _internal_operators_retry__WEBPACK_IMPORTED_MODULE_63__ = __webpack_require__(/*! ../internal/operators/retry */ "./node_modules/rxjs/_esm2015/internal/operators/retry.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "retry", function() { return _internal_operators_retry__WEBPACK_IMPORTED_MODULE_63__["retry"]; });

/* harmony import */ var _internal_operators_retryWhen__WEBPACK_IMPORTED_MODULE_64__ = __webpack_require__(/*! ../internal/operators/retryWhen */ "./node_modules/rxjs/_esm2015/internal/operators/retryWhen.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "retryWhen", function() { return _internal_operators_retryWhen__WEBPACK_IMPORTED_MODULE_64__["retryWhen"]; });

/* harmony import */ var _internal_operators_refCount__WEBPACK_IMPORTED_MODULE_65__ = __webpack_require__(/*! ../internal/operators/refCount */ "./node_modules/rxjs/_esm2015/internal/operators/refCount.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "refCount", function() { return _internal_operators_refCount__WEBPACK_IMPORTED_MODULE_65__["refCount"]; });

/* harmony import */ var _internal_operators_sample__WEBPACK_IMPORTED_MODULE_66__ = __webpack_require__(/*! ../internal/operators/sample */ "./node_modules/rxjs/_esm2015/internal/operators/sample.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sample", function() { return _internal_operators_sample__WEBPACK_IMPORTED_MODULE_66__["sample"]; });

/* harmony import */ var _internal_operators_sampleTime__WEBPACK_IMPORTED_MODULE_67__ = __webpack_require__(/*! ../internal/operators/sampleTime */ "./node_modules/rxjs/_esm2015/internal/operators/sampleTime.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sampleTime", function() { return _internal_operators_sampleTime__WEBPACK_IMPORTED_MODULE_67__["sampleTime"]; });

/* harmony import */ var _internal_operators_scan__WEBPACK_IMPORTED_MODULE_68__ = __webpack_require__(/*! ../internal/operators/scan */ "./node_modules/rxjs/_esm2015/internal/operators/scan.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scan", function() { return _internal_operators_scan__WEBPACK_IMPORTED_MODULE_68__["scan"]; });

/* harmony import */ var _internal_operators_sequenceEqual__WEBPACK_IMPORTED_MODULE_69__ = __webpack_require__(/*! ../internal/operators/sequenceEqual */ "./node_modules/rxjs/_esm2015/internal/operators/sequenceEqual.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "sequenceEqual", function() { return _internal_operators_sequenceEqual__WEBPACK_IMPORTED_MODULE_69__["sequenceEqual"]; });

/* harmony import */ var _internal_operators_share__WEBPACK_IMPORTED_MODULE_70__ = __webpack_require__(/*! ../internal/operators/share */ "./node_modules/rxjs/_esm2015/internal/operators/share.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "share", function() { return _internal_operators_share__WEBPACK_IMPORTED_MODULE_70__["share"]; });

/* harmony import */ var _internal_operators_shareReplay__WEBPACK_IMPORTED_MODULE_71__ = __webpack_require__(/*! ../internal/operators/shareReplay */ "./node_modules/rxjs/_esm2015/internal/operators/shareReplay.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "shareReplay", function() { return _internal_operators_shareReplay__WEBPACK_IMPORTED_MODULE_71__["shareReplay"]; });

/* harmony import */ var _internal_operators_single__WEBPACK_IMPORTED_MODULE_72__ = __webpack_require__(/*! ../internal/operators/single */ "./node_modules/rxjs/_esm2015/internal/operators/single.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "single", function() { return _internal_operators_single__WEBPACK_IMPORTED_MODULE_72__["single"]; });

/* harmony import */ var _internal_operators_skip__WEBPACK_IMPORTED_MODULE_73__ = __webpack_require__(/*! ../internal/operators/skip */ "./node_modules/rxjs/_esm2015/internal/operators/skip.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "skip", function() { return _internal_operators_skip__WEBPACK_IMPORTED_MODULE_73__["skip"]; });

/* harmony import */ var _internal_operators_skipLast__WEBPACK_IMPORTED_MODULE_74__ = __webpack_require__(/*! ../internal/operators/skipLast */ "./node_modules/rxjs/_esm2015/internal/operators/skipLast.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "skipLast", function() { return _internal_operators_skipLast__WEBPACK_IMPORTED_MODULE_74__["skipLast"]; });

/* harmony import */ var _internal_operators_skipUntil__WEBPACK_IMPORTED_MODULE_75__ = __webpack_require__(/*! ../internal/operators/skipUntil */ "./node_modules/rxjs/_esm2015/internal/operators/skipUntil.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "skipUntil", function() { return _internal_operators_skipUntil__WEBPACK_IMPORTED_MODULE_75__["skipUntil"]; });

/* harmony import */ var _internal_operators_skipWhile__WEBPACK_IMPORTED_MODULE_76__ = __webpack_require__(/*! ../internal/operators/skipWhile */ "./node_modules/rxjs/_esm2015/internal/operators/skipWhile.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "skipWhile", function() { return _internal_operators_skipWhile__WEBPACK_IMPORTED_MODULE_76__["skipWhile"]; });

/* harmony import */ var _internal_operators_startWith__WEBPACK_IMPORTED_MODULE_77__ = __webpack_require__(/*! ../internal/operators/startWith */ "./node_modules/rxjs/_esm2015/internal/operators/startWith.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "startWith", function() { return _internal_operators_startWith__WEBPACK_IMPORTED_MODULE_77__["startWith"]; });

/* harmony import */ var _internal_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_78__ = __webpack_require__(/*! ../internal/operators/subscribeOn */ "./node_modules/rxjs/_esm2015/internal/operators/subscribeOn.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "subscribeOn", function() { return _internal_operators_subscribeOn__WEBPACK_IMPORTED_MODULE_78__["subscribeOn"]; });

/* harmony import */ var _internal_operators_switchAll__WEBPACK_IMPORTED_MODULE_79__ = __webpack_require__(/*! ../internal/operators/switchAll */ "./node_modules/rxjs/_esm2015/internal/operators/switchAll.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "switchAll", function() { return _internal_operators_switchAll__WEBPACK_IMPORTED_MODULE_79__["switchAll"]; });

/* harmony import */ var _internal_operators_switchMap__WEBPACK_IMPORTED_MODULE_80__ = __webpack_require__(/*! ../internal/operators/switchMap */ "./node_modules/rxjs/_esm2015/internal/operators/switchMap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "switchMap", function() { return _internal_operators_switchMap__WEBPACK_IMPORTED_MODULE_80__["switchMap"]; });

/* harmony import */ var _internal_operators_switchMapTo__WEBPACK_IMPORTED_MODULE_81__ = __webpack_require__(/*! ../internal/operators/switchMapTo */ "./node_modules/rxjs/_esm2015/internal/operators/switchMapTo.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "switchMapTo", function() { return _internal_operators_switchMapTo__WEBPACK_IMPORTED_MODULE_81__["switchMapTo"]; });

/* harmony import */ var _internal_operators_take__WEBPACK_IMPORTED_MODULE_82__ = __webpack_require__(/*! ../internal/operators/take */ "./node_modules/rxjs/_esm2015/internal/operators/take.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "take", function() { return _internal_operators_take__WEBPACK_IMPORTED_MODULE_82__["take"]; });

/* harmony import */ var _internal_operators_takeLast__WEBPACK_IMPORTED_MODULE_83__ = __webpack_require__(/*! ../internal/operators/takeLast */ "./node_modules/rxjs/_esm2015/internal/operators/takeLast.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "takeLast", function() { return _internal_operators_takeLast__WEBPACK_IMPORTED_MODULE_83__["takeLast"]; });

/* harmony import */ var _internal_operators_takeUntil__WEBPACK_IMPORTED_MODULE_84__ = __webpack_require__(/*! ../internal/operators/takeUntil */ "./node_modules/rxjs/_esm2015/internal/operators/takeUntil.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "takeUntil", function() { return _internal_operators_takeUntil__WEBPACK_IMPORTED_MODULE_84__["takeUntil"]; });

/* harmony import */ var _internal_operators_takeWhile__WEBPACK_IMPORTED_MODULE_85__ = __webpack_require__(/*! ../internal/operators/takeWhile */ "./node_modules/rxjs/_esm2015/internal/operators/takeWhile.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "takeWhile", function() { return _internal_operators_takeWhile__WEBPACK_IMPORTED_MODULE_85__["takeWhile"]; });

/* harmony import */ var _internal_operators_tap__WEBPACK_IMPORTED_MODULE_86__ = __webpack_require__(/*! ../internal/operators/tap */ "./node_modules/rxjs/_esm2015/internal/operators/tap.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "tap", function() { return _internal_operators_tap__WEBPACK_IMPORTED_MODULE_86__["tap"]; });

/* harmony import */ var _internal_operators_throttle__WEBPACK_IMPORTED_MODULE_87__ = __webpack_require__(/*! ../internal/operators/throttle */ "./node_modules/rxjs/_esm2015/internal/operators/throttle.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "throttle", function() { return _internal_operators_throttle__WEBPACK_IMPORTED_MODULE_87__["throttle"]; });

/* harmony import */ var _internal_operators_throttleTime__WEBPACK_IMPORTED_MODULE_88__ = __webpack_require__(/*! ../internal/operators/throttleTime */ "./node_modules/rxjs/_esm2015/internal/operators/throttleTime.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "throttleTime", function() { return _internal_operators_throttleTime__WEBPACK_IMPORTED_MODULE_88__["throttleTime"]; });

/* harmony import */ var _internal_operators_throwIfEmpty__WEBPACK_IMPORTED_MODULE_89__ = __webpack_require__(/*! ../internal/operators/throwIfEmpty */ "./node_modules/rxjs/_esm2015/internal/operators/throwIfEmpty.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "throwIfEmpty", function() { return _internal_operators_throwIfEmpty__WEBPACK_IMPORTED_MODULE_89__["throwIfEmpty"]; });

/* harmony import */ var _internal_operators_timeInterval__WEBPACK_IMPORTED_MODULE_90__ = __webpack_require__(/*! ../internal/operators/timeInterval */ "./node_modules/rxjs/_esm2015/internal/operators/timeInterval.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "timeInterval", function() { return _internal_operators_timeInterval__WEBPACK_IMPORTED_MODULE_90__["timeInterval"]; });

/* harmony import */ var _internal_operators_timeout__WEBPACK_IMPORTED_MODULE_91__ = __webpack_require__(/*! ../internal/operators/timeout */ "./node_modules/rxjs/_esm2015/internal/operators/timeout.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "timeout", function() { return _internal_operators_timeout__WEBPACK_IMPORTED_MODULE_91__["timeout"]; });

/* harmony import */ var _internal_operators_timeoutWith__WEBPACK_IMPORTED_MODULE_92__ = __webpack_require__(/*! ../internal/operators/timeoutWith */ "./node_modules/rxjs/_esm2015/internal/operators/timeoutWith.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "timeoutWith", function() { return _internal_operators_timeoutWith__WEBPACK_IMPORTED_MODULE_92__["timeoutWith"]; });

/* harmony import */ var _internal_operators_timestamp__WEBPACK_IMPORTED_MODULE_93__ = __webpack_require__(/*! ../internal/operators/timestamp */ "./node_modules/rxjs/_esm2015/internal/operators/timestamp.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "timestamp", function() { return _internal_operators_timestamp__WEBPACK_IMPORTED_MODULE_93__["timestamp"]; });

/* harmony import */ var _internal_operators_toArray__WEBPACK_IMPORTED_MODULE_94__ = __webpack_require__(/*! ../internal/operators/toArray */ "./node_modules/rxjs/_esm2015/internal/operators/toArray.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "toArray", function() { return _internal_operators_toArray__WEBPACK_IMPORTED_MODULE_94__["toArray"]; });

/* harmony import */ var _internal_operators_window__WEBPACK_IMPORTED_MODULE_95__ = __webpack_require__(/*! ../internal/operators/window */ "./node_modules/rxjs/_esm2015/internal/operators/window.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "window", function() { return _internal_operators_window__WEBPACK_IMPORTED_MODULE_95__["window"]; });

/* harmony import */ var _internal_operators_windowCount__WEBPACK_IMPORTED_MODULE_96__ = __webpack_require__(/*! ../internal/operators/windowCount */ "./node_modules/rxjs/_esm2015/internal/operators/windowCount.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "windowCount", function() { return _internal_operators_windowCount__WEBPACK_IMPORTED_MODULE_96__["windowCount"]; });

/* harmony import */ var _internal_operators_windowTime__WEBPACK_IMPORTED_MODULE_97__ = __webpack_require__(/*! ../internal/operators/windowTime */ "./node_modules/rxjs/_esm2015/internal/operators/windowTime.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "windowTime", function() { return _internal_operators_windowTime__WEBPACK_IMPORTED_MODULE_97__["windowTime"]; });

/* harmony import */ var _internal_operators_windowToggle__WEBPACK_IMPORTED_MODULE_98__ = __webpack_require__(/*! ../internal/operators/windowToggle */ "./node_modules/rxjs/_esm2015/internal/operators/windowToggle.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "windowToggle", function() { return _internal_operators_windowToggle__WEBPACK_IMPORTED_MODULE_98__["windowToggle"]; });

/* harmony import */ var _internal_operators_windowWhen__WEBPACK_IMPORTED_MODULE_99__ = __webpack_require__(/*! ../internal/operators/windowWhen */ "./node_modules/rxjs/_esm2015/internal/operators/windowWhen.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "windowWhen", function() { return _internal_operators_windowWhen__WEBPACK_IMPORTED_MODULE_99__["windowWhen"]; });

/* harmony import */ var _internal_operators_withLatestFrom__WEBPACK_IMPORTED_MODULE_100__ = __webpack_require__(/*! ../internal/operators/withLatestFrom */ "./node_modules/rxjs/_esm2015/internal/operators/withLatestFrom.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "withLatestFrom", function() { return _internal_operators_withLatestFrom__WEBPACK_IMPORTED_MODULE_100__["withLatestFrom"]; });

/* harmony import */ var _internal_operators_zip__WEBPACK_IMPORTED_MODULE_101__ = __webpack_require__(/*! ../internal/operators/zip */ "./node_modules/rxjs/_esm2015/internal/operators/zip.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zip", function() { return _internal_operators_zip__WEBPACK_IMPORTED_MODULE_101__["zip"]; });

/* harmony import */ var _internal_operators_zipAll__WEBPACK_IMPORTED_MODULE_102__ = __webpack_require__(/*! ../internal/operators/zipAll */ "./node_modules/rxjs/_esm2015/internal/operators/zipAll.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "zipAll", function() { return _internal_operators_zipAll__WEBPACK_IMPORTED_MODULE_102__["zipAll"]; });









































































































//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/zingchart-angular/__ivy_ngcc__/fesm2015/zingchart-angular.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/zingchart-angular/__ivy_ngcc__/fesm2015/zingchart-angular.js ***!
  \***********************************************************************************/
/*! exports provided: ZingchartAngularComponent, ZingchartAngularModule, ZingchartAngularService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZingchartAngularComponent", function() { return ZingchartAngularComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZingchartAngularModule", function() { return ZingchartAngularModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZingchartAngularService", function() { return ZingchartAngularService; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "./node_modules/@angular/core/__ivy_ngcc__/fesm2015/core.js");
/* harmony import */ var zingchart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zingchart */ "./node_modules/zingchart/es6.js");



/**
 * @fileoverview added by tsickle
 * Generated from: lib/zingchart-angular.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

class ZingchartAngularService {
    constructor() {
        this.count = 0;
    }
    /**
     * @return {?}
     */
    getCount() {
        return this.count;
    }
    /**
     * @return {?}
     */
    increment() {
        this.count++;
    }
    /**
     * @return {?}
     */
    decrement() {
        this.count--;
    }
}
ZingchartAngularService.ɵfac = function ZingchartAngularService_Factory(t) { return new (t || ZingchartAngularService)(); };
ZingchartAngularService.ɵprov = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"]({ token: ZingchartAngularService, factory: ZingchartAngularService.ɵfac, providedIn: 'root' });
/** @nocollapse */
ZingchartAngularService.ctorParameters = () => [];
/** @nocollapse */ ZingchartAngularService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ZingchartAngularService_Factory() { return new ZingchartAngularService(); }, token: ZingchartAngularService, providedIn: "root" });
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ZingchartAngularService, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"],
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/zingchart-angular.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const METHOD_NAMES = ["addplot", "appendseriesdata", "appendseriesvalues", "getseriesdata", "getseriesvalues", "modifyplot", "removenode", "removeplot", "set3dview", "setnodevalue", "setseriesdata", "setseriesvalues", "downloadCSV", "downloadXLS", "downloadRAW", "exportdata", "getimagedata", "print", "saveasimage", "exportimage", "addmenuitem", "addscalevalue", "destroy", "load", "modify", "reload", "removescalevalue", "resize", "setdata", "setguide", "update", "clearfeed", "getinterval", "setinterval", "startfeed", "stopfeed", "getcharttype", "getdata", "getgraphlength", "getnodelength", "getnodevalue", "getobjectinfo", "getplotlength", "getplotvalues", "getrender", "getrules", "getscales", "getversion", "getxyinfo", "get3dview", "goback", "goforward", "addnote", "removenote", "updatenote", "addobject", "removeobject", "repaintobjects", "updateobject", "addrule", "removerule", "updaterule", "Selection", "clearselection", "deselect", "getselection", "select", "setselection", "clicknode", "closemodal", "disable", "enable", "exitfullscreen", "fullscreen", "hideguide", "hidemenu", "hideplot/plothide", "legendmaximize", "legendminimize", "openmodal", "showhoverstate", "showguide", "showmenu", "showplot/plotshow", "toggleabout", "togglebugreport", "toggledimension", "togglelegend", "togglesource", "toggleplot", "hidetooltip", "locktooltip", "showtooltip", "unlocktooltip", "viewall", "zoomin", "zoomout", "zoomto", "zoomtovalues"];
/** @type {?} */
const EVENT_NAMES = [
    'about_hide',
    'about_show',
    'animation_end',
    'animation_start',
    'animation_step',
    'beforedestroy',
    'bugreport_hide',
    'bugreport_show',
    'click',
    'complete',
    'data_export',
    'dataexport',
    'dataload',
    'dataparse',
    'dataready',
    'destroy',
    'dimension_change',
    'error',
    'feed_clear',
    'feed_interval_modify',
    'feed_start',
    'feed_stop',
    'gcomplete',
    'gload',
    'gparse',
    'guide_mousemove',
    'guide_mouseout',
    'guide_mouseout',
    'heatmap.mousemove',
    'history_back',
    'history_forward',
    'image_save',
    'label_click',
    'label_mousedown',
    'label_mouseout',
    'label_mouseover',
    'label_mouseup',
    'legend_hide',
    'legend_item_click',
    'legend_item_mousemove',
    'legend_item_mouseout',
    'legend_item_mouseout',
    'legend_item_mouseover',
    'legend_marker_click',
    'legend_marker_click',
    'legend_maximize',
    'legend_minimize',
    'legend_minimize_click',
    'legend_pagination_click',
    'legend_show',
    'legend_drag_mousedown',
    'lens_hide',
    'lens_show',
    'load',
    'maps_zoom',
    'menu_item_click',
    'modify',
    'modulesready',
    'mousewheel',
    'node_add',
    'node_click',
    'node_deselect',
    'node_doubleclick',
    'node_mousedown',
    'node_mouseout',
    'node_mouseover',
    'node_mouseup',
    'node_remove',
    'node_select',
    'node_set',
    'objectsinit',
    'objectsready',
    'overscroll',
    'plot_add',
    'plot_click',
    'plot_deselect',
    'plot_doubleclick',
    'plot_hide',
    'plot_modify',
    'plot_mouseout',
    'plot_mouseover',
    'plot_remove',
    'plot_select',
    'plot_show',
    'postzoom',
    'print',
    'reload',
    'render',
    'resize',
    'setdata',
    'shape_click',
    'shape_mousedown',
    'shape_mouseout',
    'shape_mouseover',
    'shape_mouseup',
    'source_hide',
    'source_show',
    'swipe',
    'touchemove',
    'touchend',
    'touchstart',
    'zingchart_plugins_selection-tool_mouseup',
    'zingchart_plugins_selection-tool_selection',
    'zoom'
];
/** @type {?} */
const DEFAULT_WIDTH = '100%';
/** @type {?} */
const DEFAULT_HEIGHT = '480';
class ZingchartAngularComponent {
    // constructor(private service: ZingchartAngularService, private ref: ElementRef, private viewRef: ViewContainerRef) { 
    /**
     * @param {?} service
     */
    constructor(service) {
        this.service = service;
        this.about_hide = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.about_show = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.animation_end = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.animation_start = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.animation_step = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.beforedestroy = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.bugreport_hide = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.bugreport_show = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.complete = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.data_export = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.dataexport = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.dataload = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.dataparse = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.dataready = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.destroy = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.dimension_change = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.error = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.feed_clear = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.feed_interval_modify = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.feed_start = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.feed_stop = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.gcomplete = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.gload = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.gparse = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.guide_mousemove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.guide_mouseout = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.heatmap_mousemove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.history_back = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.history_forward = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.image_save = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.label_click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.label_mousedown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.label_mouseout = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.label_mouseover = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.label_mouseup = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_hide = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_item_click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_item_mousemove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_item_mouseout = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_item_mouseover = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_marker_click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_maximize = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_minimize = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_minimize_click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_pagination_click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_show = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.legend_drag_mousedown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.lens_hide = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.lens_show = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.load = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.maps_zoom = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.menu_item_click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.modify = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.modulesready = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.mousewheel = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_add = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_deselect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_doubleclick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_mousedown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_mouseout = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_mouseover = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_mouseup = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_remove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.node_set = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.objectsinit = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.objectsready = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.overscroll = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_add = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_deselect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_doubleclick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_hide = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_modify = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_mouseout = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_mouseover = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_remove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_select = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.plot_show = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.postzoom = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.print = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.reload = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.render = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.resize = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.setdata = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.shape_click = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.shape_mousedown = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.shape_mouseout = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.shape_mouseover = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.shape_mouseup = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.source_hide = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.source_show = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.swipe = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.touchemove = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.touchend = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.touchstart = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.zingchart_plugins_selection_tool_mouseup = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.zingchart_plugins_selection_tool_selection = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.zoom = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.service.increment();
        this.chartId = 'zingchart-ng-' + this.service.getCount();
        METHOD_NAMES.forEach((/**
         * @param {?} method
         * @return {?}
         */
        (method) => {
            this[method] = (/**
             * @param {?} args
             * @return {?}
             */
            (args) => JSON.stringify(zingchart__WEBPACK_IMPORTED_MODULE_1__["default"].exec(this.chartId, method, args)));
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        let data = this.config;
        if (typeof data === 'string') {
            try {
                data = JSON.parse(data);
            }
            catch (e) {
                throw new Error('Invalid object');
            }
        }
        if (this.series) {
            data['series'] = this.series;
        }
        this.chartWidth = this.width || DEFAULT_WIDTH;
        this.chartHeight = this.height || DEFAULT_HEIGHT;
        this.renderObject = {
            id: this.chartId,
            data: data,
            width: this.chartWidth,
            height: this.chartHeight,
        };
        if (this.theme) {
            this.renderObject['defaults'] = this.theme;
        }
        // Setup event listeners before rendering
        EVENT_NAMES.forEach((/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (this[event] && this[event].observers && this[event].observers.length) {
                zingchart__WEBPACK_IMPORTED_MODULE_1__["default"].bind(this.chartId, event, ((/**
                 * @param {?} result
                 * @return {?}
                 */
                (result) => {
                    this[event].emit(result);
                })));
            }
        }));
        zingchart__WEBPACK_IMPORTED_MODULE_1__["default"].render(this.renderObject);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.service.decrement();
        zingchart__WEBPACK_IMPORTED_MODULE_1__["default"].exec(this.chartId, 'destroy');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.config) {
            zingchart__WEBPACK_IMPORTED_MODULE_1__["default"].exec(this.chartId, 'setdata', {
                data: changes.config.currentValue,
            });
        }
        else if (changes.series) {
            this.config.series = changes.series.currentValue;
            zingchart__WEBPACK_IMPORTED_MODULE_1__["default"].exec(this.chartId, 'setdata', {
                data: this.config,
            });
        }
        else if (changes.width || changes.height) {
            /** @type {?} */
            const width = (changes.width && changes.width.currentValue) || this.width;
            /** @type {?} */
            const height = (changes.height && changes.height.currentValue) || this.height;
            zingchart__WEBPACK_IMPORTED_MODULE_1__["default"].exec(this.chartId, 'resize', {
                width,
                height,
            });
        }
    }
}
ZingchartAngularComponent.ɵfac = function ZingchartAngularComponent_Factory(t) { return new (t || ZingchartAngularComponent)(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdirectiveInject"](ZingchartAngularService)); };
ZingchartAngularComponent.ɵcmp = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineComponent"]({ type: ZingchartAngularComponent, selectors: [["zingchart-angular"]], inputs: { config: "config", id: "id", width: "width", height: "height", series: "series", theme: "theme" }, outputs: { about_hide: "about_hide", about_show: "about_show", animation_end: "animation_end", animation_start: "animation_start", animation_step: "animation_step", beforedestroy: "beforedestroy", bugreport_hide: "bugreport_hide", bugreport_show: "bugreport_show", click: "click", complete: "complete", data_export: "data_export", dataexport: "dataexport", dataload: "dataload", dataparse: "dataparse", dataready: "dataready", destroy: "destroy", dimension_change: "dimension_change", error: "error", feed_clear: "feed_clear", feed_interval_modify: "feed_interval_modify", feed_start: "feed_start", feed_stop: "feed_stop", gcomplete: "gcomplete", gload: "gload", gparse: "gparse", guide_mousemove: "guide_mousemove", guide_mouseout: "guide_mouseout", heatmap_mousemove: "heatmap_mousemove", history_back: "history_back", history_forward: "history_forward", image_save: "image_save", label_click: "label_click", label_mousedown: "label_mousedown", label_mouseout: "label_mouseout", label_mouseover: "label_mouseover", label_mouseup: "label_mouseup", legend_hide: "legend_hide", legend_item_click: "legend_item_click", legend_item_mousemove: "legend_item_mousemove", legend_item_mouseout: "legend_item_mouseout", legend_item_mouseover: "legend_item_mouseover", legend_marker_click: "legend_marker_click", legend_maximize: "legend_maximize", legend_minimize: "legend_minimize", legend_minimize_click: "legend_minimize_click", legend_pagination_click: "legend_pagination_click", legend_show: "legend_show", legend_drag_mousedown: "legend_drag_mousedown", lens_hide: "lens_hide", lens_show: "lens_show", load: "load", maps_zoom: "maps_zoom", menu_item_click: "menu_item_click", modify: "modify", modulesready: "modulesready", mousewheel: "mousewheel", node_add: "node_add", node_click: "node_click", node_deselect: "node_deselect", node_doubleclick: "node_doubleclick", node_mousedown: "node_mousedown", node_mouseout: "node_mouseout", node_mouseover: "node_mouseover", node_mouseup: "node_mouseup", node_remove: "node_remove", node_select: "node_select", node_set: "node_set", objectsinit: "objectsinit", objectsready: "objectsready", overscroll: "overscroll", plot_add: "plot_add", plot_click: "plot_click", plot_deselect: "plot_deselect", plot_doubleclick: "plot_doubleclick", plot_hide: "plot_hide", plot_modify: "plot_modify", plot_mouseout: "plot_mouseout", plot_mouseover: "plot_mouseover", plot_remove: "plot_remove", plot_select: "plot_select", plot_show: "plot_show", postzoom: "postzoom", print: "print", reload: "reload", render: "render", resize: "resize", setdata: "setdata", shape_click: "shape_click", shape_mousedown: "shape_mousedown", shape_mouseout: "shape_mouseout", shape_mouseover: "shape_mouseover", shape_mouseup: "shape_mouseup", source_hide: "source_hide", source_show: "source_show", swipe: "swipe", touchemove: "touchemove", touchend: "touchend", touchstart: "touchstart", zingchart_plugins_selection_tool_mouseup: "zingchart_plugins_selection_tool_mouseup", zingchart_plugins_selection_tool_selection: "zingchart_plugins_selection_tool_selection", zoom: "zoom" }, features: [_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵNgOnChangesFeature"]], decls: 1, vars: 1, consts: [[3, "id"]], template: function ZingchartAngularComponent_Template(rf, ctx) { if (rf & 1) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵelement"](0, "div", 0);
    } if (rf & 2) {
        _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵpropertyInterpolate"]("id", ctx.chartId);
    } }, encapsulation: 2 });
/** @nocollapse */
ZingchartAngularComponent.ctorParameters = () => [
    { type: ZingchartAngularService }
];
ZingchartAngularComponent.propDecorators = {
    config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    width: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    height: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    series: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    theme: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
    about_hide: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    about_show: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    animation_end: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    animation_start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    animation_step: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    beforedestroy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    bugreport_hide: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    bugreport_show: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    complete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    data_export: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    dataexport: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    dataload: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    dataparse: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    dataready: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    destroy: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    dimension_change: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    error: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    feed_clear: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    feed_interval_modify: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    feed_start: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    feed_stop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    gcomplete: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    gload: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    gparse: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    guide_mousemove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    guide_mouseout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    heatmap_mousemove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    history_back: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    history_forward: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    image_save: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    label_click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    label_mousedown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    label_mouseout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    label_mouseover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    label_mouseup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_hide: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_item_click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_item_mousemove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_item_mouseout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_item_mouseover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_marker_click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_maximize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_minimize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_minimize_click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_pagination_click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_show: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    legend_drag_mousedown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    lens_hide: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    lens_show: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    load: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    maps_zoom: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    menu_item_click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    modify: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    modulesready: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    mousewheel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_add: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_deselect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_doubleclick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_mousedown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_mouseout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_mouseover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_mouseup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_remove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_select: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    node_set: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    objectsinit: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    objectsready: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    overscroll: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_add: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_deselect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_doubleclick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_hide: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_modify: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_mouseout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_mouseover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_remove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_select: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    plot_show: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    postzoom: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    print: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    reload: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    render: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    resize: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    setdata: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    shape_click: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    shape_mousedown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    shape_mouseout: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    shape_mouseover: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    shape_mouseup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    source_hide: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    source_show: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    swipe: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    touchemove: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    touchend: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    touchstart: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    zingchart_plugins_selection_tool_mouseup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    zingchart_plugins_selection_tool_selection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
    zoom: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }]
};
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ZingchartAngularComponent, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"],
        args: [{
                selector: 'zingchart-angular',
                template: `
    <div id="{{chartId}}"></div>
  `
            }]
    }], function () { return [{ type: ZingchartAngularService }]; }, { about_hide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], about_show: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], animation_end: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], animation_start: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], animation_step: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], beforedestroy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], bugreport_hide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], bugreport_show: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], complete: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], data_export: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], dataexport: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], dataload: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], dataparse: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], dataready: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], destroy: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], dimension_change: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], error: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], feed_clear: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], feed_interval_modify: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], feed_start: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], feed_stop: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], gcomplete: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], gload: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], gparse: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], guide_mousemove: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], guide_mouseout: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], heatmap_mousemove: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], history_back: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], history_forward: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], image_save: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], label_click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], label_mousedown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], label_mouseout: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], label_mouseover: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], label_mouseup: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_hide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_item_click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_item_mousemove: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_item_mouseout: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_item_mouseover: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_marker_click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_maximize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_minimize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_minimize_click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_pagination_click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_show: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], legend_drag_mousedown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], lens_hide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], lens_show: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], load: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], maps_zoom: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], menu_item_click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], modify: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], modulesready: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], mousewheel: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_add: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_deselect: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_doubleclick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_mousedown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_mouseout: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_mouseover: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_mouseup: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_remove: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_select: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], node_set: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], objectsinit: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], objectsready: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], overscroll: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_add: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_deselect: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_doubleclick: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_hide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_modify: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_mouseout: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_mouseover: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_remove: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_select: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], plot_show: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], postzoom: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], print: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], reload: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], render: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], resize: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], setdata: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], shape_click: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], shape_mousedown: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], shape_mouseout: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], shape_mouseover: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], shape_mouseup: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], source_hide: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], source_show: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], swipe: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], touchemove: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], touchend: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], touchstart: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], zingchart_plugins_selection_tool_mouseup: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], zingchart_plugins_selection_tool_selection: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], zoom: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"]
        }], config: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], id: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], width: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], height: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], series: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }], theme: [{
            type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"]
        }] }); })();
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/zingchart-angular.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ZingchartAngularModule {
}
ZingchartAngularModule.ɵmod = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineNgModule"]({ type: ZingchartAngularModule });
ZingchartAngularModule.ɵinj = _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjector"]({ factory: function ZingchartAngularModule_Factory(t) { return new (t || ZingchartAngularModule)(); }, imports: [[]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵsetNgModuleScope"](ZingchartAngularModule, { declarations: [ZingchartAngularComponent], exports: [ZingchartAngularComponent] }); })();
/*@__PURE__*/ (function () { _angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵsetClassMetadata"](ZingchartAngularModule, [{
        type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"],
        args: [{
                declarations: [ZingchartAngularComponent],
                imports: [],
                exports: [ZingchartAngularComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * Generated from: projects.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: zingchart-angular.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */



//# sourceMappingURL=zingchart-angular.js.map

/***/ }),

/***/ "./node_modules/zingchart/es6.js":
/*!***************************************!*\
  !*** ./node_modules/zingchart/es6.js ***!
  \***************************************/
/*! exports provided: default, ZC */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZC", function() { return ZC; });
/* harmony import */ var _zingchart_es6_min_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./zingchart-es6.min.js */ "./node_modules/zingchart/zingchart-es6.min.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _zingchart_es6_min_js__WEBPACK_IMPORTED_MODULE_0__["default"]; });


let ZC = window.ZC;



/***/ }),

/***/ "./node_modules/zingchart/zingchart-es6.min.js":
/*!*****************************************************!*\
  !*** ./node_modules/zingchart/zingchart-es6.min.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
All of the code within the ZingChart software is developed and copyrighted by ZingChart, Inc., and may not be copied,
replicated, or used in any other software or application without prior permission from ZingChart. All usage must coincide with the
ZingChart End User License Agreement which can be requested by email at support@zingchart.com.

Build 2.9.0_ES6
*/
if(typeof(ZC)==="undefined"){eval(function(p,a,c,k,e,d){e=function(c){return(c<a?'':e(parseInt(c/a)))+((c=c%a)>35?String.fromCharCode(c+29):c.toString(36))};if(!''.replace(/^/,String)){while(c--){d[e(c)]=k[c]||e(c)}k=[function(e){return d[e]}];e=function(){return'\\w+'};c=1};while(c--){if(k[c]){p=p.replace(new RegExp('\\b'+e(c)+'\\b','g'),k[c])}}return p}('2v.ZC={AT:1n(e,t){if(e.1L)1l e.1L(t);1j(1a i=0,a=e.1f;i<a;i++)if(e[i]===t)1l i;1l-1},g2:"2.9.0",nh:"",157:!1,wi:["1c","rz","1y","9c","bQ","1N","8a","c2","2U","dP","5x","6T","6b","7o","6y","8t","5i","6B","3P","7e","9B","nD","8Y","9f","aM","gZ","7g","f5","8k","81","qU","aa","au","5S","vD","7Y","5z","rW","8E","b9"],n9:{Jy:["Ka","Kc"],Kd:["Kf","Kg"],Ki:["Jx","Kt"],Ku:["Kv-b5","Fq-b5"],Fx:["5i-3P","Fx"],2U:["96","5x"],7g:["qE","7g"],lx:["Jv"]},Bx:{9B:"3P"},Ji:1n(e,t){1a i=[].7p.4x(8U).6u(2);1l ZC.kn(e,t).9l(t,i)},kn:1n(e,t){1j(1a i=e.2p("."),a=i.Fq(),n=0;n<i.1f;n++)t=t[i[n]];1l t[a]},4f:{1T:{},2e:0,2Q:1n(e,t){ZC.4f.1T[e]=t,ZC.4f.2e++,ZC.4f.2e>pT&&(ZC.4f.1T={},ZC.4f.2e=0)}},Jc:0,TS:{},3v:4Q.ir,gj:[],jf:"1T:4i/Fr;kr,Jd///Jf==",lV:!1,eR:{},ob:[],aw:[],c6:0,yJ:"1T:4i/9I;kr,Jg+Q/IN+Jh+Jp/Jt/UJ/Jw//Ly+LX/Mn+Mt/Lv/Iy/H0/Hp+Il/Im+Hu+Hq/Ib/Ht+Iv/Is/Ih/Sb/Sc/Sf/Sj/Hx/Mx/Sp/Ss/Rd+Rh+Ri/Rl+Ra/Rm/Rt+Rv+Sz/Uc+Ud/Uh+Uj/Zg/Uo+Uq+Us/Un/Tz+Tg+Ti/Tt/Tu+Oz/Od/Of/Og+NQ/Oo+Ov/Nl/N1/Nj+r+Nm+Nn+Qc/Qf/Qg/Qi==",bT:{"zc.o8":"1T:4i/Fr;kr,Pd+Pg+Ps/Iz/Sl/Pw/Pv+Pu/Pr/Pq+Pp/Po++Pl/OY+Pk/Pj/Pi+Ph+ck/Pf/Pc+Pb/Pa/Px/Pm+Py/Qn+Qx/Qw+Qv/Qt+Qs+Qr/Qq+Qp/Qo+Qm+Qa+Ql/Qk+Qj++Qh+Qb/Pz/Oy/Nz++Ox/Nv+Nu/Nt/Ns/Nr+o/Nq/OV/Np+Nk+Mz/Nh+Ng+Nf/Nd+Nc+Na/Nx+Ny+Om+Ow+Ou/Ot/Os/C/Or"},Oq:!1,Op:"",b7:1c,3c:1c,2F:1c,3L:1c,3o:!1,bK:!1,zE:1n(){ZC.b7=ZC.3c=ZC.2F=ZC.3L=!1;1a e=!!2g.4W("3c").9k,t=!1;e&&(t="1n"==1w 2g.4W("3c").9k("2d").qg);ZC.3c=e&&t,ZC.2F=2g.On.Ol("79://8x.w3.eq/TR/Ok/Oj#Oi","1.1");1a i=2g.3s.3b(2g.4W("3E")),a=2g.4W("7n:2S");a.82="qS",a.4m("id","Oh"),a.4m("zB",1m 9d),i.3b(a),a.1I.y8="3R(#2q#ya)",ZC.3L=!a||"4d"==1w a.zB,i.6q.aJ(i);1a n=!1;8Q.pV&&8Q.pV["fX/x-zz-b7"]?n=8Q.pV["fX/x-zz-b7"].Oc:2g.4q&&-1===8Q.Ob.1L("Oa")&&(n=1m c0(\'4O { 1a nJ = 1m m7("zx.zx");if (nJ) { nJ = 1c; 1l hI; } } 4M (e) { 1l dB; }\')()),ZC.b7=n?1:0},9a:!(2g.zw&&"Qy"===2g.zw),6Q:!!/zv (\\d+\\.\\d+);/.5O(8Q.cP)&&6a(5n.$1)<8,d1:!!/zv (\\d+\\.\\d+);/.5O(8Q.cP)&&6a(5n.$1)<9,2L:/Qz|SM|Au Tx|Tw|Tv CE|Ts/.5O(8Q.cP),um:/Tr/.5O(8Q.cP),ux:/Tq/.5O(8Q.cP),gH:"rL"in 2v,t9:"Tp"in 2v,RQ:[],X8:[],DU:[0,0],Tn:1c,2E:1n(e,t,i,a,n,l){1c===ZC.1d(i)&&(i=!0),1c===ZC.1d(a)&&(a=!0),1c===ZC.1d(n)&&(n=!1);1a r=(l=l||[]).1f;1j(1a o in e)if(0===r||r>0&&-1===ZC.AT(l,o))if(e[o]3F 3N){if(a){(1c===ZC.1d(t[o])||"7a"!==o&&!n)&&(t[o]=[]);1j(1a s=0,C=e[o].1f;s<C;s++)t[o].1h(e[o][s])}}1u e[o]3F 9d&&!(e[o]3F c0)?a&&(1c===ZC.1d(t[o])&&(t[o]={}),t[o]3F 9d&&!(t[o]3F c0)&&ZC.2E(e[o],t[o],i)):(1c===ZC.1d(t[o])||i)&&(t[o]=e[o])},sy:1n(e,t){t||(t=[]);1j(1a i=0,a=e.1f;i<a;i++)t.1h(e[i])},Tl:1n(e,t){1a i={};ZC.2E(e,i),ZC.2E(t,e),ZC.2E(i,e)},6z:1n(e,t,i){if("g8"!==1o.qm){1w t===ZC.1b[31]&&(t=!0);1a a,n,l=(i=i||[]).1f;1j(1a r in e)if(e.88(r)&&(0===l||l>0&&-1===ZC.AT(i,r))){1a o=r.2x(0,1);if("."!==o&&"#"!==o)if(e[r]3F 3N)if(ZC.V7(r)!==r){1j(e[ZC.V7(r)]=[],a=0,n=e[r].1f;a<n;a++)ZC.6z(e[r][a]),e[ZC.V7(r)].1h(e[r][a]);4s e[r]}1u 1j(a=0,n=e[r].1f;a<n;a++)ZC.6z(e[r][a]);1u e[r]3F 9d&&!(e[r]3F c0)?(ZC.V7(r)!==r&&(e[ZC.V7(r)]={},ZC.2E(e[r],e[ZC.V7(r)]),4s e[r]),t&&ZC.6z(e[ZC.V7(r)],t,i)):ZC.V7(r)!==r&&(e[ZC.V7(r)]=e[r],4s e[r])}}},ZX:1n(e,t){1j(1a i in e){1a a;if(e.88(i))if((a=i.1F(t+"-",""))!==i)if(e[a]=e[i],e[i]3F 3N)1j(1a n=0,l=e[i].1f;n<l;n++)ZC.ZX(e[i][n],t);1u e[i]3F 9d&&!(e[i]3F c0)&&ZC.ZX(e[i],t)}},nN:1n(e){1j(1a t="",i=0,a=e.1f;i<a;i++){1a n=i%2==0?i:e.1f-i;t+=e.2x(n,n+1)}1l t=t.1F(/\\./g,"d")},vG:1n(e){1a t=e;1l t=(t=(t=t.1F("*","&")).1F("9","3")).1F("l","1")},my:1n(e){1l e.1F(/[a-zA-Z]/g,1n(e){1l 5P.eD((e<="Z"?90:122)>=(e=e.eO(0)+13)?e:e-26)})},wd:1n(e,t){1a i=ZC.XI(ZC.zo(e)),a=ZC.XI(ZC.lQ(t)),n=i.1f;if(0===n)1l"";1j(1a l,r,o=i[n-1],s=i[0],C=zq,A=1A.4h(6+52/n)*C;0!==A;){r=A>>>2&3;1j(1a Z=n-1;Z>0;Z--)l=((o=i[Z-1])>>>5^s<<2)+(s>>>3^o<<4)^(A^s)+(a[3&Z^r]^o),s=i[Z]-=l;l=((o=i[n-1])>>>5^s<<2)+(s>>>3^o<<4)^(A^s)+(a[3&Z^r]^o),s=i[0]-=l,A-=C}1l T7(ZC.Dd(ZC.oy(i)))},Tk:1n(e,t){e=fM(e);1a i=ZC.XI(ZC.lQ(e)),a=ZC.XI(ZC.lQ(t)),n=i.1f;if(0===n)1l"";1===n&&(i[n++]=0);1j(1a l,r,o=i[n-1],s=i[0],C=1A.4h(6+52/n),A=0;C-->0;){r=(A+=zq)>>>2&3;1j(1a Z=0;Z<n-1;Z++)l=(o>>>5^(s=i[Z+1])<<2)+(s>>>3^o<<4)^(A^s)+(a[3&Z^r]^o),o=i[Z]+=l;l=(o>>>5^(s=i[0])<<2)+(s>>>3^o<<4)^(A^s)+(a[3&Z^r]^o),o=i[n-1]+=l}1l ZC.zp(ZC.oy(i))},XI:1n(e){1j(1a t=1m 3N(1A.4j(e.1f/4)),i=0;i<t.1f;i++)t[i]=e[4*i]+(e[4*i+1]<<8)+(e[4*i+2]<<16)+(e[4*i+3]<<24);1l t},oy:1n(e){1j(1a t=[],i=0;i<e.1f;i++)t.1h(3W&e[i],e[i]>>>8&3W,e[i]>>>16&3W,e[i]>>>24&3W);1l t},zp:1n(e){1j(1a t="",i=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],a=0;a<e.1f;a++)t+=i[e[a]>>4]+i[15&e[a]];1l t},zo:1n(e){1j(1a t=[],i="Aa"===e.5y(0,2)?2:0;i<e.1f;i+=2)t.1h(5w(e.5y(i,2),16));1l t},Dd:1n(e){1j(1a t="",i=0;i<e.1f;i++)0!==e[i]&&(t+=5P.eD(e[i]));1l t},lQ:1n(e){1j(1a t=[],i=0;i<e.1f;i++)t.1h(e.eO(i));1l t},1k:1n(e){1l-1!==5P(e).1L("e-")?0:""===(e=5P(e).1F(/[^0-9\\.\\-]/gi,""))?0:1A.4b(e)},1Y:1n(e){1l e=6a(e),89(e)?0:e},4w:1n(e,t){1l 1w t===ZC.1b[31]&&(t=2),6a(4Q(e).4C(t))},2l:1n(e){1l 1A.3l(e)},2t:1n(e){1l"dB"!==e&&"0"!==e&&("hI"===e||"1"===e||!!e&&!0)},8B:1n(e){1a t=(e=5P(e).1F(/[^0-9\\.\\%\\-]/gi,"")).1L("%");1l-1!==t&&(e=e.2x(0,t),e=ZC.1Y(e)/100),e},jz:1n(e){1l 2v.zn?2v.zn(e):e},1d:1n(e){1l 1c===e||1w e===ZC.1b[31]?1c:e},7P:1n(e,t){1l 1c===e||1w e===ZC.1b[31]?t:e},gQ:1n(e){1l(e%=2m)<0&&(e+=2m),e},IL:1n(e,t){1l ZC.1Y(e)+""==e+""?t?ZC.1Y(e):ZC.2l(e):-1!==(e+="").1L("%")?ZC.1Y(e.1F("%",""))/100:-1!==e.1L("px")?ZC.1Y(e.1F("px","")):ZC.1Y(e)},QX:1n(e){1l 5w(e,16)},P4:1n(e){1l ZC.1k(e).ai(16)},hK:1n(e,t){1l 5w(e+(t-e)*1A.d6(),10)},5l:1n(e,t,i){1l e=(e=e<t?t:e)>i?i:e},DQ:1n(e,t,i,a){1l a?t<e&&e<i||i<e&&e<t:t<=e&&e<=i||i<=e&&e<=t},BO:1n(e,t){1l 1A.1X(e,t)},CV:1n(e,t){1l 1A.2j(e,t)},dG:1n(e,t){1c===ZC.1d(t)&&(t=!1);1j(1a i=0,a=e.1f,n=-4Q.ir;i<a;i++)t&&0==e[i]||(n=1A.1X(n,e[i]));1l n},YH:1n(e,t){1c===ZC.1d(t)&&(t=!1);1j(1a i=0,a=e.1f,n=4Q.ir;i<a;i++)t&&0==e[i]||(n=1A.2j(n,e[i]));1l n},Bd:1n(){1j(1a e=(Tf*1A.d6()+1<<0).ai(16);e.1f<6;)e="0"+e;1l"#"+e},qo:1n(e,t){1j(1a i,a=ZC.1Y(t),n=4Q.ir,l=0,r=0,o=e.1f;r<o;r++)(i=1A.3l(ZC.1Y(e[r])-a))<n&&(l=r,n=i);1l l},Td:1n(e){1a t=e.2p(".");1l t[t.1f-1]||""},GT:1n(e){1l e.1F(/^\\s\\s*/,"").1F(/\\s\\s*$/,"")},HE:1n(e,t){1l t=t||1A.E,f1(1A.2Z(e)/1A.2Z(t))?1A.2Z(e)/1A.2Z(t):0},U4:1n(e){1l 2m*e/(2*1A.PI)},TH:1n(e){1l 2*e*1A.PI/2m},EF:1n(e){1l 1A.eA(ZC.TH(e))},EL:1n(e){1l 1A.eB(ZC.TH(e))},PI:1n(e){1l!89(6a(e))&&f1(e)},EC:1n(e){1l-1!==e.1L("-")?e.1F(/(\\-[a-z0-9])/g,1n(e){1l e.5E().1F("-","")}):e},V7:1n(e){1l e.5E()!==e&&-1===e.1L("-")&&e.2x(0,1).b0()===e.2x(0,1)?e.1F(/([A-Z])/g,1n(e){1l"-"+e.b0()}).1F(/([0-9]+)/g,1n(e){1l"-"+e.b0()}).1F("-3d","3d"):e},Tc:1n(e){1l ZC.Y4.ek(e)},AK:1n(e){1l 2g.cQ(e)},mf:1n(e,t){1l e[0].1f<t[0].1f?1:e[0].1f>t[0].1f?-1:0},ZZ:1n(e){2v.5I(e,1o.py)},bB:1n(e,t){1l t>=0&&t<=20?e.4C(t):""+e},kG:1n(e,t,i,a){1a n=t.S[i].BY,l=t.S[a].BY;if(e==n)1l i;if(e==l)1l a;1a r=ZC.1k((i+a)/2);if(!t.S[r]){1j(;!t.S[r]&&r<a;)r++;if(r===a){1j(r=ZC.1k((i+a)/2);!t.S[r]&&r>i;)r--;if(r===i)1l 1c}}1a o=t.S[r].BY;1l r!==i&&r!==a?e==o?r:e>o?ZC.kG(e,t,r,a):ZC.kG(e,t,i,r):e==o?r:1c},al:1n(e){1a t,i,a,n,l=[1,1,0,0];if(1o.3I.Bm&&!ZC.3L&&ZC.AK(e)){1a r=ZC.AK(e);1j(t="";r&&(""===t||"2a"===t);)t=ZC.A4(r).2O("5J")||"",r=r.6q;-1!==(i=t.1L("9y("))&&(a=t.1L(")",i),n=t.2x(i+7,a-i).2p(","),l=[ZC.1Y(n[0]),ZC.1Y(n[3]),ZC.1Y(n[4]),ZC.1Y(n[5])])}1l l}},ZC.tg=!1,ZC.aB=5L,ZC.aC=60*ZC.aB,ZC.HR=60*ZC.aC,ZC.9o=24*ZC.HR,ZC.dc=30*ZC.9o,ZC.YR=Bk*ZC.9o,ZC.3B=0,2v.3h=2v.3h||{},3h.5b=3h.5b||1n(e){1a t=1w e;if("4d"!==t||1c===e)1l"3e"===t&&(e=\'"\'+e.1F("\\\\","\\\\\\\\").1F(\'"\',\'"\')+\'"\'),5P(e);1a i,a,n=[],l=e&&e.2G===3N;1j(i in e)"1n"!=1w e[i]&&("3e"===(t=1w(a=e[i]))?a=\'"\'+a.1F("\\\\","\\\\\\\\").1F(\'"\',\'\\\\"\')+\'"\':"4d"===t&&1c!==a&&(a=3h.5b(a)),n.1h((l?"":\'"\'+i+\'":\')+5P(a)));1l(l?"[":"{")+5P(n)+(l?"]":"}")},3h.1q=3h.1q||1n(L1){1l""===L1&&(L1=\'""\'),7u("("+L1+")")},ZC.1b=["1W-1r","2f-4c","2f-6i","4u","1y-1s","6n","-2r-1N zc-2r-1N","6d","7p","1U","d2","ex","6p","mJ-8O","6p-8O","-6E-c","aS","1U-3C","6Z","1s","1M","2e","-2N-c","4V-2i","zc-3l zc-6v","aA-6p","3d-7j","x-2f","y-2f","z-2f",\'" 9s="\',"n6","~9U(3W,3W,3W,0)","~9E(3W,3W,3W)","-2r-1N ","-cE-1B-","79://8x.w3.eq/xS/2F","79://8x.w3.eq/t4/lj","Tb","Ta","Tm","Ux","Uw","Uv","Uu","If-Ut-Up","cB, 1 cr dU 6R:6R:6R dY","6K","7W","6m","1z-x","1z-y","1z-v","Um","9L-8h","4V-8P","4V-2A","2w-1v","2w-2z","2w-2c","2w-1K","1G-1r","1G-1s","Ua 4J","i4 ey 6J","6J.5k.6k-2B","-2B-1P-iS","5J-5C-5F","5J-5C","bg-4i-1s","bg-4i-1M","2N-3Y","1W-3Y","e8-3Y"];1O ao{}if(ZC.vO=1n(e){1g.H=e,1g.ph=1n(e,t){1a i,a=1g,n=a.B9.6P;if(1c!==ZC.1d(t)&&1c!==ZC.1d(n[t])&&(n=n[t]),1c!==ZC.1d(n[e])){1a l=n[e];1l 1c===ZC.1d(l[2])&&(l[2]=ZC.AN.QR(l[1],10)),1c===ZC.1d(l[3])&&(l[3]=ZC.AN.QR(l[1],10)),l}1a r=["#Ul","#Uk","#Ui","#Ug","#Uf","#Ub","#S6"];i=1c!==ZC.1d(r[e-a.B9.6P.1f])?r[e-a.B9.6P.1f]:"#"+ZC.Y4.ek(e).5y(e%20,6);1a o=ZC.AN.QR(i,10),s=ZC.AN.QR(i,20),C="#tT";1l a.B9.6P&&a.B9.6P[0]&&a.B9.6P[0][0]&&(C=a.B9.6P[0][0]),[C,i,o,s]},1g.kT=1n(e){e&&ZC.2E(e,1g.B9,!0)},1g.rY=1n(e){1a t=1g;1c!==ZC.1d(t.O3[e])&&(ZC.6z(t.O3[e]),ZC.2E(t.O3[e],t.B9))},1g.O3={},ZC.2E(1o.Bj,1g.O3),1g.O3.ch={6P:[["#2T","#Sy","#Rx","#Ru"],["#2T","#Rs","#Rr","#Rq"],["#2T","#Rp","#Ro","#Rk"],["#2T","#Rj","#Rg","#Rf"],["#2T","#Rc","#Ry","#Rz"],["#2T","#Sn","#Sx","#Sw"]],3a:{cI:{dH:{2n:.5,"1W-1r":"#4L",1r:"#4v","2s-2e":15,6A:1,1D:"nO..."}},"1W-1r":"#qB #Sv",5D:{"2s-2e":14,6A:1,1r:"#2T","1W-1r":"#Su #St",3x:6},7T:{"2s-2e":11,6A:1,1r:"#8D","2w-1v":30,3x:6},7k:{"2s-2e":10,1r:"#8D",1s:"100%",6A:1,"1D-3y":"2z",1M:20,2w:"3i 0 0 3i",3x:5},gB:{"2s-2e":12,1r:"#8D","1D-3y":"3G","9h-3y":"6r",1D:""},4y:{"2s-2e":11,"1y-1s":2,"1y-1r":"#fO",1P:{7M:!0},"3Q-1y":{"1y-1s":1,"1y-1r":"#fO"},2i:{2h:1,"1y-1s":1,"1y-1I":"2V","1y-1r":"#yK",2n:.2},"4U-2i":{2h:1,"1y-1s":1,"1y-1I":"2V","1y-1r":"#Bq",2n:.1},43:{2h:1,2e:6,6d:ZC.1b[18],"1y-1s":2,"1y-1r":"#fO"},"4U-43":{2h:1,2e:4,6d:ZC.1b[18],"1y-1s":1,"1y-1r":"#fO"},1H:{1r:"#yK",7M:!0}},"1Z-x":{2U:{1M:16},3r:{1M:16}},"1Z-y":{2U:{1s:16},3r:{1s:16}},1V:{"1W-1r":"#2T","1G-1s":1,2n:.75,"1G-2n":.75,"1G-1r":"#cT","3K-6N":3,5Z:{3x:"4 6",1r:"#2T","1G-1s":1,"1G-1r":"#fO","1W-1r":"#fO"},9Z:{3x:"2 6","1W-1r":"#86","1G-1s":1,"1G-1r":"#cT"},1Q:{"1G-1r":"#8D","1G-1s":1}},1B:{"1U-3C":{7M:!0},1Q:{3K:1,"1y-1s":1,"1G-1s":1},"2N-1Q":{"1y-1s":1,"1G-1s":1}},2i:{"1y-1s":1,"1y-1r":"#4L",2n:1,"1z-1H":{1D:"%l",3x:"3 6"},"1B-1H":{3x:"3 6"}}},1y:{1B:{"3K-2n":.5,1Q:{2e:4},"2N-1Q":{2e:5}}},1N:{1B:{"3K-2n":.5,1Q:{2e:4},"2N-1Q":{2e:5}}},5x:{1B:{"3j-2f":90,3K:0}},6b:{1B:{"3j-2f":180,3K:0}},5S:{2u:{"4K-a1":[0,0]},1B:{3K:0}},7Y:{1B:{3K:0}},8k:{1B:{3K:0}},81:{1B:{"3j-2f":0,3K:0}},6y:{1B:{1Q:{2e:4},"2N-1Q":{2e:5}}},8t:{1B:{1Q:{2e:4},"2N-1Q":{2e:5}}},5i:{1B:{1Q:{"1G-1s":0},"2N-1Q":{"1G-1s":0}}},6B:{1B:{1Q:{"1G-1s":0},"2N-1Q":{"1G-1s":0}}},3P:{1B:{"1G-1s":1}},8Y:{1B:{"1G-1s":1}},7g:{1B:{1Q:{2e:3},"2N-1Q":{2e:4}},"1z-k":{2i:{2n:.5,"1W-1r":"#9b #7b"}}},8E:{"1z-r":{"1W-1r":"-1",2i:{2n:.5,"1W-1r":"#9b #7b"},1P:{"2b-r":0},9B:{2e:1,2C:[{"1W-1r":"#4L",2n:.8},{"1W-1r":"#cT",2n:.8}]}}},aa:{2u:{2w:"50 100"},4y:{"1y-1s":0,43:{"1y-1s":0},"4U-43":{"1y-1s":0},2i:{"1y-1s":0},"4U-2i":{"1y-1s":0}},"1z-y":{2i:{2n:.25,"1W-1r":"-1 #8Z"}},"1z-y-n":{2i:{2n:.25,"1W-1r":"-1 #8Z"}},1B:{"1G-1s":1}},au:{2u:{2w:"50 100"},"1z-x":{1H:{"2s-2f":3U}},"1z-x-n":{1H:{"2s-2f":90}},4y:{"1y-1s":0,43:{"1y-1s":0},"4U-43":{"1y-1s":0},2i:{"1y-1s":0},"4U-2i":{"1y-1s":0}},"1z-y":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"},2i:{2n:.25,"1W-1r":"#8Z -1"}},"1z-y-n":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"},2i:{2n:.25,"1W-1r":"#8Z -1"}},1B:{"1G-1s":1}},5z:{1B:{1Q:{1J:"3A",2e:4},"2N-1Q":{2e:5}}},9c:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":0,"1y-1s":1}},8a:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":0,"1y-1s":1}},aM:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":1}},6T:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":1}},7o:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":1}},7e:{1B:{"1G-1s":1}},"-":""},1g.O3.8T={6P:[["#2T","#yI","#yI","#Bg"],["#2T","#yH","#yH","#So"],["#2T","#tY","#tY","#Sm"],["#2T","#yC","#yC","#Sa"],["#2T","#yw","#yw","#Sk"],["#2T","#yu","#yu","#Si"],["#2T","#ys","#ys","#Sh"],["#2T","#yp","#yp","#Sg"],["#2T","#Bf","#Bf","#tY"]],3a:{cI:{dH:{2n:.5,"1W-1r":"#4L",1r:"#4v","2s-2e":15,6A:1,1D:"nO..."}},"1W-1r":"#jE",5D:{"2s-2e":21,6A:1,1r:"#e6","1W-1r":"2a",3x:6},7T:{"2s-2e":11,6A:1,1r:"#e6","2w-1v":30,3x:6},7k:{"2s-2e":10,1r:"#e6",1s:"100%",6A:1,"1D-3y":"2z",1M:20,2w:"3i 0 0 3i",3x:5},gB:{"2s-2e":12,1r:"#8D","1D-3y":"3G","9h-3y":"6r",1D:"No ey","1W-1r":"#Sd",2n:.8},4y:{"2s-2e":11,"1y-1s":1,"1y-1r":"#e3",1P:{"2s-2e":12,7M:!0,1r:"#QA"},"3Q-1y":{"1y-1s":1,"1y-1r":"#7R"},2i:{2h:1,"1y-1s":1,"1y-1I":"2V","1y-1r":"#Ln",2n:1},"4U-2i":{2h:1,"1y-1s":1,"1y-1I":"2V","1y-1r":"#Bq",2n:.1},43:{2h:1,2e:5,6d:ZC.1b[18],"1y-1s":1,"1y-1r":"#e3"},"4U-43":{2h:1,2e:3,6d:ZC.1b[18],"1y-1s":1,"1y-1r":"#d7"},1H:{1r:"#e6",7M:!0}},"1z-x":{iN:!0,2i:{2h:!1}},1Z:{2U:{"1W-1r":"#u7",2w:1},3r:{"1W-1r":"#d7","1G-9v":6}},"1Z-x":{2U:{1M:16,"1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a"},3r:{1M:10,"1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a"}},"1Z-y":{2U:{1s:16,"1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a"},3r:{1s:10,"1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a"}},"1Z-xi":{2U:{1s:16,"1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a"},3r:{1s:10,"1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a"}},"1Z-yi":{2U:{1M:16,"1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a"},3r:{1M:10,"1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a"}},2A:{"1W-1r":"#2T","1G-1s":1,"1G-1r":"#d7",4g:!0,4K:{"1W-1r":"#4L"},6L:{2n:0},3r:{1s:11,"1G-1s":2,"1G-9v":3,"1y-1r":"#tX","1G-1r":"#d7","1W-1r":"#u7"},"3r-1v":{1M:11},"3r-2c":{1M:11}},2H:{3K:1,"3K-2f":45,"3K-6N":1,"3K-2n":.25,"1G-1s":1,"1G-1r":"#2T","1G-2n":1},3H:{"dJ-3H":1,"1W-1r":"#jb"},1V:{"1W-1r":"#2T","1G-1s":1,3K:0,"3K-2n":.2,2n:1,"1G-2n":1,"1G-1r":"#dm",5Z:{3x:"5 0 5 10",1r:"#Gz","1W-1r":"2a","1G-1s":0,"1G-1v":"gM 2V 2a","1G-2c":"80 2V #dm"},9Z:{3x:"5 0 5 10","1G-1v":"80 2V #dm"},tE:{"1W-1r":"#u7","1y-1r":"#tX",2w:2,1M:8,"1y-1s":2,"1y-1I":"fJ"},aO:{"1y-1r":"#tX","1y-1s":2,1I:"Hf"},1Q:{"1G-1r":"#2T","1G-1s":1},"3g-on":{"1W-1r":"#jb"},"3g-6U":{"1W-1r":"#tH"},1Z:{2U:{"1W-1r":"2a","2w-1v":3,"2w-2c":3},3r:{"1W-1r":"#tH","1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a","1G-9v":6,1s:12,1M:12}}},1B:{"1U-3C":{7M:!0},1Q:{3K:0,"1y-1s":1,"1G-1s":1,"1G-1r":"#2T"},"2N-1Q":{"1y-1s":1,"1G-1s":1},El:!0},2i:{"1y-1s":1,"1y-1r":"#e3",2n:1,"1z-1H":{1D:"%l",3x:"3 6"},"1B-1H":{3x:"3 6"}}},1y:{1B:{"1y-1s":2,3K:0,1Q:{2e:4},"2N-3Y":{},"2N-1Q":{2e:5,"1G-1s":1,"1G-1r":"#2T"}}},1N:{1B:{"1y-1s":2,3K:0,"2n-1N":.25,"1W-1r-1I":"2V",1Q:{2e:4},"2N-3Y":{},"2N-1Q":{2e:5,"1G-1s":1,"1G-1r":"#2T"}}},5x:{1B:{"3j-2f":90,3K:0}},6b:{1B:{"3j-2f":180,3K:0}},5S:{2u:{"4K-a1":[0,0]},1B:{3K:0},"1z-x":{2i:{2h:!0}}},7Y:{1B:{3K:0}},8k:{1B:{3K:0,7v:{"1G-1s":1,"1G-1r":"#2T",1M:8}}},81:{1B:{"3j-2f":0,3K:0,7v:{"1G-1s":1,"1G-1r":"#2T",1s:8}}},6y:{1B:{"1y-1r":"%jh-0","1G-1r":"%jh-0",1Q:{2e:5},"2N-1Q":{2e:6}},"1z-x":{2i:{2h:!0}}},8t:{1B:{"1y-1r":"%jh-0","1G-1r":"%jh-0",1Q:{2e:4},"2N-1Q":{2e:5}},"1z-x":{2i:{2h:!0}}},5i:{1B:{1Q:{"1G-1s":1,"1G-1r":"#2T"},"2N-1Q":{"1G-1s":1,"1G-1r":"#2T"}},"1z-x":{2i:{2h:!0}}},6B:{1B:{1Q:{"1G-1s":1,"1G-1r":"#2T"},"2N-1Q":{"1G-1s":1,"1G-1r":"#2T"}},"1z-x":{2i:{2h:!0}}},3P:{1B:{3K:0,"1G-1s":1,"1U-3C":{6d:"in","2s-2e":16,1D:"%2r-8l-1U%"}}},8Y:{1B:{"1G-1s":1}},7g:{1B:{3K:0,"1y-1s":2,"1W-1r":"%6P-1","6L-1N":!0,1Q:{2e:4},"2N-1Q":{2e:5,"1G-1r":"#2T"}},"1z-k":{2i:{"1y-1s":1,"1y-1I":"2V","1y-1r":"#e3","1y-eQ-2e":6,"1y-hE-2e":6,2n:1,"1W-1r":"#2T #Hb"},43:{"1y-1r":"#e3","1y-1s":1,2e:10}},"1z-r":{},"1z-v":{"3Q-1y":{"1y-1r":"#e3","1y-1s":1},43:{"1y-1r":"#e3","1y-1s":1},2i:{"1y-1r":"#iA","1y-1s":1}}},8E:{1B:{3K:0},1z:{"2e-7f":1},"1z-r":{iC:3U,43:{2e:11,"1y-1s":2},"1W-1r":-1,2i:{"1W-1r":"#2T"},9B:{2e:8,"1W-1r":"#iA"},3G:{2e:20,"1W-1r":"#2T","1G-1s":6,"1G-1r":"#Bg"}}},aa:{2u:{2w:"50 100"},4y:{"1y-1s":0,43:{"1y-1s":0},"4U-43":{"1y-1s":0},2i:{"1y-1s":1,"1y-1I":"2V","1y-1r":"#iA","1y-eQ-2e":6,"1y-hE-2e":6,2n:1},"4U-2i":{"1y-1s":0}},"1z-x":{2h:!1,2i:{2h:0}},"1z-y":{2i:{"1W-1r":"-1",2n:1}},"1z-y-n":{2i:{"1W-1r":"-1"}},1B:{"1G-1s":1,"1G-1r":"#2T",3K:0,"2N-3Y":{"1y-1r":"-1","1G-1r":"-1"}}},au:{2u:{2w:"50 100"},"1z-x":{2h:!1,2i:{2h:0},1H:{"2s-2f":3U}},"1z-x-n":{1H:{"2s-2f":90}},4y:{"1y-1s":0,43:{"1y-1s":0},"4U-43":{"1y-1s":0},2i:{"1y-1s":1,"1y-1I":"2V","1y-1r":"#iA","1y-eQ-2e":6,"1y-hE-2e":6,2n:1},"4U-2i":{"1y-1s":0}},"1z-y":{2i:{"1W-1r":"-1",2n:1},1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-y-n":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"},2i:{"1W-1r":"-1"}},1B:{"1G-1s":1,"1G-1r":"#2T",3K:0,"2N-3Y":{"1y-1r":"-1","1G-1r":"-1"}}},5z:{1B:{"1W-1r":"%6P-1",1Q:{1J:"3A",2e:4},"2N-1Q":{2e:5}}},9c:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":0,"1y-1s":1}},8a:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":0,"1y-1s":1}},aM:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":1}},6T:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":1}},7o:{4y:{"1y-1r":"#7b",43:{2h:!1}},1B:{"1G-1s":1}},7e:{1B:{"1G-1s":1}},b9:{1B:{"1G-1s":0,3K:0,2n:.75,"1W-1r":"%6P-1"}},ak:{5k:{"6k-2B":{2h:!0,1s:"Hz",3x:"5 0","1W-1r":"#ju","1G-1s":0,"1G-1r":"#ju",2K:"1K",7O:{2h:ZC.2L,2n:0},aP:{"1W-1r":"#4v",1J:"oJ",2n:1},1P:{"1W-1r":"#ju","1D-3y":"1K",3x:"4 20 4 15","1G-1s":0,"1G-1r":"#ju","2s-2e":"yl",1r:"#2T","2N-3Y":{"1W-1r":"#Io"}},8O:{"1y-1s":1,"1y-1r":"#Cd"}},"6k-2B[2L]":{1P:{3x:"6 10 6 6"}}}},"-":""},1g.O3.8T.3a["9z-x"]=1g.O3.8T.3a["9z-y"]=1g.O3.8T.3a.2i,1g.O3.aW={},ZC.2E(1g.O3.8T,1g.O3.aW,!0,!0),ZC.2E({3a:{"1W-1r":"#78",5D:{1r:"#2T"},7T:{1r:"#2T"},7k:{1r:"#2T"},4y:{"1y-1r":"#7R",1P:{1r:"#7R"},"3Q-1y":{"1y-1r":"#7R"},2i:{"1y-1r":"#8Z"},"4U-2i":{"1y-1r":"#8Z"},43:{"1y-1r":"#7R"},"4U-43":{"1y-1r":"#7R"},1H:{1r:"#7R"}},1Z:{2U:{"1W-1r":"#Ic"},3r:{"1W-1r":"#d7"}},"1Z-x":{2U:{"1G-1v":"gM 2V 2a","1G-2z":"5u 2V #7R","1G-2c":"5u 2V #7R","1G-1K":"5u 2V #7R"},3r:{"1G-1v":"2a","1G-2z":"2a","1G-2c":"2a","1G-1K":"2a"}},"1Z-y":{2U:{"1G-1v":"5u 2V #7R","1G-2z":"gM 2V 2a","1G-2c":"5u 2V #7R","1G-1K":"5u 2V #7R"}},2A:{"1W-1r":"#78"},2H:{"1G-1r":"#4v"},1V:{"1W-1r":"#78",5Z:{1r:"#2T",tE:{"1W-1r":"#e6","1y-1r":"#tF"}},9Z:{1r:"#7R","1W-1r":"#e6","1G-1v":"gM 2V 2a","1G-2z":"5u 2V #d7","1G-2c":"5u 2V #d7","1G-1K":"5u 2V #d7"},tE:{"1W-1r":"#e6","1y-1r":"#tF"},aO:{"1y-1r":"#tF"},"3g-6S":{1r:"#7R"},"3g-on":{"1W-1r":"#tH"},"3g-6U":{"1W-1r":"#jb"},1Q:{"1G-1r":"#4v"},1P:{1r:"#7R"}},1B:{1Q:{"1G-1r":"#78"}},2i:{"1y-1r":"#7R","1z-1H":{"1W-1r":"#jb"},"1B-1H":{"1W-1r":"#78",1r:"#tT","1G-1r":"#I5"}}},1y:{1B:{"2N-1Q":{"1G-1r":"#78"}}},1N:{1B:{"2N-1Q":{"1G-1r":"#78"}}},8k:{1B:{7v:{"1G-1r":"#78"}}},81:{1B:{7v:{"1G-1r":"#78"}}},5i:{1B:{1Q:{"1G-1r":"#78"},"2N-1Q":{"1G-1r":"#78"}}},6B:{1B:{1Q:{"1G-1r":"#78"},"2N-1Q":{"1G-1r":"#78"}}},3P:{1B:{"1G-1r":"#78"}},7g:{1B:{"2N-1Q":{"1G-1r":"#78"}},"1z-k":{2i:{"1y-1r":"#8Z","1W-1r":"#78 #HU"},43:{"1y-1r":"#7R"}},"1z-v":{"3Q-1y":{"1y-1r":"#8Z"},43:{"1y-1r":"#8Z"},2i:{"1y-1r":"#8Z"}}},8E:{"1z-r":{2i:{"1W-1r":"#78"},9B:{"1W-1r":"#HL"}}},aa:{4y:{2i:{"1y-1r":"#8Z"}},1B:{"1G-1r":"#78","2N-3Y":{"1y-1r":"#8Z","1G-1r":"#78"}}},au:{4y:{2i:{"1y-1r":"#8Z"}},"1z-y":{2i:{2n:.25,"1W-1r":"#Cc -1"}},"1z-y-n":{2i:{2n:.25,"1W-1r":"#Cc -1"}},1B:{"1G-1r":"#78","2N-3Y":{"1y-1r":"#8Z","1G-1r":"#78"}}},ak:{5k:{"6k-2B":{aP:{"1W-1r":"#tT"}}}},"-":""},1g.O3.aW,!0,!0),1g.O3.aW.3a["9z-x"]=1g.O3.aW.3a["9z-y"]=1g.O3.aW.3a.2i,1g.O3.lN={3a:{5D:{1s:"100%",3x:"1 2 2","2s-2e":10},7T:{1s:"100%",3x:"1 2 2","2w-1v":14,"2s-2e":9},2u:{1s:"100%",1M:"100%",2w:"18 4 4 4"},4y:{2h:0},2H:{3K:0,"1G-9v":7},1V:{2h:0},2A:{2h:0},2i:{"1y-1s":1,"1y-1r":"#86",2n:1,"1z-1H":{1D:"%l",3x:"3 6"},"1B-1H":{"1G-1r":"#86","1G-9v":5,3x:"3 6"}},1B:{3K:0,"1U-3C":{2h:0},"2N-3Y":{2h:0},"2N-1Q":{2h:0},"1X-pu":qJ,"1X-d3":qJ}},1y:{1B:{"1y-1s":1,1Q:{1J:"2a"}}},9c:{"3d-7j":{5v:20,2f:45,"x-2f":-20,"y-2f":0,"z-2f":0,3H:.9}},1N:{1B:{"1y-1s":1,1Q:{1J:"2a"}}},8a:{"3d-7j":{5v:20,2f:45,"x-2f":-20,"y-2f":0,"z-2f":0,3H:.9}},6y:{4y:{2b:5},1B:{1Q:{2e:3,3K:!1,2n:.8}}},8t:{4y:{2b:5},1B:{1Q:{2e:3,3K:!1,2n:.8}}},5i:{4y:{2b:15},1B:{1Q:{"3j-1J":"2a",3K:!1,2n:.8},"2j-2e":3,"1X-2e":9}},6B:{4y:{2b:15},1B:{1Q:{"3j-1J":"2a",3K:!1,2n:.8},"2j-2e":3,"1X-2e":9}},3P:{2u:{2w:"18 4 4 4"},1B:{"1U-3C":{2h:0}},1z:{"2e-7f":.95}},7e:{2u:{2w:"32 4 4 4"},1B:{"1U-3C":{2h:0}},1z:{"2e-7f":1}},8Y:{2u:{2w:"18 4 4 4"},1B:{"1U-3C":{2h:0}},1z:{"2e-7f":.95}},7g:{2u:{2w:"18 4 4 4"},1B:{"1y-1s":1,1Q:{3K:0,2e:2}},1z:{"2e-7f":.95}},6T:{"3d-7j":{5v:20,2f:45,"x-2f":-20,"y-2f":0,"z-2f":0,3H:.9}},7o:{"3d-7j":{5v:20,2f:45,"x-2f":0,"y-2f":-20,"z-2f":0,3H:.9}},b9:{2u:{2w:"18 4 4 4"},1B:{"1G-1s":0}},8E:{2u:{2w:"18 4 4 4"},1B:{z7:[5]},4y:{2h:1},1z:{"2e-7f":.9},"1z-r":{"1W-1r":"-1",iC:3U,43:{2h:0},1P:{2h:0},2i:{2h:0},9B:{2e:6,"1W-1r":"#iA",2C:[]},3G:{"1G-1s":0,2e:2,"1W-1r":"#2T"}}},aa:{2u:{2w:"18 4 4 4"}},au:{2u:{2w:"18 4 4 4"}},8k:{1B:{"2U-8A":.5,7v:{"1G-1s":0,1M:4}}},81:{1B:{"2U-8A":.5,7v:{"1G-1s":0,1s:4}}},5z:{1B:{"1y-1s":1,1Q:{2h:0},"2N-3Y":{2h:0}}},"-":""},1g.O3.Hw={6P:[["#4v","#Hv","#Cd","#Hs"],["#4v","#Hr","#Id","#Ig"],["#4v","#Ir","#Ix","#Iw"],["#4v","#Iu","#It","#dm"],["#4v","#Iq","#Ii","#Ik"],["#4v","#Ij","#Cl","#Hd"],["#4v","#Cp","#Cq","#Hh"]],3a:{"1W-1r":"#111",5D:{1r:"#2T"},7T:{1r:"#8D"},4y:{"2s-2e":11,"1y-1s":2,"1y-1r":"#86",2i:{2h:1,"1y-1s":1,"1y-1I":"2V","1y-1r":"#86",2n:.2},"4U-2i":{2h:1,"1y-1s":1,"1y-1I":"2V","1y-1r":"#86",2n:.2},43:{2h:1,2e:6,6d:ZC.1b[18],"1y-1s":2,"1y-1r":"#86"},"4U-43":{2h:1,2e:4,6d:ZC.1b[18],"1y-1s":1,"1y-1r":"#86"},1H:{1r:"#2T"},1P:{1r:"#2T"}}},7g:{"1z-k":{2i:{2n:.5,"1W-1r":"#Hi #8D"}}},"-":""},1g.O3.Hk=1g.O3.lN,1g.B9={ak:{5k:{aj:[{id:"wS",3Z:"4q"},{id:"vi",3Z:"4q"},{id:"uE",3Z:"2a"},{id:"uz",3Z:"2a"},{id:"uy",3Z:"2a"},{id:"uj",3Z:"2a"},{id:"3D",3Z:"2a"},{id:"uh",3Z:"2a"},{id:"uO",3Z:"2a"},{id:"uM",3Z:ZC.d1?"2a":"4q"},{id:"sg",3Z:ZC.d1?"2a":"4q"}],ed:{1J:1,2K:"rb"},4X:{2w:"10 3i 3i 10",1s:30,1M:22,3x:4,1P:{"1W-1r":"#lA","1G-1s":1,"1G-1r":"#Hg"},"1P-6U":{"1W-1r":"#9b","1G-1r":"#7b"}},7Q:{"1W-1r":"#2T",1r:"#4v"},"6k-2B":{3x:0,"1G-1s":1,"1G-1r":"#4v",7O:{2h:ZC.2L,2w:"5 3i 3i 5",2n:.8,"1W-1r":"#8D #4L","1G-9v":8,1s:40,1M:40},aP:{"1W-1r":"#2T #Cq",1J:"xB",2n:.8},1P:{"1W-1r":"#Ha","1D-3y":"1K",3x:"4 20 4 8","1G-1s":1,"1G-1r":"#4v",1r:"#2T","2N-3Y":{"1W-1r":"#Hj"}},8O:{"1y-1s":1,"1y-1r":"#cZ"}},"6k-2B[2L]":{1P:{3x:"6 10 6 6"}}}},6P:[],3a:{5D:{1s:"100%",6A:1,"2s-2e":13},7T:{1s:"100%",6A:1,"2s-2e":11},1Z:{2U:{"1W-1r":"#qB","1G-1r":"#7b"},3r:{"1W-1r":"#7b","1G-1r":"#86","1G-1s":2,"1G-1v":"5u 2V #9b","1G-1K":"5u 2V #9b","1G-2z":"5u 2V #4L","1G-2c":"5u 2V #4L"}},"1Z-x":{2U:{1M:16},3r:{1M:16}},"1Z-y":{2U:{1s:16},3r:{1s:16}},"1Z-xi":{2U:{1s:16},3r:{1s:16}},"1Z-yi":{2U:{1M:16},3r:{1M:16}},2A:{1s:"100%",1M:50,2w:"3i 50 20 50","1G-1s":1,3K:0,"1W-1r":"#Cp","1G-1r":"#4L",4K:{2n:.5,"1W-1r":"#8D"},6L:{2n:.1,"1W-1r":"#4L"},3r:{1s:9,1M:16,"1G-1s":1,"1y-1s":1,"1y-1r":"#111","1G-1r":"#Hm","1G-9v":2,"1W-1r":"#Cl"},"3r-1v":{1s:16,1M:9},"3r-2c":{1s:16,1M:9}},2u:{1s:"100%",1M:"100%",2w:"60 50 65 50"},"2u[2A]":{2w:"60 50 105 50"},4y:{"1y-1s":1,2i:{"1y-1s":1,"1y-1r":"#7b"},43:{2e:6,"1y-1s":2},"4U-2i":{"1y-1s":1,"1y-1r":"#7b"},"4U-43":{2e:4,"1y-1s":1},1H:{6A:1,3x:6,7M:!0},1P:{3x:2,"3i-3y":!0,7M:!0},1Q:{"1y-1s":1,"1y-1r":"#4v","1W-1r":"#86"},"5J[5C]":{1P:{"2s-2e":10,3x:2,1r:"#4v","1W-1r":"#2T"}}},"4y[3d]":{"1W-1r":"#86"},"1z-y[2q]":{1H:{"2s-2f":3U},1P:{"1D-3y":"2z"}},"1z-y[5B]":{1H:{"2s-2f":90},1P:{"1D-3y":"1K"}},1B:{4J:{"1y-1s":1,"1y-1r":"#8D",2e:.5},"1U-3C":{7M:!0,1D:"%v",6A:1,6d:"3i",3K:1},"2H-1D":"%v",3K:1,"1y-1s":1,1Q:{1J:"9j",3K:1},"5V-3Y":{3K:!0,"3K-uI":2,"3K-6N":1,"3K-2n":.91}},2H:{3K:1,3x:"4 8","3K-6N":3,"2b-y":ZC.2L?-40:-20},"2H[4N]":{3x:"4 8","2b-y":0},2i:{1Q:{1J:"3A"},"1B-1H[bC]":{1D:\'<b 1I="1r:%1r">%1B-1D:</b> %2r-1U\',3x:10,"1W-1r":"#2T #9b","1G-1s":1,"1G-1r":"#4L",1r:"#4v","1D-3y":"1K"},"1B-1H[aq]":{1D:\'<b 1I="1r:%1r">%1B-1D:</b> %2r-1U\',3x:5,"1W-1r":"#2T #9b","1G-1s":1,"1G-1r":"#4L",1r:"#4v","1D-3y":"1K"}},3H:{"dJ-3H":1,"1G-1s":0,"1W-1r":"#lA",2n:.25,1H:{2h:!1,"1W-1r":"#2T","2s-2e":10,3x:2,"1G-1s":1,"1G-1r":"#4L"}},7L:{"1G-1s":1,"1G-1r":"#4v","1W-1r":"#cT",2e:4},"1V[2K]":{2w:10},1V:{"1W-1r":"#9b",2n:1,3K:1,2w:"10 10 3i 3i",3x:"4 2 4 2",1P:{"1D-3y":"1K",2w:"2 6 2 4",3x:"2 4"},"1P-6U":{2n:.25},1Q:{3K:0,2e:6,"1G-1r":"#4L","1G-1s":1},5Z:{"2s-2e":12,"1D-3y":"1K",6A:1},9Z:{"1D-3y":"1K"},aO:{"1y-1r":"#4v","1y-1s":1},"3g-6S":{1r:"#4v"},"3g-on":{"1W-1r":"#vN"},"3g-6U":{"1W-1r":"#4L"},1Z:{2U:{1s:12,1M:12,"1W-1r":"#qB","1G-1r":"#7b"},3r:{1s:12,1M:12,"1W-1r":"#7b","1G-1r":"#86","1G-1s":2,"1G-1v":"5u 2V #9b","1G-1K":"5u 2V #9b","1G-2z":"5u 2V #4L","1G-2c":"5u 2V #4L"}}}},5x:{1B:{"1U-3C":{6d:"1v-4R"}}},6T:{1B:{"1U-3C":{6d:"1v-4R"}},"3d-7j":{5v:40,2f:45,"x-2f":-20,"y-2f":0,"z-2f":0}},aM:{"3d-7j":{5v:40,2f:45,"x-2f":-20,"y-2f":0,"z-2f":0}},6b:{"1z-y":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-y-n":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x[2q]":{1H:{"2s-2f":3U}},"1z-x[5B]":{1H:{"2s-2f":90}},1B:{"1U-3C":{6d:"1v-4R"}}},bQ:{"1z-y":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-y-n":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x[2q]":{1H:{"2s-2f":3U}},"1z-x[5B]":{1H:{"2s-2f":90}}},c2:{1B:{"3j-2f":0},"1z-y":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-y-n":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x[2q]":{1H:{"2s-2f":3U}},"1z-x[5B]":{1H:{"2s-2f":90}}},7o:{"1z-y":{1H:{"2s-2f":0}},"1z-x":{1H:{"2s-2f":3U}},"1z-y-n":{1H:{"2s-2f":0}},"1z-x-n":{1H:{"2s-2f":90}},"3d-7j":{5v:40,2f:45,"x-2f":0,"y-2f":-20,"z-2f":0},1B:{"1U-3C":{6d:"1v-4R"}}},81:{"1z-y":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x":{1H:{"2s-2f":3U}},"1z-y-n":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x-n":{1H:{"2s-2f":90}}},1y:{1B:{"1y-1s":4,1Q:{1J:"3A",2e:4}}},1N:{1B:{"1y-1s":4,1Q:{1J:"3A",2e:4},"1U-3C":{6d:"1v"}}},9c:{"3d-7j":{5v:40,2f:45,"x-2f":-20,"y-2f":0,"z-2f":0},1B:{"1G-1s":1,"1y-1s":1,1Q:{1J:"3A",2e:4,2n:1,2h:0}}},8a:{"3d-7j":{5v:40,2f:45,"x-2f":-20,"y-2f":0,"z-2f":0},1B:{"1G-1s":1,"1y-1s":1,1Q:{1J:"3A",2e:4,2n:1,2h:0},"1U-3C":{6d:"1v"}}},6y:{4y:{2b:10},1B:{1Q:{1J:"3A",2e:4},"1U-3C":{6d:"1v"}}},4B:{4y:{2b:10},1B:{"2n-1N":.4,1Q:{1J:"2a"},"1U-3C":{6d:"1v"}}},8t:{4y:{2b:10},"1z-y":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x":{1H:{"2s-2f":3U}},"1z-y-n":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x-n":{1H:{"2s-2f":90}},1B:{1Q:{1J:"3A",2e:4},"1U-3C":{6d:"1v"}}},5i:{4y:{2b:40},1B:{1Q:{1J:"3A","3j-1J":"8H","3j-2b-x":-.2,"3j-2b-y":-.2},"2N-1Q":{"3j-1J":"8H","3j-2b-x":-.2,"3j-2b-y":-.2},"1U-3C":{6d:"6r",1D:"%2r-2e-1U"},"2H-1D":"%2r-2e-1U"}},6B:{4y:{2b:40},"1z-y":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x":{1H:{"2s-2f":3U}},"1z-y-n":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x-n":{1H:{"2s-2f":90}},1B:{1Q:{1J:"3A","3j-1J":"8H","3j-2b-x":-.2,"3j-2b-y":-.2},"2N-1Q":{"3j-1J":"8H","3j-2b-x":-.2,"3j-2b-y":-.2},"1U-3C":{6d:"6r",1D:"%2r-2e-1U"},"2H-1D":"%2r-2e-1U"}},gZ:{"1z-y":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x":{1H:{"2s-2f":3U}},"1z-y-n":{1H:{"2s-2f":0},1P:{"1D-3y":"3G"}},"1z-x-n":{1H:{"2s-2f":90}}},3P:{2u:{2w:"35 5 5 5"},1z:{"2e-7f":"3i","1y-1s":0,2i:{"1y-1s":0},"4U-2i":{"1y-1s":0}},1B:{"3j-1J":"8H","1U-3C":{98:{"1y-1s":1},6d:"4R",1D:"%t",2h:1}}},7e:{"3d-7j":{"x-2f":38,"y-2f":0,"z-2f":0},2u:{2w:"25 5 5 5"},1z:{"2e-7f":"3i","1y-1s":0,2i:{"1y-1s":0},"4U-2i":{"1y-1s":0}},1B:{"3j-1J":"9r","1U-3C":{98:{"1y-1s":1},6d:"4R",1D:"%t",2h:1}}},8Y:{2u:{2w:"40 5 15 5"},1z:{"2e-7f":.8,"1y-1s":0,2i:{"1y-1s":0},"4U-2i":{"1y-1s":0}},1B:{"3j-1J":"8H","1U-3C":{98:{"1y-1s":1},1D:"%t",2h:1}}},b9:{2u:{2w:"30 10 10 10"},1B:{2n:.5,"1G-1s":4},1z:{"2e-7f":.65,"1y-1s":0,2i:{"1y-1s":0},"4U-2i":{"1y-1s":0}}},7g:{4y:{2i:{"1y-1s":1,"1y-1r":"#4L","1W-1r":"-1"},43:{"1y-1s":1},1P:{"3i-3y":!1}},1z:{2h:0,"2e-7f":.7},"1z-k":{"3Q-2f":3U},2u:{2w:"40 5 5 5"},1B:{"1y-1s":4,7j:"1y",1Q:{1J:"3A"}}},8E:{4y:{2i:{"1G-1s":1,"1G-1r":"#4L","1W-1r":"-1"}},1z:{"1y-1s":0,2i:{"1y-1s":0},"4U-2i":{"1y-1s":0},"2e-7f":.7},"1z-r":{"3Q-2f":3U,"1W-1r":"#2T",2i:{"1y-1s":0},43:{6d:"5W"},1P:{"2b-r":"-45%"}},1B:{2e:"85%"},2u:{2w:"40 5 5 5"}},7Y:{1B:{"1y-1s":1,"1G-1s":1,"2H-1D":"IF:&8w;$%bn<br>Kz:&8w;$%rO<br>Lu:&8w;$%rG<br>hD:&8w;$%7l"}},5z:{1B:{"1y-1s":2,"1U-3C":{1D:"%2r-2j-1U - %2r-1X-1U"},"2H-1D":"%2r-2j-1U - %2r-1X-1U"}},"-":""},1g.PU=1n(e,t){1a i,a=1g,n=!1;1l 1c!==ZC.1d(i=a.B9.3a[e])&&1c!==ZC.1d(i.3Z)&&(n=n||ZC.2t(i.3Z)),1c!==ZC.1d(a.B9[t])&&1c!==ZC.1d(i=a.B9[t][e])&&1c!==ZC.1d(i.3Z)&&(n=n||ZC.2t(i.3Z)),n},1g.2y=1n(e,t,i,a){1a n,l,r,o=1g;i=1c===ZC.1d(i)||ZC.2t(i),a=1c!==ZC.1d(a)&&ZC.2t(a),t 3F 3N||(t=1m 3N(t));1a s=[],C="";1j(l=0,r=t.1f;l<r;l++)if(/(\\(\\w+\\))(.*)/.5O(t[l])){1a A=5n.$1;C=t[l].1F(A,"3a"),-1===ZC.AT(s,C)&&s.1h(C),C=t[l].1F(A,A.2x(1,A.1f-1)),-1===ZC.AT(s,C)&&s.1h(C)}1u-1===ZC.AT(s,t[l])&&s.1h(t[l]),/ak(.*)/.5O(t[l])&&-1===ZC.AT(s,t[l].1F("ak","6J"))&&s.1h(t[l].1F("ak","6J")),/6J(.*)/.5O(t[l])&&-1===ZC.AT(s,t[l].1F("6J","ak"))&&s.1h(t[l].1F("6J","ak"));1a Z={};1j(l=0,r=s.1f;l<r;l++){1j(1a c=s[l].2p("."),p=o.B9,u=0,h=c.1f;u<h;u++)if(1c!==ZC.1d(n=p[c[u]]))p=n;1u if(1c!==ZC.1d(n=p[ZC.V7(c[u])]))p=n;1u{if(1c===ZC.1d(n=p[ZC.EC(c[u])])){p=1c;1p}p=n}if(p)1j(1a 1b in p)1c!==ZC.1d(p[1b])&&(a||"4d"!=1w p[1b]||p[1b].1f)&&(i||1c===ZC.1d(e[1b])?o.H.QQ&&1c!==ZC.1d(o.H.QQ[1b])||(Z[1b]=p[1b]):i&&"4d"==1w p[1b]&&(o.H.QQ&&1c!==ZC.1d(o.H.QQ[1b])||(Z[1b]=p[1b])))}ZC.2E(Z,e)}},ZC.AN={Lt:1n(e,t){1j(1a i=[],a=0,n=e.p.1f;a<n;a++)if(e.p[a]){1a l=(e.p[a][0]-e.x)/e.w,r=(e.p[a][1]-e.y)/e.h;i.1h([t.x+t.w*l,t.y+t.h*r])}1u i.1h(1c);1l{l:t.w*e.l/e.w,r:t.w*e.r/e.w,p:i}},BS:1n(e,t,i){1a a=2g.eC("fT")[0],n=2g.4W("Ls");n.1J="1D/7y",n.5a=t+"?v"+ZC.g2;1a l=!1;n.iD=n.fu=1n(){if(!(l||1g.g0&&"Lr"!==1g.g0&&"aE"!==1g.g0)){l=!0,n.iD=n.fu=1c,a&&n.6q&&a.aJ(n);1a e=1m 5n("1o-(.+?).2j.js","g").3p(t);e&&ZC.X8.1h(e[1]),i&&i(t)}},n.jv=1n(){!e&&1o.I2[0]&&(e=1o.I2[0]),e?e.NH({8C:ZC.1b[63],aN:"c5 cX g3 ("+n.5a+")"},"Lq 6J"):uT("c5 cX g3 ("+n.5a+")")},a.iz(n,a.Lp)},Bd:1n(){1l"#"+ZC.Y4.ek(ZC.hK(0,qJ)).5y(ZC.hK(0,20),6)},XE:1n(){},pk:1n(e,t){1l 1o[e]||t&&t.eb&&t.eb[e]||1o.hp(1c,e)||t&&1o.hp(t.K,e)},C2:1n(e,t,i,a,n){i 3F 3N||(i=[i]);1a l=1;1l 1c!==ZC.1d(a)&&i.1h(a),n&&(l=2,i.1h(n)),"4I"===e&&(e=ZC.1b[47]),"5T"===e&&(e=ZC.1b[49]),"6l"===e&&(e=ZC.1b[48]),1o[e]&&"ba"!==e&&(1c!==ZC.1d(a)?i[i.1f-l]=1o[e].9l(1o,i):1o[e].9l(1o,i)),t&&t.eb[e]&&(1c!==ZC.1d(a)?i[i.1f-l]=t.eb[e].9l(1o,i):t.eb[e].9l(1o,i)),1o.hp(1c,e)&&(1c!==ZC.1d(a)?i[i.1f-l]=1o.hq(1c,e,i,a):1o.hq(1c,e,i)),t&&1o.hp(t.K,e)&&(1c!==ZC.1d(a)?i[i.1f-l]=1o.hq(t.K,e,i,a):1o.hq(t.K,e,i)),i[i.1f-l]},OB:1n(e,t){if(t.AA%2m!=0){1j(1a i=[[-t.I/2,-t.F/2],[t.I/2,-t.F/2],[t.I/2,t.F/2],[-t.I/2,t.F/2]],a="",n=0;n<4;n++)i[n]=[t.iX+t.I/2+t.BJ+ZC.3B+i[n][0]*ZC.EF(t.AA)-i[n][1]*ZC.EL(t.AA),t.iY+t.F/2+t.BC+ZC.3B+i[n][0]*ZC.EL(t.AA)+i[n][1]*ZC.EF(t.AA)],a+=ZC.1k(i[n][0])+","+ZC.1k(i[n][1])+",";1l t.D=i,ZC.P.GF("4B",t.E5,t.IX)+\'1O="\'+e+\'-1H-1N zc-1H-1N" id="\'+t.K+"-1N"+ZC.1b[30]+a.2x(0,a.1f-1)+\'" />\'}1l ZC.P.GF("5t",t.E5,t.IX)+\'1O="\'+e+\'-1H-1N zc-1H-1N" id="\'+t.K+"-1N"+ZC.1b[30]+ZC.1k(t.iX+t.BJ+ZC.3B)+","+ZC.1k(t.iY+t.BC+ZC.3B)+","+ZC.1k(t.iX+t.BJ+t.I+ZC.3B)+","+ZC.1k(t.iY+t.BC+t.F+ZC.3B)+\'" />\'},N5:1n(e){1a t,i="",a=e.1L(\'id="\');if(-1!==a){1a n=e.1L(\'"\',a+4);-1!==n&&(i=e.2x(a+4,n))}if(ZC.4f.1T["1N-qL-"+i])1l ZC.4f.1T["1N-qL-"+i];1a l=0;if(-1!==e.1L(\'2S="5t"\')?(l+=8i,5===(t=/9s=\\"(\\-*\\d+),(\\-*\\d+),(\\-*\\d+),(\\-*\\d+)\\"/.3p(e)).1f&&(l+=(ZC.1k(t[3])-ZC.1k(t[1]))*(ZC.1k(t[4])-ZC.1k(t[2])))):-1!==e.1L(\'2S="3A"\')?(l+=100,t=/9s=\\"(\\-*\\d+),(\\-*\\d+),(\\-*\\d+)\\"/.3p(e),1c!==ZC.1d(t[3])&&(l+=ZC.1k(t[3])/10)):-1!==e.1L(\'2S="4B"\')?-1!==e.1L("1T-3f")?l+=hj:l+=5L:l+=1,-1!==e.1L("1T-z-3X")){1a r=/1T-z-3X=\\"(\\-*\\d+)\\"/.3p(e);r&&2===r.1f&&(l*=ZC.1k(1A.5d(10,ZC.1k(r[1]))))}1l""!==i&&ZC.4f.2Q("1N-qL-"+i,l),l},w6:1n(e,t,i){1j(1a a=[],n=0,l=e.1f;n<l;n++)if(1c!==ZC.1d(e[n])){1a r=e[n].7p(0);1c!==ZC.1d(r[0])&&"3e"!=1w r[0]&&(r[0]+=t),1c!==ZC.1d(r[1])&&"3e"!=1w r[1]&&(r[1]+=i),1c!==ZC.1d(r[2])&&"3e"!=1w r[2]&&r.1f<=4&&(r[2]+=t),1c!==ZC.1d(r[3])&&"3e"!=1w r[3]&&r.1f<=4&&(r[3]+=i),a.1h(r)}1u a.1h(1c);1l a},P2:1n(e,t){1a i;t=t||{},e=e||{};1a a={};if(1c!==ZC.1d(i=e.83)&&(a.83=i),1c!==ZC.1d(i=e.5M)&&(a.5M=ZC.2t(i)),1c!==ZC.1d(i=e["5M-dS"])&&(a["5M-dS"]=i),1c!==ZC.1d(i=e.aA)&&(a.aA=ZC.2t(i)),1c!==ZC.1d(i=e[ZC.1b[25]])&&(a[ZC.1b[25]]=ZC.1k(i)),1c!==ZC.1d(i=e[ZC.1b[14]])?a[ZC.1b[14]]=i:1c===ZC.1d(t[ZC.1b[14]])&&1c!==ZC.1d(i=ZC.HF[ZC.1b[14]])&&(a[ZC.1b[14]]=i),1c!==ZC.1d(i=e[ZC.1b[13]])?a[ZC.1b[13]]=i:1c===ZC.1d(t[ZC.1b[13]])&&1c!==ZC.1d(i=ZC.HF[ZC.1b[13]])&&(a[ZC.1b[13]]=i),1c!==ZC.1d(i=e[ZC.1b[12]])&&(a[ZC.1b[12]]=ZC.1k(i)),1c!==ZC.1d(i=e["6p-Ad"])&&(a["6p-Ad"]=i),1c!==ZC.1d(i=e.5J)&&1c!==ZC.1d(i.1J))1R(i.1J){1i"5C":a[ZC.1b[68]]=!0,1c!==ZC.1d(i.1D)&&(i.4q=i.1D),1c!==ZC.1d(i.4q)&&(a[ZC.1b[67]]=i.4q)}1l a},GH:1n(e,t,i,a){1a n,l=e,r=e+"",o=!1;if(a&&1c!==ZC.1d(t[ZC.1b[68]])&&t[ZC.1b[68]]&&""+4Q(r)===r&&(r=ZC.AN.YP(4Q(r),t[ZC.1b[67]],t.cR,t.cN),o=!0),1c===ZC.1d(t[ZC.1b[14]])&&1c!==ZC.1d(e=ZC.HF[ZC.1b[14]])&&(t[ZC.1b[14]]=e),1c===ZC.1d(t[ZC.1b[13]])&&1c!==ZC.1d(e=ZC.HF[ZC.1b[13]])&&(t[ZC.1b[13]]=e),1c!==ZC.1d(t[ZC.1b[12]])&&-1!==t[ZC.1b[12]]&&1w t["1X-6p"]!==ZC.1b[31]&&-1!==t["1X-6p"]&&(t[ZC.1b[12]]=ZC.BO(t["1X-6p"],t[ZC.1b[12]])),!o)if(1c!==ZC.1d(t.aA)&&t.aA)r=4Q(r).Lo(ZC.CV(20,t[ZC.1b[25]])),1c!==ZC.1d(t[ZC.1b[14]])&&(r=r.1F(/\\./g,t[ZC.1b[14]]));1u{if(1c!==ZC.1d(t.5M)&&t.5M){n="";1a s=t["5M-dS"]||"";if("3e"!=1w s&&s.1f){""+ZC.1Y(s[0])!==s[0]&&(s=[5L].4z(s));1j(1a C=1,A=s[0]||5L,Z=s.7p(1),c=1c,p=0;p<Z.1f;p++)0===Z[p].1L("#")&&(c=p,Z[p]=Z[p].2x(1));if(Z.1f){if(1c!==c)C=c;1u if(1c!==ZC.1d(t["1X-cO"]))C=t["1X-cO"];1u{1a u=ZC.HE(ZC.2l(4Q(r)),A);C=1A.4h(u),C=ZC.CV(C,Z.1f-1)}n=Z[C];1a h=(r=""+4Q(r)/1A.5d(A,C)).2p(".");2===h.1f&&h[1].1f>=9&&(r=1c!==ZC.1d(t[ZC.1b[12]])&&-1!==t[ZC.1b[12]]?""+ZC.4w(r,t[ZC.1b[12]]):""+ZC.4w(r))}}1u{1a 1b=ZC.HE(ZC.2l(4Q(r)))/1A.bj;1R(ZC.2l(4Q(r))){1i 5L:1b=3;1p;1i hj:1b=6;1p;1i rp:1b=9}if(1c!==ZC.1d(t["1X-cO"])&&(1b=3*t["1X-cO"]),"KB"===s.5E())r=""+4Q(r)/hf,n="KB";1u if("MB"===s.5E())r=""+4Q(r)/Mw,n="MB";1u if("GB"===s.5E())r=""+4Q(r)/Lm,n="GB";1u if("TB"===s.5E())r=""+4Q(r)/Ll,n="TB";1u if("PB"===s.5E())r=""+4Q(r)/Lj,n="PB";1u if(1b>=0&&1b<3)1R(s){2q:r=r,n="";1p;1i"K":r=""+4Q(r)/5L,n="K";1p;1i"M":r=""+4Q(r)/hj,n="M";1p;1i"B":r=""+4Q(r)/rp,n="B"}1u 1b>=3&&1b<6&&""===s||"K"===s.5E()?(r=""+4Q(r)/5L,n="K"):1b>=6&&1b<9&&""===s||"M"===s.5E()?(r=""+4Q(r)/hj,n="M"):(1b>=9&&""===s||"B"===s.5E())&&(r=""+4Q(r)/rp,n="B")}if(ZC.PI(r))if(1c!==ZC.1d(t[ZC.1b[12]])&&-1!==t[ZC.1b[12]])r=ZC.bB(4Q(r),ZC.BO(0,ZC.1k(t[ZC.1b[12]])));1u{1a d=r.2p(".")[1]||"";-1!==t["1X-6p"]&&t["1X-6p"]<d.1f&&(r=ZC.bB(4Q(r),ZC.BO(0,ZC.1k(t["1X-6p"]))))}1c!==ZC.1d(t[ZC.1b[14]])&&(r=r.1F(/\\./g,t[ZC.1b[14]]))}1a f=i?i.K:"";if(!89(r)&&("3e"!=1w l||-1===f.1L("-1z-"))){if(1c!==ZC.1d(t[ZC.1b[12]])&&-1!==t[ZC.1b[12]]&&ZC.PI(r)&&(1c!==ZC.1d(t.5M)&&t.5M||(r=ZC.bB(4Q(r),ZC.BO(0,ZC.1k(t[ZC.1b[12]]))))),1c!==ZC.1d(t[ZC.1b[13]])||1c!==ZC.1d(t[ZC.1b[14]])){1j(1a g=r.2p("."),B="",v=0,E=g[0].1f;v<E;v++){1a b=g[0].2x(v,v+1);B+=b,-1===ZC.AT(["-","+"],b)&&(g[0].1f-v-1)%3==0&&g[0].1f-v-1!=0&&(B+=t[ZC.1b[13]])}r=B+(1c!==ZC.1d(g[1])?t[ZC.1b[14]]+g[1]:"")}1c!==ZC.1d(t.5M)&&t.5M&&(r+=n)}}1l r},p2:1n(e){1a t=e.1L("("),i="",a="";-1!==t?(i=ZC.GT(e.2x(0,t)),a=ZC.GT(e.2x(t+1,e.1f-1))):i=ZC.GT(e);1a n=[],l="";if(""!==a){1a r=!1,o=!1,s=!1;l="";1j(1a C=0,A=a.1f;C<A;C++){1a Z=a.2x(C,C+1);1R(Z){1i"\\\\":s?(l+="\\\\",s=!1):s=!0;1p;1i\'"\':s?(l+=\'"\',s=!1):o?(n.1h(l),l="",o=!1):r?l+=Z:o=!0;1p;1i"\'":s?(l+="\'",s=!1):r?(n.1h(l),l="",r=!1):o?l+=Z:r=!0;1p;1i" ":(r||o)&&(l+=Z);1p;1i",":r||o?l+=Z:(""!==l&&n.1h(l),l="");1p;2q:l+=Z}}}1l""!==l&&n.1h(l),[i,n]},e5:1n(e){1l e.ai().1F(/^([0-9])$/,"0$1")},YP:1n(e,t,i,a){e=ZC.1k(e),t=t||ZC.HF["5C-pN"].i0,1w i===ZC.1b[31]&&(i=!1),1w a===ZC.1b[31]&&(a=0),i&&(e+=mR*a);1a n,l,r,o,s,C,A,Z,c=1m a2;c.KA(e),i?(n=c.Li(),l=c.Lh(),r=c.Lf(),o=c.Ld(),s=c.Lc(),C=c.Lb(),A=c.La(),Z=c.L3()):(n=c.L0(),l=c.KV(),r=c.Lw(),o=c.Lk(),s=c.Lx(),C=c.Mk(),A=c.Mv(),Z=c.wU());1j(1a p=[["mm",ZC.AN.e5(A+1)],["dd",ZC.AN.e5(C)],["Y",Z],["y",Z.ai().5y(2,2)],["F",ZC.HF["lp-f2"][A]],["m",A+1],["M",ZC.HF["lp-5M"][A]],["n",A],["d",C],["D",ZC.HF["j9-5M"][s]],["j",C],["l",ZC.HF["j9-f2"][s]],["N",s+1],["w",s],["S",1n(){1l C%10==1?"st":C%10==2?"nd":C%10==3?"rd":"th"}],["a",n<12?"am":"pm"],["A",n<12?"AM":"PM"],["g",n%12||12],["G",n],["h",ZC.AN.e5(n%12||12)],["H",ZC.AN.e5(n)],["i",ZC.AN.e5(l)],["s",ZC.AN.e5(r)],["q",o]],u=0;u<p.1f;u++)t=t.1F("%"+p[u][0],p[u][1]);1l t},jD:{},Z2:1n(e,t){1a i=1c;if(t&&t.BN?i=t.BN:t&&t.A&&t.A.BN&&(i=t.A.BN),"3e"==1w e&&-1!==e.1L("%1r-")&&ZC.aw.1f>0)1j(1a a=0;a<ZC.aw.1f;a++)-1===e.1L("(+")&&-1===e.1L("(-")||(e=e.1F(/%1r-(\\d+?)\\((\\+|\\-)(\\d+?)\\)/gi,1n(){1a e=ZC.AN.G7(ZC.aw[ZC.1k(8U[1])]);1l"+"===8U[2]?e=ZC.AN.QR(e,ZC.1k(8U[3])):"-"===8U[2]&&(e=ZC.AN.JL(e,ZC.1k(8U[3]))),e})),e=e.1F("%1r-"+a,ZC.aw[a]);1u"3e"==1w e&&i&&-1!==e.1L("%6P-")&&(e=i[ZC.1k(e.1F("%6P-",""))]);1l e},G7:1n(e,t){1a i,a,n,l;if(1c!==ZC.1d(ZC.AN.jD[e]))1l ZC.AN.jD[e];1a r=ZC.GT(5P(e)),o=1,s=!1;1l 0===r.1f?"":("9U("===(r=r.1F("Aa","#")).2x(0,5)?(i=1m 5n("9U\\\\((\\\\d{1,3}),\\\\s*(\\\\d{1,3}),\\\\s*(\\\\d{1,3}),\\\\s*([0-9.]+)\\\\)","gi").3p(r))&&(1===(a=ZC.P4(i[1])).1f&&(a="0"+a),1===(n=ZC.P4(i[2])).1f&&(n="0"+n),1===(l=ZC.P4(i[3])).1f&&(l="0"+l),r="#"+a+n+l,o=ZC.BO(0,ZC.CV(1,6a(i[4]))),s=!0):"9E("===r.2x(0,4)?(i=1m 5n("9E\\\\((\\\\d{1,3}),\\\\s*(\\\\d{1,3}),\\\\s*(\\\\d{1,3})\\\\)","gi").3p(r))&&(1===(a=ZC.P4(i[1])).1f&&(a="0"+a),1===(n=ZC.P4(i[2])).1f&&(n="0"+n),1===(l=ZC.P4(i[3])).1f&&(l="0"+l),r="#"+a+n+l):"#"===r.2x(0,1)?4===r.1f?r="#"+r.2x(1,2)+r.2x(1,2)+r.2x(2,3)+r.2x(2,3)+r.2x(3,4)+r.2x(3,4):7!==r.1f&&(r=""):1c!==ZC.1d(ZC.P.rw[r.5E()])&&(r="#"+ZC.P.rw[r.5E()]),"2a"!==r&&"aX"!==r||(r="-1"),t||(ZC.AN.jD[e]=r),t&&s?[r,o]:r)},jF:{},es:1n(e,t){if(-1===e&&(e="#jE",t=0),1c!==ZC.1d(ZC.AN.jF[e+","+t]))1l ZC.AN.jF[e+","+t];4===e.1f&&(e=e.2x(0,1)+e.2x(1,2)+e.2x(1,2)+e.2x(2,3)+e.2x(2,3)+e.2x(3,4)+e.2x(3,4));1a i="9U("+[ZC.QX(e.2x(1,3)),ZC.QX(e.2x(3,5)),ZC.QX(e.2x(5,7)),t].2M(",")+")";1l ZC.AN.jF[e+","+t]=i,i},A3:1n(e,t,i){e/=3W,t/=3W,i/=3W;1a a,n,l,r=1A.1X(e,t,i),o=1A.2j(e,t,i);l=r;1a s=r-o;if(n=0===r?0:s/r,r===o)a=0;1u{1R(r){1i e:a=(t-i)/s+(t<i?6:0);1p;1i t:a=(i-e)/s+2;1p;1i i:a=(e-t)/s+4}a/=6}1l[a,n,l]},zZ:1n(e,t,i){1a a,n,l,r=1A.4h(6*e),o=6*e-r,s=i*(1-t),C=i*(1-o*t),A=i*(1-(1-o)*t);1R(r%6){1i 0:a=i,n=A,l=s;1p;1i 1:a=C,n=i,l=s;1p;1i 2:a=s,n=i,l=A;1p;1i 3:a=s,n=C,l=i;1p;1i 4:a=A,n=s,l=i;1p;1i 5:a=i,n=s,l=C}1l[3W*a,3W*n,3W*l]},JL:1n(e,t){if(-1===e)1l-1;if(t>=100)1l"#cZ";e=ZC.AN.G7(e),1w t===ZC.1b[31]&&(t=10);1a i=ZC.QX(e.2x(1,3)),a=ZC.QX(e.2x(3,5)),n=ZC.QX(e.2x(5,7)),l=ZC.AN.A3(i,a,n);l[2]=t>0?1A.1X(0,l[2]-l[2]*t/100):1A.2j(1,l[2]-l[2]*t/100);1a r=ZC.AN.zZ(l[0],l[1],l[2]);1l r[0]=ZC.1k(r[0])<16?"0"+ZC.P4(r[0]):ZC.P4(r[0]),r[1]=ZC.1k(r[1])<16?"0"+ZC.P4(r[1]):ZC.P4(r[1]),r[2]=ZC.1k(r[2])<16?"0"+ZC.P4(r[2]):ZC.P4(r[2]),e="#"+r[0]+r[1]+r[2]},QR:1n(e,t){if(-1===e)1l-1;if(t>=100)1l"#jE";e=ZC.AN.G7(e),1w t===ZC.1b[31]&&(t=10);1a i=5w(e.5y(1,2),16),a=5w(e.5y(3,2),16),n=5w(e.5y(5,2),16);1l"#"+(0|bJ+i+(bJ-i)*t/100).ai(16).5y(1)+(0|bJ+a+(bJ-a)*t/100).ai(16).5y(1)+(0|bJ+n+(bJ-n)*t/100).ai(16).5y(1)},k2:1n(e,t){1a i=5w(e.5y(1,2),16),a=5w(e.5y(3,2),16),n=5w(e.5y(5,2),16);1l ZC.1d(t)?"9E("+i+","+a+","+n+")":{r:i,g:a,b:n}},zY:1n(e,t,i){1l"#"+((1<<24)+(e<<16)+(t<<8)+i).ai(16).7p(1)},q7:1n(e,t,i){1a a=ZC.AN.k2(e);1l(Ms*a.r+Mr*a.g+114*a.b)/5L>=128?i:t},Mq:1n(e,t,i){e=ZC.AN.G7(e),t=ZC.AN.G7(t);1a a=ZC.AN.k2(e),n=ZC.AN.k2(t),l={};1j(1a r in a)l[r]=1A.4h(i*a[r]+(1-i)*n[r]);1l ZC.AN.zY(l.r,l.g,l.b)},kz:1n(){},pF:1n(){},gc:1n(e,t){1a i;1j(i=0;i<t.1f;i++)e[t[i]]=1c;1j(i in e)0===i.1L("Mp")&&"1n"==1w e[i]&&(e[i]=1c)}},ZC.P={rw:{Mo:"cZ",Mm:"Ml",Mj:"Lz",Mi:"Mh",Mg:"zN",Mf:"Md",Mc:"Mb",Ma:"LD",Ky:"Kx",Js:"Jr",Jq:"zN",Jo:"Jn",Jm:"Jl",Jk:"Jj",Jb:"Ja",J7:"J6",IS:"IR",Ju:"Kl",Kw:"Kr",Kq:"Ko",Kn:"xA",Km:"Kk"},GF:1n(e,t,i){1l"<1N"+(i&&!t&&"iv"!==i?\' 1I="4S:\'+i+\'"\':"")+(t&&"7L"!==i||"iv"===i?\' 7B="7y:;"\':"")+\' 2S="\'+e+\'" \'},s8:1n(e){1a t;if(ZC.A4.6I.ax)4O{t=2g.4W("<md />")}4M(o){t=2g.4W("md")}1u t=2g.4W("md");t.id=e.id+"-md",t.1I.dr="97",e.3b(t);1a i=1c,a=t.Kh||t.Kb;if(!(i=a.2g?a.2g:a).3s){1a n=i.4W("Jz");i.3b(n);1a l=i.4W("Th");n.3b(l);1a r=i.4W("mQ");n.3b(r)}1l i},BX:1n(e){1a t;if(1w ZC.bh===ZC.1b[31]){if(ZC.d1)t=!1;1u{t=!0;4O{2g.UI("11r")}4M(i){t=!1}}t&&!ZC.2L&&(t=!1),t&&(t="12N"in 2g.fN),ZC.bh=t}1u t=ZC.bh;if(t)1R(e){1i"76":1i"6K":e="4I";1p;1i"7W":e="6l";1p;1i"7F":1i"6m":e="5T";1p;1i"3J":e="4I"}1l e},nQ:1n(e,t){1a i,a,n,l=[],r=t.JX,o=t.OQ,s=t.PM,C=r-s/2;if(e.1f>0){1a A=0,Z=0;1j(0!==r&&(A=ZC.1k(C*ZC.EF(o)+s),Z=ZC.1k(C*ZC.EL(o)+s)),i=0,a=e.1f;i<a;i++)if(1c!==ZC.1d(e[i])){1a c=[];1j(n=0;n<e[i].1f;n++)c[n]=e[i][n];1a p=c.1f;if(2===p||4===p)1j(n=0;n<p;n++)c[n]=e[i][n]+(n%2?Z+t.BC:A+t.BJ);l.1h(c)}1u l.1h(1c)}1l l},lC:1n(e,t,i,a,n){1w n===ZC.1b[31]&&(n=!1);1a l,r,o=[e[0],e[1]];1R(e.1f>=4&&(o[2]=e[2],o[3]=e[3]),e.1f>=6&&(o[4]=e[4],o[5]=e[5]),7===e.1f&&(o[6]=e[6]),t){1i"3c":1i"2F":1a s,C;if(i.CX)s=C=i.AZ%2==1?.5:0,ZC.A4.6I.ax&&ZC.9a&&"2F"===t&&(s=i.AZ%2==1?.5:0,C=i.AZ%2==1?0:.5),o[0]=1A.4b(o[0])-s,o[1]=1A.4b(o[1])-C,4===o.1f&&(o[2]=1A.4b(o[2])-s,o[3]=1A.4b(o[3])-C);"2F"===t&&(o[0]=6a(o[0].4C(4)),o[1]=6a(o[1].4C(4)),4===o.1f&&(o[2]=6a(o[2].4C(4)),o[3]=6a(o[3].4C(4)))),"3c"!==t||a||1w i.BJ!==ZC.1b[31]&&1w i.BC!==ZC.1b[31]&&(o[0]+=i.BJ,o[1]+=i.BC,4===o.1f&&(o[2]+=i.BJ,o[3]+=i.BC));1p;1i"3L":i.AA%2m==0?(l=10,r=i.AZ%2==1?0:l/2):(l=1,r=0),i.CX?(o[0]=l*ZC.1k(ZC.1k(l*o[0])/l)-r,o[1]=l*ZC.1k(ZC.1k(l*o[1])/l)-r,4!==o.1f&&7!==o.1f||(o[2]=l*ZC.1k(ZC.1k(l*o[2])/l)-r,o[3]=l*ZC.1k(ZC.1k(l*o[3])/l)-r),7===o.1f&&(o[4]=l*ZC.1k(ZC.1k(l*o[4])/l)-r,o[5]=l*ZC.1k(ZC.1k(l*o[5])/l)-r)):(o[0]=ZC.1k(l*o[0]),o[1]=ZC.1k(l*o[1]),4!==o.1f&&7!==o.1f||(o[2]=ZC.1k(l*o[2]),o[3]=ZC.1k(l*o[3])),7===o.1f&&(o[4]=ZC.1k(l*o[4]),o[5]=ZC.1k(l*o[5])))}1l o},lz:1n(e,t,i,a,n){1a l,r,o,s,C,A,Z;if(i.QT&&(i.E["8p-du-2R"]=!0),!i.E["8p-du-2R"]){1j(l=0,r=e.1f;l<r;l++)e[l]&&(e[l][0]=6a(4Q(e[l][0]).4C(2)),e[l][1]=6a(4Q(e[l][1]).4C(2)));if(i.OE&&(Z=i.K+":"+i.AA+":"+e.2M("#"),ZC.4f.1T["2R-2W-"+Z]))1l ZC.4f.1T["2R-2W-"+Z].2p("#")}1a c=[ZC.3v,ZC.3v,-ZC.3v,-ZC.3v],p=[],u=!1;1j(l=0,r=e.1f;l<r;l++)if(1c!==ZC.1d(e[l])){if(i.E["8p-du-2R"]){if(o=e[l],"3L"===t){1a h=i.AA%2m==0?10:1;o[0]=ZC.1k(h*o[0]),o[1]=ZC.1k(h*o[1]),4===o.1f&&(o[2]=ZC.1k(h*o[2]),o[3]=ZC.1k(h*o[3]))}}1u o=ZC.P.lC(e[l],t,i,a,n);if(1c!==ZC.1d(o)&&!89(o[0])&&!89(o[1])&&f1(o[0])&&f1(o[1]))if(r<=20&&a&&(c[0]=ZC.CV(c[0],o[0]/("3L"===t?10:1)),c[1]=ZC.CV(c[1],o[1]/("3L"===t?10:1)),c[2]=ZC.BO(c[2],o[0]/("3L"===t?10:1)),c[3]=ZC.BO(c[3],o[1]/("3L"===t?10:1))),0===l)p.1h(("2F"===t?"M ":"m ")+o[0]+" "+o[1]);1u if(u&&(p.1h(("2F"===t?"M ":"m ")+o[0]+" "+o[1]),u=!1),2===o.1f)p.1h(("2F"===t?"L ":"l ")+o[0]+" "+o[1]);1u if(4===o.1f)p.1h(("2F"===t?"Q ":"qb ")+o[0]+" "+o[1]+" "+o[2]+" "+o[3]),"3L"===t&&p.1h("l "+o[2]+" "+o[3]);1u if(6===o.1f)if("2F"===t){1a 1b=0;o[3]%2m==o[4]%2m&&(1b=o[4]>=o[3]?.Ah:-.Ah),s=ZC.AO.BM(o[0],o[1],o[2],o[3]+1b),C=ZC.AO.BM(o[0],o[1],o[2],o[4]-1b),A="0 0",0===o[5]?o[4]-o[3]>2m?(A="0 1",C[0]=s[0],C[1]=s[1]):A=o[4]-o[3]<=180?"0 1":"1 1":o[3]-o[4]>2m?(A="0 0",C[0]=s[0],C[1]=s[1]):A=o[3]-o[4]<=180?"0 0":"1 0",p.1h("a "+o[2]+","+o[2]+" 0 "+A+" "+(C[0]-s[0])+","+(C[1]-s[1]))}1u"3L"===t&&(o[2]*=10,s=ZC.AO.BM(o[0],o[1],o[2],o[3]),C=ZC.AO.BM(o[0],o[1],o[2],o[4]),A=1===o[5]?"at":"wa",p.1h(A+" "+ZC.1k(o[0]-o[2])+","+ZC.1k(o[1]-o[2])+","+ZC.1k(o[0]+o[2])+","+ZC.1k(o[1]+o[2])+" "+ZC.1k(s[0])+","+ZC.1k(s[1])+" "+ZC.1k(C[0])+","+ZC.1k(C[1])));1u 7===o.1f&&p.1h(("2F"===t?"C ":"c ")+o[0]+" "+o[1]+" "+o[2]+" "+o[3]+" "+o[4]+" "+o[5])}1u u=!0;1l i.E["8p-du-2R"]||i.OE&&ZC.4f.2Q("2R-2W-"+Z,p.2M("#")),i.H&&r<=20&&a&&(i.H.E[i.K+"-cS"]=c),p},MJ:1n(e,t){1a i,a,n=e.12M||e.Ay;1l t=ZC.1k(t||"0"),n&&n.7s?n.7s.1f>0?(i=n.7s[t].b6,a=n.7s[t].bv):n.qy.1f>0&&(i=n.qy[t].b6,a=n.qy[t].bv):(i=e.b6,a=e.bv),[ZC.1k(i||"0"),ZC.1k(a||"0")]},F6:1n(e,t,i){1a a;1l i=i||2g,1c!==ZC.1d(t)?i.Ai?a=i.Ai(t,e):(a=i.4W(e)).4m("eo",t):a=i.4W(e),"7n:"===e.2x(0,4)&&(a.82="qS"),a},ET:1n(e){1a t;e 3F 3N||(e=[e]);1j(1a i=0,a=e.1f;i<a;i++)"4d"!=1w(t=e[i])&&(t=ZC.AK(e[i])),t&&(1w t.gn!==ZC.1b[31]?t.gn.aJ(t):1w t.6q!==ZC.1b[31]&&t.6q.aJ(t))},G5:1n(e,t){1j(1a i in t)if("3e"==1w i&&"4d"!=1w t[i]&&"1n"!=1w t[i])4O{e.4m(i,t[i])}4M(a){}},PQ:1n(e,t){1j(1a i in t)"3e"==1w i&&"4d"!=1w t[i]&&"1n"!=1w t[i]&&(e.1I[i]=t[i])},t7:1n(e){1a t;if(e===2g)1l!0;if(!e)1l!1;if(!e.6q)1l!1;if(e.1I){if("2a"===e.1I.3M)1l!1;if("97"===e.1I.dr)1l!1}if(2v.g4){if("2a"===(t=2v.g4(e,"")).3M)1l!1;if("97"===t.dr)1l!1}if(t=e.mr){if("2a"===t.3M)1l!1;if("97"===t.dr)1l!1}1l ZC.P.t7(e.6q)},TB:1n(e){1a t=e.82||ZC.A4(e).3T("1O");1l 1c!==ZC.1d(t)&&"4d"==1w t&&(t=1w t.dz!==ZC.1b[31]?t.dz:""),t||""},IM:1n(e,t,i,a,n,l,r,o){if(e)1R(r=r||"",t){1i"3c":o?e.9k("2d").pc(i,a,n,l):e.1s=e.1s;1p;1i"3L":1i"2F":1a s=e.7d.1f;if(s>hf&&1w e.4o!==ZC.1b[31])1l 8m(e.4o="");if(s>0)1j(1a C=s-1;C>=0;C--)""===r?e.aJ(e.7d[C]):0===e.7d[C].id.1L(r+"-")&&e.aJ(e.7d[C])}},E6:1n(e,t){1R("3e"==1w e&&(e=ZC.AK(e)),t){1i"3c":1l e.9k("2d");1i"2F":1i"3L":1l e}},K3:1n(e,t){1R(t){1i"2F":1l ZC.P.ro(e);1i"3L":1i"3c":1l ZC.P.I1(e)}},HI:1n(e,t){1R(t){1i"2F":1l ZC.P.ro(e);1i"3L":1l ZC.P.I1(e);1i"3c":1l ZC.P.xU(e)}},ro:1n(e){1a t;if(ZC.AK(e.id))1l ZC.AK(e.id);1a i=ZC.P.F6("g",ZC.1b[36]);1l 1c!==ZC.1d(t=e.id)&&i.4m("id",t),1c!==ZC.1d(t=e.2o)&&i.4m("1O",t),1c!==ZC.1d(t=e.8r)&&i.4m("z-2Y",t),1c!==ZC.1d(t=e["3u-2R"])&&i.4m("3u-2R",t),e.8R?e.p.iz(i,e.8R.su):e.p.3b(i),i},Y0:1n(e){1a t;ZC.P.ET(e.id);1a i=ZC.P.F6("uX",ZC.1b[36]);1l i.id=e.id,1c!==ZC.1d(e.cx)?((t=ZC.P.F6("3A",ZC.1b[36])).id=e.id+"-2S",ZC.P.G5(t,{cx:e.cx,cy:e.cy,r:e.r})):((t=ZC.P.F6("12L",ZC.1b[36])).id=e.id+"-2S",ZC.P.G5(t,{2W:e.2R})),i.3b(t),i},xU:1n(e){1a t;if(ZC.AK(e.id))1l ZC.AK(e.id);1a i=2g.4W("3c"),a=i.1I;if(1c!==ZC.1d(t=e.id)&&(i.id=t),1c!==ZC.1d(t=e.2o)&&(i.82=t),1c!==ZC.1d(t=e.wh)){1a n=(""+t).2p("/");e[ZC.1b[19]]=n[0],e[ZC.1b[20]]=n[1]}if(1c!==ZC.1d(t=e.tl)){1a l=(""+t).2p("/");e.1v=l[0],e.1K=l[1]}1l i.1s=e[ZC.1b[19]],i.1M=e[ZC.1b[20]],1c!==ZC.1d(t=e.1K)&&(a.1K=t+"px"),1c!==ZC.1d(t=e.1v)&&(a.1v=t+"px"),1c!==ZC.1d(t=e.3M)&&(a.3M=t),1c!==ZC.1d(t=e.2K)&&(a.2K=t),1c!==ZC.1d(t=e.8r)&&(a.9S=t),e.p.3b(i),i},I1:1n(e){1a t,i,a,n,l,r;if(ZC.AK(e.id))1l a=ZC.AK(e.id),1c!==ZC.1d(t=e.wh)&&(l=(""+t).2p("/"),a.1I.1s=l[0]+"px",a.1I.1M=l[1]+"px"),1c!==ZC.1d(t=e.tl)&&(r=(""+t).2p("/"),a.1I.1v=r[0]+"px",a.1I.1K=r[1]+"px"),a;(n=(a=2g.4W("3E")).1I).wf="n3",1c!==ZC.1d(t=e.wh)&&(l=(""+t).2p("/"),e[ZC.1b[19]]=l[0],e[ZC.1b[20]]=l[1]),1c!==ZC.1d(t=e.tl)&&(r=(""+t).2p("/"),e.1v=r[0],e.1K=r[1]),1c!==ZC.1d(t=e.id)&&(a.id=t),1c!==ZC.1d(t=e.2o)&&""!==t&&(a.82=t);1j(1a o=[["1v","","px"],["1K","","px"],[ZC.1b[19],"","px"],[ZC.1b[20],"","px"],"2K","9J",["8X","rr|tM"],["8r","9S"],"3u","3M",["6M","","px"],"6W","6V","cG","db","c7","tj","1r","1G","vd","k5","tD","k6","1W","4S",["2w","lE|sU|sJ|lH","px"],["lE","","px"],["sU","","px"],["sJ","","px"],["lH","","px"],["3x","cn|di|da|d8","px"],["cn","","px"],["di","","px"],["da","","px"],["d8","","px"],"bx","jp"],s=1c,C=1c,A=1c,Z=0,c=o.1f;Z<c;Z++)if("3e"==1w o[Z]&&(o[Z]=[o[Z]]),t=1c,1c!==ZC.1d(i=e[o[Z][0]])&&(t=i),1c!==ZC.1d(t)){1c!==ZC.1d(o[Z][1])&&""!==o[Z][1]||(o[Z][1]=o[Z][0]);1j(1a p=o[Z][1].2p("|"),u=0,h=p.1f;u<h;u++){1a 1b=t+(1c===ZC.1d(o[Z][2])?"":o[Z][2]);n[p[u]]=1b,"6W"===p[u]&&(s=1b),"6M"===p[u]&&(C=ZC.1k(1b)),"6V"===p[u]&&(A=1b)}}1l 1c!==ZC.1d(t=e.3n)&&(n.3n=t,1!==ZC.1Y(t)&&(n.jp="2n(3n = "+ZC.1k(100*ZC.1Y(t))+")",n.3n=t)),1c!==ZC.1d(t=e.p)&&(e.8R?t.iz(a,e.8R.su):t.3b(a)),1c!==ZC.1d(t=e.4e)&&(a.4o=ZC.jz(t),-1!==t.1L("<")&&-1!==t.1L(">")&&ZC.A4(a).9i().5f(1n(){1c!==ZC.1d(s)&&(1c!==ZC.1d(1g.1I.6W)&&""!==1g.1I.6W||(1g.1I.6W=s)),1c!==ZC.1d(C)&&(1c!==ZC.1d(1g.1I.6M)&&""!==1g.1I.6M||(1g.1I.6M=C+"px")),1c!==ZC.1d(A)&&(1c!==ZC.1d(1g.1I.6V)&&""!==1g.1I.6V||(1g.1I.6V=A))})),e.aR&&(a.1I.12K="dj-7a",a.1I.bi="aR"),e.4S&&"iv"===e.4S&&(a.1I.4S="8s"),a},WP:1c,n2:1n(e,t,i,a,n,l,r){1a o,s,C,A;1c===ZC.1d(r)&&(r=!1);1a Z=!1;"[u3]"===t.2x(0,10)&&(Z=!0,t=t.2x(10)),A=e+"-1D-ku",-1!==e.1L("-5R")&&(A="zc-1D-ku");1a c="{{"+t+"}}"+i.1F(/[^a-z]/gi,"").b0()+a+l+n;if(ZC.4f.1T["1D-1s-"+c]&&!r)1l ZC.4f.1T["1D-1s-"+c];if(ZC.4f.1T["1D-1M-"+c]&&r)1l ZC.4f.1T["1D-1M-"+c];1a p,u=t;1l u=u.1F(/<hr>/g,\'<hr 1I="2w:0;3x:0">\'),(p=ZC.AK(A))?(ZC.P.WP&&ZC.P.WP===e+i+a+l+n||(p.1I.6W=i,p.1I.6M=a+"px",p.1I.6V=n,p.1I.bx=Z?"130%":-1!==l?ZC.1k(l)+"px":"130%",ZC.P.WP=e+i+a+l+n),p.4o=u):(p=ZC.P.I1({id:A,p:2g.3s,tl:"-6H/-6H",4e:u,2K:"4D",6W:i,6M:a,2o:"zc-1D-ku",6V:n})).1I.bx=Z?"130%":-1!==l?ZC.1k(l)+"px":"130%",-1===t.1L("<")||-1===t.1L(">")||Z||ZC.A4(p).9i().5f(1n(){"BR"!==1g.8b.5E()&&(1c!==ZC.1d(1g.1I.6W)&&""!==1g.1I.6W||(1g.1I.6W=i),1c!==ZC.1d(1g.1I.6M)&&""!==1g.1I.6M||(1g.1I.6M=a+"px"),1g.1I.bx=-1!==l?ZC.1k(l)+"px":"130%","B"!==1g.8b.5E()&&"12I"!==1g.8b.5E()&&(1c!==ZC.1d(1g.1I.6V)&&""!==1g.1I.6V||(1g.1I.6V=n)))}),(o=p.ij())&&o.1s>0?(s=o.1s,r&&(C=o.1M)):(s=ZC.2L&&ZC.A4.6I.7m?p.r0:ZC.A4(p).1s(),r&&(C=ZC.2L&&ZC.A4.6I.7m?p.qZ:ZC.A4(p).1M())),r?(ZC.4f.2Q("1D-1M-"+c,C),C):(ZC.4f.2Q("1D-1s-"+c,s),s)}},!2g.gl&&2g.Am&&(2g.gl=1n(e){1l 2g.Am("."+e)}),ZC.A4=1n(e,t,i){1a a,n,l,r,o=1g;if(1w i===ZC.1b[31]&&(i=!0),i)1l 1m ZC.A4(e,t,!1);if(o.PC=[],o.QM=e,o.MN=t,o.1f=0,o.MN=o.MN||2g.eC("3s")[0],"4d"==1w o.QM)o.PC=[o.QM];1u if("3e"==1w o.QM)1j(1a s=o.QM.2p(","),C=0;C<s.1f;C++){1a A=ZC.GT(s[C]),Z=!1;if(2===(a=A.2p(">")).1f&&(Z=!0,ZC.A4(a[0]).5f(1n(){1a e=1g;ZC.A4(a[1],1g).5f(1n(){1g.6q===e&&o.PC.1h(1g)})})),2===(a=A.2p(" ")).1f&&(Z=!0,ZC.A4(a[0]).5f(1n(){ZC.A4(a[1],1g).5f(1n(){o.PC.1h(1g)})})),!Z)if("#"===A.2x(0,1))ZC.AK(A.2x(1))&&(o.PC=[ZC.AK(A.2x(1))]);1u if("."===A.2x(0,1))if(2g.gl){if(o.MN.gl)n=o.MN.gl(A.2x(1));1u if(n=2g.gl(A.2x(1)),o.MN!==2g){1a c=[];1j(l=0,r=n.1f;l<r;l++)ZC.A4.Ba(n[l],o.MN)&&c.1h(n[l]);n=c}1j(l=0,r=n.1f;l<r;l++)o.PC.1h(n[l])}1u{1a p=1m 5n("(^|\\\\s)"+A.2x(1)+"(\\\\s|$)","i"),u=o.MN.eC("*"),h="";1j(l=0,r=u.1f;l<r;l++)"4d"==1w(h=u[l].82)&&(h=1w h.dz!==ZC.1b[31]?h.dz:""),""!==h&&p.5O(h)&&o.PC.1h(u[l])}1u 1j(l=0,r=(n=o.MN.eC(A)).1f;l<r;l++)o.PC.1h(n[l])}1l o.1f=o.PC.1f,1g},ZC.A4.5m={7r:1n(){1j(1a e,t=[],i=0,a=1g.PC.1f;i<a;i++){1a n=[1g.PC[i]];if((e=8U.1f)>1)1j(1a l=1;l<e;l++)n.1h(8U[l]);t.1h(8U[0].9l(1g,n))}1l t},5f:1n(){1j(1a e,t=0,i=1g.PC.1f;t<i;t++){1a a=[1g.PC[t]];if((e=8U.1f)>1)1j(1a n=1;n<e;n++)a.1h(8U[n]);8U[0].9l(1g.PC[t],a)}1l 1g},9i:1n(){1a e=[];1l 1g.5f(1n(){1j(1a t=0,i=1g.7d.1f;t<i;t++)1===1g.7d[t].go&&e.1h(1g.7d[t])}),1g.PC=e,1g},3q:1n(){1g.7r.4x(1g,1n(e){e&&e.6q&&e.6q.aJ(e)})},lu:1n(){1g.7r.4x(1g,1n(e){if(e)1j(;e.7d.1f;)e.aJ(e.7d[e.7d.1f-1])})},mM:1n(e){1a t,i;1w e===ZC.1b[31]&&(e=!0);1a a=1g.7r.4x(1g,1n(a){if(!a)1l 1c;if(a===2v){1a n=2g.3s;1l a.Ao?(t=a.Ao,i=a.12H):n&&n.gn&&n.gn.mC?(t=n.gn.mC,i=n.gn.Ap):n&&n.mC&&(t=n.mC,i=n.Ap),{1s:t,1M:i}}1a l,r,o=e?"8K":ZC.A4(a).gh("3M");if(2v.g4){1a s=2v.g4(a,1c);l=s.tI(ZC.1b[19]).7p(0,-2),r=s.tI(ZC.1b[20]).7p(0,-2)}1u if(a.ij){1a C=a.ij();l=C.1s?C.1s:a.r0,r=C.1M?C.1M:a.qZ}1u l=a.r0,r=a.qZ;if("2a"===o||""===o||1w o===ZC.1b[31]){1a A=a.1I,Z=A.dr,c=A.2K,p=A.3M;A.dr="97",A.2K="4D",A.3M="8K",t=l,i=r,A.3M=p,A.2K=c,A.dr=Z}1u t=l||0,i=r||0;1l{1s:t,1M:i}});1l 1===a.1f?a[0]:a},gh:1n(e){1a t=1g.7r.4x(1g,1n(e,t){if("3M"===t)1l e.1I.3M;1a i,a=2g;if(t=ZC.EC(t),!e||e===a)1l n6;if("3n"===t&&1w e.12G!==ZC.1b[31]){1a n=(ZC.A4(e).gh("jp")||"").m2(/2n\\(3n=(.*)\\)/);1l n&&n[1]?6a(n[1])/100:1}if(-1!==ZC.AT(["8X","rr","tM"],t))1l(i=e.1I.8X)?i:(i=e.1I.rr)?i:(i=e.1I.tM)?i:"2a";1a l=e.1I?e.1I[t]:1c;if(!l)if(a.mO&&a.mO.g4){1a r=a.mO.g4(e,1c);t=t.1F(/([A-Z])/g,"-$1").b0(),l=r?r.tI(t):1c}1u if(e.mr&&(l=e.mr[t],/^\\d/.5O(l)&&!/px$/.5O(l)&&"6V"!==t)){1a o=e.1I.1K,s=e.u6.1K;e.u6.1K=e.mr.1K,e.1I.1K=l||0,l=e.1I.12F+"px",e.1I.1K=o,e.u6.1K=s}1l"3n"===t&&(l=6a(l)),/Au/.5O(8Q.cP)&&-1!==ZC.AT(["1K","1v","2z","2c"],t)&&"8N"===ZC.A4(e).gh("2K")&&(l="3i"),"3i"===l?1c:l},e);1l 1===t.1f?t[0]:t},wh:1n(){1a e;1l 1g.PC[0]?1c!==ZC.1d(e=ZC.A4(1g.PC[0]).mM())?[ZC.1k(e[ZC.1b[19]]),ZC.1k(e[ZC.1b[20]])]:[0,0]:1c},1s:1n(e){1a t;if(1w e===ZC.1b[31]){1a i=1g.7r.4x(1g,1n(e){1l 1c!==ZC.1d(t=ZC.A4(e).mM())?ZC.1k(t[ZC.1b[19]]):0});1l 1===i.1f?i[0]:i}1l 1g.7r.4x(1g,1n(e,t){e.1I.1s=t+"px"},e),1g},1M:1n(e){1a t;if(1w e===ZC.1b[31]){1a i=1g.7r.4x(1g,1n(e){1l 1c!==ZC.1d(t=ZC.A4(e).mM())?ZC.1k(t[ZC.1b[20]]):0});1l 1===i.1f?i[0]:i}1l 1g.7r.4x(1g,1n(e,t){e.1I.1M=t+"px"},e),1g},aK:1n(){1l ZC.A4.1Z().1K},aG:1n(){1l ZC.A4.1Z().1v},2O:1n(e,t){if(1w t===ZC.1b[31]){1a i=1g.7r.4x(1g,1n(t){1a i=ZC.A4(t).gh(e);1l-1!==(""+i).1L("px")?ZC.1k(i):i});1l 1===i.1f?i[0]:i}1l 1g.7r.4x(1g,1n(e,t,i){e.1I[t]=i},e,t),1g},3T:1n(e,t){if(1w t===ZC.1b[31]){1a i=1g.7r.4x(1g,1n(t){1l t.bP(e)});1l 1===i.1f?i[0]:i}1l 1g.7r.4x(1g,1n(e,t,i){e.4m(t,i)},e,t),1g},8L:1n(e){if(1w e===ZC.1b[31]){1a t=1g.7r.4x(1g,1n(e){1l e.1U});1l 1===t.1f?t[0]:t}1l 1g.7r.4x(1g,1n(e,t){e.1U=t},e),1g},4n:1n(){1l 1g.7r.4x(1g,1n(e){e.1I.3M="8K"}),1g},5e:1n(){1l 1g.7r.4x(1g,1n(e){e.1I.3M="2a"}),1g},2b:1n(){1a e=1g.7r.4x(1g,1n(e){if(!(e&&(e.x&&e.y||1c!==!e.6q&&"2a"!==ZC.A4(e).gh("3M"))))1l n6;1a t,i,a,n,l,r,o,s={1v:0,1K:0},C={1v:0,1K:0},A=e&&e.AS;1l A&&((i=A.3s)===e&&(s={1v:i.12E,1K:i.12D}),t=A.fN,1w e.ij!==ZC.1b[31]&&(C=e.ij()),a=A.mO||A.12B,n=t.mX||i.mX||0,l=t.mV||i.mV||0,r=a.xO||t.aG,o=a.xP||t.aK,s={1v:C.1v+r-n,1K:C.1K+o-l}),s});1l 1===e.1f?e[0]:e},3t:1n(e,t,i){if(""!==(e=ZC.A4.hP(e))){if(i||(i=!ZC.tg||{ta:!0}),-1!==e.1L(" ")){1j(1a a=e.2p(/\\s+/),n=0;n<a.1f;n++)1g.3t(a[n],t,i);1l 1g}1l 1g.7r.4x(1g,1n(e,t,a){1n n(e){1a t=(e=e||2v.Aw).2X||e.nw,i=ZC.A4.BX(e);1c!==i&&a.4x(t,i)}ZC.A4.J0||(ZC.A4.J0=[]),ZC.A4.J0.1h([e,t,a,n]),e.mT?e.mT(t,n,i):e.mG("on"+t,n)},e,t),1g}},3m:1n(e,t){if(""!==(e=ZC.A4.hP(e))){if(-1!==e.1L(" ")){1j(1a i=e.2p(/\\s+/),a=0;a<i.1f;a++)1g.3m(i[a],t);1l 1g}1l 1g.7r.4x(1g,1n(e,t,i){if(1w ZC.A4.J0!==ZC.1b[31])1j(1a a=0,n=ZC.A4.J0.1f;a<n;a++)if((ZC.A4.J0[a][0]===e||e.8b&&"12q"===e.8b.5E()&&e.id===ZC.A4.J0[a][0].id)&&ZC.A4.J0[a][1]===t&&ZC.A4.J0[a][2]===i){e.Av?e.Av(t,ZC.A4.J0[a][3],!0):e.12A("on"+t,ZC.A4.J0[a][3]),ZC.A4.J0.6u(a,1);1p}},e,t),1g}},4g:1n(e,t,i){if(""!==(e=ZC.A4.hP(e))){if(i||(i=!ZC.tg||{ta:!0}),0===e.1L("ez")&&(i={ta:!1}),-1!==e.1L(" ")){1j(1a a=e.2p(/\\s+/),n=0;n<a.1f;n++)1g.4g(a[n],t,i);1l 1g}1a l=1g.QM;1l ZC.A4.9Y||(ZC.A4.9Y={}),ZC.A4.9Y[e]||(ZC.A4.9Y[e]=[],2g.mT?2g.mT(e,r,i):2g.mG("on"+e,r)),ZC.A4.9Y[e].1h([l,t]),1g}1n r(t){1a i=(t=t||2v.Aw).2X||t.nw,a=i.82||"";"4d"==1w a&&(a=1w a.dz!==ZC.1b[31]&&1c!==ZC.1d(a.dz)?a.dz:"");1a l,r,o=ZC.A4.9Y[e],s=1c,C=1c,A=[];1j(l=0,r=o.1f;l<r;l++)("4d"==1w o[l][0]&&i===o[n][0]||"3e"==1w o[l][0]&&("."===o[l][0].2x(0,1)&&-1!==ZC.AT(a.2p(" "),o[l][0].1F(".",""))||"#"===o[l][0].2x(0,1)&&i.id===o[l][0].2x(1)))&&(s=o[l][1],C=ZC.A4.BX(t),1c!==ZC.1d(s)&&1c!==ZC.1d(C)&&A.1h([s,i,C]));1j(l=0,r=A.1f;l<r;l++)A[l][0].4x(A[l][1],A[l][2])}},4k:1n(e,t){if(""!==(e=ZC.A4.hP(e))){1a i,a,n;if(-1!==e.1L(" ")){1j(a=0,n=(i=e.2p(/\\s+/)).1f;a<n;a++)1g.4k(i[a],t);1l 1g}1a l=1g.QM;if(ZC.A4.9Y||(ZC.A4.9Y={}),i=ZC.A4.9Y[e])1j(a=i.1f-1;a>=0;a--)i[a][0]!==l||t&&i[a][1]!==t||ZC.A4.9Y[e].6u(a,1);1l 1g}}},ZC.A4.12z=1n(e){1j(1a t=[],i=0;i<ZC.A4.9Y[e].1f;i++)t.1h(ZC.A4.9Y[e][i][0]);1l t.2M(",")},ZC.A4.hP=1n(e){1l ZC.d1&&(e=ZC.GT(e.1F(/4I|5T|6l/,""))),e},ZC.A4.4f={},ZC.A4.6I={},1n(){1a e=/(7m)[ \\/]([\\w.]+)/,t=/(jP)(?:.*ad)?[ \\/]([\\w.]+)/,i=/(ax) ([\\w.]+)/,a=/(yY)(?:.*? rv:([\\w.]+))?/,n=/(Ax)(?:.*? rv:([\\w.]+))?/,l=1n(l){l=l.b0();1a r=e.3p(l)||t.3p(l)||i.3p(l)||n.3p(l)||l.1L("12y")<0&&a.3p(l)||[];1l[r[1]||"",r[2]||"0"]}(8Q.cP);l[0]&&("Ax"===l[0]&&(l[0]="ax"),ZC.A4.6I[l[0]]=!0,ZC.A4.6I.ad=l[1])}(),ZC.A4.1Z=1n(){1a e={1v:0,1K:0},t=2g,i=t.fN,a=t.3s;1l i&&(i.aG||i.aK)?(e.1K=i.aK,e.1v=i.aG):a&&(e.1K=a.aK,e.1v=a.aG),e},ZC.A4.BX=1n(e){if(e.Ay=e,e.2X||(e.2X=e.nw||2g),3!==e.2X.go&&8!==e.2X.go||(e.2X=e.2X.6q),1c===ZC.1d(e.b6)&&1c!==ZC.1d(e.cA)){1a t=e.2X.AS||2g,i=t.fN,a=t.3s;e.b6=e.cA+(i&&i.aK||a&&a.aK||0)-(i&&i.mV||a&&a.mV||0),e.bv=e.dg+(i&&i.aG||a&&a.aG||0)-(i&&i.mX||a&&a.mX||0)}1l!e.9u&&(e.7O,n6),e.6X||(e.6X=1n(){1g.12x=!1}),e.B3||(e.B3=1n(){1g.12w=!0}),e},ZC.A4.Ba=1n(e,t){if(e===t)1l!0;1j(;e!==t&&e.6q;)if((e=e.6q)===t)1l!0;1l!1},ZC.A4.a9=1n(e){1a t=e.3R||"",i=e.1J||"bY",a=e.1T||"",n=!0;1w e.ac!==ZC.1b[31]&&(n=ZC.2t(e.ac)),""===a.1F(/\\&/g,"")&&(a="");1a l=e.ej||1c,r=e.4J||1c,o=e.aD||1c,s=1c;4O{2v.m7?s=1m m7("12v.12u"):2v.ig&&(s=1m ig)}4M(A){}1a C="p9:"===2v.8d.iT;if(s){n&&(s.fu=1n(){4===s.g0&&((C||s.6S>=q2&&s.6S<fc)&&o&&o(s.zS,s.6S,s,t),s.6S>=ow&&r&&r(s,s.6S,s.nG,t),s.fu=1m 2v.c0,s=1c)}),2v.m7||(s.jv=1n(){r&&r(s,0,"",t)}),"Ac"===i.5E()?(s.bn("Ac",t,n),s.cC("X-12t-12s","ig"),s.cC("12r-1J","fX/x-8x-4H-12O")):(""!==a&&(-1===t.1L("?")&&(t+="?"),t+="&"+a),s.bn("bY",t,n)),l&&l(s);4O{s.8n(a),n||((C||s.6S>=q2&&s.6S<fc)&&o&&o(s.zS,s.6S,s,t),s.6S>=ow&&r&&r(s,s.6S,s.nG,t),s=1c)}4M(Z){C&&r&&(r(s,s.6S,s.nG,t),s.fu=1m 2v.c0,s=1c)}}},ZC.AO={Gf:1n(e,t){1a i,a,n=1o.3I.Bl,l=[],r=0;1n o(e,t){-1===ZC.AT(e,t)&&e.1h(t)}1j(i=0;i<e.1f;i++)e[i]+=t;1a s=-1;1j(i=1;i<e.1f;i++)ZC.2l(e[i]-e[i-1])<n?(l[r]=l[r]||{2j:-1,1X:-1,2C:[]},-1===l[r].2j&&(l[r].2j=i>1?e[i-2]:t,-1===s&&(s=l[r].2j),l[r].2j),o(l[r].2C,i-1),o(l[r].2C,i)):l[r]&&(l[r].1X=e[i],l[r].1X,r++);l[r]&&-1===l[r].1X&&(l[r].1X=2m+t);1a C=l.1f;if(C>1&&l[C-1].1X-l[0].2j==2m){1j(a=0;a<l[0].2C.1f;a++)e[l[0].2C[a]]+=2m;l[C-1].2C=l[C-1].2C.4z(l[0].2C),l[C-1].1X+=l[0].2j,l=l.6u(1)}1j(l.1f>1&&(l[l.1f-1].1X=l[0].2j+2m),i=0;i<l.1f;i++){1a A=l[i],Z=A.2C.1f,c=(A.1X-A.2j)/(Z+4);c=ZC.CV(c,n);1a p=0;1j(a=0;a<A.2C.1f;a++)p+=e[A.2C[a]];p/=A.2C.1f;1j(1a u=!0;u;)1j(u=!1,a=1;a<A.2C.1f;a++)if(e[A.2C[a]]-e[A.2C[a-1]]<c){e[A.2C[a-1]]<p?(e[A.2C[a-1]]-=.45,e[A.2C[a]]+=.gz):e[A.2C[a]]+=.25,u=!0;1p}}1l e},e0:1n(e){1l 1A.3l(e-ZC.1k(e))<1A.5d(10,-10)},YB:1n(e,t,i){1l i=i||1,!(e.x>t.x+t.1s+i)&&(!(t.x>e.x+e.1s+i)&&(!(e.y>t.y+t.1M+i)&&!(t.y>e.y+e.1M+i)))},aV:1n(e,t,i){1l i=i||1,!(e.iX>t.iX+t.I+i)&&(!(t.iX>e.iX+e.I+i)&&(!(e.iY>t.iY+t.F+i)&&!(t.iY>e.iY+e.F+i)))},12C:1n(e,t){1l e.iX>=t.iX&&e.iX<=t.iX+t.I&&e.iY>=t.iY&&e.iY<=t.iY+t.F&&e.iX+e.I>=t.iX&&e.iX+e.I<=t.iX+t.I&&e.iY+e.F>=t.iY&&e.iY+e.F<=t.iY+t.F},kJ:1n(e,t,i){1j(1a a=1A.5A(e/1A.PI),n=1A.5A(t/1A.PI),l=1A.2j(a,n),r=1A.1X(a,n),o=ZC.3v,s=0,C=l+r;C>r-l;C-=l/50){1a A=l*l*1A.kF((C*C+l*l-r*r)/(2*C*l))+r*r*1A.kF((C*C+r*r-l*l)/(2*C*r))-.5*1A.5A((-C+l+r)*(C+l-r)*(C-l+r)*(C+l+r));1A.3l(A-i)<o&&(o=1A.3l(A-i),s=C)}1l s},BM:1n(e,t,i,a){1l[e+i*1A.eA(2*a*1A.PI/2m),t+i*1A.eB(2*a*1A.PI/2m)]},h6:1n(e,t,i,a,n){1a l=ZC.U4(1A.af((a-t)/(i-e)));1l[e+ZC.1k(ZC.EF(l)*n),t+ZC.1k(ZC.EL(l)*n)]},JZ:1n(e,t,i,a,n,l){if(n=1c===ZC.1d(n)?0:n,l=1c===ZC.1d(l)||l,i-e!=0){1a r=0,o=0,s=1A.af((a-t)/(i-e));1l(n<1||l)&&(r=n/2.5*1A.eA(s),o=n/2.5*1A.eB(s)),[(e+i)/2+(e<i?r:-r),(t+a)/2+o]}1l[e,(t+a)/2]},nn:1n(e,t){1a i=(e[1]-t[1])/(e[0]-t[0]);1l[i,e[1]-i*e[0]]},h2:1n(e,t,i,a){if(t[0]===a[0]&&t[1]===a[1])1l t;if(e[0]===i[0]&&e[1]===i[1])1l e;1a n=ZC.AO.nn(e,t),l=n[0],r=n[1],o=ZC.AO.nn(i,a),s=o[0],C=(o[1]-r)/(l-s);1l[C,l*C+r]},Q6:1n(e,t,i){1c===ZC.1d(t)&&(t=5);1a a=0,n=0;1c!==ZC.1d(i)&&(a=i[0],n=i[1]);1j(1a l,r,o,s="",C=ZC.6Q?ZC.3B:0,A=0,Z=e.1f;A<Z;A++)e[A]&&(0===A?(r=e[A][0]+C+a,o=e[A][1]+C+n,l=A,s+=1A.4b(r,10)+","+1A.4b(o,10)+","):1A.5A((e[A][0]+C-r)*(e[A][0]+C-r)+(e[A][1]+C-o)*(e[A][1]+C-o))>t&&e[A-1]&&(1A.5A((e[A][0]-e[A-1][0])*(e[A][0]-e[A-1][0])+(e[A][1]-e[A-1][1])*(e[A][1]-e[A-1][1]))>t&&A-l>1&&(s+=1A.4b(e[A-1][0]+C+a,10)+","+1A.4b(e[A-1][1]+C+n,10)+","),r=e[A][0]+C+a,o=e[A][1]+C+n,l=A,s+=1A.4b(r,10)+","+1A.4b(o,10)+","));1l s=s.2x(0,s.1f-1)},Z1:1n(e,t){if(1c===ZC.1d(e)||e.1f<2)1l"";1c===ZC.1d(t)&&(t=6,ZC.2L&&(t+=10));1a i,a,n,l,r,o=[];1j(i=0,a=e.1f;i<a;i++)(0===i||i>0&&1c!==ZC.1d(e[i])&&1c!==ZC.1d(e[i-1])&&e[i].2M("/")!==e[i-1].2M("/")||1c===ZC.1d(e[i]))&&o.1h(e[i]);1a s=[],C=[],A=!1;1j(i=0,a=o.1f;i<a;i++)if(o[i]){1a Z,c,p,u,h=o[i][0],1b=o[i][1];if(o[i-1]&&(p=o[i-1][0],u=o[i-1][1],p===h&&(p-=.1)),o[i+1]&&(Z=o[i+1][0],c=o[i+1][1],Z===h&&(Z+=.1)),0===i)n=1A.af((c-1b)/(Z-h)),r=l=ZC.U4(n),Z>=h&&(r+=180),s.1h(ZC.AO.BM(h,1b,t,l+90),ZC.AO.BM(h,1b,t,r),ZC.AO.BM(h,1b,t,l+3U));1u if(i===o.1f-1)n=1A.af((u-1b)/(p-h)),r=l=ZC.U4(n),p>=h&&(r+=180),A?(C.1h(ZC.AO.BM(h,1b,t,l+3U),ZC.AO.BM(h,1b,t,r),ZC.AO.BM(h,1b,t,l+90)),A=!1):s.1h(ZC.AO.BM(h,1b,t,l+3U),ZC.AO.BM(h,1b,t,r),ZC.AO.BM(h,1b,t,l+90));1u{1a d=1A.af((c-1b)/(Z-h)),f=1A.af((1b-u)/(h-p));r=ZC.U4((d+f)/2),s.1h(ZC.AO.BM(h,1b,t,r+3U)),Z>=h&&p>=h?(s.1h(ZC.AO.BM(h,1b,t,r+180)),s.1h(ZC.AO.BM(h,1b,t,r+90)),C.1h(ZC.AO.BM(h,1b,t,r)),A=!0):Z<=h&&p<=h?(s.1h(ZC.AO.BM(h,1b,t,r)),s.1h(ZC.AO.BM(h,1b,t,r+90)),C.1h(ZC.AO.BM(h,1b,t,r+180)),A=!0):C.1h(ZC.AO.BM(h,1b,t,r+90))}}1j(i=C.1f-1;i>=0;i--)s.1h(C[i]);1l s},ga:1n(e,t){1a i=0,a=0,n=[];1R(e+=""){1i"cf":1i"h":i=1,a=t;1p;1i"9h":1i"v":i=t,a=1;1p;2q:n=e.2p("x"),1c!==ZC.1d(n[0])&&ZC.1k(n[0])+""===n[0]&&(i=ZC.1k(n[0])),1c!==ZC.1d(n[1])&&ZC.1k(n[1])+""===n[1]&&(a=ZC.1k(n[1])),0===a&&0===i?(i=1A.4j(1A.5A(t)),a=1A.4j(t/i)):(0===a&&(a=1A.4j(t/i)),0===i&&(i=1A.4j(t/a)))}1l[i,a]},zM:1n(e,t){1l.5*(2*t[1]+(-t[0]+t[2])*e+(2*t[0]-5*t[1]+4*t[2]-t[3])*e*e+(-t[0]+3*t[1]-3*t[2]+t[3])*e*e*e)},zI:1n(e,t){1a i,a,n,l,r,o=e.1f,s=[],C=[],A=[];1j(i=0;i<o-1;i++)a=e[i+1]-e[i],n=t[i+1]-t[i],C.1h(a),s.1h(n),A.1h(n/a);1a Z=[A[0]];1j(i=0;i<C.1f-1;i++){l=A[i];1a c=A[i+1];if(l*c<=0)Z.1h(0);1u{a=C[i];1a p=C[i+1];r=a+p,Z.1h(3*r/((r+p)/l+(r+a)/c))}}Z.1h(A[A.1f-1]);1a u=[],h=[];1j(i=0;i<Z.1f-1;i++){l=A[i];1a 1b=Z[i],d=1/C[i];r=1b+Z[i+1]-l-l,u.1h((l-1b-r)*d),h.1h(r*d*d)}1l 1n(i){1a a=e.1f-1;if(i===e[a])1l t[a];1j(1a n,l=0,r=h.1f-1;l<=r;){n=1A.4h(.5*(l+r));1a o=e[n];if(o<i)l=n+1;1u{if(!(o>i))1l t[n];r=n-1}}a=1A.1X(0,r);1a s=i-e[a],C=s*s;1l t[a]+Z[a]*s+u[a]*C+h[a]*s*C}},YS:1n(e,t,i,a){1c===ZC.1d(a)&&(a=1/(i/t.1f*4));1a n,l,r=[];if(e)if((n=[].4z(t))[1]&&n[2]){n[0]=n[0]||n[1]||n[2]||n[3],n[1]=n[1]||n[2]||n[0]||n[3],n[2]=n[2]||n[3]||n[1]||n[0],n[3]=n[3]||n[2]||n[1]||n[0];1a o=ZC.AO.zI([0,1,2,3],n);1j(l=1;l<=2;l+=a)r.1h([l-1,o(l)])}1u r.1h([]);1u 1j(1a s=1;s<t.1f-2;s++)if(1!==a)if((n=[t[s-1],t[s],t[s+1],t[s+2]])[1]&&n[2])1j(n[0]=n[0]||n[1]||n[2]||n[3],n[1]=n[1]||n[2]||n[0]||n[3],n[2]=n[2]||n[3]||n[1]||n[0],n[3]=n[3]||n[2]||n[1]||n[0],l=0;l<=1;l+=a){1a C=s+l,A=ZC.AO.zM(l,n);r.1h([C-1,A])}1u r.1h([]);1u r.1h([s-1,t[s]]);1l r},iM:1n(e){1j(1a t=1A.4b(ZC.HE(ZC.2l(e))/1A.bj),i=[1,2,4,5,6,8,10],a=ZC.3v,n=1,l=0;l<i.1f;l++){1a r=i[l]*1A.5d(10,t)-e;ZC.2l(r)<a&&(n=i[l],a=ZC.2l(r))}1l n*1A.5d(10,t)},pZ:1n(e,t){1a i,a;1l i=1A.4h(1A.2Z(e)/1A.2Z(10)),a=e/1A.5d(10,i),(t?a<1.5?1:a<3?2:a<7?5:10:a<=1?1:a<=2?2:a<=5?5:10)*1A.5d(10,i)},WT:1n(e,t,i,a,n,l){1a r,o,s,C,A,Z;1c===ZC.1d(n)&&(n=!0),l=1c===ZC.1d(l)?10:1A.2j(1A.1X(2,l),100),1c!==ZC.1d(a)&&0!==a||(a=1);1a c=1A.4h(ZC.HE(ZC.2l(t))/1A.bj);e===t&&(t+=1A.5d(10,c)),r=e,o=t,C=ZC.AO.pZ(o-r,!1),1c===ZC.1d(i)?(s=C/(l-1),s=ZC.AO.pZ(s,!0),s*=a):s=i,n?(A=1A.4h(r/s)*s,Z=1A.4j(o/s)*s):(A=r,Z=o,s=1c===ZC.1d(i)?C/(l-1):i);1a p=1A.4h(ZC.HE(ZC.2l(s))/1A.bj),u=p<0?ZC.2l(p):0;if(0===u){1a h=(""+s).2p(".");2===h.1f&&(u=h[1].1f)}1l[A,Z,s,u,s]}},ZC.Y4={ek:1n(e){1l ZC.Y4.zP(ZC.Y4.zO(ZC.Y4.zH(e)))},zO:1n(e){1l ZC.Y4.zV(ZC.Y4.zX(ZC.Y4.zU(e),8*e.1f))},zP:1n(e){1j(1a t,i="",a=0,n=e.1f;a<n;a++)t=e.eO(a),i+="zQ".gr(t>>>4&15)+"zQ".gr(15&t);1l i},zH:1n(e){1j(1a t,i,a="",n=-1,l=e.1f;++n<l;)t=e.eO(n),i=n+1<l?e.eO(n+1):0,12R<=t&&t<=133&&132<=i&&i<=12Z&&(t=12Y+((zR&t)<<10)+(zR&i),n++),t<=127?a+=5P.eD(t):t<=12W?a+=5P.eD(192|t>>>6&31,128|63&t):t<=k8?a+=5P.eD(12V|t>>>12&15,128|t>>>6&63,128|63&t):t<=12U&&(a+=5P.eD(12T|t>>>18&7,128|t>>>12&63,128|t>>>6&63,128|63&t));1l a},zU:1n(e){1a t,i=3N(e.1f>>2);1j(t=0;t<i.1f;t++)i[t]=0;1j(t=0;t<8*e.1f;t+=8)i[t>>5]|=(3W&e.eO(t/8))<<t%32;1l i},zV:1n(e){1j(1a t="",i=0;i<32*e.1f;i+=8)t+=5P.eD(e[i>>5]>>>i%32&3W);1l t},zX:1n(e,t){1n i(e,t,i,a,n,l){1l o((r=o(o(t,e),o(a,l)))<<(s=n)|r>>>32-s,i);1a r,s}1n a(e,t,a,n,l,r,o){1l i(t&a|~t&n,e,t,l,r,o)}1n n(e,t,a,n,l,r,o){1l i(t&n|a&~n,e,t,l,r,o)}1n l(e,t,a,n,l,r,o){1l i(t^a^n,e,t,l,r,o)}1n r(e,t,a,n,l,r,o){1l i(a^(t|~n),e,t,l,r,o)}1n o(e,t){1a i=(k8&e)+(k8&t);1l(e>>16)+(t>>16)+(i>>16)<<16|k8&i}e[t>>5]|=128<<t%32,e[14+(t+64>>>9<<4)]=t;1j(1a s=12Q,C=-12n,A=-11P,Z=11O,c=0,p=e.1f;c<p;c+=16){1a u=s,h=C,1b=A,d=Z;C=r(C=r(C=r(C=r(C=l(C=l(C=l(C=l(C=n(C=n(C=n(C=n(C=a(C=a(C=a(C=a(C,A=a(A,Z=a(Z,s=a(s,C,A,Z,e[c],7,-11N),C,A,e[c+1],12,-11M),s,C,e[c+2],17,11L),Z,s,e[c+3],22,-11K),A=a(A,Z=a(Z,s=a(s,C,A,Z,e[c+4],7,-11J),C,A,e[c+5],12,11I),s,C,e[c+6],17,-11H),Z,s,e[c+7],22,-11G),A=a(A,Z=a(Z,s=a(s,C,A,Z,e[c+8],7,11F),C,A,e[c+9],12,-11D),s,C,e[c+10],17,-11C),Z,s,e[c+11],22,-11B),A=a(A,Z=a(Z,s=a(s,C,A,Z,e[c+12],7,11A),C,A,e[c+13],12,-11z),s,C,e[c+14],17,-11y),Z,s,e[c+15],22,11w),A=n(A,Z=n(Z,s=n(s,C,A,Z,e[c+1],5,-11u),C,A,e[c+6],9,-11Q),s,C,e[c+11],14,Uz),Z,s,e[c],20,-11E),A=n(A,Z=n(Z,s=n(s,C,A,Z,e[c+5],5,-11R),C,A,e[c+10],9,12b),s,C,e[c+15],14,-12m),Z,s,e[c+4],20,-12l),A=n(A,Z=n(Z,s=n(s,C,A,Z,e[c+9],5,12j),C,A,e[c+14],9,-12i),s,C,e[c+3],14,-12h),Z,s,e[c+8],20,12g),A=n(A,Z=n(Z,s=n(s,C,A,Z,e[c+13],5,-12f),C,A,e[c+2],9,-12e),s,C,e[c+7],14,12d),Z,s,e[c+12],20,-12c),A=l(A,Z=l(Z,s=l(s,C,A,Z,e[c+5],4,-12a),C,A,e[c+8],11,-11T),s,C,e[c+11],16,129),Z,s,e[c+14],23,-124),A=l(A,Z=l(Z,s=l(s,C,A,Z,e[c+1],4,-123),C,A,e[c+4],11,121),s,C,e[c+7],16,-11Z),Z,s,e[c+10],23,-11Y),A=l(A,Z=l(Z,s=l(s,C,A,Z,e[c+13],4,11X),C,A,e[c],11,-11W),s,C,e[c+3],16,-11V),Z,s,e[c+6],23,11U),A=l(A,Z=l(Z,s=l(s,C,A,Z,e[c+9],4,-13j),C,A,e[c+12],11,-12p),s,C,e[c+15],16,13k),Z,s,e[c+2],23,-14f),A=r(A,Z=r(Z,s=r(s,C,A,Z,e[c],6,-14D),C,A,e[c+7],10,14C),s,C,e[c+14],15,-14B),Z,s,e[c+5],21,-14A),A=r(A,Z=r(Z,s=r(s,C,A,Z,e[c+12],6,14x),C,A,e[c+3],10,-14w),s,C,e[c+10],15,-14v),Z,s,e[c+1],21,-14u),A=r(A,Z=r(Z,s=r(s,C,A,Z,e[c+8],6,14r),C,A,e[c+15],10,-14g),s,C,e[c+6],15,-14q),Z,s,e[c+13],21,14p),A=r(A,Z=r(Z,s=r(s,C,A,Z,e[c+4],6,-14o),C,A,e[c+11],10,-14m),s,C,e[c+2],15,14k),Z,s,e[c+9],21,-14j),s=o(s,u),C=o(C,h),A=o(A,1b),Z=o(Z,d)}1l 3N(s,C,A,Z)}},1w 1o===ZC.1b[31]&&(2v.1o={14i:!0}),1o.14h={},1o.fE={},1o.14E={},1o.6f={},1o.6f.2e=0,1o.6f.1T={},1o.6f.aF=1n(e,t,i,a){1a n;if(1c!==ZC.1d(1o.6f.1T[i]))(n=1o.6f.1T[i]).nA=!0,ZC.Bi=!0,a||(n.7z(t),n.K=i),ZC.Bi=!1;1u{1R(e){1i"DP":n=1m DP(t);1p;1i"I4":n=1m I4(t);1p;1i"DS":n=1m DS(t);1p;1i"QY":n=1m QY(t);1p;1i"CY":n=1m CY(t)}n.K=i,1o.6f.2e++,1o.6f.2e>1o.3I.Bo?(1o.6f.1T={},1o.6f.2e=0):1o.6f.1T[i]=n}1l n},1o.fR={},1o.Bj={},1o.d4=2,1o.Do=!1,1o.r3=1,1o.By={1y:"xy",9c:"3d,1y",1N:"xy",8a:"3d,1N",bQ:"yx",c2:"yx",5x:"xy",6T:"3d,5x",6b:"yx",7o:"3d,6b",6y:"xy",5i:"xy",8t:"yx",6B:"yx",3P:"r",7e:"3d,3P",8Y:"r",8E:"r",8k:"5x",81:"6b",aa:"xy",au:"yx",5S:"xy",7g:"r",5z:"xy",rW:"yx",7Y:"xy,5x",b9:"r"},1o.4F={9H:!1,aH:!1,dZ:!1,8o:!1,lB:!1},1o.Bz=1n(e){1j(1a t=0;t<e.1f;t++){if(e[t].5a)if(e[t].5a.1L("1o.2j.js")>-1)1l e[t].5a.2p("1o.2j.js")[0]+"iJ/"}1l"./iJ/"}(2g.eC("fT")[0].7d),1o.3I={jZ:1,zu:1,kW:1,rM:1,rj:1,tA:0,Bl:10,wT:0,Gp:0,p6:-1,rm:0,GC:1,eY:0,q5:0,kI:0,oP:1,bI:0,jd:0,yc:mW,r4:mW,iu:1,uo:0,wX:0,sV:1,rH:0,Bm:0,kj:0,Bo:hf},1o.h8=0,1o.sp=1,1o.rs=6H,1o.wZ=154,1o.dF=1c,1o.hy=0,1o.vu=0,1o.ny=0,1o.py=0,1o.qA={},1o.en="5h",1o.qm="9f",1o.lK=1c,1o.pS=("p9:"===2g.8d.iT?"79:":2g.8d.iT)+"//8q.1o.bs/",1o.io=!1,1o.mF="5h",1o.gk={1M:151,1s:150},1o.w8=0,1o.i8=11,1o.a3="mt tQ 14X,mt 14V,mt tQ,Bv,Bw,o5-o6",ZC.2L&&(1o.a3="mt tQ,Bv,Bw,o5-o6"),1o.sR=1n(e,t){1j(1a i=(""+e).2p(","),a=0,n=i.1f;a<n;a++){1a l=ZC.GT(i[a]);l=ZC.Bx[l]||l,-1!==ZC.AT(["2U","dP","qU","f5"],l)&&(l="v"+l);1a r=1o.By[l];1c!==ZC.1d(r)&&1o.sR(r),-1===ZC.AT(ZC.RQ,l)&&ZC.RQ.1h(l)}t&&1o.iO(1c,ZC.RQ,t)},1o.iO=1n(e,t,i){1a a=0;if(0===t.1f)i();1u{if(!2g.eC("fT")[0])1l 8m i();!1n n(){1a l,r=!0;1n o(){++a===t.1f?i():n()}1o.Ca(t[a])?l=1o.Bz+"1o-"+t[a]+".2j.js":r=!1,r?ZC.AN.BS(e,l,o):o()}()}},1o.Ca=1n(e){1l-1!==ZC.AT(ZC.RQ,e)&&-1===ZC.AT(ZC.X8,e)},1o.LQ=[],ZC.6Q||1n(){1j(1a e in ZC.bT)ZC.bT.88(e)&&(1o.LQ[e]=1m cz,1o.LQ[e].5a=ZC.bT[e])}(),1w 14T!==ZC.1b[31]&&(1o.LQ["zc.Cb"]=1m cz,1o.LQ["zc.Cb"].5a=ZC.jf),1o.3p=1n(e,t,i){1l 1o.l1?1o.l1(e,t,i):1c},1o.yO=1n(O){1a R5=O.iF||"",F0="",G,MF=1c;1c!==ZC.1d(G=O.1T)&&("3e"==1w G?F0=G:MF=3h.1q(3h.5b(G)));1a DG=1c;if(""!==R5)ZC.A4.a9({1J:"bY",3R:R5,ac:!1,1T:1o.hy?"jS=14H":"",4J:1n(){1l!1},aD:1n(KL){1n 1Y(e){ZC.4f.1T["1T-"+R5]=KL,O.bD="3i",ZC.2E(e.ba,O)}4O{DG=3h.1q(KL),1Y(DG)}4M(JA){4O{DG=7u("("+KL+")"),1Y(DG)}4M(JA){1l!1}}}});1u{if(""!==F0)4O{DG=3h.1q(F0)}4M(JA){1l!1}1u 1c!==MF&&(DG=MF);1c===ZC.1d(O.bD)&&(O.bD="3i"),ZC.2E(DG.ba,O)}1l 1o.ba(O)},1o.fk=1c,1o.aU={},1o.ba=1n(e,t){if(1c===ZC.1d(t)&&(t=!1),t)1l 1o.yO(e);1c===ZC.1d(ZC.3c)&&ZC.zE();1a i=e.bD||"3i";"hN"===i&&(i="3i"),ZC.2L&&"3i"===i&&(i="2F");1a a=!1;if("!"===i.2x(0,1)&&(a=!0,i=i.2x(1)),a||("3i"===i||"3c"===i&&!ZC.3c||"2F"===i&&!ZC.2F||"3L"===i&&!ZC.3L||"b7"===i&&!ZC.b7)&&(ZC.2F?i="2F":ZC.3c?i="3c":ZC.3L?i="3L":ZC.b7&&(i="b7")),"3L"===i&&1c===ZC.1d(1o.fk)&&(1o.fk=!1),"b7"!==i)1l 1o.rK(e,i);1o.14S(e)},2g.mG&&("aE"===2g.g0?1o.fk=!0:2g.mG("fu",1n(){"aE"===2g.g0&&(1o.fk=!0)})),1o.14R=1o.14Q=1n(e,t){ZC.HF[e]=t},1o.I2=[],1o.YD={},1o.14P=0,1o.14O=0,1o.14N=!1,1o.rk=!1,1o.rJ=!1,1o.14M=!1,1o.2O=1c,1o.XG=1n(e){if(e.2X.id){1j(1a t=1c,i=0,a=1o.I2.1f;i<a;i++)e.2X.id.5y(0,1o.I2[i].K.1f+1)===1o.I2[i].K+"-"&&(t=1o.I2[i]);1l t}},ZC.5j={id:1c,on:!1,ts:1c,1J:1c,fV:-1,mp:[-1,-1]},1w 1o.MP===ZC.1b[31]&&(1o.MP=1n(e){1a t;if("mj"===1o.mF)1R(ZC.bh=!1,e.1J){1i"4I":1j(1a i=!1,a=0;a<1o.I2.1f;a++)t=ZC.A4("#"+1o.I2[a].K+"-1v"),ZC.DQ(e.7s[0].b6,t.2b().1K,t.2b().1K+t.1s())&&ZC.DQ(e.7s[0].bv,t.2b().1v,t.2b().1v+t.1M())&&(i=!0,ZC.5j.id=1o.I2[a].K);i&&(ZC.5j.on=!0);1p;1i"6l":if(ZC.5j.on&&2===e.7s.1f){e.6X();1a n=(e.7s[0].cA-e.7s[1].cA)*(e.7s[0].cA-e.7s[1].cA)+(e.7s[0].dg-e.7s[1].dg)*(e.7s[0].dg-e.7s[1].dg);n=1A.4b(1A.5A(n));1a l=[1A.4b((e.7s[0].cA+e.7s[1].cA)/2),1A.4b((e.7s[0].dg+e.7s[1].dg)/2)];if(-1===ZC.5j.fV)ZC.5j.fV=n,ZC.5j.mp=l,ZC.5j.ts=(1m a2).bH();1u if((1m a2).bH()-ZC.5j.ts>100){if(n>ZC.5j.fV+50)ZC.5j.1J="mj-in",1o.3p(ZC.5j.id,"gv");1u if(n<ZC.5j.fV-50)ZC.5j.1J="mj-4R",1o.3p(ZC.5j.id,"g6");1u{ZC.5j.1J="14L";1a r={};l[0]>ZC.5j.mp[0]+10?(r["x-"]=!0,r.pA=ZC.2l(ZC.5j.mp[0]-l[0])):l[0]<ZC.5j.mp[0]-10&&(r["x+"]=!0,r.pA=ZC.2l(ZC.5j.mp[0]-l[0])),l[1]>ZC.5j.mp[1]+10?(r["y+"]=!0,r.q1=ZC.2l(ZC.5j.mp[1]-l[1])):l[1]<ZC.5j.mp[1]-10&&(r["y-"]=!0,r.q1=ZC.2l(ZC.5j.mp[1]-l[1])),ZC.5j.mp=l,1o.3p(ZC.5j.id,"qd",r)}ZC.5j.ts=(1m a2).bH()}}1p;1i"5T":ZC.5j.id=1c,ZC.5j.on=!1,ZC.5j.1J=1c,ZC.5j.ts=1c,ZC.5j.fV=-1,ZC.5j.mp=[-1,-1]}if(2v.ZC){2v.ZC.DU=[e.b6,e.bv];1a o=1o.XG(e);if(o){if(!1o.4F.9H){if(e.1J===ZC.1b[47]&&(2v.ZC.mZ=[e.b6,e.bv]),"4I"===e.1J&&o.AH)1j(1a s=0;s<o.AH.1f;s++)o.AH[s].L8();if(-1!==ZC.AT(["76","7F","76"],e.1J)&&"yA"!==e.2X.8b.5E())1l;if("7F"===e.1J&&(t=ZC.A4("#"+o.K+"-1v"),ZC.DQ(e.b6,t.2b().1K,t.2b().1K+t.1s(),!0)&&ZC.DQ(e.bv,t.2b().1v,t.2b().1v+t.1M(),!0)))1l;ZC.AN.C2(e.1J,o,1o.hR(e,o))}1o.4F.9H=!1}}},ZC.A4(2g).3t(ZC.P.BX("76"),1o.MP).3t(ZC.P.BX("7F"),1o.MP).3t(ZC.P.BX(ZC.1b[48]),1o.MP).3t(ZC.P.BX(ZC.1b[47]),1o.MP).3t(ZC.P.BX(ZC.1b[49]),1o.MP)),1o.hR=1n(e,t){1a i=ZC.P.MJ(e),a=t.mK(i[0],i[1]),n=ZC.A4("#"+t.K+"-1v"),l=1A.4b(i[0]-n.2b().1K),r=1A.4b(i[1]-n.2b().1v),o="2a";1l/(.*)\\-1z\\1b(.*)\\-1P\\v6\\-1N(.*)/.5O(e.2X.id)&&(o="1z-5D"),/(.*)\\-1z\\1b(.*)\\-1P\\1b(\\d+)\\-1N(.*)/.5O(e.2X.id)&&(o="1z-1P"),/(.*)\\-cE\\-1B\\-(\\d+)\\-2r\\-(\\d+)(.*)/.5O(e.2X.id)&&(o="2r"),/(.*)\\-1V\\-1P\\1b(\\d+)\\-1N/.5O(e.2X.id)&&(o="1V-1P"),/(.*)\\-1V\\-1Q\\1b(\\d+)\\-1N/.5O(e.2X.id)&&(o="1V-1Q"),/(.*)\\-2B\\-1P\\-(.*)/.5O(e.2X.id)&&(o="2B-1P"),/(.*)\\-2A\\-3O\\-x(.*)/.5O(e.2X.id)&&(o="2A"),/(.*)\\-2S\\-(.*?)\\-1N/.5O(e.2X.id)&&(o="2S"),/(.*)\\-1H\\-(.*?)\\-1N/.5O(e.2X.id)&&(o="1H"),{id:t.K,ev:ZC.A4.BX(e),9G:e.2X.id,4u:a?a.K:1c,2X:o,x:l,y:r,2u:!!a&&(l>=a.Q.iX&&l<=a.Q.iX+a.Q.I&&r>=a.Q.iY&&r<=a.Q.iY+a.Q.F),ez:ZC.2L}},1w 1o.SO===ZC.1b[31]&&(1o.SO=1n(e){1j(1a t=0,i=1o.I2.1f;t<i;t++)1o.I2[t].9p();if(ZC.2L&&ZC.3o)ZC.3o=!1;1u if(ZC.2L||!(e.9u>1)){1a a=1o.XG(e);if(a){if("3J"===e.1J&&ZC.mZ&&(ZC.2l(ZC.mZ[0]-e.b6)>2||ZC.2l(ZC.mZ[1]-e.bv)>2))1l;1o.4F.9H||ZC.AN.C2("9A"===e.1J?"9A":"3J",a,1o.hR(e,a)),1o.4F.9H=!1,e.2X.id!==a.K+"-2B-1N"?a.9p():1o.Z8(e)}}},ZC.2L?(ZC.A4(2g).3t("6l",1n(){ZC.3o=!0}),ZC.A4(2g).3t("5T",1n(){ZC.3o=!1})):(ZC.A4(2g).3t("3J",1o.SO),ZC.A4(2g).3t("9A",1o.SO))),1w 1o.rD===ZC.1b[31]&&(1o.rD=1n(e){e.7s.1f>0&&(ZC.bh=!0)},ZC.A4(2g).3t("4I",1o.rD)),1w 1o.Z8===ZC.1b[31]&&(1o.Z8=1n(e,t,i){if(!e||"yA"===e.2X.8b.5E()||"wJ"===e.2X.8b.5E()||-1!==ZC.P.TB(e.2X).1L("zc-1Z")||-1!==e.2X.id.1L("-1V-")||-1!==e.2X.id.1L("-2A-")||1o.3I.bI){1a a,n,l,r,o,s;i=i||{};1a C=1c===ZC.1d(t)?1o.XG(e):1o.7c(t);if(C){if(-1!==ZC.AT(C.KY,ZC.1b[38]))1l!1;if(1c===ZC.1d(t)?(n=ZC.P.MJ(e),a=C.mK(n[0],n[1])):a=1c!==ZC.1d(i[ZC.1b[3]])?C.OH(i[ZC.1b[3]]):C.AH[0],!a)1l!1;1a A=ZC.A4("#"+C.K+"-1v");1c===ZC.1d(t)?(l=n[0]-A.2b().1K,r=n[1]-A.2b().1v):(l=C.I/2,r=C.F/2);1a Z={};e&&(Z=1o.hR(e,C));1a c=ZC.AN.C2("fP",C,Z,!0);if(!c&&1w c!==ZC.1b[31]&&(!e&&!i["6o-7t"]||e&&e.2X.id!==C.K+"-2B-1N"))1l e.6X(),!1;1a p=ZC.al(C.K);C.ql(a?a.L:-1,e);1a u=-1;if(0!==1o.rs)u=1o.rs;1u 1j(1a h=ZC.AK(C.K);-1===u&&1c!==h.6q;)"3i"!==(u=ZC.1k(ZC.A4(h).2O("9S")))&&""!==u&&1c!==ZC.1d(u)||(u=-1),h=h.6q;u&&-1!==u&&1c!==ZC.1d(u)||(u=1);1a 1b=ZC.A4("#"+C.K+"-2B");if(1b.2O("9S",1o.sp+u+1),1c===ZC.1d(t)){if(e.2X.id===C.K+"-6E-9I"||e.2X.id===C.K+"-6E-dR")1l!0;e.6X()}if(!ZC.AK(C.K+"-2B"))1l!1;l=A.2b().1K,r=A.2b().1v;1a d=A.1s(),f=A.1M();1c===ZC.1d(t)?(o=(n=ZC.P.MJ(e))[0]||ZC.DU[0],s=n[1]||ZC.DU[1]):(o=l+C.I/2,s=r+5);1a g=!1;if(C.UE("cc",!1),C.NZ>0&&(C.UE("cc",!0),g=!0),C.UE("ca",!1),C.NZ<C.R2.1f-1&&(C.UE("ca",!0),g=!0),C.UE("4X",g,!0),o>=l&&o<=l+d*p[0]&&s>=r&&s<=r+f*p[1]){ZC.A4(".zc-2B").5f(1n(){1g.id!==C.K+"-2B"&&C.9p()}),C.T1=[o,s,1c===ZC.1d(t)?e.2X.id:t],1b.2O("3n",0).4n();1a B,v,E=ZC.1k(1b.2O(ZC.1b[19]))+ZC.1k(1b.2O("d8"))+ZC.1k(1b.2O("di")),b=ZC.1k(1b.2O(ZC.1b[20]))+ZC.1k(1b.2O("cn"))+ZC.1k(1b.2O("da")),m=1,K=!1;if(C.o.5k&&C.o.5k["6k-2B"]&&C.o.5k["6k-2B"]&&(m=C.o.5k["6k-2B"].2n?C.o.5k["6k-2B"].2n:1,K=C.o.5k["6k-2B"].14K),1b.2O("3n",m).5e(),"ch"!==C.LW&&K){if(K){1a D=C.B9.O3[C.LW].ak.5k["6k-2B"];ZC.2E(C.o.5k["6k-2B"],D),B="1K"!==C.o.5k["6k-2B"].2K&&ZC.1d(C.o.5k["6k-2B"].2K)?A.2b().1K+A.1s()-E:A.2b().1K}v=A.2b().1v,1b.2O("1K",ZC.BO(1,B)+"px").2O("1v",ZC.BO(1,v)+"px").2O(ZC.1b[20],A.1M()+"px").2O("3C-Dc","1G-3C").4n(),1b=ZC.A4("#"+C.K+"-2B"),K&&1b.PC[0].14J>A.1M()&&1b.2O("9J-y","1Z")}1u{if(1c===ZC.1d(t)&&e.2X.id===C.K+"-2B-1N"){ZC.AK(C.K+"-2B").1I.cn=0;1a F=ZC.A4("#"+C.K+"-2B-1N").3T("9s").2p(","),I=ZC.1k(F[3])-ZC.1k(F[1]);ZC.AK(C.K+"-2B").1I.sM=ZC.1k(F[0])>C.I/2?"100% 0% !7x":"0% 0% !7x",B=l+(ZC.1k(F[0])>C.I/2?ZC.1k(F[2])-E:ZC.1k(F[0])),v=r+(ZC.1k(F[1])>C.F/1.25?ZC.1k(F[3])-b-I:ZC.1k(F[3]))}1u ZC.AK(C.K+"-2B").1I.sM="50% 0% !7x",B=C.T1[0]-E/2,v=C.T1[1],b>C.F*p[1]?v=r:v-r+b>C.F*p[1]&&(v=ZC.BO(v-b,C.F*p[1]-b)),B<l&&(B=ZC.BO(B,l)),B+E>l+C.I*p[0]&&(B=ZC.CV(l+C.I*p[0]-E/2,B-E/2));if(i.2K)1R(i.2K){1i"1v":1p;1i"1v-1K":B=B-(C.I*p[0]-E)/2+5;1p;1i"1v-2z":B=B+(C.I*p[0]-E)/2-5;1p;1i"2c":v=v+(C.F*p[1]-b)-10;1p;1i"2c-1K":v=v+(C.F*p[1]-b)-10,B=B-(C.I*p[0]-E)/2+5;1p;1i"2c-2z":v=v+(C.F*p[1]-b)-10,B=B+(C.I*p[0]-E)/2-5;1p;1i"1K":v=v+(C.F*p[1]-b)/2-5,B=B-(C.I*p[0]-E)/2+5;1p;1i"2z":v=v+(C.F*p[1]-b)/2-5,B=B+(C.I*p[1]-E)/2-5}1u 1c!==ZC.1d(i.x)&&1c!==ZC.1d(i.y)&&(B=l+ZC.1k(i.x),v=r+ZC.1k(i.y));if(1b.2O("1K",ZC.BO(1,B)+"px").2O("1v",ZC.BO(1,v)+"px").4n(),ZC.6Q){1a x=ZC.A4("#"+C.K+"-2B 3E").1s()[0]||120;1b.2O(ZC.1b[19],x+"px")}}1l C.ei=!0,!1}}}},ZC.A4(2g).3t("fP",1o.Z8)),1o.qz=1n(e,t){if(1o.2O)1l 1o.2O.yD?1o.2O.yD(e,t):1o.2O.14I(e+"{"+t+"}",0)},1o.wh=1n(e,t,i){"3i"===t&&(t="100%"),"3i"===i&&(i="100%");1a a=[0,0];1l-1===(""+t).1L("%")&&-1===(""+i).1L("%")||(a=e.wh()),[-1!==(""+t).1L("%")?a[0]*5w(t,10)/100:5w(t,10),-1!==(""+i).1L("%")?a[1]*5w(i,10)/100:5w(i,10)]},1o.J0={},1o.3t=1n(e,t,i){e=e||"1o-j6",1o.J0[e]||(1o.J0[e]={}),1o.J0[e][t]?1o.J0[e][t].1h({fn:i}):1o.J0[e][t]=[{fn:i}]},1o.3m=1n(e,t,i){if(e=e||"1o-j6",1o.J0[e]&&1o.J0[e][t])if(i){1j(1a a=0,n=1o.J0[e][t].1f;a<n;a++)if(1o.J0[e][t][a].fn===i){1o.J0[e][t].6u(a,1);1p}}1u 1o.J0[e][t]=1c},1o.hq=1n(e,t,i,a){if(e=e||"1o-j6",1o.J0[e]&&1o.J0[e][t]){1j(1a n=0,l=1o.J0[e][t].1f;n<l;n++)1c!==ZC.1d(a)?i[i.1f-1]=1o.J0[e][t][n].fn.9l(1o,i):1o.J0[e][t][n].fn.9l(1o,i);if(1c!==ZC.1d(a))1l i[i.1f-1]}},1o.hp=1n(e,t){1l e=e||"1o-j6",1o.J0[e]&&1o.J0[e][t]},1o.rK=1n(e,t){ZC.6z(e,!1);1a i,a,n,l,r,o,s,C,A=[];if(1c!==ZC.1d(i=e.h9)&&(A=i.2p(",")),1c!==ZC.1d(i=e.4E))1R(i){1i"8N":A=[ZC.1b[38],ZC.1b[39],ZC.1b[40],ZC.1b[41],ZC.1b[44]]}1a Z="";if(1c!==ZC.1d(i=e.14G)&&(Z=i),1c!==ZC.1d(i=e.id)&&(Z=i),ZC.AK(Z)){1a c=1c;1j(n=0;n<1o.I2.1f;n++)1o.I2[n].K===Z&&(c=1o.I2[n].MK);if(1c!==ZC.1d(c)){if(""!==c)1l;1o.3p(Z,"a4")}1o.aU[Z]={},ZC.2E(e,1o.aU[Z]);1a p=!1,u=1c;1j(n=0;n<1o.I2.1f;n++)1o.I2[n].K===Z&&(1o.I2[n]=1m RZ,u=1o.I2[n],p=!0);if(p||((u=1m RZ).MK="7z",1o.I2.1h(u)),u.K=Z,1o.YD[Z]=!0,"3L"!==t||1o.fk||1o.rK(e,t),!1o.rJ){1o.rJ=!0;1a h={".zc-1I":"2s-9q:"+1o.a3+";2s-2e:"+1o.i8+"px;2s-7i:5h;2s-1I:5h;1D-bZ:2a;1D-3K:2a;",".zc-1I *":"2s-9q:"+1o.a3+";2s-2e:"+1o.i8+"px;2s-7i:5h;2s-1I:5h;1D-bZ:2a;1D-3K:2a;",".zc-1v *":"1D-3y:1K;2w:3i;1D-3K:2a;",".zc-2B *":"1D-3y:1K;2w:3i;",".zc-46 1D":"-7m-ez-6F:2a;-7m-bo-9F:2a;-14e-bo-9F:2a;-Ds-bo-9F:2a;-ms-bo-9F:2a;bo-9F:2a;",".zc-5X":"-7m-bo-9F:2a;-7m-ez-6F:2a;-7m-jj-5V-1r:aX;",".zc-3f":"-7m-bo-9F:2a;-7m-ez-6F:2a;-7m-jj-5V-1r:aX;",".zc-13M":"-7m-bo-9F:2a;-7m-ez-6F:2a;-7m-jj-5V-1r:aX;",".zc-2A-4K":"4S:2q;-7m-bo-9F:2a;-7m-ez-6F:2a;-7m-jj-5V-1r:aX;",".zc-6C":"2K:4D;9J:97;1G:7Z 2V #2T;1W:#14d 3R("+(ZC.6Q?"//":ZC.yJ)+") no-6G 3G ah",".zc-6C-1":"3x:13I 7Z 7Z 7Z;1D-3y:3G !7x;",".zc-6C-1 a":"1r:#yL;2s-2e:s5;1y-1M:125%;",".zc-6C-2":"3x:7Z;1r:#2T;1D-3y:3G !7x;",".zc-6C-3":"3x:7Z;1D-3y:3G;1y-1M:125%;",".zc-6C-3 3E":"1W-1r:#yL;1y-1M:125%;1r:#2T;1G:80 2V #2T;3x:7Z ah;2s-7i:6A;1s:13H;2w:0 3i;4S:8s;1D-3y:3G",".zc-6C-4":"1r:#2T;1y-1M:125%;",".zc-6C-4 3E":"8X:2z;1r:#2T;1y-1M:125%;",".zc-4P":"1G:7Z 2V #2T;1W:#4L",".zc-4J":"1G:7Z 2V #2T;1W:#w9",".zc-4r":"1G:7Z 2V #2T;1W:#4L",".zc-4H-5o-1H":"3x:ep ah 5u;1D-3y:1K;1r:#2T",".zc-4H-5o-ap":"3x:5u rI",".zc-4H-5o-8e":"3x:rI rI 5u !7x",".zc-4H-5o-ap c4":"1D-3y:1K;1W:#2T;1r:#4v;1G:80 2V #8D;",".zc-4H-5o-1H a5":"1r:#4v;3x:5u;2w:0 7Z 0 0;1W-1r:#4L;",".zc-4H-5o-ap a5":"1r:#4v;3x:5u;2w:0;1W-1r:#2T",".zc-4H-5o-8e a5":"3x:ep ah !7x;2w:0 13G 0 0 !7x;1W-1r:#9b !7x;1G:5u 13F #86 !7x",".zc-4H-s0":"2s-2e:13E !7x;13D-13C:-80;1y-1M:125%",".zc-4H-s1":"2s-2e:s5 !7x;1y-1M:125%",".zc-4H-s1 a":"1r:#2T;3x:13A ah;2K:jO;1v:ep;1G:80 2V #8D;1G-2c:gM 2V #8D",".zc-cL-6L":"1W-1r:#2T;1r:#8D !7x",".zc-cL-fD":"1W-1r:#4L;1r:#7b !7x",".zc-4r 1H":"3M:13z-8K;2K:jO;1v:-5u",".zc-cl 3E":"2K:4D;1D-3y:3G;3x:7Z;1W:#4L;1r:#2T",".zc-fS-6Q":"3x:0;2K:4D;2s-2e:yl;2s-7i:6A;2s-9q:"+1o.a3+";1r:#lA;1D-3y:1K",".zc-fS":"3x:0;2K:4D;","#zc-5R":"3M:8K;2K:4D;1v:0;1K:0;1s:100%;1M:100%;2w:0;3x:0;1W:#2T;",".zc-2B":"2K:4D;3M:2a;1W-6G:no-6G !7x;1W-2K:50% 0% !7x;",".zc-2B-eh":"2s-2e:80;3x:0;1y-1M:80;1G-2c:80 2V #4v",".zc-2B-1P":"4S:8s;y5-8A:n3",".zc-8V":"1W:#9b",".zc-8V 3E.zc-8V-wP":"2K:4D;1G:5u 2V #86;3x:ah 13x;1W-1r:#8D;1r:#2T",".zc-fC":"1W-1r:#2T;1r:#4v;1G:5u 2V #4L",".zc-2i-1H-6s":"1G-gG:gG",".zc-2i-1H-6s td":"3x:ep ah 5u 5u",".zc-1T-6s":"1G-gG:gG",".zc-1T-6s o4":"2s-9q:"+1o.a3+";1D-3y:1K;2s-2e:s5;2s-7i:tN;3x:xY qK xY ep;1W-1r:#86;1G-2c:5u 2V #cT",".zc-1T-6s th":"2s-9q:"+1o.a3+";1D-3y:1K;2s-2e:13w;2s-7i:tN;3x:5u qK 5u ep;1W-1r:#7b;1G-2c:80 2V #cT",".zc-1T-6s td":"2s-9q:"+1o.a3+";1D-3y:1K;2s-2e:xC;3x:80 qK 80 ep;1W-1r:#jE;1G-2c:80 2V #9b;y5-8A:n3",".zc-aQ":"1v:0;1K:0;2K:jO",".zc-3l":"1v:0;1K:0;2K:4D"};ZC.d1||(h[".zc-1T-6s th:cX(:8e-y6)"]="1G-2z:80 fJ #cT",h[".zc-1T-6s td:cX(:8e-y6)"]="1G-2z:80 2V #9b");1a 1b=2g.eC("fT")[0],d=2g.4W("1I");if(d.1J="1D/2O",d.4m("1T-xW","1o"),1b.3b(d),!1o.2O)1j(n=0,l=2g.g5.1f;n<l;n++)2g.g5[n].y7&&"1o"===2g.g5[n].y7.bP("1T-xW")&&(1o.2O=2g.g5[n]);1j(1a f in 1o.2O||(1o.2O=2g.g5[2g.g5.1f-1]),h)1c!==ZC.1d(1o.qA[f])?1o.qz(f,1o.qA[f]):1o.qz(f,h[f])}if("3L"===t&&!1o.rk)2g.13s.2Q("7n","nm:nx-nj-bs:3L"),2g.13r().13q=".qS { y8:3R(#2q#ya); }",1o.rk=!0;1a g="";1o.lK&&(g=1o.lK),e.1T&&1c!==ZC.1d(i=e.1T.c1)&&(g=i),1c!==ZC.1d(i=e.c1)&&(g=i);1a B={1T:!1,cF:!1,2O:!1,6O:!1};if(1c!==ZC.1d(i=e.4f))1j(1a v in B)1c!==ZC.1d(a=i[v])&&(B[v]=ZC.2t(a));1a E=!1;1c!==ZC.1d(i=e.5R)&&(E=ZC.2t(i));1a b=!0;1c!==ZC.1d(i=e["3i-bW"])&&(b=ZC.2t(i));1a m=ZC.A4("#"+Z);r=(e[ZC.1b[19]]||"100%")+"",o=(e[ZC.1b[20]]||""+1o.gk.1M)+"","3i"===r&&(r="100%"),"3i"===o&&(o="100%");1a K=1o.wh(m,r,o);s=K[0],C=K[1],E&&(s=ZC.A4(2v).1s(),C=ZC.A4(2v).1M(),2g.3s.1I.9J="97"),s<10&&(s=1o.gk.1s),C<10&&(C=1o.gk.1M),s=0===s?1o.gk.1s:s,C=0===C?1o.gk.1M:C;1a D=e.iF||"",F=e.x0||"",I=1c,x="",X=1c;1c!==ZC.1d(i=e.1T)&&("3e"==1w i?x=i:X=1o.3I.sV?3h.1q(3h.5b(i)):i),1c!==ZC.1d(i=e.cF)&&("3e"==1w i&&(i=3h.1q(i)),I=i),1c!==ZC.1d(i=e.ww)&&(u.dC=ZC.2t(i)),u.dC&&(u.G1=1c),u.JM=r+"/"+o,u.AB=t,u.A=u,u.iX=0,u.iY=0,u.I=s,u.F=C,u.FX=r,u.MZ=o,u.R5=D,u.F0=x,u.MF=X,u.R3=F,u.MV=I,u.V2=!1,1c!==ZC.1d(e.oN)&&ZC.2t(e.oN)&&(u.R0=!0),u.M2=E,u.S9=B,u.KY=A,u.LW=g,u.H=u,u.E.dM=!1,1c!==ZC.1d(i=e.dM)&&(u.E.dM=ZC.2t(i)),1c!==ZC.1d(i=e.o2)&&(u.E.o2=i),1c!==ZC.1d(i=e.oA)&&(u.E.oA=i),1c!==ZC.1d(i=e.u4)&&(u.E.u4=i),1c!==ZC.1d(i=e.tv)&&(u.E.tv=i);1a y={};1j(1a Y in 1c!==ZC.1d(i=e.13n)&&(y[ZC.1b[0]]=i),1c!==ZC.1d(i=e[ZC.1b[0]])&&(y[ZC.1b[0]]=i),1c!==ZC.1d(i=e[ZC.1b[61]])&&(y[ZC.1b[61]]=i),1c!==ZC.1d(i=e[ZC.1b[62]])&&(y[ZC.1b[62]]=i),1c!==ZC.1d(i=e.1r)&&(y.1r=i),u.E.7Q=y,1c!==ZC.1d(i=e["3i-2y-iJ"])&&(u.vS=ZC.2t(i)),1c!==ZC.1d(i=e.i1)&&(u.eb=i),1c!==ZC.1d(i=e.iJ)&&(u.kD=i),1c!==ZC.1d(i=e.5F)&&(u.CF=i),1c!==ZC.1d(i=e.13y)&&(u.O4=i),1c!==ZC.1d(i=e.iQ)&&1c!==ZC.1d(1o.fR[i])&&(u.dN=i,ZC.HF=1o.fR[i]),1c!==ZC.1d(i=e["4f-14c"])&&(u.N6=i),1o.aU)if(!1o.YD[Y])1j(1a L in 4s 1o.aU[Y],4s ZC.TS[Y],1o.6f.1T)0===L.1L(Y+"-")&&(4s 1o.6f.1T[L],1o.6f.2e--);if(u.ba(),m.2O("9J","97"),u.M2&&m.2O("2K","4D").2O("1v",0).2O("1K",0),(-1!==u.FX.1L("%")||-1!==u.MZ.1L("%")||u.M2||u.R0)&&b){1a w=u.R0||u.M2?ZC.A4(2v):m,M=w.1s(),H=w.1M(),N=0;u.jU=!1,u.ZF=2v.fb(1n(){1a e;if(ZC.AK(Z)&&!u.mh){1a t=ZC.A4("#"+Z+"-1v"),i=!1;if(-1!==(""+u.FX).1L("%")&&t.1f&&w.1f&&t.1s()!==w.1s()&&(i=!0),0!==N||w.1s()===M&&w.1M()===H&&!i){if(w.1s()+w.1M()>0&&(w.1s()!==M||w.1M()!==H)&&(e=u.M2||u.R0?1o.wh(w,""+w.1s(),""+w.1M()):1o.wh(w,u.FX,u.MZ))[0]>10&&e[1]>10){1j(u.I=e[0],u.F=e[1],M=w.1s(),H=w.1M(),n=0,l=u.AH.1f;n<l;n++)u.AH[n].MH[0]=0;S()}}1u if(M=w.1s(),H=w.1M(),M>10&&H>10){1j(-1!==(""+u.FX).1L("%")?u.I=M*ZC.IL(u.FX):u.I=M,-1!==(""+u.MZ).1L("%")?u.F=H*ZC.IL(u.MZ):u.F=H,n=0,l=u.AH.1f;n<l;n++)u.AH[n].MH[0]=0;S()}N++}1u 2v.9X(u.ZF)},1o.3I.yc)}1l u}1n O(){if(!u.E.wh||u.E.wh!==u.I+"/"+u.F){1j(1a e=!1,t=0;t<1o.I2.1f;t++)1o.I2[t].K===u.K&&(e=!0);e&&u.bW()}u.jU=!1}1n S(){u.jU?u.VV.1s!==u.I&&(ik(u.r5),u.VV.1s=u.I,u.VV.1M=u.F,u.r5=5I(O,1o.3I.r4)):(u.jU=!0,u.VV={1s:u.I,1M:u.F},u.r5=5I(O,1o.3I.r4))}},2v.1o=1o,ZC.A4.6I.ax&&6a(ZC.A4.6I.ad)<9){1a qX=2v.yd;2v.yd=1n(){1j(;1o.I2.1f;)1o.3p(1o.I2[0].K,"a4");ZC.A4(2g).3m(ZC.P.BX("76"),1o.MP).3m(ZC.P.BX("7F"),1o.MP).3m(ZC.P.BX(ZC.1b[48]),1o.MP).3m(ZC.P.BX(ZC.1b[47]),1o.MP).3m(ZC.P.BX(ZC.1b[49]),1o.MP).3m("3J",1o.SO).3m("fP",1o.Z8),1o.I2=[],qX&&qX()}}1o.fR.qp={aR:!1,"6p-8O":".","mJ-8O":"","2B-rZ":"14b ol yf","2B-rX":"14a ol yf","2B-eN":"wR","2B-6E":"uq 149","2B-n0":"gL As 148","2B-ru":"gL As 147","2B-uF":"j5 145","2B-uB":"j5 144","2B-uD":"j5 8o","2B-uu":"j5 143","2B-tL":"gL ey yj","2B-sr":"zg ey yj","2B-jo":"142 ey","2B-gv":"yk In","2B-g6":"yk 141","2B-g9":"gL 13Y","2B-4P":"gL 13N","2B-4r":"og yS","2B-qH":"yn To 2D","2B-qP":"yn To 3D","2B-iE":"ub nV","2B-nf":"zg nV","2B-rC":"ub 13X zj","2B-rF":"ub 13U zj","2B-5R":"zl zm","2B-iS":"13T zl zm","2B-cc":"Go t6","2B-ca":"Go 13S","5C-pN":{pR:"%d %M %Y<br>%g:%i:%s %A<br>%q ms",mz:"%d %M %Y<br>%g:%i:%s %A",i0:"%d %M %Y<br>%g:%i %A",mv:"%d %M %Y<br>%g %A",dn:"%d %M %Y",eT:"%M %Y",lY:"%Y"},"j9-5M":["13Q","11q","11p","Xv","cB","Xu","Xt"],"j9-f2":["Xs","Xr","Xq","Xp","Xo","Xn","Xm"],"lp-5M":["cr","Xl","Xj","WE","zC","Xi","Xh","Xg","Xf","Xd","Xc","Xb"],"lp-f2":["Xa","Xw","Xk","Xx","zC","Ym","Yw","Yv","Ys","Yr","Yq","Yp"],"tc-bb":"nv...","8q-bb":"Yo...","7Q-bb-f2":"nv. nO...","7Q-bb-5M":"nv...","7Q-bb-lN":"...","4J-5Z":"An yR Yn Yl","4J-aN":"yR Yk:","4J-7l":"hD","4r-5Z":"og yS Yi","4r-vk":"yT 3h ey","4r-vn":"yT Yh Yg","4r-vo":"oB Yc:","4r-vp":"3h ey:","4r-vg":"oB yP Ya","4r-vq":"if z6 Xy to Wy Vz qD Wx Vv to Vu 156","4r-uV":"yP Vt is Vs...","4r-fY":"og","4r-jB":"Vr","4r-uU":"oB Vk UX Vi Vg.\\n\\Vf z6!","6C-7l":"hD","4P-fq":"vs 3h","4P-g1":"vx 3h","4P-7l":"hD","4P-9l":"Vc","cl-7l":"hD","1V-vF":"ol %3g% of %9T%"},ZC.HF=1o.fR.qp,1o.7c=1n(e){1j(1a t=0;t<1o.I2.1f;t++)if(1o.I2[t].K===e)1l 1o.I2[t];1l 1c},1o.qv=1n(e,t){1l e.OH(t)},1o.Vb=1n(e){e.A8&&e.A8.eJ();1j(1a t=0;t<e.AH.1f;t++)e.AH[t].L8()},1o.V1=1n(e,t,i){1l e.nq(t,i)},1o.Vl=1n(e){e&&e.sm(!0)},1o.z8=1n(e){ZC.X8.1h(e)},1o.z9=1n(e){1l e.kD.2p(",")},1o.Vy=1n(e,t,i){1R(1o.z8(e),t){1i"b1":1o.3t(1c,"eW",1n(t,a){1j(1a n=a[ZC.1b[16]].1f,l=0;l<n;l++)if(a[ZC.1b[16]][l].1J===e){1a r=a[ZC.1b[16]][l];r.id?r.id=r.id:r.id=e.1F(/-/g,"")+l,a[ZC.1b[16]][l]=i(r)}1l a});1p;1i"Ww":1o.3t(1c,"eW",1n(t,a){1a n=1o.7c(t.id);if(-1!==1o.z9(n).1L(e))1j(1a l=a[ZC.1b[16]].1f,r=1c,o=0;o<l;o++)(r=a[ZC.1b[16]][o]).88(e)&&(a[ZC.1b[16]][o]=i(r,t.id));1l a})}},1o.Wu=1n(e,t,i){1l i=i||"2U",e.B9.ph(t,i)},1o.Wt=1n(e,t,i){1a a,n;1R(i=i||"1H"){1i"2S":1j(a=0,n=e.FH.1f;a<n;a++)if(e.FH[a].H4===t||a===t)1l e.FH[a].BD;1p;1i"1H":1j(a=0,n=e.BW.1f;a<n;a++)if(e.BW[a].H4===t||a===t)1l e.BW[a]}1l 1c},1o.aF=1n(e,t){1R(t){1i"1I":1l 1m CY(e);1i"2S":1l 1m DS(e);1i"3C":1l 1m I4(e);1i"Ws":1l 1m DP(e)}1l 1c},1o.iN=1n(e){ZC.6z(e)},1o.1S=1n(e,t){ZC.2E(e,t)},1o.Wr=1n(e,t,i,a){1l ZC.AN.YP(e,t,i,a)},1o.Wq=1n(e,t){1l ZC.AN.GH(e,t)},1o.Wp=1n(e,t,i){ZC.AN.C2(e,t,i)},1o.hh=[],1o.iW=1n(e,t){1o.hh.1h({4x:e,7t:t})},1o.3p=1n(e,t,i){1l 1o.7c(e)?1o.zb(e,t,i):1o.l1?1o.l1(e,t,i):8m 0},1o.zb=1n(e,t,i){1a a,n,l;i=i||{},2g.cQ("zc-5R")&&!i.pQ&&(e="zc-5R"),"3e"==1w i&&(i=3h.1q(i));1a r,o,s,C,A,Z=1o.7c(e);if(1c!==ZC.1d(i[ZC.1b[53]])&&(Z.E[ZC.1b[53]]=ZC.2t(i[ZC.1b[53]])),Z)1R(t){1i"cc":Z.IB&&Z.NZ>0&&(ZC.AN.C2("Wn",Z,Z.FF()),Z.NZ--,1o.3p(Z.K,"b3",{1T:Z.R2[Z.NZ]}));1p;1i"ca":Z.IB&&Z.NZ<Z.R2.1f-1&&(ZC.AN.C2("Wm",Z,Z.FF()),Z.NZ++,1o.3p(Z.K,"b3",{1T:Z.R2[Z.NZ]}));1p;1i"nC":if(1w Z.E["4E-h9"]===ZC.1b[31]&&(Z.E["4E-h9"]=Z.KY.2M(",")),""===i.4E&&1w Z.E["4E-h9"]!==ZC.1b[31])Z.KY=Z.E["4E-h9"].2p(",");1u{Z.KY=[];1a c=(""+i.4E).2p(",");-1!==ZC.AT(c,"8N")&&Z.KY.1h(ZC.1b[38],"vM",ZC.1b[39],ZC.1b[40],ZC.1b[41])}1p;1i"Wk":ZC.DU[0]=ZC.1d(i.x)?i.x:ZC.DU[0],ZC.DU[1]=ZC.1d(i.y)?i.y:ZC.DU[1],i["6o-7t"]=!0,1o.Z8(1c,Z.K,i);1p;1i"VE":Z.9p();1p;1i"a4":1i"Wh":1j(ZC.AN.C2("Wg",Z,{id:e,6J:Z}),4s 1o.YD[e],n=0,l=Z.AH.1f;n<l;n++)Z.AH[n].MH[0]=0,Z.AH[n].BI&&(Z.AH[n].BI.JF=!1,Z.AH[n].3m(!1,!0)),Z.HB&&(Z.HB.JF=!1);1j(1a p in ZC.3o=!1,Z.Y2(),Z.pd(i,!0),1o.3I.GC&&Z.gc(),Z.ZF&&2v.9X(Z.ZF),Z.ZN&&2v.9X(Z.ZN),1o.J0[e]&&4s 1o.J0[e],ZC.P.ET([e+"-fj",e+"-1v",e+"-1D-ku",e+"-np",e+"-7Q"]),Z.jA||4s 1o.aU[e],4s ZC.TS[e],4s ZC.4f.1T["2F-5t"],1o.6f.1T)0===p.1L(e+"-")&&(4s 1o.6f.1T[p],1o.6f.2e--);1a u=ZC.AT(1o.I2,Z);-1!==u&&1o.I2.6u(u,1),1o.I2.1f||(1o.hB=1c,4s 1o.LQ["zc.o8"]),Z=1c,ZC.AN.C2("a4",1c,{id:e});1p;1i"Wf":1l Z.AB;1i"3k":Z.pd(i);1p;1i"eN":Z.oW(i);1p;1i"2y":Z.x4(i);1p;1i"4V":Z.ky();1p;1i"Wc":Z.pH(i.1D);1p;1i"VY":ZC.P.ET([Z.K+"-fC",Z.K+"-8V"]);1p;1i"Yy":if(!ZC.AK(Z.K+"-fC"))1l ZC.P.I1({2o:"zc-3l zc-1I zc-8V",id:Z.K+"-8V",p:ZC.AK(Z.K+"-1v"),wh:Z.I+"/"+Z.F,3n:.75}),ZC.P.I1({2o:"zc-3l zc-1I zc-fC",id:Z.K+"-fC",p:ZC.AK(Z.K+"-1v"),tl:(Z.F-i[ZC.1b[20]])/2+"/"+(Z.I-i[ZC.1b[19]])/2,wh:i[ZC.1b[19]]+"/"+i[ZC.1b[20]],3n:1}),ZC.AK(Z.K+"-fC");1p;1i"Wz":Z.wq(i);1p;1i"6E":Z.kg();1p;1i"5R":Z.oM();1p;1i"iS":1o.3p("zc-5R","a4"),ZC.P.ET("zc-5R");1p;1i"bW":Z.mh=!0;1a h=Z.I,1b=Z.F,d=Z.JM.2p("/"),f=!1,g=d[0],B=d[1];1c!==ZC.1d(a=i[ZC.1b[19]])&&(g=a),1c!==ZC.1d(a=i[ZC.1b[20]])&&(B=a),1c!==ZC.1d(a=i.1z)&&(f=ZC.2t(a)),Z.jA&&(1o.aU[Z.K][ZC.1b[19]]=g,1o.aU[Z.K][ZC.1b[20]]=B);1a v=1o.wh(ZC.A4("#"+Z.K),g,B);(i.3w||(h!==v[0]||1b!==v[1])&&v[0]>10&&v[1]>10)&&(Z.I=v[0],Z.F=v[1],1c!==ZC.1d(a=i.3w)&&(Z.o.3w=a),""===Z.MK&&(Z.E["6o-7t"]=!0,Z.E[ZC.1b[53]]=!0,Z.bW(f),Z.FX=g,Z.MZ=B,Z.mh=!1));1p;1i"Yz":1i"10v":(r=Z.C7(i[ZC.1b[3]]))&&r.YX(i,"5e");1p;1i"iE":1i"nf":ZC.DU[0]=ZC.1d(i.x)?i.x:ZC.DU[0],ZC.DU[1]=ZC.1d(i.y)?i.y:ZC.DU[1],(r=Z.C7(i[ZC.1b[3]]))&&Z.W1(r.K,"iE"===t);1p;1i"Ga":1i"10S":1i"Fj":if(r=Z.C7(i[ZC.1b[3]])){1a E=i.ev||{};(o=r.HO(i.3V,i.4T))&&o.S.1f&&!i.xy?(s=o.L,C=ZC.1k(i.5Q||"0"),E.9G=r.K+ZC.1b[35]+s+"-2r-"+C,E.3S=!0):E.9G=r.K+"-xy-"+ZC.1k(i.y||"0")+"-"+ZC.1k(i.x||"0"),"Fj"===t?(E.9u=0,r.TQ(E)):r.A.A8&&("Ga"===t?r.A.A8.eK(E,i.1T):r.A.A8.5e())}1p;1i"10R":ZC.lV=!0;1p;1i"10Q":ZC.lV=!1;1p;1i"10P":if(r=Z.C7(i[ZC.1b[3]])){o=r.HO(i.3V,i.4T),s=ZC.1k(o?o.L:0),C=ZC.1k(i.5Q||"0");1a b=r.AY.A7[s].FR(C);r.L8(),b.HZ()}1p;1i"10N":1i"10M":(r=Z.C7(i[ZC.1b[3]]))&&r.YX(i,"4n");1p;1i"10L":ZC.AK(Z.K+"-4P")?ZC.P.ET(Z.K+"-4P"):Z.k7();1p;1i"10K":ZC.AK(Z.K+"-4r")?ZC.P.ET(Z.K+"-4r"):Z.jW();1p;1i"xg":ZC.AK(Z.K+"-6C")?ZC.P.ET([Z.K+"-6C",Z.K+"-6C-4K"]):Z.pj();1p;1i"10J":(r=Z.C7(i[ZC.1b[3]]))&&r.PA(i);1p;1i"10H":1l(r=Z.C7(i[ZC.1b[3]]))?r.AF:1c;1i"10w":1i"10G":1l ZC.g2;1i"10F":1l(r=Z.C7(i[ZC.1b[3]]))?r.EX:1c;1i"10E":(r=Z.C7(i[ZC.1b[3]]))&&(1c===ZC.1d(Z.o[ZC.1b[16]][r.L][ZC.1b[26]])&&(Z.o[ZC.1b[16]][r.L][ZC.1b[26]]={}),ZC.2E(i,Z.o[ZC.1b[16]][r.L][ZC.1b[26]]),1c===ZC.1d(r.o[ZC.1b[26]])&&(r.o[ZC.1b[26]]={}),ZC.2E(i,r.o[ZC.1b[26]]),1o.4F.lB=!0,r.ua(),r.JU(!0,!0),1o.4F.lB=!1);1p;1i"10D":1l Z.LE;1i"10C":1a m=0;1c!==ZC.1d(a=i.3g)&&(m=ZC.1k(a)),Z.LE=m,ZC.ZZ(1n(){Z.3k(),Z.1q(),Z.1t()},!0);1p;1i"10B":ZC.A4(2g).3m(ZC.P.BX(ZC.1b[48]),1o.MP).3m(ZC.P.BX(ZC.1b[47]),1o.MP).3m(ZC.P.BX(ZC.1b[49]),1o.MP).3m("3J",1o.SO).3m("fP",1o.Z8),Z.D4&&Z.D4.3m()}1j(1o.q9&&1c!==(A=1o.q9(e,t,i))&&(a=A),1o.pl&&1c!==(A=1o.pl(e,t,i))&&(a=A),1o.pK&&1c!==(A=1o.pK(e,t,i))&&(a=A),1o.q6&&1c!==(A=1o.q6(e,t,i))&&(a=A),1o.t8&&1c!==(A=1o.t8(e,t,i))&&(a=A),1o.rq&&1c!==(A=1o.rq(e,t,i))&&(a=A),n=0,l=1o.hh.1f;n<l;n++)t===1o.hh[n].4x&&1c!==(A=1o.hh[n].7t.4x(1o,e,i))&&(a=A);1l a},1o.iW("xf",1n(e,t){1a i=1o.7c(e);i.DD["6k-2B"]=i.DD["6k-2B"]||{},i.DD["6k-2B"]["5G-2C"]=i.DD["6k-2B"]["5G-2C"]||[];1j(1a a=t.id||"",n=i.DD["6k-2B"]["5G-2C"],l=!1,r=0;r<n.1f;r++)if(n[r].id===a){l=!0;1p}l||i.DD["6k-2B"]["5G-2C"].1h(t)}),1o.q9=1n(e,t,i){1a a;2g.cQ("zc-5R")&&(e="zc-5R"),"3e"==1w(i=i||{})&&(i=3h.1q(i));1a n,l,r,o,s,C,A,Z,c,p,u,h,1b,d,f,g,B,v,E,b,m=1o.7c(e),K=!(1c!==ZC.1d(i.3S)&&!ZC.2t(i.3S)),D=1c!==ZC.1d(i.4X)&&ZC.2t(i.4X),F=1w i.fZ!==ZC.1b[31]&&ZC.2t(i.fZ);if(m){1R(-1===ZC.AT(["Gm","Df","oi","Gl","Gb","Gk","Ec","b3"],t)&&((l=m.FF()).aU=i,ZC.AN.C2(t,m,l)),t){1i"10A":if(!(n=m.C7(i[ZC.1b[3]])))1l 1c;n.IG&&n.IG.NT&&(n.IG.NT(),n.IG.3m()),n.ID&&n.ID.NT&&(n.ID.NT(),n.ID.3m());1p;1i"10y":1l(n=m.C7(i[ZC.1b[3]]))&&(r=n.HO(i.3V,i.4T))?r.jG(i[ZC.1b[9]]||1):1c;1i"10x":1l(n=m.C7(i[ZC.1b[3]]))&&(o=n.BK(i.8C||""))?1c!==ZC.1d(i[ZC.1b[9]])?o.AX?o.AX(i[ZC.1b[9]]):1c:1c!==ZC.1d(i.m5)&&o.KW?o.KW(i.m5):1c:1c;1i"tR":if(!(n=m.C7(i[ZC.1b[3]])))1l 1c;1a I={id:"K",x:"iX",y:"iY",1s:"I",1M:"F",1r:"C0",iB:"B8",cV:"AZ",gs:"BU",gq:"AQ",gu:"A0",gg:"AC"};1R(i.4d){1i"3a":1j(p in l={},I)l[p]=n[I[p]];1l ZC.2E({1J:n.AF},l),l;1i"2u":1j(p in l={},I)l[p]=n.Q[I[p]];1l l;1i"1z":if(!(o=n.BK(i.8C||"")))1l 1c;1j(p in l={},I)l[p]=o[I[p]];1l ZC.2E({1J:o.AF,1D:o.M&&o.M.AP||"",10U:1c!==o.FG&&"5C"===o.FG.o.1J,7h:o.E4,10I:o.SQ,10V:o.A9,6n:o.W,6d:o.B7,iC:o.EO,cK:o.H7,11d:o.A6,11o:o.BV},l),o.M&&""!==o.M.AP&&(l.1H={x:o.M.iX,y:o.M.iY,1s:o.M.I,1M:o.M.F,2f:o.M.AA}),"v"===o.AF?ZC.2E({f4:o.C8,11n:o.EN,DO:o.B4,Em:o.BQ,En:o.GX,Et:o.HQ},l):"1z-r"===i.8C?ZC.2E({11m:o.DL},l):ZC.2E({DO:o.W[o.X],Em:o.W[o.A1],En:o.W[o.E7],Et:o.W[o.EG],11k:o.X,11i:o.A1,11e:o.E7,11c:o.EG},l),l;1i"1B":if(!(r=n.HO(i.3V,i.4T)))1l 1c;1j(p in l={},I)l[p]=r[I[p]];1a x=r.AL&&n.E["1B"+r.L+".2h"];1l ZC.2E({2h:x,id:r.H4,2Y:r.L,1J:r.AF,1D:r.AP,6n:r.W,3z:r.BL,po:r.C9,11a:r.KT,7H:r.DV,iq:r.KJ},l),r.U1&&ZC.2E({1Q:{2h:r.U1.AL,2e:r.U1.AI,1J:r.U1.DN,gu:r.U1.A0,gg:r.U1.AC,gs:r.U1.BU,gq:r.U1.AQ}},l),l;1i"2r":if(r=n.HO(i.3V,i.4T)){if(E=1c!==ZC.1d(i.5Q)?ZC.1k(i.5Q):0,!r.S[E])1l 1c;1j(p in s=r.FR(E),(l={}).cS=s.H.E[s.K+"-cS"],I)-1!==ZC.AT(["x","y",ZC.1b[19],ZC.1b[20]],p)?l[p]=s[I[p]]:l[p]=s.N[I[p]];if(ZC.2E({3V:r.L,2Y:s.L,2e:s.AI,1U:s.AE,h7:s.BY,119:s.JG},l),-1!==r.AF.1L("3P")&&ZC.2E({bR:s.B2,9P:s.BH,7p:s.A.Q3,8v:100*s.AE/s.A.A.KO[s.L]},l),r.KJ){1a X={};1j(p in r.KJ)r.KJ[p]3F 3N?X[p]=r.KJ[p][E]:X[p]=r.KJ[p];l.iq=X}1l l}1l 1c}1p;1i"xE":1a y=[],Y=i.x,L=i.y,w=ZC.al(m.K);Y/=w[0],L/=w[1];1j(1a M=0;M<m.AH.1f;M++){n=m.AH[M];1j(1a H=0;H<n.AY.A7.1f;H++){r=n.AY.A7[H];1a N=n.BK(r.BT("k")[0]),O=n.BK(r.BT("v")[0]);if(N&&O){if(N.MS&&N.MS){1a S=N.MS(N.D8?L:Y),P=N.MS(N.D8?L:Y,1c,!0);y.1h({hA:"84-1z",ho:ZC.2l(Y-N.H1(S)),4u:n.K,74:r.L,Dz:N.BE,118:S,117:P,yh:N.BW[S]||"",Fi:N.W[S],115:N.KW(N.D8?L:Y)})}if(O.KW){1a G=O.KW(O.D8?Y:L,!0);y.1h({hA:"1U-1z",ho:ZC.2l(O.D8?Y:L-O.AX(G)),4u:n.K,74:r.L,Dz:O.BE,Fi:G})}1j(1a T,k=ZC.3v,J=1c,z=0,R=r.S.1f;z<R;z++)if(1c!==(s=r.FR(z)))1R(n.AJ.3w){1i"xy":1i"yx":1a Q=!1;"5x"===s.A.AF?(T=s.5K("h")||s.F,ZC.DQ(Y,s.iX-s.I/2,s.iX+s.I/2)&&ZC.DQ(L,s.iY,s.iY+T)&&(Q=!0,k=1)):"6b"===s.A.AF&&(T=s.5K("w")||s.I,ZC.DQ(Y,s.iX,s.iX+T)&&ZC.DQ(L,s.iY-s.F/2,s.iY+s.F/2)&&(Q=!0,k=1)),((a=1A.5A((s.iX-Y)*(s.iX-Y)+(s.iY-L)*(s.iY-L)))<k||Q)&&(J={hA:"2r",ho:k,4u:n.K,74:r.L,4T:r.H4,7w:s.L,Eb:s.AE,hL:1c===s.BY?N.W[s.L]:s.BY},Q||(k=a));1p;1i"":1a W=s.jM();(a=1A.5A((W[0]-Y)*(W[0]-Y)+(W[1]-L)*(W[1]-L)))<k&&(J={hA:"2r",ho:k,4u:n.K,74:r.L,4T:r.H4,7w:s.L,Eb:s.AE,hL:1c===s.BY?N.W[s.L]:s.BY},k=a)}J&&y.1h(J)}}}1l y;1i"3S":i.2J?(n=m.C7(i[ZC.1b[3]]))&&(n.O7(),n.PV()):1c!==ZC.1d(i[ZC.1b[3]])&&(n=m.C7(i[ZC.1b[3]]))?m.OR(1n(){n.JU(F,F)}):m.JU();1p;1i"10W":(n=m.C7(i[ZC.1b[3]]))&&(1c!==ZC.1d(i["dJ-3Y"])&&ZC.2t(i["dJ-3Y"])?m.E["3a-3Y-"+n.L]=3h.5b(n.E):m.E["3a-3Y-"+n.L]=1c,m.o[ZC.1b[16]][n.L].1J=n.o.1J=n.AF=i.1J,K&&m.JU());1p;1i"103":m.o[ZC.1b[16]].1h(i.1T||{}),K&&m.JU();1p;1i"Gm":if(1o.4F.8o=!0,h={},1b=i.l5?"l5":"1T",1c!==ZC.1d(i[1b])&&("4d"==1w i[1b]?ZC.2E(i[1b],h):h=3h.1q(i[1b])),ZC.6z(h),n=m.C7(i[ZC.1b[3]])){1a V=[];1j(1c===ZC.1d(n.o[ZC.1b[11]])&&(n.o[ZC.1b[11]]=[]),u=(1c!==ZC.1d(i.3V)||1c!==ZC.1d(i.4T))&&(r=n.HO(i.3V,i.4T))?r.L:n.o[ZC.1b[11]].1f,C=0,A=n.o[ZC.1b[11]].1f;C<=A;C++)C===u&&V.1h(h),n.o[ZC.1b[11]][C]&&V.1h(n.o[ZC.1b[11]][C]);ZC.AN.C2("Zz",m,{id:m.K,4u:n.K,3V:u,1T:h}),m.o[ZC.1b[16]][n.L][ZC.1b[11]]=n.o[ZC.1b[11]]=V,m.E.4G=ZC.GT(3h.5b(m.o)),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,m.OR(1n(){n.JU(F,F)}))}1p;1i"Df":1o.4F.8o=!0,(n=m.C7(i[ZC.1b[3]]))&&(r=n.HO(i.3V,i.4T))&&(n.o[ZC.1b[11]].6u(r.L,1),m.o[ZC.1b[16]][n.L][ZC.1b[11]]=n.o[ZC.1b[11]],m.E.4G=ZC.GT(3h.5b(m.o)),ZC.AN.C2("Zy",m,{id:m.K,4u:n.K,3V:r.L}),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,m.OR(1n(){n.JU(F,F)})));1p;1i"oi":if(1o.4F.8o=!0,h={},1c!==ZC.1d(i.1T)&&("4d"==1w i.1T?ZC.2E(i.1T,h):h=3h.1q(i.1T)),ZC.6z(h),n=m.C7(i[ZC.1b[3]])){if(n.BI&&(n.BI.IQ=!1,n.E["e9-2A-1q"]=!0),1c!==ZC.1d(i.4d))1R(i.4d){1i"5D":ZC.2E(h,n.o.5D);1p;1i"cE":1i"ex":ZC.2E(h,n.o[ZC.1b[11]]);1p;1i"2u":ZC.2E(h,n.o.2u);1p;1i"1V":ZC.2E(h,n.o.1V);1p;1i"1B":ZC.2E(h,n.o.1B);1p;1i"3f":ZC.2E(h,n.o.5U[0])}1u ZC.2E(h,n.o);1R(i.4d){1i"5D":m.o[ZC.1b[16]][n.L].5D=n.o.5D;1p;1i"cE":1i"ex":m.o[ZC.1b[16]][n.L][ZC.1b[11]]=n.o[ZC.1b[11]];1p;1i"2u":m.o[ZC.1b[16]][n.L].2u=n.o.2u;1p;1i"1V":m.o[ZC.1b[16]][n.L].1V=n.o.1V;1p;1i"1B":m.o[ZC.1b[16]][n.L].1B=n.o.1B;1p;1i"3f":m.o[ZC.1b[16]][n.L].5U[0]=n.o.5U[0],m.VS(m.o),n.o.5U=m.o[ZC.1b[16]][n.L].5U;1p;2q:m.o[ZC.1b[16]][n.L]=n.o}m.E.4G=ZC.GT(3h.5b(m.o)),ZC.AN.C2("oi",m,{id:m.K,4u:n.K,1T:h,4d:i.4d}),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,m.OR(1n(){n.JU(F,F)}))}1p;1i"Gl":1o.4F.8o=!0,h={},1b=i.l5?"l5":"1T",1c!==ZC.1d(i[1b])&&("4d"==1w i[1b]?ZC.2E(i[1b],h):h=3h.1q(i[1b])),ZC.6z(h),(n=m.C7(i[ZC.1b[3]]))&&(r=n.HO(i.3V,i.4T))&&(1c===ZC.1d(m.o[ZC.1b[16]][n.L][ZC.1b[11]])&&(m.o[ZC.1b[16]][n.L][ZC.1b[11]]=[]),ZC.2E(h,n.o[ZC.1b[11]][r.L]),m.o[ZC.1b[16]][n.L][ZC.1b[11]][r.L]=n.o[ZC.1b[11]][r.L],m.E.4G=ZC.GT(3h.5b(m.o)),ZC.AN.C2("Zx",m,{id:m.K,4u:n.K,3V:r.L,1T:h}),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,m.OR(1n(){n.JU(F,F)})));1p;1i"Gb":1o.4F.8o=!0,(n=m.C7(i[ZC.1b[3]]))&&(r=n.HO(i.3V,i.4T))&&(E=0,1c!==ZC.1d(i.5Q)&&(E=ZC.1k(i.5Q)),a=0,1c!==ZC.1d(i[ZC.1b[9]])&&(a=i[ZC.1b[9]]),ZC.AN.C2("Zw",m,{id:m.K,4u:n.K,3V:r.L,5Q:E,84:E,1U:a,1D:a}),m.o[ZC.1b[16]][n.L][ZC.1b[11]][r.L][ZC.1b[5]][E]=n.o[ZC.1b[11]][r.L][ZC.1b[5]][E]=a,m.E.4G=ZC.GT(3h.5b(m.o)),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,n.JU(F,F)));1p;1i"Zv":if(1o.4F.8o=!0,n=m.C7(i[ZC.1b[3]])){1j(d=i.1z||ZC.1b[50],f=0,g=n.BL.1f;f<g;f++)d===n.BL[f].BE&&1c!==ZC.1d(n.o[d])&&(n.o[d][ZC.1b[5]]=i[ZC.1b[5]],m.o[ZC.1b[16]][n.L][d]=m.o[ZC.1b[16]][n.L][d]||{},m.o[ZC.1b[16]][n.L][d][ZC.1b[5]]=i[ZC.1b[5]]);m.E.4G=ZC.GT(3h.5b(m.o)),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,n.JU(F,F))}1p;1i"Zs":if(1o.4F.8o=!0,n=m.C7(i[ZC.1b[3]])){1j(d=i.1z||ZC.1b[50],f=0,g=n.BL.1f;f<g;f++)if(d===n.BL[f].BE&&1c!==ZC.1d(n.o[d])&&1c!==ZC.1d(n.o[d][ZC.1b[5]])){1j(E=1c===ZC.1d(i.5Q)?n.o[d][ZC.1b[5]].1f:ZC.1k(i.5Q),(v=n.o[d][ZC.1b[5]]).1h(1c),C=v.1f-1;C>E;C--)v[C]=v[C-1];v[E]=i[ZC.1b[9]]||"",m.o[ZC.1b[16]][n.L][d][ZC.1b[5]]=v}m.E.4G=ZC.GT(3h.5b(m.o)),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,n.JU(F,F))}1p;1i"Zr":if(1o.4F.8o=!0,n=m.C7(i[ZC.1b[3]])){1j(d=i.1z||ZC.1b[50],f=0,g=n.BL.1f;f<g;f++)d===n.BL[f].BE&&1c!==ZC.1d(n.o[d])&&1c!==ZC.1d(n.o[d][ZC.1b[5]])&&(E=1c===ZC.1d(i.5Q)?n.o[d][ZC.1b[5]].1f-1:ZC.1k(i.5Q),(v=n.o[d][ZC.1b[5]]).6u(E,1),m.o[ZC.1b[16]][n.L][d][ZC.1b[5]]=v);m.E.4G=ZC.GT(3h.5b(m.o)),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,n.JU(F,F))}1p;1i"Gk":1o.4F.8o=!0,n=m.C7(i[ZC.1b[3]]);1a U=i[ZC.1b[9]]3F 3N;if(n&&(r=n.HO(i.3V,i.4T))){B=n.o[ZC.1b[11]][r.L][ZC.1b[5]],E=1c===ZC.1d(i.5Q)?B.1f:i.5Q,B.1h(1c);1a j=B.1f;1j(E=ZC.BO(0,ZC.CV(E,j)),C=j-1;C>E;C--)B[C]=B[C-1];if(B[E]=i[ZC.1b[9]],!U)1j(f=0,g=n.BL.1f;f<g;f++)if(d=n.BL[f].BE,"k"===n.BL[f].AF&&1c!==ZC.1d(i[d+"-1U"])&&1c!==ZC.1d(n.o[d])&&1c!==ZC.1d(n.o[d][ZC.1b[5]])){1j((v=n.o[d][ZC.1b[5]]).1h(1c),C=v.1f-1;C>E;C--)v[C]=v[C-1];v[E]=i[d+"-1U"],m.o[ZC.1b[16]][n.L][d][ZC.1b[5]]=v}ZC.AN.C2("Zq",m,{id:m.K,4u:n.K,3V:r.L,5Q:E,84:E,1U:i[ZC.1b[9]],1D:i[ZC.1b[9]]}),m.o[ZC.1b[16]][n.L][ZC.1b[11]][r.L][ZC.1b[5]]=n.o[ZC.1b[11]][r.L][ZC.1b[5]],m.E.4G=ZC.GT(3h.5b(m.o)),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,n.JU(F,F))}1p;1i"Ec":if(1o.4F.8o=!0,(n=m.C7(i[ZC.1b[3]]))&&(r=n.HO(i.3V,i.4T))){B=n.o[ZC.1b[11]][r.L][ZC.1b[5]],E=1c===ZC.1d(i.5Q)?r.S.1f-1:ZC.1k(i.5Q);1a q=!0;if(1c!==ZC.1d(i.hL))1j(q=!1,f=0,g=r.S.1f;f<g;f++){if(1c===r.S[f]&&f===i.hL){q=!0,E=f;1p}if(r.S[f]&&1c!==ZC.1d(r.S[f].BY)&&r.S[f].BY===i.hL){q=!0,E=f;1p}}if(q&&ZC.DQ(E,0,r.S.1f-1)){1j(B.6u(E,1),f=0,g=n.BL.1f;f<g;f++)d=n.BL[f].BE,"k"===n.BL[f].AF&&1c!==ZC.1d(i[d])&&ZC.2t(i[d])&&1c!==ZC.1d(n.o[d])&&1c!==ZC.1d(n.o[d][ZC.1b[5]])&&((v=n.o[d][ZC.1b[5]]).6u(E,1),m.o[ZC.1b[16]][n.L][d][ZC.1b[5]]=v);(q||r.S[E])&&(ZC.AN.C2("Zp",m,{id:m.K,4u:n.K,3V:r.L,5Q:E,84:E,1U:r.S[E]?r.S[E].AE:1c,1D:r.S[E]?r.S[E].AE:1c}),m.o[ZC.1b[16]][n.L][ZC.1b[11]][r.L][ZC.1b[5]]=n.o[ZC.1b[11]][r.L][ZC.1b[5]],m.E.4G=ZC.GT(3h.5b(m.o)),n.LK("on-9N"),K&&(n.E["6o-7t"]=!0,n.JU(F,F)))}}1p;1i"b3":if(h={},1c!==ZC.1d(i.1T))if("4d"==1w i.1T)1o.3I.sV?h=3h.1q(3h.5b(i.1T)):ZC.2E(i.1T,h);1u 4O{h=3h.1q(i.1T)}4M(ce){1l m.NH(ce,"3h mE"),!1}ZC.6z(h),1c===ZC.1d(i[ZC.1b[53]])&&(m.E[ZC.1b[53]]=!1),n=1c,1c!==ZC.1d(i[ZC.1b[3]])&&(n=m.C7(i[ZC.1b[3]])),ZC.AN.C2("b3",m,{id:m.K,4u:n?n.K:1c,1T:h});1a $,ee,te=["x","y",ZC.1b[19],ZC.1b[20]];if(n){1j($=0;$<te.1f;$++)4s m.E["3a-"+n.L+"-"+te[$]];m.o[ZC.1b[16]][n.L]=n.o=h;1a ie=!1;if(h.fE)ie=!0;1u if(h.5U)1j(C=0;C<h.5U.1f;C++)"1o.4Y"===h.5U[C].1J&&(ie=!0);ie&&m.VS(m.o),m.E.4G=ZC.GT(3h.5b(m.o)),K&&(n.E["6o-7t"]=!0,D&&m.NZ++,m.OR(1n(){m.1q(n.K),m.AH[n.L].1t()}))}1u{1j($=0;$<te.1f;$++)1j(ee=0;ee<m.AH.1f;ee++)4s m.E["3a-"+ee+"-"+te[$]];m.o=h,m.E.4G=ZC.GT(3h.5b(m.o)),m.VS(m.o),K&&(D&&m.NZ++,m.JU())}1p;1i"Zo":1l(n=m.C7(i[ZC.1b[3]]))?1c!==ZC.1d(i.3V)||1c!==ZC.1d(i.4T)?(r=n.HO(i.3V,i.4T,0))?n.o[ZC.1b[11]][r.L]:1c:n.o[ZC.1b[11]]:1c;1i"e1":1i"YC":if(1o.4F.8o=!0,n=m.C7(i[ZC.1b[3]])){if(1c!==ZC.1d(i.3V)||1c!==ZC.1d(i.4T)?(r=n.HO(i.3V,i.4T,0),h="e1"===t?{}:n.o[ZC.1b[11]]&&n.o[ZC.1b[11]][r.L]?n.o[ZC.1b[11]][r.L]:{}):h="e1"===t?[]:n.o[ZC.1b[11]]||[],1c!==ZC.1d(i.1T)&&("4d"==1w i.1T?ZC.2E(i.1T,h):ZC.2E(3h.1q(i.1T),h)),ZC.6z(h),1c!==ZC.1d(i.3V)||1c!==ZC.1d(i.4T))r=n.HO(i.3V,i.4T,0),m.o[ZC.1b[16]][n.L][ZC.1b[11]][r.L]=n.o[ZC.1b[11]][r.L]=h,h.88("2h")&&(n.E["1B"+r.L+".2h"]=h.2h);1u 1j(m.o[ZC.1b[16]][n.L][ZC.1b[11]]=n.o[ZC.1b[11]]=h,C=0;C<h.1f;C++)h[C].88("2h")&&(n.E["1B"+C+".2h"]=h[C].2h);m.E.4G=ZC.GT(3h.5b(m.o)),n.LK("on-9N"),K&&m.OR(1n(){n.JU(F,F)})}1p;1i"Zl":if(n=m.C7(i[ZC.1b[3]])){if(1c!==ZC.1d(i.3V)||1c!==ZC.1d(i.4T))1l(r=n.HO(i.3V,i.4T,0))&&n.o[ZC.1b[11]][r.L][ZC.1b[5]]||[];1j(b=[],C=0,A=n.AY.A7.1f;C<A;C++)b.1h(n.o[ZC.1b[11]][C][ZC.1b[5]]||[]);1l b}1l 1c;1i"r8":1i"Zk":1o.4F.8o=!0,b=[],1c!==ZC.1d(i[ZC.1b[5]])&&(b="4d"==1w i[ZC.1b[5]]?i[ZC.1b[5]]:3h.1q(i[ZC.1b[5]]));1a ae=!1;if(n=m.C7(i[ZC.1b[3]])){if(1c===ZC.1d(i.3V)&&1c===ZC.1d(i.4T)||(b=[b],ae=!0),ae||"r8"!==t){1j(r=n.HO(i.3V,i.4T,0),C=0,A=b.1f;C<A;C++)if(n.AY.A7[r.L+C])if("r8"===t)ae&&(m.o[ZC.1b[16]][n.L][ZC.1b[11]][r.L+C][ZC.1b[5]]=n.o[ZC.1b[11]][r.L+C][ZC.1b[5]]=b[C]);1u{1a ne=m.o[ZC.1b[16]][n.L][ZC.1b[11]][r.L+C][ZC.1b[5]],le=b[C].1f>0&&1c!==ZC.1d(b[C][0])&&b[C][0].1f>1,re=!0;if(1c!==ZC.1d(a=i.Zj)&&(re=ZC.2t(a)),le){1a oe=ne.1f;1j(Z=0,c=b[C].1f;Z<c;Z++){1j(1a se=!1,Ce=oe-1;Ce>=0;Ce--){if(b[C][Z][0]>ne[Ce][0]){ne.1h(b[C][Z]),se=!0;1p}if(b[C][Z][0]===ne[Ce][0]){se=!0;1p}}se&&re||ne.1h(b[C][Z])}}1u 1j(Z=0,c=b[C].1f;Z<c;Z++)ne.1h(b[C][Z]);i["1X-6n"]&&ZC.1k(i["1X-6n"])<ne.1f&&(ne=ne.7p(-i["1X-6n"])),m.o[ZC.1b[16]][n.L][ZC.1b[11]][r.L+C][ZC.1b[5]]=n.o[ZC.1b[11]][r.L+C][ZC.1b[5]]=ne}}1u{1j(f=0;f<b.1f;f++)m.o[ZC.1b[16]][n.L][ZC.1b[11]][f]=m.o[ZC.1b[16]][n.L][ZC.1b[11]][f]||{},n.o[ZC.1b[11]][f]=n.o[ZC.1b[11]][f]||{},m.o[ZC.1b[16]][n.L][ZC.1b[11]][f][ZC.1b[5]]=n.o[ZC.1b[11]][f][ZC.1b[5]]=b[f];if(n.o[ZC.1b[11]].1f>b.1f)1j(f=b.1f;f<n.o[ZC.1b[11]].1f;f++)4s m.o[ZC.1b[16]][n.L][ZC.1b[11]][f],4s n.o[ZC.1b[11]][f]}n.LK("on-9N"),m.E.4G=ZC.GT(3h.5b(m.o)),K&&n.JU(F,F)}1p;1i"Zd":if((n=m.C7(i[ZC.1b[3]]))&&n.BB){1a Ae=!0;1w n.BB.o.2h===ZC.1b[31]||n.BB.o.2h||(Ae=!1),n.BB.o.2h=!Ae,n.BB.3k(!1),n.BB.1q(),n.BB.1t()}1p;1i"gA":1i"vH":(n=m.C7(i[ZC.1b[3]]))&&n.BB&&("gA"===t?(ZC.AN.C2("Zc",m,n.HW()),ZC.AN.C2("Zb",m,n.HW())):(ZC.AN.C2("Za",m,n.HW()),ZC.AN.C2("Zn",m,n.HW())),n.BB.NC="gA"===t,n.BB.VG(),n.BB.3k(!1),n.BB.1q(),n.BB.1t());1p;1i"10p":(n=m.C7(i[ZC.1b[3]]))&&n.BB&&(r=n.HO(i.3V,i.4T))&&(n.BB.pg(ZC.1k(r.L)),n.BB.VG(),n.BB.3k(!0),n.BB.YZ=!0,n.BB.1q(),n.BB.1t());1p;1i"10o":(n=m.C7(i[ZC.1b[3]]))&&m.oV(n.K);1p;1i"gE":1l h=3h.1q(m.E.4G),ZC.6z(h,!0),h;1i"10i":1l h=3h.1q(m.E.7k),ZC.6z(h,!0),h;1i"10g":1l m.AH.1f;1i"10f":1l(n=m.C7(i[ZC.1b[3]]))?n.AY.A7.1f:0;1i"10e":if(n=m.C7(i[ZC.1b[3]])){1a Ze=[];1j(C=0;C<n.BL.1f;C++)Ze.1h(n.BL[C].BE);1l Ze}1l[];1i"10d":1l(n=m.C7(i[ZC.1b[3]]))&&(r=n.HO(i.3V,i.4T))?r.S.1f:1c;1i"10a":1l(n=m.C7(i[ZC.1b[3]]))&&(r=n.HO(i.3V,i.4T))&&1c!==ZC.1d(i.5Q)&&(s=r.S[ZC.1k(i.5Q)])?r.ED?[s.BY,s.AE]:s.AE:1c;1i"109":if((n=m.C7(i[ZC.1b[3]]))&&(r=n.HO(i.3V,i.4T))){1j(b=[],C=0,A=r.S.1f;C<A;C++)r.S[C]?r.ED?b.1h([r.S[C].BY,r.S[C].AE]):b.1h(r.S[C].AE):b.1h(1c);1l b}1l 1c}}1l 1c};1O uG 2k ao{2G(e){1E(e),1g.7z(e)}7z(){1a e=1g;e.OG=1c,e.o={},e.I7=1c,e.JW=1c,e.E={},e.E3=[],e.I6=1c,e.N8=""}GK(e,t,i,a,n){1a l=1g;if(e.I6){n=n||l.N8;1a r=e.I6.4x(l,a,n);i&&r&&(r[i+"-3Y"]?r=r[i+"-3Y"]:r[i+"Gr"]&&(r=r[i+"Gr"]));1a o,s,C=l.8c(),A={},Z={};1j(1a c in r)o=ZC.EC(c),s=ZC.V7(c),"qG"===o?A.A0=A.AC=ZC.AN.G7(r[c]):"107"===o?A.F5=A.FU=A.FD=A.F2=r[c]:"3x"===c?A.FL=A.FM=A.FT=A.EM=r[c]:C[o]?A[C[o]]=r[c]:A[o]=r[c],Z[s]=r[c];t.o||ZC.2E(r,A),ZC.2E(A,t),t.o&&(ZC.2E(Z,t.o),t.KN())}}1q(){1a e,t,i,a,n=1g;"g8"!==1o.qm&&ZC.6z(n.o);1a l="";if(1w n.H!==ZC.1b[31]&&(l=n.H.AB),ZC.ZX(n.o,"hN"),""!==l&&ZC.ZX(n.o,l),1o.3I.oP&&n.o["qa-an"]&&1w n.H!==ZC.1b[31])1j(t=0;t<n.o["qa-an"].1f;t++)i=n.o["qa-an"][t],a=!0,1c!==ZC.1d(i["2j-1s"])&&ZC.1k(i["2j-1s"])>n.H.I&&(a=!1),1c!==ZC.1d(i["1X-1s"])&&ZC.1k(i["1X-1s"])<n.H.I&&(a=!1),1c!==ZC.1d(i["2j-1M"])&&ZC.1k(i["2j-1M"])>n.H.F&&(a=!1),1c!==ZC.1d(i["1X-1M"])&&ZC.1k(i["1X-1M"])<n.H.F&&(a=!1),a&&ZC.2E(i,n.o);1j(n.o.an&&(n.E3=n.o.an),t=0;t<n.E3.1f;t++)if("*"===n.E3[t].c8&&n.E3[t].js){n.o["js-c8"]=n.E3[t].js,n.E3.6u(t,1);1p}if((e=n.o["js-c8"])&&("7y:"===e.2x(0,11)||e.1L("(")<e.1L(")")))4O{n.N8="";1a r=e.1F("7y:",""),o=e.1L("("),s=e.1L(")");-1!==o&&-1!==s&&(n.N8=r.5y(o+1,s-o-1),r=r.5y(0,o)),n.I6=ZC.kn(r,2v)}4M(A){}if(1w n.H!==ZC.1b[31]&&1c!==n.H.QQ)1j(1a C in n.H.QQ)n.H.QQ.88(C)&&1c===ZC.1d(n.o[C])&&(n.o[C]=n.H.QQ[C])}8c(){1l{}}e2(e,t,i){1j(1a a=t.2p(","),n=i.2p(","),l=0,r=n.1f;l<r;l++)e[a[l]]=n[l]}106(){1l 1g.o}108(e){1g.o=e}qF(){1l 1g.E}bP(e){1l 1g.E[e]}4m(e,t){1g.E[e]=t}sA(e){1a t=1g.8c();1l t[e]?1g[t[e]]:1c}mN(e,t){1a i=1g.8c();i[e]&&(1g[i[e]]=t)}1C(e,t,i){1c===t&&(t=!0);1a a=1g;e&&(a.I7||(a.I7={},ZC.2E(a.o,a.I7,!0,i)),a.JW||(a.JW={}),ZC.2E(e,a.JW,!0,i),ZC.2E(e,a.o,!0,i)),1w a.k0!==ZC.1b[31]&&a.k0()&&e&&ZC.2E(e,a.o)}k0(){}4A(e){1j(1a t=0,i=e.1f;t<i;t++)1g.o.88(e[t][0])&&1g.YQ(e[t][0],e[t][1],e[t][2],e[t][3],e[t][4])}YQ(e,t,i,a,n){1a l,r=1g;if(1c!==(l=r.o[e])&&1w l!==ZC.1b[31]){if(i)1R(-1!==i.1L("p")&&(l=ZC.8B(l),i=i.1F("p","")),-1!==i.1L("a")&&(l=ZC.2l(l),i=i.1F("a","")),i){1i"i":l=ZC.1k(l);1p;1i"f":l=ZC.1Y(l);1p;1i"b":l=ZC.2t(l);1p;1i"c":l=ZC.AN.Z2(l,r),(l=ZC.AN.G7(l,r))3F 3N&&("1r"===e||"2s-1r"===e?(r.o["1D-2n"]=l[1],r.VM=l[1],r.E["1D-2n"]=l[1]):e===ZC.1b[61]?(r.o["1G-2n"]=l[1],r.O0=l[1],r.E["b-2n"]=l[1]):("1y-1r"===e&&(r.E["l-2n"]=l[1]),1c===ZC.1d(r.o.2n)&&(r.C5=l[1])),l=l[0])}1c!==ZC.1d(a)&&1c!==ZC.1d(n)&&(l=ZC.5l(l,a,n)),r[t]=l}}DB(){1j(1a e=1g,t=!1,i=0,a=e.E3.1f;i<a;i++){1a n=!1;4O{n=1m c0("1l ("+e.IY(e.E3[i].c8)+")")()}4M(l){n=!1}n&&(t=!0,e.1C(e.E3[i]))}1l t}yX(e){1j(1a t="",i=0,a=e.1f;i<a;i++){1a n=!1;4O{n=1m c0("1l ("+1g.IY(e[i].c8)+")")()}4M(l){n=!1}n&&(t+="<"+e[i].c8+">")}1l""!==t?[t,ZC.Y4.ek(t)]:1c}IY(){1l!0}1S(e){1a t=1g;ZC.2E(e.o,t.o),e.I7&&(t.I7=t.I7||{},ZC.2E(e.I7,t.I7)),e.JW&&(t.JW=t.JW||{},ZC.2E(e.JW,t.JW)),ZC.2E(e.E,t.E),ZC.2E(e.E3,t.E3)}}1O CY 2k uG{2G(e){1E(e),1g.7z(e)}7z(e){1E.7z(e);1a t=1g;e&&e.H&&(t.H=e.H),t.K="",t.DI=1c,t.AL=!0,t.A0="-1",t.AC="-1",t.GQ="",t.HP="",t.W5=!0,t.D7="",t.MC="6G",t.TK="50% 50%",t.XF="",t.KU=1,t.NO="9r",t.NI=90,t.WR=0,t.WB=0,t.AZ=0,t.B8="#4v",t.GD="",t.EV=0,t.G9=0,t.AQ=0,t.BU="#4v",t.C5=1,t.O0=1,t.TI="mA",t.gd="4b",t.ME=!1,t.OQ=45,t.JX=2,t.TA=.75,t.S7="#4L",t.PM=0,t.CX=!0,t.OU=!1,t.LC=!1,t.tC=!1,t.OV=1c,t.BF=""}8c(){1a e=1E.8c();1l 1g.e2(e,"2h,gu,gg,10b,10c,uZ,104,sM,10j,10k,10l,yQ,10m,10n,cV,iB,10q,10r,10s,gq,gs,10h,2n,ur,3K,102,101,Zf,Zh,Zi,1O,1G","AL,A0,AC,GQ,HP,D7,MC,TK,XF,KU,NO,NI,WR,WB,AZ,B8,GD,EV,G9,AQ,BU,O0,C5,TI,ME,OQ,JX,TA,S7,PM,DI,BF"),e}1S(e){1E.1S(e);1j(1a t="AL,A0,AC,GQ,HP,D7,W5,MC,TK,XF,KU,NO,NI,WR,WB,AZ,B8,GD,EV,G9,AQ,BU,O0,C5,TI,ME,OQ,JX,TA,S7,PM,CX,LC,DI,H,BF".2p(","),i=0,a=t.1f;i<a;i++)1w e[t[i]]!==ZC.1b[31]&&(1g[t[i]]=e[t[i]])}k0(){1a e,t,i=1g,a=!1;if((i.o["1O"]||i.o.2o||i.o.id)&&1c!==i.H&&1c!==i.H.N){if(e=i.o["1O"]||i.o.2o)1j(1a n=e.2p(/(\\s+)/),l=0,r=n.1f;l<r;l++)(t=i.H.N["."+n[l]])&&(a=!0,ZC.2E(t,i.o));(e=i.o.id)&&(t=i.H.N["#"+e])&&(a=!0,ZC.2E(t,i.o))}1l 1c!==i.OG&&(t=i.H.N[i.OG])&&(a=!0,ZC.2E(t,i.o)),a}KN(e){1a t,i=1g;1R(1c===ZC.1d(e)&&(e=i.AZ),i.GD){1i"fJ":i.EV=ZC.BO(1,.75*e),i.G9=1.75*e;1p;1i"g8":i.EV=4*e,i.G9=3*e;1p;1i"fI":i.EV=4*e,i.G9=2*e;1p;2q:i.EV=0,i.G9=0}1c!==(t=ZC.1d(i.o["1y-eQ-2e"]))&&(i.EV=5w(t,10)),1c!==(t=ZC.1d(i.o["1y-hE-2e"]))&&(i.G9=5w(t,10))}1q(){1a e,t,i,a,n,l,r,o,s;1E.1q();1a C=1g;if(1c!==(e=ZC.1d(C.o.7a))&&!C.tC){1a A,Z,c,p=-1,u=-1;1j(1w C.E.74!==ZC.1b[31]&&(p=ZC.1k(C.E.74)),1w C.E.7w!==ZC.1b[31]&&(u=ZC.1k(C.E.7w)),r=0,o=e.1f;r<o;r++){if(A=-1,Z=-1,e[r].7q){if(1c!==(t=ZC.1d(e[r].7q["2r-2Y"]))){if(Z=0,c=[],"4d"==1w t)c=t;1u if("3e"==1w t){if(-1!==t.1L(","))c=t.2p(",");1u if(-1!==t.1L("-"))1j(i=t.2p("-"),a=ZC.1k(i[0]);a<=ZC.1k(i[1]);a++)c.1h(a)}1u c=[t];-1!==ZC.AT(c,u)&&(Z=1)}if(1c!==(t=e[r].7q["1B-2Y"])&&1w t!==ZC.1b[31]){if(A=0,c=[],"4d"==1w t)c=t;1u if("3e"==1w t){if(-1!==t.1L(","))c=t.2p(",");1u if(-1!==t.1L("-"))1j(i=t.2p("-"),a=ZC.1k(i[0]);a<ZC.1k(i[1]);a++)c.1h(a)}1u c=[t];-1!==ZC.AT(c,p)&&(A=1)}}0!==A&&0!==Z&&C.1C(e[r])}}if(1c!==(e=C.OV)&&C.1C(e),e=C.o[ZC.1b[0]]){if(e=ZC.AN.Z2(e,1g),"9E("===5P(e).2x(0,4))1j(n=1m 5n("9E\\\\((\\\\d{1,3}),\\\\s*(\\\\d{1,3}),\\\\s*(\\\\d{1,3})\\\\)");l=n.3p(e);)e=e.1F(l[0],ZC.AN.G7(l[0]));if("9U("===5P(e).2x(0,5))1j(n=1m 5n("9U\\\\((\\\\d{1,3}),\\\\s*(\\\\d{1,3}),\\\\s*(\\\\d{1,3})\\\\,\\\\s*([0-9.]+)\\\\)");l=n.3p(e);){1a h=ZC.AN.G7(l[0],C);e=e.1F(l[0],h[0]),C.o.2n=h[1],C.C5=h[1],C.E["bg-2n"]=h[1],1c===ZC.1d(C.E["b-2n"])&&(C.E["b-2n"]=1),1c===ZC.1d(C.E["l-2n"])&&(C.E["l-2n"]=1)}1a 1b=ZC.GT(5P(e)).2p(/\\s+|;|,/);C.A0=ZC.AN.G7(1b[0]),C.AC=1===1b.1f?C.A0:ZC.AN.G7(1b[1])}if(!(1c===ZC.1d(C.o[ZC.1b[62]])&&1c===ZC.1d(C.o[ZC.1b[61]])&&1c===ZC.1d(C.o["1y-1I"])||1c===ZC.1d(C.o["1G-1v"])&&1c===ZC.1d(C.o["1G-2z"])&&1c===ZC.1d(C.o["1G-2c"])&&1c===ZC.1d(C.o["1G-1K"])&&1c===ZC.1d(C.o.1G))){1a d=["1v","2z","2c","1K"],f={1v:[0,"2V","#4v"],2z:[0,"2V","#4v"],2c:[0,"2V","#4v"],1K:[0,"2V","#4v"]};if(C.I7=C.I7||{},e=C.I7.1G)1j(s=e.2p(/\\s/),r=0;r<4;r++)f[d[r]]=[ZC.1k(s[0]||"0"),ZC.GT(s[1]||"2V"),ZC.AN.G7(s[2]||"#cZ")];if(1c!==ZC.1d(C.I7[ZC.1b[62]]))1j(r=0;r<4;r++)f[d[r]][0]=C.I7[ZC.1b[62]];if(1c!==ZC.1d(C.I7["1y-1I"]))1j(r=0;r<4;r++)f[d[r]][1]=C.I7["1y-1I"];if(1c!==ZC.1d(C.I7[ZC.1b[61]]))1j(r=0;r<4;r++)f[d[r]][2]=C.I7[ZC.1b[61]];1j(r=0;r<4;r++)(e=C.I7["1G-"+d[r]])&&(s=e.2p(/\\s/),f[d[r]]=[ZC.1k(s[0]||"0"),ZC.GT(s[1]||"2V"),ZC.AN.G7(s[2]||"#cZ")]);if(C.JW=C.JW||{},e=C.JW.1G)1j(s=e.2p(/\\s/),r=0;r<4;r++)f[d[r]]=[ZC.1k(s[0]||"0"),ZC.GT(s[1]||"2V"),ZC.AN.G7(s[2]||"#cZ")];if(1c!==ZC.1d(C.JW[ZC.1b[62]]))1j(r=0;r<4;r++)f[d[r]][0]=C.JW[ZC.1b[62]];if(1c!==ZC.1d(C.JW["1y-1I"]))1j(r=0;r<4;r++)f[d[r]][1]=C.JW["1y-1I"];if(1c!==ZC.1d(C.JW[ZC.1b[61]]))1j(r=0;r<4;r++)f[d[r]][2]=C.JW[ZC.1b[61]];1j(r=0;r<4;r++)(e=C.JW["1G-"+d[r]])&&(s=e.2p(/\\s/),f[d[r]]=[ZC.1k(s[0]||"0"),ZC.GT(s[1]||"2V"),ZC.AN.G7(s[2]||"#cZ")]);1j(r=0;r<4;r++)1c===ZC.1d(C.o["1G-"+d[r]])&&(C.o["1G-"+d[r]]=f[d[r]].2M(" "))}C.4A([["2h","AL","b"],["1W-1r-1","A0","c"],["1W-1r-2","AC","c"],["5c-gK","GQ"],["5c-qw","HP"],["1W-3u","W5","b"],["1W-4i","D7"],["1W-6G","MC"],["1W-2K","TK"],["1W-iH","XF"],["1W-1z","KU","f"],["3j-1J","NO"],["3j-2f","NI","i"],["3j-2b-x","WR","f"],["3j-2b-y","WB","f"],[ZC.1b[4],"AZ","i"],["1y-1r","B8","c"],["1y-1I","GD",""],["1O","DI"],["2o","DI"],["1G","BF"]]),"2a"===C.NO&&(C.AC=C.A0,C.NO="9r"),""!==C.BF&&(s=C.BF.2p(/\\s/),C.AQ=ZC.1k(s[0]||"0"),C.GD=ZC.GT(s[1]||"2V"),C.BU=ZC.AN.G7(s[2]||"#cZ")),C.GQ=ZC.AN.Z2(C.GQ,1g),C.KN(),C.4A([["1y-eQ-2e","EV","i"],["1y-hE-2e","G9","i"],[ZC.1b[62],"AQ","i"],[ZC.1b[61],"BU","c"],["2n","C5","f",0,1],["3K","ME","b"],["3K-2f","OQ","i",0,2m],["3K-6N","JX","i"],["3K-2n","TA","f",0,1],["3K-1r","S7","c"],["3K-uI","PM","i"]]),C.O0=C.C5,C.4A([["1G-2n","O0","f",0,1]])}}ZC.CN={ki:1n(e,t,i){1a a,n,l;if(e&&i&&0!==i.1f){if(!t.E["8p-du-2R"])1j(a=0,n=i.1f;a<n;a++)i[a]&&(i[a][0]=6a(4Q(i[a][0]).4C(2)),i[a][1]=6a(4Q(i[a][1]).4C(2)));1a r=!1,o=i.1f;1j(a=0;a<o;a++)1c!==ZC.1d(i[a])&&(l=[i[a][0],i[a][1]],1c!==ZC.1d(i[a][2])&&l.1h(i[a][2],i[a][3]),1c!==ZC.1d(i[a][4])&&l.1h(i[a][4],i[a][5]),t.OU&&(l[0]=1A.4b(l[0]),l[1]=1A.4b(l[1]),4===l.1f&&(l[2]=1A.4b(l[2]),l[3]=1A.4b(l[3]))),t.CX&&t.AZ%2==1&&(l[0]-=.5,l[1]-=.5,4===l.1f&&(l[2]-=.5,l[3]-=.5))),0===a?e.dD(l[0],l[1]):i[a]?(r&&(e.dD(l[0],l[1]),r=!1),2===l.1f?e.h1(l[0],l[1]):4===l.1f?e.uC(l[0],l[1],l[2],l[3]):6===l.1f&&e.6w(l[0],l[1],l[2],ZC.TH(l[3]),ZC.TH(l[4]),l[5])):r=!0}},2I:1n(e,t){1a i=t.H.AB;if(1!==t.C5&&t.LC&&(1c===ZC.1d(t.o[ZC.1b[61]])&&(t.BU=t.A0),1c===ZC.1d(t.o[ZC.1b[62]])))1R(i){1i"3c":t.AQ=.2;1p;1i"2F":t.AQ=.1;1p;1i"3L":t.AQ=.2,t.E.p1=t.C5/10}},1t:1n(e,t,i,a,n,l){if(1c===ZC.1d(n)&&(n=2),1c===ZC.1d(a)&&(a=!1),1c===ZC.1d(l)&&(l=!1),e&&i&&0!==i.1f&&t){1a r,o,s,C,A,Z;!l&&i.1f>2&&1c!==i[0]&&1c!==i[i.1f-1]&&i[0].2M(",")===i[i.1f-1].2M(",")&&(t.TI="4b");1a c=t.H.AB;if("3c"!==c||0!==t.AZ&&"-1"!==t.B8){if(t.ME&&1c!==ZC.1d(t.C6)&&!a){t.C6=t.C6||t.Z;1a p,u=ZC.P.nQ(i,t);1w t.u0!==ZC.1b[31]?p=t.u0:((p=1m DS(t)).1S(t),p.K=t.K+"-sh",p.ME=!1,p.AZ+=p.PM,p.B8=p.S7),p.C5=t.C5*p.TA,1w t.Zm===ZC.1b[31]&&(t.u0=p),p.CX=!1,r=ZC.P.E6(t.C6,c),ZC.CN.2I(r,p),ZC.CN.1t(r,p,u,!1,1,l)}1a h=ZC.1k(t.EV||"0"),1b=ZC.1k(t.G9||"0");"2V"===t.GD&&(h=1b=0);1a d=i.1f;1w t.AA===ZC.1b[31]&&(t.AA=0),"3c"===c&&(e.Zu=t.gd,e.ur=t.TI,e.m4=ZC.AN.es(ZC.AN.G7(t.B8),a?t.O0:t.C5),e.cV=t.AZ,e.m3());1a f=!1;if(-1!==ZC.AT(["2F","3L"],c))o=l?[]:ZC.P.lz(i,c,t,a);1u{1a g=!1;"fI"!==t.GD&&(g=e.lo)&&e.lo(0===h||0===1b?[]:[h,1b]);1a B=0,v=[ZC.3v,ZC.3v,-ZC.3v,-ZC.3v];1j(Z=0;Z<d;Z++)if(1c!==i[Z]){if(1c!==(s=ZC.bK?i[Z]:ZC.P.lC(i[Z],c,t,a))&&!89(s[0])&&!89(s[1])&&f1(s[0])&&f1(s[1]))if(d<=6&&a&&(v[0]=ZC.CV(v[0],s[0]),v[1]=ZC.CV(v[1],s[1]),v[2]=ZC.BO(v[2],s[0]),v[3]=ZC.BO(v[3],s[1])),0===Z)2===s.1f?e.dD(s[0],s[1]):6===s.1f&&e.6w(s[0],s[1],s[2],ZC.TH(s[3]),ZC.TH(s[4]),s[5]);1u if(f&&(e.dD(s[0],s[1]),f=!1),g||0===h||0===1b||4===s.1f||6===s.1f||7===s.1f)2===s.1f?e.h1(s[0],s[1]):4===s.1f?e.uC(s[0],s[1],s[2],s[3]):6===s.1f?e.6w(s[0],s[1],s[2],ZC.TH(s[3]),ZC.TH(s[4]),s[5]):7===s.1f&&e.10t(s[0],s[1],s[2],s[3],s[4],s[5]);1u if(1c!==i[Z-1]){1a E=ZC.P.lC(i[Z-1],c,t,a),b=E[4===E.1f?2:0],m=E[4===E.1f?3:1],K=s[0],D=s[1],F=h+1b,I=K-b,x=D-m,X=1A.5A(I*I+x*x)+B;if(X>h){1a y;B=0,y="fI"===t.GD?1A.4h(ZC.2l(X/((F+t.AZ+1b)/2))):1A.4h(ZC.2l(X/F));1a Y=1A.t1(x,I),L=1A.eA(Y),w=1A.eB(Y),M=b,H=m,N=h;1j(C=0;C<y;C++)"fI"===t.GD&&(F=C%2?t.AZ+1b:h+1b,N=C%2?t.AZ:h),I=L*F,x=w*F,e.dD(M,H),e.h1(M+L*N,H+w*N),M+=I,H+=x;e.dD(M,H),(X=1A.5A((K-M)*(K-M)+(D-H)*(D-H)))>h?e.h1(M+L*h,H+w*h):X>0&&e.h1(M+L*X,H+w*X),e.dD(K,D)}1u B=X}}1u f=!0;t.H&&d<=6&&a&&(t.H.E[t.K+"-cS"]=v)}1R(c){1i"3c":e.rT=t.hu,e.4a();1p;1i"2F":1i"3L":if(1c===ZC.1d(t.o["1v-3Y"])&&t.H.OE&&(!a||t.E.r6)){if(A=t.E.r6?t.A0+"-"+t.AC+"-"+t.D7+"-"+t.AZ+"-"+t.GD+"-"+t.C5+"-"+t.BJ+"-"+t.BC:t.B8+"-"+t.AZ+"-"+t.GD+"-"+t.C5+"-"+t.BJ+"-"+t.BC,1c===ZC.1d(t.H.O9[n])){t.H.O9[n]={cd:A,bz:e,2R:o,1I:t,ab:a};1p}if(t.H.O9[n].cd===A&&t.H.O9[n].2R.1f<qf){C=t.H.O9[n].2R,o&&o[0]&&(C.1f>0&&C[C.1f-1].1F(/[A-Z]+/,"")===o[0].1F(/[A-Z]+/,"")&&(o[0]=""),t.H.O9[n].2R=t.H.O9[n].2R.4z(o));1p}"2F"===c?ZC.CN.U0(t.H.O9[n].bz,t.H.O9[n].1I,t.H.O9[n].2R.2M(" "),t.H.O9[n].ab):ZC.CN.U2(t.H.O9[n].bz,t.H.O9[n].1I,t.H.O9[n].2R.2M(" "),t.H.O9[n].ab),t.H.O9[n]={cd:A,bz:e,2R:o,1I:t,ab:a};1p}"2F"===c?ZC.CN.U0(e,t,o.2M(" "),a,l):ZC.CN.U2(e,t,o.2M(" "),a)}if(1c!==ZC.1d(t.o["1v-3Y"])&&!t.YM&&!t.E["b2-1v"]&&!t.WQ){1a O=1m I4(t.A);O.1S(t),O.WQ=!0,O.ME=!1,O.Z=t.Z,O.1C(t.o["1v-3Y"]),O.K=t.K+"-1v",O.1q(),"2F"===c?ZC.CN.U0(e,O,o.2M(" "),a,l):"3L"===c?ZC.CN.U2(e,O,o.2M(" "),a):ZC.CN.1t(e,O,i,a,n,l)}}}},jR:1n(e,t,i){1a a,n,l,r;ZC.1d(t)&&(t=!1),i=i||"h";1a o=[],s=[];1j(a=0,n=e.1f;a<n;a++)e[a]&&("h"===i?(s.1h(e[a][0]),o.1h(e[a][1])):(s.1h(e[a][1]),o.1h(e[a][0])),0===a&&(s.1h(s[0]),o.1h(o[0])));1j(s.1h(s[s.1f-1]),o.1h(o[o.1f-1]),e=[],l=1,r=o.1f;l<r-1;l++){1a C=[o[l-1],o[l],o[l+1],o[l+2]],A=ZC.2l(s[l+1]-s[l]),Z=1/(A/C.1f),c=ZC.AO.YS(t,C,A,Z);1j(a=0,n=c.1f;a<n;a++)1c!==ZC.1d(c[a][0])&&1c!==ZC.1d(c[a][1])?"h"===i?e.1h([s[l]+c[a][0]*A,c[a][1]]):e.1h([c[a][1],s[l]+c[a][0]*A]):e.1h(1c)}1l e},kd:1n(e,t,i){t.H&&t.H.G1?(1c===ZC.1d(t.H.G1[e.id])&&(t.H.G1[e.id]=2g.oo()),t.H.G1[e.id].3b(i)):e.3b(i)},U0:1n(e,t,i,a,n){if(""!==i||n){1a l,r,o,s,C,A,Z;ZC.4f.1T["2F-5t"]||(ZC.4f.1T["2F-5t"]=ZC.P.F6("5t",ZC.1b[36])),l=n?ZC.4f.1T["2F-5t"].k4(!0):ZC.P.F6("2R",ZC.1b[36]);1a c={};if(t.DI&&""!==t.DI&&(c["1O"]=t.DI),n||(c.d=i),n){t.I<0&&(t.iX-=t.I,t.I=-t.I),t.F<0&&(t.iY+=t.F,t.F=-t.F);1a p=0,u=0,h=1;t.CX&&(h=0,p=u=t.AZ/2,0===t.iX&&(p=0),0===t.iY&&(u=0)),0===h||t.I<=3||t.F<=3?(r=1A.4h(t.iX)+p,o=1A.4h(t.iY)+u,s=1A.4j(t.I)-2*p,C=1A.4j(t.F)-2*p,A=t.F5,Z=t.F5):(r=6a(t.iX.4C(h))+p,o=6a(t.iY.4C(h))+u,s=6a(t.I.4C(h))-2*p,C=6a(t.F.4C(h))-2*u,A=t.F5,Z=t.F5),c.x=r,c.y=o,c[ZC.1b[19]]=ZC.BO(0,s),c[ZC.1b[20]]=ZC.BO(0,C),c.rx=A,c.ry=Z,t.H&&(t.H.E[t.K+"-cS"]=[c.x,c.y,c.x+c[ZC.1b[19]],c.y+c[ZC.1b[20]]])}1a 1b="";1w t.K===ZC.1b[31]||""===t.K?1w t.H!==ZC.1b[31]&&(1b=t.H.ti+"-2R-"+ZC.c6,ZC.c6++):1b=t.K+"-2R";1a d,f="";if(1w t.BJ!==ZC.1b[31]&&1w t.BC!==ZC.1b[31]&&(0===t.BJ&&0===t.BC||(f+="77("+t.BJ+" "+t.BC+")")),1w t.AA!==ZC.1b[31]&&0!==t.AA){1a g=t.AA;1w t.E.cx!==ZC.1b[31]&&(g+=","+(ZC.4w(t.E.cx)-.5)),1w t.E.cy!==ZC.1b[31]&&(g+=","+(ZC.4w(t.E.cy)-.5)),f+=" gm("+g+")"}if(a&&-1!==t.E.3j?(c.3j=t.E.3j,c["3j-3n"]=t.C5):c.3j="2a",c["4a-10u"]=t.TI,c["4a-10Y"]=t.gd,t.AZ>0&&(c.4a=t.B8,c["4a-1s"]=t.AZ,c["4a-3n"]=a?t.O0:t.C5,"2V"===t.GD||0===t.EV&&0===t.G9||("fI"===t.GD?c["4a-tJ"]=[t.EV,t.G9,t.AZ,t.G9].2M(" "):c["4a-tJ"]=t.EV+","+t.G9)),l.id=1b,""!==f&&(c.5J=f),t.o["8p-1y"]&&t.AZ>0?(l.4m("4a",c.4a),l.4m("4a-1s",c["4a-1s"]),l.4m("4a-3n",c["4a-3n"]),l.4m("d",i)):ZC.P.G5(l,c),ZC.CN.kd(e,t,l),(!t.E.1G||"4q"===t.E.1G)&&1w t.E.5g!==ZC.1b[31])if("3e"==1w t.E.5g)ZC.AK(1b+"-5g")||(d=n?ZC.P.F6("5t",ZC.1b[36]):ZC.P.F6("2R",ZC.1b[36]),ZC.P.G5(d,{id:1b+"-5g",5J:f,3j:t.E.5g,"3j-3n":t.C5}),n?ZC.P.G5(d,{x:r,y:o,1s:ZC.BO(0,s),1M:ZC.BO(0,C),rx:A,ry:Z}):ZC.P.G5(d,{d:i}),ZC.CN.kd(e,t,d));1u if(!ZC.AK(1b+"-5g")){1a B=t.E.5g,v=ZC.P.F6("4i",ZC.1b[36]);v.a8?"zc."===t.D7.2x(0,3)?v.a8(ZC.1b[37],"7B",ZC.bT[t.D7]):v.a8(ZC.1b[37],"7B",t.D7):"zc."===t.D7.2x(0,3)?v.4m("5a",ZC.bT[t.D7]):v.4m("5a",t.D7),1c!==ZC.1d(t.E["3u-2R"])&&ZC.P.G5(v,{"3u-2R":"3R(#"+t.E["3u-2R"]+")"}),ZC.P.G5(v,{id:1b+"-5g",x:B[1],y:B[2],"3j-3n":t.C5,1s:t.E[ZC.1b[69]],1M:t.E[ZC.1b[70]],xK:"2a"}),ZC.CN.kd(e,t,v)}}},U2:1n(e,t,i,a){1a n,l,r,o,s,C;a&&(i+=" x e");1a A="";1w t.K===ZC.1b[31]||""===t.K?1w t.H!==ZC.1b[31]&&(A=t.H.ti+"-2R-"+ZC.c6,ZC.c6++):A=t.K+"-2R";1a Z=ZC.P.F6("7n:2S");Z.1I.2K="4D",Z.1I.uc=t.AA,Z.id=A;1a c=ZC.P.F6("7n:2R");if(c.v=i,c.4m("10Z",i),Z.3b(c),0===t.AZ)Z.gX=!1;1u{1a p=ZC.P.F6("7n:4a");if(o=t.C5,1w t.E.p1!==ZC.1b[31]&&(o=t.E.p1),1w t.E.4a!==ZC.1b[31])l=t.E.4a.7i,r=t.E.4a.1r,o=t.E.4a.3n,s=t.E.4a.cU;1u{1R(s="2V",t.GD){1i"2V":s="2V";1p;1i"fJ":s="ri";1p;1i"g8":s="r7";1p;2q:s=t.GD}"2V"!==s&&"0 0"!=(n=ZC.CV(6,t.EV*t.AZ)+" "+ZC.CV(8,t.G9*t.AZ))&&(s=n),l=t.AZ,r=t.B8}ZC.P.G5(p,{7i:l+"px",1r:r,3n:o,110:10,112:"7M",113:"4b",cU:s}),Z.3b(p)}a&&1w t.E.3j!==ZC.1b[31]&&-1!==t.E.3j?(Z.ab=!0,Z.3b(t.E.3j)):Z.ab=!1,ZC.P.G5(Z,{us:"0 0",wO:t.AA%2m==0?"100 100":t.H.I+" "+t.H.F});1a u=0,h=0;if(t.AA%2m!=0&&1w t.E.cx!==ZC.1b[31]&&1w t.E.cy!==ZC.1b[31]){1a 1b=t.H.I/2-t.E.cx,d=t.H.F/2-t.E.cy,f=0===d?0:ZC.U4(1A.af(1b/d));t.E.cy>t.H.F/2&&(f+=180);1a g=1A.5A(1b*1b+d*d);u=1b-g*ZC.EL(f-t.AA),h=d-g*ZC.EF(f-t.AA)}1a B=0-u;1c!==ZC.1d(t.BJ)&&(B+=t.BJ);1a v=0-h;if(1c!==ZC.1d(t.BC)&&(v+=t.BC),Z.1I.1K=B+"px",Z.1I.1v=v+"px",e.3b(Z),t.AA%2m==0?(Z.1I.1s="ah",Z.1I.1M="ah"):(Z.1I.1s=t.H.I+"px",Z.1I.1M=t.H.F+"px"),("4q"===t.E.1G||1w t.E.5g!==ZC.1b[31])&&1w t.E.5g!==ZC.1b[31]){1a E=t.E.5g;1===E.1f?((Z=ZC.P.F6("7n:2S")).1I.2K="4D",Z.1I.uc=t.AA,(c=ZC.P.F6("7n:2R")).v=i,Z.3b(c),Z.3b(E[0]),Z.gX=!1,ZC.P.G5(Z,{id:A+"-5g",ab:!0,us:"0 0",wO:t.AA%2m==0?"100 100":t.H.I+" "+t.H.F}),Z.1I.1K=B+"px",Z.1I.1v=v+"px",e.3b(Z),t.AA%2m==0?(Z.1I.1s="ah",Z.1I.1M="ah"):(Z.1I.1s=t.H.I+"px",Z.1I.1M=t.H.F+"px")):3===E.1f&&((C=ZC.P.F6("5X")).id=A+"-5X","zc."===t.D7.2x(0,3)?C.5a=ZC.bT[t.D7]:C.5a=t.D7,C.1I.2K="4D",C.1I.1K=E[1]+"px",C.1I.1v=E[2]+"px",C.1I.1s=t.E[ZC.1b[69]]+"px",C.1I.1M=t.E[ZC.1b[70]]+"px",e.3b(C))}}};1O DS 2k CY{2G(e){1E(e),1g.7z(e)}7z(e){1E.7z(e);1a t=1g;t.A=e,t.Z=1c,t.C6=1c,t.H4="",t.iX=-1,t.iY=-1,t.DN="4B",t.D=[],t.CZ=[0,0,0,0],t.AA=0,t.AI=0,t.L2=0,t.BJ=0,t.BC=0,t.nE=0,t.DR=0,t.B2=0,t.BH=2m,t.CK=0,t.UD=!1,t.11b=!1,t.eP=0,t.p5="",t.OE=!1,t.ks=1,t.JT=1,t.E5=1c,t.FE=1c,t.IX="3i",t.KE=!1,t.hu="7k-sq",t.QT=!1}8c(){1a e=1E.8c();1l 1g.e2(e,"10X,x,y,2W,cS,11f,11g,11h,3R,2X,km,ko,11j,2e,wN,2f,2S,7M,4S","H4,iX,iY,D,CZ,B2,BH,CK,E5,FE,BJ,BC,DR,AI,L2,AA,DN,KE,IX"),e}5N(){}1S(e){1E.1S(e);1a t,i,a=1g,n="BJ,BC,DR,AI,L2,AA,DN,KE,IX".2p(",");1j(t=0,i=n.1f;t<i;t++)1w e[n[t]]!==ZC.1b[31]&&(a[n[t]]=e[n[t]]);if(e.D&&e.D.1f>0)1j(a.D=[],t=0,i=e.D.1f;t<i;t++)a.D.1h(e.D[t])}hg(e,t){1a i=1g;-1!==(""+e).1L("fU")&&(t="y"),-1!==(""+e).1L("gp")&&(t="x"),e=ZC.1Y((""+e).1F("fU","").1F("gp",""));1a a=1o.4Y.4Y[i.eP];1l a&&(e=1o.4Y.11l(a.c3.x,a.c3.y,a.c3.1s,a.c3.1M,"x"===t?[e,0]:[0,e],a.c3.x5,{3f:i.eP,1P:i.p5,3H:a.c3.3H,km:a.c3.km,ko:a.c3.ko},!0)),e=ZC.1k("x"===t?e[0]:e[1])}qq(e,t){1a i;-1!==(""+e).1L("8L")&&(t="y"),-1!==(""+e).1L("84")&&(t="x"),e=ZC.1Y((""+e).1F("84","").1F("8L",""));1a a=1g.H||1o.I2[0];if(a){1a n=1g.A||a.AH[0];n&&("x"===t?1c!==(i=n.BT("k")[0])&&(e=ZC.1k(i.AX(e))):1c!==(i=n.BT("v")[0])&&(e=ZC.1k(i.AX(e))))}1l ZC.1k(e)}cq(e,t,i){1a a=1g;t=t||"x";1a n=""+e;if(-1!==n.1L("fU")||-1!==n.1L("gp"))1l a.hg(e,t);if(-1!==n.1L("8L")||-1!==n.1L("84"))1l a.qq(e,t);if(""+ZC.1Y(e)!==n)1l-1!==(e+="").1L("%")?a.cq(6a(e.1F("%",""))/100,t,!0):-1!==e.1L("px")?a.cq(6a(e.1F("px","")),t):a.cq(6a(e),t);1a l=1w a.E["p-x"]!==ZC.1b[31]?a.E["p-x"]:a.A.iX,r=1w a.E["p-y"]!==ZC.1b[31]?a.E["p-y"]:a.A.iY,o=1w a.E["p-1s"]!==ZC.1b[31]?a.E["p-1s"]:a.A.I,s=1w a.E["p-1M"]!==ZC.1b[31]?a.E["p-1M"]:a.A.F;1l(e>=1||e<0||1o.3I.wT)&&!i?"x"===t?l+6a(e):r+6a(e):e>=0&&e<1||i?"x"===t?(o=o||1,1A.4b(l+o*e)):(s=s||1,1A.4b(r+s*e)):8m 0}9g(e){1a t,i=1g;if(i.UD)1l-1!==(""+i.o.x).1L("gp")?i.iX=i.hg(i.o.x,"x"):i.YQ("x","iX"),-1!==(""+i.o.y).1L("fU")?i.iY=i.hg(i.o.y,"y"):i.YQ("y","iY"),8m i.Z0();1===e?(1c!==(t=ZC.1d(i.o.x))&&(i.iX=i.cq(t,"x")),1c!==(t=ZC.1d(i.o.y))&&(i.iY=i.cq(t,"y")),-1===i.iX&&(i.iX=i.A.iX),-1===i.iY&&(i.iY=i.A.iY)):2===e&&(i.Z0(),i.I=i.CZ[2]-i.CZ[0],i.F=i.CZ[3]-i.CZ[1])}Z0(){1a e,t=1g,i=ZC.3v,a=ZC.3v,n=-ZC.3v,l=-ZC.3v;1R(t.DN){1i"5G":i=0,a=0,n=0,l=0;1p;1i"3A":1i"6w":1i"3P":i=t.iX-t.AI,a=t.iY-t.AI,n=t.iX+t.AI,l=t.iY+t.AI;1p;2q:1j(1a r=0,o=t.D.1f;r<o;r++)1c!==(e=t.D[r])&&(i=1A.2j(i,e[0]),a=1A.2j(a,e[1]),n=1A.1X(n,e[0]),l=1A.1X(l,e[1]))}t.CZ=[i,a,n,l]}F1(){1a e,t=1g;if("3P"===t.DN){1a i=1,a=[],n=t.B2+t.AA,l=t.BH+t.AA,r=t.AI+1A.4h(t.AQ/2),o=t.CK-1A.4h(t.AQ/2);1j(r>50&&(i=2),r>100&&(i=4),0===o?n%2m!=l%2m&&a.1h([t.iX,t.iY]):a.1h(ZC.AO.BM(t.iX,t.iY,o,n),ZC.AO.BM(t.iX,t.iY,(r+o)/2,n-.25*t.AQ),ZC.AO.BM(t.iX,t.iY,r,n)),e=n;e<=l;e+=i)a.1h(ZC.AO.BM(t.iX,t.iY,r,e));if(a.1h(ZC.AO.BM(t.iX,t.iY,r,l)),a.1h(ZC.AO.BM(t.iX,t.iY,(r+o)/2,l+.25*t.AQ)),0===o)n%2m!=l%2m&&a.1h([t.iX,t.iY]);1u{1j(a.1h(ZC.AO.BM(t.iX,t.iY,o,l)),e=l;e>=n;e-=i)a.1h(ZC.AO.BM(t.iX,t.iY,o,e));a.1h(ZC.AO.BM(t.iX,t.iY,o,n))}1l a.1h([a[0][0],a[0][1]]),ZC.AO.Q6(a,1A.2j(5,r/5),[t.BJ,t.BC])}if(0===t.AA||"fW"!==t.DN&&"5t"!==t.DN)1l ZC.AO.Q6(t.D,1A.2j(5,t.AI/5),[t.BJ,t.BC]);1a s,C,A,Z,c,p,u,h,1b=[];1j(A=ZC.1k((t.CZ[0]+t.CZ[2])/2),Z=ZC.1k((t.CZ[1]+t.CZ[3])/2),s=0,C=t.D.1f;s<C;s++)1c!==t.D[s]&&(c=t.D[s][0]-A,p=t.D[s][1]-Z,u=c*ZC.EF(t.AA)-p*ZC.EL(t.AA),h=c*ZC.EL(t.AA)+p*ZC.EF(t.AA),1b[s]=[u+A,h+Z]);1l ZC.AO.Q6(1b,1A.2j(5,t.AI/5),[t.BJ,t.BC])}kx(){1a e,t,i,a,n,l,r,o,s,C=1g,A=ZC.6Q?ZC.3B:0;1R(C.DN){1i"1y":if(i=[].4z(C.D),0!==C.AA)1j(a=(C.CZ[0]+C.CZ[2])/2,n=(C.CZ[1]+C.CZ[3])/2,e=0,t=i.1f;e<t;e++)1c!==i[e]&&(l=i[e][0]-a,r=i[e][1]-n,o=l*ZC.EF(C.AA)-r*ZC.EL(C.AA),s=l*ZC.EL(C.AA)+r*ZC.EF(C.AA),i[e]=[o+a,s+n]);1a Z=["4B"];1j(e=0,t=i.1f;e<t-1;e++)1c!==i[e]&&1c!==i[e+1]&&Z.1h(ZC.AO.Q6(ZC.AO.Z1([i[e],i[e+1]]),4,[C.BJ,C.BC]));1l Z;1i"9x":1i"8u":1l["3A",ZC.1k(C.iX+A+C.BJ)+","+ZC.1k(C.iY+A+C.BC)+","+ZC.1k(C.AI)];1i"3A":1i"6w":1l["3A",ZC.1k(C.iX+A+C.BJ)+","+ZC.1k(C.iY+A+C.BC)+","+ZC.1k(C.AI+2)];1i"3P":1l["4B",C.F1()];2q:1a c,p=["4B"];1j(i=[],e=0,t=C.D.1f;e<t;e++)if(1c!==C.D[e])if(6===C.D[e].1f)1j(1a u=C.D[e][3];u<C.D[e][4];u+=1)i.1h(ZC.AO.BM(C.D[e][0],C.D[e][1],C.D[e][2],u));1u if(4===C.D[e].1f&&i[e-1]){1a h={x:i[i.1f-1][0],y:i[i.1f-1][1]},1b={x:C.D[e][2],y:C.D[e][3]},d={x:C.D[e][0],y:C.D[e][1]};1j(c=0;c<=1;c+=.1)i.1h([(1-c)*(1-c)*h.x+2*c*(1-c)*d.x+c*c*1b.x,(1-c)*(1-c)*h.y+2*c*(1-c)*d.y+c*c*1b.y])}1u if(7===C.D[e].1f&&i[e-1]){1a f={x:i[i.1f-1][0],y:i[i.1f-1][1]},g={x:C.D[e][0],y:C.D[e][1]},B={x:C.D[e][2],y:C.D[e][3]},v={x:C.D[e][4],y:C.D[e][5]};1j(c=0;c<=1;c+=.1){1a E=(1-c)*(1-c)*(1-c),b=3*c*(1-c)*(1-c),m=3*c*c*(1-c),K=c*c*c;i.1h([E*f.x+b*g.x+m*B.x+K*v.x,E*f.y+b*g.y+m*B.y+K*v.y])}}1u i.1h(C.D[e]);1u i.1f>-1&&p.1h(ZC.AO.Q6(i,1A.2j(5,C.AI/5),[C.BJ,C.BC])),i=[];if(0!==C.AA)1j(a=ZC.1k((C.CZ[0]+C.CZ[2])/2),n=ZC.1k((C.CZ[1]+C.CZ[3])/2),e=0,t=i.1f;e<t;e++)1c!==i[e]&&(l=i[e][0]-a,r=i[e][1]-n,o=l*ZC.EF(C.AA)-r*ZC.EL(C.AA),s=l*ZC.EL(C.AA)+r*ZC.EF(C.AA),i[e]=[o+a,s+n]);1l i.1f>-1&&p.1h(ZC.AO.Q6(i,1A.2j(5,C.AI/5),[C.BJ,C.BC])),p}}1q(e){1a t,i,a,n,l,r,o;1c===ZC.1d(e)&&(e=!1),1g.o.cw||e||1E.1q();1a s=1g;if(!s.o.cw&&!e){s.4A([["3f","eP"]]),"3e"==1w s.o.1P&&s.4A([["1P","p5"]]),0!==s.eP&&(1c===ZC.1d(s.o["3f-1P"])||s.o["3f-1P"])&&(s.o["3f-1P"]=!0,s.o["3f-b2-z-3X"]=!0);1a C=["2b-x","2b-y"];1j(i=0;i<2;i++){1a A=C[i],Z="2b-x"===A?"gp":"fU";if(1c!==(t=s.o[A])&&1w t!==ZC.1b[31]&&-1!==(t=""+t).1L(Z)){t=ZC.1Y(t.1F(Z,""));1a c=1o.4Y.4Y[s.eP];c&&(t=1o.4Y.77(A.1F("2b-"),t,s.A.I,s.A.F,c.c3.x5),s.o[A]=t)}}1j(s.4A([["3R","E5"],["2X","FE"],["4S","IX"],["id","H4"],["2f","AA","i"],["8N","KE","b"],["7M","KE","b"],[ZC.1b[1],"B2","f"],[ZC.1b[2],"BH","f"],[ZC.1b[8],"CK","i"],[ZC.1b[21],"AI","f"],["2e-2","L2","f"],["8p-du-2R","QT","b"],["1J","DN"],["2W","D"],["2b-x","BJ"],["2b-y","BC"],["2b-z","nE","i"],["2b-r","DR","i"],["z-3X","ks","i"],["z-2Y","JT","f"],["10z","hu"]]),s.BJ=ZC.IL(s.BJ,!0),s.BC=ZC.IL(s.BC,!0),s.BJ>-1&&s.BJ<1&&1w s.E["p-1s"]!==ZC.1b[31]&&(s.BJ*=s.E["p-1s"]),s.BC>-1&&s.BC<1&&1w s.E["p-1M"]!==ZC.1b[31]&&(s.BC*=s.E["p-1M"]),s.AI=ZC.BO(1,s.AI),s.L2=ZC.BO(1,s.L2),1c!==s.o["z-3X"]&&1w s.o["z-3X"]!==ZC.1b[31]||(s.ks=s.JT),"fW"!==s.DN&&"5t"!==s.DN||s.4A([[ZC.1b[19],"AI","f"],[ZC.1b[20],"L2","f"]]),s.kb?(s.D=3h.1q(3h.5b(s.FB)),s.kb=!1):s.FB=3h.1q(3h.5b(s.D)),i=0,a=s.D.1f;i<a;i++)if(1c!==s.D[i])1j(1a p=0;p<s.D[i].1f;p++)-1===(""+s.D[i][p]).1L("fU")&&-1===(""+s.D[i][p]).1L("gp")||(s.kb=!0,s.D[i][p]=s.hg(s.D[i][p],p%2==0?"x":"y")),-1===(""+s.D[i][p]).1L("84")&&-1===(""+s.D[i][p]).1L("8L")||(s.kb=!0,s.D[i][p]=s.qq(s.D[i][p],p%2==0?"x":"y"))}if(s.o.cw=1c,s.AA=s.AA%2m,s.9g(1),"2U"!==s.DN){1a u=s.AI;1R(s.DN){1i"5G":1p;1i"Ef":u=s.AI;1a h=.1*s.AI;s.D=[[s.iX-u,s.iY+u-h],[s.iX,s.iY-u-h],[s.iX+u,s.iY+u-h],[s.iX-u,s.iY+u-h]];1p;1i"9j":u=ZC.1k(.9*s.AI),s.D=[[s.iX-u,s.iY-u],[s.iX-u,s.iY+u],[s.iX+u,s.iY+u],[s.iX+u,s.iY-u],[s.iX-u,s.iY-u]];1p;1i"Dt":u=ZC.1k(1.2*s.AI),s.D=[[s.iX-u,s.iY],[s.iX,s.iY+u],[s.iX+u,s.iY],[s.iX,s.iY-u],[s.iX-u,s.iY]];1p;1i"10O":s.D=[[s.iX-u/2,s.iY+s.L2],[s.iX+u/2,s.iY+s.L2],[s.iX+u,s.iY-s.L2],[s.iX-u,s.iY-s.L2],[s.iX-u/2,s.iY+s.L2]];1p;1i"fW":1i"5t":s.D=[[s.iX-u/2,s.iY-s.L2/2],[s.iX+u/2,s.iY-s.L2/2],[s.iX+u/2,s.iY+s.L2/2],[s.iX-u/2,s.iY+s.L2/2],[s.iX-u/2,s.iY-s.L2/2]];1p;1i"10T":s.D=[[s.iX-u/2,s.iY-s.L2/2],[s.iX+3*u/2,s.iY-s.L2/2],[s.iX+u,s.iY+s.L2/2],[s.iX-u,s.iY+s.L2/2],[s.iX-u/2,s.iY-s.L2/2]];1p;1i"8u":u=s.AI,s.D=[[s.iX,s.iY-u],[s.iX,s.iY+u],1c,[s.iX-u,s.iY],[s.iX+u,s.iY]];1p;1i"9x":u=s.AI,s.D=[[s.iX-u,s.iY-u],[s.iX+u,s.iY+u],1c,[s.iX-u,s.iY+u],[s.iX+u,s.iY-u]];1p;1i"bM":u=s.AI/4,s.D=[[s.iX-2*u,s.iY+u],[s.iX-u,s.iY],[s.iX,s.iY+u],[s.iX+u,s.iY-u],[s.iX+2*u,s.iY]];1p;1i"Wa":u=s.AI/4,s.D=[[s.iX-2*u,s.iY+2*u],[s.iX-2*u,s.iY+u],[s.iX-u,s.iY],[s.iX,s.iY+u],[s.iX+u,s.iY-u],[s.iX+2*u,s.iY],[s.iX+2*u,s.iY+2*u],[s.iX-2*u,s.iY+2*u]];1p;1i"Wb":s.CX=!1,u=s.AI/4,s.D=[[s.iX-2*u,s.iY+2*u],[s.iX-2*u,s.iY-u],[s.iX-u,s.iY-u],[s.iX-u,s.iY+2*u],[s.iX-2*u,s.iY+2*u],[s.iX-2*u,s.iY+2*u-u],1c,[s.iX-u/2,s.iY+2*u],[s.iX-u/2,s.iY],[s.iX+u/2,s.iY],[s.iX+u/2,s.iY+2*u],[s.iX-u/2,s.iY+2*u],[s.iX-u/2,s.iY+2*u-u],1c,[s.iX+2*u,s.iY+2*u],[s.iX+2*u,s.iY-2*u],[s.iX+u,s.iY-2*u],[s.iX+u,s.iY+2*u],[s.iX+2*u,s.iY+2*u],[s.iX+2*u,s.iY+2*u-u]];1p;1i"7L":u=2*s.AI;1a 1b=s.AA;s.AA=0;1a d=ZC.AO.BM(s.iX,s.iY,u,1b-35),f=ZC.AO.BM(s.iX,s.iY,u,1b+35);s.D=[[s.iX,s.iY],d,1c,[s.iX,s.iY],f];1p;1i"Wd":1i"Wi":1i"Dh":1i"Wj":1i"Wo":1i"Wv":1i"Wl":1j(s.D=[],u=2*s.AI,l=2m/(n=ZC.1k(s.DN.1F("CA",""))),r=n%2==0?0:-90,o=u/(n>4?2:7-n),i=0+r;i<2m+r;i+=l)s.D.1h(ZC.AO.BM(s.iX,s.iY,.75*u,i),ZC.AO.BM(s.iX,s.iY,.75*o,i+l/2));s.D.1h([s.D[0][0],s.D[0][1]]);1p;1i"Vx":1i"Va":1i"Vd":1i"Vh":1i"Vj":1i"Vm":1i"Vn":1j(s.D=[],u=s.AI,l=2m/(n=ZC.1k(s.DN.1F("Vo",""))),r=n%2==0?0:-90,1c!==ZC.1d(s.o["2f-2b"])&&(r=ZC.1k(s.o["2f-2b"])),i=0+r;i<2m+r;i+=l)s.D.1h(ZC.AO.BM(s.iX,s.iY,u,i));s.D.1h([s.D[0][0],s.D[0][1]]);1p;1i"Vp":1i"Vq":1i"Vw":1i"xB":1i"Y9":1i"Yb":1i"Yd":1j(s.D=[],u=2*s.AI,l=2m/(2*(n=ZC.1k(s.DN.1F("aP","")))),o=.75*u,i=0+(r=n%2==0?0:-90);i<2m+r;i+=2*l){1a g=i+l/2;s.D.1h(ZC.AO.BM(s.iX,s.iY,.75*u,g),ZC.AO.BM(s.iX,s.iY,.75*u,g+l),ZC.AO.BM(s.iX,s.iY,.75*o,g+l+0*l),ZC.AO.BM(s.iX,s.iY,.75*o,g+2*l-0*l))}s.D.1h([s.D[0][0],s.D[0][1]]);1p;1i"oJ":u*=2;1a B=s.iX,v=s.iY-10;s.D=s.D.4z([[B-u/2,v-s.L2/2],[B+u/2,v-s.L2/2],[B+u/2,v+s.L2/2],[B-u/2,v+s.L2/2],[B-u/2,v-s.L2/2],1c]),v+=5,s.D=s.D.4z([[B-u/2,v-s.L2/2],[B+u/2,v-s.L2/2],[B+u/2,v+s.L2/2],[B-u/2,v+s.L2/2],[B-u/2,v-s.L2/2],1c]),v+=5,s.D=s.D.4z([[B-u/2,v-s.L2/2],[B+u/2,v-s.L2/2],[B+u/2,v+s.L2/2],[B-u/2,v+s.L2/2],[B-u/2,v-s.L2/2],1c]);1p;1i"Yf":1j(s.CX=!1,s.D=[],i=0;i<=2m;i+=5)s.D.1h([s.iX+s.AI*ZC.EF(i),s.iY+s.L2*ZC.EL(i)]);s.D.1h([s.D[0][0],s.D[0][1]]);1p;1i"6w":s.CX=!1,s.D=[ZC.AO.BM(s.iX,s.iY,s.AI,s.B2),[s.iX,s.iY,s.AI,s.B2,s.BH,0]];1p;1i"3P":1j(1a E=(s.o["3P-5J"]||"").2p(/=|,/);s.B2<0||s.BH<0;)s.B2+=2m,s.BH+=2m;s.CX=!1;1a b=!1;-1!==ZC.AT(["2F","3L"],s.H.AB)&&s.B2%2m==s.BH%2m&&(s.B2+=.gz,s.BH-=.gz,b=!0);1a m,K,D,F,I,x=s.iX,X=s.iY,y=ZC.4w(s.B2,2),Y=ZC.4w(s.BH,2),L=ZC.4w((y+Y)/2,2),w=u,M=s.CK,H=0===M&&y%2m!=Y%2m&&!b;1R(s.D=[],"3A"!==E[0]&&(0===M?y%2m==Y%2m||b||s.D.1h([x,X]):s.D.1h(ZC.AO.BM(x,X,M,y))),E[0]){1i"7M":1i"xF":s.D.1h(ZC.AO.BM(x,X,w,y),ZC.AO.BM(x,X,w-("xF"===E[0]?ZC.1k(E[1]):0),Y)),H||s.D.1h(ZC.AO.BM(x,X,M,Y));1p;1i"6F":s.D.1h(ZC.AO.BM(x,X,w,y),[x,X,w,y,Y,0]),H||(m=1.5*ZC.1k(E[1])*2m/(2*1A.PI*w),s.D.1h(ZC.AO.BM(x,X,w,Y),ZC.AO.BM(x,X,M,Y),[x,X,M,Y,L+m,1],ZC.AO.BM(x,X,M-ZC.1k(E[1]),L),ZC.AO.BM(x,X,M,L-m),[x,X,M,L-m,y,1]));1p;1i"Yj":m=ZC.1k(E[1]),F=ZC.AO.BM(x,X,(M+w)/2,y),99===m||-99===m?s.D.1h([F[0],F[1],(w-M)/2,y+180,y,99===m?1:0]):s.D.1h(ZC.AO.BM(x,X,(M+w)/2,y+m)),s.D.1h(ZC.AO.BM(x,X,w,y),[x,X,w,y,Y,0]),I=ZC.AO.BM(x,X,(M+w)/2,Y),H?99===m||-99===m?s.D.1h(ZC.AO.BM(x,X,w,Y),[I[0],I[1],(w-M)/2,Y,Y+180,99===m?0:1]):s.D.1h(ZC.AO.BM(x,X,(M+w)/2,Y+m)):(99===m||-99===m?s.D.1h([I[0],I[1],(w-M)/2,Y,Y+180,99===m?0:1]):s.D.1h(ZC.AO.BM(x,X,(M+w)/2,Y+m)),s.D.1h(ZC.AO.BM(x,X,M,Y),[x,X,M,Y,y,1]));1p;1i"3A":1a N=ZC.1Y(E[1]||"1"),O=(5+ZC.2l(Y-y)%2m*50/2m)*N;D=Y%2m==y%2m||b?[x,X]:ZC.AO.BM(x,X,(w+M)/2,(y+Y)/2),s.D.1h(ZC.AO.BM(D[0],D[1],O,0),[D[0],D[1],O,0,2m,0]);1p;1i"Xz":m=ZC.1k(E[1]),K=ZC.1k(2*w*ZC.EL(m/2)),D=ZC.AO.BM(x,X,w,y),s.D.1h(ZC.AO.BM(x,X,w-K,y),[D[0],D[1],K,y+180,y+90+(90-(180-m)/2),1],[x,X,w,y+m,Y,0]),H||s.D.1h(ZC.AO.BM(x,X,M,Y),[x,X,M,Y,y,1]);1p;1i"Yt":1j(1a S=w,P=1,G=0;w*P+G>=S;)P=ZC.4w(P-.u2,2),K=ZC.1k(w*P/ZC.EF((Y-y)/2)),G=ZC.1k(w*P*1A.Yu(ZC.TH((Y-y)/2)));D=ZC.AO.BM(x,X,K,L),s.D.1h(ZC.AO.BM(x,X,w*P,y),[D[0],D[1],G,L-(2m-(180-(Y-y)))/2,L+(2m-(180-(Y-y)))/2,0]),H||s.D.1h(ZC.AO.BM(x,X,M,Y),[x,X,M,Y,y,1]);1p;2q:s.D.1h(ZC.AO.BM(x,X,w,y),[x,X,w,y,Y,0]),0===M?y%2m==Y%2m||b||s.D.1h([x,X]):s.D.1h(ZC.AO.BM(x,X,w,Y),ZC.AO.BM(x,X,M,Y),[x,X,M,Y,y,1])}s.D.1h([s.D[0][0],s.D[0][1]])}}s.9g(2)}1t(){1a e=1g;if("2a"!==e.DN&&("5G"===e.DN||"3A"===e.DN||"6w"===e.DN||0!==e.D.1f)){1a t,i,a={x:"iX",y:"iY",1s:"I",1M:"F",2e:"AI"};if(e.o["2c-3Y"]&&!e.YM&&!e.WQ&&!e.fL){1a n=1m DS(e.A);1j(t in n.1S(e),n.fL=!0,n.ME=!1,n.Z=e.Z,n.1C({x:e.iX-e.A.iX,y:e.iY-e.A.iY}),n.1C(e.o["2c-3Y"]),n.K=e.K+"-2c",n.1q(),i=!1,a)1c===ZC.1d(n.o[t])||-1===(""+n.o[t]).1L("+")&&-1===(""+n.o[t]).1L("-")||(n.o[t]=n[a[t]]=e[a[t]]+ZC.1k(n.o[t]),i=!0);i&&n.1q(),n.1t()}1a l=e.H.AB;1R(e.ME&&e.C6&&e.j7(),l){1i"3c":e.WS();1p;1i"2F":e.U0();1p;1i"3L":e.U2()}if(e.o["1v-3Y"]&&!e.YM&&!e.WQ&&!e.fL){1a r=1m DS(e.A);1j(t in r.1S(e),r.WQ=!0,r.ME=!1,r.Z=e.Z,r.1C({x:e.iX-e.A.iX,y:e.iY-e.A.iY}),r.1C(e.o["1v-3Y"]),r.K=e.K+"-1v",r.1q(),i=!1,a)1c===ZC.1d(r.o[t])||-1===(""+r.o[t]).1L("+")&&-1===(""+r.o[t]).1L("-")||(r.o[t]=r[a[t]]=e[a[t]]+ZC.1k(r.o[t]),i=!0);i&&r.1q(),r.1t()}}}j7(){1a e,t=1g,i=1m DS(t.A);i.K=t.K+"-sh",i.1S(t),i.OE=t.OE,i.Z=t.C6,i.ME=!1,i.YM=!0,i.A0=i.AC=i.S7,i.GQ=i.HP="",i.D7="",i.GD="2V",i.BU=i.S7,i.AZ=0,i.C5=i.TA*t.C5,i.K=t.K+"-sh";1a a=(t.JX-t.PM)*ZC.EF(t.OQ)+t.PM,n=(t.JX-t.PM)*ZC.EL(t.OQ)+t.PM;if(i.iX=t.iX+5w(a,10),i.iY=t.iY+5w(n,10),i.AI=t.AI+t.PM,t.D.1f>0){e=[];1j(1a l=0,r=t.D.1f;l<r;l++)if(1c!==t.D[l]){1j(1a o=[],s=0;s<t.D[l].1f;s++)o[s]=t.D[l][s];o[0]=t.D[l][0]+5w(a,10),o[1]=t.D[l][1]+5w(n,10),e.1h(o)}1u e.1h(1c)}i.CZ=[t.CZ[0]+a,t.CZ[1]+n,t.CZ[2]+a,t.CZ[3]+n],i.D=e,i.1t()}WA(){1a e=1g;1l{lc:"-1"===e.B8?"9U(3W,3W,3W,0)":1===e.C5?e.B8:ZC.AN.es(ZC.AN.G7(e.B8),e.C5),bc:"-1"===e.BU?"9U(3W,3W,3W,0)":1===e.O0?e.BU:ZC.AN.es(ZC.AN.G7(e.BU),e.O0),rS:"-1"===e.A0?"9U(3W,3W,3W,0)":1===e.C5?e.A0:ZC.AN.es(ZC.AN.G7(e.A0),e.C5),rP:"-1"===e.AC?"9U(3W,3W,3W,0)":1===e.C5?e.AC:ZC.AN.es(ZC.AN.G7(e.AC),e.C5)}}SF(e){1a t,i,a,n=1g;1R(n.DN){1i"3A":1i"6w":1i"3P":t=n.iX,i=n.iY,a=n.AI;1p;2q:t=n.CZ[0]+(n.CZ[2]-n.CZ[0])/2,i=n.CZ[1]+(n.CZ[3]-n.CZ[1])/2,a=ZC.2l(ZC.EF(n.NI)*(n.CZ[2]-n.CZ[0])/2+ZC.EL(n.NI)*(n.CZ[3]-n.CZ[1])/2)}ZC.PI(t)||(t=0),ZC.PI(i)||(i=0),ZC.PI(a)||(a=0);1a l=n.WR,r=n.WB;if(ZC.2l(l)<=1&&(l=l*(n.CZ[2]-n.CZ[0])/2),ZC.2l(r)<=1&&(r=r*(n.CZ[3]-n.CZ[1])/2),t+=l,i+=r,"8H"===e)1l{cx:t,cy:i,r:ZC.2l(a)};if("9r"===e){1a o=a*ZC.EF(n.NI),s=a*ZC.EL(n.NI),C=t-o,A=i-s,Z=t+o,c=i+s;1l ZC.1k(A)===ZC.1k(c)&&ZC.2l(Z-C)<5&&(c+=1),ZC.1k(C)===ZC.1k(Z)&&ZC.2l(c-A)<5&&(Z+=1),{x1:C,y1:A,x2:Z,y2:c}}}PZ(){1a e,t,i,a,n,l,r,o=1g;1R(ZC.4f.1T[o.D7]?e=ZC.4f.1T[o.D7]:((e=1m cz).5a=o.D7,ZC.4f.1T[o.D7]=e),1!==o.KU&&(e.t3?(e.1s=e.t3,e.1M=e.xQ):(e.t3=e.1s,e.xQ=e.1M)),t=e.1s*o.KU,i=e.1M*o.KU,o.XF){1i"x":t=o.I;1p;1i"y":i=o.F;1p;1i"xy":1i"Yx":t=o.I,i=o.F}1a s=o.TK.2p(" "),C=s[0]||"",A=0,Z=0;1R(C){1i"":1i"1K":a=0,A=0;1p;1i"3G":a=(o.I-t)/2,A=.5;1p;1i"2z":a=o.I-t,A=1;1p;2q:-1!==C.1L("%")?(A=ZC.1k(C.1F(/[^0-9\\-]/g,""))/100,a=(o.I-t)*A):(A=ZC.1k(C.1F(/[^0-9\\-]/g,""))/o.I,a=ZC.1k(C.1F(/[^0-9\\-]/g,"")))}l=a/o.I,1w o.KZ!==ZC.1b[31]?a+=o.iX+o.BJ:a+=o.CZ[0]+o.BJ;1a c=s[1]||"";1R(c){1i"":1i"1v":n=0,Z=0;1p;1i"6r":n=(o.F-i)/2,Z=.5;1p;1i"2c":n=o.F-i,Z=1;1p;2q:-1!==c.1L("%")?(Z=ZC.1k(c.1F(/[^0-9\\-]/g,""))/100,n=(o.F-i)*Z):(Z=ZC.1k(c.1F(/[^0-9\\-]/g,""))/o.F,n=ZC.1k(c.1F(/[^0-9\\-]/g,"")))}if(r=n/o.F,1w o.KZ!==ZC.1b[31]?n+=o.iY+o.BC:n+=o.CZ[1]+o.BC,"3P"===o.DN){1a p=o.AA+o.B2+(o.BH-o.B2)*A,u=ZC.AO.BM(o.iX,o.iY,o.CK+(o.AI-o.CK)*Z,p);a=u[0]-e.1s/2,n=u[1]-e.1M/2}1l o.E[ZC.1b[69]]=t,o.E[ZC.1b[70]]=i,{4i:e,x:ZC.1k(a)+.5,y:ZC.1k(n)+.5,cx:ZC.1Y(l),cy:ZC.1Y(r),xd:A,xT:Z}}V8(e){1j(1a t=1g,i=t.GQ.2p(/\\s+|;/),a=t.HP.2p(/\\s+|;/),n=0,l=i.1f;n<l;n++){1a r=ZC.AN.G7(i[n],t);"4d"!=1w r&&(r=[r,t.C5]);1a o=ZC.AN.es(r[0],r[1]),s=ZC.1Y(a[n]||"1");ZC.DQ(s,0,1)||(s=1),e.hF(s,o)}}WS(){1a e,t,i,a,n,l,r,o,s=1g,C=s.Z.9k("2d");C.hw(),"4B"===s.DN||"1y"===s.DN?(t=s.CZ[0]+(s.CZ[2]-s.CZ[0])/2,i=s.CZ[1]+(s.CZ[3]-s.CZ[1])/2):(t=s.iX,i=s.iY);1a A=s.WA(),Z=A.lc,c=A.bc,p=A.rS,u=A.rP;if(p!==u||""!==s.GQ&&""!==s.HP){1a h=s.SF(s.NO);"8H"===s.NO?a=C.v4(h.cx,h.cy,1,h.cx,h.cy,h.r):"9r"===s.NO&&(a=C.v9(h.x1,h.y1,h.x2,h.y2)),""!==s.GQ&&""!==s.HP?s.V8(a):(a.hF(0,p),a.hF(1,u)),C.cu=a}1u""!==s.D7&&-1!==ZC.AT(["6G","hI",!0],s.MC)&&"-1"===s.A0&&"-1"===s.AC&&(p="9U(3W,3W,3W,0)"),C.cu=p;1R(s.DN){1i"5G":if((e=s.o.3R)&&(ZC.4f.1T[e]?n=ZC.4f.1T[e]:((n=1m cz).5a=e,ZC.4f.1T[e]=n),n.1s=s.o[ZC.1b[19]]?s.o[ZC.1b[19]]:n.1s,n.1M=s.o[ZC.1b[20]]?s.o[ZC.1b[20]]:n.1M,C.cv(n,s.iX-n.1s/2+s.BJ,s.iY-n.1M/2+s.BC,n.1s,n.1M),0===p.1L("#")&&7===p.1f)){1j(1a 1b=5w(p.2x(1,3),16),d=5w(p.2x(3,5),16),f=5w(p.2x(5,7),16),g=C.WL(s.iX-n.1s/2+s.BJ,s.iY-n.1M/2+s.BC,n.1s,n.1M),B=0;B<g.1T.1f;B+=4)g.1T[B]=1b|g.1T[B],g.1T[B+1]=d|g.1T[B+1],g.1T[B+2]=f|g.1T[B+2];C.WO(g,s.iX-n.1s/2+s.BJ,s.iY-n.1M/2+s.BC)}1p;1i"8u":1i"9x":1i"1y":1i"bM":1i"6w":C.m4=Z,C.cV=s.AZ;1p;2q:C.m4=c,C.cV=s.AQ}0!==s.AA&&(C.77(t,i),89(s.AA)||C.gm(ZC.TH(s.AA)),C.77(-t,-i));1a v=-1===ZC.AT(["9x","8u","6w","1y","bM"],s.DN);1R(89(s.BJ)||89(s.BC)||0===s.BJ&&0===s.BC||!v&&"6w"!==s.DN||C.77(s.BJ,s.BC),C.m3(),s.DN){1i"3A":1i"6w":C.lo&&"3A"===s.DN&&(s.KN(s.AQ),C.lo(0===s.EV||0===s.G9?[]:[s.EV,s.G9])),C.6w(s.iX,s.iY,s.AI,ZC.TH(s.B2),ZC.TH(s.BH),!1);1p;1i"1y":1p;2q:-1!==ZC.AT(["9j","8u"],s.DN)&&(s.OU=!0),ZC.CN.ki(C,s,s.D),-1!==ZC.AT(["9j","8u"],s.DN)&&(s.OU=!1)}if(C.rT=s.hu,v)if(""!==s.D7&&-1===ZC.AT(ZC.gj,s.D7)){1a E;C.3j(),C.hw(),C.3u(),E=C.ew,C.ew=s.C5;1a b=s.PZ();1R(n=b.4i,s.MC){1i"6G":1i!0:1i"hI":l=s.CZ[0]-(n.1s-(s.CZ[2]-s.CZ[0]))/2,r=s.CZ[1]-(n.1M-(s.CZ[3]-s.CZ[1]))/2,C.77(l,r),o=C.w2(n,"6G"),C.cu=o,C.3j(),C.77(-l,-r);1p;1i"no-6G":1i!1:1i"dB":C.cv(n,b.x-s.BJ,b.y-s.BC,s.E[ZC.1b[69]],s.E[ZC.1b[70]])}C.ew=E,C.gD()}1u C.3j();1R(C.mo(),C.m3(),s.DN){1i"3A":1i"6w":C.6w(s.iX,s.iY,s.AI,ZC.TH(s.B2),ZC.TH(s.BH),!1),("3A"===s.DN&&s.AQ>0||"6w"===s.DN&&s.AZ>0)&&C.4a(),C.mo();1p;1i"8u":1i"9x":1i"1y":1i"bM":s.AZ>0&&(ZC.CN.2I(C,s),s.o.4Z?(s.CX=!1,s.QT=!0,ZC.CN.1t(C,s,ZC.CN.jR(s.D,!1,s.o.bi||"h"))):ZC.CN.1t(C,s,s.D));1p;2q:if(s.AQ>0){1a m=s.B8,K=s.AZ;s.B8=s.BU,s.AZ=s.AQ,s.KN(),ZC.CN.2I(C,s),ZC.CN.1t(C,s,s.D,!0),s.B8=m,s.AZ=K,s.KN()}C.mo()}C.gD()}XY(e){1a t=1g,i=e.6x,a=i.4i,n=!0;1R(t.MC){2q:n=!0;1p;1i"no-6G":1i"dB":1i!1:n=!1}1a l=t.D7;0===a.5a.1L("1T:")&&(l=a.5a),a.1s*=t.KU,a.1M*=t.KU;1a r=""===t.K?"8F-"+ZC.c6++:t.K+"-8F";ZC.P.ET(r);1a o=ZC.P.F6("4i",ZC.1b[36]);o.a8?o.a8(ZC.1b[37],"7B",l):o.4m("5a",l),ZC.P.G5(o,{id:r+"-4i",xK:"2a",1s:t.E[ZC.1b[69]],1M:t.E[ZC.1b[70]]});1a s=a.1s,C=a.1M;if(!n){1a A,Z;s=C=1,t.I>0&&t.F>0?(A=t.I,Z=t.F):(A=t.CZ[2]-t.CZ[0],Z=t.CZ[3]-t.CZ[1]);1a c=ZC.1k(A*i.cx),p=ZC.1k(Z*i.cy);if("3P"===t.DN){s=t.H?t.H.I:t.A.I,C=t.H?t.H.F:t.A.F;1a u=t.AA+t.B2+(t.BH-t.B2)*i.xd,h=ZC.AO.BM(t.iX,t.iY,t.CK+(t.AI-t.CK)*i.xT,u);c=h[0]-a.1s/2,p=h[1]-a.1M/2}t.E["8F-4i-id"]=r+"-4i",t.E["8F-tx"]=c,t.E["8F-ty"]=p,ZC.P.G5(o,{5J:"77("+c+","+p+")"})}1a 1b=ZC.P.F6("8F",ZC.1b[36]);ZC.P.G5(1b,{x:n?e.x:0,y:n?e.y:0,1s:s,1M:C,id:r,YA:n||"3P"===t.DN?"xb":"13l"}),t.H.KH.7d[0].3b(1b),1b.3b(o),t.E.5g="3R(#"+r+")"}TO(e){1c!==e&&1w e!==ZC.1b[31]||(e=!1);1a t,i,a=1g;if(a.A0!==a.AC||""!==a.GQ&&""!==a.HP){1a n=""===a.K?"5c-"+ZC.c6++:a.K+"-5c";(a.UD||e&&!ZC.AK(n))&&(e=!1),ZC.A4.6I.ax&&9===ZC.1k(ZC.A4.6I.ad)&&(e=!1),ZC.AK(n)&&!e&&ZC.P.ET(n);1a l=a.SF(a.NO);if("8H"===a.NO?(t=e?ZC.AK(n):ZC.P.F6("13O",ZC.1b[36]),ZC.P.G5(t,{cx:ZC.1k(l.cx),cy:ZC.1k(l.cy),r:ZC.1k(l.r),fx:ZC.1k(l.cx),fy:ZC.1k(l.cy)})):"9r"===a.NO&&(t=e?ZC.AK(n):ZC.P.F6("13P",ZC.1b[36]),ZC.P.G5(t,{x1:ZC.1k(l.x1),x2:ZC.1k(l.x2),y1:ZC.1k(l.y1),y2:ZC.1k(l.y2)})),!e){if(ZC.P.G5(t,{id:n,13R:"xb"}),a.H.KH.7d[0].3b(t),""!==a.GQ&&""!==a.HP)1j(1a r=a.GQ.2p(/\\s+|;/),o=a.HP.2p(/\\s+|;/),s=0,C=r.1f;s<C;s++){1a A=ZC.AN.G7(r[s],a);"4d"!=1w A&&(A=[A,a.C5]),r[s]=A[0];1a Z=o[s]||1;ZC.DQ(Z,0,1)||(Z=1);1a c=A[1];i=r[s],"-1"===r[s]&&(c=0,i="9E(3W,3W,3W)");1a p=ZC.P.F6("8M",ZC.1b[36]);ZC.P.G5(p,{2b:Z,"8M-1r":i,"8M-3n":c}),t.3b(p)}1u{1a u=1,h=a.A0;"-1"===a.A0&&(u=0,h="9E(3W,3W,3W)");1a 1b=ZC.P.F6("8M",ZC.1b[36]);ZC.P.G5(1b,{2b:0,"8M-1r":h,"8M-3n":u});1a d=1,f=a.AC;"-1"===a.AC&&(d=0,f="9E(3W,3W,3W)");1a g=ZC.P.F6("8M",ZC.1b[36]);ZC.P.G5(g,{2b:1,"8M-1r":f,"8M-3n":d}),t.3b(1b),t.3b(g)}a.E.3j="3R(#"+n+")"}}1u"-1"!==a.A0&&(a.E.3j=a.A0)}ZE(){1a e=1g;if("4d"==1w e.E.5g&&1w e.H!==ZC.1b[31]&&e.H){1a t=e.kx()[1].2p(",");if("3A"===e.DN)e.H.KH.3b(ZC.P.Y0({id:e.K+"jl-3u",cx:t[0],cy:t[1],r:t[2]})),e.E["3u-2R"]=e.K+"jl-3u";1u if(t.1f>6){1j(1a i="",a=0,n=t.1f;a<n;a+=2)i+=ZC.1k(t[a])+ZC.1k(e.BJ)+","+(ZC.1k(t[a+1])+ZC.1k(e.BC))+" ";e.H.KH.3b(ZC.P.Y0({id:e.K+"jl-3u",2R:i})),e.E["3u-2R"]=e.K+"jl-3u"}}}U0(){1a e,t,i,a,n,l,r=1g,o=r.Z;if("4B"===r.DN||"1y"===r.DN?(t=r.CZ[0]+(r.CZ[2]-r.CZ[0])/2,i=r.CZ[1]+(r.CZ[3]-r.CZ[1])/2):(t=r.iX,i=r.iY),r.E.cx=t,r.E.cy=i,r.E.3j=-1,""!==r.D7){1a s=r.PZ();r.XY({6x:s,x:t-s.4i.1s/2,y:i-s.4i.1M/2})}1R(r.W5&&r.ZE(),r.TO(),r.DN){1i"5G":if(e=r.o.3R){1a C,A;ZC.4f.1T[e]?a=ZC.4f.1T[e]:((a=1m cz).5a=e,ZC.4f.1T[e]=a),(C=e.1L(".2F")>0&&e.1L("#")>=0)?(A=ZC.P.F6("2F",ZC.1b[36]),ZC.P.G5(A,{13V:"0 0 8 8",3j:r.E.3j}),l=ZC.P.F6("13W",ZC.1b[36])):l=ZC.P.F6("4i",ZC.1b[36]),l.a8?l.a8(ZC.1b[37],"7B",e):l.4m("5a",e);1a Z=r.o[ZC.1b[19]]?r.o[ZC.1b[19]]:a.1s,c=r.o[ZC.1b[20]]?r.o[ZC.1b[20]]:a.1M;a.1s=Z,a.1M=c,C?ZC.P.G5(A,{id:r.K+"-4i",x:r.iX-a.1s/2+r.BJ,y:r.iY-a.1M/2+r.BC,1s:a.1s,1M:a.1M}):ZC.P.G5(l,{id:r.K+"-4i",x:r.iX-a.1s/2+r.BJ,y:r.iY-a.1M/2+r.BC,1s:a.1s,1M:a.1M}),C?(A.3b(l),o.3b(A)):o.3b(l)}1p;1i"3A":if(!ZC.AK(r.K+"-3A")&&(n=ZC.P.F6("3A",ZC.1b[36]),-1!==r.E.3j?ZC.P.G5(n,{3j:r.E.3j,"3j-3n":r.C5}):ZC.P.G5(n,{3j:"2a"}),r.DI&&""!==r.DI&&ZC.P.G5(n,{"1O":r.DI}),ZC.P.G5(n,{id:r.K+"-3A",cx:r.iX+r.BJ,cy:r.iY+r.BC,r:r.AI}),r.AQ>0&&(ZC.P.G5(n,{4a:r.BU,"4a-1s":r.AQ,"4a-3n":r.O0}),r.KN(r.AQ),"2V"===r.GD||0===r.EV&&0===r.G9||ZC.P.G5(n,{"4a-tJ":"fI"===r.GD?[r.EV,r.G9,r.AZ,r.G9].2M(" "):[r.EV,r.G9].2M(",")})),r.H&&r.H.G1?(r.H.G1[o.id]||(r.H.G1[o.id]=2g.oo()),r.H.G1[o.id].3b(n)):o.3b(n),1w r.E.5g!==ZC.1b[31]))if("3e"==1w r.E.5g)n=ZC.P.F6("3A",ZC.1b[36]),ZC.P.G5(n,{id:r.K+"-5g",3j:r.E.5g,"3j-3n":r.C5,cx:r.iX+r.BJ,cy:r.iY+r.BC,r:r.AI,"4a-1s":0}),r.H&&r.H.G1?r.H.G1[o.id].3b(n):o.3b(n);1u{1a p=r.E.5g;(l=ZC.P.F6("4i",ZC.1b[36])).a8&&l.a8(ZC.1b[37],"7B",r.D7),r.E["3u-2R"]&&ZC.P.G5(l,{"3u-2R":"3R(#"+r.E["3u-2R"]+(ZC.A4.6I.7m?"-2S":"")+")"}),ZC.P.G5(l,{id:r.K+"-5g",x:p[1],y:p[2],1s:p[0].1s,1M:p[0].1M}),o.3b(l)}1p;1i"8u":1i"9x":1i"1y":1i"bM":1i"6w":r.AZ>0&&(ZC.CN.2I(o,r),r.o.4Z?(r.CX=!1,r.QT=!0,ZC.CN.1t(o,r,ZC.CN.jR(r.D,!1,r.o.bi||"h"))):ZC.CN.1t(o,r,r.D));1p;2q:1a u=r.B8,h=r.AZ;r.B8=r.BU,r.AZ=r.AQ,r.KN(),ZC.CN.2I(o,r),ZC.CN.1t(o,r,r.D,!0,0),r.B8=u,r.AZ=h,r.KN()}}TP(e,t){1c!==t&&1w t!==ZC.1b[31]||(t=!1);1a i,a=1g;if(a.A0!==a.AC||""!==a.GQ&&""!==a.HP){1a n=""===a.K?"5c-"+ZC.c6++:a.K+"-5c";if(t&&!ZC.AK(n)&&(t=!1),ZC.AK(n)&&!t&&ZC.A4(n).3q(),i=t?ZC.AK(n):ZC.P.F6("7n:3j"),t&&(e=ZC.A4("#"+n).3T("tw")),""!==a.GQ&&""!==a.HP){1j(1a l=a.GQ.2p(/\\s+|;/),r=a.HP.2p(/\\s+|;/),o="",s="",C="",A=0,Z=l.1f;A<Z;A++){l[A]=ZC.AN.G7(l[A]);1a c="-1"===l[A]?"9E(3W,3W,3W)":l[A],p=r[A]||1;ZC.DQ(p,0,1)||(p=1);1a u=ZC.1k(100*p);0===A?o=c:A===Z-1?s=c:C+=u+"% "+ZC.AN.G7(c)+","}""!==C&&(C=C.2x(0,C.1f-1)),"8H"===a.NO?ZC.P.G5(i,{id:n,1J:"xs",tw:e,1r:o,ja:s,gK:C}):"9r"===a.NO&&ZC.P.G5(i,{id:n,1J:"5c",9M:"xu",2f:3U-a.NI-a.AA,1r:o,ja:s,gK:C})}1u{1a h=a.A0;"-1"===a.A0&&(h="9E(3W,3W,3W)");1a 1b=a.AC;"-1"===a.AC&&(1b="9E(3W,3W,3W)"),"8H"===a.NO?ZC.P.G5(i,{id:n,1J:"xs",tw:e,1r:1b,ja:h}):"9r"===a.NO&&ZC.P.G5(i,{id:n,1J:"5c",9M:"xu",2f:3U-a.NI-a.AA,1r:h,ja:1b})}1a d=1w a.E.dO!==ZC.1b[31]?a.E.dO:a.C5;ZC.P.G5(i,{3n:a.C5,"o:dO":d}),a.E.3j=i}1u i=ZC.P.F6("7n:3j"),"-1"!==a.A0&&(ZC.P.G5(i,{1J:"2V",1r:a.A0,3n:a.C5}),a.E.3j=i)}U2(){1a e,t,i,a,n,l,r=1g,o=r.Z;"4B"===r.DN||"1y"===r.DN?(t=r.CZ[0]+(r.CZ[2]-r.CZ[0])/2,i=r.CZ[1]+(r.CZ[3]-r.CZ[1])/2):(t=r.iX,i=r.iY),r.E.cx=t,r.E.cy=i,r.E.3j=-1;1a s=-1===ZC.AT(["9x","8u","6w","1y","bM"],r.DN),C=ZC.P.F6("7n:3j");if(""!==r.D7){1a A=r.PZ();1R(a=A.4i,r.MC){2q:C.1J="w4",C.5a=r.D7,ZC.P.G5(C,{2K:A.cx+","+A.cy,3n:r.C5,"o:dO":r.C5}),r.E.5g=[C];1p;1i"no-6G":1i"dB":1i!1:r.E.5g=[a,A.x,A.y]}}r.TP("0,0");1a Z=ZC.P.F6("7n:4a");1R(r.DN){1i"5G":(e=r.o.3R)&&(ZC.4f.1T[e]?a=ZC.4f.1T[e]:((a=1m cz).5a=e,ZC.4f.1T[e]=a),(l=ZC.P.F6("5X")).id=r.K+"-5X",l.5a=e,l.1I.2K="4D",1!==r.KU&&(l.1s*=r.KU,l.1M*=r.KU,l.1I.1s=l.1s+"px",l.1I.1M=l.1M+"px"),l.1I.1K=r.iX-a.1s/2+r.BJ+"px",l.1I.1v=r.iY-a.1M/2+r.BC+"px",o.3b(l));1p;1i"8u":1i"9x":1i"1y":1i"bM":1i"6w":Z.7i=r.AZ+"px",Z.1r=r.B8;1p;2q:Z.7i=r.AQ+"px",Z.1r=r.BU}1R(Z.3n=r.O0,r.GD){1i"2V":Z.cU="2V";1p;1i"fJ":Z.cU="ri";1p;1i"g8":Z.cU="r7"}1R(-1===ZC.AT(["8u","9x","1y","bM"],r.DN)&&(r.E.4a=Z),r.DN){1i"3A":1i"6w":if(!ZC.AK(r.K+"-3A")&&((n=ZC.P.F6("3A"===r.DN?"7n:xv":"7n:6w")).id=r.K+"-3A",n.1I.2K="4D",-1!==r.E.3j&&s?n.3b(r.E.3j):n.ab=!1,r.AQ>0||r.AZ>0?n.3b(Z):n.gX=!1,n.1I.1K=r.iX+r.BJ-r.AI+"px",n.1I.1v=r.iY+r.BC-r.AI+"px",n.1I.1s=2*r.AI+"px",n.1I.1M=2*r.AI+"px","6w"===r.DN&&ZC.P.G5(n,{xa:r.BH+90,wp:r.B2+90}),o.3b(n),s&&1w r.E.5g!==ZC.1b[31])){1a c=r.E.5g;1===c.1f?((n=ZC.P.F6("7n:xv")).id=r.K+"-5g",n.1I.2K="4D",o.3b(n),n.3b(c[0]),n.1I.1K=r.iX+r.BJ-r.AI+"px",n.1I.1v=r.iY+r.BC-r.AI+"px",n.1I.1s=2*r.AI+"px",n.1I.1M=2*r.AI+"px",n.gX=!1,"6w"===r.DN&&ZC.P.G5(n,{xa:r.BH+90,wp:r.B2+90})):3===c.1f&&((l=ZC.P.F6("5X")).id=r.K+"-5X",l.5a=r.D7,l.1I.2K="4D",l.1I.1K=c[1]+"px",l.1I.1v=c[2]+"px",1!==r.KU&&(l.1s*=r.KU,l.1M*=r.KU,l.1I.1s=l.1s+"px",l.1I.1M=l.1M+"px"),o.3b(l))}1p;1i"8u":1i"9x":1i"1y":1i"bM":r.AZ>0&&(ZC.CN.2I(o,r),r.o.4Z?(r.CX=!1,r.QT=!0,ZC.CN.1t(o,r,ZC.CN.jR(r.D,!1,r.o.bi||"h"))):ZC.CN.1t(o,r,r.D));1p;2q:1a p=r.B8,u=r.AZ;r.B8=r.BU,r.AZ=r.AQ,r.KN(),ZC.CN.2I(o,r),ZC.CN.1t(o,r,r.D,!0,0),r.B8=p,r.AZ=u,r.KN()}}}1O I4 2k DS{2G(e){1E(e),1g.7z(e)}7z(e){1E.7z(e);1a t=1g;t.DN="3C",t.I=0,t.F=0,t.sn="",t.E2=-1,t.E1=-1,t.DM=-1,t.DY=-1,t.F5=0,t.FU=0,t.F2=0,t.FD=0,t.rE=!1,t.KZ=!1,t.ER="2c",t.EU=0,t.MD=0,t.H6=8,t.G4=8,t.Y7=[1,1],t.DH=1c,t.OS=1c,t.QB=!1,t.OU=!0,t.QD="",t.OO="",t.NX="",t.PD="",t.X3="tl",t.FC=!1}8c(){1a e=1E.8c();1l 1g.e2(e,"1s,1M,13Z,13L,13K,13o,6F,13p,ug,13t,13u,13v,17Y,13m,2K,vd,k5,tD,k6,13B","I,F,F5,FU,F2,FD,KZ,ER,DH,H6,G4,EU,MD,sn,QD,OO,NX,PD,FC"),e}5N(){}jy(e,t,i){1a a=1g;if(t=t||"w",ZC.1Y(e)+""!=e+"")1l-1!==(e+="").1L("%")?a.jy(ZC.1Y(e.1F("%",""))/100,t,!0):-1!==e.1L("px")?a.jy(ZC.1Y(e.1F("px","")),t):a.jy(ZC.1Y(e),t);1a n=1w a.E["p-1s"]!==ZC.1b[31]?a.E["p-1s"]:a.A.I,l=1w a.E["p-1M"]!==ZC.1b[31]?a.E["p-1M"]:a.A.F;1l(e=ZC.2l(e))>1&&!i?ZC.1k(e):e<=1||i?"w"===t?ZC.1k(n*e):ZC.1k(l*e):8m 0}6c(e,t,i,a,n){1a l,r,o=1g;if(i=i||0,a=a||0,t=t||"4q",n=n||"n","4q"===t){1a s=5P(e).2p(/\\s+|;|,/);1l 1===s.1f?[o.6c(s[0],"tb",i,a,n),o.6c(s[0],"lr",i,a,n),o.6c(s[0],"tb",i,a,n),o.6c(s[0],"lr",i,a,n)]:2===s.1f?[o.6c(s[0],"tb",i,a,n),o.6c(s[1],"lr",i,a,n),o.6c(s[0],"tb",i,a,n),o.6c(s[1],"lr",i,a,n)]:3===s.1f?[o.6c(s[0],"tb",i,a,n),o.6c(s[1],"lr",i,a,n),o.6c(s[2],"tb",i,a,n),o.6c(s[1],"lr",i,a,n)]:[o.6c(s[0],"tb",i,a,n),o.6c(s[1],"lr",i,a,n),o.6c(s[2],"tb",i,a,n),o.6c(s[3],"lr",i,a,n)]}1l e+""=="3i"?-2:e+""=="4N"&&"y"===n?"4N":ZC.1Y(e)+""!=e+""?-1!==(e+="").1L("%")?o.6c(ZC.1Y(e.1F("%",""))/100,t):-1!==e.1L("px")?o.6c(ZC.1Y(e.1F("px","")),t):o.6c(ZC.1Y(e),t):((o.A||1w o.E["p-1s"]!==ZC.1b[31])&&(l=1w o.E["p-1s"]!==ZC.1b[31]?o.E["p-1s"]:o.A.I),(o.A||1w o.E["p-1M"]!==ZC.1b[31])&&(r=1w o.E["p-1M"]!==ZC.1b[31]?o.E["p-1M"]:o.A.F),(e=ZC.2l(e))>=1?ZC.1k(e):e<1?"lr"===t?ZC.1k((o.A?l:i)*e):ZC.1k((o.A?r:a)*e):8m 0)}1S(e){1E.1S(e);1j(1a t="I,F,E2,DM,DY,E1,F5,FU,F2,FD,KZ,ER,DH,Y7,H6,G4,EU,MD,sn,QD,OO,NX,PD,FC".2p(","),i=0,a=t.1f;i<a;i++)1w e[t[i]]!==ZC.1b[31]&&(1g[t[i]]=e[t[i]])}9g(e){1a t,i,a,n,l,r=1g;if(2!==(e=e||1))if(r.UD)r.4A([["x","iX"],["y","iY"],[ZC.1b[19],"I"],[ZC.1b[20],"F"]]);1u{1a o=1w r.E["p-x"]!==ZC.1b[31]?r.E["p-x"]:r.A.iX,s=1w r.E["p-y"]!==ZC.1b[31]?r.E["p-y"]:r.A.iY,C=1w r.E["p-1s"]!==ZC.1b[31]?r.E["p-1s"]:r.A.I,A=1w r.E["p-1M"]!==ZC.1b[31]?r.E["p-1M"]:r.A.F;if(!r.QB){1a Z=0,c=0,p=0,u=0;if(1c!==ZC.1d(r.o.2w)){1a h=""+r.o.2w;if(-1!==h.1L("4N")){1a 1b=r.6c(h,"4q",0,0,"y");"4N"===1b[0]&&(r.E["d-2w-1v"]=r.E["d-2w"]=!0),"4N"===1b[1]&&(r.E["d-2w-2z"]=r.E["d-2w"]=!0),"4N"===1b[2]&&(r.E["d-2w-2c"]=r.E["d-2w"]=!0),"4N"===1b[3]&&(r.E["d-2w-1K"]=r.E["d-2w"]=!0),r.o.2w=h.1F(/4N/g,"20")}}"4N"===r.o.2w&&(r.E["d-2w"]=r.E["d-2w-1v"]=r.E["d-2w-2z"]=r.E["d-2w-2c"]=r.E["d-2w-1K"]=!0,r.o.2w=1c),1w r.E["e9-fm"]===ZC.1b[31]||1c!==ZC.1d(r.o["94-3w"])&&ZC.2t(r.o["94-3w"])||(1c!==ZC.1d(r.o[ZC.1b[57]])&&1c===ZC.1d(r.o[ZC.1b[59]])&&(r.o[ZC.1b[59]]="3i"),1c!==ZC.1d(r.o[ZC.1b[59]])&&1c===ZC.1d(r.o[ZC.1b[57]])&&(r.o[ZC.1b[57]]="3i"),1c!==ZC.1d(r.o[ZC.1b[60]])&&1c===ZC.1d(r.o[ZC.1b[58]])&&(r.o[ZC.1b[58]]="3i"),1c!==ZC.1d(r.o[ZC.1b[58]])&&1c===ZC.1d(r.o[ZC.1b[60]])&&(r.o[ZC.1b[60]]="3i"));1j(1a d=[ZC.1b[57],ZC.1b[58],ZC.1b[59],ZC.1b[60]],f=0,g=d.1f;f<g;f++)"4N"===r.o[d[f]]&&(r.E["d-"+d[f]]=r.E["d-2w"]=!0,r.o[d[f]]=1c);1c!==(t=ZC.1d(r.o.2w))&&(i=r.6c(t,"4q"),1c===ZC.1d(r.o[ZC.1b[57]])&&(Z=i[0]),1c===ZC.1d(r.o[ZC.1b[58]])&&(c=i[1]),1c===ZC.1d(r.o[ZC.1b[59]])&&(p=i[2]),1c===ZC.1d(r.o[ZC.1b[60]])&&(u=i[3])),1c!==(t=ZC.1d(r.o[ZC.1b[57]]))&&(Z=i=r.6c(t,"tb")),1c!==(t=ZC.1d(r.o[ZC.1b[58]]))&&(c=i=r.6c(t,"lr")),1c!==(t=ZC.1d(r.o[ZC.1b[59]]))&&(p=i=r.6c(t,"tb")),1c!==(t=ZC.1d(r.o[ZC.1b[60]]))&&(u=i=r.6c(t,"lr"));1a B,v=[Z,c,p,u];if(1c!==ZC.1d(r.o.x)&&(r.iX=r.cq(r.o.x,"x")),1c!==ZC.1d(r.o.y)&&(r.iY=r.cq(r.o.y,"y")),1c!==(t=ZC.1d(r.o[ZC.1b[19]]))){1a E=ZC.8B(t);B=-1!==(""+t).1L("%"),r.I=E>1&&!B?ZC.1k(E):-2===u&&-2===c?ZC.1k(C*E):-2===u&&-2!==c?ZC.1k((C-c)*E):-2!==u&&-2===c?ZC.1k((C-u)*E):ZC.1k((C-u-c)*E),-1!==r.iX?(r.DY=r.iX-o,r.E1=o+C-r.DY-r.I):-2===u&&-2===c?(r.DY=r.E1=(C-r.I)/2,r.iX=o+r.DY):-2===u&&-2!==c?(r.E1=c,r.DY=C-r.E1-r.I,r.iX=o+r.DY):(r.DY=u,r.iX=o+r.DY,r.E1=r 3F DP?c:C-r.DY-r.I)}1u-1!==r.iX?(r.DY=r.iX-o,r.E1=-2===c?0:c,r.I=C-r.DY-r.E1):-2===u&&-2===c?(r.DY=r.E1=0,r.iX=o+r.DY,r.I=C-r.DY-r.E1):-2===u&&-2!==c?(r.E1=c,r.DY=0,r.iX=o+r.DY,r.I=C-r.DY-r.E1):-2!==u&&-2===c?(r.DY=u,r.E1=r 3F DP?c:0,r.iX=o+r.DY,r.I=C-r.DY-r.E1):(r.DY=u,r.E1=c,r.iX=o+r.DY,r.I=C-r.DY-r.E1);if(1c!==(t=ZC.1d(r.o[ZC.1b[20]]))){1a b=ZC.8B(t);B=-1!==(""+t).1L("%"),r.F=b>1&&!B?ZC.1k(b):-2===Z&&-2===p?ZC.1k(A*b):-2===Z&&-2!==p?ZC.1k((A-p)*b):-2!==Z&&-2===p?ZC.1k((A-Z)*b):ZC.1k((A-Z-p)*b),-1!==r.iY?(r.E2=r.iY-s,r.DM=s+A-r.E2-r.F):-2===Z&&-2===p?(r.E2=r.DM=(A-r.F)/2,r.iY=s+r.E2):-2===Z&&-2!==p?(r.DM=p,r.E2=A-r.DM-r.F,r.iY=s+r.E2):(r.E2=Z,r.iY=s+r.E2,r.DM=r 3F DP?p:A-r.E2-r.F)}1u-1!==r.iY?(r.E2=r.iY-s,r.DM=-2===p?0:p,r.F=A-r.E2-r.DM):-2===Z&&-2===Z?(r.E2=r.E2=0,r.iY=s+r.E2,r.F=A-r.E2-r.DM):-2===Z&&-2!==p?(r.DM=p,r.E2=0,r.iY=s+r.E2,r.F=A-r.E2-r.DM):-2===Z&&-2!==p?(r.E2=Z,r.DM=r 3F DP?p:0,r.iY=s+r.E2,r.F=A-r.E2-r.DM):(r.E2=Z,r.DM=p,r.iY=s+r.E2,r.F=A-r.E2-r.DM);if(1c!==(t=ZC.1d(r.o.2K))){if(r.A&&1w r.A.iX!==ZC.1b[31]&&1w r.A.iY!==ZC.1b[31]&&1w r.A.I!==ZC.1b[31]&&1w r.A.F!==ZC.1b[31]){1R(a=0,n=0,(l=5P(t).2p(/\\s+/))[0]){1i"1K":a=0;1p;1i"2z":a=1;1p;1i"3G":a=.5;1p;2q:(a=ZC.IL(l[0]))>1&&(a/=r.A.I)}1R(l[1]){1i"1v":n=0;1p;1i"2c":n=1;1p;1i"6r":n=.5;1p;2q:(n=ZC.IL(l[1]))>1&&(n/=r.A.F)}}r.E["2K-6x"]=[a,n],r.iX=r.A.iX+ZC.1k(a*(r.A.I-r.I-v[1]-v[3]))+v[3],r.iY=r.A.iY+ZC.1k(n*(r.A.F-r.F-v[0]-v[2]))+v[0]}r.CZ=[r.iX,r.iY,r.iX+r.I,r.iY+r.F]}}}1q(){1E.1q();1a e,t=1g;if(!t.o.cw){if(t.4A([["bL","X3"],["5t-zG","FC","b"],["3G-3Q","rE","b"],["6F","KZ","b"],["6F-1J","13J"],["6F-2K","ER"],["6F-7q","DH"],["6F-fH","Y7"],["6F-1s","H6","i"],["6F-1M","G4","i"],["6F-2b","EU","i"],["6F-so","MD","i"],["1G-1v","QD"],["1G-2z","OO"],["1G-2c","NX"],["1G-1K","PD"]]),1c!==(e=ZC.1d(t.o["1G-9v"]))){1a i=5P(e).2p(/\\s+|;|,/);2===i.1f?(t.F5=t.FU=ZC.1k(i[0]),t.F2=t.FD=ZC.1k(i[1])):4===i.1f?(t.F5=ZC.1k(i[0]),t.FU=ZC.1k(i[1]),t.F2=ZC.1k(i[2]),t.FD=ZC.1k(i[3])):t.F5=t.FU=t.F2=t.FD=ZC.1k(i[0])}1c!==ZC.1d(t.o["6F-m1"])&&(t.OS=1m DS(t.A)),t.4A([["1G-9v-1v-1K","F5","i"],["1G-9v-1v-2z","FU","i"],["1G-9v-2c-2z","F2","i"],["1G-9v-2c-1K","FD","i"]])}}US(e){1a t=e.2p(/\\s/);1l t[0]=ZC.1k(t[0]),t[2]=ZC.AN.G7(t[2]),t}1t(){1a e=1g;if(1c!==e.DH&&!(e.DH 3F 3N)&&"vc"===e.A.OL){1a t=e.A.OF(e.DH);e.DH=[t[0],t[1]],e.DH[0]-=e.BJ,e.DH[1]-=e.BC}if(e.rE&&(e.iX-=e.I/2,e.iY-=e.F/2),"-1"!==e.BU&&0!==e.AQ||e.QD+e.OO+e.NX+e.PD!==""||"-1"!==e.A0||"-1"!==e.AC||""!==e.D7||""!==e.GQ||""!==e.HP){1a i=e.H.AB;e.ME&&e.C6&&e.j7();1a a,n={x:"iX",y:"iY",1s:"I",1M:"F"};if(e.o["2c-3Y"]&&!e.YM&&!e.fL&&!e.WQ){1a l=1m I4(e.A);1j(a in l.1S(e),l.fL=!0,l.ME=!1,l.Z=e.Z,l.X3=e.X3,l.1C({x:e.iX-e.A.iX,y:e.iY-e.A.iY,1s:e.I,1M:e.F}),l.1C(e.o["2c-3Y"]),l.K=e.K+"-2c",l.1q(),l.h3(),!1,n)1c===ZC.1d(l.o[a])||-1===(""+l.o[a]).1L("+")&&-1===(""+l.o[a]).1L("-")||(l[n[a]]=e[n[a]]+ZC.1k(l.o[a]),!0);l.1t()}if(e.QD+e.OO+e.NX+e.PD===""){1R(i){1i"3c":e.WS();1p;1i"2F":e.U0();1p;1i"3L":e.U2()}if(e.KZ&&e.OS){1a r,o;if(e.DH&&2===e.DH.1f?(r=e.DH[0],o=e.DH[1]):e.E.cp&&(r=e.E.cp[0],o=e.E.cp[1]),e.OS.Z=e.OS.C6=e.Z,e.OS.1S(e),e.OS.1C(e.o["6F-m1"]),e.OS.K=e.K+"-6F-m1",e.OS.o.x=r,e.OS.o.y=o,e.E.cm){1a s=e.E.cm[0],C=e.E.cm[1],A=1A.t1(ZC.1k(C)-ZC.1k(o),ZC.1k(s)-ZC.1k(r));89(A)&&(A=0),1c===ZC.1d(e.OS.o.2f)&&(e.OS.o.2f=ZC.U4(A))}e.OS.1q(),e.OS.1t()}}1u{1a Z=e.AQ,c=e.BU,p=e.GD;1R(e.AQ=0,i){1i"3c":e.WS();1p;1i"2F":e.U0();1p;1i"3L":e.U2()}e.AQ=Z;1a u=e.A0,h=e.AC;e.A0=e.AC="-1";1j(1a 1b,d=["1v","2z","2c","1K"],f=["QD","OO","NX","PD"],g=0;g<d.1f;g++)if(""!==(1b=e[f[g]])&&"2a"!==1b){1a B=e.US(1b);1R(e.AQ=B[0],e.GD=B[1],e.BU=B[2],i){1i"3c":e.WS(d[g]);1p;1i"2F":e.U0(d[g]);1p;1i"3L":e.U2(d[g])}e.AQ=Z,e.BU=c,e.GD=p}e.A0=u,e.AC=h}if(e.o["1v-3Y"]&&!e.YM&&!e.WQ&&!e.fL){1a v=1m I4(e.A);1j(a in v.1S(e),v.WQ=!0,v.ME=!1,v.Z=e.Z,v.X3=e.X3,v.1C({x:e.iX-e.A.iX,y:e.iY-e.A.iY,1s:e.I,1M:e.F}),v.1C(e.o["1v-3Y"]),v.K=e.K+"-1v",v.1q(),v.h3(),!1,n)1c===ZC.1d(v.o[a])||-1===(""+v.o[a]).1L("+")&&-1===(""+v.o[a]).1L("-")||(v[n[a]]=e[n[a]]+ZC.1k(v.o[a]),!0);v.1t()}}}h3(){1a e=1g;1R(e.X3){1i"tl":1p;1i"tr":e.iX-=e.I;1p;1i"bl":e.iY-=e.F;1p;1i"br":e.iX-=e.I,e.iY-=e.F;1p;1i"c":e.iX-=e.I/2,e.iY-=e.F/2;1p;1i"t":e.iX-=e.I/2;1p;1i"r":e.iX-=e.I,e.iY-=e.F/2;1p;1i"b":e.iX-=e.I/2,e.iY-=e.F;1p;1i"l":e.iY-=e.F/2}}j7(){1a e=1g,t=1m I4(e.A);t.K=e.K+"-sh",t.1S(e),t.Z=e.C6,t.ME=!1,t.YM=!0,t.QD=t.OO=t.NX=t.PD="",t.A0=t.AC=t.S7,t.GQ=t.HP="",t.D7="",t.GD="2V",t.BU=t.S7,t.AZ=0;1a i=e.JX*ZC.EF(e.OQ),a=e.JX*ZC.EL(e.OQ);t.I=e.I+("3L"===e.H.AB?0:.5)-ZC.EF(e.OQ)*e.PM/2,t.F=e.F+("3L"===e.H.AB?0:.5)-ZC.EL(e.OQ)*e.PM/2,t.O0=t.C5=t.TA*e.C5,t.K=e.K+"-sh",t.iX=e.iX+ZC.1k(i),t.iY=e.iY+ZC.1k(a),t.1t()}SF(e){1a t,i=1g,a=i.iX,n=i.iY,l=a+i.I/2,r=n+i.F/2,o=i.WR,s=i.WB;if(ZC.2l(o)<=1&&(o=o*i.I/2),ZC.2l(s)<=1&&(s=s*i.F/2),l+=o,r+=s,"8H"===e){1a C=ZC.1k((i.I+i.F)/2),A=ZC.CV(i.I,i.F);1l t=A<C/4?(A+C)/2:A,{cx:l,cy:r,r:ZC.2l(t)}}if("9r"===e){1a Z=(t=i.I>=i.F?ZC.2l(ZC.EL(i.NI))>.5?i.F/2:i.I/2:ZC.2l(ZC.EF(i.NI))>.5?i.I/2:i.F/2)*ZC.EF(i.NI),c=t*ZC.EL(i.NI);1l{x1:l-Z,y1:r-c,x2:l+Z,y2:r+c}}}U7(e){1a t,i=1g;1w e===ZC.1b[31]&&(e="4q");1a a,n,l=i.iX,r=i.iY;i.D=[],a=n=i.AQ/2;1a o=1;1R(i.H.AB){1i"3L":o=2,i.AQ%2==1&&(a=ZC.1k((i.AQ-1)/2),n=ZC.1k((i.AQ+1)/2))}1a s=1c,C=ZC.4w(l+a,2),A=ZC.4w(l-n,2),Z=ZC.4w(r+a,2),c=ZC.4w(r-n,2),p=i.DH&&2===i.DH.1f,u=ZC.1k(i.EU*(i.I-i.H6)/100),h=ZC.1k(i.EU*(i.F-i.G4)/100),1b=0!==i.F5||0!==i.FU||0!==i.F2||0!==i.FD,d=i.Y7[0],f=i.Y7[1];1R(i.ER){1i"1v":i.E.cm=[i.iX+i.I/2+u,i.iY];1p;1i"2c":i.E.cm=[i.iX+i.I/2+u,i.iY+i.F];1p;1i"1K":i.E.cm=[i.iX,i.iY+i.F/2+h];1p;1i"2z":i.E.cm=[i.iX+i.I,i.iY+i.F/2+h]}if(1b){1a g,B=ZC.CV(i.I/2,i.F/2);"1v"!==e&&"4q"!==e||(0!==i.F5?(g=i.I/2>=i.F5&&i.F/2>=i.F5?ZC.2l(i.F5):B,i.D.1h([C,Z+g]),i.F5>0&&i.D.1h([C,Z,C+o*g,Z]),i.D.1h([C+g,Z])):i.D.1h([C,Z]),i.KZ&&"1v"===i.ER&&(i.D.1h([C+i.I/2-d*i.H6/2-i.AQ/2+u,Z]),p?i.D.1h([i.DH[0],i.DH[1]]):(s=[C+i.I/2-i.AQ/2+u,Z-i.G4],i.D.1h(s)),i.MD>0&&(t=i.D[i.D.1f-1],i.D.1h([t[0],t[1]-i.MD*(i.G4>0?1:-1)]),i.D.1h([t[0],t[1]])),i.D.1h([C+i.I/2-i.AQ/2+f*i.H6/2+u,Z])),"1v"===e&&(0!==i.FU?(g=i.I/2>=i.FU&&i.F/2>=i.FU?ZC.2l(i.FU):B,i.D.1h([A+i.I-g,Z])):i.D.1h([A+i.I,Z]))),"2z"!==e&&"4q"!==e||(0!==i.FU?(g=i.I/2>=i.FU&&i.F/2>=i.FU?ZC.2l(i.FU):B,i.D.1h([A+i.I-g,Z]),i.FU>0?i.D.1h([A+i.I,Z,A+i.I,Z+o*g]):i.D.1h([A+i.I,Z+g])):i.D.1h([A+i.I,Z]),i.KZ&&"2z"===i.ER&&(i.D.1h([A+i.I,Z+i.F/2-d*i.G4/2-i.AQ/2+h]),p?i.D.1h([i.DH[0],i.DH[1]]):(s=[A+i.I+i.H6,Z+i.F/2-i.AQ/2+h],i.D.1h(s)),i.D.1h([A+i.I,Z+i.F/2+f*i.G4/2-i.AQ/2+h])),"2z"===e&&(0!==i.F2?(g=i.I/2>=i.F2&&i.F/2>=i.F2?ZC.2l(i.F2):B,i.D.1h([A+i.I,c+i.F-g])):i.D.1h([A+i.I,c+i.F]))),"2c"!==e&&"4q"!==e||(0!==i.F2?(g=i.I/2>=i.F2&&i.F/2>=i.F2?ZC.2l(i.F2):B,i.D.1h([A+i.I,c+i.F-g]),i.F2>0?i.D.1h([A+i.I,c+i.F,A+i.I-o*g,c+i.F]):i.D.1h([A+i.I-g,c+i.F])):i.D.1h([A+i.I,c+i.F]),i.KZ&&"2c"===i.ER&&(i.D.1h([A+i.I/2+d*i.H6/2+i.AQ/2+u,c+i.F]),p?i.D.1h([i.DH[0],i.DH[1]]):(s=[A+i.I/2+i.AQ/2+u,c+i.F+i.G4],i.D.1h(s)),i.MD>0&&(t=i.D[i.D.1f-1],i.D.1h([t[0],t[1]+i.MD*(i.G4>0?1:-1)]),i.D.1h([t[0],t[1]])),i.D.1h([A+i.I/2-f*i.H6/2+i.AQ/2+u,c+i.F])),"2c"===e&&(0!==i.FD?(g=i.I/2>=i.FD&&i.F/2>=i.FD?ZC.2l(i.FD):B,i.D.1h([C+g,c+i.F])):i.D.1h([C,c+i.F]))),"1K"!==e&&"4q"!==e||(0!==i.FD?(g=i.I/2>=i.FD&&i.F/2>=i.FD?ZC.2l(i.FD):B,i.D.1h([C+g,c+i.F]),i.FD>0?i.D.1h([C,c+i.F,C,c+i.F-o*g]):i.D.1h([C,c+i.F-g])):i.D.1h([C,c+i.F]),i.KZ&&"1K"===i.ER&&(i.D.1h([C,c+i.F/2+d*i.G4/2+i.AQ/2+h]),p?i.D.1h([i.DH[0],i.DH[1]]):(s=[C-i.H6,c+i.F/2+i.AQ/2+h],i.D.1h(s)),i.D.1h([C,c+i.F/2-f*i.G4/2+i.AQ/2+h])),0!==i.F5?(g=i.I/2>=i.F5&&i.F/2>=i.F5?ZC.2l(i.F5):B,i.D.1h([C,Z+g])):(i.D.1h([C,Z]),i.D.1h([C+.1,Z])))}1u"1v"!==e&&"4q"!==e||(i.D.1h([C,Z]),i.KZ&&"1v"===i.ER&&(i.D.1h([C+i.I/2-d*i.H6/2-i.AQ/2+u,Z]),p?i.D.1h([i.DH[0],i.DH[1]]):(s=[C+i.I/2-i.AQ/2+u,Z-i.G4],i.D.1h(s)),i.MD>0&&(t=i.D[i.D.1f-1],i.D.1h([t[0],t[1]-i.MD*(i.G4>0?1:-1)]),i.D.1h([t[0],t[1]])),i.D.1h([C+i.I/2+f*i.H6/2-i.AQ/2+u,Z])),"1v"===e&&i.D.1h([A+i.I,Z])),"2z"!==e&&"4q"!==e||(i.D.1h([A+i.I,Z]),i.KZ&&"2z"===i.ER&&(i.D.1h([A+i.I,Z+i.F/2-i.AQ/2-d*i.G4/2+h]),p?i.D.1h([i.DH[0],i.DH[1]]):(s=[A+i.I+i.H6,Z+i.F/2-i.AQ/2+h],i.D.1h(s)),i.D.1h([A+i.I,Z+i.F/2-i.AQ/2+f*i.G4/2+h])),"2z"===e&&i.D.1h([A+i.I,c+i.F])),"2c"!==e&&"4q"!==e||(i.D.1h([A+i.I,c+i.F]),i.KZ&&"2c"===i.ER&&(i.D.1h([A+i.I/2+d*i.H6/2+i.AQ/2+u,c+i.F]),p?i.D.1h([i.DH[0],i.DH[1]]):(s=[A+i.I/2+i.AQ/2+u,c+i.F+i.G4],i.D.1h(s)),i.MD>0&&(t=i.D[i.D.1f-1],i.D.1h([t[0],t[1]+i.MD*(i.G4>0?1:-1)]),i.D.1h([t[0],t[1]])),i.D.1h([A+i.I/2-f*i.H6/2+i.AQ/2+u,c+i.F])),"2c"===e&&i.D.1h([C,c+i.F])),"1K"!==e&&"4q"!==e||(i.D.1h([C,c+i.F]),i.KZ&&"1K"===i.ER&&(i.D.1h([C,c+i.F/2+i.AQ/2+d*i.G4/2+h]),p?i.D.1h([i.DH[0],i.DH[1]]):(s=[C-i.H6,c+i.F/2+i.AQ/2+h],i.D.1h(s)),i.D.1h([C,c+i.F/2+i.AQ/2-f*i.G4/2+h])),i.D.1h([C,Z]),i.D.1h([C+.1,Z]));s&&(i.E.cp=s)}WS(e){e=e||"4q";1a t,i,a,n=1g,l=n.Z.9k("2d");l.hw(),l.rT=n.hu;1a r=n.iX,o=n.iY,s=n.WA(),C=s.bc,A=s.rS,Z=s.rP;if("4q"===e)if(A!==Z||""!==n.GQ&&""!==n.HP){1a c=n.SF(n.NO);"8H"===n.NO?t=l.v4(c.cx,c.cy,1,c.cx,c.cy,c.r):"9r"===n.NO&&(c.x1=89(c.x1)?0:c.x1,c.x2=89(c.x2)?0:c.x2,c.y1=89(c.y1)?0:c.y1,c.y2=89(c.y2)?0:c.y2,t=l.v9(c.x1,c.y1,c.x2,c.y2)),""!==n.GQ&&""!==n.HP?n.V8(t):(t.hF(0,A),t.hF(1,Z)),l.cu=t}1u""!==n.D7&&-1!==ZC.AT(["6G","hI",!0],n.MC)&&"-1"===n.A0&&"-1"===n.AC&&(A="9U(3W,3W,3W,0)"),l.cu=A;l.m4=C,l.cV=n.AQ,l.77(n.BJ,n.BC),0!==n.AA&&(l.77(r+n.I/2,o+n.F/2),l.gm(ZC.TH(n.AA)),l.77(-(r+n.I/2),-(o+n.F/2))),l.m3(),n.U7(e);1a p=n.F5+n.FU+n.F2+n.FD!==0;a=n.AZ,n.AZ=n.AQ;1a u=n.GD;if(n.GD="",n.KN(),ZC.CN.ki(l,n,n.D),n.AZ=a,n.GD=u,n.KN(),"4q"===e)if(""!==n.D7&&-1===ZC.AT(ZC.gj,n.D7)){l.3j(),l.hw(),l.3u();1a h=l.ew;l.ew=n.C5;1a 1b=n.PZ(),d=1b.4i;1R(n.MC){2q:l.77(n.iX,n.iY),i=l.w2(d,"6G"),l.cu=i,l.3j(),l.77(-1b.x,-1b.y);1p;1i"no-6G":1i"dB":1i!1:l.cv(d,1b.x-n.BJ,1b.y-n.BC,n.E[ZC.1b[69]],n.E[ZC.1b[70]])}l.ew=h,l.gD()}1u l.3j();if(n.AQ>0){1a f=n.B8;a=n.AZ,n.B8=n.BU,n.AZ=n.AQ,n.KN(),ZC.CN.2I(l,n),n.TI=p?"4b":"9j",n.EV+n.G9>0&&(n.TI="mA"),n.gd=p?"4b":"sN",n.E["b2-1v"]=!0,n.E.1G=e,ZC.CN.1t(l,n,n.D,!0),n.B8=f,n.AZ=a,n.KN()}l.mo(),l.gD()}U0(e){e=e||"4q";1a t=1g,i=t.Z;t.E.3j=-1;1a a=!1;if("4q"===e){if(""!==t.D7&&-1===ZC.AT(ZC.gj,t.D7)){1a n=t.PZ();t.XY({6x:n,x:t.iX,y:t.iY}),a=!0}t.TO()}if(t.U7(e),a&&"6G"!==t.MC&&(t.Z0(),t.KZ)){1a l=0,r=0;t.CZ[1]<t.iY&&(r=t.CZ[3]-t.CZ[1]-t.F),t.CZ[0]<t.iX&&(l=t.CZ[2]-t.CZ[0]-t.I),1c===ZC.1d(t.E["8F-tx"])?t.E["8F-tx"]=l:t.E["8F-tx"]+=l,1c===ZC.1d(t.E["8F-ty"])?t.E["8F-ty"]=r:t.E["8F-ty"]+=r,ZC.P.G5(ZC.AK(t.E["8F-4i-id"]),{5J:"77("+t.E["8F-tx"]+","+t.E["8F-ty"]+")"})}1a o=t.F5+t.FU+t.F2+t.FD!==0;t.E.cx=t.iX+t.I/2,t.E.cy=t.iY+t.F/2,t.W5&&t.ZE();1a s=t.B8,C=t.AZ;t.B8=t.BU,t.AZ=t.AQ,t.KN(),ZC.CN.2I(i,t),t.TI=o?"4b":"9j",t.EV+t.G9>0&&(t.TI="mA"),t.gd=o?"4b":"sN";1a A=!1;ZC.A4.6I.ax||!t.FC||t.KZ||""!==t.QD||""!==t.OO||""!==t.NX||""!==t.PD||0!==t.F5||0!==t.FU||0!==t.F2||0!==t.FD||(A=!0),t.E["b2-1v"]=!0,t.E.1G=e,ZC.CN.1t(i,t,t.D,!0,1c,A),t.B8=s,t.AZ=C,t.KN()}U2(e){e=e||"4q";1a t=1g,i=t.Z;if("4q"===e){1a a=ZC.P.F6("7n:3j");if(""!==t.D7&&-1===ZC.AT(ZC.gj,t.D7)){1a n=t.PZ(),l=n.4i;1R(t.MC){2q:a.1J="w4",a.5a=t.D7,ZC.P.G5(a,{2K:n.cx+","+n.cy,3n:t.C5,"o:dO":t.C5}),t.E.5g=[a];1p;1i"no-6G":1i"dB":1i!1:t.E.5g=[l,n.x,n.y]}}t.TP("0.5,0.5")}1a r=ZC.P.F6("7n:4a");1R(r.7i=t.AQ+"px",r.1r=t.BU,r.3n=t.C5,t.GD){1i"2V":r.cU="2V";1p;1i"fJ":r.cU="ri";1p;1i"g8":r.cU="r7"}t.E.4a=r,t.U7(e);1a o=t.F5+t.FU+t.F2+t.FD!==0;t.E.cx=t.iX+t.I/2,t.E.cy=t.iY+t.F/2;1a s=t.B8,C=t.AZ;t.B8=t.BU,t.AZ=t.AQ,t.KN(),ZC.CN.2I(i,t),t.TI=o?"4b":"9j",t.EV+t.G9>0&&(t.TI="mA"),t.gd=o?"4b":"sN",t.E.1G=e,ZC.CN.1t(i,t,t.D,"4q"===e),t.B8=s,t.AZ=C,t.KN()}}1O QY 2k DS{2G(e){1E(e);1a t=1g;t.X6=1c,t.BD=1c,t.M=1c,t.SW=1c,t.A8=1c,t.KE=!1,t.OE=!1,t.L4=!1,t.tO=!1}1q(){1a e,t=1g;t.BD=1o.6f.aF("3C"===t.X6.1J?"I4":"DS",t.A,t.K+"-2S",t.X6.cw),t.BD.1C(t.X6),t.BD.iX=t.iX,t.BD.iY=t.iY,t.BD.K=t.K+"-bN",t.BD.OE=t.OE,t.tO||1c===ZC.1d(e=t.BD.o.2W)||(t.BD.o.2W=ZC.AN.w6(e,t.A.iX,t.A.iY),t.tO=!0),t.BD.1q(),1c!==ZC.1d(e=t.BD.o.1H)&&1c!==ZC.1d(e.1D)&&""!==e.1D&&(1w e.2h===ZC.1b[31]||ZC.2t(e.2h))&&(t.M=1o.6f.aF("DP",t,t.A.K+"-2S-1H-"+t.H4,ZC.bK),ZC.bK||t.M.1C(e)),1c!==ZC.1d(e=t.BD.o["8N"])&&(t.KE=ZC.2t(e)),1c!==ZC.1d(e=t.BD.o.7M)&&(t.KE=ZC.2t(e)),1c!==ZC.1d(e=t.BD.o.4N)&&(t.L4=ZC.2t(e)),1c!==ZC.1d(e=t.BD.o.98)&&(t.SW=1m DS(t),t.SW.1C(e),t.SW.1q())}1t(){1a e,t=1g;if(t.BD.Z=t.Z,t.BD.C6=t.C6,t.BD.9g(2),t.BD.WQ=!1,"3C"===t.BD.o.1J&&(t.iX-=t.BD.I/2,t.iY-=t.BD.F/2,t.BD.iX-=t.BD.I/2,t.BD.iY-=t.BD.F/2),t.BD.1t(),t.M){if(t.M.Z=t.M.C6=t.Z,t.M.IP=ZC.AK(t.A.A.K+"-1D"),t.M.K=t.A.K+"-2S-1H-"+t.H4,t.M.GM=t.A.K+"-2S-1H zc-2S-1H",t.M.o.bL=t.M.o.bL||"c",!t.X6["3f-1P"])1R(t.DN){2q:t.M.x=t.iX,t.M.y=t.iY;1p;1i"1y":1i"4B":1i"5t":1i"fW":t.M.o.x=ZC.1k((t.BD.CZ[0]+t.BD.CZ[2])/2),t.M.o.y=ZC.1k((t.BD.CZ[1]+t.BD.CZ[3])/2)}if(ZC.bK||t.M.1q(),t.M.iX=t.M.iX+t.BD.BJ,t.M.iY=t.M.iY+t.BD.BC,t.M.AL){if(t.SW&&t.SW.D.1f>0){if(!ZC.AK(t.A.K+"-2J-5p")){1a i=t.A.A.I+"/"+t.A.A.F;ZC.P.K3({2o:"zc-3l",wh:i,id:t.A.K+"-2J-5p",p:ZC.AK(t.A.A.K+"-2J-5p")},t.A.A.AB),ZC.P.HI({2o:ZC.1b[24],id:t.A.K+"-2J-5p-c",p:ZC.AK(t.A.K+"-2J-5p"),wh:i},t.A.A.AB)}1a a=t.SW.D,n=t.SW.o.bL||"",l=a[a.1f-1];1R(n){1i"l":t.M.iX=l[0]+t.BD.BJ,t.M.iY=l[1]-t.M.F/2+t.BD.BC;1p;1i"r":t.M.iX=l[0]-t.M.I+t.BD.BJ,t.M.iY=l[1]-t.M.F/2+t.BD.BC;1p;1i"t":t.M.iX=l[0]-t.M.I/2+t.BD.BJ,t.M.iY=l[1]+t.BD.BC;1p;1i"b":t.M.iX=l[0]-t.M.I/2+t.BD.BJ,t.M.iY=l[1]-t.M.F+t.BD.BC;1p;2q:t.M.iX=l[0]-t.M.I/2+t.BD.BJ,t.M.iY=l[1]-t.M.F/2+t.BD.BC}e=ZC.P.E6(ZC.AK(t.A.K+"-2J-5p-c"),t.A.H.AB),ZC.CN.2I(e,t.SW),ZC.CN.1t(e,t.SW,a)}if(t.M.WQ=!1,t.X6["3f-1P"]&&(t.M.GM=t.A.K+"-sw-1H zc-sw-1H",t.M.iX<t.A.iX||t.M.iX+t.M.I>t.A.iX+t.A.I||t.M.iY<t.A.iY||t.M.iY+t.M.F>t.A.iY+t.A.F))1l;t.M.1t(),t.E["6E-3c"]?t.M.EB(ZC.AK(t.E["6E-3c"])):t.M.EB()}}}}1O DP 2k I4{2G(e){1E(e),1g.7z(e)}7z(e){1E.7z(e);1a t=1g;t.IP=1c,t.GM="",t.AP=1c,t.OM="3G",t.K0="6r",t.DF=1o.i8,t.GE=1o.a3,t.C0="#4v",t.hi=!1,t.NA=!1,t.QU=!1,t.KD="2a",t.7K="5h",t.YW=0,t.FL=2,t.FM=2,t.FT=2,t.EM=2,t.qt=!1,t.i6=!1,t.FI=-1,t.KR=0,t.NU=0,t.OX=ZC.3v,t.hC=!1,t.sO=!0,t.XB=1o.w8,t.tW=1.65,t.VM=1,t.WG=!1,t.A8=1c,t.VQ=!1,t.m6=!1}8c(){1a e=1E.8c();1l 1g.e2(e,"c7,tj,6M,6W,1r,6A,6V,bq,h0,db,cn,di,da,d8,1D","OM,K0,DF,GE,C0,hi,7K,NA,QU,KD,FL,FM,FT,EM,AP"),e}1S(e){1E.1S(e);1j(1a t="OM,K0,DF,GE,C0,hi,7K,NA,KD,QU,FL,FM,FT,EM,AP".2p(","),i=0,a=t.1f;i<a;i++)1w e[t[i]]!==ZC.1b[31]&&(1g[t[i]]=e[t[i]])}EW(e){1l e}n4(e){1l"6A"===e||"14W"===e||"lT"===e||"tN"===e||"14Y"===e||"14Z"===e||"w9"===e}f8(e){1a t=1g;if(t.XB)1l e.1F(/(<([^>]+)>)/gi,"").1f*t.DF/(t.tW*(t.n4(t.7K)?.87:1)*(t.NA?.95:1));1a i="";1l 1w t.o["4e-4E"]!==ZC.1b[31]&&ZC.2t(t.o["4e-4E"])&&(i="[u3]"),ZC.P.n2(1g.H.K,i+e,1g.GE,1g.DF,1g.7K,1g.FI)}1q(){1g.I=1g.F=1g.NU=1g.KR=0,1E.1q();1a e,t,i,a,n,l=1g;if(!l.o.cw){if(l.YQ("1D","AP"),1c!==ZC.1d(l.AP)&&(l.AP=""+l.AP,l.AP=l.EW(l.AP),l.AP=l.AP.1F(/\\n/g,"<br>").1F(/\\\\n/g,"<br>"),"2F"===l.H.AB&&(l.AP=l.AP.1F(/&8w;/g," "))),l.4A([["iG","sO","b"],["8p-1s","XB","b"],["1X-1s","OX","i"],["1y-1M","FI","i"],["1s-fH","tW","f"],["152-1D","i6","b"],["3u-1D","qt","b"],["6A","hi","b"],["bq","NA","b"],["h0","QU","b"],["1D-bZ","KD"],["aR","hC","b"],["1D-3y","OM"],["3y","OM"],["9h-3y","K0"],["2s-2e","DF","f"],["1X-qQ","YW","i"],["2s-9q","GE"],["2s-2f","AA","i"],["1r","C0","c"],["2s-1r","C0","c"],["1D-2n","VM","f",0,1],["153-uc","VQ","b"]]),l.DF=ZC.BO(1,l.DF),1c===ZC.1d(l.o["1D-2n"])&&(l.VM=l.C5),l.hi&&(l.7K="6A"),1c!==(e=ZC.1d(l.o["2s-7i"]))&&(l.7K=e),1c===ZC.1d(l.o["1D-bZ"])&&(l.KD=l.QU?"h0":"2a"),1c!==(e=ZC.1d(l.o["2s-1I"]))&&(l.NA="bq"===e||"bm"===e),1c!==(e=ZC.1d(l.o.3x))){1a r=5P(e).2p(/\\s+|;|,/);t=1===r.1f?[ZC.1k(r[0]),ZC.1k(r[0]),ZC.1k(r[0]),ZC.1k(r[0])]:2===r.1f?[ZC.1k(r[0]),ZC.1k(r[1]),ZC.1k(r[0]),ZC.1k(r[1])]:3===r.1f?[ZC.1k(r[0]),ZC.1k(r[1]),ZC.1k(r[2]),ZC.1k(r[0])]:[ZC.1k(r[0]),ZC.1k(r[1]),ZC.1k(r[2]),ZC.1k(r[3])],l.FL=t[0],l.FM=t[1],l.FT=t[2],l.EM=t[3]}if(l.4A([["3x-1v","FL","i"],["3x-2z","FM","i"],["3x-2c","FT","i"],["3x-1K","EM","i"]]),l.AP){l.YW>0&&l.AP.1f>l.YW&&(l.AP=l.AP.2x(0,l.YW)+"...");1a o=l.AP.2p(/<br>|<br\\/>|<br \\/>|\\n/),s="";1w l.o["4e-4E"]!==ZC.1b[31]&&ZC.2t(l.o["4e-4E"])&&(o=[l.AP],s="[u3]");o.1f;1j(l.KR=ZC.P.n2(1g.H.K,s+l.AP,1g.GE,1g.DF,1g.7K,1g.FI,!0)+l.FL+l.FT,i=0,a=o.1f;i<a;i++)l.NU=ZC.BO(l.NU,l.f8(o[i])+l.EM+l.FM)}1u l.AP="",l.NU=ZC.1k(1.25*l.DF),l.KR=-1===l.FI?ZC.1k(1.25*l.DF):l.FI;if((1c===ZC.1d(l.o[ZC.1b[19]])||89(l.I)||0===l.I)&&(l.I=l.NU),(1c===ZC.1d(l.o[ZC.1b[20]])||89(l.F)||0===l.F)&&(l.F=l.KR),l.I=ZC.CV(l.I,l.OX),l.i6&&l.NU>l.I&&!l.E.tZ&&l.I>2*l.DF){1a C,A="",Z=0,c=l.AP.1F(/<br>/gi," [##] ").2p(/\\s|<br>/),p=[];1j(i=0,a=c.1f;i<a;i++)if((C=l.f8(c[i]))>.9*l.I){1a u=1A.4j(C/l.I*.9),h=1A.4j(c[i].1f/u);1j(n=0;n<u;n++)p.1h(c[i].5y(n*h,h))}1u p.1h(c[i]);1j(i=0,a=p.1f;i<a;i++)""!==p[i]&&("[##]"===p[i]?(A+="<br>",Z=0):(Z+=C=1+l.f8(p[i]+" "))>.9*l.I?(i>0&&(A+="<br>"),A+=p[i]+" ",Z=C):A+=p[i]+" ");A=(A=A.1F(/<br><br>/g,"<br>").1F(/ <br> <br>/g," <br>")).1F(/(.+?)<br> $/g,"$1");1a 1b=l.o.1D;l.o.1D=A,l.E.tZ=!0,l.1q(),l.o.1D=1b,l.E.tZ=!1}if("3c"!==l.H.AB&&(l.AP=l.AP.1F(/&lt;/g,"<").1F(/&gt;/g,">")),!(1c!==ZC.1d(l.o[ZC.1b[19]])&&1c!==ZC.1d(l.o[ZC.1b[20]])||1c===ZC.1d(l.o.2K)&&1c===ZC.1d(l.o.2w)&&1c===ZC.1d(l.o[ZC.1b[57]])&&1c===ZC.1d(l.o[ZC.1b[58]])&&1c===ZC.1d(l.o[ZC.1b[59]])&&1c===ZC.1d(l.o[ZC.1b[60]]))){l.iX=-1,l.iY=-1;1a d=l.o[ZC.1b[19]],f=l.o[ZC.1b[20]];1c===ZC.1d(d)&&(l.o[ZC.1b[19]]=l.I),1c===ZC.1d(f)&&(l.o[ZC.1b[20]]=l.F),l.9g(),l.o[ZC.1b[19]]=d,l.o[ZC.1b[20]]=f}if(1w l.o["4e-4E"]===ZC.1b[31]||!l.o["4e-4E"]){1a g=1A.4j((l.NU-l.EM-l.FM)/l.DF);g>0&&(l.AP=l.AP.1F(/<hr>/g,1m 3N(g).2M("\\155")))}}l.h3()}1t(){1a e,t,i,a,n,l,r,o,s,C,A,Z=1g;if(!Z.WG&&!Z.sO){1a c=!0;1c!==ZC.1d(Z.o.w1)&&(c=ZC.2t(Z.o.w1));1a p,u,h={x:Z.iX+Z.EM-1,y:Z.iY+Z.FL-1,1s:Z.I-Z.EM-Z.FM+2,1M:Z.F-Z.FL-Z.FT+2,1J:Z.E.sQ||""},1b=[[0,0]];1j(c&&(1b=[[0,0],[0,2],[0,-4],[0,4],[0,-8],[3,0],[-6,0],[5,0],[-10,0]]),u=0;u<1b.1f;u++){1j(p=!0,h.x+=1b[u][0],h.y+=1b[u][0],n=0,l=Z.H.T3.1f;n<l;n++)ZC.AO.YB(h,Z.H.T3[n],-2)&&(p=!1);if(p){Z.iX=h.x,Z.iY=h.y;1p}}if(!p)1l;Z.H.T3.1h(h)}1a d=Z.H.AB;if(e=ZC.P.E6(Z.Z,d),Z.WG||1E.1t(),!Z.m6&&(Z.o[ZC.1b[19]]||!(Z.I-Z.EM-Z.FM<2))&&(Z.o[ZC.1b[20]]||!(Z.KR-Z.FL-Z.FT<2))){1a f=Z.AA%2m==0?"0":"";if((Z.WG||1o.h8&&"3c"===d)&&(f=""),ZC.3L&&"2F"===d&&""===Z.GM&&(Z.GM=Z.K+"-1O"),!Z.WG&&ZC.AK(Z.K)&&(d="1b",ZC.bK))1l ZC.AK(Z.K).1I.1v=Z.iY+Z.BC+"px",8m(ZC.AK(Z.K).1I.1K=Z.iX+Z.BJ+"px");1a g=1w Z.E["4e-4E"]!==ZC.1b[31]&&Z.E["4e-4E"],B=g;1w Z.o["4e-4E"]!==ZC.1b[31]&&(g=ZC.2t(Z.o["4e-4E"]));1a v,E,b,m,K,D,F,I,x,X,y,Y,L,w,M,H,N,O,S,P,G,T,k=[Z.AP];g||(k=Z.AP.2p(/<br>|<br\\/>|<br \\/>|\\n/)),g&&!B&&"2F"===d&&"0"===f&&(f="14U");1a J=Z.IP?Z.IP:Z.Z.6q;1R(d+f){1i"14F":1i"14s":1i"wc":if(a=1,!g)1R(Z.K0){1i"6r":a+=(Z.F-Z.KR)/2;1p;1i"2c":a+=Z.F-Z.KR}if(r=ZC.P.I1({id:Z.K,2o:Z.GM,tl:ZC.4w(Z.iY+Z.BC)+"/"+ZC.4w(Z.iX+Z.BJ),wh:Z.I+"/"+Z.F,2K:"4D",3x:0,2w:0,9J:g?"2h":"97",c7:Z.OM}),g&&(B||d+f!=="wc"||(J=ZC.AK(Z.H.K+"-1v")),J.3b(r)),ZC.P.I1({id:Z.K+"-t",2o:""!==Z.GM?Z.GM+"-t":"",p:r,1s:Z.I-Z.EM-Z.FM,1M:g?1c:Z.KR-Z.FL-Z.FT,tl:a+"/0",4e:Z.AP+"",2K:"4D",wf:"n3",3n:Z.VM,1r:Z.C0,6V:Z.7K,cG:Z.NA?"bm":"5h",db:Z.KD,6M:Z.DF,6W:Z.GE,lE:Z.FL,sU:Z.FM,sJ:Z.FT,lH:Z.EM,tj:Z.K0,c7:Z.OM,bx:-1===Z.FI?"125%":Z.FI+"px",aR:Z.hC,3x:0}),Z.E["2O-3M"]&&(r.1I.3M=Z.E["2O-3M"],Z.E["2O-3M"]=1c),B&&Z.H&&Z.H.A8&&!Z.o[ZC.1b[19]]&&!Z.o[ZC.1b[20]]){1a z=ZC.A4("#"+Z.K+"-t");"3c"===d&&(ZC.AK(Z.H.K+"-2H-c").1s=z.1s()+Z.EM+Z.FM,ZC.AK(Z.H.K+"-2H-c").1M=z.1M()+Z.FL+Z.FT),Z.H.A8.3k(),Z.I=z.1s()+Z.EM+Z.FM,Z.F=z.1M()+Z.FL+Z.FT,Z.1t()}1p;1i"3c":1a R=!1;if(ZC.A4.6I.jP&&Z.AA%90==0&&0!==Z.AA&&(Z.AA+=.5,R=!0),e=Z.Z.9k("2d"),1o.3I.eY&&(ZC.cD||(ZC.cD={})),!1o.3I.eY||1o.3I.eY&&!ZC.cD[Z.K]){1j(1o.3I.eY&&(ZC.cD[Z.K]=2g.4W("3c"),ZC.cD[Z.K].1s=Z.NU,ZC.cD[Z.K].1M=Z.KR),v=-1===Z.FI?0:ZC.4w(Z.FI-1.25*Z.DF)/2,n=0,l=k.1f;n<l;n++)if(""!==ZC.GT(k[n])){1R(t=1===l?Z.NU:Z.f8(k[n])+Z.FM+Z.EM,b=-1===(E=k[n]).1L("<")?E:E.1F(/<.+?>/gi,"").1F(/<\\/.+?>/gi,""),i=0,a=0,Z.OM){1i"3G":i+=(Z.I-t)/2;1p;1i"2z":i+=Z.I-t}1R(Z.K0){1i"6r":a+=(Z.F-Z.KR)/2;1p;1i"2c":a+=Z.F-Z.KR}if(m=0,E!==b){1j(;D=/<(.+?)>(.*?)<\\/(.+?)>/.3p(E);){1R(F="",I="",(C=/(.+?)1I=(.+?)(\\\'|")(.*?)/.3p(D[1]))&&(I=C[2].1F(/\\\'|"/g,"")),D[3]){1i"b":1i"wk":F="2s-7i:6A";1p;1i"i":1i"em":F="2s-1I:bq";1p;1i"u":F="1D-bZ:h0"}X=\'[[7J 1I="\'+(""===F?"":F+";")+I+\'"]]\'+D[2]+"[[/7J]]",E=E.1F(D[0],X)}1j(y=!1,S=0,P=(D=(E=E.1F(/\\[\\[/g,"<").1F(/\\]\\]/g,">").1F(/<7J/g,"[[*]]<7J").1F(/<\\/7J>/g,"</7J>[[*]]")).2p("[[*]]")).1f;S<P;S++)if(""!==D[S]){if(o=Z.C0,Y=Z.7K,L=Z.NA,w=Z.QU,M=Z.DF,H=Z.GE,O=Z.FI,N=Z.KD,K=D[S],A=/<7J 1I=(.+?)>(.+?)<\\/(.+?)>/.3p(D[S]))1j(K=A[2],G=0,T=(x=A[1].1F(/\\\'|"/g,"").2p(/;|:/)).1f;G<T-1;G+=2)1R(ZC.GT(x[G])){1i"2s-2e":M=ZC.1k(ZC.GT(x[G+1]));1p;1i"2s-9q":H=ZC.GT(x[G+1]);1p;1i"2s-7i":Y=ZC.GT(x[G+1]);1p;1i"2s-1I":-1!==ZC.AT(["bq","bm"],ZC.GT(x[G+1]))&&(L=!0);1p;1i"1D-bZ":N=ZC.GT(x[G+1]);1p;1i"1y-1M":O=ZC.1k(ZC.GT(x[G+1]));1p;1i"1r":o=ZC.AN.G7(ZC.GT(x[G+1]))}0===n&&(v=-1===O?0:ZC.4w(O-1.25*M)/2);1a Q={bO:n,bz:e,i:L,fw:Y,fs:M,lh:O,ff:H,c:o,t:K,dx:i,dy:a};Q.dy+=ZC.4w(v),Q.dy+=y||Z.n4(Y)||w?2:0,Z.nS(Q),y=L,m++,i+=ZC.P.n2(1g.H.K,K,H,M,Y,O)}1c!==ZC.1d(O)&&1c!==ZC.1d(M)&&(v+=-1===O?1.25*M:O)}1u Z.nS({bO:n,bz:e,i:Z.NA,fw:Z.7K,fs:Z.DF,lh:Z.FI,ff:Z.GE,c:Z.C0,t:k[n],dx:i,dy:a+v}),v+=-1===Z.FI?1.25*Z.DF:Z.FI}}1u e.cv(ZC.cD[Z.K],Z.iX+Z.BJ,Z.iY+Z.BC);R&&(Z.AA-=.5);1p;1i"3L":1R(a=0,Z.K0){1i"1v":a-=(Z.F-Z.KR)/2;1p;1i"2c":a+=(Z.F-Z.KR)/2}1a W=ZC.P.F6("7n:1y"),V=Z.iX+Z.BJ+Z.I/2,U=Z.iY+Z.BC+Z.F/2,j=ZC.EF(Z.AA)*(Z.I-Z.EM-Z.FM)/2,q=ZC.EL(Z.AA)*(Z.I-Z.EM-Z.FM)/2,$=ZC.1k(V-j-ZC.EF(90-Z.AA)*a),ee=ZC.1k(U-q+ZC.EL(90-Z.AA)*a),te=ZC.1k(V+j-ZC.EF(90-Z.AA)*a),ie=ZC.1k(U+q+ZC.EL(90-Z.AA)*a);$===te&&($-=.8I,te+=.8I),ee===ie&&(ee-=.8I,ie+=.8I),o=Z.C0,0!==Z.AA&&Z.C5<1&&(o=ZC.AN.QR(o,99*(1-Z.C5))),ZC.P.G5(W,{id:Z.K+"-1y",6o:$+"px,"+ee+"px",to:te+"px,"+ie+"px",14l:o}),W.ab=!0,W.gX=!1;1a ae=ZC.P.F6("7n:2R");ae.4m("14n",!0),W.3b(ae);1a ne=ZC.P.F6("7n:14t"),le=Z.AP.1F(/<br>|<br\\/>|<br \\/>/gi,"\\n").1F(/<.+?>/gi,"").1F(/<\\/.+?>/gi,"");ZC.P.G5(ne,{on:!0,3e:le}),ZC.P.PQ(ne,{1r:o,6V:Z.7K,cG:Z.NA?"bm":"5h",db:Z.KD,6M:Z.DF+"px",6W:Z.GE,"v-1D-3y":Z.OM}),W.3b(ne),e.3b(W);1p;1i"2F":1i"14y":1a re=Z.iX+Z.EM+Z.BJ,oe=Z.iY+Z.FL+Z.BC;if(r=ZC.P.F6("1D",ZC.1b[36]),ZC.P.G5(r,{x:ZC.4w(re),y:ZC.4w(oe),id:Z.K,"1O":Z.GM,3n:Z.VM}),Z.E["2O-3M"]&&(r.1I.3M=Z.E["2O-3M"],Z.E["2O-3M"]=1c),Z.hC&&ZC.P.G5(r,{"1D-bL":ZC.A4.6I.ax?"":"6i","14z-4E":"rl",bi:"aR","tG-dj":"dj-7a"}),Z.qt&&(Z.H.KH.3b(ZC.P.Y0({id:Z.K+"-3u",2R:[[Z.iX+Z.EM+Z.AQ+Z.BJ,Z.iY+Z.FL+Z.AQ+Z.BC].2M(","),[Z.iX+Z.I-Z.FM-Z.AQ+Z.BJ,Z.iY+Z.FL+Z.AQ+Z.BC].2M(","),[Z.iX+Z.I-Z.FM-Z.AQ+Z.BJ,Z.iY+Z.F-Z.FT-Z.AQ+Z.BC].2M(","),[Z.iX+Z.EM+Z.AQ+Z.BJ,Z.iY+Z.F-Z.FT-Z.AQ+Z.BC].2M(","),[Z.iX+Z.EM+Z.AQ+Z.BJ,Z.iY+Z.FL+Z.AQ+Z.BC].2M(",")].2M(" ")})),ZC.P.G5(r,{"3u-2R":"3R(#"+Z.K+"-3u)"})),Z.AA%2m!=0&&r.4m("5J","gm("+Z.AA+" "+(re+(Z.I-Z.EM-Z.FM)/2)+" "+(oe+(Z.F-Z.FL-Z.FT)/2)+")"),g&&J.3b(r),g){ZC.P.ET(Z.K+"-8X");1a se=ZC.P.F6("3E");ZC.P.PQ(se,{2K:"4D",1K:0,1v:0,1s:Z.I-Z.EM-Z.FM+"px",1M:Z.F-Z.FL-Z.FT+"px",1r:Z.C0,6M:Z.DF+"px",6W:Z.GE,6V:Z.7K,db:Z.KD,c7:Z.OM,cG:Z.NA?"bq":"5h"}),se.id=Z.K+"-8X",se.82="zc-1I zc-4e-4E",se.4o=k[0],1===Z.o["z-2Y"]?ZC.AK(Z.H.K+"-1v").1C(se):ZC.AK(Z.H.K+"-1v").iz(se,ZC.AK(Z.H.K+"-5X")),B&&Z.H&&Z.H.A8&&(Z.o[ZC.1b[19]]||Z.o[ZC.1b[20]]||(Z.H.A8.3k(),se.1I.1s="",se.1I.1M="",Z.I=ZC.A4(se).1s()+Z.EM+Z.FM,Z.F=ZC.A4(se).1M()+Z.FL+Z.FT,Z.1t()))}1u 1j(v=-1===Z.FI?0:ZC.4w(Z.FI-1.25*Z.DF)/2,n=0,l=k.1f;n<l;n++){1R(t=1===l?Z.NU:Z.f8(k[n])+Z.FM+Z.EM,b=-1===(E=k[n]).1L("<")?E:E.1F(/<.+?>/gi,"").1F(/<\\/.+?>/gi,""),i=0,a=Z.DF,Z.OM){1i"3G":i=(Z.I-t)/2;1p;1i"2z":i=Z.I-t}1R(Z.K0){1i"6r":a+=(Z.F-Z.KR)/2;1p;1i"2c":a+=Z.F-Z.KR}if(m=0,E!==b){1j(;D=/<(.+?)>(.*?)<\\/(.+?)>/.3p(E);){1R(F="",I="",(C=/(.+?)1I=(.+?)(\\\'|")(.*?)/.3p(D[1]))&&(I=C[2].1F(/\\\'|"/g,"")),D[3]){1i"b":1i"wk":F="2s-7i:6A";1p;1i"i":1i"em":F="2s-1I:bq";1p;1i"u":F="1D-bZ:h0"}X=\'[[7J 1I="\'+(""===F?"":F+";")+I+\'"]]\'+D[2]+"[[/7J]]",E=E.1F(D[0],X)}1j(y=!1,S=0,P=(D=(E=E.1F(/\\[\\[/g,"<").1F(/\\]\\]/g,">").1F(/<7J/g,"[[*]]<7J").1F(/<\\/7J>/g,"</7J>[[*]]")).2p("[[*]]")).1f;S<P;S++)if(""!==D[S]){if(o=Z.C0,Y=Z.7K,L=Z.NA,w=Z.QU,M=Z.DF,H=Z.GE,N=Z.KD,O=Z.FI,K=D[S],A=/<7J 1I=(.+?)>(.+?)<\\/(.+?)>/.3p(D[S]))1j(K=A[2],G=0,T=(x=A[1].1F(/\\\'|"/g,"").2p(/;|:/)).1f;G<T-1;G+=2)1R(ZC.GT(x[G])){1i"2s-2e":M=ZC.1k(ZC.GT(x[G+1]));1p;1i"2s-9q":H=ZC.GT(x[G+1]);1p;1i"2s-7i":Y=ZC.GT(x[G+1]);1p;1i"2s-1I":-1!==ZC.AT(["bq","bm"],ZC.GT(x[G+1]))&&(L=!0);1p;1i"1D-bZ":N=ZC.GT(x[G+1]);1p;1i"1y-1M":O=ZC.1k(ZC.GT(x[G+1]));1p;1i"1r":o=ZC.AN.G7(ZC.GT(x[G+1]))}a=M,s=ZC.P.F6("vZ",ZC.1b[36]),0===m?(ZC.P.G5(s,{x:ZC.4w(re+i),y:ZC.4w(oe+a),dy:ZC.4w(v)}),v+=-1===O?1.25*M:ZC.BO(1.5*M,O)):ZC.P.G5(s,{dx:y||Z.n4(Y)||w?2:0}),ZC.P.G5(s,{1r:o,3j:o}),ZC.P.PQ(s,{6V:Y,cG:L?"bm":"5h",db:N,6M:M+"px",6W:H,vP:"3i"});1a Ce=2g.4W("7J");-1!==K.1L("<")||-1!==K.1L(">")?Ce.wl=K:Ce.4o=K,K=Ce.wl||Ce.oq,Ce=1c,s.oq=K,r.3b(s),y=L,m++}}1u Z.hC&&ZC.A4.6I.ax&&(i+=t-Z.EM-Z.FM),s=ZC.P.F6("vZ",ZC.1b[36]),ZC.P.G5(s,{x:ZC.4w(re+i),y:ZC.4w(oe+a),1r:Z.C0,3j:Z.C0,dy:ZC.4w(v)}),ZC.P.PQ(s,{6V:Z.7K,cG:Z.NA?"bm":"5h",db:Z.KD,6M:Z.DF+"px",6W:Z.GE,vP:"3i"}),s.oq=b,r.3b(s),v+=-1===Z.FI?1.25*Z.DF:Z.FI}}if(!g)if(!Z.WG&&r&&J)if(Z.H.G1)-1!==ZC.P.TB(J).1L("zc-1D")&&1c===ZC.1d(Z.H.G1[J.id])&&(Z.H.G1[J.id]=2g.oo()),Z.H.G1[J.id]?Z.H.G1[J.id].3b(r):J.3b(r);1u J.3b(r)}}nS(e){1a t=1g,i=e.bO,a=e.bz,n=e.i,l=e.fw,r=e.fs,o=e.ff,s=e.c,C=e.dx,A=e.dy,Z=e.t;a.hw(),a.ew=t.VM;1a c;if(c=(n?"bq":"5h")+" 5h "+l+" "+r+"px "+o,a.2s=c,a.cu=s,a.c7="1K",a.vI="vJ",a.77(t.iX+t.BJ,t.iY+t.BC),0!==t.AA&&(a.77(t.I/2,t.F/2),a.gm(ZC.TH(t.AA)),a.77(-t.I/2,-t.F/2)),a.77(t.EM,t.FL+r),a.77(C,A),a.qg(Z,0,0),1o.3I.eY){1a p=ZC.cD[t.K].9k("2d");p.2s=c,p.cu=s,p.c7="1K",p.vI="vJ",p.qg(Z,t.EM,t.FL+r+1.25*i*r)}a.gD()}EB(e){1a t=1g;if(ZC.3c&&"3c"===t.H.AB&&(e||(e=ZC.AK(t.H.K+"-ls-c")),!1o.h8&&t.AA%2m==0)){1a i=t.Z;t.Z=e,t.WG=!0;1a a=t.H.AB;t.H.AB="3c",t.1t(),t.WG=!1,t.H.AB=a,t.Z=i}}}1O RZ 2k I4{2G(e){1E(e);1a t=1g;t.CF="4G",t.O6={aS:!0,3a:!0,"2J-2c":!0,"2J-1v":!0,4Y:!0,2u:!0,4l:!0,2i:!0,"8N":!0,"1U-3C":!0},t.dC=!1,t.dN="qp",t.QQ=1c,t.JM="",t.V2=!1,t.S9={},t.N6="",t.12k={},t.R5="",t.F0="",t.MF={},t.HT=1c,t.AH=[],t.LW="",t.A8=1c,t.HB=1c,t.D4=1c,t.B9=1m ZC.vO(t),t.R3="",t.MV=1c,t.O9=[1c,1c,1c,1c],t.OE=!1,t.NN="x",t.KE=!1,t.UA=!1,t.vX=!1,t.kQ=!1,t.H7=!1,t.jx={},t.O4=1c,t.R4={},t.M2=!1,t.R0=!1,t.11t=1c,t.T1=[],t.N={},t.N4=1c,t.DD=1c,t.UZ=0,t.gV=0,t.lR=1,t.MM=1c,t.SL="",t.vY="F*11v$11x!",t.MK="",t.eb={},t.lf=!1,t.AB="",t.KH=1c,t.h5=!1,t.R1=["",""],t.LE=0,t.KY=[],t.ni=0,t.na=0,t.ei=!1,t.kD="",t.vS=!0,t.IB=1c,t.R2=[],t.NZ=0,t.11s=!1,t.SN={},t.jA=!1,t.G1=1o.3I.jZ?{}:1c,t.mh=!1,t.T3=[]}pG(e){1a t=1g;if(e)1j(1a i=t.T3.1f-1;i>=0;i--)t.T3[i].1J===e&&t.T3.6u(i,1);1u t.T3=[]}2P(){1l-1!==ZC.AT(1g.KY,ZC.1b[44])}mc(e){1l e=e||"",ZC.AK(1g.K+"-46-c"+(""===e?e:"-"+e))}9p(){1a e;(e=ZC.AK(1g.K+"-2B"))&&(e.1I.3M="2a"),1g.ei=!1}XN(){1j(1a e=1g,t=e.O9.1f,i=0;i<t;i++)if(1c!==ZC.1d(e.O9[i])){1R(e.AB){1i"2F":ZC.CN.U0(e.O9[i].bz,e.O9[i].1I,e.O9[i].2R.2M(" "),e.O9[i].ab);1p;1i"3L":ZC.CN.U2(e.O9[i].bz,e.O9[i].1I,e.O9[i].2R.2M(" "),e.O9[i].ab)}e.O9[i]=1c}}p4(){1a s=1g,i,A5,EY,eF;ZC.hU=ZC.hU||1o.hU||"",ZC.cs=ZC.cs||1o.cs||"",ZC.nh=ZC.nh||1o.nh||"",eF="p9:"===2g.8d.iT?ZC.11S||"":2g.8d.12o;1a d0=[eF],CR=eF.2p(".");1j("8x"===CR[0]?d0.1h(eF.1F("8x.","")):d0.1h("8x."+eF),i=0;i<=CR.1f-2;i++){1j(1a pb="*",j=i;j<CR.1f;j++)pb+="."+CR[j];d0.1h(pb)}1n XJ(e){if(ZC.sG&&ZC.sG 3F 3N){1a t=ZC.Y4.ek(ZC.nN(ZC.my(e)));-1!==ZC.AT(ZC.sG,t)&&(s.vX=!0)}}if(-1!==ZC.AT(d0,"vV")||-1!==ZC.AT(d0,"127.0.0.1"))s.UA=!0,s.kQ=!0,XJ("vV");1u{1a mB=[["2v.AC.12S.12X","Q^131]136`138^`139[13a"],["2v.13b.13c","13d/13e+13f/13g/13h/+13i+137/12P="]];1j(i=0,A5=mB.1f;i<A5;i++)4O{if(7u(mB[i][0])===ZC.my(mB[i][1])){s.UA=!0;1p}}4M(e){}1j(i=0,A5=d0.1f;i<A5;i++){1a nk=ZC.Y4.ek(ZC.nN(ZC.my(d0[i])));ZC.hU 3F 3N&&-1!==ZC.AT(ZC.hU,nk)&&(s.UA=!0,XJ(nk))}ZC.cs 3F 3N&&2===ZC.cs.1f&&(EY=ZC.vG(s.vY),EY=EY.1F("O","0"),s.SL=ZC.wd(ZC.cs[0],EY),s.SL===ZC.cs[1]&&(s.UA=!0,s.kQ=!0,XJ(ZC.cs[0])))}}kT(){1a e=1g;if(1c!==e.MV)ZC.6z(e.MV),e.2y();1u if(1c===ZC.1d(ZC.4f.1T["cF-"+e.R3])){1a t=["eU-3e"===e.N6?"eV="+1A.d6():"",1o.hy?"jS="+e.AB:""].2M("&");ZC.A4.a9({1J:"bY",3R:e.R3,s9:"1D",ej:1n(t){e.S9.cF||"79-eX"!==e.N6||t.cC(ZC.1b[45],"cB, 8I cr dU 6R:6R:6R dY")},1T:t,4J:1n(t,i,a,n){1l e.NH({8C:ZC.1b[63],aN:"c5 cX g3 ("+n+")"},ZC.1b[64]),!1},aD:1n(t){1a i;4O{i=3h.1q(t),ZC.4f.1T["cF-"+e.R3]=t}4M(a){1l e.NH(a,"3h mE"),!1}e.MV=i,ZC.6z(e.MV),e.2y()}})}1u{1a i;4O{i=3h.1q(ZC.4f.1T["cF-"+e.R3])}4M(a){1l e.NH(a,"3h mE"),!1}e.MV=i,ZC.6z(e.MV),e.2y()}}2y(e,t){1a i=1g;if(i.MK="2y",""!==(t=t||i.R5)&&0!==t.1L("7y:"))if(1c===ZC.1d(ZC.4f.1T["1T-"+t])){1a a=["eU-3e"===i.N6?"eV="+1A.d6():"",1o.hy?"jS="+i.AB:""].2M("&");ZC.A4.a9({1J:"bY",3R:t,s9:"1D",ej:1n(e){i.S9.1T||"79-eX"!==i.N6||e.cC(ZC.1b[45],"cB, 8I cr dU 6R:6R:6R dY")},1T:a,4J:1n(e,t,a,n){1l i.NH({8C:ZC.1b[63],aN:"c5 cX g3 ("+n+")"},ZC.1b[64]),!1},aD:1n(t){i.ip(e,t)}})}1u i.ip(e,ZC.4f.1T["1T-"+t]),ZC.4f.1T["1T-"+t]=1c;1u""!==i.F0?i.ip(e,i.F0):1c!==i.MF&&(i.oC?i.MF=3h.1q(3h.5b(i.oC)):i.oC=3h.1q(3h.5b(i.MF)),i.ip(e,i.MF))}ip(e,t){1a i=1g;ZC.TS[i.K]=(1m a2).bH(),ZC.AN.pk("wj",i)?ZC.AN.C2("wj",i,i.FF(),t,1n(t){i.ra(e,t)}):i.ra(e,t)}kX(e){1a t,i;if(!1o.3I.rM)1l[];e||(e=1g.o);1a a=[];if(e.aS)1j(t=0,i=e.aS.1f;t<i;t++){1a n=e.aS[t].1J||"1c";if(-1===ZC.AT(ZC.wi,n)){1j(1a l in"3d"===n.2x(n.1f-2)&&(n=n.2x(0,n.1f-2)),ZC.n9)ZC.n9.88(l)&&-1!==ZC.AT(ZC.n9[l],n)&&(n=l);1o.sR(n),a.1h(n)}}1j(1g.wb(e),t=0,i=ZC.RQ.1f;t<i;t++)""!==ZC.GT(ZC.RQ[t])&&-1===ZC.AT(ZC.X8,ZC.GT(ZC.RQ[t]))&&a.1h(ZC.GT(ZC.RQ[t]));1l a}wb(e){e||(e=1g.o)}ra(JJ,U3){1a s=1g,G;s.E.wY=1o.3I.rj?U3:"N/A";1a DG=1c;if("3e"==1w U3)4O{DG=3h.1q(U3)}4M(JA){4O{DG=7u("("+U3+")")}4M(JA){1l s.NH(JA,"3h mE"),!1}}1u DG=U3;1c===ZC.1d(DG[ZC.1b[16]])&&(DG={aS:[DG]}),s.E.7k="N/A",1o.3I.rj&&(s.E.7k=ZC.GT(3h.5b(DG))),1o.iO(s,s.kX(DG),1n(){DG=ZC.AN.C2("eW",s,s.FF(),DG),1o.iO(s,s.kX(DG),1n(){if(ZC.AN.C2("12J",s,{id:s.K}),1c===ZC.1d(JJ))s.VS(DG),s.o=DG,s.dC?(s.1q(),s.1t()):s.OR(1n(){s.1q(),s.1t()});1u{1a e=s.OH(JJ);if(1c!==e&&1c!==ZC.1d(G=DG[ZC.1b[16]])){1a t=G.1f>1?G[e.L]:G[0];t.id||(t.id=e.o.id||""),s.o[ZC.1b[16]][e.L]=t,s.OR(1n(){s.1q(JJ),s.AH[e.L].1t()})}}})})}VS(DG){1a s=1g,G,i,A5,j,JD;1j(1c===ZC.1d(DG[ZC.1b[16]])&&(DG={aS:[DG]}),1===DG[ZC.1b[16]].1f&&1c===ZC.1d(DG[ZC.1b[16]][0])&&(DG[ZC.1b[16]]=[{1J:"1c"}]),i=0,A5=DG[ZC.1b[16]].1f;i<A5;i++)if(1c!==ZC.1d(DG[ZC.1b[16]][i])){if(1c!==ZC.1d(G=DG[ZC.1b[16]][i].5U)){1a FH=[];1j(DG[ZC.1b[16]][i][ZC.1b[10]]=DG[ZC.1b[16]][i][ZC.1b[10]]||[],j=0,JD=G.1f;j<JD;j++)if(G[j].eH&&G[j]["3f-1P"]||FH.1h(G[j]),1c!==ZC.1d(G[j].1J)&&0===G[j].1J.1L("1o."))4O{1a M6=G[j].xj||{},EH=G[j].1J+"."+(M6.8C||"");M6[ZC.1b[3]]=i;1a fr=7u(EH).4x(s,M6,DG,G[j]);1j(1a hW in fr)fr.88(hW)&&("1H"===fr[hW].kS?DG[ZC.1b[16]][i][ZC.1b[10]].1h(fr[hW]):FH.1h(fr[hW]))}4M(e){}DG[ZC.1b[16]][i].5U=FH}1a mn;if(1c!==ZC.1d(mn=DG[ZC.1b[16]][i].fE))1j(1a w0=s.nq(DG,i),k=0;k<mn.1f;k++){1a fF=mn[k];if(1c!==ZC.1d(fF.1J)&&1c!==ZC.1d(1o.fE[fF.1J])&&"1n"==1w 1o.fE[fF.1J].1q)4O{1a BP={};ZC.2E(fF,BP),BP.3a=w0.3a,BP.6J={id:s.K,1s:s.I,1M:s.F};1a o=1o.fE[fF.1J].1q.4x(s,BP);if(1c!==ZC.1d(G=o.Uy))1j(j=0;j<G.1f;j++)DG[ZC.1b[16]].1h({}),ZC.2E(G[j],DG[ZC.1b[16]][DG[ZC.1b[16]].1f-1]);if(1c!==ZC.1d(G=o[ZC.1b[10]]))1j(1c===ZC.1d(DG[ZC.1b[16]][i][ZC.1b[10]])&&(DG[ZC.1b[16]][i][ZC.1b[10]]=[]),j=0;j<G.1f;j++)DG[ZC.1b[16]][i][ZC.1b[10]].1h(G[j]);if(1c!==ZC.1d(G=o.5U))1j(1c===ZC.1d(DG[ZC.1b[16]][i].5U)&&(DG[ZC.1b[16]][i].5U=[]),j=0;j<G.1f;j++)DG[ZC.1b[16]][i].5U.1h(G[j])}4M(e){}}}}v5(e,t){1a i=1g;1R(e){1i"1y":1l 1m sS(i);1i"1N":1l 1m sF(i);1i"bQ":1l 1m Dg(i);1i"c2":1l 1m Dr(i);1i"2U":1i"5x":1i"96":1l 1m jq(i);1i"6b":1l 1m jn(i);1i"9f":1i"gZ":1i"aM":1j(1a a=!1,n=i.o[ZC.1b[16]][t][ZC.1b[11]],l=0,r=n.1f;l<r;l++)n[l]&&n[l].1J&&-1!==n[l].1J.1L("3d")&&(a=!0);1l a?1m sd(i):i.o[ZC.1b[16]][t].1B&&i.o[ZC.1b[16]][t].1J&&i.o[ZC.1b[16]][t].1B&&i.o[ZC.1b[16]][t].1B.1J&&-1!==i.o[ZC.1b[16]][t].1B.1J.1L("3d")?1m sd(i):"9f"===e?1m sc(i):1m Dn(i);1i"6y":1l 1m Dl(i);1i"8t":1l 1m Dk(i);1i"5i":1l 1m Fb(i);1i"6B":1l 1m Ew(i);1i"9B":1i"3P":1l 1m u9(i);1i"8Y":1l 1m Ei(i);1i"7g":1i"qE":1l 1m Es(i);1i"b9":1l 1m Fn(i);1i"f5":1i"8k":1l 1m Eo(i);1i"81":1l 1m Ep(i);1i"qU":1i"aa":1l 1m Ez(i);1i"au":1l 1m EQ(i);1i"vD":1i"5S":1l 1m Ex(i);1i"7Y":1l 1m Fc(i);1i"5z":1l 1m Ev(i);1i"rW":1l 1m Eg(i);1i"8E":1l 1m Ff(i);1i"9c":1l 1m Dw(i);1i"8a":1l 1m Ea(i);1i"nD":1i"7e":1l 1m Di(i);1i"dP":1i"6T":1l 1m Dm(i);1i"7o":1l 1m Dj(i);1i"rz":1l 1m Du(i);2q:1l 1m Dv(i)}}OH(e){1j(1a t=1g,i=0,a=t.AH.1f;i<a;i++)if(t.AH[i].K===t.K+"-3a-"+e||t.AH[i].K===t.K+"-3a-id"+e||t.AH[i].K===e||i===e)1l t.AH[i];1l 1c}mK(e,t){1a i=1g,a=ZC.A4("#"+i.K+("2F"===i.AB?"-1v":"-46")),n=ZC.al(i.K);e-=a.2b().1K,t-=a.2b().1v;1j(1a l=1c,r=0,o=i.AH.1f;r<o;r++)ZC.DQ(e,i.AH[r].iX,i.AH[r].iX+i.AH[r].I*n[0])&&ZC.DQ(t,i.AH[r].iY,i.AH[r].iY+i.AH[r].F*n[1])&&(l=i.AH[r]);1l l}sm(e){1a t,i=1g;if(1w i.E.vf===ZC.1b[31]){1w e===ZC.1b[31]&&(e=!1),i.4A([["c1","LW"]]),i.o[ZC.1b[16]]&&1===i.o[ZC.1b[16]].1f&&1c!==ZC.1d(t=i.o[ZC.1b[16]][0].c1)&&(i.LW=t),""===i.LW&&(i.LW="8T"),i.LW=5P(i.LW).1F("1o","ch");1j(1a a=i.LW.2p(/\\s+|;|,/),n=0,l=a.1f;n<l;n++)i.B9.rY(a[n]);i.B9.kT(i.MV),ZC.2L&&i.B9.rY("2L"),e||(i.E.vf=!0)}}1q(e){1a t,i,a,n,l,r,o=1g;o.NN="x",o.E.4G=ZC.GT(3h.5b(o.o)),ZC.2E(o.o.vC,o.O6),1===o.o[ZC.1b[16]].1f&&ZC.2E(o.o[ZC.1b[16]][0].vC,o.O6);1a s=o.FF();if(1c!==ZC.1d(e)&&(s[ZC.1b[3]]=e),ZC.AN.C2("Ks",o,s),o.MK="1q",o.R1[1]=o.R1[0],o.R1[0]="",o.R1[0]+=o.I+":"+o.F+":",1c!==ZC.1d(t=o.o[ZC.1b[16]]))1j(o.R1[0]+=t.1f+":",n=0;n<t.1f;n++)o.R1[0]+=(t[n].1J||"")+":",o.R1[0]+=(t[n].x||"")+":"+(t[n].y||"")+":"+(t[n][ZC.1b[19]]||"")+":"+(t[n][ZC.1b[20]]||"")+":",1c!==ZC.1d(t[n][ZC.1b[11]])&&(o.R1[0]+=t[n][ZC.1b[11]].1f+":");if(ZC.AK(o.K+"-46-c")&&o.3k(e,!1),1w mk!==ZC.1b[31]&&(o.HB=1m mk(o)),1c===ZC.1d(e)){o.sm(),o.B9.B9["2s-9q"]&&(1o.a3=o.B9.B9["2s-9q"]);1a C=!!o.o.5k;if(o.B9.2y(o.o,"6J",!1,!0),o.4A([["5k","DD"],["v8","QQ"]]),o.o[ZC.1b[16]]&&1===o.o[ZC.1b[16]].1f&&(i=o.o[ZC.1b[16]][0],1c!==ZC.1d(t=i.5k)&&(o.DD=t),1c!==ZC.1d(t=i.v8)&&(o.QQ=t)),ZC.6z(o.QQ),ZC.2E(o.B9.B9.ak.5k,o.DD,!1,!0,!0),o.DD.aj)1j(n=o.DD.aj.1f-1;n>=0;n--)1j(r=0;r<n;r++)if(o.DD.aj[n].id===o.DD.aj[r].id){o.DD.aj.6u(n,1);1p}if(C||4s o.o.5k,ZC.6z(o.DD),o.N={},1c!==ZC.1d(t=o.o.1I))1j(a in t)"3R"!==a&&(o.N[a]=t[a]);if(o.o[ZC.1b[16]]&&1===o.o[ZC.1b[16]].1f&&(i=o.o[ZC.1b[16]][0],1c!==ZC.1d(t=i.1I)))1j(a in t)"3R"!==a&&(o.N[a]=t[a]);ZC.6z(o.N),o.O6[ZC.1b[16]]&&1E.1q(),o.4A([["iQ","dN"],["mN-iQ","dN"],["3w","NN"],["h-8A","ni","i"],["v-8A","na","i"],["7M","KE","b"],["4n-7Q","lf","b"]]),o.o[ZC.1b[16]]&&1===o.o[ZC.1b[16]].1f&&(i=o.o[ZC.1b[16]][0],1c!==ZC.1d(t=i.iQ)&&(o.dN=t),1c!==ZC.1d(t=i["mN-iQ"])&&(o.dN=t),1c!==ZC.1d(t=i.7M)&&(o.KE=ZC.2t(t)),1c!==ZC.1d(t=i["4n-7Q"])&&(o.lf=ZC.2t(t))),1c!==ZC.1d(t=1o.fR[o.dN])&&(ZC.HF=t),o.AH=[]}1a A=0,Z=0,c=o.I,p=o.F;if(1c!==ZC.1d(o.o.2w)||1c!==ZC.1d(o.o[ZC.1b[57]])||1c!==ZC.1d(o.o[ZC.1b[58]])||1c!==ZC.1d(o.o[ZC.1b[59]])||1c!==ZC.1d(o.o[ZC.1b[60]])){1a u=1m I4(o);u.1C(o.o,!1,!1),u.1q(),A=u.DY,Z=u.E2,c=c-u.DY-u.E1,p=p-u.E2-u.DM}1a h,1b,d=o.OH(e);if(1c!==ZC.1d(h=o.o[ZC.1b[16]])){1a f=0;1j(n=0,l=h.1f;n<l;n++)1b=0,1c!==ZC.1d(t=h[n].3g)&&(1b=ZC.1k(t)),f+=o.LE===1b?1:0;1a g=ZC.AO.ga(o.NN,f),B=ZC.1k(g[0]),v=ZC.1k(g[1]),E=0,b=0,m=0;1j(n=0,l=h.1f;n<l;n++){if(1b=0,1c===d&&1c!==ZC.1d(t=h[n].3g)&&(1b=ZC.1k(t)),(1c===d||m===d.L)&&o.LE===1b){if(o.AH[m]=o.v5(h[n].1J||"1c",n),o.AH[m].OG=o.AH[m].AF+"3a",o.B9.2y(o.AH[m].o,"3a"),o.B9.2y(o.AH[m].o,h[n].1J||"1c"),o.AH[m].1C(o.o.3a),o.AH[m].1C(h[n]),o.AH[m].L=m,1c===ZC.1d(h[m].id)||""===h[m].id?o.AH[m].K=o.K+"-3a-id"+m:o.AH[m].K=o.K+"-3a-"+h[n].id,h.1f>0){1j(1a K=0,D=0,F=ZC.1k((c-(v+1)*o.ni)/v),I=ZC.1k((p-(B+1)*o.na)/B),x=["x","y",ZC.1b[19],ZC.1b[20]],X=0;X<x.1f;X++)1c!==ZC.1d(o.E["3a-"+m+"-"+x[X]])&&(4s o.E["3a-"+m+"-"+x[X]],4s o.AH[m].o[x[X]]);1c===ZC.1d(o.AH[m].o.x)?o.E["3a-"+m+"-x"]=o.AH[m].o.x=ZC.1k(o.iX+(E+1)*o.ni+E*F)+A:(K=ZC.IL(o.AH[m].o.x))<1&&(K=ZC.1k(o.I*K)),1c===ZC.1d(o.AH[m].o.y)?o.E["3a-"+m+"-y"]=o.AH[m].o.y=ZC.1k(o.iY+(b+1)*o.na+b*I)+Z:(D=ZC.IL(o.AH[m].o.y))<1&&(D=ZC.1k(o.F*D)),1c===ZC.1d(o.AH[m].o[ZC.1b[19]])&&(o.E["3a-"+m+"-1s"]=o.AH[m].o[ZC.1b[19]]=1A.1X(F,F-K)),1c===ZC.1d(o.AH[m].o[ZC.1b[20]])&&(o.E["3a-"+m+"-1M"]=o.AH[m].o[ZC.1b[20]]=1A.1X(I,I-D))}o.AH[m].1q()}o.LE===1b&&(m++,++E===v&&(b++,E=0))}}1c===ZC.1d(e)&&1c!==ZC.1d(t=o.o.cI)&&(o.HT={1J:"lL",ea:10},ZC.2E(t,o.HT))}iV(e,t){t=t||"";1a i=[];1j(1a a in e)if("4d"==1w e[a])1j(1a n=1g.iV(e[a],t+"."+a),l=0,r=n.1f;l<r;l++)-1===ZC.AT(i,n[l])&&i.1h(n[l]);1u{1a o=t+"."+a;"1W-4i"!==a&&"uZ"!==a||""===e[a]||"zc."===e[a].2x(0,3)||(!ZC.6Q&&ZC.jc&&"uP"===e[a].2x(0,8)&&(e[a]=ZC.jc[e[a].2x(8)]),"!"===e[a].gr(0)&&(e[a]=e[a].2x(1),1g.E["bt-8z"]=1g.E["bt-8z"]||[],1g.E["bt-8z"].1h(e[a])),i.1h([e[a],"4i"])),"5a"===a&&""!==e[a]&&"zc."!==e[a].2x(0,3)&&-1!==o.1L(".8z.")&&(!ZC.6Q&&ZC.jc&&"uP"===e[a].2x(0,8)&&(e[a]=ZC.jc[e[a].2x(8)]),"!"===e[a].gr(0)&&(e[a]=e[a].2x(1),1g.E["bt-8z"]=1g.E["bt-8z"]||[],1g.E["bt-8z"].1h(e[a])),i.1h([e[a],"4i"])),".6O"===o.5y(o.1f-4,4)&&"3e"==1w e[a]&&i.1h([e[a],"6O"]),"3R"===a&&(-1!==o.1L(".1I.")&&i.1h([e[a],"2O"]),-1!==o.1L(".6O.")&&i.1h([e[a],"6O"]),-1!==o.1L(".1Q.")&&i.1h([e[a],"4i"])),"3e"==1w e[a]&&"3R"!==a&&(0===e[a].1L("3R:")&&a===ZC.1b[5]||0===e[a].1L("7y:"))&&-1===ZC.AT(["5F","1D","M0"],ZC.EC(a))&&i.1h([e[a],"1T"])}1l i}OR(JC){1a s=1g;if(1o.3I.rM){1a J5=s.iV(s.o).4z(s.iV(s.MV));if(0!==J5.1f){1a UZ=0,LQ={},rA=0;s.E["bt-8z"]=s.E["bt-8z"]||[];1a C4=2v.fb(1n(){if(UZ>=J5.1f){1j(1a e in 2v.9X(C4),s.qC(s.o),LQ)if(0!==e.1L("1T:")&&-1===ZC.AT(s.E["bt-8z"],e))4O{1a t=2g.4W("3c");t.1s=LQ[e].1s,t.1M=LQ[e].1M,t.9k("2d").cv(LQ[e],0,0);1a i=t.k9("4i/9I");LQ[e].iD=1c,LQ[e].jv=1c,LQ[e].5a=i,ZC.4f.1T[e]=LQ[e]}4M(a){}2v.5I(1n(){1o.YD[s.K]&&JC()},1)}1u sf(++rA)},20);sf(rA)}1u 1o.YD[s.K]&&JC()}1u 1o.YD[s.K]&&JC();1n sf(i){if(!(i>=J5.1f)){1a F0,ML,KI=J5[i][0],jH=J5[i][1];if("3R:"===KI.2x(0,4)){1a R5=KI.2x(4);s.R4["3R:"+R5]="[]";4O{F0=["eU-3e"===s.N6?"eV="+1A.d6():""].2M("&"),ZC.A4.a9({1J:"bY",3R:R5,ej:1n(e){s.S9.1T||"79-eX"!==s.N6||e.cC(ZC.1b[45],"cB, 8I cr dU 6R:6R:6R dY")},1T:F0,4J:1n(e,t,i,a){1l s.NH({8C:ZC.1b[63],aN:"c5 cX g3 ("+a+")"},ZC.1b[64]),!1},aD:1n(e,t,i,a){s.R4["3R:"+a]=e,UZ++}})}4M(JA){1l s.NH(JA,ZC.1b[64]),!1}}1u if("7y:"===KI.2x(0,11))if("zc.Mu.2y"===s.R4[KI]){s.R4[KI]="[]";1a DW=ZC.AN.p2(KI.2x(11)),O={id:s.K,pa:KI,5H:1n(e){s.R4[KI]=e,UZ++}},vA=DW[0];O.8U=DW[1];4O{1a jT=7u(vA).4x(s,O);1c!==ZC.1d(jT)&&jT&&(s.R4[KI]=jT,UZ++)}4M(JA){1l s.NH(JA,"p3 1T 6J"),!1}}1u UZ++;1u"4i"===jH?(LQ[KI]=1m cz,LQ[KI].xn="xc",LQ[KI].iD=1n(){UZ++},LQ[KI].jv=1n(){1a e=ZC.2t(s.o.Lg);if(ZC.gj.1h(KI),e)1l s.NH({8C:ZC.1b[63],aN:"c5 cX g3 ("+1g.5a+")"},"c5 6J (4i)"),!1;1g.5a=ZC.jf,UZ++},LQ[KI].5a=KI,ZC.4f.1T[KI]=LQ[KI]):"2O"===jH?(F0=["eU-3e"===s.N6?"eV="+1A.d6():""].2M("&"),ZC.A4.a9({1J:"bY",3R:KI,ej:1n(e){s.S9.2O||"79-eX"!==s.N6||e.cC(ZC.1b[45],"cB, 8I cr dU 6R:6R:6R dY")},1T:F0,4J:1n(e,t,i){1l s.NH(i,"c5 6J"),!1},aD:1n(e){1j(1a t={},i=e.m2(/[a-zA-Z0-9\\.\\#\\-](.+?)\\{((.|\\s)+?)\\}/gi),a=0,n=i.1f;a<n;a++){ML=i[a].2p("{");1a l=ZC.GT(ML[0]),r=l.2p(/\\s+/);if(1===r.1f||2===r.1f&&ZC.GT(r[0])==="#"+s.K){t[l=ZC.GT(1===r.1f?r[0]:r[1])]||(t[l]={});1j(1a o=0,C=(ML=ML[1].1F("}","").2p(";")).1f;o<C;o++){1a A=ML[o].2p(":");2===A.1f&&(t[l][ZC.GT(A[0])]=""+ZC.GT(A[1]))}}}1c!==ZC.1d(s.o.1I)?ZC.2E(t,s.o.1I):1c!==ZC.1d(s.o[ZC.1b[16]])&&1===s.o[ZC.1b[16]].1f&&s.o[ZC.1b[16]][0].1I&&ZC.2E(t,s.o[ZC.1b[16]][0].1I),UZ++}})):"6O"===jH&&(F0=["eU-3e"===s.N6?"eV="+1A.d6():""].2M("&"),ZC.A4.a9({1J:"bY",3R:KI,ej:1n(e){s.S9.6O||"79-eX"!==s.N6||e.cC(ZC.1b[45],"cB, 8I cr dU 6R:6R:6R dY")},1T:F0,4J:1n(e,t,i){1l s.NH(i,"c5 6J"),!1},aD:1n(e,t,i,a){s.jx[a]=e,UZ++}}))}}}qC(BZ){1a s=1g;1j(1a p in BZ)if("4d"==1w BZ[p])s.qC(BZ[p]);1u 1j(1a F0 in s.R4)F0===BZ[p]&&(BZ[p]=7u(s.R4[F0]))}bW(e){1a t,i,a,n,l=1g;if(l.E.bW=!0,l.E.wh=l.I+"/"+l.F,l.o[ZC.1b[16]])if(l.jA)1o.3p(l.K,"a4"),1o.ba(1o.aU[l.K]);1u if(1w e===ZC.1b[31]&&(e=!1),ZC.AN.C2("bW",l,l.FF()),e=!1);1u{1j(i=0;i<l.AH.1f;i++)1j(n=0;n<l.AH[i].AY.A7.1f;n++)l.E["g-"+i+"-p-"+n+".2h"]=l.AH[i].E["1B"+n+".2h"];1j(i=0;i<l.AH.1f;i++)l.E["g-"+l.AH[i].L+"-aL"]=3h.5b(l.AH[i].CW);1j(1a r=l.o[ZC.1b[16]],o=[ZC.1b[10],"5U"],s=0,C=r.1f;s<C;s++)1j(1a A=0;A<o.1f;A++){1a Z=o[A],c=[];if(1c!==ZC.1d(r[s][Z])){1j(i=0,a=r[s][Z].1f;i<a;i++)r[s][Z][i].eH||c.1h(r[s][Z][i]);r[s][Z]=c}}if(l.VS(l.o),l.o=ZC.AN.C2("eW",l,l.FF(),l.o),ZC.A4("#"+l.K+"-1v").1s(l.I).1M(l.F),l.E["6o-7t"]&&(ZC.A4("#"+l.K+"-fj").1s(l.I).1M(l.F),4s l.E["6o-7t"]),1===(t=ZC.A4("#"+l.K+"-5X")).1f&&t.1s(l.I).1M(l.F).2O("3u","5t(80,"+(l.I-1)+"px,"+(l.F-1)+"px,80)"),"2F"===l.AB&&(l.KH.4m(ZC.1b[19],l.I),l.KH.4m(ZC.1b[20],l.F)),"3c"===l.AB||"3L"===l.AB){1j(ZC.A4("#"+l.K+"-46").1s(l.I).1M(l.F),i=0,a=l.AH.1f;i<a;i++)ZC.A4("#"+l.AH[i].K+"-2N").3q();ZC.A4("#"+l.K+"-46>3E").1s(l.I).1M(l.F)}1j("3c"===l.AB&&((t=ZC.AK(l.K+"-46-c"))&&(t.1s=l.I,t.1M=l.F),(t=ZC.AK(l.K+"-46-c-1v"))&&(t.1s=l.I,t.1M=l.F),ZC.A4("#"+l.K+"-2J-2c 3c, #"+l.K+"-2J-1v 3c, #"+l.K+"-bd 3c").5f(1n(){1g.1s=l.I,1g.1M=l.F})),"3L"===l.AB&&ZC.A4("#"+l.K+"-2J-2c 3E, #"+l.K+"-2J-1v 3E, #"+l.K+"-bd 3E").5f(1n(){1g.1I.1s=l.I+"px",1g.1I.1M=l.F+"px"}),l.1q(),i=0,a=l.AH.1f;i<a;i++)l.AH[i].UQ&&l.AH[i].UQ(),l.AH[i].HK=!0,l.AH[i].qT=l.AH[i].GB,l.AH[i].GB=!1;1j(l.1t(),i=0;i<l.AH.1f;i++)1j(n=0;n<l.AH[i].AY.A7.1f;n++)4s l.E["g-"+i+"-p-"+n+".2h"];1j(i=0;i<l.AH.1f;i++)l.AH[i].HK=!1,l.AH[i].GB=l.AH[i].qT,4s l.AH[i].qT,4s l.E["g-"+l.AH[i].L+"-aL"]}}oX(){1a e=1g.o[ZC.1b[16]],t=[ZC.1b[10],"5U"];if(e)1j(1a i=0,a=e.1f;i<a;i++)1j(1a n=0;n<t.1f;n++){1a l=t[n],r=[];if(1c!==ZC.1d(e[i][l])){1j(1a o=0,s=e[i][l].1f;o<s;o++)e[i][l][o].eH||r.1h(e[i][l][o]);e[i][l]=r}}}3k(e,t,i){1a a=1g;1j(1a n in a.E)-1!==n.1L("-1H-")&&-1!==n.1L("-cS")&&4s a.E[n];if(1w t===ZC.1b[31]&&(t=!0),ZC.A4("."+a.K+"-4X-1N").4k("3J",a.rB),ZC.A4("."+a.K+"-4X-1N").3q(),1c!==ZC.1d(e))a.OH(e).3k();1u{t&&a.oX(),a.t5();1j(1a l=0,r=a.AH.1f;l<r;l++)"3L"===a.AB&&i?a.AH[l].a4():a.AH[l].3k();1a o,s,C;1c!==(o=ZC.AK(a.K+"-46-c"))&&ZC.P.IM(o,a.AB,a.iX,a.iY,a.I,a.F),1c!==(C=ZC.AK(a.K+"-46-c-1v"))&&ZC.P.IM(C,a.AB,a.iX,a.iY,a.I,a.F),1c!==(s=ZC.AK(a.K+"-7U-c"))&&(ZC.P.IM(s,a.AB,a.iX,a.iY,a.I,a.F),ZC.A4("#"+a.K+"-2B-1N").3q()),a.A8&&a.A8.5e(),ZC.A4("."+a.K+"-2B-1P").3q(),ZC.P.ET([a.K+"-2B-7U",a.K+"-2B"]),ZC.P.ET(a.K+"-fS-1D"),1c!==a.IB&&ZC.P.ET([a.K+"-4X-2R",a.K+"-4X-cb-2R",a.K+"-4X-dT-2R",a.K+"-4X-5c",a.K+"-4X-cb-5c",a.K+"-4X-dT-5c"])}}oK(){1a e,t,i,a=1g,n=a.I+"/"+a.F,l=ZC.P.I1({id:a.K+"-fj",2K:"jO",p:ZC.AK(a.K)});ZC.P.PQ(l,{1M:"100%"===a.MZ?a.MZ:a.F+"px",1s:"100%"===a.FX?a.FX:a.I+"px"});1a r=ZC.P.I1({2o:"zc-aQ zc-1v",wh:n,id:a.K+"-1v",9J:"97",2K:"4D",p:l});1R(1o.Ho&&(r.1I.1K="-0.7Z",r.1I.1v="-0.7Z"),a.AB){1i"2F":a.KH=ZC.P.F6("2F",ZC.1b[36]),a.KH.a8&&a.KH.a8(1c,"lj",ZC.1b[37]),ZC.P.G5(a.KH,{ad:"1.1",id:a.K+"-2F","1O":"zc-2F",1s:a.I,1M:a.F,3M:"8K"}),r.3b(a.KH);1a o=ZC.P.F6("j4",ZC.1b[36]);if(o.id=a.K+"-j4",a.KH.3b(o),ZC.P.K3({2o:"zc-aQ zc-46",wh:n,id:a.K+"-46",p:a.KH},a.AB),a.il=[],a.o[ZC.1b[16]])1j(e=0,t=a.o[ZC.1b[16]].1f;e<t;e++)if((i=a.o[ZC.1b[16]][e].Hy)&&i.1f)1j(1a s=0;s<i.1f;s++)if("2O"===i[s].1J&&i[s].3R){1a C=ZC.P.F6("Ia",ZC.1b[36]);ZC.P.G5(C,{eo:"79://8x.w3.eq/t4/Hn",7B:i[s].3R,aQ:"Hl",1J:"1D/2O"}),a.il.1h(i[s].3R),o.3b(C)}1p;1i"3L":1i"3c":ZC.P.I1({2o:"zc-aQ zc-46",wh:n,id:a.K+"-46",p:r})}}tV(){}1t(){1a e=1g;e.MK="1t";1a t=e.I+"/"+e.F;if(e.Y2(),1c===ZC.AK(e.K+"-1v")){e.oK();1a i=ZC.AK(e.K+"-46");if(e.O6[ZC.1b[16]]&&ZC.P.HI({2o:"zc-3l",id:e.K+"-46-c",wh:t,p:i},e.AB),e.H.2P())ZC.P.HI({2o:"zc-3l",id:e.K+"-46-c-1v",wh:t,p:i},e.AB),ZC.P.HI({2o:ZC.1b[24],id:e.K+ZC.1b[15],p:i,wh:t,3M:"2a"},e.AB);1u{ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2J-2c",p:i},e.AB),1o.3I.kj&&ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2J-4Y",p:i},e.AB),ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-aS",p:i},e.AB),1o.3I.kj||ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2J-4Y",p:i},e.AB),ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2J-1v",p:i},e.AB),ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2N",p:i},e.AB),ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2J-5p",p:i},e.AB),ZC.P.K3({2o:"zc-3l zc-1D",wh:t,id:e.K+"-1D",p:i},e.AB);1a a="1V",n="bd";("1V"===e.o["1v-6v"]||e.o[ZC.1b[16]]&&1===e.o[ZC.1b[16]].1f&&"1V"===e.o[ZC.1b[16]][0]["1v-6v"])&&(a="bd",n="1V"),ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-"+a,p:i},e.AB),ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-"+n,p:i},e.AB);1a l=ZC.AK(e.K+"-bd");e.O6["8N"]&&ZC.P.HI({2o:ZC.1b[24],id:e.K+"-8N-c",wh:t,p:l},e.AB),e.O6.2i&&ZC.P.HI({2o:ZC.1b[24]+" zc-2i-c",id:e.K+"-2i-c",wh:t,p:l},e.AB),(ZC.A4.6I.jP&&ZC.1k(ZC.A4.6I.ad)<=9.5||ZC.2L||"ch"!==e.LW)&&ZC.P.HI({2o:ZC.1b[24],id:e.K+"-7U-c",wh:t,p:l},e.AB),ZC.P.HI({2o:ZC.1b[24],id:e.K+ZC.1b[15],p:l,wh:t,3M:"2a"},e.AB),ZC.P.HI({2o:ZC.1b[24],id:e.K+"-ls-c",p:l,wh:t,3M:"2a"},e.AB),ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-1D-1v",p:i},e.AB)}if(!1o.3I.bI){1a r=2g.4W("5X");if(r.id=e.K+"-5X",r.82="zc-5X",r.4m("sK","#"+e.K+"-3f"),r.4m("GW",""),ZC.P.PQ(r,{2K:"4D",gq:0,1s:e.I+2*ZC.3B+"px",1M:e.F+2*ZC.3B+"px",1K:-ZC.3B+"px",1v:-ZC.3B+"px",9S:0,3n:0,jp:"2n(3n=0)",3u:"5t("+(ZC.3B+1)+"px,"+(e.I+ZC.3B-1)+"px,"+(e.F+ZC.3B-1)+"px,"+(ZC.3B+1)+"px)"}),r.5a=(ZC.6Q?"//":"")+ZC.jf,ZC.AK(e.K+"-1v").3b(r),!e.H.2P()){1a o=2g.4W("3f");o.82="zc-3f",ZC.P.G5(o,{id:e.K+"-3f",8C:e.K+"-3f"}),ZC.AK(e.K+"-1v").3b(o)}}}e.Z=ZC.AK(e.K+"-46-c"),1E.1t();1a s,C,A=!1,Z=!1;1j(s=0,C=e.AH.1f;s<C;s++){e.AH[s].1t(),(1c!==e.AH[s].CT&&e.AH[s].CT.AL||1c!==e.AH[s].H8&&e.AH[s].H8.AL)&&(A=!0);1j(1a c=0;c<e.AH[s].BL.1f;c++)if(e.AH[s].BL[c].H7){Z=!0;1p}}if(e.G1){1j(1a p in e.G1)ZC.AK(p).3b(e.G1[p]);e.G1=1c}if(e.E[ZC.1b[53]]=1c,e.UA||e.V2||(e.ZN?e.sx():e.ZN=2v.fb(1n(){e.p4(),e.UA||e.V2?(2v.9X(e.ZN),ZC.P.ET(e.K+"-fS-1D")):ZC.AK(e.K+"-fS-1D")||e.sx()},qf)),-1===ZC.AT(e.KY,ZC.1b[38])&&e.ql(),-1===ZC.AT(e.KY,ZC.1b[41])?(1w rR!==ZC.1b[31]&&(e.A8=1m rR(e)),Z&&e.HB.3t(),A&&1w KB!==ZC.1b[31]&&(e.D4=1m KB(e),e.D4.3t()),ZC.2L&&(e.hV=1n(t){ZC.ef={xy:ZC.P.MJ(t),ts:(1m a2).bH()},t.2X.id===e.K+"-2B-1N"?(ZC.3o=!1,e.A8&&e.A8.5e(),1o.Z8(t)):(1c===e.DD||1c===ZC.1d(e.DD["3g-1Z"])||e.DD["3g-1Z"]||t.6X(),ZC.3o=!1,e.9p(),e.A8&&e.A8.5e(),e.W8(t))},e.P7=1n(){2v.ik(e.uK),e.i9=1c},e.nF=1n(t){if(ZC.ef){1a i=ZC.P.MJ(t);if(ZC.2l(i[0]-ZC.ef.xy[0])>100&&(1m a2).bH()-ZC.ef.ts<5L){1a a=e.FF();a.bi=i[0]>ZC.ef.xy[0]?"2z":"1K",ZC.AN.C2("ef",e,a)}ZC.ef=1c}e.ei||ZC.3o||1o.SO(t),e.P7(t)},ZC.A4("#"+e.K+"-5X").3t("4I",e.hV).3t("6l",e.P7).3t("5T",e.nF),ZC.A4("#"+e.K+"-2B-1N").4g("4I",e.hV)),e.hY=1n(t){1a i=e.FF();i.ev=t,ZC.AN.C2("av",e,i)},ZC.A4("#"+e.K+"-5X").3t("av",e.hY),ZC.A4("#"+e.K+"-3f").3t("av",e.hY),e.pC=1n(t){27===t.Sq&&e.R0&&(e.kh||e.i3())},ZC.A4(2g).3t("wx",e.pC),e.i3=1n(){ZC.A4("#"+e.K+ZC.1b[66]).4k("3J",e.i3),ZC.kV=1c,ZC.P.ET(e.K+"-1T-6s"),e.a4(),1o.dF&&ZC.AK(1o.dF)&&(ZC.AK(1o.dF).1I.3M="2a")},ZC.A4("#"+e.K+ZC.1b[66]).4g("3J",e.i3)):ZC.2L&&(e.nM=1n(e){1l e.6X(),1o.SO(e),!1},ZC.A4("#"+e.K+"-5X").3t("4I",e.nM)),1c!==e.HT){1a u=ZC.1k(e.HT.ea);u=u>=50?u:5L*u,2v.5I(1n(){e.MO(),e.2y()},u)}e.MK="",ZC.TS[e.K]=(1m a2).bH()-ZC.TS[e.K],e.E["cY-aE"]&&(ZC.AN.C2("aE",e,e.FF()),e.E["cY-aE"]=1c),e.E["cY-2y"]&&(ZC.AN.C2("2y",e,e.FF()),e.E["cY-2y"]=1c)}bV(e){1j(1a t=1g,i=0;i<t.AH.1f;i++)t.AH[i].BI&&t.AH[i].BI.rg(e)}oG(){1a e=1g,t=2g.4W("3c");t.1s=e.I,t.1M=e.F,t.4m("1O","");1j(1a i=0;i<e.AH.1f;i++)e.AH[i].BI&&e.AH[i].BI.rg(!0,t);1l t}Sr(){1c===ZC.1d(ZC.sC)&&(ZC.sC=1n(e){1o.3p(e.id,"xg")}),1o.3p(1g.K,"xf",{1D:"uf hT","1n":"ZC.sC()",6t:100})}sx(){1a e,t=1g,i={},a=t.DD.ed;t.B9.2y(i,"6J.5k.ed"),a&&ZC.2E(a,i),1===t.o[ZC.1b[16]].1f&&t.o[ZC.1b[16]][0].5k&&(e=t.o[ZC.1b[16]][0].5k.ed)&&ZC.2E(e,i);1a n=ZC.5l(ZC.1k(i.1J||1),1,2),l=i.2K||"br";-1===ZC.AT(["tl","tr","br","bl"],l)&&(l="br"),t.Rn=l;1a r,o=32,s=146,C=0,A=1;ZC.6Q&&(o=30,s=168,C=8,A=1),s=126,o=22;1a Z={8T:["#Rw","#U9"],aW:["#xA","#Ur"]},c=Z.8T;if(1o.lK&&(c="8T"===t.LW||"ch"===t.LW?Z.8T:Z.aW),1===t.o[ZC.1b[16]].1f)if(t.o[ZC.1b[16]][0][ZC.1b[0]]){1a p=ZC.AN.G7(t.o[ZC.1b[16]][0][ZC.1b[0]]);7===p.1f&&(c=ZC.AN.q7(p,Z.aW,Z.8T))}1u if(t.o[ZC.1b[16]][0].c1){1a u=t.o[ZC.1b[16]][0].c1;c="8T"===u||"ch"===u?Z.8T:Z.aW}1a h,1b,d=1w 2v!==ZC.1b[31]&&2v.8d?2v.8d.xz:"",f=1w 2v!==ZC.1b[31]&&2v.8d?2v.8d.x8:"";1R(r=\'<a 5D="p3 Ty by hT" 1I="1r:\'+c[0]+\' !7x;2s-2e:xC !7x;3M:8K !7x;3n:1 !7x; 1D-bZ:2a;" 7B="79://8x.1o.bs/?xz=\'+d+"&x8="+f+\'">Tj by <7J 1I="1r:\'+c[1]+\'; 2s-7i:6A;">hT</7J></a>\',l){1i"br":h=t.F-o,1b=t.I-s;1p;1i"bl":h=t.F-o,1b=6;1p;1i"tr":h=2,1b=t.I-s;1p;1i"tl":h=2,1b=6}1c!==ZC.1d(e=ZC.AK(t.K+"-1v"))&&ZC.P.I1({2o:ZC.6Q?"-6Q":"",p:e,id:t.K+"-fS-1D",tl:h+"/"+1b,wh:s+"/"+(o-C),1r:ZC.6Q?1===n?"#lA":"#2T":"",3x:C,3n:A,2K:"4D",4S:"8s",6W:1o.a3,4e:r},t.AB)}t5(){1a e=1g;ZC.A4("#"+e.K+"-2B").4k(ZC.1b[47],e.TW),ZC.A4("."+e.K+"-2B-1P").4k(ZC.1b[47],e.TW),ZC.A4("."+e.K+"-2B-1P").4k("3J 5T",e.rc).4k("76",e.qV).4k("7F",e.ss),e.E["2B-1P-i1"]=!1,1c!==e.HB&&e.HB.3m(),1c!==e.D4&&e.D4.3m(),ZC.2L&&(ZC.A4("#"+e.K+"-5X").3m("4I",e.hV).3m("6l",e.P7).3m("5T",e.nF),ZC.A4("#"+e.K+"-2B-1N").4k("4I",e.hV),ZC.A4("#"+e.K+"-5X").3m("4I",e.nM)),ZC.A4("#"+e.K+"-5X").3m("av",e.hY),ZC.A4("#"+e.K+"-3f").3m("av",e.hY),ZC.A4(2g).3m("wx",e.pC),ZC.A4("#"+e.K+ZC.1b[66]).4k("3J",e.i3)}UE(e,t,i){1w i===ZC.1b[31]&&(i=!1);1a a=ZC.AK("zc-2B-"+(i?"eh":"1P")+"-"+e);a&&(a.1I.3M=t?"8K":"2a")}ql(LN,ev){if(!1o.3I.wX){1a s=1g,G,i,A5,j,JD;1w LN===ZC.1b[31]&&(LN=-1);1a DD={};ZC.2E(s.DD,DD),-1!==LN&&s.o[ZC.1b[16]][LN]&&ZC.2E(s.o[ZC.1b[16]][LN].5k,DD,1c,1c,!0),ZC.A4("#"+s.K+"-2B").3q();1a S1=[];1j(1w ZC.AM===ZC.1b[31]&&S1.1h({id:"3D",3Z:"2a"},{id:"uw",3Z:"2a"},{id:"uJ",3Z:"2a"}),i=DD.aj.1f-1;i>0;i--)1j(1a x7=DD.aj[i].id,ii=i-1;ii>=0;ii--)DD.aj[ii].id===x7&&DD.aj.6u(ii,1);if(1c!==ZC.1d(G=DD.aj))1j(i=0,A5=G.1f;i<A5;i++){1a NL=!1;1j(j=0,JD=S1.1f;j<JD;j++)S1[j].id===G[i].id&&(NL=!0);NL||S1.1h(G[i])}1a JK=DD["6k-2B"],OP=DD["6k-2B[2L]"];1j(i=0,A5=S1.1f;i<A5;i++)1c!==ZC.1d(S1[i]["1n"])&&(1c===ZC.1d(JK)&&(JK={}),1c===ZC.1d(JK["5G-2C"])&&(JK["5G-2C"]=[]),JK["5G-2C"].1h(S1[i]));JK["5G-2C"]&&JK["5G-2C"].3X(1n(e,t){1l ZC.1k(e.6t||"0")>ZC.1k(t.6t||"0")}),s.N4=1m DP(s);1a kU=s.LW.2p(/\\s+|;|,/),DX,LM,UR,tn,GR;1j(i=0,A5=kU.1f;i<A5;i++)if(s.B9.O3[kU[i]]){1a iK=s.B9.O3[kU[i]].ak||{};iK&&iK.5k&&iK.5k.x3&&ZC.2E(iK.5k.x3,s.N4.o)}if(s.B9.2y(s.N4.o,ZC.1b[65]),JK&&s.N4.1C(JK),ZC.2L&&(s.B9.2y(s.N4.o,ZC.1b[65]+"[2L]"),OP&&s.N4.1C(OP)),s.N4.XB=!0,s.N4.1q(),s.N4.AL||!s.kQ){if(!ZC.AK(s.K+"-2B-1N")){1a oH=!!(s.DD&&s.DD["6k-2B"]&&s.DD["6k-2B"].7O)&&ZC.1d(s.DD["6k-2B"].7O.2h);if(oH||"ch"!==s.LW&&oH){GR=1m DP(s),s.B9.2y(GR.o,ZC.1b[65]+".7O"),JK&&ZC.1d(1c!==(G=JK.7O))&&GR.1C(G),ZC.2L&&(s.B9.2y(GR.o,ZC.1b[65]+"[2L].7O"),OP&&1c!==ZC.1d(G=OP.7O)&&GR.1C(G)),ZC.2E(s.N4.o,JK);1a kL="1K"===JK.2K||"ch"===s.LW;if(GR.K=s.K+"-2B-7U",GR.IP=ZC.AK(s.K+"-bd"),GR.Z=GR.C6=ZC.AK(s.K+"-7U-c"),GR.XB=!0,GR.1q(),GR.AL){GR.1t();1a DA=ZC.A4("#"+s.H.K+"-1v");if(""===GR.AP){1a N9=1m DS(s);if(N9.CX=!1,s.B9.2y(N9.o,ZC.1b[65]+".aP"),JK&&1c!==ZC.1d(G=JK.aP)&&N9.1C(G),ZC.2L&&(s.B9.2y(N9.o,ZC.1b[65]+"[2L].aP"),OP&&1c!==ZC.1d(G=OP.aP)&&N9.1C(G)),N9.K=s.K+"-2B-7U-aP",N9.IP=ZC.AK(s.K+"-bd"),N9.Z=ZC.AK(s.K+"-7U-c"),N9.iX=kL?GR.iX+GR.I/2:DA.1s()-(GR.iX+GR.I/2),N9.iY=GR.iY+GR.F/2,N9.AI=ZC.CV(GR.I,GR.F)/4.5,N9.1q(),N9.1t(),"oJ"!==N9.DN){1a QP=1m DS(s);QP.1S(GR),QP.K=s.K+"-2B-7U-aP-Pt",QP.IP=ZC.AK(s.K+"-bd"),QP.Z=ZC.AK(s.K+"-7U-c"),QP.DN="3A",QP.AI=ZC.CV(GR.I,GR.F)/7,QP.1q(),QP.iX=kL?GR.iX+GR.I/2:DA.1s()-(GR.iX+GR.I/2),QP.iY=GR.iY+GR.F/2,QP.1t()}}1a pr=kL?GR.iX:DA.1s()-(GR.iX+GR.I);ZC.AK(s.K+"-3f").4o+=ZC.P.GF("5t")+\'id="\'+s.K+"-2B-1N"+ZC.1b[30]+ZC.1k(pr+ZC.3B)+","+ZC.1k(GR.iY+ZC.3B)+","+ZC.1k(pr+GR.I+ZC.3B)+","+ZC.1k(GR.iY+GR.F+ZC.3B)+\'" />\'}}}DX=1m DP(s),s.B9.2y(DX.o,ZC.1b[65]+".1P"),JK&&1c!==ZC.1d(G=JK.1P)&&DX.1C(G),ZC.2L&&(s.B9.2y(DX.o,ZC.1b[65]+"[2L].1P"),OP&&1c!==ZC.1d(G=OP.1P)&&DX.1C(G)),DX.XB=!0,DX.1q(),LM=1m DP(s),LM.1S(DX),s.B9.2y(LM.o,ZC.1b[65]+".1P.2N-3Y"),JK&&1c!==ZC.1d(JK.1P)&&1c!==ZC.1d(G=JK.1P[ZC.1b[71]])&&LM.1C(G),ZC.2L&&(s.B9.2y(LM.o,ZC.1b[65]+"[2L].1P.2N-3Y"),OP&&1c!==ZC.1d(OP.1P)&&1c!==ZC.1d(G=OP.1P[ZC.1b[71]])&&LM.1C(G)),LM.XB=!0,LM.1q(),UR={},JK&&1c!==ZC.1d(JK.8O)&&(UR=JK.8O);1a JR=[],EA=1c;if(tn=1c!==ZC.1d(s.N4.o.lu)&&ZC.2t(s.N4.o.lu),ZC.2L&&(EA=FW("wS"),"2a"!==EA.3Z&&(1c===s.DD||1c===ZC.1d(s.DD["3g-1Z"])||s.DD["3g-1Z"]?JR.1h(GL("rX",EA.1D)):JR.1h(GL("rZ",EA.1D)),JR.1h(JB("Pn")))),EA=FW("wR"),"2a"!==EA.3Z&&(JR.1h(GL("eN",EA.1D)),JR.1h(JB("eN"))),1w ZC.wu!==ZC.1b[31]){EA=FW("Qu"),"2a"!==EA.3Z&&(EA=FW("Qd"),"2a"!==EA.3Z&&JR.1h(GL("n0",EA.1D?EA.1D:1c)),EA=FW("Nw"),"2a"!==EA.3Z&&JR.1h(GL("n0",EA.1D?EA.1D:1c)),EA=FW("uO"),"2a"!==EA.3Z&&JR.1h(GL("ru",EA.1D?EA.1D:1c)),JR.1h(JB("8q")));1a TV=["Ni","Nb","uM","sg","uA","uh","uq"],tK=0,qY=0;1j(i=0;i<TV.1f;i++)"uA"===TV[i]&&ZC.AK(s.K+"-1T-6s")&&(TV[i]="Rb"),EA=FW(TV[i]),"2a"!==EA.3Z&&(tK++,qY=i,JR.1h(GL(TV[i].b0(),EA.1D)));tK>0&&JR.1h(JB(TV[qY].b0()))}if(-1!==LN){1a H7=!1;1j(j=0,JD=s.AH[LN].BL.1f;j<JD;j++)s.AH[LN].BL[j].H7&&(H7=!0);if(H7&&1w mk!==ZC.1b[31]){1a hS=!1;EA=FW("My"),"2a"!==EA.3Z&&(JR.1h(GL("gv",EA.1D)),hS=!0),EA=FW("Hc"),"2a"!==EA.3Z&&(JR.1h(GL("g6",EA.1D)),hS=!0),EA=FW("Ip"),"2a"!==EA.3Z&&(JR.1h(GL("g9",EA.1D)),hS=!0),hS&&JR.1h(JB("3H"))}}1a i2=!1,qu=!1;if(-1!==LN&&(-1!==ZC.AT(["1y","1N","2U","5x","6b","3P","9f"],s.AH[LN].AF)&&(i2=!0,s.XM="2d"),-1!==ZC.AT(["9c","8a","dP","6T","7o","7e","aM"],s.AH[LN].AF)&&(qu=!0,s.XM="3d")),(i2||qu)&&(EA=FW("3D"),"2a"!==EA.3Z&&(EA=FW(i2?"uw":"uJ"),"2a"!==EA.3Z&&(JR.1h(GL(i2?"qP":"qH",EA.1D)),JR.1h(JB("Kp"))))),-1!==LN){1a C=s.AH[LN],oF=!1,m0=!1;1j(j=0;j<C.BL.1f;j++){1a B=C.BL[j];0===B.BE.1L(ZC.1b[51])&&(oF=!0),"2Z"===B.C8&&(m0=!0)}oF&&(EA=FW("Kj"),"2a"!==EA.3Z&&(EA=FW(m0?"uy":"uz"),"2a"!==EA.3Z&&(JR.1h(GL(m0?"rC":"rF",EA.1D)),JR.1h(JB("f4"))))),(C.CT||C.H8)&&(EA=FW("nV"),"2a"!==EA.3Z&&(EA=FW(C.fo?"158":"16r"),"2a"!==EA.3Z&&(JR.1h(GL(C.fo?"nf":"iE",EA.1D)),JR.1h(JB("2i")))))}1a nc=0,B6;if(1w ZC.vE!==ZC.1b[31]&&(EA=FW("vi"),"2a"!==EA.3Z&&(JR.1h(GL("4P",EA.1D)),nc++),EA=FW("uE"),"2a"!==EA.3Z&&(JR.1h(GL("4r",EA.1D)),nc++)),nc>0&&JR.1h(JB("bd")),EA=FW("uj"),"2a"===EA.3Z||s.M2||(s.R0?(EA=FW("195"),JR.1h(GL("iS",EA.1D)),JR.1h(JB("iS"))):(JR.1h(GL("5R",EA.1D)),JR.1h(JB("5R")))),s.IB&&(EA=FW("194"),"2a"!==EA.3Z&&JR.1h(GL("cc",EA.1D)),EA=FW("193"),"2a"!==EA.3Z&&JR.1h(GL("ca",EA.1D)),JR.1h(JB("4X"))),JR.1f>0&&-1!==JR[JR.1f-1].1L("zc-2B-eh")&&JR.6u(JR.1f-1,1),s.s3={},-1!==LN)if(JK&&1c!==ZC.1d(B6=JK["5G-2C"]))1j(JR.1f>0&&JR.1h(JB("5G")),i=0,A5=B6.1f;i<A5;i++){1a mD=!0;if(1c!==ZC.1d(B6[i].3Z)&&("2a"===B6[i].3Z?mD=!1:"4q"!==B6[i].3Z&&(mD=!ev||7u(B6[i].3Z).4x(s,1o.hR(ev,s),B6[i].id,ev))),mD){1a AP,K=B6[i].id||"5G-"+i;"eh"===B6[i].id||"eh"===B6[i].1J?JR.1h(JB(K,!0)):"5Z"===B6[i].1J?(AP=B6[i].1D||"pn uH "+i,JR.1h(uL(K,AP,!0))):(AP=B6[i].1D||"pn uH "+i,s.s3[K]={fn:B6[i]["1n"]||"",3R:B6[i].3R||"",2X:B6[i].2X||""},JR.1h(GL(K,AP,!0)))}}s.UA||(JR.1h(JB("1o")),JR.1h(GL("uk","uf hT"))),ZC.P.I1({id:s.K+"-2B",p:2g.3s,2o:"zc-2B zc-1I",1v:1c===ZC.1d(GR)?0:GR.iY+GR.F/2,1K:1c===ZC.1d(GR)?0:GR.iX+GR.I/2,tD:s.N4.AQ+"px 2V "+s.N4.BU,1W:(-1===s.N4.A0?"aX":s.N4.A0)+" "+jm(s.N4.D7),cn:s.N4.FL,di:s.N4.FM,da:s.N4.FT,d8:s.N4.EM,4e:JR.2M("")}),s.E["2B-1P-i1"]||(s.rc=1n(e){1a t,i=1!==e.2X.go?e.2X.6q.id:e.2X.id,a=i.2x(0,i.1L("-2B-1P-")),n=1o.7c(a);ZC.2L&&n.P7();1a l=n.mK(n.T1[0],n.T1[1]);n.9p(),ZC.2L&&1o.SO(e);1a r=i.1F(n.K+"-2B-1P-","");n.x6({4u:l?l.K:1c,qR:r,ev:ZC.A4.BX(e)});1a o=n.o["8q-jr"]||n.o[ZC.1b[16]][0]["8q-jr"]||"";1R(r){1i"qH":1i"qP":l&&n.oV(l.K);1p;1i"rZ":s.DD=s.DD||{},s.DD["3g-1Z"]=!0;1p;1i"rX":s.DD=s.DD||{},s.DD["3g-1Z"]=!1;1p;1i"iE":n.W1(l.K,!0);1p;1i"nf":n.W1(l.K,!1);1p;1i"rC":n.W7(l.K,"mx");1p;1i"rF":n.W7(l.K,"2Z");1p;1i"eN":n.oW();1p;1i"n0":n.NF("9I");1p;1i"ru":n.NF("dR");1p;1i"uF":n.NF("fQ",""===o?1c:{fn:o});1p;1i"uB":n.NF("2F",""===o?1c:{fn:o});1p;1i"jo":1o.3p(n.K,"jo");1p;1i"uD":1o.3p(n.K,"xm",""===o?1c:{fn:o});1p;1i"uu":(t=FW("sg"))["5G-1n"]?n.ZQ({4u:l?l.K:1c,qR:r,jr:o,"1n":t["5G-1n"]}):1o.3p(n.K,"xo",""===o?1c:{fn:o});1p;1i"tL":1i"sr":1o.3p(n.K,"xt",{qW:r});1p;1i"6E":n.kg();1p;1i"4P":n.k7();1p;1i"4r":n.jW();1p;1i"5R":n.oM();1p;1i"cc":1o.3p(n.K,"cc");1p;1i"ca":1o.3p(n.K,"ca");1p;1i"gv":l&&(n.HB.C=l,n.kP({4u:l.K,ev:e}));1p;1i"g6":l&&(n.HB.C=l,n.kB({4u:l.K,ev:e}));1p;1i"g9":l&&(n.HB.C=l,n.kf({4u:l.K,ev:e}));1p;1i"uk":n.pj();1p;2q:1c!==ZC.1d(G=s.s3[r])&&(""!==G.fn?n.ZQ({4u:l?l.K:1c,qR:r,"1n":G.fn}):""!==G.3R&&l&&l.U6(e,G.3R,G.2X))}},s.qV=1n(){1g.1I.qG=LM.A0,1g.1I.1r=LM.C0,1g.1I.k6=1g.1I.k5=LM.AQ+"px 2V "+LM.BU},s.ss=1n(){1g.1I.qG=DX.A0,1g.1I.1r=DX.C0,1g.1I.k6=1g.1I.k5=DX.AQ+"px 2V "+DX.BU},s.TW=1n(e){1l e.6X(),!1},ZC.A4("#"+s.K+"-2B").4g(ZC.1b[47],s.TW),ZC.A4("."+s.K+"-2B-1P").4g(ZC.1b[47],s.TW),ZC.A4("."+s.K+"-2B-1P").4g("3J 5T",s.rc).4g("76",s.qV).4g("7F",s.ss),s.E["2B-1P-i1"]=!0)}}1n jm(e){1l""!==e&&e?"3R("+(0===e.1L("zc.")?ZC.bT[e]:e)+")":"2a"}1n JB(e){1l\'<3E id="\'+s.K+"-2B-eh-"+e+\'" 1O="zc-2B-eh" 1I="1W-1r:\'+DX.A0+";1W-4i:"+jm(DX.D7)+" 6G-x 50% 0%;1G-2c-1s:"+UR[ZC.1b[4]]+";1G-2c-1r:"+UR["1y-1r"]+\';">&8w;</3E>\'}1n GL(e,t,i){t=t||ZC.HF["2B-"+e];1a a=1w i!==ZC.1b[31]&&i?" zc-5G-2B-1P "+s.K+"-5G-2B-1P":"";1l\'<3E 1O="\'+s.K+"-2B-1P"+a+\'" 1I="1s:\'+s.N4.o.1s+";1r:"+DX.C0+";2s-9q:"+DX.GE+";2s-2e:"+DX.DF+"px;1W-1r:"+DX.A0+";1W-4i:"+jm(DX.D7)+" 6G-x 50% 0%;1G-1v:"+(ZC.6Q?DX.AQ:1)+"px 2V "+DX.BU+";1G-1K:"+DX.AQ+"px 2V "+DX.BU+";1G-2z:"+DX.AQ+"px 2V "+DX.BU+";3x:"+DX.FL+"px "+DX.FM+"px "+DX.FT+"px "+DX.EM+"px;1D-3y:"+DX.OM+";"+(ZC.HF.aR?"tG-dj:dj-7a;bi:aR;":"")+\'" id="\'+s.K+"-2B-1P-"+e+\'">\'+t+"</3E>"}1n uL(e,t,i){1a a=1w i!==ZC.1b[31]&&i?" zc-5G-2B-5Z "+s.K+"-5G-2B-5Z":"";1l\'<3E 1O="zc-2B-5Z \'+s.K+"-2B-5Z"+a+\'" 1I="1r:\'+DX.C0+";1W-1r:#cT;1G-1v:"+(ZC.6Q?DX.AQ:1)+"px 2V "+DX.BU+";1G-1K:"+DX.AQ+"px 2V "+DX.BU+";1G-2z:"+DX.AQ+"px 2V "+DX.BU+";3x:"+DX.FL+"px "+DX.FM+"px "+DX.FT+"px "+DX.EM+"px;1D-3y:"+DX.OM+";"+(ZC.HF.aR?"tG-dj:dj-7a;bi:aR;":"")+\'" id="\'+s.K+"-2B-1P-"+e+\'">\'+t+"</3E>"}1n FW(e){if(tn)1l{3Z:"2a"};1j(1a t=0,i=S1.1f;t<i;t++)if(S1[t].id===e)1l S1[t];1l{3Z:"4q"}}}a4(){1g.t5(),1o.I2.1f-=1,1g.3k(),ZC.A4("#zc-5R").3q(),2g.3s.1I.9J=""}MO(e,t){1a i,a=1g;if(1c===ZC.1d(t)&&(t=!1),(t||a.lf)&&-1===ZC.AT(a.KY,ZC.1b[41]))if(a.h5=!0,t&&ZC.P.I1({id:a.K+"-np",p:ZC.AK(a.K),wh:a.I+"/"+a.F}),a.E.dM||1o.3I.uo)a.h5=!1;1u{1a n=ZC.A4("#"+a.K);if(!(1w n.2b()===ZC.1b[31]||n.1s()+n.1M()===0||a.E.dM&&a.UA)){1a l=n.2b().1K+ZC.1k(n.2O("1G-1K-1s"))+(1c===e?a.iX:e.iX),r=n.2b().1v+ZC.1k(n.2O("1G-1v-1s"))+(1c===e?a.iY:e.iY);(ZC.um||ZC.ux)&&(l-=ZC.A4(2v).aK(),r-=ZC.A4(2v).aG());1a o=1c===e?a.I:e.I,s=1c===e?a.F:e.F,C=ZC.1k(.8*a.I),A=30,Z=1m DP(a);a.B9.2y(Z.o,"6J.5k.7Q"),Z.1C(a.E.7Q),1c!==a.DD&&1c!==ZC.1d(i=a.DD.7Q)&&Z.1C(i),Z.1q();1a c,p=ZC.HF["7Q-bb-f2"];if(ZC.6Q)c=Z.A0;1u{1a u=a.E.o2||ZC.bT["zc.o8"];c=Z.A0+" 3R("+u+") no-6G 3G 3G"}(o<180||s<90)&&(c=Z.A0,A=-12),o<120&&o>60?(C=60,p=ZC.HF["7Q-bb-5M"]):o<60&&(C=20,p=ZC.HF["7Q-bb-lN"]),p=a.E.oA||p;1a h=ZC.P.I1({id:a.K+"-7Q",p:2g.3s,tl:r+"/"+l,1s:o-2*Z.AQ,1M:s-2*Z.AQ,2K:"4D",3n:.8,1G:Z.AQ+"px 2V "+Z.BU,1W:c});ZC.P.I1({id:a.K+"-7Q-1D",p:h,1s:C,4e:p,c7:"3G",lH:ZC.1k((o-C)/2),lE:ZC.1k(s/2+A),6W:1o.a3,6M:1o.i8,1r:Z.C0,6V:"6A"})}}}Y2(){1a e=1g;ZC.P.ET(e.K+"-np"),e.E.dM||(e.h5=!1,ZC.P.ET([e.K+"-7Q-1D",e.K+"-7Q"]))}nq(e,t){1a i,a,n=1g;i=1c!==ZC.1d(a=e[ZC.1b[16]])?a:[e];1a l=e.3w||"",r=ZC.AO.ga(l,i.1f),o=i[t],s=n.I/r[1],C=n.F/r[0],A=1A.4h(t/r[1]),Z=t%r[1]*s,c=A*C;o&&(1c!==ZC.1d(a=o.x)&&(Z=ZC.8B(a))<=1&&(Z=ZC.1k(Z*n.I)),1c!==ZC.1d(a=o.y)&&(c=ZC.8B(a))<=1&&(c=ZC.1k(c*n.F)),1c!==ZC.1d(a=o[ZC.1b[19]])&&(s=ZC.8B(a))<=1&&(s=ZC.1k(s*n.I)),1c!==ZC.1d(a=o[ZC.1b[20]])&&(C=ZC.8B(a))<=1&&(C=ZC.1k(C*n.F)));1a p=[0,0,0,0];o.2u&&(1c!==ZC.1d(o.2u.2w)&&(p=1m I4(1c).6c(o.2u.2w,"4q",s,C)));1l{3a:{x:ZC.1k(Z),y:ZC.1k(c),1s:ZC.1k(s),1M:ZC.1k(C),2Y:t},2u:{x:p[3],y:p[0],1s:s-p[1]-p[3],1M:C-p[0]-p[2]}}}JU(){1a e=1g;1c===ZC.1d(e.o[ZC.1b[16]])&&(e.o={aS:[e.o]}),e.MO(),1o.iO(e,e.kX(),1n(){e.o=ZC.AN.C2("eW",e,e.FF(),e.o),1o.YD[e.K]&&e.OR(1n(){e.1q(),e.1t()})})}ba(){1a e=1g;!1n(){1n t(){""!==e.R3||1c!==e.MV?e.kT():e.2y()}e.V2||e.p4(),e.MO(1c,!0),1o.py>0?ZC.ZZ(t):t()}()}W8(e){1a t=1g;1c===ZC.1d(t.i9)&&(t.i9=(1m a2).bH(),t.uK=2v.5I(1n(){1c!==ZC.1d(t.i9)&&(t.i9=1c,1o.Z8(e))},18b))}FF(){1a e,t=1g,i=0,a=0;1l i=1w t.T1[0]!==ZC.1b[31]?t.T1[0]-i:0,a=1w t.T1[1]!==ZC.1b[31]?t.T1[1]-a:0,e=t.LW?t.LW:"8T",{id:t.K,1s:t.I,1M:t.F,bD:t.AB,x:i,y:a,9G:t.T1[2],c1:e}}wq(e){e=e||{},1c!==ZC.1d(e.pa)&&(1g.R4[e.pa]=e.1T||"[]",1g.UZ++)}kP(){}kB(){}kf(){}PH(){}pd(e,t){1a i=1g;if(e=e||{},1c!==ZC.1d(e[ZC.1b[3]])){1a a=i.OH(e[ZC.1b[3]]);1c!==a&&a.3k()}1u i.3k(1c,1c,t);KB&&KB.5Y&&(KB.5Y[i.K]=1c)}pH(e){e=e||ZC.HF["tc-bb"];1a t=1g;if(1c===ZC.AK(t.K+"-8V")){ZC.P.I1({2o:"zc-3l zc-1I zc-8V",id:t.K+"-8V",p:ZC.AK(t.K+"-1v"),wh:t.I+"/"+t.F,3n:.75}),ZC.P.I1({2o:"zc-8V-wP",id:t.K+"-8V-t",p:ZC.AK(t.K+"-8V"),4e:e});1a i=ZC.A4("#"+t.K+"-8V-t");i.2O("1v",t.F/2-i.1M()/2+"px").2O("1K",t.I/2-i.1s()/2+"px")}}ky(){ZC.P.ET(1g.K+"-8V")}pj(){1a e=1g;ZC.AN.C2("189",e,e.FF()),ZC.P.I1({2o:"zc-3l",id:e.K+"-6C-4K",p:ZC.AK(e.K+"-1v"),wh:e.I+"/"+e.F,1W:"#86",3n:.75});1a t=ZC.CV(187,e.I),i=ZC.CV(wV,e.F),a=ZC.BO(0,(e.I-t)/2),n=ZC.BO(0,(e.F-i)/2),l=ZC.P.I1({2o:"zc-6C zc-1I",id:e.K+"-6C",p:ZC.AK(e.K+"-1v"),tl:n+"/"+a,wh:t-(ZC.9a?0:10)+"/"+(i-(ZC.9a?0:10))}),r="";""!==e.SL&&(r="pn 181 1j<br />"+e.SL),l.4o=\'<3E 1O="zc-6C-1"><a 7B="79://8x.1o.bs" 2X="od">1o.bs</a></3E><3E 1O="zc-6C-2">&1S;18J-\'+(1m a2).wU()+\'</3E><3E 1O="zc-6C-3"><3E id="\'+e.K+\'-6C-7l">\'+ZC.HF["6C-7l"]+\'</3E></3E><3E 1O="zc-6C-4" 1I="3x:\'+(i-wV)+\'px 7Z 7Z 7Z;"><3E>&8w;<br />17W \'+ZC.g2+" ["+e.AB+"]</3E>"+r+"</3E>",ZC.A4("#"+e.K+"-6C-7l").3t("3J",1n(){ZC.AN.C2("18G",e,e.FF()),ZC.P.ET([e.K+"-6C",e.K+"-6C-4K"])})}NH(e,t){1a i=1g;if(ZC.AN.pk("4J",i))ZC.AN.C2("4J",i,{id:i.K,4J:e,18E:t,4G:i.E.4G||i.E.wY});1u{1a a="";a+="4d"==1w e?e.8C+":"+e.aN+"\\n\\n":e+"\\n\\n",1c!==ZC.1d(t)&&(a+="18C:"+t+"\\n\\n"),a+="3h 1T:\\n\\n"+i.E.4G+"\\n\\n",i.Y2(),1c===ZC.AK(i.K+"-1v")&&i.oK(),ZC.P.I1({2o:"zc-3l zc-4J zc-1I",id:i.K+"-4J",p:ZC.AK(i.K+"-1v"),wh:i.I-(ZC.9a?0:10)+"/"+(i.F-(ZC.9a?0:10))}).4o=\'<3E 1O="zc-4H-5o-1H zc-4H-s0">\'+ZC.HF["4J-5Z"]+\'</3E><3E 1O="zc-4H-5o-1H zc-4H-s1">\'+ZC.HF["4J-aN"]+\'</3E><3E 1O="zc-4H-5o-ap"><c4 id="\'+i.K+\'-4J-aN" 1I="1s:\'+(i.I-35)+"px;1M:"+(i.F-135)+\'px;"></c4></3E><3E 1O="zc-4H-5o-ap zc-4H-5o-8e"><a5 1J="7O" 1U="\'+ZC.HF["4J-7l"]+\'" id="\'+i.K+\'-4J-7l" /></3E>\',ZC.A4("#"+i.K+"-4J-aN").8L(ZC.GT(a)),ZC.A4("#"+i.K+"-4J-7l").3t("3J",1n(){ZC.P.ET(i.K+"-4J")})}}k7(){}jW(){}oM(){1a e=1g,t=2g.4W("3E");t.id="zc-5R",t.1I.9S=1o.wZ,t.1I.9J="97";1a i,a,n=2g.3s,l=!1;1j(1o.dF&&ZC.AK(1o.dF)&&(l=!0,(n=ZC.AK(1o.dF)).1I.3M="8K"),n.3b(t),ZC.kV={},i=0,a=e.AH.1f;i<a;i++){1a r=e.AH[i];if(1c!==r.AY)1j(1a o=0,s=r.AY.A7.1f;o<s;o++)ZC.kV["g-"+r.L+"-p-"+o]=r.E["1B"+o+".2h"]}ZC.P.ET(e.K+"-1T-6s");1a C,A=3h.1q(e.E.4G),Z=A[ZC.1b[16]];1j(i=Z.1f-1;i>=0;i--)if(Z[i].eH)Z.6u(i,1);1u{if(1c!==ZC.1d(Z[i].5U))1j(C=Z[i].5U.1f-1;C>=0;C--)Z[i].5U[C].eH&&Z[i].5U.6u(C,1);if(1c!==ZC.1d(Z[i][ZC.1b[10]]))1j(C=Z[i][ZC.1b[10]].1f-1;C>=0;C--)Z[i][ZC.1b[10]][C].eH&&Z[i][ZC.1b[10]].6u(C,1)}l||2v.1Z(0,0),1o.ba({id:"zc-5R",bD:e.AB,1s:ZC.A4(l?n:2v).1s(),1M:ZC.A4(l?n:2v).1M(),oN:!0,c1:e.LW,iJ:e.kD,1T:A,cF:e.MV,x0:e.R3})}W7(e,t){1a i,a,n,l=1g,r=0,o=!1;1j(i=0,a=l.AH.1f;i<a;i++)if(e===l.AH[i].K){1j(r=i,n=0;n<l.AH[i].AY.A7.1f;n++)if(l.AH[i].AY.A7[n].IW){o=!0;1p}1a s;1j(s=l.AH[r].AJ["3d"]||o?l.o[ZC.1b[16]][i]:l.AH[i].o,n=0;n<10;n++){1a C=ZC.1b[51]+(0===n?"":"-"+n);1c===ZC.1d(s[C])&&1c===ZC.1d(s[ZC.EC(C)])&&1c!==l.AH[i].BK(C)?s[C]={f4:t}:(1c!==ZC.1d(s[C])&&(s[C].f4=t),1c!==ZC.1d(s[ZC.EC(C)])&&(s[ZC.EC(C)].f4=t))}}4s l.E["3a"+r+".3H"],l.AH[r].AJ["3d"]||o?l.JU():l.AH[r].JU(!0,!0)}W1(e,t){1a i=1g;if(i.D4){1j(1a a=0,n=i.AH.1f;a<n;a++)e===i.AH[a].K&&(i.AH[a].fo=t,i.AH[a].E["2i-on"]=t);if(t){1a l=ZC.A4("#"+i.K+"-1v"),r={dQ:ZC.DU[0]-l.2b().1K,gC:ZC.DU[1]-l.2b().1v,1J:ZC.1b[48],2X:{id:i.K+"-5X"}};i.D4.QN(r)}1u KB.gI(i.K)}}oV(e){1j(1a t=1g,i=["1y","1N","2U","5x","6b","3P","9f"],a=0,n=t.AH.1f;a<n;a++)if(e===t.AH[a].K){1a l=t.o[ZC.1b[16]][a];if("9f"===l.1J)1j(1a r=0,o=l[ZC.1b[11]].1f;r<o;r++){1a s=l[ZC.1b[11]][r];s.1J=s.1J||"1y","3d"===t.XM?s.1J=s.1J.1F("3d",""):-1!==ZC.AT(i,s.1J)&&(s.1J=s.1J+"3d")}1u"3d"===t.XM?l.1J=l.1J.1F("3d",""):-1!==ZC.AT(i,l.1J)&&(l.1J=l.1J+"3d")}t.XM="3d"===t.XM?"2d":"3d",t.E.4G=ZC.GT(3h.5b(t.o)),t.JU()}oW(e){1j(1a t,i=1g,a=0;a<i.AH.1f;a++)4s i.E["g"+a+"-1V-dh"];if(e=e||{},ZC.AN.C2("eN",i,{id:i.K,4u:e[ZC.1b[3]]}),1c!==ZC.1d(t=e[ZC.1b[3]])){1a n=i.C7(t);1c!==n&&(i.MO(n),i.2y(n.K))}1u i.R2=[],i.NZ=-1,i.MO(),i.oX(),i.2y()}x4(e){1a t,i=1g;if(e=e||{},1c!==ZC.1d(t=e[ZC.1b[3]])){1a a=i.C7(t);1c!==a&&1c!==ZC.1d(e.iF)&&(i.MO(a),i.2y(t,e.iF))}1u 1c!==ZC.1d(t=e.iF)&&(i.R5=t,i.MO(),i.2y())}kg(){}NF(){}TL(){}x6(e){ZC.2E(1g.FF(),e),ZC.AN.C2("18t",1g,e)}ZQ(O){1a s=1g;4O{1a DW=ZC.AN.p2(O["1n"]);O["1n"]=DW[0],O.8U=DW[1],ZC.2E(s.FF(),O),7u(O["1n"]).4x(s,O)}4M(JA){1l s.NH(JA,"p3 1T 6J"),!1}}C7(e){1a t=1g;1l 1c!==ZC.1d(e)?t.OH(e):t.AH.1f>0?t.AH[0]:1c}3t(e,t){1o.3t(1g.K,e,t)}3m(e,t){1o.3m(1g.K,e,t)}3p(e,t){1l 1o.3p(1g.K,e,t)}gc(){1j(1a e=0,t=1g.AH.1f;e<t;e++)1g.AH[e].gc()}}RZ.5m.wK=1n(e){1a t,i,a,n,l,r=1g;if((e=e||{}).8h="qd",t=1c!==ZC.1d(e[ZC.1b[3]])?r.OH(e[ZC.1b[3]]):r.AH[0]){1j(i=0,a=t.BT("k").1f;i<a;i++){1a o=t.BT("k")[i];if(n=1===o.L?"":"-"+o.L,o.H7&&(1c===ZC.1d(e["7C"+n])||e["7C"+n])){e["7C"+n]=!0,l=o.I/ZC.CV(o.I,e.pA||50);1a s,C=o.X,A=o.A1;e["x-"]?(s=ZC.CV(o.X-o.E7,ZC.1k((o.A1-o.X)/l)),C=o.X-s,A=o.A1-s):e["x+"]&&(s=ZC.CV(o.EG-o.A1,ZC.1k((o.A1-o.X)/l)),C=o.X+s,A=o.A1+s),e["4t"+n]=C,e["4p"+n]=A}}1j(i=0,a=t.BT("v").1f;i<a;i++){1a Z=t.BT("v")[i];if(n=1===Z.L?"":"-"+Z.L,Z.H7&&(1c===ZC.1d(e["7N"+n])||e["7N"+n])){e["7N"+n]=!0,l=Z.F/ZC.CV(Z.F,e.q1||50);1a c,p=Z.B4,u=Z.BQ;e["y-"]?(c=ZC.CV(Z.B4-Z.GX,ZC.1k((Z.BQ-Z.B4)/l)),p=Z.B4-c,u=Z.BQ-c):e["y+"]&&(c=ZC.CV(Z.HQ-Z.BQ,ZC.1k((Z.BQ-Z.B4)/l)),p=Z.B4+c,u=Z.BQ+c),Z.Q8&&1===Z.E4&&(p=1A.4b(p),u=1A.4b(u)),e["5r"+n]=p,e["5s"+n]=u}}r.PH(e)}},RZ.5m.kP=1n(e){1a t,i,a,n,l=1g;if((e=e||{}).8h="gv",t=1c!==ZC.1d(e[ZC.1b[3]])?l.OH(e[ZC.1b[3]]):l.AH[0]){1j(i=0,a=t.BT("k").1f;i<a;i++){1a r=t.BT("k")[i];if(n=1===r.L?"":"-"+r.L,r.H7&&(1c===ZC.1d(e["7C"+n])||e["7C"+n])){e["7C"+n]=!0;1a o=r.A1-r.X,s=r.X+(o<2?0:ZC.1k(o/4)),C=r.A1-(o<2?0:ZC.1k(o/4));s<C?(e["4t"+n]=s,e["4p"+n]=C):(e["4t"+n]=r.X,e["4p"+n]=r.A1)}}1j(i=0,a=t.BT("v").1f;i<a;i++){1a A=t.BT("v")[i];if(n=1===A.L?"":"-"+A.L,A.H7&&(1c===ZC.1d(e["7N"+n])||e["7N"+n])){e["7N"+n]=!0;1a Z=A.BQ-A.B4,c=A.B4+ZC.1Y(Z/4),p=A.BQ-ZC.1Y(Z/4);A.Q8&&1===A.E4&&(c=1A.4b(c),p=1A.4b(p)),c<p&&(e["5r"+n]=c,e["5s"+n]=p)}}l.PH(e)}},RZ.5m.kB=1n(e){1a t,i,a,n,l,r,o,s=1g;if((e=e||{}).8h="g6",e.iy=!0,t=1c!==ZC.1d(e[ZC.1b[3]])?s.OH(e[ZC.1b[3]]):s.AH[0]){1j(i=0,a=t.BT("k").1f;i<a;i++){1a C=t.BT("k")[i];if(o=1===C.L?"":"-"+C.L,C.H7&&(1c===ZC.1d(e["7C"+o])||e["7C"+o]))if(e["7C"+o]=!0,t.BI&&t.BI.LV){1a A=ZC.1k(t.BI.NS[C.BE][ZC.1b[5]].1f*t.BI.JY/t.BI.B5.I),Z=ZC.1k(t.BI.NS[C.BE][ZC.1b[5]].1f*t.BI.IA/t.BI.B5.I);n=ZC.BO(2,Z-A),(l=ZC.BO(0,A-ZC.1k(n/2)))<(r=ZC.CV(t.BI.NS[C.BE][ZC.1b[5]].1f-1,Z+ZC.1k(n/2)))&&(e["4t"+o]=l,e["4p"+o]=r)}1u n=ZC.BO(2,C.A1-C.X),(l=ZC.BO(C.E7,C.X-ZC.1k(n/2)))<(r=ZC.CV(C.EG,C.A1+ZC.1k(n/2)))&&(e["4t"+o]=l,e["4p"+o]=r)}1j(i=0,a=t.BT("v").1f;i<a;i++){1a c=t.BT("v")[i];if(o=1===c.L?"":"-"+c.L,c.H7&&(1c===ZC.1d(e["7N"+o])||e["7N"+o])){e["7N"+o]=!0;1a p=c.BQ-c.B4,u=ZC.BO(c.GX,c.B4-ZC.1Y(p/2)),h=ZC.CV(c.HQ,c.BQ+ZC.1Y(p/2));c.Q8&&1===c.E4&&(1A.4b(h)-1A.4b(u)>1?(u=1A.4b(u),h=1A.4b(h)):(u=1A.4h(u),h=1A.4j(h))),(u=ZC.BO(c.GX,u))<(h=ZC.CV(c.HQ,h))&&(e["5r"+o]=u,e["5s"+o]=h)}}s.PH(e)}},RZ.5m.kf=1n(e){1a t,i,a,n,l,r=1g;1j(e=e||{},i=1c!==ZC.1d(e[ZC.1b[3]])?r.OH(e[ZC.1b[3]]):r.AH[0],e.8h="g9",a=0,n=i.BT("k").1f;a<n;a++)if(e["7C"+(l=1===(t=i.BT("k")[a]).L?"":"-"+t.L)]=!0,e["4t"+l]=1c,e["4p"+l]=1c,i.o[t.BE]&&(i.o[t.BE]["3H-to"]=1c,i.o[t.BE]["3H-to-6n"]=1c),i.BI&&i.BI.LV){1a o=i.BI.NS[t.BE][ZC.1b[5]];e["8W"+l+"-ac"]=o[0],e["93"+l+"-ac"]=o[o.1f-1]}1j(a=0,n=i.BT("v").1f;a<n;a++)t=i.BT("v")[a],i.o[t.BE]&&(i.o[t.BE]["3H-to"]=1c,i.o[t.BE]["3H-to-6n"]=1c),t.DT=1c!==ZC.1d(t.E[ZC.1b[12]])&&-1!==t.E[ZC.1b[12]]?t.E[ZC.1b[12]]:1c,l=1===t.L?"":"-"+t.L,t.LZ=1c,e["7N"+l]=!0,e["5r"+l]=1c,e["5s"+l]=1c;r.PH(e)},RZ.5m.PH=1n(e){1a t,i,a,n,l,r,o,s,C,A,Z,c,p,u,h,1b=1g;(e=e||{}).id=1b.K;1a d=1c!==ZC.1d(e.3H)&&!e.3H;if(i=1c!==ZC.1d(e[ZC.1b[3]])?1b.OH(e[ZC.1b[3]]):1b.AH[0]){d&&(1b.E["3a."+i.L+".bS-3H"]=!0),1b.E["3a."+i.L+".bS-3H"]&&(d=!0),1w e.1Z===ZC.1b[31]&&(ZC.P.IM(ZC.AK(i.K+"-1Z-x-c"),i.A.AB,i.iX,i.iY,i.I,i.F),ZC.P.IM(ZC.AK(i.K+"-1Z-y-c"),i.A.AB,i.iX,i.iY,i.I,i.F)),i.BI&&(i.BI.IQ=!1);1a f=1b.E["3a"+i.L+".3H"]||{};1j(e.q4=!1,(l=i.BT("v")[0])&&1c!==ZC.1d(e.5r)&&1c!==ZC.1d(e.5s)&&(e.5r===l.GX&&e.5s===l.HQ||(e.q4=!0)),s=0,C=i.BT("k").1f;s<C;s++)if(A=1===(n=i.BT("k")[s]).L?"":"-"+n.L,1c!==ZC.1d(e["8W"+A])&&1c!==ZC.1d(e["93"+A]))if(e["8W"+A]===e["93"+A])4s e["8W"+A],4s e["93"+A];1u{1j(1a g=!1,B=!1,v=0,E=n.W.1f;v<E&&(e["8W"+A]<=n.W[v]&&!g&&(e["4t"+A]=v,g=!0),e["93"+A]<=n.W[v]&&!B&&(e["4p"+A]=v,B=!0),!g||!B);v++);g||(e["4t"+A]=0),B||(e["4p"+A]=n.W.1f-1),e["7C"+A]=!0,e.q3=!(g&&B)}1u a=i.BI&&i.BI.LV&&e.iy?i.BI.NS[n.BE][ZC.1b[5]]:n.W,1c!==ZC.1d(t=a[e["4t"+A]])&&(e["8W"+A]=t),1c!==ZC.1d(t=a[e["4p"+A]])&&(e["93"+A]=t),e.q3=!(e["4t"+A]===n.E7&&e["4p"+A]===n.EG);"g9"===e.8h&&(e.q3=!1,e.q4=!1);1a b=ZC.AN.C2("3H",i.A,e,!0);if(e.ac&&!d)1l;if(i.BI&&i.BI.LV){a=i.BI.NS[n.BE][ZC.1b[5]];1a m=ZC.YH(a),K=ZC.dG(a);1c!==ZC.1d(e.8W)&&1w e.8W!==ZC.1b[31]?(r=ZC.1k(i.BI.B5.I*(e.8W-m)/(K-m)),r=ZC.BO(r,0)):r=0,1c!==ZC.1d(e.93)&&1w e.93!==ZC.1b[31]?(o=ZC.1k(i.BI.B5.I*(e.93-m)/(K-m)),o=ZC.CV(o,i.BI.B5.I)):o=i.BI.B5.I,d||i.BI.3S(r,o,i.BI.MX,i.BI.J1)}if(b||1w b===ZC.1b[31]){1j(s=0,C=i.BT("k").1f;s<C;s++)e["7C"+(A=1===(n=i.BT("k")[s]).L?"":"-"+n.L)]&&(d||n.8y(e["4t"+A],e["4p"+A]),f["4t"+A]=e["4t"+A],f["4p"+A]=e["4p"+A]);1j(s=0,C=i.BT("v").1f;s<C;s++)e["7N"+(A=1===(l=i.BT("v")[s]).L?"":"-"+l.L)]&&1c!==ZC.1d(l)&&(d||l.8y(e["5r"+A],e["5s"+A]),f["5r"+A]=e["5r"+A],f["5s"+A]=e["5s"+A]);if(d&&(1b.HB.C=i),1b.HB.1q(),1b.HB.l3)1j(1b.E["3a"+i.L+".3H"]=f,u=0,h=1b.AH.1f;u<h;u++)i.K!==1b.AH[u].K&&1b.AH[u].HB&&ZC.2t(1b.AH[u].HB.o.6e)&&(1b.E["3a"+1b.AH[u].L+".3H"]=f);if(i.BI&&!e.2A&&i.BI.3S(e.4t,e.4p,e.5r,e.5s,!0),d)1l;if(i.3k(!0),(l=i.BT("v")[0])&&(l.7D[0]||l.7D[1])){1j(1a D=l.7D[0]?ZC.3v:l.GX,F=l.7D[1]?-ZC.3v:l.HQ,I=0,x=i.AY.A7.1f;I<x;I++)if(i.AY.A7[I].AL&&-1!==ZC.AT(i.AY.A7[I].BL,l.BE))if(n.ED){1j(s=0,C=i.AY.A7[I].S.1f;s<C;s++)if((p=i.AY.A7[I].S[s])&&ZC.DQ(p.BY,n.W[n.X],n.W[n.A1]))1j(l.7D[0]&&(D=ZC.CV(D,p.CM)),l.7D[1]&&(F=ZC.BO(F,p.CM)),Z=0,c=p.DK.1f;Z<c;Z++)l.7D[0]&&(D=ZC.CV(D,p.DK[Z])),l.7D[1]&&(F=ZC.BO(F,p.DK[Z]))}1u 1j(s=n.X;s<=n.A1;s++)if(p=i.AY.A7[I].S[s])1j(l.7D[0]&&(D=ZC.CV(D,p.CM)),l.7D[1]&&(F=ZC.BO(F,p.CM)),Z=0,c=p.DK.1f;Z<c;Z++)l.7D[0]&&(D=ZC.CV(D,p.DK[Z])),l.7D[1]&&(F=ZC.BO(F,p.DK[Z]));"2Z"===l.C8&&(D=ZC.HE(D,l.EN),F=ZC.HE(F,l.EN)),l.Q4(D,F,!0),l.GV();1a X=i.BT("v");1j(s=0;s<X.1f;s++)X[s].BE!==l.BE&&X[s].dL===l.BE&&(X[s].Q4(D,F,!0),X[s].GV())}1a y=ZC.2t(e.oz);i.E["b2-2A"]=!0;1a Y=["1v","2z","2c","1K"];1j(s=0;s<Y.1f;s++)(i.Q.E["d-2w-"+Y[s]]||i.E["2u.d-2w-"+Y[s]]||ZC.2t(i.Q.o["94-3w"]))&&(i.o.2u["2w-"+Y[s]]=i.Q.o["2w-"+Y[s]]="4N",i.E["2u.d-2w"]=i.E["2u.d-2w-"+Y[s]]=!0);i.tP(),i.1t(!y),1b.HB.C=1c,ZC.AN.C2("18p",i.A,e)}}},1o.q6=1n(e,t,i){1a a,n,l,r,o,s,C,A,Z;2g.cQ("zc-5R")&&(e="zc-5R"),"3e"==1w(i=i||{})&&(i=3h.1q(i));1a c=1o.7c(e);if(1c!==ZC.1d(i[ZC.1b[53]])&&(c.E[ZC.1b[53]]=ZC.2t(i[ZC.1b[53]])),c)1R(t){1i"18o":if(r={},l=c.C7(i[ZC.1b[3]]))1j(a=0,n=l.BL.1f;a<n;a++){1a p=l.BL[a];"k"===p.AF?r[p.BE]={4t:p.X,4p:p.A1,wL:p.W[p.X],wB:p.W[p.A1]}:r[p.BE]={5r:p.B4,5s:p.BQ,wL:p.W[p.X],wB:p.W[p.A1]}}1l r;1i"qd":c.wK(i);1p;1i"gv":c.kP(i);1p;1i"g6":c.kB(i);1p;1i"oz":if(l=c.C7(i[ZC.1b[3]]),1c!==ZC.1d(i.kA)&&i.kA)1j(a=0,n=l.BT("k").1f;a<n;a++)i["4t"+(C=1===(o=l.BT("k")[a]).L?"":"-"+o.L)]=i.4t||1c,i["4p"+C]=i.4p||1c,i["8W"+C]=i.8W||1c,i["93"+C]=i.93||1c;1j(a=0,n=l.BT("k").1f;a<n;a++)1c===i["4t"+(C=1===(o=l.BT("k")[a]).L?"":"-"+o.L)]&&1c===ZC.1d(i["4p"+C])&&1c===ZC.1d(i["8W"+C])&&1c===ZC.1d(i["93"+C])||(i["7C"+C]=!0),"2Z"===o.C8&&(1c!==ZC.1d(i["4t"+C])&&(i["4t"+C]=ZC.HE(i["4t"+C],o.EN)),1c!==ZC.1d(i["4p"+C])&&(i["4p"+C]=ZC.HE(i["4p"+C],o.EN)));if(1c!==ZC.1d(i.kc)&&i.kc)1j(a=0,n=l.BT("v").1f;a<n;a++)i["5r"+(C=1===(s=l.BT("v")[a]).L?"":"-"+s.L)]=i.5r||1c,i["5s"+C]=i.5s||1c;1j(a=0,n=l.BT("v").1f;a<n;a++)C=1===(s=l.BT("v")[a]).L?"":"-"+s.L,1c===ZC.1d(i["5r"+C])&&1c===ZC.1d(i["5s"+C])||(i["7N"+C]=!0),"2Z"===s.C8&&(1c!==ZC.1d(i["5r"+C])&&(i["5r"+C]=ZC.HE(i["5r"+C],s.EN)),1c!==ZC.1d(i["5s"+C])&&(i["5s"+C]=ZC.HE(i["5s"+C],s.EN)));c.PH(i);1p;1i"18h":if(l=c.C7(i[ZC.1b[3]]),1c!==ZC.1d(i.kA)&&i.kA)1j(a=0,n=l.BT("k").1f;a<n;a++)i["4t"+(C=1===(o=l.BT("k")[a]).L?"":"-"+o.L)]=i.4t||1c,i["4p"+C]=i.4p||1c;1j(a=0,n=l.BT("k").1f;a<n;a++)C=1===(o=l.BT("k")[a]).L?"":"-"+o.L,1c===ZC.1d(i["4t"+C])&&1c===ZC.1d(i["4p"+C])||(l.BI&&l.BI.LV?(i.iy=!0,i["8W"+C+"-ac"]=i["4t"+C],i["4t"+C]=ZC.qo(l.BI.NS[o.BE][ZC.1b[5]],i["4t"+C])):-1!==(A=ZC.AT(o.W,i["4t"+C]))&&(i["4t"+C]=A),l.BI&&l.BI.LV?(i.iy=!0,i["93"+C+"-ac"]=i["4p"+C],i["4p"+C]=ZC.qo(l.BI.NS[o.BE][ZC.1b[5]],i["4p"+C])):-1!==(Z=ZC.AT(o.W,i["4p"+C]))&&(i["4p"+C]=Z),i["7C"+C]=!0);if(1c!==ZC.1d(i.kc)&&i.kc)1j(a=0,n=l.BT("v").1f;a<n;a++)i["5r"+(C=1===(s=l.BT("v")[a]).L?"":"-"+s.L)]=i.5r||1c,i["5s"+C]=i.5s||1c;1j(a=0,n=l.BT("v").1f;a<n;a++)C=1===(s=l.BT("v")[a]).L?"":"-"+s.L,1c===ZC.1d(i["5r"+C])&&1c===ZC.1d(i["5s"+C])||(i["7N"+C]=!0);c.PH(i);1p;1i"g9":c.kf(i)}1l 1c},ZC.wu={},ZC.AN.kz=1n(e,t,i,a){"tB"===(a=a||"9I")&&(a="dR");1a n=2g.4W("3c");n.1s=t,n.1M=i,n.1I.1s=t+"px",n.1I.1M=i+"px";1a l,r=n.9k("2d");e 3F 3N||(e=[e]);1j(1a o=0,s=e.1f;o<s;o++)if(-1===e[o].82.1L("zc-no-6E")){1a C=!1;4O{e[o].k9("4i/"+a)}4M(Z){C=!0}if(!C)if(l=e[o].bP("1T-3u")){1a A=l.2p(",");r.cv(e[o],ZC.BO(0,A[0]),ZC.BO(0,A[1]),ZC.CV(A[2],e[o].1s),ZC.CV(A[3],e[o].1M),ZC.BO(0,A[0]),ZC.BO(0,A[1]),ZC.CV(A[2],e[o].1s),ZC.CV(A[3],e[o].1M))}1u r.cv(e[o],0,0,e[o].1s,e[o].1M,0,0,t,i)}1l n.k9("4i/"+a)},ZC.AN.pF=1n(e,t,i,a,n){1c===ZC.1d(n)&&(n=!1);1a l=ZC.AN.kz(e,t,i,a);if(n){1a r=2g.4W("5X");1l r.5a=l,r}l=l.1F("4i/"+a,"4i/nP-lx"),2g.8d.7B=l},RZ.5m.kg=1n(){1a e=1g,t=[];if(!e.kh){e.kh=!0;1a i=2g.3s.7d,a=ZC.A4(2g.3s).2O(ZC.1b[0]),n=ZC.A4(2g.3s).2O("1W-4i");ZC.A4(2g.3s).2O(ZC.1b[0],"#2T").2O("1W-4i","2a");1j(1a l=0,r=i.1f;l<r;l++)1===i[l].go&&(t[l]=i[l].1I.3M,i[l].1I.3M="2a");2g.3s.3b(ZC.AK(e.K+"-fj")),2v.5I(1n(){2v.6E(),2v.5I(1n(){ZC.A4(2g.3s).2O(ZC.1b[0],a).2O("1W-4i",n),ZC.AK(e.K+"-fj")&&ZC.AK(e.K).3b(ZC.AK(e.K+"-fj"));1j(1a l=0,r=i.1f;l<r;l++)1===i[l].go&&(i[l].1I.3M=t[l]);e.kh=!1},5L)},50)}},RZ.5m.NF=1n(e,t,i,a){1a n=1g;if(t=t||{},1w i===ZC.1b[31]&&(i=!1),!ZC.AK(n.K+"-cl")){e=e||"9I";1a l=t.fi,r=t.fn||"";ZC.P.IM(ZC.AK(n.K+"-2i-c"),n.AB,0,0,n.I,n.F),ZC.A4(".zc-2i-1H").3q();1a o,s,C=("3c"===n.AB||1o.io||1o.3I.iu)&&"fQ"!==e&&"2F"!==e;if(ZC.2L||!C||i||l||(o=ZC.P.I1({2o:"zc-3l zc-cl zc-1I",id:n.K+"-cl",8r:5,p:ZC.AK(n.K+"-1v"),wh:n.I+"/"+n.F}),s=ZC.P.I1({id:n.K+"-cl-7l",p:o,8r:10,tl:"5/"+(n.I-15),4e:ZC.HF["cl-7l"]}),ZC.A4(s).2O("4S","8s").2O("1K",n.I-15-ZC.A4(s).1s()+"px"),ZC.A4(s).3t("3J",1n(){ZC.A4(o).3q()})),ZC.2L&&(l=!0),!1o.3I.iu||l||"2F"!==n.AB||"9I"!==e&&"dR"!==e){1a A;if("3c"===n.AB&&"fQ"!==e&&"2F"!==e){1a Z,c,p=2g.4W("3c");1j(p.1s=n.I,p.1M=n.F,Z=0,c=n.AH.1f;Z<c;Z++)n.AH[Z].BB&&n.AH[Z].BB.EB(p);1a u=[];ZC.A4("#"+n.K+" 3c").5f(1n(){-1===ZC.AT([n.K+"-2i-c",n.K+"-7U-c"],1g.id)&&u.1h(1g)}),u.1h(p),u.1h(n.oG());1a h=ZC.AN.pF(u,n.I,n.F,e,!0);h.id=n.K+"-6E-"+e,o.3b(h)}1u if(i||n.pH(ZC.HF["8q-bb"]),"3L"===n.AB||"3c"===n.AB&&("fQ"===e||"2F"===e)){1a 1b=2g.4W("3E"),d="zc-8q-2F-"+n.K;1b.id=d,1b.1I.3M="2a",2g.3s.3b(1b),1o.ba({id:d,bD:"!2F",ww:!0,1s:n.I,1M:n.F,1T:n.E.4G,cF:n.MV,c1:n.LW,dM:!0,i1:{2y:1n(){2v.5I(1n(){1a e=1o.7c(d);if(e.E["4N-2J"])1a t=2v.fb(1n(){"9t"===e.E["4N-2J"]&&(2v.9X(t),e.bV(!0),A=ZC.AK(d+"-1v").4o,e.bV(!1),1o.3p(d,"a4",{pQ:!0}),f())},100);1u e.bV(!0),A=ZC.AK(d+"-1v").4o,e.bV(!1),1o.3p(d,"a4",{pQ:!0}),f()},100)}}})}1u"2F"===n.AB&&(n.bV(!0),A=ZC.AK(n.K+"-1v").4o,f(),n.bV(!1));C&&!i&&(ZC.A4(s).2O("4S","8s").2O("1K",n.I-15-ZC.A4(s).1s()+"px"),ZC.A4(s).3t("3J",1n(){ZC.A4(o).3q()}))}1u 1o.3p(n.K,"xN",{5H:1n(l){if(-1!==l){1a r=2g.4W("5X");r.id=n.K+"-6E-"+e,r.5a=l,o.3b(r)}1u ZC.P.ET(n.K+"-cl"),1o.3I.iu=0,n.NF(e,t,i,a)}})}1n f(){1a s,C,Z={2F:A=A.1F(/<ll(.+?)<\\/ll>/g,""),w:n.I,h:n.F,t:e,fn:r};if(ZC.2E(t,Z),1o.io&&"fQ"!==e&&"2F"!==e&&!l){1a c="kr=1&";1j(C in Z)c+=C+"="+fM(Z[C])+"&";ZC.A4.a9({1J:"iL",3R:1o.pS,1T:c,aD:1n(t,l,r){if(n.ky(),i)a&&a(t,l,r);1u{1a s=2g.4W("5X");s.5a=t,s.id=n.K+"-6E-"+e,o.3b(s)}}})}1u{ZC.AK(n.K+"-8q")&&ZC.P.ET(n.K+"-8q");1a p=ZC.P.I1({2o:"zc-3l zc-1I",id:n.K+"-8q",p:ZC.AK(n.K+"-1v"),3M:"2a"}),u=(s=1c!==ZC.1d(Z.cd)&&1c!==ZC.1d(Z.3g)?ZC.P.s8(ZC.AK(n.K+"-8q")):2g).4W("vr");1j(C in u.8h=1o.pS,u.9M="iL",u.17X="18K/4H-1T",1c!==ZC.1d(Z.cd)&&1c!==ZC.1d(Z.3g)?s.3s.3b(u):p.3b(u),u.1I.3M="2a",Z){1a h=s.4W("uS");h.1J="97",h.8C=C,h.1U=Z[C],u.3b(h)}u.fY(),u=1c,1c!==ZC.1d(Z.cd)&&1c!==ZC.1d(Z.3g)&&2v.5I(1n(){ZC.A4("#"+n.K+"-8q").3q()},Az),2v.5I(1n(){n.ky()},5L)}}},RZ.5m.TL=1n(e){1a t=1g;e=e||"9I";1a i,a,n=[],l=2g.4W("3c");1j(l.1s=t.I,l.1M=t.F,i=0,a=t.AH.1f;i<a;i++)t.AH[i].BB&&t.AH[i].BB.EB(l);1l ZC.A4("#"+t.K+" 3c").5f(1n(){-1===ZC.AT([t.K+"-2i-c",t.K+"-2H-c"],1g.id)&&n.1h(1g)}),n.1h(l),n.1h(t.oG()),ZC.AN.kz(n,t.I,t.F,e)},ZC.AN.u5=1n(e,t,i){if(!ZC.d1){i=i||"fX/nP-lx";1a a=2g.4W("a");8Q.wz?8Q.wz(1m lm([e],{1J:i}),t):i4&&"fi"in a?(a.7B=i4.sX(1m lm([e],{1J:i})),a.4m("fi",t),2g.3s.3b(a),a.3J(),2g.3s.aJ(a)):8d.7B="1T:fX/nP-lx,"+fM(e)}},ZC.AN.ix=1n(e,t){1a i,a,n,l,r,o,s,C,A,Z,c,p,u,h=[],1b="",d=[];1j("7X"===(t=t||"6O")&&h.1h(\'<4e eo:o="nm:nx-nj-bs:nB:nB" eo:x="nm:nx-nj-bs:nB:xq" eo="79://8x.w3.eq/TR/18i-18j">\',"<fT>","\\18k!--[if 18l o9 9]><ln><x:wH><x:wG><x:wE><x:wA>hT</x:wA><x:wC><x:18m/></x:wC></x:wE></x:wG></x:wH></ln><![18n]--\\18s",\'<1I>td{1G:2a;2s-9q:18g,o5-o6} .92{o9-92-5F:"0.6R";} .1D{o9-92-5F:"@";}</1I>\',"<xD 8C=18v 18w=18x.18y>","<xD tk=xx-8>","</fT>","<3s>"),i=0,a=e.AH.1f;i<a;i++){1a f=e.AH[i],g=f.AY.A7,B={},v=[],E=f.BT("k")[0];"4e"!==t&&"7X"!==t&&"e4"!==t||(h.1h("<6s>"),f.J3&&""!==f.J3.AP&&(d.1h([f.J3.AP]),h.1h("<o4>"+f.J3.AP+"</o4>")),h.1h("<xG>"),h.1h("<tr>")),c=[],u=[];1a b="18z",m=!1;1j(E&&(E.FG&&"5C"===E.FG.o.1J&&(b="a2",m=!0),E.M&&E.M.AP&&(b=E.M.AP.1F(/\\"|\\\'/g,""))),"6O"===t?c.1h(\'"\'+b+\'"\'):"e4"===t?u.1h(b):"4e"!==t&&"7X"!==t||c.1h("<th>"+b+"</th>"),n=0,l=g.1f;n<l;n++)(1c===ZC.1d(g[n].o["8q"])||ZC.2t(g[n].o["8q"]))&&(p=(p=1c!==ZC.1d(g[n].AP)?g[n].AP+"":"lU "+n).1F(/\\"|\\\'/g,""),"6O"===t?c.1h(\'"\'+p+\'"\'):"e4"===t?u.1h(p):"4e"!==t&&"7X"!==t||c.1h("<th"+("7X"===t?\' xJ="kq" 1O="1D"\':"")+">"+p+"</th>"),v.1h(""));if("6O"===t?h.1h(c.2M(",")):"e4"===t?d.1h(u):"4e"!==t&&"7X"!==t||h.1h(c.2M("")),"4e"!==t&&"7X"!==t||(h.1h("</tr>"),h.1h("</xG>"),h.1h("<xM>")),E){1j(s=0,C=E.W.1f;s<C;s++)B[s+""]={lw:!1,d3:[].4z(v)};1j(n=0,l=g.1f;n<l;n++)if(1c===ZC.1d(g[n].o["8q"])||ZC.2t(g[n].o["8q"]))1j(r=0,o=g[n].S.1f;r<o;r++){1a K=g[n].S[r];K&&(B[s=K.BY?""+K.BY:""+r]=B[s]||{lw:!0,d3:[].4z(v)},B[s].d3[n]=K.AE,B[s].lw=!0)}1a D=[];1j(s in B)B[s].lw&&D.1h([s,B[s].d3]);D.3X(1n(e,t){1l e[0]-t[0]});1a F=1c;1j(A=0,Z=D.1f;A<Z;A++){if("4e"!==t&&"7X"!==t||h.1h("<tr>"),"3P"!==f.AF&&"7e"!==f.AF&&"8Y"!==f.AF||E.W[D[A][0]]&&(D[A][0]=E.W[D[A][0]]),E.BW[D[A][0]]&&(D[A][0]=E.BW[D[A][0]]),E.W[D[A][0]]&&(D[A][0]=E.W[D[A][0]]),(F=f.A.FF()).5o=A,F.kq=0,F[ZC.1b[9]]=D[A][0],D[A][0]=ZC.AN.C2("xH",f.A,F,D[A][0],1c),ZC.1d(D[A][1]))1j(1a I=0;I<D[A][1].1f;I++)(F=f.A.FF()).5o=A,F.kq=I+1,F[ZC.1b[9]]=D[A][1][I],D[A][1][I]=ZC.AN.C2("xH",f.A,F,D[A][1][I],1c);m&&(D[A][0]=ZC.AN.YP(D[A][0],"%Y-%mm-%dd %H:%i:%s",f.UT,f.NE),"6O"===t&&(D[A][0]=\'"\'+D[A][0]+\'"\')),"6O"===t?h.1h([].4z(D[A][0]).4z(D[A][1]).2M(",")):"e4"===t?d.1h([].4z(D[A][0]).4z(D[A][1])):"4e"!==t&&"7X"!==t||h.1h("<td"+("7X"===t?\' xJ="5o"\':"")+">"+[].4z(D[A][0]).4z(D[A][1]).2M("</td><td>")+"</td>"),"4e"!==t&&"7X"!==t||h.1h("</tr>")}}"4e"!==t&&"7X"!==t||(h.1h("</xM>"),h.1h("</6s>")),a>1&&i<a-1&&("6O"===t?h.1h("","",""):"4e"!==t&&"7X"!==t||h.1h("<p>&8w;</p>"))}1l"7X"===t&&h.1h("</3s>","</4e>"),"e4"===t?d:("6O"===t?1b=h.2M("\\n"):"4e"!==t&&"7X"!==t||(1b=h.2M("")),1b)},1o.pK=1n(e,t,i){1a a,n,l,r,o,s="",C="";1n A(e){ZC.A4.a9({1J:"iL",3R:n,1T:e,aD:1n(e,t,i){l&&l(e,t,i)}})}2g.cQ("zc-5R")&&(e="zc-5R"),"3e"==1w(i=i||{})&&(i=3h.1q(i));1a Z=1o.7c(e);if(Z)1R(t){1i"xN":if(r="9I",1c!==ZC.1d(a=i.5F)&&(r=a),1c!==ZC.1d(a=i.xk)&&(r=a),"tB"===r&&(r="dR"),1o.3I.iu&&"2F"===Z.AB&&("9I"===r||"dR"===r)){Z.bV(!0);1a c=ZC.AK(Z.K+"-2F").6q.4o,p=c.1L(">"),u=c.1L("</2F>");c=(c=\'<2F eo:lj="79://8x.w3.eq/t4/lj" eo="79://8x.w3.eq/xS/2F" ad="1.1" 1s="\'+Z.I+\'" 1M="\'+Z.F+\'">[im]\'+c.2x(p+1,u+6)).1F(/<ll(.+?)<\\/ll>/g,"");1a h=1n(){1a e,t=2v.i4||2v.18B||2v;e=t.sX&&2v.lm?t.sX(1m 2v.lm([c],{1J:"4i/2F+ln;tk-tz-16"})):"1T:4i/2F+ln;tk=xx-8,"+fM(c),Z.bV(!1);1a a=1m 2v.cz;a.xn="xc",a.5a=e,a.iD=1n(){1a t=2g.4W("3c"),n=t.9k("2d");if(t.1s=a.1s,t.1M=a.1M,n.cv(a,0,0,t.1s,t.1M),i.5H&&"1n"==1w i.5H)4O{i.5H(t.k9("4i/"+r))}4M(l){i.5H(e)}}},1b=0,d=1n(){1a e=1m ig;e.bn("sA",Z.il[1b]),e.uN="1D",e.sE=1n(e){1a t=e.2X.xh,i=t.m2(/18e?:\\/\\/[^ \\)]+/g),a=0;i.17Z(1n(e){1a n=1m ig;n.bn("sA",e),n.uN="18d",n.sE=1n(n){1a l=1m 17M;l.sE=1n(n){t=t.1F(1m 5n(e),n.2X.17N),++a===i.1f&&(c=c.1F("[im]","[im]<1I><![17O["+t+"]]></1I>"),++1b===Z.il.1f?(c=c.1F("[im]",""),h()):d())},l.17Q(n.2X.xh)},n.8n()})},e.8n()};Z.il.1f?d():(c=c.1F("[im]",""),h())}if("3c"!==Z.AB&&!1o.io)1l-1;if("3c"===Z.AB){if(!i.5H||"1n"!=1w i.5H)1l Z.TL(r);4O{i.5H(Z.TL(r))}4M(B){i.5H(-1)}}1u Z.NF(r,{},!0,i.5H);1p;1i"17R":1i"17S":if(!i.fi&&"3c"!==Z.AB&&!1o.io)1l-1;if(r="9I",o={},1c!==ZC.1d(a=i.xj)&&(o=a),1c!==ZC.1d(a=i.cd)&&(o.cd=a),1c!==ZC.1d(a=i.3g)&&(o.3g=a),1c!==ZC.1d(a=i.5F)&&(r=a),1c!==ZC.1d(a=i.xk)&&(r=a),1c!==ZC.1d(a=i.jr)&&(s=a),n=Z.E.tv||"",1c!==ZC.1d(a=i.3R)&&(n=a),l=1c,1c!==ZC.1d(a=i.5H)&&(l=a),"tB"===r&&(r="dR"),i.fi&&("3c"!==Z.AB||"fQ"===r))1l o.fi=!0,""!==s&&(o.fn=s),8m Z.NF(r,o);if(""!==n){if("3c"===Z.AB)1l A(Z.TL(r));Z.NF(r,o,!0,1n(e){1l A(e)})}1p;1i"jo":if(n=Z.E.u4||"",1c!==ZC.1d(a=i.3R)&&(n=a),C=ZC.AN.17T(Z),""===n)1l C;l=1c,1c!==ZC.1d(a=i.5H)&&(l=a),ZC.A4.a9({1J:"iL",3R:n,1T:C,aD:1n(e,t,i){l&&l(e,t,i)}});1p;1i"xm":C=ZC.AN.ix(Z,"6O"),ZC.AN.u5(C,(i.fn||Z.K)+".6O","1D/6O;xr:tz-8");1p;1i"xo":C=ZC.AN.ix(Z,"7X"),ZC.AN.u5(C,(i.fn||Z.K)+".7X","fX/17U.ms-xq;xr:tz-8");1p;1i"17V":1a f=ZC.AN.ix(Z,"e4");if(!i.5H||"1n"!=1w i.5H)1l f;4O{i.5H(f,i.fn||Z.K)}4M(B){i.5H(-1)}1p;1i"xt":if("tL"===i.qW)if(C=ZC.AN.ix(Z,"4e"),ZC.AK(Z.K+"-1T-6s"))ZC.AK(Z.K+"-1T-6s").4o=C;1u{1a g=ZC.P.I1({id:Z.K+"-1T-6s",2o:"zc-1T-6s "+Z.K+"-1T-6s"});ZC.P.PQ(g,{1s:Z.I+"px","1X-1M":"17L",9J:"3i"}),g.4o=C,ZC.AK(Z.K).6q.iz(g,ZC.AK(Z.K).su)}1u"sr"===i.qW&&ZC.P.ET(Z.K+"-1T-6s")}1l 1c},ZC.vE={},ZC.AN.XE=1n(e){1j(1a t,i="",a=!1,n=!1,l=0,r="",o=0,s=(e=e.1F(/\\t|\\r|\\n/g,"")).1f;o<s;o++)1R(t=e.5y(o,1)){1i\'"\':a=!a,i+=e.5y(o,1),r=t;1p;1i"{":i+=e.5y(o,1),a||(i+="\\n"+1m 3N(l+1).2M("    "),l++,r=t);1p;1i"}":a||(i+="\\n"+1m 3N(l).2M("    "),l--,r=t),i+=e.5y(o,1);1p;1i"[":1a C=e.1L("]",o),A=e.1L("}",o);A=-1===A?wo:A;1a Z=e.1L("{",o);Z=-1===Z?wo:Z,C<ZC.CV(A,Z)?(n=!0,i+=e.5y(o,1)):(n=!1,i+=e.5y(o,1),i+="\\n"+1m 3N(l+1).2M("    "),l++),r=t;1p;1i"]":n&&(n=!1),"}"===r&&(l--,i+="\\n"+1m 3N(l).2M("    ")),i+=e.5y(o,1),r=t;1p;1i" ":a&&(i+=e.5y(o,1),r=t);1p;1i",":i+=e.5y(o,1),a||n||(i+="\\n"+1m 3N(l).2M("    ")),r=t;1p;2q:i+=e.5y(o,1),r=t}1l i},RZ.5m.k7=1n(){1a e=1g;ZC.AN.C2("182",e,e.FF());1a t=ZC.P.I1({2o:"zc-3l zc-4P zc-1I",id:e.K+"-4P",p:ZC.AK(e.K+"-1v"),wh:e.I-(ZC.9a?0:10)+"/"+(e.F-(ZC.9a?0:10))});t.1I.9S=99,t.4o=ZC.jz(\'<3E 1O="zc-4H-5o-1H zc-4H-s1">&8w;<a 7B="7y:8m(0)" id="\'+e.K+\'-4P-g1" 1O="zc-cL-6L">\'+ZC.HF["4P-g1"]+\'</a>&8w;<a 7B="7y:8m(0)" id="\'+e.K+\'-4P-fq" 1O="zc-cL-fD">\'+ZC.HF["4P-fq"]+\'</a></3E><3E 1O="zc-4H-5o-ap"><c4 id="\'+e.K+\'-4P-4G" 1I="1s:\'+(e.I-35)+"px;1M:"+(e.F-95)+\'px;"></c4></3E><3E 1O="zc-4H-5o-ap zc-4H-5o-8e" id="\'+e.K+\'-4P-vh"><a5 1J="7O" 1U="\'+ZC.HF["4P-7l"]+\'" id="\'+e.K+\'-4P-7l" /></3E>\'),1o.r3&&(ZC.AK(e.K+"-4P-vh").4o+=\'<a5 1J="7O" 1U="\'+ZC.HF["4P-9l"]+\'" id="\'+e.K+\'-4P-9l" />\'),ZC.A4("#"+e.K+"-4P-4G").8L(ZC.AN.XE(e.E.7k)),ZC.A4("#"+e.K+"-4P-fq").3t("3J",1n(){ZC.AK(e.K+"-4P-fq").82="zc-cL-6L",ZC.AK(e.K+"-4P-g1").82="zc-cL-fD",ZC.A4("#"+e.K+"-4P-4G").8L(ZC.AN.XE(e.E.4G))}),ZC.A4("#"+e.K+"-4P-g1").3t("3J",1n(){ZC.AK(e.K+"-4P-fq").82="zc-cL-fD",ZC.AK(e.K+"-4P-g1").82="zc-cL-6L",ZC.A4("#"+e.K+"-4P-4G").8L(ZC.AN.XE(e.E.7k))}),ZC.A4("#"+e.K+"-4P-7l").3t("3J",1n(){ZC.AN.C2("vj",e,e.FF()),ZC.P.ET(e.K+"-4P")}),1o.r3&&ZC.A4("#"+e.K+"-4P-9l").3t("3J",1n(){ZC.AN.C2("vj",e,e.FF());1a t=ZC.A4("#"+e.K+"-4P-4G").8L();ZC.P.ET(e.K+"-4P"),1o.3p(e.K,"b3",{1T:t})})},RZ.5m.jW=1n(){1a e=1g;if(e.I<fc||e.F<fc)2v.bn("79://8x.1o.bs/uY/","","");1u{1a t=ZC.P.I1({2o:"zc-3l zc-4r zc-1I",id:e.K+"-4r",p:ZC.AK(e.K+"-1v"),wh:e.I-(ZC.9a?0:10)+"/"+(e.F-(ZC.9a?0:10))}),i="";i+=\'<3E 1O="zc-4H-5o-1H zc-4H-s0">\'+ZC.HF["4r-5Z"]+\'</3E><3E 1O="zc-4H-5o-1H"><a5 1J="vm" id="\'+e.K+\'-qN" gb="gb" /><1H 1j="\'+e.K+\'-qN">\'+ZC.HF["4r-vk"]+"</1H>",ZC.3c&&(i+=\'&8w;&8w;&8w;&8w;&8w;<a5 1J="vm" id="\'+e.K+\'-qM" gb="gb" /><1H 1j="\'+e.K+\'-qM">\'+ZC.HF["4r-vn"]+"</1H>"),i+=\'</3E><3E 1O="zc-4H-5o-1H zc-4H-s1">\'+ZC.HF["4r-vo"]+\'</3E><3E 1O="zc-4H-5o-ap"><c4 id="\'+e.K+\'-4r-vy" 1I="1s:\'+(e.I-35)+"px;1M:"+((e.F-fc)/2-10)+\'px;"></c4></3E><3E 1O="zc-4H-5o-1H zc-4H-s1">\'+ZC.HF["4r-vp"]+\'</3E><3E 1O="zc-4H-5o-ap"><c4 id="\'+e.K+\'-4r-4G" 1I="1s:\'+(e.I-35)+"px;1M:"+(e.F-186)/2+\'px;"></c4></3E><3E 1O="zc-4H-5o-1H zc-4H-s1">\'+ZC.HF["4r-vg"]+(e.I>=188?" <7J>("+ZC.HF["4r-vq"]+")</7J>":"")+\'</3E><3E 1O="zc-4H-5o-ap"><a5 1J="1D" id="\'+e.K+\'-4r-qD" 1I="1s:\'+(e.I-35)+\'px;" /></3E><3E 1O="zc-4H-5o-ap zc-4H-5o-8e"><a5 1J="7O" 1U="\'+ZC.HF["4r-fY"]+\'" id="\'+e.K+\'-4r-fY" /><a5 1J="7O" 1U="\'+ZC.HF["4r-jB"]+\'" id="\'+e.K+\'-4r-jB" /></3E>\',t.4o=ZC.jz(i),ZC.A4("#"+e.K+"-4r-4G").8L("18a\\n----------\\n"+ZC.AN.XE(e.E.4G)+"\\n\\18I\\n----------\\n"+ZC.AN.XE(e.E.7k)),ZC.A4("#"+e.K+"-4r-jB").3t("3J",1n(){ZC.P.ET(e.K+"-4r")}),ZC.A4("#"+e.K+"-4r-fY").3t("3J",1n(){1a t=ZC.A4("#"+e.K+"-4r-qD");if(/^((\\w+\\+*\\-*)+\\.?)+@((\\w+\\+*\\-*)+\\.?)*[\\w-]+\\.[a-z]{2,6}$/.5O(t.8L())){1a i="";ZC.3c&&(i=e.TL("9I"));1a a=("vs:"+e.E.4G+" vx:"+e.E.7k).1F(/\\r|\\n|\\t|(\\s{2,})/g,""),n="",l=[];ZC.A4("#"+e.K+"-qM").3T("gb")&&l.1h("****19b:",i),ZC.A4("#"+e.K+"-qN").3T("gb")&&l.1h("****3h:",a),l.1h("****199:",ZC.A4("#"+e.K+"-4r-vy").8L(),"****18W:",t.8L(),"****g2:",ZC.g2,"****18M:",e.I,"****18N:",e.F,"****i4:",2v.8d.7B,"****UA:",8Q.cP,"****18O:",e.AB.5E(),"****18P:",vz.1s+"x"+vz.1M);1j(1a r=0;r<l.1f-1;r+=2)n+=l[r]+fM(l[r+1]);n+="****18Q";1a o=ZC.P.s8(ZC.AK(e.K+"-4r")),s=o.4W("vr");s.8h=2g.8d.iT+"//8x.1o.bs/uY/18R.18S",s.9M="iL",o.3s.3b(s);1a C=o.4W("uS");C.1J="1D",C.8C="1T",C.1U=n,s.3b(C),s.fY(),2v.5I(1n(){uT(ZC.HF["4r-uU"]),ZC.P.ET(e.K+"-4r")},5L)}1u t.8L(ZC.HF["4r-uV"])})}},RZ.5m.tV=1n(){1a e,t,i,a=1g;ZC.P.ET([a.K+"-4X-2R",a.K+"-4X-cb-2R",a.K+"-4X-dT-2R",a.K+"-4X-5c",a.K+"-4X-cb-5c",a.K+"-4X-dT-5c"]),1c!==ZC.1d(e=a.o.4X)&&(a.IB=1m DP(a),a.B9.2y(a.IB.o,"6J.5k.4X"),a.IB.1C(e),a.IB.1q(),a.IB.m6=!0,t=1m DS(a),a.B9.2y(t.o,"6J.5k.4X.1P"),t.1C(e.1P),t.1q(),i=1m DS(a),a.B9.2y(i.o,"6J.5k.4X.1P-6U"),i.1C(e.1P),i.1C(e["1P-6U"]),i.1q());1a n="";if(a.IB){a.IB.K=a.K+"-4X",a.IB.Z=a.IB.C6=ZC.AK(a.K+"-8N-c"),a.IB.1t();1a l=a.IB.iX+a.IB.EM,r=a.IB.iY+a.IB.FL,o=a.IB.I-a.IB.EM-a.IB.FM,s=a.IB.F-a.IB.FL-a.IB.FT,C=1m DS(a);C.K=a.K+"-4X-cb",C.1S(t),C.CX=!1,0===a.NZ&&C.1S(i),C.D=[[l,r+s/2],[l+o/3,r],[l+o/3,r+s],[l,r+s/2]],C.IP=ZC.AK(a.A.K+"-1D"),C.Z=C.C6=ZC.AK(a.K+"-8N-c"),C.1q(),C.1t(),a.NZ>0&&(n+=ZC.P.GF("5t",!0)+\'1O="\'+a.K+\'-4X-1N zc-4X-1N" id="\'+a.K+"-4X-cb-1N"+ZC.1b[30],n+=ZC.1k(l+ZC.3B)+","+ZC.1k(r+ZC.3B)+","+ZC.1k(l+o/3+ZC.3B)+","+ZC.1k(r+s+ZC.3B),n+=\'" />\');1a A=1m DS(a);A.K=a.K+"-4X-dT",A.1S(t),A.CX=!1,a.NZ!==a.R2.1f-1&&0!==a.R2.1f||A.1S(i),A.D=[[l+o,r+s/2],[l+2*o/3,r],[l+2*o/3,r+s],[l+o,r+s/2]],A.IP=ZC.AK(a.A.K+"-1D"),A.Z=A.C6=ZC.AK(a.K+"-8N-c"),A.1q(),A.1t(),a.NZ<a.R2.1f-1&&(n+=ZC.P.GF("5t",!0)+\'1O="\'+a.K+\'-4X-1N zc-4X-1N" id="\'+a.K+"-4X-dT-1N"+ZC.1b[30],n+=ZC.1k(l+2*o/3+ZC.3B)+","+ZC.1k(r+ZC.3B)+","+ZC.1k(l+o+ZC.3B)+","+ZC.1k(r+s+ZC.3B),n+=\'" />\'),""!==n&&(ZC.AK(a.K+"-3f").4o+=n),a.rB=1n(e){e.2X.id===a.K+"-4X-cb-1N"?1o.3p(a.K,"cc"):e.2X.id===a.K+"-4X-dT-1N"&&1o.3p(a.K,"ca")},ZC.A4("."+a.K+"-4X-1N").4g("3J",a.rB)}},ZC.AM={fK:1,DZ:0,E0:0,FS:40},ZC.DE={nH:1n(e,t){1a i,a;1l t.AA%180==0?(i=1m CB(e,-e.I/2,t.iY-e.iY-e.F/4,0),a=1m CB(e,e.I/2,t.iY-e.iY-e.F/4,0)):(i=1m CB(e,t.iX-e.iX-e.I/4,-e.F/2,0),a=1m CB(e,t.iX-e.iX-e.I/4,e.F/2,0)),ZC.U4(1A.af((a.E9[1]-i.E9[1])/(a.E9[0]-i.E9[0])))+(t.AA%180==0?0:t.AA%2m==90?90:-90)},D9:1n(e,t,i,a,n,l,r,o,s){s=s||"z";1a C,A,Z,c,p=1m eE(e,t);1R(s){1i"x":C=1m CB(t,i,n,r),A=1m CB(t,a,n,r),Z=1m CB(t,a,l,o),c=1m CB(t,i,l,o);1p;1i"y":C=1m CB(t,i,n,r),A=1m CB(t,i,l,r),Z=1m CB(t,a,l,o),c=1m CB(t,a,n,o);1p;1i"z":C=1m CB(t,i,n,r),A=1m CB(t,i,n,o),Z=1m CB(t,a,l,o),c=1m CB(t,a,l,r)}1l p.2Q(C),p.2Q(A),p.2Q(Z),p.2Q(c),p},D5:1n(e,t,i,a){1w a===ZC.1b[31]&&(a=!1);1a n,l=1c,r=1c;i 3F 3N?l=i:(l=i.2W,r=i.sL);1j(1a o=1m eE(e,t),s=0,C=l.1f;s<C;s++)1c!==ZC.1d(l[s])&&(a?o.2Q(l[s],r?r[s]:1c):o.2Q(1m CB(t,l[s][0],l[s][1],l[s][2]),r?1m CB(t,r[s][0],r[s][1],r[s][2]):1c));1l(n=e.o["z-198"])&&(o.MI=[ZC.1k(n),ZC.1k(n),ZC.1k(n)]),o}};1O CB 2k ao{2G(e,t,i,a){1E(),1g.1q(e,t,i,a)}1q(e,t,i,a){1a n=1g;n.C=e,n.iX=t,n.iY=i,a-=n.C.EX.5v/2,n.iZ=a,n.EK=0,n.EI=0,n.dK=0,n.E9=[];1a l=n.C.EX.2f,r=n.C.EX.3H;if(n.C.EX.7G){1a o={x:t,y:i,z:a},s={x:0,y:0,z:0},C={x:n.C.EX[ZC.1b[27]],y:n.C.EX[ZC.1b[28]],z:n.C.EX[ZC.1b[29]]},A=2*1A.PI/2m,Z=1A.eB(C.x*A),c=1A.eB(C.y*A),p=1A.eB(C.z*A),u=1A.eA(C.x*A),h=1A.eA(C.y*A),1b=1A.eA(C.z*A);n.EK=h*(p*(o.y-s.y)+1b*(o.x-s.x))-c*(o.z-s.z),n.EI=Z*(h*(o.z-s.z)+c*(p*(o.y-s.y)+1b*(o.x-s.x)))+u*(1b*(o.y-s.y)-p*(o.x-s.x)),n.dK=u*(h*(o.z-s.z)+c*(p*(o.y-s.y)+1b*(o.x-s.x)))-Z*(1b*(o.y-s.y)-p*(o.x-s.x)),n.E9[0]=ZC.AM.DZ+ZC.AM.fK/(ZC.AM.fK+n.dK)*n.EK*r,n.E9[1]=ZC.AM.E0+ZC.AM.fK/(ZC.AM.fK+n.dK)*n.EI*r}1u n.E9[0]=ZC.AM.DZ+t+a*ZC.EF(l)*r,n.E9[1]=ZC.AM.E0+i-a*ZC.EL(l)*r}}1o.18U=1n(e,t,i,a){1l 1m CB(e,t,i,a)};1O eE 2k ao{2G(e,t){1E();1a i=1g;i.C=t,i.N=e,i.K="",i.KE=!1,i.MI=[1,1,1],i.G0=-1,i.D=[],i.PL=[],i.SX=-6H,i.gw=-6H,i.n5=6H,i.mg=6H,i.rN=6H,i.mb=0,i.gx=0,i.rQ=0}2Q(e,t){1g.D.1h(e),1g.PL.1h(t||e)}Bc(){1j(1a e=1g,t=e.PL.1f,i=0;i<t;i++){1a a=e.PL[i];e.SX=ZC.BO(e.SX,a.iZ),ZC.2t(e.C.EX.7G)?(e.n5=ZC.CV(e.n5,a.iZ),e.gw=ZC.BO(e.gw,a.dK),e.gx+=a.iY):(e.mg=ZC.CV(e.mg,a.iX),e.rN=ZC.CV(e.rN,a.iY),e.mb+=a.iX,e.gx+=a.iY,e.rQ+=a.iZ)}e.mb/=t,e.gx/=t,e.rQ/=t}F1(){1j(1a e=1g,t="",i=0,a=e.D.1f;i<a;i++)t+=ZC.1k(e.D[i].E9[0]+ZC.3B)+","+ZC.1k(e.D[i].E9[1]+ZC.3B)+",";1l t=t.2x(0,t.1f-1)}}1O VI 2k ao{2G(){1E();1a e=1g;e.eL=[],e.18L={},e.XD=[],e.SR={}}3k(){1a e=1g;e.eL=[],e.XD=[],e.SR={}}2Q(e){1g.eL.1h(e)}Gi(e,t){1l 1===1o.d4?e[0][0]>t[0][0]?-1:e[0][0]<t[0][0]?1:e[0][1]>t[0][1]?1:e[0][1]<t[0][1]?-1:e[0][2]>t[0][2]?-1:e[0][2]<t[0][2]?1:e[0][3]>t[0][3]?-1:e[0][3]<t[0][3]?1:0:2===1o.d4?-1!==e[0][3]||-1!==t[0][3]?e[0][3]>t[0][3]?1:e[0][3]<t[0][3]?-1:0:e[0][0]>t[0][0]?-1:e[0][0]<t[0][0]?1:e[0][1]>t[0][1]?1:e[0][1]<t[0][1]?-1:e[0][2]>t[0][2]?1:e[0][2]<t[0][2]?-1:0:3===1o.d4?e[0]>t[0]?-1:e[0]<t[0]?1:0:8m 0}}1O rR 2k ao{2G(e){1E(e);1a t=1g;t.H=e,t.VW=!1,t.P1=mW,t.GG=0,t.IJ=0,t.GY=20,t.B7="",t.CD=[],t.A8=1c}eJ(){1a e=1g;ZC.2L||(e.VW?(1c!==ZC.1d(e.C4)&&2v.9X(e.C4),e.C4=2v.fb(1n(){1a t=e.H.K,i=ZC.A4("#"+t+("2F"===e.H.AB?"-1v":"-46")),a=ZC.DU[0]-i.2b().1K,n=ZC.DU[1]-i.2b().1v;ZC.DQ(a,e.GG,e.GG+e.A8.I)&&ZC.DQ(n,e.IJ,e.IJ+e.A8.F)||(1c!==ZC.1d(e.C4)&&2v.9X(e.C4),e.5e())},e.P1)):e.5e())}3k(){1a e=1g;ZC.P.IM(ZC.AK(e.H.K+"-2H-c"),e.H.AB,e.iX,e.iY,e.I,e.F,e.K)}5e(){if(!ZC.lV){1a e=1g.H.K;ZC.P.ET([e+"-2H-1D",e+"-2H",e+"-2H-1D-8X"]),"2F"===1g.H.AB&&ZC.A4("uX").5f(1n(){-1!==1g.id.1L("-18V-3u")&&ZC.P.ET(1g.id)})}}4n(e){1a t,i=1g;1c!==ZC.1d(i.C4)&&2v.9X(i.C4);1a a=i.H.K;if(0!==ZC.A4("#"+a+"-2H-c").1f&&i.A8){1a n=ZC.al(i.H.K),l=ZC.P.MJ(e),r=ZC.A4("#"+a+("2F"===i.H.AB?"-1v":"-46")),o=l[0]-r.2b().1K-i.A8.I*n[0]/2,s=l[1]-r.2b().1v-i.A8.F*n[1],C=o,A=1+2*i.A8.JX;if(1c!==ZC.1d(i.A8.o.x)&&((o=ZC.IL(i.A8.o.x,!0))>0&&o<1&&(o=ZC.1k(i.H.I*o)),i.A8.o.7A&&(o-=i.A8.I/2)),1c!==ZC.1d(i.A8.o.y)&&((s=ZC.IL(i.A8.o.y,!0))>0&&s<1&&(s=ZC.1k(i.H.F*s)),i.A8.o.7A&&(s-=i.A8.F/2)),o+=ZC.1k(i.A8.E["2b-x"]),s+=ZC.1k(i.A8.E["2b-y"]),"2F"===i.H.AB||!i.A8.o[ZC.1b[7]]){1a Z=0,c=!1,p=i.A8.ER;o/n[0]<A&&(Z=C/n[0]-A-i.A8.H6/2,o=A),o/n[0]+i.A8.I>i.H.I-A&&(Z=C/n[0]+i.A8.I-i.H.I+A+i.A8.H6/2,o=(i.H.I-A-i.A8.I)*n[0]),s/n[1]<A&&(i.CD.2r||!i.A8.o[ZC.1b[7]]?(s=A+ZC.1k(i.A8.E["2b-y"]),s=i.CD.2r?s<A?A:s:s<A?l[1]-r.2b().1v-ZC.1k(i.A8.E["2b-y"]):s,p="1v",c=!0):s=A+(l[1]-r.2b().1v-ZC.1k(i.A8.E["2b-y"]))),s/n[1]+i.A8.F>i.H.F-A&&(s=i.H.F-A-i.A8.F,!i.CD.2r&&i.A8.o[ZC.1b[7]]||(p="1v",c=!0)),0===Z&&!c||"xy"===i.A8.o[ZC.1b[7]]||i.A8.Z&&(i.3k(),c&&(i.A8.ER=p),Z=ZC.CV(Z,i.A8.I/2-i.A8.H6/2),Z=48*(Z=ZC.BO(Z,-i.A8.I/2+i.A8.H6/2))/(i.A8.I/2-i.A8.H6/2),i.A8.EU=Z,i.A8.AL&&i.A8.1t())}1R(i.GG=o,i.IJ=s,i.H.AB){1i"2F":1c===ZC.1d(i.A8.o.x)&&1c===ZC.1d(i.A8.o.y)&&ZC.AK(a+"-2H").4m("5J","77("+o/n[0]+","+s/n[1]+")"),i.A8.E["4e-4E"]&&ZC.P.PQ(ZC.AK(a+"-2H-1D-8X"),{1K:(""===i.B7?o/n[0]:i.A8.iX)+i.A8.EM+"px",1v:(""===i.B7?s/n[1]:i.A8.iY)+i.A8.FL+"px"});1p;1i"3L":1c===ZC.1d(i.A8.o.x)&&1c===ZC.1d(i.A8.o.y)&&ZC.P.PQ(ZC.AK(a+"-2H"),{1K:o+"px",1v:s+"px"});1p;1i"3c":1c!==ZC.1d(i.CD.x)&&(o=i.CD.x),1c!==ZC.1d(i.CD.y)&&(s=i.CD.y);1a u=i.A8.E["4e-4E"]?0:20;1R(i.A8.X3){1i"tl":1p;1i"tr":o-=i.A8.I;1p;1i"bl":s-=i.A8.F;1p;1i"br":o-=i.A8.I,s-=i.A8.F;1p;1i"c":o-=i.A8.I/2,s-=i.A8.F/2;1p;1i"t":o-=i.A8.I/2;1p;1i"r":o-=i.A8.I,s-=i.A8.F/2;1p;1i"b":o-=i.A8.I/2,s-=i.A8.F;1p;1i"l":s-=i.A8.F/2}ZC.P.PQ(ZC.AK(a+"-2H-c"),{1K:o/n[0]-u+"px",1v:s/n[1]-u+"px"}),1c!==(t=ZC.AK(a+"-2H-1D"))&&(t.1I.3M="2a",ZC.P.PQ(t,{1s:i.A8.I+"px",1M:i.A8.F+"px",1K:o/n[0]+"px",1v:s/n[1]+"px"}),t.1I.3M="8K")}}}gT(e){1g.4n(e)}eK(e,t){1a i,a,n,l,r,o,s,C=1g,A=C.H.K,Z=e.9G||e.2X.id,c=Z.1F(/--([a-zA-Z0-9]+)/,"").1F("-bN-1N","-1N").1F("-1N-2R","").1F("-2R","").1F("-1Q-3A","").1F("-1Q","").2p("-").9D(),p=Z.2p("--"),u=!1,h=!1,1b=!1;if("2r"===c[1]&&"1B"===c[3]&&"cE"===c[4]&&(u=!0),ZC.P.ET([A+"-2H-1D",A+"-2H",A+"-2H-1D-8X"]),u){if(!(l=C.H.OH(c[5])))1l;if(r=l.AY.A7[c[2]],o=r.FR(c[0]),"xy"===l.AJ.3w&&o.RU(),!o)1l;ZC.A4("#"+A+"-3a-"+c[5]+"-1B-"+c[2]+"-bg-2N-c").4n()}1u"1V"===c[2]&&0===c[1].1L("1P")&&(h=!0),0!==c[2].1L("1z")||0!==c[1].1L("1P")&&0!==c[1].1L("1Q")||(1b=!0),l=C.H.OH(c[3]);if(ZC.AK(A+"-2H")||(ZC.P.K3({id:A+"-2H",p:ZC.AK(A+"-46"),2o:"zc-3l zc-2H",wh:C.H.I+"/"+C.H.F,9J:"97"},C.H.AB),ZC.P.HI({id:A+"-2H-c",p:ZC.AK(A+"-2H"),2o:"zc-3l",tl:"-4L/-4L",1s:140,1M:60},C.H.AB)),C.A8=1o.6f.aF("DP",C,A+"-2H-1D"),C.A8.OG="2H",C.A8.A=C.H,l&&l.A8&&C.A8.1S(l.A8),u)C.A8.1C(r.A8.o),l.CW["p"+r.L]&&l.CW["p"+r.L]["n"+o.L]&&C.A8.1C(r.A8.o[ZC.1b[73]]),2===p.1f&&C.A8.1C(r.nI(p[1]));1u{1a d=!1;if(h&&l.BB&&1c!==ZC.1d(l.BB.o.2H)&&(C.A8.o.1D="",C.A8.1C(l.BB.o.2H),d=!0),1b){C.A8.1C({"1W-1r":"#2T","1G-1s":1,"1G-1r":"#4L"});1a f=l.BK(c[2].1F(/\\1b/g,"-"));if(f&&1c!==ZC.1d(f.o.2H)&&(C.A8.o.1D="",C.A8.1C(f.o.2H),d=!0),0===c[1].1L("7E"))f&&(-1!==c[1].1L("v6")&&f.o.1H&&f.o.1H.2H?(C.A8.o.1D="",C.A8.1C(f.o.1H.2H),d=!0):f.o.1P&&f.o.1P.2H&&(C.A8.o.1D="",C.A8.1C(f.o.1P.2H),d=!0));1u if(0===c[1].1L("aI")){1a g=ZC.1k(c[1].1F("aI",""));f.QF[g]&&f.QF[g].o.1H&&f.QF[g].o.1H.2H&&(C.A8.o.1D="",C.A8.1C(f.QF[g].o.1H.2H),d=!0)}}if("2S"===c[2])if(C.A8.1C({"1W-1r":"#2T","1G-1s":1,"1G-1r":"#4L"}),e.2X.bP("1T-kN"))C.A8.1C({1D:e.2X.bP("1T-2H-1D")}),d=!0;1u 1j(a=0,n=l.FH.1f;a<n;a++)if(1c!==ZC.1d(l.FH[a])){1a B=l.FH[a]3F QY?l.FH[a].BD:l.FH[a];l.K+"-2S-"+c[1]===l.FH[a].K&&1c!==ZC.1d(i=B.o.2H)&&(C.A8.1C(i),C.A8.o.7A&&(C.A8.o.x=B.iX,C.A8.o.y=B.iY),d=!0)}if("1H"===c[2])1j(C.A8.1C({"1W-1r":"#2T","1G-1s":1,"1G-1r":"#4L"}),a=0,n=l.BW.1f;a<n;a++)l.K+"-1H-"+c[1]===l.BW[a].K&&1c!==ZC.1d(i=l.BW[a].o.2H)&&(C.A8.1C(i),C.A8.o.7A&&(C.A8.o.x=l.BW[a].iX+l.BW[a].I/2,C.A8.o.y=l.BW[a].iY+l.BW[a].F/2),d=!0);if("xy"===c[2]&&(C.A8.1C({"1W-1r":"#2T","1G-1s":1,"1G-1r":"#4L"}),d=!0),!d)1l}if(t&&C.A8.1C(t),C.VW=!1,C.P1=mW,1c!==ZC.1d(i=C.A8.o.18Y)&&(C.VW=ZC.2t(i)),1c!==ZC.1d(i=C.A8.o.hm)&&(C.P1=ZC.1k(i)),1c!==ZC.1d(i=C.A8.o[ZC.1b[7]])?C.B7=i:C.B7="",1c!==ZC.1d(i=C.A8.o.6N)&&(C.GY=ZC.1k(i)),C.A8.iX=0,C.A8.iY=0,C.A8.Z=C.A8.C6=ZC.AK(A+"-2H-c"),u){s=o.KC(),o.GK(s),1c!==ZC.1d(s["1y-1r"])?C.A8.A0=C.A8.AC=ZC.AN.JL(s["1y-1r"]):C.A8.A0=C.A8.AC=ZC.AN.JL(s[ZC.1b[0]]),C.A8.BU=s[ZC.1b[61]],C.A8.C0=s.1r,1c!==ZC.1d(r.o.an)?(C.bp||(C.bp=1m II(r.A),C.bp.E["Eu-1q"]=!0),C.bp.1C(r.o),C.bp.1q(),C.bp.IY=1n(e){1l o.IY(e)},C.bp.DB()&&C.bp.1q(),C.A8.AP=C.bp.K4):C.A8.AP=r.K4;1a v=ZC.AN.P2(C.A8.o,r.o);C.A8.EW=1n(e){1l o.EW(e,v)},C.A8.E.74=o.A.L,C.A8.E.7w=o.L}1u if(h){1j(r=l.AY.A7[c[1].1F("7E","")],C.A8.1C(r.o["1V-2H"]),o=1c,a=0,n=r.S.1f;a<n;a++)if(1c!==r.S[a]){o=r.FR(a);1p}if(o){if("-1"===(s=o.KC())[ZC.1b[0]])1l;C.A8.A0=C.A8.AC=ZC.AN.JL(s[ZC.1b[0]]),C.A8.C0=s.1r}1u C.A8.A0=C.A8.AC=ZC.AN.JL(r.BN[1]),C.A8.C0=r.BN[0];C.A8.AP=r.ZI,C.A8.EW=1n(e){1l e=(e=e.1F(/%1B-tm/g,r.ZI)).1F(/%1B-1D|%t/g,r.AP)}}1u if(1b){if(0===c[1].1L("7E")){1a E=c[1].1F("7E","").2p("1b"),b=1===E.1f?ZC.1k(E[0]):ZC.1k(E[1]);C.A8.EW=1n(e){e=e||"%1z-1U";1a t=f.BW[b]||f.W[b];if(f.FG){1a i={"5J-5C":!0,"5J-5C-5F":f.FG.o.4q||f.FG.o.1D||"",cR:l.UT,cN:l.NE};t=ZC.AN.GH(t,i,C.A,!!f.FG&&f.FG)}1j(1a a in"92"==1w t&&f.IU&&1c!==ZC.1d(f.IU[t])&&(t=f.IU[t]),e=(e=e.1F(/%1D|%1P-1D|%1z-1U|%v/g,t)).1F(/%2H-1D/g,f.oI[b]||""),f.o)f.o.88(a)&&"1T-"===a.2x(0,5)&&(e=e.1F("%"+a,f.o[a][b]||"","g"));1l e}}}1u C.A8.EW=1n(e){1l e};if(1c===ZC.1d(C.A8.o["1D-2n"])&&(C.A8.o["1D-2n"]=1),C.A8.1q(),!u&&"3c"!==C.H.AB&&C.A8.o.7A&&(C.A8.iX=C.A8.iX-C.A8.I/2+C.A8.BJ,C.A8.iY=C.A8.iY-C.A8.F/2+C.A8.BC),C.A8.AL){1a m,K;if(C.A8.I6&&(u&&C.A8.GK(C.A8,C.A8,1c,o.LI(e,!1)),C.A8.1q()),C.A8.E["4e-4E"]=!1,1c!==ZC.1d(i=C.A8.o["4e-4E"])&&(C.A8.E["4e-4E"]=ZC.2t(i)),u&&(C.A8.IY=1n(e){1l o.IY(e)},C.A8.DB()&&C.A8.1q()),"3c"!==C.H.AB&&"3L"!==C.H.AB||0===C.A8.AA)m=C.A8.I+C.A8.JX,K=C.A8.F+C.A8.JX,m+=40,K+=40,C.A8.E["2b-x"]=C.A8.BJ,C.A8.E["2b-y"]=C.A8.BC;1u{1a D=1.25*ZC.BO(C.A8.I,C.A8.F)+C.A8.JX;m=D,K=D,C.A8.iX+=(D-C.A8.I)/2,C.A8.iY+=(D-C.A8.F)/2,C.A8.E["2b-x"]=-(D-C.A8.I)/2+C.A8.BJ,C.A8.E["2b-y"]=-(D-C.A8.F)/2+C.A8.BC}if(ZC.A4("#"+A+"-2H-c").3T(ZC.1b[19],m).3T(ZC.1b[20],K),"3L"===C.H.AB&&ZC.P.PQ(ZC.AK(A+"-2H-c"),{1v:0,1K:0}),C.A8.QH=C.A8.BJ,C.A8.LA=C.A8.BC,C.A8.BJ=0,C.A8.BC=0,!e.1J&&u&&("3c"===C.H.AB?(1c===ZC.1d(C.A8.o.x)&&(C.A8.o.x=o.iX-C.A8.I/2),1c===ZC.1d(C.A8.o.y)&&(C.A8.o.y=o.iY-C.A8.F)):(1c===ZC.1d(C.A8.o.x)&&(C.A8.iX=o.iX-C.A8.I/2),1c===ZC.1d(C.A8.o.y)&&(C.A8.iY=o.iY-C.A8.F-20))),u&&(C.CD=C.v7(o),""!==C.B7&&("3c"!==C.H.AB?(C.A8.o.x=C.A8.iX=C.CD.x,C.A8.o.y=C.A8.iY=C.CD.y):(C.A8.o.x=C.A8.iX=0,C.A8.o.y=C.A8.iY=0),C.A8.ER=C.CD.cp,C.A8.EU=C.CD.co)),C.A8.AL&&""!==C.A8.AP&&("3c"===C.H.AB&&(C.A8.E["4e-4E"]||(C.A8.iX=20,C.A8.iY=20)),C.A8.1t()),(e.1J&&u||e.3S)&&(o.X2(),o.C.PV(!0)),e.1J||"3c"===C.H.AB)C.4n(e);1u if(C.A8.E["4e-4E"]){1a F=C.A8.iX+C.A8.EM,I=C.A8.iY+C.A8.FL;ZC.P.PQ(ZC.AK(A+"-2H-1D-8X"),{1K:F+"px",1v:I+"px",9S:1o.sp})}}}v7(e){1a t,i=1g,a={},n=i.A8.H6,l=i.A8.G4,r=i.A8.I,o=i.A8.F;if(i.A8.E["4e-4E"]&&("cf"===i.B7||"9h"===i.B7||"2r:"===i.B7.2x(0,5))&&(i.A8.iX=-6H,i.A8.iY=-6H,i.A8.AL)){i.A8.1t();1a s=ZC.A4("#"+i.H.K+"-2H-1D-"+("3c"===i.H.AB?"t":"8X"));r=s.1s()+i.A8.EM+i.A8.FM,o=s.1M()+i.A8.FL+i.A8.FT,1c!==ZC.1d(i.A8.o[ZC.1b[19]])&&(r=ZC.1k(i.A8.o[ZC.1b[19]])),1c!==ZC.1d(i.A8.o[ZC.1b[20]])&&(o=ZC.1k(i.A8.o[ZC.1b[20]]))}if("cf"===i.B7)e.iX+e.I/2<e.C.iX+e.C.I/2?(a.x=e.iX+0*e.I+i.GY,a.y=e.iY+0*e.F/2-o/2,a.cp="1K"):(a.x=e.iX-r-i.GY,a.y=e.iY+0*e.F/2-o/2,a.cp="2z"),a.y<5&&(t=5-a.y,a.co=-ZC.1k(100*t/(o-l)),a.y=5),a.y+o>i.H.F-5&&(t=i.H.F-5-a.y-o,a.co=-ZC.1k(100*t/(o-l)),a.y=i.H.F-5-o);1u if("9h"===i.B7)e.iY+e.F/2<e.C.iY+e.C.F/2?(a.y=e.iY+0*e.F+i.GY,a.x=e.iX+0*e.I/2-r/2,a.cp="1v"):(a.y=e.iY-o-i.GY,a.x=e.iX+0*e.I/2-r/2,a.cp="2c"),a.x<5&&(t=5-a.x,a.co=-ZC.1k(100*t/(i.A8.I-n)),a.x=5),a.x+r>i.H.I-5&&(t=i.H.I-5-a.x-r,a.co=-ZC.1k(100*t/(r-n)),a.x=i.H.I-5-r);1u if("2r:"===i.B7.2x(0,5)&&e.9Q){1R((a=e.9Q(i.A8,i.B7.2x(5))).2r=!0,a.9K=i.B7.2x(5),a.9K){1i"1K":a.x=a.x-r+i.A8.QH,a.y=a.y-o/2+i.A8.LA;1p;1i"2z":a.x=a.x+i.A8.QH,a.y=a.y-o/2+i.A8.LA;1p;1i"1v":a.x=a.x-r/2+i.A8.QH,a.y=a.y-o+i.A8.LA;1p;1i"2c":a.x=a.x-r/2+i.A8.QH,a.y=a.y+i.A8.LA;1p;1i"3G":a.x=a.x-r/2+i.A8.QH,a.y=a.y-o/2+i.A8.LA}a.cp=i.A8.ER}if(a.2r){1a C=0;a.y+o>i.H.F-5&&("1v"===a.9K||"2c"===a.9K?(a.y=a.y-o-("2c"===a.9K?0:i.A8.G4)-i.A8.LA,a.cp="2c"):a.y=i.H.F-o-5),a.y<5&&("1v"===a.9K||"2c"===a.9K?(a.y=a.y+("1v"===a.9K?0:i.A8.G4)+o-i.A8.LA,a.cp="1v"):a.y=5),a.x+r>i.H.I-5&&("1K"===a.9K||"2z"===a.9K?(a.x=a.x-r-i.A8.QH-5,a.cp="2z"):(C=48*(r-i.H.I+a.x+i.A8.H6/2)/(i.A8.I/2),a.x=i.H.I-r-i.A8.QH-5),a.co=C),a.x<5&&("1K"===a.9K||"2z"===a.9K?(a.x=a.x+i.A8.I-i.A8.QH+5,a.cp="1K"):(C=48*(a.x-i.A8.H6/2)/(i.A8.I/2),a.x=5),a.co=C)}1l a}}1O mk 2k I4{2G(e){1E(e);1a t=1g;t.H=e,t.JF=!1,t.C=1c,t.Q0=1c,t.UV=1c,t.I8=0,t.LP=0,t.I9=0,t.LO=0,t.AD=1c,t.AU=1c,t.ZR=!1,t.va=0,t.l3=!1,t.M=1c}1q(){1a e=1g;e.C&&(e.C.HB&&e.1C(e.C.HB.o),1E.1q(),e.YQ("dJ-3H","l3","b"),e.M=1m DP(e),e.C.A.B9.2y(e.M.o,"3a.3H.1H"),e.M.1C(e.o.1H),e.M.1q(),e.o.1H&&!1!==e.o.1H.2h&&(e.M.AL=!0))}3m(){1a e=1g;1o.3I.bI?ZC.A4(2g.3s).3m("6K 4I",e.RB):ZC.A4("#"+e.H.K+"-5X").3m("6K 4I",e.RB),ZC.A4(".zc-2r-1N").4k("6K 4I",e.RB),ZC.A4(2g.3s).3m("7W 6l",e.UN),ZC.A4(2g.3s).3m("6m 5T",e.W6)}3t(){1a e=1g,t=e.H.K;e.RB=1n(i){if((!ZC.2L||"mj"!==1o.mF)&&!(i.9u>1||-1!==ZC.P.TB(i.2X).1L("zc-2B-1P")||ZC.3o)&&(i.1J!==ZC.1b[47]||!ZC.bh)&&-1===i.2X.id.1L("-1V-5Z-1N")&&(ZC.2L||i.6X(),e.H.9p(),(ZC.2L||!(i.9u>1))&&("3L"!==e.H.AB||-1===i.2X.82.1L("zc-2r-1N")))){i.Fl&&(e.ZR=!0);1a a=ZC.P.MJ(i),n=ZC.al(e.H.K),l=ZC.A4("#"+t+"-1v").2b(),r=(a[0]-l.1K)/n[0],o=(a[1]-l.1v)/n[1];e.Q0=r,e.UV=o,e.ZR&&(e.va=r);1j(1a s,C=!1,A=0,Z=e.H.AH.1f;A<Z;A++)s=e.H.AH[A].Q,ZC.DQ(r,s.iX-5,s.iX+s.I+5)&&ZC.DQ(o,s.iY-5,s.iY+s.F+5)&&(e.C=e.H.AH[A]);if(1c!==e.C){1a c={id:e.H.K,4u:e.C.K,ev:i},p=ZC.AN.C2("191",e.H,c,!0);if(1w p!==ZC.1b[31]&&!p)1l;if(e.C.HB&&1c!==ZC.1d(e.C.HB.o.6L)&&!ZC.2t(e.C.HB.o.6L))1l;s=e.C.Q,e.C.AY.A7.1f>0&&(e.AD=e.C.BK(e.C.AY.A7[0].BT("k")[0]),e.AU=e.C.BK(e.C.AY.A7[0].BT("v")[0])),1c!==e.AD&&1c!==e.AU&&e.C.AJ["4V-cK"]&&(e.AD.H7||e.AU.H7)&&(e.I8=e.AD.D8?o:r,e.I9=e.AU.D8?r:o,C=!0,e.AD.H7?e.AD.D8?e.I8=ZC.5l(e.I8,s.iY,s.iY+s.F):e.I8=ZC.5l(e.I8,s.iX,s.iX+s.I):e.I8=e.AD.D8?s.iY:s.iX,e.AU.H7?e.AU.D8?e.I9=ZC.5l(e.I9,s.iX,s.iX+s.I):e.I9=ZC.5l(e.I9,s.iY,s.iY+s.F):e.I9=e.AU.D8?s.iX:s.iY)}1l C&&(e.LP=e.I8,e.LO=e.I9,e.JF=!0,ZC.A4(2g.3s).3t("7W 6l",e.UN),ZC.A4(2g.3s).3t("6m 5T",e.W6),e.ZR?2g.3s.1I.4S="8s":(e.1q(),e.C.AJ["3d"]||ZC.P.I1({id:t+"-3H",p:ZC.AK(t+"-1v"),1v:-9,1K:-9,wh:"1/1",2K:"4D",1G:e.AQ+"px 2V "+e.BU,1W:e.A0,3n:e.C5}),e.M.AL&&(ZC.P.I1({id:t+"-6o",p:ZC.AK(t+"-1v"),1v:-6H,1K:-6H,2K:"4D",cn:e.M.FL,di:e.M.FM,da:e.M.FT,d8:e.M.EM,1G:e.M.AQ+"px 2V "+e.M.BU,1W:e.M.A0,1r:e.M.C0,6W:e.M.GE,6V:e.M.7K,cG:e.M.NA?"bm":"5h",6M:e.M.DF,1D:""}),ZC.P.I1({id:t+"-to",p:ZC.AK(t+"-1v"),1v:-6H,1K:-6H,2K:"4D",cn:e.M.FL,di:e.M.FM,da:e.M.FT,d8:e.M.EM,1G:e.M.AQ+"px 2V "+e.M.BU,1W:e.M.A0,1r:e.M.C0,6W:e.M.GE,6V:e.M.7K,cG:e.M.NA?"bm":"5h",6M:e.M.DF,1D:""})),2g.3s.1I.4S="9z")),!!ZC.2L&&8m 0}},e.UN=1n(i){if(i.1J!==ZC.1b[48]||!ZC.bh){1a a,n;if(ZC.2L||i.6X(),ZC.3o=!0,e.C||(ZC.3o=!1,e.JF=!1,ZC.A4(2g.3s).3m("7W 6l",e.UN),ZC.A4(2g.3s).3m("6m 5T",e.W6),2g.3s.1I.4S="3i",ZC.P.ET([t+"-3H",t+"-6o",t+"-to"])),e.JF){e.C.A.A8.5e();1a l=ZC.P.MJ(i),r=ZC.al(e.H.K),o=ZC.A4("#"+t+"-1v").2b(),s=(l[0]-o.1K)/r[0],C=(l[1]-o.1v)/r[1];if(i.hk){1a A=ZC.CV(s-e.Q0,C-e.UV);s=e.Q0+A,C=e.UV+A}if(e.LP=e.AD.D8?C:s,e.LO=e.AU.D8?s:C,!e.ZR){1a Z,c,p,u,h=e.C.Q;a=e.AD.AR?e.AD.BV:e.AD.A6,n=e.AD.AR?e.AD.A6:e.AD.BV,e.AD.H7?e.AD.D8?(e.AD.YN&&(e.I8=e.AD.iY+a+e.AD.A9*ZC.1k((e.I8-e.AD.iY-a)/e.AD.A9),e.LP=e.AD.iY+a+e.AD.A9*ZC.1k((e.LP-e.AD.iY-a)/e.AD.A9)),e.I8=ZC.5l(e.I8,h.iY+n,h.iY+h.F-a),e.LP=ZC.5l(e.LP,h.iY+n,h.iY+h.F-a)):(e.AD.YN&&(e.I8=e.AD.iX+a+e.AD.A9*ZC.1k((e.I8-e.AD.iX-a)/e.AD.A9),e.LP=e.AD.iX+a+e.AD.A9*ZC.1k((e.LP-e.AD.iX-a)/e.AD.A9)),e.I8=ZC.5l(e.I8,h.iX+a,h.iX+h.I-n),e.LP=ZC.5l(e.LP,h.iX+a,h.iX+h.I-n)):(e.I8=e.AD.D8?h.iY+n:h.iX+a,e.LP=e.AD.D8?h.iY+h.F-a:h.iX+h.I-n),a=e.AU.AR?e.AU.A6:e.AU.BV,n=e.AU.AR?e.AU.BV:e.AU.A6,e.AU.H7?e.AU.D8?(e.AU.YN&&(e.I9=e.AU.iX+a+e.AU.A9*ZC.1k((e.I9-e.AU.iX-a)/e.AU.A9),e.LO=e.AU.iX+a+e.AU.A9*ZC.1k((e.LO-e.AU.iX-a)/e.AU.A9)),e.I9=ZC.5l(e.I9,h.iX+n,h.iX+h.I-a),e.LO=ZC.5l(e.LO,h.iX+n,h.iX+h.I-a)):(e.AU.YN&&(e.I9=e.AU.iY+a+e.AU.A9*ZC.1k((e.I9-e.AU.iY-a)/e.AU.A9),e.LO=e.AU.iY+a+e.AU.A9*ZC.1k((e.LO-e.AU.iY-a)/e.AU.A9)),e.I9=ZC.5l(e.I9,h.iY+a,h.iY+h.F-n),e.LO=ZC.5l(e.LO,h.iY+a,h.iY+h.F-n)):(e.I9=e.AU.D8?h.iX+n:h.iY+a,e.LO=e.AU.D8?h.iX+h.I-a:h.iY+h.F-n);1a 1b=ZC.A4.6I.ax?0:2*e.AQ;e.C.AJ["3d"]&&(1b=0);1a d=ZC.AK(t+"-3H");if(e.AD.D8&&e.AU.D8?(Z=ZC.2l(e.LO-e.I9-1b),c=ZC.2l(e.LP-e.I8-1b),p=ZC.CV(e.I9,e.LO),u=ZC.CV(e.I8,e.LP)):(Z=ZC.2l(e.LP-e.I8-1b),c=ZC.2l(e.LO-e.I9-1b),p=ZC.CV(e.I8,e.LP),u=ZC.CV(e.I9,e.LO)),e.C.AJ["3d"]){e.C.NB();1a f=ZC.AK(e.H.K+"-2i-c");f&&(ZC.P.IM(f,e.H.AB,e.C.iX,e.C.iY,e.C.I,e.C.F),ZC.A4(".zc-2i-1H").3q()),(d=1m DS(e)).Z=f,d.A0=d.AC=e.A0,d.BU=e.BU,d.AQ=e.AQ,d.C5=e.C5,d.D=[[p,u],[p+Z,u],[p+Z,u+c],[p,u+c],[p,u]];1j(1a g=0;g<d.D.1f;g++){1a B=1m CB(e.C,d.D[g][0]-ZC.AM.DZ,d.D[g][1]-ZC.AM.E0,0);d.D[g][0]=B.E9[0],d.D[g][1]=B.E9[1]}d.1q(),d.1t()}1u ZC.P.PQ(d,{1s:Z+"px",1M:c+"px",1K:p+"px",1v:u+"px"});if(e.M.AL){1a v=ZC.CV(e.I8,e.LP),E=ZC.BO(e.I8,e.LP),b=ZC.CV(e.I9,e.LO),m=ZC.BO(e.I9,e.LO),K=ZC.AK(t+"-6o"),D=ZC.AK(t+"-to"),F={6p:1c===ZC.1d(e.AU.DT)?1:e.AU.DT};K.4o=e.AD.FQ(e.AD.MS(v))+"/"+e.AU.FQ(-1,e.AU.KW(b),F),D.4o=e.AD.FQ(e.AD.MS(E))+"/"+e.AU.FQ(-1,e.AU.KW(m),F),ZC.P.PQ(K,{1K:p-e.AQ-ZC.1k(ZC.A4(K).1s())+"px",1v:u-e.AQ-ZC.1k(ZC.A4(K).1M())+"px"}),ZC.P.PQ(D,{1K:p+e.AQ+e.M.AQ+Z+"px",1v:u+e.AQ+e.M.AQ+c+"px"})}}}1l!1}},e.W6=1n(i){if((i.1J!==ZC.1b[49]||!ZC.bh)&&e.C){if(ZC.3o=!1,e.JF=!1,2g.3s.1I.4S="3i",ZC.P.ET([t+"-3H",t+"-6o",t+"-to"]),e.C.AJ["3d"]){e.C.NB();1a a=ZC.AK(e.H.K+"-2i-c");a&&(ZC.P.IM(a,e.H.AB,e.C.iX,e.C.iY,e.C.I,e.C.F),ZC.A4(".zc-2i-1H").3q())}if(ZC.A4(2g.3s).3m("7W 6l",e.UN),ZC.A4(2g.3s).3m("6m 5T",e.W6),e.ZR)e.ZR=!1;1u{1a n,l,r,o,s,C,A,Z,c,p={4u:e.C.K,ev:i};if(ZC.2l(e.I8-e.LP)>10&&ZC.2l(e.I9-e.LO)>10){1a u,h,1b=!1,d=!1;1j(o=0,s=(r=e.C.BT("k")).1f;o<s;o++)(u=r[o])&&r[o].H7&&(C=1===u.L?"":"-"+u.L,n=u.MS(ZC.CV(e.I8,e.LP)),l=u.MS(ZC.BO(e.I8,e.LP)),ZC.2l(l-n)>=1&&(p["7C"+C]=!0,p["4t"+C]=ZC.CV(n,l),p["4p"+C]=ZC.BO(n,l),"2Z"===u.C8&&(p["8W"+C]=u.W[ZC.1k(ZC.HE(p["4t"+C],u.EN))],p["93"+C]=u.W[ZC.1k(ZC.HE(p["4p"+C],u.EN))],4s p["4t"+C],4s p["4p"+C]),1b=!0));1j(o=0,s=(r=e.C.BT("v")).1f;o<s;o++)(h=r[o])&&r[o].H7&&(C=1===h.L?"":"-"+h.L,A=h.KW(ZC.BO(e.I9,e.LO)),Z=h.KW(ZC.CV(e.I9,e.LO)),c=(h.HQ-h.GX)/1A.5d(10,10),ZC.2l(Z-A)>=c&&(p["7N"+C]=!0,p["5r"+C]=ZC.CV(A,Z),p["5s"+C]=ZC.BO(A,Z),d=!0));1b||d?(1o.4F.9H=!0,e.C.A.PH(p)):1o.4F.9H=!0}1u(ZC.2l(e.I8-e.LP)>5||ZC.2l(e.I9-e.LO)>5)&&(1o.4F.9H=!0);e.C=1c}}},ZC.2L&&"5h"!==1o.mF||(1o.3I.bI?ZC.A4(2g.3s).3t("6K 4I",e.RB):ZC.A4("#"+t+"-5X").3t("6K 4I",e.RB),ZC.A4(".zc-2r-1N").4g("6K 4I",e.RB))}}1O rn 2k CY{2G(e){1E(e);1a t=1g;t.IQ=!0,t.t2=!1,t.C=e,t.H=e.A,t.JF=!1,t.hX=!1,t.H5=1c,t.B5=1c,t.Z=1c,t.JY=0,t.IA=0,t.PF=0,t.mS=0,t.LV=!1,t.NS=1c,t.mw=!1,t.BW=1c,t.mU=!1}1q(){1a e,t=1g;t.K=t.C.K+"-2A",t.4A([["4g","t2","b"],["ac","LV","b"],["2j-6N","PF","i"],["2j-6N-x","PF","i"],["2j-6N-y","PF","i"],["2h","AL","b"]]);1a i="("+t.C.AF+").2A",a=t.H.B9;1n n(e){1l[i+".3O",i+".3O-"+e,i+".3r",i+".3r-"+e]}t.B5=1m I4(t.C),t.B5.K=t.C.K+"-2A-15Z",a.2y(t.B5.o,[i]),t.B5.1C(t.o),t.B5.1q(),t.o.1H&&(t.BW=[]),t.o.3r&&t.o.3r.1H&&(t.J8=1m DP(t.C),t.J8.1C(t.o.3r.1H),t.J8.1C({1D:" "}),t.J8.1q(),t.J8.AL&&(t.mU=!0)),t.P3=1m CY(t.C),a.2y(t.P3.o,[i+".4K"]),1c!==ZC.1d(e=t.o.4K)&&t.P3.1C(e),t.P3.1q(),t.V9=1m CY(t.C),a.2y(t.V9.o,[i+".6L"]),1c!==ZC.1d(e=t.o.6L)&&t.V9.1C(e),t.V9.1q(),t.IT=1m I4(t.B5),t.HG=1m I4(t.B5),t.JE=1m I4(t.B5),t.H2=1m I4(t.B5),a.2y(t.IT.o,n("1K")),a.2y(t.HG.o,n("2z")),a.2y(t.JE.o,n("1v")),a.2y(t.H2.o,n("2c"));1j(1a l=["3r","3O"],r=0;r<l.1f;r++)1c!==ZC.1d(e=t.o[l[r]])&&(t.IT.1C(e),t.HG.1C(e),t.JE.1C(e),t.H2.1C(e)),1c!==ZC.1d(e=t.o[l[r]+"-1K"])&&t.IT.1C(e),1c!==ZC.1d(e=t.o[l[r]+"-2z"])&&t.HG.1C(e),1c!==ZC.1d(e=t.o[l[r]+"-1v"])&&t.JE.1C(e),1c!==ZC.1d(e=t.o[l[r]+"-2c"])&&t.H2.1C(e);t.IT.1q(),t.HG.1q(),t.JE.1q(),t.H2.1q()}nW(){1a e=1g;e.NS={};1j(1a t,i=e.C.BL,a=0,n=i.1f;a<n;a++)(t=i[a])&&("k"===t.AF?e.NS[t.BE]={wm:t.E7,wn:t.EG,nT:t.W[t.E7],nY:t.W[t.EG],15Y:t.A9,6n:[].4z(t.W)}:e.NS[t.BE]={nT:t.GX,nY:t.HQ})}rg(e,t){1j(1a i=1g,a=["x-1K","x-2z","y-1v","y-2c"],n=0;n<a.1f;n++)if(e){1a l=1m I4(i.C);1R(l.K=i.C.K+"-2A-4K-"+a[n],l.A0=l.AC=i.P3.A0,l.C5=i.P3.C5,l.Z=l.C6=t||ZC.AK(i.C.K+"-2A-c"),a[n]){1i"x-1K":l.iX=i.B5.iX,l.iY=i.B5.iY,l.I=ZC.A4(i.mH).2O(ZC.1b[19]),l.F=i.B5.F;1p;1i"x-2z":l.iX=i.B5.iX+i.B5.I-ZC.A4(i.XU).2O(ZC.1b[19]),l.iY=i.B5.iY,l.I=ZC.A4(i.XU).2O(ZC.1b[19]),l.F=i.B5.F;1p;1i"y-1v":l.iX=i.B5.iX,l.iY=i.B5.iY,l.I=i.B5.I,l.F=ZC.A4(i.mI).2O(ZC.1b[20]);1p;1i"y-2c":l.iX=i.B5.iX,l.iY=i.B5.iY+i.B5.F-ZC.A4(i.WM).2O(ZC.1b[20]),l.I=i.B5.I,l.F=ZC.A4(i.WM).2O(ZC.1b[20])}l.1t()}1u ZC.P.ET(i.C.K+"-2A-4K-"+a[n]+"-2R")}1t(){1a e,t,i,a,n,l,r,o,s,C=1g;if(C.Q5=ZC.2L?40:ZC.6Q?0:20,C.AL){C.Z=C.B5.Z=C.B5.C6=ZC.AK(C.C.K+"-2A-c"),C.B5.1t();1a A=ZC.AK(C.H.K+"-1v"),Z=C.C.BT("k")[0],c=C.C.BT("v")[0];if(1c===C.NS&&C.nW(),"2F"!==C.H.AB?(e=ZC.AK(C.C.K+"-2A"))&&ZC.P.PQ(e,{3u:C.C.LR(0,"3c",C.B5)}):(e=ZC.AK(C.C.K+"-3u-2A-2S"))&&ZC.P.G5(e,{2W:C.C.LR(0,"2F",C.B5)}),0===C.PF&&Z&&(C.PF=ZC.BO(1,ZC.1k(2*C.B5.I/Z.W.1f)),"2Z"===Z.C8&&(C.PF=ZC.BO(1,ZC.1k(C.PF/Z.EN)))),C.BW){1a p=ZC.6Q?ZC.AK(C.H.K):1c;ZC.A4("."+C.C.K+"-2A-1P",p).3q();1j(1a u=[],h=0;h<C.BW.1f;h++){1a 1b=(C.BW[h].x-Z.iX)/Z.I,d=ZC.1k(C.B5.iX+1b*C.B5.I),f=1m DP(C.C);if(f.1C({"1y-1s":1,"1y-1r":"#4L",1D:C.BW[h].1D,x:d,y:C.B5.iY}),f.1C(C.o.1H),f.1q(),f.Z=C.Z,f.IP=C.H.2P()?ZC.AK(C.H.K+"-46"):ZC.AK(C.H.K+"-1D"),f.GM=C.K+"-1P "+C.C.K+"-2A-1P zc-2A-1P",f.K=C.K+"-1P-"+h,f.iX>=C.B5.iX&&f.iX+f.I<=C.B5.iX+C.B5.I){1j(1a g=!1,B=0;B<u.1f;B++)f.iX>u[B].x&&f.iX<u[B].x+u[B][ZC.1b[19]]&&(g=!0);!g&&f.AL&&(f.1t(),u.1h({x:f.iX,1s:f.I}));1a v=[[d,C.B5.iY],[d,C.B5.iY+C.B5.F]];a=ZC.P.E6(C.Z,C.H.AB),ZC.CN.1t(a,f,v)}}}if((Z.H7||c.H7)&&(C.KK=ZC.P.I1({2o:"zc-3l zc-2A-3O zc-2A-3O-6r "+C.C.K+"-2A-3O",id:C.K+"-3O-6r",wh:C.B5.I+"/"+C.B5.F,tl:C.B5.iY+"/"+C.B5.iX,1W:C.V9.A0,3n:C.V9.C5,4S:"8s",p:A})),Z.H7){C.mH=ZC.P.I1({2o:"zc-3l zc-2A-4K zc-2A-4K-1K "+C.C.K+"-2A-4K",id:C.K+"-4K-x-1K",wh:"0/"+C.B5.F,tl:C.B5.iY+"/"+C.B5.iX,1W:C.P3.A0,3n:C.P3.C5,p:A}),C.XU=ZC.P.I1({2o:"zc-3l zc-2A-4K zc-2A-4K-2z "+C.C.K+"-2A-4K",id:C.K+"-4K-x-2z",wh:"0/"+C.B5.F,tl:C.B5.iY+"/"+(C.B5.iX+C.B5.I),1W:C.P3.A0,3n:C.P3.C5,p:A}),t=C.IT.I,i=C.IT.F,C.KM=ZC.P.I1({2o:"zc-3l zc-2A-3O zc-2A-3O-1K "+C.C.K+"-2A-3O",id:C.K+"-3O-x-1K",wh:ZC.9a?1c:t+"/"+i,tl:ZC.1k(C.B5.iY+(C.B5.F-i)/4-C.Q5/2)+"/"+ZC.1k(C.B5.iX-t/2-C.Q5/2),bx:"10%",4S:"8s",p:A,1G:C.Q5/2+"px 2V aX"});1a E=C.KM;if("2F"===C.H.AB&&!ZC.AK(C.K+"-3O-x-1K-2F")){1a b=ZC.P.F6("2F",ZC.1b[36]);ZC.P.G5(b,{ad:"1.1",id:C.K+"-3O-x-1K-2F",1s:t,1M:i}),C.KM.3b(b),E=b}if(!ZC.AK(C.K+"-3O-x-1K-c")){1a m=ZC.P.HI({2o:"zc-no-6E",id:C.K+"-3O-x-1K-c",wh:t+"/"+i,p:E},C.H.AB);C.IT.Z=m,C.IT.K=C.K+"-3O-x-1K-c-2A",C.IT.iX=0,C.IT.iY=0,C.IT.1t(),a=ZC.P.E6(C.H.2P()?C.H.K+"-46-c":C.K+"-3O-x-1K-c",C.H.AB);1a K=C.IT.AZ,D=C.IT.AQ;o=ZC.1k(t/2-K),r=ZC.1k(t/2+K),s=[[o,l=D+3],[o,n=i-D-2],1c,[r,l],[r,n]],C.IT.CX=!0,ZC.CN.1t(a,C.IT,s)}t=C.HG.I,i=C.HG.F,C.K2=ZC.P.I1({2o:"zc-3l zc-2A-3O zc-2A-3O-2z "+C.C.K+"-2A-3O",id:C.K+"-3O-x-2z",wh:ZC.9a?1c:t+"/"+i,tl:ZC.1k(C.B5.iY+C.B5.F-C.HG.F-(C.B5.F-i)/4-C.Q5/2)+"/"+ZC.1k(C.B5.iX+C.B5.I-C.HG.I/2-C.Q5/2),bx:"10%",4S:"8s",p:A,1G:C.Q5/2+"px 2V aX"});1a F=C.K2;if("2F"===C.H.AB&&!ZC.AK(C.K+"-3O-x-2z-2F")){1a I=ZC.P.F6("2F",ZC.1b[36]);ZC.P.G5(I,{ad:"1.1",id:C.K+"-3O-x-2z-2F",1s:t,1M:i}),C.K2.3b(I),F=I}if(!ZC.AK(C.K+"-3O-x-2z-c")){1a x=ZC.P.HI({2o:"zc-no-6E",id:C.K+"-3O-x-2z-c",wh:t+"/"+i,p:F},C.H.AB);C.HG.Z=x,C.HG.K=C.K+"-3O-x-2z-c-2A",C.HG.iX=0,C.HG.iY=0,C.HG.1t(),a=ZC.P.E6(C.H.2P()?C.H.K+"-46-c":C.K+"-3O-x-2z-c",C.H.AB);1a X=C.HG.AZ,y=C.HG.AQ;o=ZC.1k(t/2-X),r=ZC.1k(t/2+X),s=[[o,l=y+3],[o,n=i-y-2],1c,[r,l],[r,n]],C.HG.CX=!0,ZC.CN.1t(a,C.HG,s)}}if(c.H7){C.mI=ZC.P.I1({2o:"zc-3l zc-2A-4K zc-2A-4K-1v "+C.C.K+"-2A-4K",id:C.K+"-4K-x-1v",wh:C.B5.I+"/0",tl:C.B5.iY+"/"+C.B5.iX,1W:C.P3.A0,3n:C.P3.C5,p:A}),C.WM=ZC.P.I1({2o:"zc-3l zc-2A-4K zc-2A-4K-2c "+C.C.K+"-2A-4K",id:C.K+"-4K-x-2c",wh:C.B5.I+"/0",tl:C.B5.iY+C.B5.F+"/"+C.B5.iX,1W:C.P3.A0,3n:C.P3.C5,p:A}),t=C.JE.I,i=C.JE.F,C.L9=ZC.P.I1({2o:"zc-3l zc-2A-3O zc-2A-3O-1v "+C.C.K+"-2A-3O",id:C.K+"-3O-y-1v",wh:ZC.9a?1c:t+"/"+i,tl:ZC.1k(C.B5.iY-i/2-C.Q5/2)+"/"+ZC.1k(C.B5.iX+(C.B5.I-t)/4-C.Q5/2),bx:"10%",4S:"8s",p:A,1G:C.Q5/2+"px 2V aX"});1a Y=C.L9;if("2F"===C.H.AB&&!ZC.AK(C.K+"-3O-y-1v-2F")){1a L=ZC.P.F6("2F",ZC.1b[36]);ZC.P.G5(L,{ad:"1.1",id:C.K+"-3O-y-1v-2F",1s:t,1M:i}),C.L9.3b(L),Y=L}if(!ZC.AK(C.K+"-3O-y-1v-c")){1a w=ZC.P.HI({2o:"zc-no-6E",id:C.K+"-3O-y-1v-c",wh:t+"/"+i,p:Y},C.H.AB);C.JE.Z=w,C.JE.K=C.K+"-3O-y-1v-c-2A",C.JE.iX=0,C.JE.iY=0,C.JE.1t(),a=ZC.P.E6(C.H.2P()?C.H.K+"-46-c":C.K+"-3O-y-1v-c",C.H.AB);1a M=C.JE.AZ,H=C.JE.AQ;n=ZC.1k(i/2-M),s=[[o=t-H-2,l=ZC.1k(i/2+M)],[r=H+3,l],1c,[o,n],[r,n]],C.JE.CX=!0,ZC.CN.1t(a,C.JE,s)}t=C.H2.I,i=C.H2.F,C.JH=ZC.P.I1({2o:"zc-3l zc-2A-3O zc-2A-3O-2c "+C.C.K+"-2A-3O",id:C.K+"-3O-y-2c",wh:ZC.9a?1c:t+"/"+i,tl:ZC.1k(C.B5.iY+C.B5.F-C.H2.F/2-C.Q5/2)+"/"+ZC.1k(C.B5.iX+C.B5.I-C.H2.I-(C.B5.I-t)/4-C.Q5/2),bx:"10%",4S:"8s",p:A,1G:C.Q5/2+"px 2V aX"});1a N=C.JH;if("2F"===C.H.AB&&!ZC.AK(C.K+"-3O-y-2c-2F")){1a O=ZC.P.F6("2F",ZC.1b[36]);ZC.P.G5(O,{ad:"1.1",id:C.K+"-3O-y-2c-2F",1s:t,1M:i}),C.JH.3b(O),N=O}if(!ZC.AK(C.K+"-3O-y-2c-c")){1a S=ZC.P.HI({2o:"zc-no-6E",id:C.K+"-3O-y-2c-c",wh:t+"/"+i,p:N},C.H.AB);C.H2.Z=S,C.H2.K=C.K+"-3O-y-2c-c-2A",C.H2.iX=0,C.H2.iY=0,C.H2.1t(),a=ZC.P.E6(C.H.2P()?C.H.K+"-46-c":C.K+"-3O-y-2c-c",C.H.AB);1a P=C.H2.AZ,G=C.H2.AQ;n=ZC.1k(i/2-P),s=[[o=t-G-2,l=ZC.1k(i/2+P)],[r=G+3,l],1c,[o,n],[r,n]],C.H2.CX=!0,ZC.CN.1t(a,C.H2,s)}}if(C.JY=0,C.IA=C.B5.I,C.MX=0,C.J1=C.B5.F,Z.H7&&C.mU){1a T=Z.X,k=Z.A1;Z.FG&&"5C"===Z.FG.o.1J&&(T=Z.FQ(Z.X,1c,1c).1F(/<br>/g," "),k=Z.FQ(Z.A1,1c,1c).1F(/<br>/g," ")),C.RC=ZC.P.I1({2o:"zc-3l zc-2A-1H "+C.C.K+"-2A-1H",id:C.K+"-2j-1H",1W:C.J8.A0,3n:C.J8.C5,6W:C.J8.GE,6M:C.J8.DF,6V:C.J8.7K,1r:C.J8.C0,3x:0,4e:T+"",p:A}),C.RC.1I.1K=C.B5.iX+"px",C.RC.1I.1v=C.B5.iY+C.B5.F+"px",C.RF=ZC.P.I1({2o:"zc-3l zc-2A-1H "+C.C.K+"-2A-1H",id:C.K+"-1X-1H",1W:C.J8.A0,3n:C.J8.C5,6W:C.J8.GE,6M:C.J8.DF,6V:C.J8.7K,1r:C.J8.C0,3x:0,4e:k+"",p:A}),C.RF.1I.1K=C.B5.iX+C.B5.I+"px",C.RF.1I.1v=C.B5.iY+C.B5.F+"px",C.JY>ZC.A4(C.RC).1s()?C.RC.1I.1K=C.B5.iX+C.JY-ZC.A4(C.RC).1s()+"px":C.RC.1I.1K=C.B5.iX+"px",C.B5.I-C.IA>ZC.A4(C.RF).1s()?C.RF.1I.1K=C.B5.iX+C.IA+"px":C.RF.1I.1K=C.B5.iX+C.IA-ZC.A4(C.RF).1s()+"px"}C.3t(),C.BW&&(C.BW=[])}}l8(){1a e=1g,t=e.C.BT("k")[0],i=e.C.BT("v",!0)[0];i||(i=e.C.BT("v")[0]),t&&i&&e.3S(t.E7,t.EG,i.GX,i.HQ,!0)}3S(e,t,i,a,n){1c===ZC.1d(n)&&(n=!1);1a l=1g;if(n||(e>=t&&(e=t-1),i>=a&&(i=a-1)),l.AL){1a r=l.C.BT("k")[0],o=l.C.BT("v",!0)[0];o||(o=l.C.BT("v")[0]);1a s=!0;if(n)r&&o&&(1c===ZC.1d(e)&&(e=r.X),1c===ZC.1d(t)&&(t=r.A1),1c===ZC.1d(i)&&(i=o.7D[0]?o.GX:o.B4),1c===ZC.1d(a)&&(a=o.7D[1]?o.HQ:o.BQ),l.3S((e-r.E7)*l.B5.I/(r.EG-r.E7),(t-r.E7)*l.B5.I/(r.EG-r.E7),l.B5.F-(a-o.GX)*l.B5.F/(o.HQ-o.GX),l.B5.F-(i-o.GX)*l.B5.F/(o.HQ-o.GX)));1u if(t-e<l.PF&&(l.H5===l.K2?t=e+l.PF:l.H5===l.KM&&(e=t-l.PF)),a-i<l.mS&&(l.H5===l.JH?a=i+l.mS:l.H5===l.L9&&(i=a-l.mS)),e>t&&(l.H5===l.KM?l.3S(t-1,t,i,a):l.H5===l.K2&&l.3S(e,e+1,i,a),s=!1),e<0&&(l.H5===l.KM?l.3S(0,t,i,a):l.H5===l.KK&&l.3S(0,ZC.A4(l.KK).1s(),i,a),s=!1),t>l.B5.I&&(l.H5===l.K2?l.3S(e,l.B5.I,i,a):l.H5===l.KK&&l.3S(l.B5.I-ZC.A4(l.KK).1s(),l.B5.I,i,a),s=!1),i>a&&(l.H5===l.L9?l.3S(e,t,i-1,a):l.H5===l.JH&&l.3S(e,t,i,a+1),s=!1),i<0&&(l.H5===l.L9?l.3S(e,t,0,a):l.H5===l.KK&&l.3S(e,t,0,ZC.A4(l.KK).1M()),s=!1),a>l.B5.F&&(l.H5===l.JH?l.3S(e,t,i,l.B5.F):l.H5===l.KK&&l.3S(e,t,l.B5.F-ZC.A4(l.KK).1M(),l.B5.F),s=!1),s){if(r&&r.YN){1a C=l.B5.I/(r.W.1f-(r.DJ?0:1));e=C*1A.4b(e/C),t=ZC.CV(C*1A.4b(t/C),l.B5.I)}l.JY=e,l.IA=t,l.MX=i,l.J1=a,r.H7&&(l.KM.1I.1K=ZC.1k(l.B5.iX+l.JY-l.IT.I/2-l.Q5/2)+"px",l.mH.1I.1s=ZC.1k(l.JY)+"px",l.K2.1I.1K=ZC.1k(l.B5.iX+l.IA-l.HG.I/2-l.Q5/2)+"px",l.XU.1I.1K=ZC.1k(l.B5.iX+l.IA)+"px",l.XU.1I.1s=ZC.1k(l.B5.I-l.IA)+"px"),o.H7&&(l.L9.1I.1v=ZC.1k(l.B5.iY+l.MX-l.JE.F/2-l.Q5/2)+"px",l.mI.1I.1M=ZC.1k(l.MX)+"px",l.JH.1I.1v=ZC.1k(l.B5.iY+l.J1-l.H2.F/2-l.Q5/2)+"px",l.WM.1I.1v=ZC.1k(l.B5.iY+l.J1)+"px",l.WM.1I.1M=ZC.1k(l.B5.F-l.J1)+"px"),(r.H7||o.H7)&&(l.KK.1I.1K=ZC.1k(l.B5.iX+l.JY)+"px",l.KK.1I.1s=ZC.1k(l.IA-l.JY)+"px",l.KK.1I.1v=ZC.1k(l.B5.iY+l.MX)+"px",l.KK.1I.1M=ZC.1k(l.J1-l.MX)+"px"),l.t2&&l.JF&&(l.C.OI=!0,l.3H(!0)),r.H7&&l.mU&&(r.FG&&"5C"===r.FG.o.1J?(l.RC.4o=r.FQ(r.X,1c,1c).1F(/<br>/g," "),l.RF.4o=r.FQ(r.A1,1c,1c).1F(/<br>/g," ")):(l.RC.4o=r.X,l.RF.4o=r.A1),l.JY>ZC.A4(l.RC).1s()?l.RC.1I.1K=l.B5.iX+l.JY-ZC.A4(l.RC).1s()+"px":l.RC.1I.1K=l.B5.iX+"px",l.B5.I-l.IA>ZC.A4(l.RF).1s()?l.RF.1I.1K=l.B5.iX+l.IA+"px":l.RF.1I.1K=l.B5.iX+l.IA-ZC.A4(l.RF).1s()+"px")}}}3H(e){1j(1a t,i=1g,a={4u:i.C.K,2A:1,ac:i.LV,iy:!0,cK:e},n=i.C.BL,l=i.C.BT("k")[0],r=i.C.BT("v")[0],o=0,s=n.1f;o<s;o++)if(t=n[o]){1a C=1===t.L?"":"-"+t.L;if("k"===t.AF){if(l.H7){1a A=i.LV?i.NS[t.BE].wm:t.E7,Z=i.LV?i.NS[t.BE].wn:t.EG;a["7C"+C]=!0,a["4t"+C]=ZC.1k(i.JY/i.B5.I*(Z-A)),a["4p"+C]=ZC.1k(i.IA/i.B5.I*(Z-A))}}1u if(r.H7){1a c=i.LV?i.NS[t.BE].nT:t.GX,p=i.LV?i.NS[t.BE].nY:t.HQ;a["7N"+C]=!0,a["5r"+C]=c+(i.B5.F-i.J1)/i.B5.F*(p-c),a["5s"+C]=c+(i.B5.F-i.MX)/i.B5.F*(p-c)}}i.H.PH(a)}3m(){1a e=1g;ZC.A4("."+e.C.K+"-2A-3O").3m("6K 4I",e.ZM),ZC.A4("."+e.C.K+"-2A-4K").3m("3J",e.pX),ZC.A4(2g.3s).3m("7W 6l",e.VK),ZC.A4(2g.3s).3m("6m 5T",e.WY),e.mw=!1}3t(){1a e=1g;if(!e.mw){1a t=e.H.K,i=0,a=0;e.pX=1n(i){if(i.6X(),e.H.HB){e.H.HB.C=e.C,e.H.HB.1q();1a a=ZC.P.MJ(i),n=ZC.A4("#"+t+"-1v").2b();if(-1!==i.2X.id.1L("2A-4K-x-1K")||-1!==i.2X.id.1L("2A-4K-x-2z")){1a l=a[0]-n.1K-e.B5.iX,r=e.IA-e.JY;l-r/2<0?(e.JY=0,e.IA=r):l+r/2>e.B5.I?(e.JY=e.B5.I-r,e.IA=e.B5.I):(e.JY=ZC.1k(l-r/2),e.IA=ZC.1k(l+r/2))}1u{1a o=a[1]-n.1v-e.B5.iY,s=e.J1-e.MX;o-s/2<0?(e.MX=0,e.J1=s):o+s/2>e.B5.F?(e.MX=e.B5.F-s,e.J1=e.B5.F):(e.MX=ZC.1k(o-s/2),e.J1=ZC.1k(o+s/2))}1l e.JF=!1,e.C.OI=!1,e.3S(e.JY,e.IA,e.MX,e.J1),e.3H(!1),!1}},e.ZM=1n(n){if(n.6X(),e.H.HB){e.H.HB.C=e.C,e.H.HB.1q();1j(1a l=n.2X;l&&"mQ"!==l.8b.5E();){if(-1!==ZC.P.TB(l).1L("zc-2A-3O"))1p;l=l.6q}if((ZC.2L||!(n.9u>1))&&l){1a r=ZC.P.MJ(n),o=ZC.al(e.H.K),s=ZC.A4("#"+t+"-1v").2b(),C=(r[0]-s.1K)/o[0]-e.B5.iX,A=(r[1]-s.1v)/o[1]-e.B5.iY;1l-1!==l.id.1L("3O-x-1K")?e.H5=e.KM:-1!==l.id.1L("3O-x-2z")?e.H5=e.K2:-1!==l.id.1L("3O-y-1v")?e.H5=e.L9:-1!==l.id.1L("3O-y-2c")?e.H5=e.JH:-1!==l.id.1L("3O-6r")&&(e.H5=e.KK,i=C-e.JY,a=A-e.MX),ZC.A4(2g.3s).3t("7W 6l",e.VK),ZC.A4(2g.3s).3t("6m 5T",e.WY),e.JF=!0,e.hX=!1,!1}}},e.VK=1n(n){if(e.JF){e.hX=!0,1o.3p(e.H.K,"nC",{4E:"8N,8p"});1a l=ZC.al(e.H.K),r=ZC.P.MJ(n),o=ZC.A4("#"+t+"-1v").2b(),s=(r[0]-o.1K)/l[0]-e.B5.iX,C=(r[1]-o.1v)/l[1]-e.B5.iY;e.H5===e.KM?e.3S(s,e.IA,e.MX,e.J1):e.H5===e.K2?e.3S(e.JY,s,e.MX,e.J1):e.H5===e.L9?e.3S(e.JY,e.IA,C,e.J1):e.H5===e.JH?e.3S(e.JY,e.IA,e.MX,C):e.H5===e.KK&&e.3S(s-i,s-i+ZC.A4(e.KK).1s(),C-a,C-a+ZC.A4(e.KK).1M())}1l!1},e.WY=1n(){1l 1o.3p(e.H.K,"nC",{4E:""}),e.JF&&(ZC.A4(2g.3s).3m("7W 6l",e.VK),ZC.A4(2g.3s).3m("6m 5T",e.WY),e.JF=!1,e.C.OI=!1,e.hX&&e.3H(!1),e.hX=!1),!1},ZC.A4("."+e.C.K+"-2A-3O").3t("6K 4I",e.ZM),ZC.A4("."+e.C.K+"-2A-4K").3t("3J",e.pX),e.mw=!0}}gc(){ZC.AN.gc(1g,["Z","C6","o","I7","JW","C","H","B5","V9","KM","K2","L9","JH","KK","JE","HG","H2","IT","9R","P3","mH","XU","mI","WM"])}}1O gN 2k CY{2G(e,t){1E(e);1a i=1g;i.C=e,i.H=e.A,i.JF=!1,i.Z=1c,i.BJ=0,i.BC=0,i.iI="",i.cH="yx"===i.C.AJ.3w,i.AF=i.iR=i.vK="1Z-"+(t||"x"),i.cH&&(i.AF+="i",i.iR="1Z-xi"===i.AF?"1Z-y":"1Z-x")}1q(){1a e,t=1g;t.K=t.C.K+"-"+t.iR,t.4A([["2b-x","BJ"],["2b-y","BC"]]);1a i="("+t.C.AF+").",a=t.H.B9;t.B0=1m I4(t.C),a.2y(t.B0.o,[i+"1Z.2U",i+t.AF+".2U"]),1c!==ZC.1d(e=t.o.2U)&&t.B0.1C(e),t.B0.1q(),t.AW=1m I4(t.C),a.2y(t.AW.o,[i+"1Z.3r",i+t.AF+".3r"]),1c!==ZC.1d(e=t.o.3r)&&t.AW.1C(e),t.AW.1q()}1t(){1a e=1g,t=e.C.BT("k")[0],i=e.C.BT("v")[0],a=e.C.Q;if(("1Z-x"===e.AF||"1Z-xi"===e.AF)&&t.E7===t.X&&t.EG===t.A1||("1Z-y"===e.AF||"1Z-yi"===e.AF)&&i.GX===i.B4&&i.HQ===i.BQ)1l e.3m(),ZC.A4("#"+e.C.K+"-"+e.AF+"-3r").3q(),ZC.A4("#"+e.C.K+"-"+e.AF+"-2U").3q(),8m ZC.P.IM(e.Z,e.H.AB,e.C.iX,e.C.iY,e.C.I,e.C.F);e.Z=ZC.AK(e.C.K+"-"+e.vK+"-c");1a n=ZC.AK(e.H.K+"-1v");"1Z-x"===e.AF||"1Z-yi"===e.AF?(e.B0.iX=a.iX+e.BJ,e.B0.iY=a.iY+a.F+t.AZ-1+e.BC,e.B0.I=a.I,e.cH?(e.AW.I=ZC.1k(ZC.BO(4,e.B0.I*((i.BQ-i.B4)/(i.HQ-i.GX)))),i.GX===i.B4?i.AR?e.AW.iX=e.B0.iX+e.B0.I-e.AW.I:e.AW.iX=e.B0.iX:i.HQ===i.BQ?i.AR?e.AW.iX=e.B0.iX:e.AW.iX=e.B0.iX+e.B0.I-e.AW.I:i.AR?e.AW.iX=ZC.1k(e.B0.iX+e.B0.I-e.AW.I-e.B0.I*(i.B4-i.GX)/(i.HQ-i.GX)):e.AW.iX=ZC.1k(e.B0.iX+e.B0.I*(i.B4-i.GX)/(i.HQ-i.GX))):(e.AW.I=ZC.1k(ZC.BO(4,e.B0.I*((t.A1-t.X)/(t.EG-t.E7)))),t.E7===t.X?t.AR?e.AW.iX=e.B0.iX+e.B0.I-e.AW.I:e.AW.iX=e.B0.iX:t.EG===t.A1?t.AR?e.AW.iX=e.B0.iX:e.AW.iX=e.B0.iX+e.B0.I-e.AW.I:t.AR?e.AW.iX=ZC.1k(e.B0.iX+e.B0.I-e.AW.I-e.B0.I*(t.X-t.E7)/(t.EG-t.E7)):e.AW.iX=ZC.1k(e.B0.iX+e.B0.I*(t.X-t.E7)/(t.EG-t.E7))),ZC.AK(e.K+"-3r")?(ZC.A4("#"+e.K+"-3r").2O("1K",e.AW.iX+"px").2O(ZC.1b[19],ZC.BO(15,e.AW.I-0*e.AW.AQ)+"px"),e.6D()):(e.vR=ZC.P.I1({2o:"zc-3l zc-1Z zc-1Z-x-2U "+e.C.K+"-1Z-x-2U",id:e.K+"-2U",wh:e.B0.I+"/"+e.B0.F,tl:e.B0.iY+"/"+e.B0.iX,3n:0,p:n}),e.mi=ZC.P.I1({2o:"zc-3l zc-1Z zc-1Z-x-3r "+e.C.K+"-1Z-x-3r",id:e.K+"-3r",wh:ZC.BO(15,e.AW.I+4)+"/"+e.B0.F,tl:e.B0.iY+"/"+(e.AW.iX-2),1W:"#2T",3n:0,p:n}),e.mi.1I.4S="8s",e.6D(),e.JF||e.3t())):(e.B0.iX=a.iX-e.B0.I-1+e.BJ,e.B0.iY=a.iY+e.BC,e.B0.F=a.F,e.cH?(e.AW.F=ZC.1k(ZC.BO(4,e.B0.F*((t.A1-t.X)/(t.EG-t.E7)))),t.E7===t.X?t.AR?e.AW.iY=e.B0.iY:e.AW.iY=e.B0.iY+e.B0.F-e.AW.F:t.EG===t.A1?t.AR?e.AW.iY=e.B0.iY+e.B0.F-e.AW.F:e.AW.iY=e.B0.iY:t.AR?e.AW.iY=ZC.1k(e.B0.iY+e.B0.F*(t.X-t.E7)/(t.EG-t.E7)):e.AW.iY=ZC.1k(e.B0.iY+e.B0.F-e.AW.F-e.B0.F*(t.X-t.E7)/(t.EG-t.E7))):(e.AW.F=ZC.1k(ZC.BO(4,e.B0.F*((i.BQ-i.B4)/(i.HQ-i.GX)))),i.GX===i.B4?i.AR?e.AW.iY=e.B0.iY:e.AW.iY=e.B0.iY+e.B0.F-e.AW.F:i.HQ===i.BQ?i.AR?e.AW.iY=e.B0.iY+e.B0.F-e.AW.F:e.AW.iY=e.B0.iY:i.AR?e.AW.iY=ZC.1k(e.B0.iY+e.B0.F*(i.B4-i.GX)/(i.HQ-i.GX)):e.AW.iY=ZC.1k(e.B0.iY+e.B0.F-e.AW.F-e.B0.F*(i.B4-i.GX)/(i.HQ-i.GX))),ZC.AK(e.K+"-3r")?(ZC.A4("#"+e.K+"-3r").2O("1v",e.AW.iY+"px").2O(ZC.1b[20],ZC.BO(15,e.AW.F-0*e.AW.AQ)+"px"),e.6D()):(e.vQ=ZC.P.I1({2o:"zc-3l zc-1Z zc-1Z-y-2U "+e.C.K+"-1Z-y-2U",id:e.K+"-2U",wh:e.B0.I+"/"+e.B0.F,tl:e.B0.iY+"/"+e.B0.iX,3n:0,p:n}),e.ZY=ZC.P.I1({2o:"zc-3l zc-1Z zc-1Z-y-3r "+e.C.K+"-1Z-y-3r",id:e.K+"-3r",wh:e.B0.I+"/"+ZC.BO(15,e.AW.F+4),tl:e.AW.iY-2+"/"+e.B0.iX,1W:"#2T",3n:0,p:n}),e.ZY.1I.4S="8s",e.6D(),e.JF||e.3t()))}3H(e){1j(1a t,i,a,n=1g,l={4u:n.C.K,cK:e,1Z:!0},r=n.C.BL,o=n.C.BT("k")[0],s=n.C.BT("v")[0],C=0,A=r.1f;C<A;C++)if(t=r[C]){1a Z=1===t.L?"":"-"+t.L;if(o.H7&&"1Z-x"===n.AF&&"k"===t.AF&&!n.cH){1a c=t.A1-t.X;l["7C"+Z]=!0,i=(n.AW.iX-n.B0.iX)/n.B0.I,a=(n.AW.iX-n.B0.iX+n.AW.I)/n.B0.I,o.AR?(l["4t"+Z]=t.EG-ZC.1k(a*(t.EG-t.E7)),l["4p"+Z]=t.EG-ZC.1k(i*(t.EG-t.E7))):(l["4t"+Z]=t.E7+ZC.1k(i*(t.EG-t.E7)),l["4p"+Z]=t.E7+ZC.1k(a*(t.EG-t.E7))),l["4p"+Z]-l["4t"+Z]!==c&&(l["4p"+Z]===t.EG?l["4t"+Z]=l["4p"+Z]-c:l["4p"+Z]=l["4t"+Z]+c)}1u s.H7&&"1Z-y"===n.AF&&"v"===t.AF&&!n.cH?(l["7N"+Z]=!0,i=(n.B0.F-(n.AW.iY-n.B0.iY+n.AW.F))/n.B0.F,a=(n.B0.F-(n.AW.iY-n.B0.iY))/n.B0.F,s.AR?(l["5r"+Z]=t.HQ-ZC.1Y(a*(t.HQ-t.GX)),l["5s"+Z]=t.HQ-ZC.1Y(i*(t.HQ-t.GX))):(l["5r"+Z]=t.GX+ZC.1Y(i*(t.HQ-t.GX)),l["5s"+Z]=t.GX+ZC.1Y(a*(t.HQ-t.GX)))):o.H7&&"1Z-xi"===n.AF&&"k"===t.AF&&n.cH?(l["7C"+Z]=!0,i=(n.B0.F-n.AW.iY+n.B0.iY-n.AW.F)/n.B0.F,a=(n.B0.F-n.AW.iY+n.B0.iY)/n.B0.F,o.AR?(l["4t"+Z]=t.EG-ZC.1k(a*(t.EG-t.E7)),l["4p"+Z]=t.EG-ZC.1k(i*(t.EG-t.E7))):(l["4t"+Z]=t.E7+ZC.1k(i*(t.EG-t.E7)),l["4p"+Z]=t.E7+ZC.1k(a*(t.EG-t.E7)))):s.H7&&"1Z-yi"===n.AF&&"v"===t.AF&&n.cH&&(l["7N"+Z]=!0,i=(n.AW.iX-n.B0.iX)/n.B0.I,a=(n.AW.iX-n.B0.iX+n.AW.I)/n.B0.I,s.AR?(l["5r"+Z]=t.HQ-ZC.1Y(a*(t.HQ-t.GX)),l["5s"+Z]=t.HQ-ZC.1Y(i*(t.HQ-t.GX))):(l["5r"+Z]=t.GX+ZC.1Y(i*(t.HQ-t.GX)),l["5s"+Z]=t.GX+ZC.1Y(a*(t.HQ-t.GX))))}n.H.PH(l)}6D(){1a e,t,i=1g;ZC.P.IM(i.Z,i.H.AB,i.C.iX,i.C.iY,i.C.I,i.C.F),"1Z-x"===i.AF||"1Z-yi"===i.AF?((e=1m I4(i)).K=i.C.K+"-1Z-x-2U",e.1S(i.B0),e.Z=e.C6=i.Z,e.iX=i.B0.iX,e.iY=i.B0.iY,e.I=i.B0.I,e.F=i.B0.F,e.1t(),(t=1m I4(i)).K=i.C.K+"-1Z-x-3r",t.1S(i.AW),t.Z=t.C6=i.Z,t.iX=i.AW.iX,t.iY=i.B0.iY+(i.B0.F-i.AW.F)/2-1,t.I=ZC.BO(15,i.AW.I),t.iX+t.I>i.C.Q.iX+i.C.Q.I&&(t.iX=i.C.Q.iX+i.C.Q.I-t.I),t.iX<i.C.Q.iX&&(t.iX=i.C.Q.iX),t.F=i.AW.F,t.1t(),ZC.A4("#"+i.K+"-3r").2O("1K",t.iX+"px")):((e=1m I4(i)).K=i.C.K+"-1Z-y-2U",e.1S(i.B0),e.Z=e.C6=i.Z,e.iX=i.B0.iX,e.iY=i.B0.iY,e.I=i.B0.I,e.F=i.B0.F,e.1t(),(t=1m I4(i)).K=i.C.K+"-1Z-y-3r",t.1S(i.AW),t.Z=t.C6=i.Z,t.iX=i.B0.iX+(i.B0.I-i.AW.I)/2,t.iY=i.AW.iY,t.I=i.AW.I,t.F=ZC.BO(15,i.AW.F),t.iY+t.F>i.C.Q.iY+i.C.Q.F&&(t.iY=i.C.Q.iY+i.C.Q.F-t.F),t.iY<i.C.Q.iY&&(t.iY=i.C.Q.iY),t.1t(),ZC.A4("#"+i.K+"-3r").2O("1v",t.iY+"px"))}iU(e){1a t=1g;if(t.C.OI=e,t.C.HB&&ZC.2t(t.C.HB.o.6e))1j(1a i=0;i<t.H.AH.1f;i++)t.H.AH[i].HB&&ZC.2t(t.H.AH[i].HB.o.6e)&&(t.H.AH[i].OI=e)}3S(e){1a t=1g;"1Z-x"===t.AF||"1Z-yi"===t.AF?(t.AW.iX=e,ZC.A4("#"+t.K+"-3r").2O("1K",e+"px"),t.6D()):(t.AW.iY=e,ZC.A4("#"+t.K+"-3r").2O("1v",e+"px"),t.6D()),t.JF&&(t.iU(!0),t.3H(!0))}3m(){1a e=1g;ZC.A4("."+e.C.K+"-"+e.AF+"-3r").3m("6K 4I",e.RL),ZC.A4("."+e.C.K+"-"+e.AF+"-2U").3m("3J",e.RM)}fg(e){1a t=1g.C.HW();t.1J=e,ZC.AN.C2("fg",1g.H,t)}3t(){1a e=1g,t=e.H.K,i=0,a=0;e.RL=1n(n){if(n.6X(),!(n.7O>1)&&(e.iI=e.H.KY.2M(","),e.H.KY.1h(ZC.1b[38],"vM",ZC.1b[39],ZC.1b[40],ZC.1b[41]),e.H.HB)){e.H.HB.C=e.C,e.H.HB.1q();1j(1a l=n.2X;l&&"mQ"!==l.8b.5E();){if(-1!==ZC.P.TB(l).1L("zc-"+e.AF+"-3r"))1p;l=l.6q}if((ZC.2L||!(n.9u>1))&&l){1a r=ZC.P.MJ(n),o=ZC.A4("#"+t+"-1v").2b();if("1Z-x"===e.AF||"1Z-yi"===e.AF){1a s=r[0]-o.1K;i=s-e.AW.iX}1u{1a C=r[1]-o.1v;a=C-e.AW.iY}1l ZC.A4(2g.3s).3t("7W 6l",e.RI),ZC.A4(2g.3s).3t("6m 5T",e.NT),e.JF=!0,!1}}},e.RI=1n(n){if(e.JF){e.iU(!1);1a l=ZC.P.MJ(n),r=ZC.A4("#"+t+"-1v").2b();if("1Z-x"===e.AF||"1Z-yi"===e.AF){1a o=l[0]-r.1K;o-i<e.B0.iX&&(o<e.B0.iX-15&&e.fg("1Z-x-1K"),o=e.B0.iX+i),o-i+e.AW.I>e.B0.iX+e.B0.I&&(o>e.B0.iX+e.B0.I+15&&e.fg("1Z-x-2z"),o=e.B0.iX+e.B0.I+i-e.AW.I),e.3S(o-i)}1u{1a s=l[1]-r.1v;s-a<e.B0.iY&&(s<e.B0.iY-15&&e.fg("1Z-y-1v"),s=e.B0.iY+a),s-a+e.AW.F>e.B0.iY+e.B0.F&&(s>e.B0.iY+e.B0.F+15&&e.fg("1Z-y-2c"),s=e.B0.iY+e.B0.F+a-e.AW.F),e.3S(s-a)}}1l!1},e.NT=1n(t){1l e.H.KY=e.iI.2p(","),e.JF&&(ZC.A4(2g.3s).3m("7W 6l",e.RI),ZC.A4(2g.3s).3m("6m 5T",e.NT),e.JF=!1,e.iU(!1),t&&e.3H(!1)),!1},e.RM=1n(i){e.JF=!1,e.iU(!1);1a a=ZC.P.MJ(i),n=ZC.A4("#"+t+"-1v").2b();"1Z-x"===e.AF||"1Z-yi"===e.AF?a[0]-n.1K>e.AW.iX?e.3S(ZC.CV(e.B0.iX+e.B0.I-e.AW.I-2*e.AW.AQ,e.AW.iX+(a[0]-n.1K-e.AW.iX)/4)):e.3S(ZC.BO(e.B0.iX,a[0]-n.1K+(e.AW.iX-a[0]+n.1K-e.AW.I)/4)):a[1]-n.1v>e.AW.iY?e.3S(ZC.CV(e.B0.iY+e.B0.F-e.AW.F-2*e.AW.AQ,e.AW.iY+(a[1]-n.1v-e.AW.iY)/4)):e.3S(ZC.BO(e.B0.iY,a[1]-n.1v+(e.AW.iY-a[1]+n.1v-e.AW.F)/4)),e.3H(!1)},ZC.A4("."+e.C.K+"-"+e.iR+"-3r").3t("6K 4I",e.RL),ZC.A4("."+e.C.K+"-"+e.iR+"-2U").3t("3J",e.RM)}}1O p0 2k CY{2G(e,t){1E(e);1a i=1g;i.BB=e,i.JF=!1,i.Z=1c,i.iI="",i.KS=1,i.GZ=1,i.AF="1Z-"+(t||"y")}1q(){1a e,t=1g;t.K=t.BB.K+"-1V-"+t.AF;1a i=t.BB.A.H.B9,a="("+t.BB.A.AF+")";t.B0=1m I4(t.BB),i.2y(t.B0.o,[a+".1V.1Z.2U",t.AF+".2U"]),1c!==ZC.1d(e=t.o.2U)&&t.B0.1C(e),t.B0.1q(),t.AW=1m I4(t.BB),i.2y(t.AW.o,[a+".1V.1Z.3r",t.AF+".3r"]),1c!==ZC.1d(e=t.o.3r)&&t.AW.1C(e),t.AW.1q()}1t(){1a e,t=1g;if(!t.JF){t.Z=ZC.AK(t.BB.A.K+"-1V-1Z-c");1a i=ZC.AK(t.H.K+"-1v");"1Z-y"===t.AF?(t.B0.iX=t.BB.iX+t.BB.I-t.B0.I-1,t.B0.iY=t.BB.EI,t.B0.F=t.BB.F-(t.BB.KP?t.BB.KP.F:0)-(t.BB.EI-t.BB.iY),e=1A.4j(t.BB.B6.1f/t.GZ-t.BB.EE/t.GZ)+1,t.AW.F=t.B0.F/e,t.AW.iY=t.B0.iY,0!==t.BB.D1.2j&&(t.AW.iY+=t.BB.D1.2j/t.GZ*t.AW.F),ZC.AK(t.K+"-1V-3r")?(ZC.A4("#"+t.K+"-1V-3r").2O("1K",t.B0.iX+"px").2O("1v",t.AW.iY+"px").2O(ZC.1b[20],t.AW.F-0*t.AW.AQ+"px"),ZC.A4("#"+t.K+"-1V-2U").2O("1K",t.B0.iX+"px").2O("1v",t.B0.iY+"px"),ZC.A4("#"+t.BB.K+"-a0").2O("1K",t.BB.iX+"px").2O("1v",t.BB.EI+"px"),t.6D()):(t.vQ=ZC.P.I1({2o:"zc-3l zc-1Z zc-1Z-y-2U "+t.BB.K+"-1Z-y-1V-2U",id:t.K+"-1V-2U",wh:t.B0.I+"/"+t.B0.F,tl:t.B0.iY+"/"+t.B0.iX,1W:"#2T",3n:0,8r:1,p:i}),t.ZY=ZC.P.I1({2o:"zc-3l zc-1Z zc-1Z-y-3r "+t.BB.K+"-1Z-y-1V-3r",id:t.K+"-1V-3r",wh:t.B0.I-0*t.AW.AQ+"/"+(t.AW.F-0*t.AW.AQ),tl:t.AW.iY+"/"+t.B0.iX,1W:"#2T",3n:0,8r:1,p:i}),t.ZY.1I.4S="8s",t.6D())):"1Z-x"===t.AF&&(t.B0.iX=t.BB.iX,t.B0.iY=t.BB.iY+t.BB.F-t.B0.F-1,t.B0.I=t.BB.I,e=1A.4j(t.BB.B6.1f/t.KS-t.BB.EE/t.KS)+1,t.AW.I=t.B0.I/e,t.AW.iX=t.B0.iX,0!==t.BB.D1.2j&&(t.AW.iX+=t.BB.D1.2j/t.KS*t.AW.I),ZC.AK(t.K+"-1V-3r")?(ZC.A4("#"+t.K+"-1V-3r").2O("1K",t.AW.iX+"px").2O("1v",t.B0.iY+"px").2O(ZC.1b[19],t.AW.I-0*t.AW.AQ+"px"),ZC.A4("#"+t.K+"-1V-2U").2O("1K",t.B0.iX+"px").2O("1v",t.B0.iY+"px"),ZC.A4("#"+t.BB.K+"-a0").2O("1K",t.BB.iX+"px").2O("1v",t.BB.EI+"px"),t.6D()):(t.vR=ZC.P.I1({2o:"zc-3l zc-1Z zc-1Z-x-2U "+t.BB.K+"-1Z-x-1V-2U",id:t.K+"-1V-2U",wh:t.B0.I+"/"+t.B0.F,tl:t.B0.iY+"/"+t.B0.iX,1W:"#2T",3n:0,8r:1,p:i}),t.mi=ZC.P.I1({2o:"zc-3l zc-1Z zc-1Z-x-3r "+t.BB.K+"-1Z-x-1V-3r",id:t.K+"-1V-3r",wh:t.AW.I-0*t.AW.AQ+"/"+(t.B0.F-0*t.AW.AQ),tl:t.B0.iY+"/"+t.AW.iX,1W:"#2T",3n:0,8r:1,p:i}),t.mi.1I.4S="8s",t.6D())),ZC.3o||t.3t()}}6D(){1a e,t,i=1g;"1Z-y"===i.AF?((e=1m I4(i)).K=i.BB.K+"-1Z-y-1V-2U",e.1S(i.B0),e.Z=i.Z,e.iX=i.B0.iX,e.iY=i.B0.iY,e.I=i.B0.I,e.F=i.B0.F,e.1t(),(t=1m I4(i)).K=i.BB.K+"-1Z-y-1V-3r",t.1S(i.AW),t.Z=i.Z,t.iX=i.B0.iX,t.iY=i.AW.iY,t.I=i.AW.I,t.F=i.AW.F,t.1t()):"1Z-x"===i.AF&&((e=1m I4(i)).K=i.BB.K+"-1Z-x-1V-2U",e.1S(i.B0),e.Z=i.Z,e.iX=i.B0.iX,e.iY=i.B0.iY,e.I=i.B0.I,e.F=i.B0.F,e.1t(),(t=1m I4(i)).K=i.BB.K+"-1Z-x-1V-3r",t.1S(i.AW),t.Z=i.Z,t.iX=i.AW.iX,t.iY=i.B0.iY,t.I=i.AW.I,t.F=i.B0.F,t.1t())}3S(e){1a t,i,a,n,l,r,o=1g,s=o.BB;if("1Z-y"===o.AF){if(e<o.AW.iY&&!1,e===o.AW.iY)1l;o.AW.iY=e,ZC.A4("#"+o.K+"-1V-3r").2O("1v",e+"px"),t=o.AW.iY-o.B0.iY,n=1A.4j(s.B6.1f/o.GZ-s.EE/o.GZ)+1,i=o.B0.F/n,r=o.GZ}1u if("1Z-x"===o.AF){if(e>o.AW.iX&&!1,e===o.AW.iX)1l;o.AW.iX=e,ZC.A4("#"+o.K+"-1V-3r").2O("1K",e+"px"),t=o.AW.iX-o.B0.iX,n=1A.4j(s.B6.1f/o.KS-s.EE/o.KS)+1,i=o.B0.I/n,r=o.KS}a=1A.4b(t/i),l=s.B6.1f-s.EE,s.B6.1f%r&&(l+=r-s.B6.1f%r),s.D1.2j=1A.2j(a*r,l),s.D1.1X=s.D1.2j+s.EE,s.VG(),s.3k(!1),s.1q(),s.1t(),o.6D(),o.3t()}3m(){1a e=1g;ZC.A4("."+e.BB.K+"-"+e.AF+"-1V-3r").3m("6K 4I",e.RL),ZC.A4("."+e.BB.K+"-"+e.AF+"-1V-2U").3m("3J",e.RM)}3t(){1a e=1g,t=e.H.K,i=0,a=0;e.RL=1n(n){if(n.6X(),!(n.7O>1)){1j(1a l=n.2X;l&&"mQ"!==l.8b.5E();){if(-1!==ZC.P.TB(l).1L("zc-"+e.AF+"-3r"))1p;l=l.6q}if((ZC.2L||!(n.9u>1))&&l){1a r=ZC.P.MJ(n),o=ZC.A4("#"+t+"-1v").2b();if("1Z-y"===e.AF){1a s=r[1]-o.1v;a=s-e.AW.iY}1u if("1Z-x"===e.AF){1a C=r[0]-o.1K;i=C-e.AW.iX}1l ZC.A4(2g.3s).3t("7W 6l",e.RI),ZC.A4(2g.3s).3t("6m 5T",e.NT),e.JF=!0,!1}}},e.RI=1n(n){if(n.6X(),e.JF){1a l=ZC.P.MJ(n),r=ZC.A4("#"+t+"-1v").2b();if("1Z-y"===e.AF){1a o=l[1]-r.1v;o-a<e.B0.iY&&(o=e.B0.iY+a),o-a+e.AW.F>e.B0.iY+e.B0.F&&(o=e.B0.iY+e.B0.F+a-e.AW.F),e.3S(o-a)}1u if("1Z-x"===e.AF){1a s=l[0]-r.1K;s-i<e.B0.iX&&(s=e.B0.iX+i),s-i+e.AW.I>e.B0.iX+e.B0.I&&(s=e.B0.iX+e.B0.I+i-e.AW.I),e.3S(s-i)}}1l!1},e.NT=1n(){1l e.H.KY=e.iI.2p(","),e.JF&&(ZC.A4(2g.3s).3m("7W 6l",e.RI),ZC.A4(2g.3s).3m("6m 5T",e.NT),e.JF=!1),!1},e.Gv=1n(t){(t.vW?-120*t.vW:t.15L)/120>0?e.3S(ZC.BO(e.B0.iY,e.AW.iY-e.AW.F)):e.3S(ZC.CV(e.B0.iY+e.B0.F-e.AW.F,e.AW.iY+e.AW.F))},e.RM=1n(i){e.JF=!0;1a a=ZC.P.MJ(i),n=ZC.A4("#"+t+"-1v").2b();"1Z-y"===e.AF?a[1]-n.1v>e.AW.iY?e.3S(ZC.CV(e.B0.iY+e.B0.F-e.AW.F,e.AW.iY+e.AW.F)):e.3S(ZC.BO(e.B0.iY,e.AW.iY-e.AW.F)):"1Z-x"===e.AF&&(a[0]-n.1K>e.AW.iX?e.3S(ZC.CV(e.B0.iX+e.B0.I-e.AW.I,e.AW.iX+e.AW.I)):e.3S(ZC.BO(e.B0.iX,e.AW.iX-e.AW.I))),e.JF=!1},ZC.A4("."+e.BB.K+"-"+e.AF+"-1V-3r").3t("6K 4I",e.RL),ZC.A4("."+e.BB.K+"-"+e.AF+"-1V-2U").3t("3J",e.RM)}}1O rh 2k DP{2G(e){1E(e);1a t=1g;t.OG="1V",t.B6=1c,t.QF=1c,t.NN="x1",t.IK="5e",t.RA="",t.Q1="",t.VA=!1,t.VJ=!1,t.U5="2a",t.V5="5Z",t.EE=6H,t.DC=1c,t.BR=1c,t.ZT=1c,t.A2=1c,t.NW=1c,t.FO=1c,t.KP=1c,t.QH=0,t.LA=0,t.YZ=!0,t.EI=0,t.GN=0,t.oS="",t.K0="",t.D1={3Z:!1,2j:-1,1X:-1,3g:-1,9T:-1},t.M9=!1,t.NC=!1,t.NJ=-1,t.SH=!1,t.eS=1,t.X4=0,t.LH=!1,t.Y8=!1,t.ZG=!1,t.Y3=[]}e7(e){1a t,i,a=1g,n=!1,l=ZC.3o,r=a.LH;-1!==e&&(r=a.LH||a.A.AY.A7[e].LH),a.o.1P&&1c!==ZC.1d(t=a.o.1P["5V-1P"])&&(n=ZC.2t(t),1c===ZC.1d(a.o["5V-1V"])&&1c===a.A.AY.A7[e].o["5V-1V"]&&(r=n)),(n||r)&&(n&&(a.E["5V-1P"]=e),r&&(a.E["5V-1V"]=ZC.1k(e)),i=a.pg(ZC.1k(e)),a.VG(),a.3k(!0,i),a.YZ=!0,a.1q(),a.j8(!0),a.1t(),ZC.3o=l)}pg(e){1a t,i,a=1g,n=!1;1l e>=0&&(e<a.D1.2j||e>=a.D1.1X)&&(n=!0,"1Z"===a.U5?(e%(i="1Z-y"===a.DC.AF?a.DC.GZ:a.DC.KS)&&(e-=e%i),a.D1.2j=e,a.D1.1X=e+a.EE,a.D1.1X>a.B6.1f&&(a.D1.2j=a.B6.1f-a.EE,a.B6.1f%i&&(a.D1.2j=a.D1.2j+(i-a.B6.1f%i)),a.D1.1X=a.B6.1f)):"3g"===a.U5&&(t=1A.4h(e/a.EE),a.D1.2j=t*a.EE,a.D1.1X=a.D1.2j+a.EE,a.D1.3g=t+1)),n}1q(){1a e,t,i,a,n=1g;if(n.E["e9-fm"]=!0,n.QH=0,n.LA=0,1c!==ZC.1d(e=n.A.A.E["3a-"+n.A.K+"-1V-6x"])&&(n.o.x=e.x-n.A.iX,n.o.y=e.y-n.A.iY),ZC.3o)n.FO&&n.FO.1q(),n.KP&&n.KP.1q();1u{a=n.A.H.B9;1a l="("+n.A.AF+")";1E.1q(),n.4A([["gG","M9","b"],["mL","VA","b"],["15p","VJ","b"],["6e","SH","b"],["9J","U5"],["1X-2C","EE","i"],["6h","eS","i"],["15o-3O","V5"],["5V-1B","X4","b"],["5V-1V","LH","b"],["3y","oS"],["9h-3y","K0"]]),n.M9&&!n.VA&&(n.M9=!1),1o.3I.oP&&(n.E["vU-3y-2K"]||(n.jX({3y:n.oS,"9h-3y":n.K0,3w:n.NN}),n.E["vU-3y-2K"]=!0)),n.X4&&1c===ZC.1d(n.o["5V-1V"])&&(n.LH=n.X4),n.BR=1m DP(n),a.2y(n.BR.o,l+".1V.1P"),n.o.1P&&1c===ZC.1d(n.o.1P.2h)&&(n.o.1P.2h=!0),n.BR.1C(n.o.1P),n.BR.1q(),n.ZT=1m DP(n),a.2y(n.ZT.o,l+".1V.1P-6U"),n.o["1P-6U"]&&1c===ZC.1d(n.o["1P-6U"].2h)&&(n.o["1P-6U"].2h=!0),n.ZT.1C(n.o["1P-6U"]),n.ZT.1q(),n.A2=1m DS(n),a.2y(n.A2.o,l+".1V.1Q"),n.o.1Q&&1c===ZC.1d(n.o.1Q.2h)&&(n.o.1Q.2h=!0),n.A2.1C(n.o.1Q),n.A2.E.1J="2q",n.A2.E["4n-1Q"]=!0,n.A2.E["4n-1y"]=!1,1c!==ZC.1d(e=n.A2.o.1J)&&(n.A2.E.1J=e),1c!==ZC.1d(e=n.A2.o["4n-1y"])&&(n.A2.E["4n-1y"]=ZC.2t(e)),1c!==ZC.1d(e=n.BR.o["1Q-1I"])&&(n.A2.E.1J=e),1c!==ZC.1d(e=n.BR.o["4n-1y"])&&(n.A2.E["4n-1y"]=ZC.2t(e)),1c!==ZC.1d(e=n.BR.o["4n-1Q"])&&(n.A2.o.2h=ZC.2t(e)),n.A2.1q(),n.NW=1m DS(n),a.2y(n.NW.o,l+".1V.1Q-6U"),n.o["1Q-6U"]&&(n.o["1Q-6U"].2h=!0),n.NW.1C(n.o["1Q-6U"]),n.NW.E.1J="2q",n.NW.E["4n-1Q"]=!0,n.NW.E["4n-1y"]=!1,1c!==ZC.1d(e=n.NW.o.1J)&&(n.NW.E.1J=e),1c!==ZC.1d(e=n.NW.o["4n-1y"])&&(n.NW.E["4n-1y"]=ZC.2t(e)),1c!==ZC.1d(e=n.BR.o["1Q-1I"])&&(n.NW.E.1J=e),1c!==ZC.1d(e=n.BR.o["4n-1y"])&&(n.NW.E["4n-1y"]=ZC.2t(e)),1c!==ZC.1d(e=n.BR.o["4n-1Q"])&&(n.NW.o.2h=ZC.2t(e)),n.NW.1q(),(1c!==ZC.1d(e=n.o.5Z)||n.VJ||n.VA)&&(n.FO=1m DP(n),n.FO.OG="15n",n.FO.GM="zc-1V-1P "+n.K+"-5Z",n.FO.K=n.K+"-5Z",a.2y(n.FO.o,l+".1V.5Z"),n.FO.o.1D=n.FO.o.1D||" ",n.FO.1C(e),n.FO.1q(),n.FO.AL||(n.FO=1c)),1c!==ZC.1d(e=n.o.9Z)&&(n.KP=1m DP(n),n.KP.OG="15m",n.KP.GM="zc-1V-1P "+n.K+"-9Z",n.KP.K=n.K+"-9Z",a.2y(n.KP.o,l+".1V.9Z"),n.KP.1C(e),n.KP.1q(),n.KP.AL||(n.KP=1c));1a r=n.A.AY.A7;1c!==ZC.1d(e=n.o.3w)?n.NN=e:25*r.1f>n.A.F&&(n.NN="x"+1A.4j(25*r.1f/n.A.F)),1c!==ZC.1d(e=n.o[ZC.1b[54]])&&(n.IK=e),n.RA=n.Q1=n.IK,1c!==ZC.1d(n.o.1P)&&1c!==ZC.1d(e=n.o.1P[ZC.1b[54]])&&(n.RA=e),1c!==ZC.1d(n.o.1Q)&&1c!==ZC.1d(e=n.o.1Q[ZC.1b[54]])&&(n.Q1=e);1a o=1n(e){if(r[t]&&r[t].FR(0)){1a i=ZC.AN.P2(n.BR.o,r[t].o);e=r[t].FR(0).EW(e,i)}1l e};1j(n.B6=[],t=0,i=r.1f;t<i;t++){1a s=n.A.AY.LU[t],C=1m DP(n);C.1S(n.BR),C.1C(r[s].o["1V-1P"]),1c===ZC.1d(C.o.1D)&&1c!==ZC.1d(e=r[s].pq)&&(C.o.1D=e),1c===ZC.1d(C.o.1D)&&1c!==ZC.1d(e=r[s].AP)&&(C.o.1D=e),C.AP=1c===ZC.1d(C.o.1D)?"lU "+(s+1):C.o.1D,C.E.6t=s,C.E.2Y=s,1c!==ZC.1d(r[s].o["1V-1P"])&&1c!==ZC.1d(e=r[s].o["1V-1P"].6t)&&(C.E.6t=ZC.5l(ZC.1k(e)-1,0,i-1)),-1!==C.AP.1L("%")&&(C.EW=o),C.1q(),n.B6.1h(C)}(e=n.A.E["1V-6x"])&&(n.NC=e.dh)}if(n.B6&&n.A2){"3g"===n.U5?((e=n.A.E["1V-6x"])?(n.D1.2j=e.2j,n.D1.1X=e.1X,n.D1.3g=e.3g):(n.D1.2j=0,n.D1.1X=n.EE,n.D1.3g=1),n.D1.9T=1A.4j(n.B6.1f/n.EE),n.D1.3g>n.D1.9T&&(n.D1.3g=n.D1.9T,n.D1.2j=(n.D1.3g-1)*n.EE,n.D1.1X=n.D1.3g*n.EE-1),n.D1.3g=ZC.CV(n.D1.3g,n.D1.9T)):"1Z"===n.U5?(e=n.A.E["1V-6x"])?(n.D1.2j=e.2j,n.D1.1X=e.1X,n.D1.3g=e.3g):(n.D1.2j=0,n.D1.1X=n.EE,n.D1.3g=1):(n.D1.2j=0,n.D1.1X="97"===n.U5?n.EE:n.B6.1f,n.D1.3g=1),n.VG(!1),1c===ZC.1d(n.A.E["1V-vT"])&&(n.B6.3X(1n(e,t){1l e.E.6t>=t.E.6t?1:-1}),n.A.E["1V-vT"]=!0),n.o["9D-ex"]&&n.B6.9D();1a A=.9*n.A.I;1c!==ZC.1d(n.o[ZC.1b[19]])&&(A=n.I);1a Z=0,c=0,p=-ZC.3v,u=-ZC.3v,h=n.A2.E["4n-1y"]?3:2,1b=0,d=1,f=1;if("8X"===n.NN){1j(t=0,i=n.B6.1f;t<i;t++)if(1b+=n.B6[t].AL?1:0,!(t<n.D1.2j||t>=n.D1.1X||n.NC)&&n.B6[t].AL){1a g=n.B6[t].I+n.B6[t].DY+n.B6[t].E1+h*n.B6[t].DF;u=ZC.BO(u,n.B6[t].F+n.B6[t].E2+n.B6[t].DM),Z+g>A?(p=ZC.BO(p,Z),c+=u,Z=g,u=ZC.BO(u,n.B6[t].F+n.B6[t].E2+n.B6[t].DM)):Z+=g}p=ZC.BO(p,Z),u!==-ZC.3v&&(c+=u),p!==-ZC.3v&&(Z=p)}1u{1a B=0;1j(t=0,i=n.B6.1f;t<i;t++)1b+=n.B6[t].AL?1:0,t<n.D1.2j||t>=n.D1.1X||n.NC||(B+=n.B6[t].AL?1:0);1a v=ZC.AO.ga(n.NN,B);1j(d=v[0],f=v[1],t=0,i=n.B6.1f;t<i;t++)(t<n.D1.2j||t>=n.D1.1X||n.NC)&&("1Z"!==n.U5||1b<=n.EE)||n.B6[t].AL&&(p=ZC.BO(p,n.B6[t].I+n.B6[t].DY+n.B6[t].E1+h*n.B6[t].DF),u=ZC.BO(u,n.B6[t].F+n.B6[t].E2+n.B6[t].DM),1===f&&(c+=n.B6[t].F+n.B6[t].E2+n.B6[t].DM));Z=f*p,c=d*u}if("3g"===n.U5&&1b>n.EE&&(n.D1.3Z=!0),"1Z"===n.U5&&1b>n.EE&&(n.DC||(!d||d>f?(n.DC=1m p0(n,"y"),a.2y(n.DC.o,".1Z-y")):(n.DC=1m p0(n,"x"),a.2y(n.DC.o,".1Z-x")),n.DC.1C(n.o.1Z),n.DC.KS=d,n.DC.GZ=f,n.DC.1q()),n.NC||("1Z-y"===n.DC.AF?Z+=n.DC.B0.I:c+=n.DC.B0.F)),n.FO){1a E=n.FO.I;n.VJ&&"aO"===n.V5?(E+=15,n.VA&&(E+=25)):n.VA&&(E+=15),Z=ZC.BO(Z,E)}n.KP&&(Z=ZC.BO(Z,n.KP.I));1a b=!1,m=!1;if(1c===ZC.1d(n.o[ZC.1b[19]])&&(n.o[ZC.1b[19]]=Z,b=!0),1c===ZC.1d(n.o[ZC.1b[20]])&&(n.o[ZC.1b[20]]=c,m=!0),n.iX=-1,n.iY=-1,!ZC.3o&&n.FO&&1c!==ZC.1d(e=n.A.A.E["1V"+n.A.L+"-xy-fH"])){n.9g();1a K=n.I+n.EM+n.FM,D=n.F+n.FL+n.FT,F=n.SH?n.A.A:n.A;n.iX=F.I*e[0],n.iX=ZC.BO(n.iX,1.1),n.o.x=n.iX=ZC.CV(n.iX,F.I-K-2),n.iY=(F.F-n.FO.F)*e[1],n.iY=ZC.BO(n.iY,1.1),n.o.y=n.iY=ZC.CV(n.iY,F.F-D-n.FO.F-2)}if(n.9g(),1c!==ZC.1d(n.o.2K)&&1w n.E["2K-6x"]!==ZC.1b[31]?(n.E["2K-6x"][0]>.5&&(n.QH+=n.EM+n.FM),n.E["2K-6x"][1]>.5?n.LA+=n.FL+n.FT:(n.FO&&(n.LA-=n.FO.F),n.KP&&(n.LA-=n.KP.F),n.D1&&n.D1.3Z&&(n.LA-=20))):((0===n.A.iX||n.iX+n.I/2>n.A.iX+n.A.I/2)&&(n.QH+=n.EM+n.FM),(0===n.A.iY||n.iY+n.F/2>n.A.iY+n.A.F/2)&&(n.LA+=n.FL+n.FT)),!ZC.3o&&(e=n.A.A.E["3a-"+n.A.K+"-1V-6x"])&&(e.x&&(n.iX=e.x),e.y&&(n.iY=e.y)),n.GN=n.F,n.EI=n.iY,n.FO&&(n.F+=n.FO.F,n.EI+=n.FO.F,n.LA+=n.FO.F),n.KP&&(n.F+=n.KP.F,n.LA+=n.KP.F),n.D1.3Z&&!n.NC){1a I=1m DP(n);I.AP=" ",I.1C(n.o["3g-6S"]),1c!==ZC.1d(I.o.1D)&&""!==I.o.1D||(I.o.1D="#"),I.1q(),n.F+=I.F+4,n.LA+=I.F+4}b&&(n.o[ZC.1b[19]]=1c),m&&(n.o[ZC.1b[20]]=1c),n.NC||(n.I+=n.EM+n.FM,n.F+=n.FL+n.FT),n.E["2q-1s"]&&(n.I=n.E["2q-1s"])}}jX(e){1a t=1g;if(1c!==ZC.1d(e)){1a i=t.A.H.B9.B9.3a.1V,a=e.3y||i.3y,n=e["9h-3y"]||i["9h-3y"],l=e.3w||i.3w;(a||n)&&("3G"===a?(1c===ZC.1d(t.o.3w)&&(l=t.o.3w="cf"),t.o.2K="50% "):t.o.2K="1K"===a?"0% ":"100% ",t.o.2K+="6r"===n?"50%":"2c"===n?"100%":"0%","cf"!==l&&"6r"!==n||(t.o["94-3w"]=!0))}}VG(e){1a t=1g;1w e===ZC.1b[31]&&(e=!0),t.A.E["1V-6x"]={dh:t.NC,2j:t.D1.2j,1X:t.D1.1X,3g:t.D1.3g},e&&(t.A.A.E["3a-"+t.A.K+"-1V-6x"]={x:t.iX,y:t.iY})}3k(e,t){1c===ZC.1d(e)&&(e=!1),1c===ZC.1d(t)&&(t=!1);1a i=1g,a=i.A.K+"-1V-",n=1c;ZC.A4("."+a+"1P",n).3q(),ZC.A4("."+a+"5Z",n).3q(),ZC.A4("."+a+"9Z",n).3q(),ZC.A4("#"+a+"3g-6S",n).3q(),e&&!t||(ZC.3o||i.3m(),ZC.A4("."+a+"3g-1N",n).3q(),ZC.A4("."+a+"5Z-1N",n).3q(),ZC.A4("."+a+"1P-1N",n).3q(),ZC.A4("."+a+"1Q-1N",n).3q()),ZC.3o?ZC.P.IM(ZC.AK(a+"c"),i.A.H.AB,i.A.iX,i.A.iY,i.A.I,i.A.F):ZC.P.IM(ZC.AK(a+"c"),i.A.H.AB,i.iX-2*i.AQ-2*i.JX,i.iY-2*i.AQ-2*i.JX,i.I+4*i.AQ+4*i.JX,i.F+4*i.AQ+4*i.JX),i.DC&&ZC.P.IM(ZC.AK(a+"1Z-c"),i.A.H.AB,i.A.iX,i.A.iY,i.A.I,i.A.F)}3m(){1a e=1g;ZC.A4("#"+e.K+"-a0").4k(ZC.P.BX("76"),e.nz).4k(ZC.P.BX("7F"),e.nl),ZC.A4("#"+e.K+"-3o-1N").4k(ZC.P.BX(ZC.1b[47]),e.ZO),ZC.A4("#"+e.K+"-mL-1N").4k(ZC.P.BX("3J"),e.YG),ZC.A4("."+e.K+"-3g-1N").4k(ZC.P.BX("3J"),e.ZJ),e.DC&&e.DC.3m(),e.BR&&e.BR.o.nu&&ZC.A4("."+e.A.K+"-1V-1P-1N").4k(ZC.1b[47],e.WH)}j8(e){1a t=1g;if(t.YZ&&1c===ZC.1d(t.o.y)||e){if(!t.o.2K&&e||(t.iX-=t.QH),t.iX<t.DY&&(t.DY<t.E1||-2===t.E1)&&(t.iX=t.DY),!t.o.2K&&e||(t.iY-=t.LA,t.EI-=t.LA),t.iY<t.E2&&(t.E2<t.DM||-2===t.DM)){1a i=t.EI-t.iY;t.iY=t.E2,t.EI=t.E2+i}t.YZ=!1}}EB(e){1a t=1g;t.FO&&t.FO.EB(e),t.KP&&t.KP.EB(e);1j(1a i=0;i<t.Y3.1f;i++)t.Y3[i].EB(e)}1t(e){1a t,i,a,n,l,r,o,s,C,A,Z,c,p,u,h,1b,d=1g;if(d.AL&&(d.E["2q-1s"]||(d.E["2q-1s"]=d.I),d.B6)){1a f=ZC.AK(d.H.K+"-1v"),g=d.A.AY.A7,B=0;1j(r=0,o=d.B6.1f;r<o;r++)r<d.D1.2j||r>=d.D1.1X||d.NC||(B+=d.B6[r].AL?1:0);d.m6=!0,1E.1t(),d.FO&&(d.FO.iX=d.iX,d.FO.iY=d.iY,d.FO.I=d.I,d.FO.Z=d.FO.C6=d.Z,d.FO.1t(),ZC.3o||"3c"!==d.A.A.AB&&d.FO.EB(),d.VJ&&"aO"===d.V5&&((a=1m DS(d)).Z=d.Z,a.B8="#4v",a.AZ=1,a.DN="1y",a.1C(d.o.aO),n=d.FO.iX+d.FO.I-10,l=d.FO.iY+d.FO.F/2,a.D=[[n-7,l],[n+7,l],1c,[n,l-7],[n,l+7],1c,[n-6,l-1],[n-6,l+1],1c,[n-5,l-2],[n-5,l+2],1c,[n+6,l-1],[n+6,l+1],1c,[n+5,l-2],[n+5,l+2],1c,[n-1,l-6],[n+1,l-6],1c,[n-2,l-5],[n+2,l-5],1c,[n-1,l+6],[n+1,l+6],1c,[n-2,l+5],[n+2,l+5]],a.1q(),a.1t()),d.VA&&((i=1m DS(d)).Z=d.Z,i.B8=ZC.AN.q7(d.A0,"#2T","#4v"),i.AZ=1,i.1C(d.o.aO),i.DN="1y",n=d.FO.iX+d.FO.I-10-(d.VJ&&"aO"===d.V5?20:0),l=d.FO.iY+d.FO.F/2,i.D=[[n-7,l-2],[n+2,l-2],[n+2,l+7],[n-7,l+7],[n-7,l-2],[n+2,l-2],1c,[n-4,l-5],[n+5,l-5],[n+5,l+4],[n-4,l+4],[n-4,l-5],[n+5,l-5]],i.1q(),i.1t())),d.KP&&(d.KP.iX=d.iX,d.KP.iY=d.iY+d.F-d.KP.F,d.KP.I=d.I,d.KP.Z=d.KP.C6=d.Z,d.KP.1t(),ZC.3o||"3c"!==d.A.A.AB&&d.KP.EB());1a v=ZC.AO.ga(d.NN,B),E=v[0],b=v[1],m=d.I/b,K=d.GN/E,D=0,F=0;d.QF=[];1a I,x=0,X=-ZC.3v,y=d.A2.E["4n-1y"]?3:2,Y=1c,L=1n(t){1a i=t;if(1c===ZC.1d(e)&&(e=0),g[I]&&g[I].S[e]){1a a=ZC.AN.P2(d.BR.o,g[I].o);t=g[I].FR(e).EW(t,a)}1l d.Y8=d.Y8||t!==i,t},w=0;1j(d.Y8=!1,r=0,o=d.B6.1f;r<o;r++)if(!(r-w<d.D1.2j||r-w>=d.D1.1X||d.NC)){1a M=1m DP(d);M.1S(d.B6[r]),d.E["5V-1V"]===r&&(M.1C({6A:!0}),1c!==ZC.1d(d.o.1P)&&M.1C(d.o.1P["5V-3Y"])),I=M.E.2Y;1a H=1m DP(d);H.OG="15l",H.K=d.K+"-7E"+I,H.GM="zc-1V-1P "+d.K+"-1P",H.1S(M),d.A.E["1B"+I+".2h"]&&"6U"!==g[I].o["1V-6S"]||H.1C(d.ZT.o),H.1C(g[I].o["1V-1P"]),H.EW=L,H.1q(),H.AL?("8X"===d.NN?(X=ZC.BO(X,M.F),1c===ZC.1d(Y)?(M.iX=d.iX+d.EM+M.DY+y*M.DF,M.iY=d.EI+d.FL+M.E2,x=d.EI):(M.iX=Y.iX+Y.I+Y.E1+M.DY+y*M.DF,ZC.1k(M.iX+M.I+M.E1)>ZC.1k(d.iX+d.I)&&(M.iX=d.iX+d.EM+M.DY+y*M.DF,x+=X+M.E2+M.DM,X=-ZC.3v),M.iY=x+d.FL+M.E2)):(M.iX=d.iX+(0===F?d.EM:0)+F*m+M.DY+y*M.DF,M.iY=d.EI+d.FL+D*K+M.E2,++F===b&&(F=0,D++)),Y=M,H.iX=M.iX=ZC.1k(M.iX),H.iY=M.iY=ZC.1k(M.iY),H.Z=H.C6=d.Z,H.iX+=d.BJ,H.iY+=d.BC,I===d.NJ&&(d.E["mP-y"]&&(d.E["mP-y"]=!1,d.E["9m-2b-y"]=d.E["9m-y"]-H.iY),H.iY=d.E["9m-y"]-d.E["9m-2b-y"]-H.DF/4),H.1t(),1w d.E.lI!==ZC.1b[31]&&1c!==ZC.1d(d.E.lI)||ZC.3o||("3c"!==d.A.A.AB?H.EB():d.Y3.1h(H))):w++;1a N=d.A2.E.1J;1c!==ZC.1d(t=g[I].o["1V-1Q"])&&1c!==ZC.1d(t.1J)&&(N=t.1J);1a O,S=!1;1R("m2"!==N&&"5q"!==N||(S=!0,N=1c!==ZC.1d(t=g[I].A2.o.1J)?t:"2q"),-1!==ZC.AT(["2q","9j"],N)?O=1m I4(d):(O=1m DS(d)).DN=N,O.OG="15k",O.1C(d.A2.o),d.A.E["1B"+I+".2h"]&&"6U"!==g[I].o["1V-6S"]||O.1C(d.NW.o),O.NI=g[I].NI,g[I].AF){1i"3P":1i"7e":1i"8Y":1i"5x":1i"6T":1i"6b":1i"7o":1i"8k":1i"81":1i"1N":1i"8a":1i"8E":1i"aa":1i"au":1i"b9":O.A0=g[I].A0,O.AC=g[I].AC,O.GQ=g[I].GQ,O.HP=g[I].HP;1p;1i"6y":1i"8t":1i"5i":1i"6B":O.A0="-1"!==g[I].A2.A0?g[I].A2.A0:g[I].A0,O.AC="-1"!==g[I].A2.AC?g[I].A2.AC:g[I].AC,O.GQ=""!==g[I].A2.GQ?g[I].A2.GQ:g[I].GQ,O.HP=""!==g[I].A2.HP?g[I].A2.HP:g[I].HP;1p;2q:O.A0=g[I].B8,O.AC=g[I].B8}"1y"!==O.DN&&"1N"!==O.DN||(O.B8=O.A0,O.AZ=2),S&&O.1C(g[I].A2.o),O.o["1y-1I"]="2V",O.o.1J=O.DN,O.1C(g[I].o["1V-1Q"]),S&&(O.o.1J=O.DN),O.E["4n-1Q"]=!0,O.E["4n-1y"]=!1,1c!==ZC.1d(t=O.o["4n-1y"])&&(O.E["4n-1y"]=ZC.2t(t)),1c!==ZC.1d(t=H.o["4n-1y"])&&(O.E["4n-1y"]=ZC.2t(t)),1c!==ZC.1d(t=H.o["4n-1Q"])&&(O.o.2h=ZC.2t(t)),-1!==ZC.AT(["2q","9j"],N)&&1c!==ZC.1d(t=O.o[ZC.1b[21]])&&(1c===ZC.1d(O.o[ZC.1b[19]])&&(O.o[ZC.1b[19]]=2*ZC.1k(t)),1c===ZC.1d(O.o[ZC.1b[20]])&&(O.o[ZC.1b[20]]=2*ZC.1k(t))),O.K=d.K+"-aI"+I,O.Z=O.C6=d.Z,O.iX=H.iX-y*H.DF+(y-1)*H.DF/2+H.DF/2,O.iY=H.iY+(H.F-H.DF)/2+H.DF/2,O.1q(),d.E["5V-1V"]===r&&(O.1C({2e:O.AI+1,1s:O.I+2,1M:O.F+2}),g[I]&&g[I].S[e]&&g[I].S[e].GI&&O.1C({A0:g[I].S[e].GI.A0,AC:g[I].S[e].GI.AC}),1c!==ZC.1d(d.o.1Q)&&O.1C(d.o.1Q["5V-3Y"]),O.1q()),"1y"===O.DN?(O.o.2W=[[O.iX-1.75*O.AI,O.iY],[O.iX+1.75*O.AI,O.iY]],O.1q()):"1N"===O.DN&&(O.o.2W=[[O.iX-1.75*O.AI,O.iY+O.AI],[O.iX+1.75*O.AI,O.iY+O.AI],[O.iX+1*O.AI,O.iY-O.AI/2],[O.iX,O.iY],[O.iX-1.25*O.AI,O.iY-O.AI],[O.iX-1.75*O.AI,O.iY+O.AI]],O.1q());1a P=O.iX+O.BJ,G=O.iY+O.BC;if(-1!==ZC.AT(["2q","9j"],N)&&(O.iX-=O.I/2,O.iY-=O.F/2),d.A.E["1B"+I+".2h"]&&"6U"!==g[I].o["1V-6S"]||(O.C5/=4),H.AL&&O.E["4n-1y"]){1a T=ZC.P.E6(d.Z,d.A.H.AB),k=1m CY(d);k.Z=d.Z,k.1S(g[I]),k.o["1y-1I"]=d.A2.GD,k.1C(g[I].o),k.1C(d.A2.o),k.1C(g[I].o["1V-1P"]),k.1C(g[I].o["1V-1Q"]),k.1q(),d.A.E["1B"+I+".2h"]||(k.C5=.25);1a J=[],z=O.AL?2:1;s="3C"===O.DN?O.I/2:O.AI,J.1h([P-z*s-(k.AZ>1?1:0),G-(k.AZ>1?.5:0)]),J.1h([P+z*s,G-(k.AZ>1?.5:0)]),k.CX=!0,ZC.CN.1t(T,k,J)}I===d.NJ&&(O.iY=d.E["9m-y"]-d.E["9m-2b-y"]/2),O.AL&&H.AL&&O.1t(),d.QF.1h(O);1a R=!0;if(1c!==ZC.1d(t=d.BR.o.9L)&&(R=ZC.2t(t)),d.E["1P.9L"]=R,(H.AL||O.AL)&&-1===ZC.AT(d.A.H.KY,ZC.1b[41])){1a Q=O.BJ+("3C"===O.DN?O.iX+O.I/2:O.iX),W=O.BC+("3C"===O.DN?O.iY+O.F/2:O.iY);s="3C"===O.DN?O.I/2:O.AI,C="3C"===O.DN?O.F/2:O.AI;1a V=(O.E["4n-1y"]?2:1)*s;ZC.AK(H.K+"-1N")||(O.AL&&"lZ"!==d.Q1&&"lZ"!==O.o[ZC.1b[54]]&&(ZC.AK(O.K+"-1N")||ZC.P.I1({2o:d.K+"-1Q-1N zc-1V-1Q-1N zc-3l",id:O.K+"-1N",wh:2*V+"/"+2*C,tl:W-C+"/"+(Q-V),3n:0,1W:"#2T",4S:O.IX,p:f,8r:1})),H.AL&&"lZ"!==d.RA&&"lZ"!==H.o[ZC.1b[54]]&&(ZC.AK(H.K+"-1N")||ZC.P.I1({2o:d.K+"-1P-1N zc-1V-1P-1N zc-3l",id:H.K+"-1N",wh:H.I+"/"+H.F,tl:H.iY+H.BC+"/"+(H.iX+H.BJ),3n:0,1W:"#2T",4S:H.IX,p:f,8r:1})))}}if(d.DC&&!d.NC&&(d.DC.1t(),ZC.AK(d.K+"-1Z-c").1I.3M="8K"),d.DC&&d.NC&&(ZC.AK(d.K+"-1Z-c").1I.3M="2a"),d.D1.3Z&&!d.NC){1a U=1m DP(d);U.Z=U.C6=d.Z,U.K=d.K+"-3g-6S",U.AP=ZC.HF["1V-vF"].1F("%3g%",d.D1.3g).1F("%9T%",d.D1.9T),U.1C(d.o["3g-6S"]),U.1q(),d.I<U.I+48&&(U.AP=d.D1.3g+"/"+d.D1.9T,U.1q()),U.iX=d.iX+d.I/2-U.I/2,U.iY=d.iY+d.F-(d.KP?d.KP.F:0)-U.F-4,U.AL&&U.1t();1a j=d.A.H.B9,q="("+d.A.AF+")",$={"1W-1r":"#4L"},ee={"1W-1r":"#vN"};j.2y($,q+".1V.3g-6U"),j.2y(ee,q+".1V.3g-on"),(Z=1m DS(d)).Z=Z.C6=d.Z,Z.K=d.K+"-3g-vL",Z.A0=Z.AC=d.D1.3g>1?ee[ZC.1b[0]]:$[ZC.1b[0]],Z.1C(d.D1.3g>1?d.o["3g-on"]:d.o["3g-6U"]),A=d.iX+d.I/2-U.I/2-6,c=U.iY+U.F/2,Z.1q(),Z.AI=ZC.BO(Z.AI,8),1b=ZC.1k(.75*Z.AI),Z.D=[[A,c-1b],[A,c+1b],[A-Z.AI,c],[A,c-1b]],Z.1q(),Z.AL&&Z.1t(),(u=1m DS(d)).Z=u.C6=d.Z,u.K=d.K+"-3g-pM",u.A0=u.AC=d.D1.3g<d.D1.9T?ee[ZC.1b[0]]:$[ZC.1b[0]],u.1C(d.D1.3g<d.D1.9T?d.o["3g-on"]:d.o["3g-6U"]),p=d.iX+d.I/2+U.I/2+6,h=U.iY+U.F/2,u.1q(),u.AI=ZC.BO(u.AI,8),1b=ZC.1k(.75*u.AI),u.D=[[p,h-1b],[p,h+1b],[p+u.AI,h],[p,h-1b]],u.1q(),u.AL&&u.1t()}if(!ZC.3o){1a te,ie,ae=d.F,ne=d.iY;d.FO&&(ae-=d.FO.F,ne+=d.FO.F),ZC.AK(d.K+"-a0")?ZC.A4("#"+d.K+"-a0").2O("1v",ne+"px").2O("1K",d.iX+"px").2O(ZC.1b[19],d.I+"px").2O(ZC.1b[20],ae+"px"):ZC.P.I1({2o:"zc-3l zc-1V-a0 "+d.K+"-a0",id:d.K+"-a0",wh:d.I+"/"+ae,tl:ne+"/"+d.iX,3n:0,1W:"#2T",p:f,8r:0}),d.D1.3Z&&!d.NC&&(d.D1.3g>1&&ZC.P.I1({2o:d.K+"-3g-1N zc-1V-3g-1N zc-3l",id:d.K+"-3g-vL-1N",wh:Z.AI+"/"+2*Z.AI,tl:ZC.1k(c+Z.BC-Z.AI)+"/"+ZC.1k(A+Z.BJ-Z.AI),3n:0,p:f,8r:1}),d.D1.3g<d.D1.9T&&ZC.P.I1({2o:d.K+"-3g-1N zc-1V-3g-1N zc-3l",id:d.K+"-3g-pM-1N",wh:u.AI+"/"+2*u.AI,tl:ZC.1k(h+Z.BC-u.AI)+"/"+ZC.1k(p+u.BJ),3n:0,p:f,8r:1})),d.FO&&d.VJ&&("aO"===d.V5?(ie=ZC.1k(d.FO.iY+ZC.3B+a.BC)+"/"+ZC.1k(d.FO.iX+d.FO.I-20+ZC.3B+a.BJ),te="20/"+d.FO.F):(ie=ZC.1k(d.FO.iY+ZC.3B)+"/"+ZC.1k(d.FO.iX+ZC.3B),te=d.FO.I-(d.VA?23:0)+"/"+d.FO.F),ZC.P.I1({2o:d.K+"-5Z-1N zc-1V-5Z-1N zc-3l",id:d.K+"-3o-1N",wh:te,tl:ie,3n:0,p:f,8r:1})),d.VA&&(d.VJ&&"aO"===d.V5?(ie=ZC.1k(d.FO.iY+ZC.3B+i.BC)+"/"+ZC.1k(d.FO.iX+d.FO.I-41+ZC.3B+i.BJ),te="20/"+d.FO.F):(ie=ZC.1k(d.FO.iY+ZC.3B+i.BC)+"/"+ZC.1k(d.FO.iX+d.FO.I-22+ZC.3B+i.BJ),te="20/"+d.FO.F),ZC.P.I1({2o:d.K+"-5Z-1N zc-1V-5Z-1N zc-3l",id:d.K+"-mL-1N",wh:te,tl:ie,3n:0,p:f,8r:1})),d.P5=0,d.pI=0,d.nz=1n(){d.ZG=!0},d.nl=1n(){d.ZG=!1},d.ZO=1n(e){if(e.6X(),d.H.9p(),ZC.3o=!0,ZC.2L||!(e.9u>1)){d.A.A.E["3a-"+d.A.K+"-1V-6x"]=1c;1a t=ZC.P.MJ(e),i=ZC.A4("#"+d.A.A.K+"-1v").2b();d.P5=t[0]-i.1K-d.FO.iX,d.pI=t[1]-i.1v-d.FO.iY,d.pJ=2g.3s.1I.4S,2g.3s.1I.4S="3o",ZC.A4(2g.3s).3t(ZC.P.BX(ZC.1b[48]),d.ZP),ZC.A4(2g.3s).3t(ZC.P.BX(ZC.1b[49]),d.pL)}},d.ZP=1n(e){1a t=ZC.P.MJ(e),i=ZC.A4("#"+d.A.A.K+"-1v").2b(),a=t[0]-i.1K-d.P5,n=t[1]-i.1v-d.pI;if(d.SH?(a=ZC.BO(a,d.H.iX+2),a=ZC.CV(a,d.H.iX+d.H.I-d.I-2),n=ZC.BO(n,d.H.iY+2),n=ZC.CV(n,d.H.iY+d.H.F-d.F-4)):(a=ZC.BO(a,d.A.iX+2),a=ZC.CV(a,d.A.iX+d.A.I-d.I-2),n=ZC.BO(n,d.A.iY+2),n=ZC.CV(n,d.A.iY+d.A.F-d.F-4)),d.SH||(a-=d.A.iX,n-=d.A.iY),d.o.x=a,d.o.y=n,d.o.2K=1c,d.3k(!0),d.1q(),d.1t(),d.FO){1a l=d.SH?d.A.A:d.A;d.A.A.E["1V"+d.A.L+"-xy-fH"]=[a/l.I,n/(l.F-d.FO.F)]}},d.pL=1n(){ZC.3o=!1,2g.3s.1I.4S=d.pJ,4s d.pJ,ZC.A4(2g.3s).3m(ZC.P.BX(ZC.1b[48]),d.ZP),ZC.A4(2g.3s).3m(ZC.P.BX(ZC.1b[49]),d.pL),d.Y3=[],d.3k(!1),d.1q(),d.1t(),d.VG()},d.ZJ=1n(e){d.E["2q-1s"]=1c,-1!==(e.9G||e.2X.id).1L("-3g-pM-1N")?(d.D1.2j+=d.EE,d.D1.1X+=d.EE,d.D1.3g+=1):(d.D1.2j-=d.EE,d.D1.1X-=d.EE,d.D1.3g-=1),(!(t=d.A.A.E["3a-"+d.A.K+"-1V-6x"])||1c===ZC.1d(t.x)&&1c===ZC.1d(t.y))&&(d.iX=1c,d.iY=1c),d.VG(),d.A.JU()},d.YG=1n(e){1a t=d.NC?"vH":"gA";e&&(d.A.A.E["1V-os"]=1),1o.3p(d.A.H.K,t,{4u:d.A.L}),e&&(d.A.A.E["1V-os"]=0),e&&(d.A.A.E["g"+d.A.L+"-1V-dh"]="gA"===t)},d.MT=1n(e){ZC.3o=!0;1a t=ZC.P.MJ(e),i=ZC.A4("#"+d.A.A.K+"-1v").2b(),a=t[0]-i.1K,n=t[1]-i.1v;d.E["9m-x"]=a,d.E["9m-y"]=n,d.VG(),d.3k(!1),d.1q(),d.1t()},d.WH=1n(e){if(e.6X(),d.H.9p(),d.IX=2g.3s.1I.4S,2g.3s.1I.4S="3o",ZC.2L||!(e.9u>1)){1a t=1m 5n("-1V-7E([0-9]+)-1N","g").3p(e.2X.id);t&&(d.E["9m-2b-y"]=0,d.E["mP-y"]=!0,d.E["9m-x"]=0,d.E["9m-y"]=0,d.NJ=ZC.1k(t[1]),d.pY=ZC.AT(d.A.AY.LU,d.NJ),ZC.A4(2g.3s).3t(ZC.P.BX(ZC.1b[48]),d.MT),ZC.A4(2g.3s).3t(ZC.P.BX(ZC.1b[49]),d.XS))}},d.XS=1n(){1a e=d.NJ,t=d.pY;if(d.NJ=-1,d.pY=-1,d.E["mP-y"]=!1,2g.3s.1I.4S=d.IX,ZC.3o||(e=-1,t=-1),ZC.A4(2g.3s).3m(ZC.P.BX(ZC.1b[48]),d.MT),ZC.A4(2g.3s).3m(ZC.P.BX(ZC.1b[49]),d.XS),ZC.3o&&-1!==e){1j(1a i=d.A.AY.A7,a=d.A.AY.LU,n=0,l=i.1f;n<l;n++)i[n].o["1V-1P"]=i[n].o["1V-1P"]||{},1c===ZC.1d(i[n].o["1V-1P"].6t)&&(i[n].o["1V-1P"].6t=ZC.1k(i[n].o["z-2Y"]||n+1));1j(1a r=i[e].o["1V-1P"].6t,o=-1,s=0,C=d.QF.1f;s<C;s++)d.E["9m-y"]-d.E["9m-2b-y"]/2>d.QF[s].iY&&(o=s);1j(i[e].o["1V-1P"].6t=-1===o?.5:i[a[o]].o["1V-1P"].6t+.5,s=0,C=d.QF.1f;s<C;s++)o>t?i[s].o["1V-1P"].6t<i[e].o["1V-1P"].6t&&i[s].o["1V-1P"].6t>r&&i[s].o["1V-1P"].6t--:i[s].o["1V-1P"].6t>i[e].o["1V-1P"].6t&&i[s].o["1V-1P"].6t<r&&i[s].o["1V-1P"].6t++;1j(i[e].o["1V-1P"].6t=o>t?1A.4h(i[e].o["1V-1P"].6t):1A.4j(i[e].o["1V-1P"].6t),s=0,C=d.QF.1f;s<C;s++)d.A.o[ZC.1b[11]][s]["z-2Y"]=i[s].o["1V-1P"].6t}d.A.AY.E["1B-3X"]=!0,ZC.3o=!1,d.3k(!1),d.A.JU()},ZC.A4("#"+d.K+"-a0").4g(ZC.P.BX("76"),d.nz).4g(ZC.P.BX("7F"),d.nl),ZC.A4("#"+d.K+"-3o-1N").4g(ZC.P.BX(ZC.1b[47]),d.ZO),ZC.A4("#"+d.K+"-mL-1N").4g(ZC.P.BX("3J"),d.YG),ZC.A4("."+d.K+"-3g-1N").4g(ZC.P.BX("3J"),d.ZJ),d.BR.o.nu&&ZC.A4("."+d.A.K+"-1V-1P-1N").4g(ZC.1b[47],d.WH)}d.E.lI=1c,1===d.A.A.E["1V-os"]||ZC.3o||(d.M9&&1c===ZC.1d(d.A.A.E["g"+d.A.L+"-1V-dh"])||d.A.A.E["g"+d.A.L+"-1V-dh"]&&!d.NC)&&(2v.5I(1n(){d.YG(!0)},0),d.A.A.E["g"+d.A.L+"-1V-dh"]=!0)}}gc(){ZC.AN.gc(1g,["B6","D","QF","Z","C6","o","JW","I7","KP","FO","BR","ZT","H","A","A2","NW","D1"])}}1O wD 2k DS{2G(e){1E(e);1a t=1g;t.N3=1c,t.BA=1c,t.M=1c,t.JT=0,t.BD=1c,t.GA="2c",t.L7=40,t.f9=[2,4]}1q(){1a e,t,i,a=1g;(a.4A([["z-2Y","JT","i"],["1f","L7","i"],["7j","f9"],["bi","GA"]]),1c===ZC.1d(a.o.6o)&&1c===ZC.1d(a.o.to))&&(1c!==ZC.1d(a.o.x)&&1c!==ZC.1d(a.o.y)&&1c!==ZC.1d(a.o.1f)&&1c!==ZC.1d(a.o.2f)&&(t="3e"==1w a.o.x?a.A.OF(a.o.x)[0]:ZC.1k(a.o.x),i="3e"==1w a.o.y?a.A.OF(a.o.y)[1]:ZC.1k(a.o.y),a.o.6o={x:t+a.L7*ZC.EL(a.AA+180),y:i+a.L7*ZC.EF(a.AA+180)},a.o.to={x:t+a.L7*ZC.EL(a.AA),y:i+a.L7*ZC.EF(a.AA)}));1c!==ZC.1d(e=a.o.6o)&&(a.N3=1m DS(a.A),a.N3.1C(e),1c!==e.7q&&(a.N3.E.7q=e.7q),a.N3.1q(),"3e"==1w e&&(a.N3.E.7q=e)),1c!==ZC.1d(e=a.o.to)&&(a.BA=1m DS(a.A),a.BA.1C(e),1c!==e.7q&&(a.BA.E.7q=e.7q),a.BA.1q(),"3e"==1w e&&(a.BA.E.7q=e)),(1c!==ZC.1d(e=a.o.1H)||""!==a.o.1D&&1w a.o.1D!==ZC.1b[31])&&(a.M=1m DP(a),a.M.1C(a.o),a.M.1C(e),a.M.1q()),1E.1q()}1t(){1a e,t,i=1g;if(i.AL&&(1c!==i.N3||1c!==i.BA))if(i.AI<1&&(i.AI=1),!i.N3||1c===ZC.1d(e=i.N3.E.7q)||(t=i.A.OF(e),i.N3.iX=t[0],i.N3.iY=t[1],i.N3.iX+=i.N3.BJ,i.N3.iY+=i.N3.BC,ZC.DQ(i.N3.iX,i.A.Q.iX-2,i.A.Q.iX+i.A.Q.I+2)&&ZC.DQ(i.N3.iY,i.A.Q.iY-2,i.A.Q.iY+i.A.Q.F+2)))if(!i.BA||1c===ZC.1d(e=i.BA.E.7q)||(t=i.A.OF(e),i.BA.iX=t[0],i.BA.iY=t[1],i.BA.iX+=i.BA.BJ,i.BA.iY+=i.BA.BC,ZC.DQ(i.BA.iX,i.A.Q.iX-2,i.A.Q.iX+i.A.Q.I+2)&&ZC.DQ(i.BA.iY,i.A.Q.iY-2,i.A.Q.iY+i.A.Q.F+2))){1a a,n;if(i.N3&&i.BA)a=[i.N3.iX,i.N3.iY],n=[i.BA.iX,i.BA.iY];1u if(i.N3&&!i.BA)1R(a=[i.N3.iX,i.N3.iY],i.GA){1i"1v":n=[i.N3.iX,i.N3.iY+i.L7];1p;1i"2z":n=[i.N3.iX+i.L7,i.N3.iY];1p;1i"2c":n=[i.N3.iX,i.N3.iY-i.L7];1p;1i"1K":n=[i.N3.iX-i.L7,i.N3.iY]}1u if(!i.N3&&i.BA)1R(n=[i.BA.iX,i.BA.iY],i.GA){1i"1v":a=[i.BA.iX,i.BA.iY+i.L7];1p;1i"2z":a=[i.BA.iX-i.L7,i.BA.iY];1p;1i"2c":a=[i.BA.iX,i.BA.iY-i.L7];1p;1i"1K":a=[i.BA.iX+i.L7,i.BA.iY]}1a l,r=n[0]-a[0],o=n[1]-a[1],s=ZC.U4(1A.t1(o,r)),C=1A.5A(r*r+o*o),A=[];if(A.1h(a),l=ZC.AO.BM(a[0],a[1],i.AI/2,s+90),A.1h(l),l=ZC.AO.BM(l[0],l[1],C-i.f9[1]*i.AI/2,s),A.1h(l),l=ZC.AO.BM(l[0],l[1],i.f9[0]*i.AI/2,s+90),A.1h(l),A.1h(n),l=ZC.AO.BM(l[0],l[1],(2*i.f9[0]+2)*i.AI/2,s-90),A.1h(l),l=ZC.AO.BM(l[0],l[1],i.f9[0]*i.AI/2,s+90),A.1h(l),l=ZC.AO.BM(a[0],a[1],i.AI/2,s-90),A.1h(l),A.1h(a),i.BD=1m DS(i.A),i.BD.K=i.K,i.BD.Z=i.BD.C6=i.Z,i.BD.1S(i),i.BD.D=A,i.BD.CX=!1,i.BD.1q(),i.BD.1t(),1c!==i.M&&i.M.AL){i.M.Z=i.Z,i.M.K=i.A.K+"-7L-1H-"+i.H4,i.M.GM=i.A.K+"-7L-1H zc-7L-1H";1a Z=ZC.AO.JZ(a[0],a[1],n[0],n[1]);i.M.iX=Z[0],i.M.iY=Z[1],i.M.BJ-=i.M.I/2,i.M.BC-=i.M.F/2,1c!==ZC.1d(i.M.o["2s-2f"])&&"5q"===i.M.o["2s-2f"]&&(i.M.AA=s),i.M.1t(),i.M.EB()}}1u i.AL=!1;1u i.AL=!1}}1O KB 2k ao{2G(e){1E(e);1a t=1g;t.H=e,t.SG=!1,t.C4=1c,t.ZA=1c,t.QN=1c,t.jt=1c}3m(){1a e=1g;e.C4&&2v.9X(e.C4),e.ZA&&2v.9X(e.ZA),ZC.A4(2g.3s).3m("7W 4I 6l",e.QN),ZC.A4(2g.3s).3m("5T",e.jt)}3t(){1a e,t=1g,i=t.H.K,a=ZC.AK(i+"-2i-c"),n=ZC.P.E6(a,t.H.AB),l={},r={},o={},s={},C=1c,A=1c,Z=1c;1n c(){!A&&Z&&(Z.E["2i-6L-1B"]=1c),KB.5Y&&KB.5Y[i]&&!KB.5Y[i].k3&&KB.gI(i),A=1c}ZC.2L||1c!==ZC.1d(ZC.ZA)||(t.ZA=2v.fb(1n(){1j(1a e=!0,a=0,n=1o.I2.1f;a<n;a++)if(i===1o.I2[a].K)if(ZC.AK(1o.I2[a].K+"-1v")){1a l=ZC.al(i),r=ZC.A4("#"+1o.I2[a].K+"-1v").2b();ZC.DU[0]>=r.1K&&ZC.DU[0]<=r.1K+1o.I2[a].I*l[0]&&ZC.DU[1]>=r.1v&&ZC.DU[1]<=r.1v+1o.I2[a].F*l[1]&&(e=!1)}1u 2v.9X(t.ZA);e&&(c(),KB.5Y&&KB.5Y[i]&&KB.5Y[i].6L&&(ZC.AN.C2("wg",t.H,t.H.FF()),KB.5Y[i].6L=!1))},lT)),t.QN=1n(p){if(1o.hB=p,!p.2X.id||-1===p.2X.id.1L("-2B-1P-")){1a u,h,1b,d,f,g,B,v,E,b,m,K,D,F,I,x,X,y,Y,L,w,M,H,N,O;ZC.3v,ZC.3v;1j(u=0;u<1o.I2.1f;u++)if(1o.I2[u].K!==t.H.K&&-1!==1o.I2[u].K.1L("-5R"))1l;if((ZC.6Q||p.1J!==ZC.1b[48]||!ZC.bh)&&-1!==p.2X.id.1L(t.H.K+"-")&&(!ZC.3o||ZC.2L)){if(t.H.h5||!ZC.AK(i+"-1v"))1l!1;if(!ZC.P.t7(ZC.AK(i+"-1v")))1l!1;1a S=[],P=ZC.P.MJ(p),G=P[0],T=P[1];if(1c!==ZC.1d(p.dQ)&&(G=p.dQ),1c!==ZC.1d(p.gC)&&(T=p.gC),1c===ZC.1d(p.dQ)&&1c===ZC.1d(p.gC)){1a k=ZC.A4("#"+i+"-1v").2b();1b=G-k.1K,d=T-k.1v}1u 1b=G,d=T;1a J=ZC.al(t.H.K);1j(1b/=J[0],d/=J[1],u=0,h=t.H.AH.1f;u<h;u++)f=t.H.AH[u].Q,ZC.DQ(1b,f.iX-15,f.iX+f.I+15)&&ZC.DQ(d,f.iY-15,f.iY+f.F+15)&&(A=t.H.AH[u]),ZC.DQ(1b,t.H.AH[u].iX,t.H.AH[u].iX+t.H.AH[u].I)&&ZC.DQ(d,t.H.AH[u].iY,t.H.AH[u].iY+t.H.AH[u].F)&&(C=t.H.AH[u]);1a z=1c,R=!1;if(A){if(KB.5Y=KB.5Y||{},KB.5Y[i]=KB.5Y[i]||{},p.uR||(KB.5Y[i].k3=!1,KB.5Y[i].6L=!0),Z=A,A.CT&&"2N"===A.CT.o.7U){1c!==ZC.1d(A.E["2i-6L-1B"])&&(z=A.E["2i-6L-1B"]);1a Q=/(.+)-cE-1B-(.+)-2r-(.+)/.3p(p.2X.id);if(Q&&Q.1f&&(z=5w(Q[2],10),A.E["2i-6L-1B"]=z),1c===ZC.1d(z))1l}if(!A.fo)1l 8m c();1j(S.1h(A),A&&A.CT&&(R=1c!==ZC.1d(A.CT.o.6e)&&ZC.2t(A.CT.o.6e)),u=0,h=t.H.AH.1f;u<h;u++)if(t.H.AH[u]!==A){f=t.H.AH[u].Q;1a W=t.H.AH[u].CT,V=t.H.AH[u].H8,U=W&&1c!==ZC.1d(W.o.6e)&&ZC.2t(W.o.6e);U&&("xy"===A.AJ.3w&&"xy"===t.H.AH[u].AJ.3w&&(W||V)&&ZC.DQ(1b,f.iX-5,f.iX+f.I+5)&&(ZC.DQ(d,f.iY-5,f.iY+f.F+5)||R&&U)||"yx"===A.AJ.3w&&"yx"===t.H.AH[u].AJ.3w&&(W||V)&&ZC.DQ(d,f.iY-5,f.iY+f.F+5)&&(ZC.DQ(1b,f.iX-5,f.iX+f.I+5)||R&&U))&&S.1h(t.H.AH[u])}}1u if(KB.5Y)1j(1a j in KB.5Y)if(KB.5Y[j]&&KB.5Y[j].6L){1a q=1o.7c(j);H=q.FF(),ZC.AN.C2("wg",q,H),KB.5Y[j].6L=!1}if(0===S.1f&&(l={},r={},o={},t.SG&&(1c===ZC.1d(p.dQ)&&c(),t.SG=!1),Z&&Z.A.A8&&C&&C.K!==Z.K&&Z.A.A8.5e()),S.1f>0){t.SG=!0;1j(1a $=!1,ee=0,te=S.1f;ee<te;ee++){1a ie=!1;if(1c===ZC.1d(l[ee])&&(l[ee]={}),1c===ZC.1d(r[ee])&&(r[ee]={}),1c===ZC.1d(o[ee])&&(o[ee]={}),(S[ee].CT||S[ee].H8)&&"9t"===S[ee].MK){1a ae,ne=[],le=[],re=[],oe=!1,se="",Ce=[],Ae=[],Ze=[],ce=[],pe={},ue={},he=[];f=S[ee].Q;1a 6g=S[ee].CT&&1c!==ZC.1d(S[ee].CT.o.pp)&&ZC.2t(S[ee].CT.o.pp),de=-1;S[ee].CT&&(de=ZC.1k(ZC.7P(S[ee].CT.o.a1||-1))),ZC.3v,ZC.3v;1a fe,ge,Be=!0,ve=[],Ee="";S[ee].CT&&(1c!==ZC.1d(S[ee].CT.o["1B-1H"])&&ZC.1d(1c!==(e=S[ee].CT.o["1B-1H"].aq))&&(Be=ZC.2t(e)),1c!==ZC.1d(S[ee].CT.o["1U-1H"])&&ZC.1d(1c!==(e=S[ee].CT.o["1U-1H"].aq))&&(Be=ZC.2t(e)));1a be={};1j(L=0,w=S[ee].AY.A7.1f;L<w;L++)if(!S[ee].AY.A7[L].M1&&(u=L,S[ee].CT&&S[ee].CT.o["9D-ex"]&&(u=w-L-1),S[ee].E["1B"+u+".2h"])){if(1c!==ZC.1d(z)&&u!==z)d9;if(!(fe=S[ee].BK(S[ee].AY.A7[u].BT("k")[0])))d9;if(fe.D8){1a me=fe.AR?fe.iY+fe.BV:fe.iY+fe.A6,Ke=fe.AR?fe.iY+fe.F-fe.BV:fe.iY+fe.F-fe.A6;d=ZC.5l(d,me,Ke),g=fe.ED&&S[ee].AY.A7[u].ED?fe.MS(d,S[ee].AY.A7[u]):fe.MS(d)}1u{1a De=fe.AR?fe.iX+fe.BV:fe.iX+fe.A6,Fe=fe.AR?fe.iX+fe.I-fe.A6:fe.iX+fe.I-fe.BV;1b=ZC.5l(1b,De,Fe),g=fe.ED&&S[ee].AY.A7[u].ED?fe.MS(1b,S[ee].AY.A7[u]):fe.MS(1b)}if(1c===ZC.1d(g))d9;1a Ie,xe,Xe,ye,Ye,Le,we,Me,He=[];if(He=1w g.1f===ZC.1b[31]||0===g.1f?[g]:g,S[ee].CT){1j(1a Ne=0,Oe=He.1f;Ne<Oe;Ne++)if(g=He[Ne],B=S[ee].AY.A7[u].FR(g)){ae=B,B.2I(),B.N?(ZC.aw=[B.N.C0,B.N.A0,B.N.AC,B.N.BU,B.N.B8],B.NG&&ZC.aw.1h(B.NG.A0,B.NG.AC,B.NG.BU,B.NG.B8)):ZC.aw=[],B.A.IW&&1w B.E.ha!==ZC.1b[31]&&B.1t(!0),F=B.iX,I=B.iY,1w B.E.ha!==ZC.1b[31]&&(F=5w(B.E.ha,10)),1w B.E.n8!==ZC.1b[31]&&(I=5w(B.E.n8,10)),K=F,D=I,pe[u]={2Y:g,y:I},S[ee].BB&&S[ee].BB.Y8&&(S[ee].BB.3k(!0),S[ee].BB.1q(),S[ee].BB.EI-=S[ee].BB.LA,S[ee].BB.iY-=S[ee].BB.LA,S[ee].BB.LA=0,S[ee].BB.1t(g)),(v=1m DP(fe)).Z=v.C6=a,v.K=S[ee].K+"-2i-1H-"+g+"-"+u,v.GM=S[ee].A.K+"-2i-1H "+S[ee].K+"-2i-1H zc-2i-1H",Be&&(Y=B.n1(),v.AP=B.A.K4),Be?v.1C(S[ee].CT.o["1B-1H[aq]"]):v.1C(S[ee].CT.o["1B-1H[bC]"]),v.1C(S[ee].CT.o["1B-1H"]),v.1C(S[ee].CT.o["1U-1H"]),v.1C(S[ee].AY.A7[u].o["2i-1H"]),m=ZC.AN.P2(v.o,S[ee].AY.A7[u].o),v.EW=1n(e){1l B?B.EW(e,m):e},B.X2();1a Se="3i";if(1c!==ZC.1d(e=v.o[ZC.1b[7]])&&(Se=e),v.E[ZC.1b[7]]=Se,v.KZ=Be,v.E.74=B.A.L,v.E.7w=B.L,v.1q(),M=1c!==ZC.1d(v.o.6N)?ZC.1k(v.o.6N):6,v.E3&&v.E3.1f&&(v.IY=1n(e){1l e=B?B.EW(e,m):e.1F(/(%i)|(%2r-2Y)/g,g)},v.DB()&&v.1q()),v.I6&&B&&(v.GK(v,v,1c,B.LI(1c,!1),v.N8),v.1q()),ZC.DQ(B.iX,f.iX-.5,f.iX+f.I+.5)){1R(Be||(0===le.1f&&(1c===ZC.1d(v.o["5Z-1D"])||oe||(oe=!0,Ee+=B.EW(v.o["5Z-1D"],m)+"<br>"),1c!==ZC.1d(v.o["9Z-1D"])&&""===se&&(se=B.EW(v.o["9Z-1D"],m)+"<br>")),v.AL&&""!==v.AP&&(ZC.2t(v.o["bC-1D"])?ve.1h(B.EW(v.AP,m)):ve.1h(B.EW(v.AP,m)+"<br>"))),v.E.w5=le.1f,v.E["2r-1U"]=B.AE,v.E["1Q-x"]=F,v.E["1Q-y"]=I,v.E["2i-1I"]=B.n1(),Se){2q:1c===ZC.1d(v.o.x)?fe.D8?B.iY<=f.iY+f.F/2?(v.iY=I-v.F-M,v.ER="2c"):(v.iY=I+M,v.ER="1v"):B.iX>=f.iX+f.I/2?(v.iX=F-v.I-M,v.ER="2z"):(v.iX=F+M,v.ER="1K"):v.iX-=f.iX,1c===ZC.1d(v.o.y)?fe.D8?(v.iX=F-v.I/2,v.iX<f.iX&&(v.iX=f.iX),v.iX+v.I>f.iX+f.I&&(v.iX=f.iX+f.I-v.I)):(v.iY=I-v.F/2,v.iY<f.iY&&(v.iY=f.iY),v.iY+v.F>f.iY+f.F&&(v.iY=f.iY+f.F-v.F)):v.iY-=f.iY,v.DH=[F,I];1p;1i"1K":v.iX=F-v.I-M,v.iY=I-v.F/2,v.DH=[F,I];1p;1i"2z":v.iX=F+M,v.iY=I-v.F/2,v.DH=[F,I];1p;1i"1v":fe.D8?(v.iX=f.iX+f.I-v.I,v.iY=I-v.F/2,v.ER="1K",v.DH=[f.iX+f.I-v.I-M,I]):(v.iX=F-v.I/2,v.iY=f.iY,v.ER="2c",v.DH=[F,v.iY+v.F+M]);1p;1i"2r-1v":fe.D8?(v.iX=F+2*M,v.iY=I-v.F/2,v.ER="1K",v.DH=[F+M,I]):(v.iX=F-v.I/2,v.iY=I-v.F-2*M,v.ER="2c",v.DH=[F,I-M]);1p;1i"2c":fe.D8?(v.iX=f.iX,v.iY=I-v.F/2,v.ER="2z",v.DH=[f.iX+v.I+M,I]):(v.iX=F-v.I/2,v.iY=f.iY+f.F-v.F,v.ER="1v",v.DH=[F,v.iY-M])}ne.1h({3V:B.A.L,5Q:B.L,h7:B.BY||fe.W[B.L],1U:B.AE,1D:v.AP,x:v.iX,y:v.iY,15D:F,15B:I}),-1===ZC.AT(re,v.AP)&&(s[v]=B,re.1h(v.AP)),fe.D8?v.E.8J=6g||-1!==de?ZC.2l(I-d):-1:v.E.8J=6g||-1!==de?ZC.2l(F-1b):-1,v.AL&&le.1h(v),r[ee][u]=v,ie=!0}}if(!B)d9}if(S[ee].CT&&ZC.DQ(B.iX,f.iX-1,f.iX+f.I+1)){if((b=1m DP(fe)).Z=b.C6=a,b.K=S[ee].K+"-2i-1z-x-1H-"+u,b.GM=S[ee].A.K+"-2i-1H "+S[ee].K+"-2i-1H zc-2i-1H",b.A0=b.AC=fe.B8,b.C0=S[ee].AJ["3d"]?"#4L":"#2T",b.1C(S[ee].CT.o["1z-1H"]),b.1C(S[ee].CT.o[fe.BE+"-1H"]),b.1C(S[ee].AY.A7[u].o["1z-1H"]),b.KZ=!0,b.E.7w=B.L,m=ZC.AN.P2(b.o),b.EW=1n(e){e=fe.EW(e,g,fe.ED&&S[ee].AY.A7[u].ED?S[ee].AY.A7[u]:1c,m,!0);1a t=S[ee].AY.A7[u].KJ;if(B&&t)1j(1a i in t){1a a;a=t[i]3F 3N?ZC.7P(t[i][B.L],""):ZC.7P(t[i],""),e=e.1F("%1T-"+i,a,"g")}1l e},b.1q(),M=1c!==ZC.1d(b.o.6N)?ZC.1k(b.o.6N):6,b.E3&&b.E3.1f&&(b.IY=1n(e){1l e=B?B.EW(e,m):e.1F(/(%i)|(%2r-2Y)/g,g)},b.DB()&&b.1q()),b.I6&&B&&(b.GK(b,b,1c,B.LI(1c,!1),b.N8),b.1q()),ue[fe.BE]=b.AP,Ie=ZC.2t(b.o["6F-2K"]),xe=b.o.x,Xe=b.o.y,"5B"!==fe.B7?fe.D8?(ye="2z",Le=fe.E.iX-b.I-M,Ye=[fe.E.iX,D],we=D-b.F/2):(ye="1v",Le=K-b.I/2,Ye=[K,fe.E.iY],we=fe.E.iY+M):fe.D8?(ye="1K",Le=fe.E.iX+M,Ye=[fe.E.iX,D],we=D-b.F/2):(ye="2c",Le=K-b.I/2,Ye=[K,fe.E.iY],we=fe.E.iY-b.F-M),Ie||(b.ER=ye),xe||(b.iX=Le),Ie||xe||Xe||(b.DH=Ye),Xe||(b.iY=we),b.AL&&fe.AL&&""!==b.AP){1a Pe=!1;if(he.1f)1j(1a Ge=0;Ge<he.1f;Ge++)b.AP+"@"+fe.BE===he[Ge]&&(Pe=!0);Pe||(he.1h(b.AP+"@"+fe.BE),fe.D8?b.E.8J=6g||-1!==de?ZC.2l(D-d):-1:b.E.8J=6g||-1!==de?ZC.2l(K-1b):-1,Ze.1h(b)),ce.1h(fe.BE),o[ee][u]=b,ie=!0}-1!==5P(S[ee].CT.o[ZC.1b[4]]).1L("%")&&(Me=ZC.IL(S[ee].CT.o[ZC.1b[4]]))>0&&Me<=1&&(S[ee].CT.AZ=ZC.1k(Me*fe.A9)),fe.D8?Ce.1h([6g||-1!==de?ZC.2l(D-d):-1,[1c,[fe.E.iX,D],[S[ee].Q.iX+("5B"===fe.B7?0:S[ee].Q.I),D]]]):Ce.1h([6g||-1!==de?ZC.2l(K-1b):-1,[1c,[K,fe.E.iY],[K,S[ee].Q.iY+("5B"===fe.B7?S[ee].Q.F:0)]]])}if(ge=S[ee].BK(S[ee].AY.A7[u].BT("v")[0]),-1===ZC.AT(ce,ge.BE)&&S[ee].H8&&("xy"===S[ee].AJ.3w&&ZC.DQ(d,ge.iY,ge.iY+ge.F)||"yx"===S[ee].AJ.3w&&ZC.DQ(d,ge.iX,ge.iX+ge.I))){1a Te="bC";S[ee].H8.o.1J&&"aq"===S[ee].H8.o.1J&&(Te="aq"),"aq"===Te&&1c!==ZC.1d(pe[u])&&(ge.D8?1b=pe[u].x:d=pe[u].y),(b=1m DP(ge)).Z=b.C6=a,b.K=S[ee].K+"-2i-1z-y-1H-"+u,b.GM=S[ee].A.K+"-2i-1H "+S[ee].K+"-2i-1H zc-2i-1H";1a ke=ge.B8;"aq"===Te&&(ke=S[ee].AY.A7[u].B8),b.A0=b.AC=ke,b.C0=S[ee].AJ["3d"]&&"aq"!==Te?"#4L":"#2T",b.1C(S[ee].H8.o["1z-1H"]),b.1C(S[ee].H8.o[ge.BE+"-1H"]),b.KZ=!0;1a Je=ge.D8?ge.KW(1b,!0):ge.KW(d,!0),ze=Je;m=ge.LT(),ZC.2E(ZC.AN.P2(b.o,ge.o),m),1c===ZC.1d(m[ZC.1b[12]])&&(m[ZC.1b[12]]=0),Je=ge.FQ(0,Je,m),b.o.1D=Je,b.1q(),M=1c!==ZC.1d(b.o.6N)?ZC.1k(b.o.6N):6,b.E3&&b.E3.1f&&(b.IY=1n(e){1l e=e.1F(/(%v)|(%1z-1U)/g,ze).1F(/(%t)|(%1z-1D)/g,Je).1F(/(%m5)/,ge.D8?1b:d)},b.DB()&&b.1q()),b.I6&&B&&(be={1U:ze,1D:Je,m5:ge.D8?1b:d},b.GK(b,b,1c,be,b.N8),b.1q()),ue[ge.BE]=b.AP,Ie=ZC.2t(b.o["6F-2K"]),xe=b.o.x,Xe=b.o.y,"5B"!==ge.B7?ge.D8?(ye="1v",Le=1b-b.I/2,we=ge.E.iY+M,Ye=[1b,ge.E.iY]):(ye="2z",Le=ge.E.iX-b.I-M,we=d-b.F/2,Ye=[ge.E.iX,d]):ge.D8?(ye="2c",Le=1b-b.I/2,we=ge.E.iY-b.F-M,Ye=[1b,ge.E.iY]):(ye="1K",Le=ge.E.iX+M,we=d-b.F/2,Ye=[ge.E.iX,d]),Ie||(b.ER=ye),xe||(b.iX=Le),Ie||xe||Xe||(b.DH=Ye),Xe||(b.iY=we),b.AL&&ge.AL&&(b.E.8J=-1,Ze.1h(b),"aq"===Te&&1c!==ZC.1d(pe[u])||ce.1h(ge.BE),o[ee][u]=b,ie=!0),-1!==5P(S[ee].H8.o[ZC.1b[4]]).1L("%")&&(Me=ZC.IL(S[ee].H8.o[ZC.1b[4]]))>0&&Me<=1&&(S[ee].H8.AZ=ZC.1k(Me*ge.A9)),ge.D8?Ae.1h(1c,[1b,ge.E.iY],[1b,S[ee].Q.iY+("5B"===ge.B7?S[ee].Q.F:0)]):Ae.1h(1c,[ge.E.iX,d],[S[ee].Q.iX+("5B"===ge.B7?0:S[ee].Q.I),d])}}if(!6g&&Ze.1f>1)1j(1a Re=Ze[Ze.1f-1],Qe=ZC.1k((Re.FL+Re.FT+Re.EM+Re.FM)/4),We=Ze.1f-1;We>=0;We--)1j(1a Ve=We;Ve>=0;Ve--)We!==Ve&&ZC.AO.aV(Ze[We],Ze[Ve],-Qe)&&(Ze[Ve].C5=.3,Ze[Ve].VM=.1);1j(E=ZC.3v,u=0,h=le.1f;u<h;u++)le[u].E.8J>=0&&(E=ZC.CV(le[u].E.8J,E));-1!==de&&(E=ZC.BO(E,de));1a Ue=!1,je=1,qe=!1;le[0]&&(qe=ZC.2t(le[0].o["bC-1D"]),le[0].o["6s-si"]&&ZC.2t(le[0].o["4e-4E"])&&(Ue=!0,je=ZC.1k(le[0].o["6s-si"]||"1"),Ee+=\'<6s 1O="zc-2i-1H-6s \'+t.H.K+\'-2i-1H-6s">\')),!Be&&le.1f>0&&("w7"!==le[0].o["3X-by-1U"]&&"16p"!==le[0].o["3X-by-1U"]||le.3X(1n(e,t){1l(e.E["2r-1U"]-t.E["2r-1U"])*("w7"===le[0].o["3X-by-1U"]?1:-1)}));1a $e=0;1j(N=0,O=le.1f;N<O&&(!(-1===le[N].E.8J||le[N].E.8J<=E)||(Ue?($e%je==0&&(Ee+="<tr>"),Ee+="<td>"+ve[N]+"</td>",$e%je==je-1&&(Ee+="</tr>"),$e++):Ee+=ve[le[N].E.w5],Ue||!qe));N++);if(Ue&&($e%je!=je-1&&(Ee+="</tr>"),Ee+="</6s>"),""!==se&&(Ee+=se),!Be&&le.1f>0&&(1b=F=K,d=I=D,""!==Ee&&(le[0].o.1D=Ue||qe?Ee:Ee.2x(0,Ee.1f-4),le[0].1q()),M=1c!==ZC.1d(v.o.6N)?ZC.1k(v.o.6N):6,1c===ZC.1d(v.o.x)?fe.D8?1b<S[ee].iX+S[ee].I/2?le[0].iX=1b+M+14:le[0].iX=1b-le[0].I-M-14:ae&&ae.iX>=f.iX+f.I/2?le[0].iX=F-le[0].I-M:le[0].iX=F+M:le[0].iX-=f.iX,1c===ZC.1d(v.o.y)?fe.D8?ae&&ae.iY>=f.iY+f.F/2?le[0].iY=I-le[0].F-M:le[0].iY=I+M:d<S[ee].iY+S[ee].F/2?le[0].iY=d+M+14:le[0].iY=d-le[0].F-M-14:le[0].iY-=f.iY),ie){1a et=-1,tt=-1;if($||(1c===ZC.1d(p.dQ)&&c(),$=!0),Ce.1f>0){1a it=[];1j(E=ZC.3v,x=0,X=Ce.1f;x<X;x++)Ce[x][0]>=0&&(E=ZC.CV(Ce[x][0],E));1j(-1!==de&&(E=ZC.BO(E,de)),x=0,X=Ce.1f;x<X;x++)1c!==ZC.1d(Ce[x])&&(-1===Ce[x][0]||Ce[x][0]<=E)&&(S[ee].CT&&S[ee].CT.o["bC-1y"]&&ZC.2t(S[ee].CT.o["bC-1y"])?(it=[].4z(Ce[x][1]),"xy"===S[ee].AJ.3w?et=ZC.4w(Ce[x][1][1][0]):"yx"===S[ee].AJ.3w&&(tt=ZC.4w(Ce[x][1][1][1]))):it=it.4z(Ce[x][1]));if(S[ee].CT.o.4K){1a at=-1;it.1f>1&&it[1]&&(at=it[1][0]||-1),S[ee].CT.9R||(S[ee].CT.9R=1m I4(S[ee]),S[ee].CT.9R.1C({"1W-1r":"#2T",2n:.85}),S[ee].CT.9R.1C(S[ee].CT.o.4K),S[ee].CT.9R.Z=a,S[ee].CT.9R.1q()),S[ee].CT.9R.iX=at,S[ee].CT.9R.iY=S[ee].Q.iY,S[ee].CT.9R.I=1A.1X(2,S[ee].Q.iX+S[ee].Q.I-at+2),S[ee].CT.9R.F=S[ee].Q.F,S[ee].CT.9R.1t()}if(S[ee].AJ["3d"])1j(S[ee].NB(),x=0,X=it.1f;x<X;x++)it[x]&&(y=1m CB(S[ee],it[x][0]-ZC.AM.DZ,it[x][1]-ZC.AM.E0,0),it[x][0]=y.E9[0],it[x][1]=y.E9[1]);S[ee].CT.K=S[ee].K+"-9z-x",S[ee].CT.I6&&B&&(S[ee].CT.GK(S[ee].CT,S[ee].CT,1c,B.LI(1c,!1),S[ee].CT.N8),S[ee].CT.1q()),S[ee].CT.AL&&ZC.CN.1t(n,S[ee].CT,it)}if(Ae.1f>0){if(S[ee].AJ["3d"])1j(S[ee].NB(),x=0,X=Ae.1f;x<X;x++)1c!==ZC.1d(Ae[x])&&(y=1m CB(S[ee],Ae[x][0]-ZC.AM.DZ,Ae[x][1]-ZC.AM.E0,0),Ae[x][0]=y.E9[0],Ae[x][1]=y.E9[1]);S[ee].H8.I6&&B&&(S[ee].H8.GK(S[ee].H8,S[ee].H8,1c,be,S[ee].H8.N8),S[ee].H8.1q()),S[ee].H8.AL&&ZC.CN.1t(n,S[ee].H8,Ae)}if(Be){1j(u=le.1f-1;u>=0;u--)ZC.DQ(le[u].DH[0],f.iX-5,f.iX+f.I+5)&&ZC.DQ(le[u].DH[1],f.iY-5,f.iY+f.F+5)||le.6u(u,1);if(le.1f>1)1j(1a nt=!0;nt;)1j(nt=!1,u=0;u<le.1f-1;u++)if(le[u].AL&&(ge.D8&&le[u].iX>le[u+1].iX||!ge.D8&&le[u].iY>le[u+1].iY)){1a lt=le[u];le[u]=le[u+1],le[u+1]=lt,nt=!0}if(le.1f>0){1a rt=[],ot=[];1j(u=0;u<le.1f;u++)1c!==ZC.1d(le[u].o.x)&&1c!==ZC.1d(le[u].o.y)&&ot.1h(le[u]);1j(1a st,Ct,At,Zt=!0,ct=0,pt=le.1f*le.1f;Zt&&ct<pt;)1j(ct++,Zt=!1,u=0;u<le.1f-1;u++)if(le[u].AL&&-1===ZC.AT(ot,le[u]))if(fe.D8){if(le[u+1].iX<le[u].iX+le[u].I){if(le[u+1].iX-le[u].I-4<f.iX&&-1===ZC.AT(rt,le[u])&&(rt.1h(le[u]),le[u].iX=f.iX),le[u+1].iX=le[u].iX+le[u].I+4,le[u+1].iX+le[u+1].I>f.iX+f.I)1j(At=le[u+1].iX-(f.iX+f.I-le[u+1].I),st=0,Ct=le.1f;st<Ct;st++)le[st].iX-At>=f.iX?le[st].iX-=At:(le[st].iX=f.iX,st>0&&(le[u+1].E["1Q-y"]<f.iY+f.F/2?le[st].iY=le[st-1].iY+le[st-1].F+4:le[st].iY=le[st-1].iY-le[st].F-4));Zt=!0}}1u if(le[u+1].iY<le[u].iY+le[u].F){if(le[u+1].iY-le[u].F-4<f.iY&&-1===ZC.AT(rt,le[u])&&(rt.1h(le[u]),le[u].iY=f.iY),le[u+1].iY=le[u].iY+le[u].F+4,le[u+1].iY+le[u+1].F>f.iY+f.F)1j(At=le[u+1].iY-(f.iY+f.F-le[u+1].F),st=0,Ct=le.1f;st<Ct;st++)le[st].iY-At>=f.iY?le[st].iY-=At:(le[st].iY=f.iY,st>0&&(le[u+1].E["1Q-x"]<f.iX+f.I/2?le[st].iX=le[st-1].iX+le[st-1].I+4:le[st].iX=le[st-1].iX-le[st].I-4));Zt=!0}}}1a ut=!1;1j(u=0,h=Ze.1f;u<h;u++)if(-1===Ze[u].E.8J||Ze[u].E.8J<=E){1a ht=Ze[u];S[ee].AJ["3d"]&&(S[ee].NB(),y=1m CB(S[ee],ht.iX+ht.I/2-ZC.AM.DZ,ht.iY+ht.F/2-ZC.AM.E0,0),ht.iX=y.E9[0]-ht.I/2,ht.iY=y.E9[1]-ht.F/2,y=1m CB(S[ee],ht.DH[0]-ZC.AM.DZ,ht.DH[1]-ZC.AM.E0,0),ht.DH[0]=y.E9[0],ht.DH[1]=y.E9[1]),S[ee].CT&&S[ee].CT.o["bC-1y"]&&ZC.2t(S[ee].CT.o["bC-1y"])?("xy"===S[ee].AJ.3w&&et===ZC.4w(ht.iX+ht.I/2)||"yx"===S[ee].AJ.3w&&tt===ZC.4w(ht.iY+ht.F/2))&&!ut&&(ht.1t(),ut=!0):ht.1t()}1j(E=ZC.3v,N=0,O=le.1f;N<O;N++)le[N].E.8J>=0&&(E=ZC.CV(le[N].E.8J,E));1j(-1!==de&&(E=ZC.BO(E,de)),L=0,N=0,O=le.1f;N<O;N++)if(-1===le[N].E.8J||le[N].E.8J<=E){1a qs=ZC.DQ(le[N].DH[0],f.iX-5,f.iX+f.I+5)&&ZC.DQ(le[N].DH[1],f.iY-5,f.iY+f.F+5);if(!Be||qs){if(le[N].AL){1R(le[N].E[ZC.1b[7]]){1i"1v":fe.D8?le[N].DH[0]=le[N].iX-le[N].G4:le[N].DH[1]=le[N].iY+le[N].F+le[N].G4;1p;1i"2c":fe.D8?le[N].DH[0]=le[N].iX+le[N].I+le[N].G4:le[N].DH[1]=le[N].iY-le[N].G4}if(-1!==ZC.AT(["1v","2c"],le[N].E[ZC.1b[7]])){1a dt=le[N].iX+le[N].I/2;le[N].iX=ZC.BO(le[N].iX,0),le[N].iX=ZC.CV(le[N].iX,t.H.I-le[N].I),le[N].iY=ZC.BO(le[N].iY,0),le[N].iY=ZC.CV(le[N].iY,t.H.F-le[N].F),1c===ZC.1d(le[N].o["6F-2b"])&&(le[N].EU=5w(100*(dt-le[N].iX-le[N].I/2)/(le[N].I-le[N].H6),10))}if(S[ee].AJ["3d"]&&(S[ee].NB(),y=1m CB(S[ee],le[N].iX+le[N].I/2-ZC.AM.DZ,le[N].iY+le[N].F/2-ZC.AM.E0,0),le[N].iX=y.E9[0]-le[N].I/2,le[N].iY=y.E9[1]-le[N].F/2,y=1m CB(S[ee],le[N].DH[0]-ZC.AM.DZ,le[N].DH[1]-ZC.AM.E0,0),le[N].DH[0]=y.E9[0],le[N].DH[1]=y.E9[1],"1K"===le[N].ER?le[N].iX=le[N].DH[0]+M:le[N].iX=le[N].DH[0]-le[N].I-M),S[ee].AJ["3d"]||Be||0!==L||(le[N].iX=ZC.BO(f.iX-5,le[N].iX),le[N].iY=ZC.BO(f.iY-5,le[N].iY),le[N].iX=ZC.CV(f.iX+f.I-le[N].I+5,le[N].iX),le[N].iY=ZC.CV(f.iY+f.F-le[N].F+5,le[N].iY)),Be||!Be&&0===L){1a ft=Be?N:0;(!Be||"3c"===t.H.AB&&le[ft].o["1W-4i"]&&""!==le[ft].o["1W-4i"])&&le[ft].1q(),le[ft].1t(),L++}}if(qs){1a gt=1m DS(S[ee]);if(t.H.B9.2y(gt.o,"("+S[ee].AF+").2i.1Q"),gt.K=le[N].K+"-1Q",gt.Z=gt.C6=a,gt.iX=le[N].E["1Q-x"],gt.iY=le[N].E["1Q-y"],S[ee].AJ["3d"]&&(S[ee].NB(),y=1m CB(S[ee],gt.iX-ZC.AM.DZ,gt.iY-ZC.AM.E0,0),gt.iX=y.E9[0],gt.iY=y.E9[1]),Y=le[N].E["2i-1I"],gt.A0=gt.AC=ZC.AN.JL(Y[ZC.1b[0]]),gt.BU=Y.1r,gt.1C(S[ee].CT.o.1Q),gt.1C(S[ee].AY.A7[le[N].E.74].o["2i-1Q"]),"5q"===gt.o.1J){1a Bt=S[ee].AY.A7[le[N].E.74];Bt.A2&&Bt.A2.o.1J&&(gt.o.1J=Bt.A2.o.1J)}gt.1q(),gt.AL&&"2a"!==gt.DN&&gt.AI>1&&gt.1t()}}}(H=S[ee].HW()).2C=ne,H.2i={x:F,y:I},H.ev=p,H["1z-1H"]=ue,ZC.AN.C2("uW",t.H,H),S[ee].PV(!0)}1u(H={}).2i={x:F,y:I},H.ev=p,ZC.AN.C2("uW",t.H,H)}}}}}},t.jt=1n(){0!==1o.3I.rH&&2v.5I(1n(){c()},ZC.1k(1o.3I.rH))},ZC.A4(2g.3s).3t("7W 4I 6l",t.QN),ZC.A4(2g.3s).3t("5T",t.jt)}}KB.gI=1n(e){1a t=1o.7c(e);if(t){1o.hB=1c;1a i=ZC.AK(e+"-2i-c"),a=ZC.A4(i).1s(),n=ZC.A4(i).1M();ZC.A4("."+e+"-2i-1H").3q(),ZC.P.IM(i,t.AB,0,0,a,n),ZC.A4("#"+e+"-j4").9i().5f(1n(){1g.id&&-1!==1g.id.1L("-2i-1H-")&&ZC.P.ET(1g.id)})}},1o.iW("17G",1n(e,t){"3e"==1w(t=t||{})&&(t=3h.1q(t)),KB.5Y[e]=KB.5Y[e]||{},KB.5Y[e].k3=!1,KB.gI(e)}),1o.iW("17F",1n(e,t){"3e"==1w(t=t||{})&&(t=3h.1q(t));1a i,a,n=1o.7c(e),l=n.C7(t[ZC.1b[3]]),r=l.BK(ZC.1b[50]);"xy"===l.AJ.3w?(i=t.x||r.AX(t.h7),a=l.iY+l.F/2):(i=l.iX+l.I/2,a=t.y||r.AX(t.h7));1a o={dQ:i,gC:a,1J:ZC.2L?"4I":ZC.1b[48],2X:{id:e+"-5X"}};KB.5Y=KB.5Y||{},KB.5Y[e]=KB.5Y[e]||{},KB.5Y[e].k3=!0,KB.gI(e),o.uR=!0,n.D4.QN(o)});1O vB 2k ao{2G(e,t){1a i=1g;i.o=1c,i.C=e,i.O4=t}1q(){1a e,t=1g;t.o=t.C.o;1a i,a,n,l,r,o,s,C,A,Z=t.O4,c="\\r\\n",p=",",u=!1,h=1c,1b=1c,d=1c,f=1c,g=1c,B=!1,v=!1,E=1c,b={};if(1c!==ZC.1d(e=t.o["hN-6O"])&&(b=e),1c!==ZC.1d(e=t.o.6O)&&(b=e),1c!==ZC.1d(e=b.8O)&&(p=e),1c!==ZC.1d(e=b.zT)&&(u=ZC.2t(e)),1c!==ZC.1d(e=b.5D)&&(h=ZC.2t(e)),1c!==ZC.1d(e=b["3e-6n"])&&(v=ZC.2t(e)),u?(1c!==ZC.1d(e=b["cf-d2"])&&(d=ZC.2t(e)),1c!==ZC.1d(e=b["9h-d2"])&&(1b=ZC.2t(e))):(1c!==ZC.1d(e=b["cf-d2"])&&(1b=ZC.2t(e)),1c!==ZC.1d(e=b["9h-d2"])&&(d=ZC.2t(e))),1c!==ZC.1d(e=b["fZ-3z"])&&(f=ZC.2t(e)),1c!==ZC.1d(e=b["17D-3z"])&&(g=ZC.2t(e)),1c!==ZC.1d(e=b["17C-5F"])&&(B=ZC.2t(e)),1c!==ZC.1d(e=b.si)&&(E=e),1c!==ZC.1d(E)&&E.1f>0){i=[],1c!==ZC.1d(e=b["5o-8O"])?c=e:Z.2p(/\\n/).1f>0?c="\\n":Z.2p(/\\r/).1f>0&&(c="\\r");1a m=Z.2p(c),K=0;1j(l=0,r=m.1f;l<r;l++)if(""!==m[l].1F(/\\s+/g,"")){i[K]=[];1j(1a D=0,F=0;D<m[l].1f-1;)n=m[l].2x(D,D+E[F]),i[K].1h(n),D+=E[F],F++;K++}}1u{i=[[]],a=1c!==ZC.1d(e=b["5o-8O"])?1m 5n("(\\\\"+p+"|"+e+\'|^)(?:"([^"]*(?:""[^"]*)*)"|([^"\\\\\'+p+e+"]*))","gi"):1m 5n("(\\\\"+p+\'|\\\\r?\\\\n|\\\\r|^)(?:"([^"]*(?:""[^"]*)*)"|([^"\\\\\'+p+"\\\\r\\\\n]*))","gi");1j(1a I=1c;I=a.3p(Z);){1a x=I[1];x.1f&&x!==p&&i.1h([]),n=I[2]?I[2].1F(1m 5n(\'""\',"g"),\'"\'):I[3],i[i.1f-1].1h(n)}}1a X=[];1j(l=0,r=i.1f;l<r;l++)0!==i[l].2M("").1F(/\\s+/g,"").1f&&X.1h(i[l]);1a y=0,Y=0;if((1c===ZC.1d(h)||h)&&(X.1f>1&&1===X[0].1f?(1c===ZC.1d(t.o.5D)?t.o.5D={1D:X[0][0]}:1c===ZC.1d(t.o.5D.1D)&&(t.o.5D.1D=X[0][0]),h=!0):h=!1),h&&y++,u){1j(i=[],h&&i.1h(X[0]),o=y,s=X.1f;o<s;o++)1j(C=0,A=X[o].1f;C<A;C++)1c===ZC.1d(i[C+y])&&(i[C+y]=[]),i[C+y].1h(X[o][C]);X=i}if("1n"==1w 1o.uQ)1j(o=0,s=X.1f;o<s;o++)1j(C=0,A=X[o].1f;C<A;C++)X[o][C]=1o.uQ.4x(1g,X[o][C],o,C,t.C.A.K);1a L=0;1j(l=0,r=X.1f;l<r;l++)L=ZC.BO(L,X[l].1f);1a w=[];if(1c===ZC.1d(1b)){1a M=X[y].2M("").1f;1b=X[y].2M("").1F(/[0-9]/g,"").1f/M>.75}1b&&(w=X[y],y++);1a H=[];if(1c===ZC.1d(d))if(1b&&-1!==w[0].1L("\\\\"))d=!0;1u{1a N="";1j(o=y,s=X.1f;o<s;o++)N+=X[o][0];1a O=N.1f;d=N.1F(/[0-9]/g,"").1f/O>.75}if(d){1j(o=y,s=X.1f;o<s;o++)B?H.1h(ZC.1k(X[o][Y])):H.1h(X[o][Y]);Y++}1a S=[],P=[];1j(C=Y;C<L;C++){P[C-Y]=[];1a G=1c,T=1c,k=0,J=1c;1j(o=y,s=X.1f;o<s;o++)if(1c!==ZC.1d(X[o][C])&&""!==X[o][C]&&1w X[o][C]!==ZC.1b[31]){n=X[o][C],1c!==ZC.1d(J)||v||(J=n.1F(/[0-9\\-\\,\\.\\+\\e]+/g,"%v")),v||(n=n.1F(/[^0-9\\-\\,\\.\\+\\e]+/g,""));1a z=n.1L("."),R=n.1L(",");-1!==z&&-1!==R?z<R?(G=".",T=",",k=ZC.BO(0,n.1f-R)):(G=",",T=".",k=ZC.BO(0,n.1f-z)):-1===z&&-1!==R?n.1f-R-1==3?(G=",",T="."):(G=".",T=",",k=ZC.BO(0,n.1f-R)):-1!==z&&-1===R&&(n.1f-z-1==3?(G=".",T=","):(G=",",T=".",k=ZC.BO(0,n.1f-z))),"."===G&&(n=n.1F(/\\./g,"").1F(/,/g,".")),","===G&&(n=n.1F(/,/g,"")),P[C-Y].1h(v?n:ZC.1Y(n))}1u P[C-Y].1h(1c);S[C-Y]={},1c!==ZC.1d(J)&&(S[C-Y].5F=J),1c!==ZC.1d(G)&&(S[C-Y][ZC.1b[13]]=G),1c!==ZC.1d(G)&&(S[C-Y][ZC.1b[14]]=T),0!==k&&(S[C-Y][ZC.1b[12]]=k)}if(B)1j(l=0,r=P.1f;l<r;l++)1j(1a Q=0;Q<P[l].1f;Q++)P[l][Q]=[H[Q],P[l][Q]];1a W=[];1R(t.C.AF){1i"1y":1i"1N":1i"5x":1i"6b":1i"9c":1i"8a":1i"6T":1i"7o":1i"9f":1c===ZC.1d(t.o[ZC.1b[50]])&&(t.o[ZC.1b[50]]={});1a V=[];d&&1c!==ZC.1d(w[0])&&(V=w[0].2p(/\\\\/)),1c!==ZC.1d(V[0])&&(1c===ZC.1d(t.o[ZC.1b[50]].1H)&&(t.o[ZC.1b[50]].1H={}),1c===ZC.1d(t.o[ZC.1b[50]].1H.1D)&&(t.o[ZC.1b[50]].1H.1D=V[0])),d&&(1c===ZC.1d(t.o[ZC.1b[50]][ZC.1b[5]])?t.o[ZC.1b[50]][ZC.1b[5]]=H:1c===ZC.1d(t.o[ZC.1b[50]][ZC.1b[10]])&&(t.o[ZC.1b[50]][ZC.1b[10]]=H));1a U=[];if(1c!==ZC.1d(g)&&g)1j(l=0,r=P.1f;l<r;l++)U[l]=ZC.1b[51]+(0===l?"":"-"+(l+1));1u if(1c!==ZC.1d(f)&&f){1a j={},q=0,$=[];1j(l=0,r=P.1f;l<r;l++){1j(1a ee=0,te=0,ie=P[l].1f;te<ie;te++)ee+=P[l][te];ee/=P[l].1f;1a ae=1A.4b(ZC.HE(ee)/1A.bj/2);1c===ZC.1d(j[ae])&&(j[ae]=ZC.1b[51]+(0===q?"":"-"+(q+1))),-1===ZC.AT($,S[l].5F)?(U[l]=ZC.1b[51]+(0===q?"":"-"+(q+1)),q++):(U[l]=j[ae],q++),$.1h(S[l].5F)}}1j(0===U.1f&&(U[0]=ZC.1b[51]),1c===ZC.1d(t.o[ZC.1b[11]])&&(t.o[ZC.1b[11]]=[]),l=0,r=P.1f;l<r;l++)1c===ZC.1d(t.o[ZC.1b[11]][l])&&(t.o[ZC.1b[11]][l]={}),t.o[ZC.1b[11]][l][ZC.1b[5]]=P[l],1b&&(1c===ZC.1d(t.o[ZC.1b[11]][l].1D)&&(t.o[ZC.1b[11]][l].1D=w[l+Y],W.1h(w[l+Y])),1c===ZC.1d(t.o[ZC.1b[11]][l]["1V-1D"])&&(t.o[ZC.1b[11]][l]["1V-1D"]=w[l+Y],W.1h(w[l+Y])),1c===ZC.1d(t.o[ZC.1b[11]][l]["2H-1D"])&&1c!==ZC.1d(S[l].5F)&&(t.o[ZC.1b[11]][l]["2H-1D"]=S[l].5F)),1c!==ZC.1d(U[l])&&(1c===ZC.1d(t.o[U[l]])&&(t.o[U[l]]={}),1c!==ZC.1d(V[1])&&(1c===ZC.1d(t.o[U[l]].1H)&&(t.o[U[l]].1H={}),1c===ZC.1d(t.o[U[l]].1H.1D)&&(t.o[U[l]].1H.1D=V[1])),1c===ZC.1d(t.o[ZC.1b[11]][l].3z)&&(t.o[ZC.1b[11]][l].3z="1z-x,"+U[l]),1c===ZC.1d(t.o[U[l]][ZC.1b[12]])&&1c!==ZC.1d(S[l][ZC.1b[12]])&&(t.o[U[l]][ZC.1b[12]]=S[l][ZC.1b[12]]),1c===ZC.1d(t.o[U[l]][ZC.1b[13]])&&1c!==ZC.1d(S[l][ZC.1b[13]])&&(t.o[U[l]][ZC.1b[13]]=S[l][ZC.1b[13]]),1c===ZC.1d(t.o[U[l]][ZC.1b[14]])&&1c!==ZC.1d(S[l][ZC.1b[14]])&&(t.o[U[l]][ZC.1b[14]]=S[l][ZC.1b[14]]),1c===ZC.1d(t.o[U[l]].5F)&&1c!==ZC.1d(S[l].5F)&&(t.o[U[l]].5F=S[l].5F));1p;1i"3P":1i"7e":1i"8E":1i"8Y":if(1c===ZC.1d(t.o.1z)&&(t.o.1z={}),d&&1c!==ZC.1d(w[0])){1a ne=w[0].2p(/\\\\/);1c===ZC.1d(t.o.1z.1H)&&(t.o.1z.1H={}),1c===ZC.1d(t.o.1z.1H.1D)&&(t.o.1z.1H.1D=ne[0])}1j(d&&(1c===ZC.1d(t.o.1z[ZC.1b[5]])?t.o.1z[ZC.1b[5]]=H:1c===ZC.1d(t.o.1z[ZC.1b[10]])&&(t.o.1z[ZC.1b[10]]=H)),1c===ZC.1d(t.o[ZC.1b[11]])&&(t.o[ZC.1b[11]]=[]),l=0,r=P.1f;l<r;l++)1c===ZC.1d(t.o[ZC.1b[11]][l])&&(t.o[ZC.1b[11]][l]={}),t.o[ZC.1b[11]][l][ZC.1b[5]]=P[l],1b&&(1c===ZC.1d(t.o[ZC.1b[11]][l].1D)&&(t.o[ZC.1b[11]][l].1D=w[l+Y],W.1h(w[l+Y])),1c===ZC.1d(t.o[ZC.1b[11]][l]["1V-1D"])&&(t.o[ZC.1b[11]][l]["1V-1D"]=w[l+Y],W.1h(w[l+Y])),1c===ZC.1d(t.o[ZC.1b[11]][l]["2H-1D"])&&1c!==ZC.1d(S[l].5F)&&(t.o[ZC.1b[11]][l]["2H-1D"]=S[l].5F)),1c===ZC.1d(t.o[ZC.1b[52]])&&(t.o[ZC.1b[52]]={}),1c===ZC.1d(t.o[ZC.1b[52]][ZC.1b[12]])&&1c!==ZC.1d(S[l][ZC.1b[12]])&&(t.o[ZC.1b[52]][ZC.1b[12]]=S[l][ZC.1b[12]]),1c===ZC.1d(t.o[ZC.1b[52]][ZC.1b[13]])&&1c!==ZC.1d(S[l][ZC.1b[13]])&&(t.o[ZC.1b[52]][ZC.1b[13]]=S[l][ZC.1b[13]]),1c===ZC.1d(t.o[ZC.1b[52]][ZC.1b[14]])&&1c!==ZC.1d(S[l][ZC.1b[14]])&&(t.o[ZC.1b[52]][ZC.1b[14]]=S[l][ZC.1b[14]]),1c===ZC.1d(t.o[ZC.1b[52]].5F)&&1c!==ZC.1d(S[l].5F)&&(t.o[ZC.1b[52]].5F=S[l].5F)}1l""!==W.2M("")&&1c===ZC.1d(t.o.1V)&&(t.o.1V={}),t.o=3h.1q(3h.5b(t.o).1F(/\\\\\\\\/g,"\\\\")),t.o}}1O K1 2k I4{2G(e){1E(e);1a t=1g;t.OL="vc",t.H=e,t.AF="",t.J3=1c,t.KQ=1c,t.N0=1c,t.SD=1c,t.Q=1c,t.BI=1c,t.IG=1c,t.ID=1c,t.xp=1,t.W0=1,t.xl=1,t.L=0,t.HT=1c,t.MH=[1,0],t.oD=1c,t.C9=!1,t.KT="5h",t.BL=[],t.BW=[],t.YU=[],t.FH=[],t.LQ=[],t.AY=1m LS(t),t.HB=1c,t.BB=1c,t.A8=1c,t.CT=1c,t.H8=1c,t.lF="17B",t.xR=!0,t.MK="",t.RY=1c,t.LV=!1,t.UT=!1,t.NE=0,t.ZB=!1,t.QE=!1,t.EX={7G:1,2f:45,5v:40,"x-2f":0,"y-2f":0,"z-2f":0,3H:1},t.AJ={"4V-2i":!1,"4V-2A":!1,"4V-1Z":!1,"4V-cK":!0,"3d":!1,3u:!1,3w:"","4V-8P":!0,"2f-2j":15,"2f-1X":75,"x-2f-2j":-65,"x-2f-1X":65,"y-2f-2j":-65,"y-2f-1X":65,"z-2f-2j":-65,"z-2f-1X":65},t.OI=!1,t.iw=!1,t.Gq=[],t.fo=!0,1w PO!==ZC.1b[31]&&(t.M7=1m PO(t)),t.GB=!1,t.CW={},t.K6=[],t.KX=!1,t.HK=!1,t.LE=0,t.BN=[],t.pE=!0,t.V4=1o.3I.p6,-1===t.V4&&(t.V4=0)}8c(){1a e=1E.8c();1l 1g.e2(e,"2Y","L"),e}8f(){1a e,t=1g,i="5e";1l t.BB&&""!==t.E["1V-8e-7U"]&&1w t.E["1V-8e-7U"]!==ZC.1b[31]?i="1P"===t.E["1V-8e-7U"]?t.BB.RA:t.BB.Q1:(t.o.1V&&(e=t.o.1V[ZC.1b[54]])&&(i=e),t.o.1V&&t.o.1V.1P&&(e=t.o.1V.1P[ZC.1b[54]])&&(i=e)),(t.A.KE||t.E["9L-8h-3q"])&&(i="3q"),i}BT(e,t){1w t===ZC.1b[31]&&(t=!1);1j(1a i=[],a=1g,n=0,l=a.BL.1f;n<l;n++)a.BL[n].AF===e&&(!t||t&&a.BL[n].W.1f>0)&&i.1h(a.BL[n]);1l i}BK(e){1j(1a t=1g,i=0,a=t.BL.1f;i<a;i++)if(t.BL[i].BE===e)1l t.BL[i];1l 1c}NM(e){1l e}vw(e){1l 1m ZC.vB(1g,e)}O1(){1j(1a e=1g,t=0,i=e.BL.1f;t<i;t++){1a a=e.BL[t],n=a.BE;e.A.B9.2y(a.o,["("+e.AF+").4y","("+e.AF+")."+n.1F(/\\-[0-9]+/,""),"("+e.AF+")."+n.1F(/\\-[0-9]+/,"-n"),"("+e.AF+")."+n],!1,!0);1a l=n.1F(/\\-[0-9]+/,"")+"-n";e.o[l]&&a.1C(e.o[l]),e.o[n]&&a.1C(e.o[n]),e.AJ["3d"]&&e.A.B9.2y(a.o,["("+e.AF+").4y[3d]","("+e.AF+")."+n.1F(/\\-[0-9]+/,"")+"[3d]","("+e.AF+")."+n.1F(/\\-[0-9]+/,"-n")+"[3d]","("+e.AF+")."+n+"[3d]"],!1,!0),e.AJ["3d"]&&a.1C(e.o[n+"[3d]"]),a.1q()}}UM(){1l 1c}r9(e){1a t,i,a,n=1g,l=0,r=n.AY.A7.1f;1j(t=0;t<r;t++)l=ZC.BO(l,n.AY.A7[t].S.1f);1n o(e){1l e=(e=(e=e.1F(/(%N|%2r-fz)/g,l)).1F(/(%P|%1B-fz)/g,r)).1F(/(%S|%1z-6n-fz)/g,a.W.1f)}1j(t=0,i=n.BL.1f;t<i;t++)(a=n.BL[t]).H9(e),2===e&&(a.IY=o,a.DB()&&a.1q()),1c===ZC.1d(a.o["1X-2C"])&&1c===ZC.1d(a.o["1X-d2"])&&a.T6(),1c===ZC.1d(a.o["1X-9O"])&&a.ZS()}OF(){}NB(){}p7(){}sH(){}j1(){1a e=1g,t=e.A.B9,i="("+e.AF+")";e.Q=1m I4(e),e.Q.OG="2u",e.Q.K=e.K+"-2u";1a a=[i+".2u"];if(e.BI&&a.1h(i+".2u[2A]"),e.AJ["3d"]&&a.1h(i+".2u[3d]"),t.2y(e.Q.o,a),e.Q.1C(e.o.b1),e.Q.1C(e.o.2u),e.BI&&e.Q.1C(e.o["2u[2A]"]),e.AJ["3d"]&&e.Q.1C(e.o["2u[3d]"]),"4N"===e.Q.o[ZC.1b[57]]||"4N"===e.Q.o[ZC.1b[58]]||"4N"===e.Q.o[ZC.1b[59]]||"4N"===e.Q.o[ZC.1b[60]]){1a n=5P(e.Q.o.2w||"").2p(/\\s+|;|,/),l=n.1f>0?n[0]:"",r=n.1f>1?n[1]:"",o=n.1f>0?n[2]||n[0]:"",s=n.1f>1?n[3]||n[1]:"";"4N"===e.Q.o[ZC.1b[57]]&&(l="4N"),"4N"===e.Q.o[ZC.1b[58]]&&(r="4N"),"4N"===e.Q.o[ZC.1b[59]]&&(o="4N"),"4N"===e.Q.o[ZC.1b[60]]&&(s="4N"),e.Q.o.2w=[l,r,o,s].2M(" ")}if(e.E["2u-fm"]?e.Q.o.2w=e.E["2u-2w"]:(e.E["2u-fm"]=!0,e.E["2u-2w"]=e.Q.o.2w,e.E["2u-2w-1v"]=e.Q.o[ZC.1b[57]],e.E["2u-2w-2z"]=e.Q.o[ZC.1b[58]],e.E["2u-2w-2c"]=e.Q.o[ZC.1b[59]],e.E["2u-2w-1K"]=e.Q.o[ZC.1b[60]]),1w e.E["2u-p-x"]!==ZC.1b[31]&&(e.Q.E["p-x"]=e.E["2u-p-x"],e.Q.E["p-y"]=e.E["2u-p-y"],e.Q.E["p-1s"]=e.E["2u-p-1s"],e.Q.E["p-1M"]=e.E["2u-p-1M"]),1c!==ZC.1d(e.Q.o["94-3w"])&&ZC.2t(e.Q.o["94-3w"])&&(e.Q.o.2w="4N"),e.Q.1q(),e.AJ["3d"]&&!e.EX.7G){1a C=ZC.2l(ZC.1k(e.EX.5v*ZC.EL(e.EX.2f)));e.Q.iY+=C,e.Q.F-=C,e.Q.I-=ZC.1k(e.EX.5v*ZC.EF(e.EX.2f))}if(1w e.E["2u-p-x"]!==ZC.1b[31])1j(1a A=0,Z=e.BL.1f;A<Z;A++)e.BL[A].WU(),e.BL[A].GV()}tP(){1a e,t,i,a=1g,n=["1v","2z","2c","1K"],l={};1j(t=0;t<n.1f;t++)l[n[t]]=!1,a.E["2u.d-2w-"+n[t]]&&(a.o.2u["2w-"+n[t]]=1c),a.o.2u&&"4N"===a.o.2u["2w-"+n[t]]&&(l[n[t]]=!0,a.o.2u["2w-"+n[t]]="20");1a r=!1,o={};if("xy"===a.AJ.3w&&(r=!0),("xy"===a.AJ.3w||"yx"===a.AJ.3w)&&(a.Q.E["d-2w"]||a.E["2u.d-2w"])){1j(1a s=0,C=a.BL.1f;s<C;s++){1a A=0,Z=0,c="",p=a.BL[s];if(p.AL&&p.TM){"k"===p.AF?c=p.D8?"2q"===p.B7?"1K":"2z":"2q"===p.B7?"2c":"1v":"v"===p.AF&&(c=p.D8?"2q"===p.B7?"2c":"1v":"2q"===p.B7?"1K":"2z");1a u=0;if(a.Q.E["d-2w-"+c]||a.E["2u.d-2w-"+c]){1a h=1m DP(p);h.1S(p.BR);1a 1b=ZC.BO(1,ZC.1k((p.A1-p.X)/p.EE));1j(t=p.X;t<=p.A1;t+=1b)if(h.AP=p.FQ(t),h.i6&&("k"===p.AF&&!p.D8||"v"===p.AF&&p.D8)&&(h.o[ZC.1b[19]]=ZC.1k(.9*p.A9)),h.1q(),h.AL)if(Z=ZC.BO(Z,h.AA%180==0?h.F:h.I),A=ZC.BO(A,h.AA%180==0?h.I:h.F),u=ZC.BO(u,1.5*h.DF*(h.AP||"").2p(/<br>|<br\\/>|<br \\/>|\\n/).1f),"1v"===c||"2c"===c){if(u=ZC.BO(u,.s4*h.DF+1.jg*ZC.2l(ZC.EL(h.AA))*ZC.BO(h.I,h.F)),A=h.I,Z=u,r&&"k"===p.AF){o[p.BE]||(o[p.BE]=[]);1a d=1c===ZC.1d(h.o["3i-3y"])||ZC.2t(h.o["3i-3y"]),f=.s4*h.DF+1.jg*ZC.2l(ZC.EF(h.AA))*ZC.BO(h.I,h.F);"2q"===p.B7?(d&&(ZC.DQ(ZC.gQ(h.AA),90,180)||ZC.DQ(ZC.gQ(h.AA),3U,2m))&&o[p.BE].1h(f),d||o[p.BE].1h(f/2)):(d&&(ZC.DQ(ZC.gQ(h.AA),0,90)||ZC.DQ(ZC.gQ(h.AA),180,3U))&&o[p.BE].1h(f),d||o[p.BE].1h(f/2))}}1u A=u=ZC.BO(u,.s4*h.DF+1.jg*ZC.2l(ZC.EF(h.AA))*ZC.BO(h.I,h.F)),Z=h.F;1a g=1m DP(p);g.1S(p.M),g.AP=p.M.AP,g.1q(),""!==g.AP&&g.AL&&(Z+=g.AA%180==0?g.F:g.I,A+=g.AA%180==0?g.I:g.F)}if(a.o.2u||(a.o.2u={}),("4N"===a.o.2u["2w-"+c]||a.Q.E["d-2w-"+c])&&(a.Q.E["d-2w-"+c]=!1,l[c]=!0,a.o.2u["2w-"+c]="0"),l[c]){a.o.2u["2w-"+c]=ZC.1Y(a.o.2u["2w-"+c]||"0"),a.E[p.BE+"-6N"]=a.o.2u["2w-"+c];1a B=("1v"===c||"2c"===c?ZC.1k(Z):ZC.1k(A))+10+(a.AJ["3d"]?20:0);if(p.VW?a.o.2u["2w-"+c]=ZC.BO(a.o.2u["2w-"+c],B):a.o.2u["2w-"+c]+=B,1c!==ZC.1d(a.o.2u["2w-"+c+"-2b"])&&(a.o.2u["2w-"+c]+=ZC.1k(a.o.2u["2w-"+c+"-2b"])),!a.A.UA){1a v={},E=a.A.DD.ed;a.A.B9.2y(v,"6J.5k.ed"),E&&ZC.2E(E,v),1===a.A.o[ZC.1b[16]].1f&&a.A.o[ZC.1b[16]][0].5k&&(e=a.A.o[ZC.1b[16]][0].5k.ed)&&ZC.2E(e,v);1a b=v.2K||"br";-1===ZC.AT(["tl","tr","br","bl"],b)&&(b="br"),("2c"!==c||"bl"!==b&&"br"!==b)&&("1v"!==c||"tl"!==b&&"tr"!==b)||(a.o.2u["2w-"+c]+=15)}"2c"===c&&("xy"===a.AJ.3w&&a.IG||"yx"===a.AJ.3w&&a.ID)&&(a.o.2u["2w-"+c]+=15),"1K"===c&&("xy"===a.AJ.3w&&a.ID||"yx"===a.AJ.3w&&a.IG)&&(a.o.2u["2w-"+c]+=15),a.E["2u.d-2w-"+c]=!0}}}if(r&&l.1K&&1c!==ZC.1d(a.o.2u[ZC.1b[60]]))1j(1a m in o){1a K=a.BK(m);1j(t=0;t<o[m].1f;t++){ZC.1k(a.o.2u[ZC.1b[60]])+t*K.A9+(K.DJ?K.A9/2:0)-o[m][t]<0&&(a.o.2u[ZC.1b[60]]=o[m][t]-t*K.A9-(K.DJ?K.A9/2:0))}}ZC.P.IM(ZC.AK(a.K+"-2u-c"),a.H.AB,a.Q.iX,a.Q.iY,a.Q.I,a.Q.F,a.K),a.E["2u.1t"]=!0,a.j1();1a D=2,F=6;1c!==ZC.1d(e=a.Q.o["4K-a1"])&&(e 3F 3N?(D=F=ZC.1k(e[0]),e.1f>1&&(F=ZC.1k(e[1]))):D=F=ZC.1k(e)),"2F"===a.H.AB?((e=ZC.AK(a.K+"-3u-2S"))&&e.4m("2W",a.LR(D,"2F")),(e=ZC.AK(a.K+"-3u-2N-2S"))&&e.4m("2W",a.LR(F,"2F"))):(ZC.A4("#"+a.K+" 3E").5f(1n(){""!==1g.1I.3u&&(1g.1I.3u=a.LR(D))}),(e=ZC.AK(a.K+"-2N"))&&""!==e.1I.3u&&(e.1I.3u=a.LR(F)))}1j(t=0,i=a.BL.1f;t<i;t++)a.BL[t].WU(),a.BL[t].GV()}1q(){1a e,t,i,a,n,l,r,o,s,C=1g,A=C.A.B9,Z="("+C.AF+")";(e=C.A.E["3a-3Y-"+C.L])&&(C.E=3h.1q(e),1c===ZC.1d(C.E["2i-on"])||ZC.2t(C.E["2i-on"])||(C.fo=!1)),C.E.oc||(C.A.E["3a-"+C.K+"-1V-6x"]=1c),C.E.oc=1c,C.MK="1q.7z",1E.1q(),C.p7(),-1!==3h.5b(C.o).1L("1o.4Y")&&(C.o.2u=C.o.2u||{},C.o.2u.2w=0);1a c=1c;if(!1o.4F.8o&&((e=C.o["hN-6O"])&&(C.RY=e["hN-3R"]),(e=C.o.6O)&&("4d"==1w e?e.3R?C.RY=e.3R:e["1T-3e"]&&(c=e["1T-3e"]):C.RY=e),""!==C.RY&&1c!==ZC.1d(C.A.jx[C.RY])&&(c=C.A.jx[C.RY]),C.H.O4&&(c=C.H.O4),c)){1a p=C.vw(c);C.o=p.1q()}if(C.LV=1o.vu,C.4A([["cR","UT","b"],["cN","NE","f"],["ac","LV","b"],["po","C9","b"],["7H-1J","KT"],["Ek-1J","lF"],["3R-1T","oD"],["3g","LE","i"],["6P","BN"],["3X-2J","pE","b"]]),C.BN.1f>0)1j(A.B9.6P=[],a=0;a<C.BN.1f;a++){1a u=C.BN[a],h=ZC.AN.JL(C.BN[a],10),1b=ZC.AN.QR(C.BN[a],10);A.B9.6P.1h(["#2T",u,h,1b])}"7e"===C.AF&&(C.EX.7G=!0),(C.AJ["3d"]||C.A.dC)&&(C.LV=!1),C.sH(),-1===ZC.AT(C.H.KY,ZC.1b[41])&&((1c!==ZC.1d(e=C.o.2A)||A.PU("2A",C.AF))&&C.AJ[ZC.1b[56]]&&(C.BI&&!C.E["e9-2A-1q"]||1w rn===ZC.1b[31]||(C.E["e9-2A-1q"]=!1,C.BI=1m rn(C),C.BI.OG="2A",A.2y(C.BI.o,Z+".2A"),(t=C.o.2u)&&C.BI.1C({"1W-1r":t[ZC.1b[0]],"1W-1r-1":t["1W-1r-1"],"1W-1r-2":t["1W-1r-2"],"5c-qw":t["5c-qw"],"5c-gK":t["5c-gK"]}),C.BI.1C(e),C.BI.1q())),(1c!==ZC.1d(e=C.o["1Z-x"])||A.PU("1Z-x",C.AF))&&C.AJ["4V-1Z"]&&(C.IG||1w gN===ZC.1b[31]||(C.IG=1m gN(C,"x"),C.IG.OG="17y",A.2y(C.IG.o,Z+".1Z-x"),C.IG.1C(e),C.IG.1q())),(1c!==ZC.1d(e=C.o["1Z-y"])||A.PU("1Z-y",C.AF))&&C.AJ["4V-1Z"]&&(C.ID||1w gN===ZC.1b[31]||(C.ID=1m gN(C,"y"),C.ID.OG="17x",A.2y(C.ID.o,Z+".1Z-y"),C.ID.1C(e),C.ID.1q()))),C.j1(),C.NB(),C.BL=[],C.O1(),C.r9(1),1c!==ZC.1d(e=C.o[ZC.1b[11]])&&(C.AY.o=e);1a d=C.AY.o;1j(a=0;a<d.1f;a++)if(d[a].aQ)1j(s=0;s<d.1f;s++)d[s].id&&d[s].id===d[a].aQ&&(C.AY.o[a][ZC.1b[5]]=[].4z(C.AY.o[s][ZC.1b[5]]));if(C.AY.1q(),C.r9(2),(1c!==ZC.1d(e=C.o.5D)||A.PU("5D",C.AF))&&(C.J3=1m DP(C),C.J3.OG="5D",A.2y(C.J3.o,Z+".5D"),C.J3.1C(e),C.J3.K=C.K+"-5D",C.J3.KE=!0,C.J3.1q(),1c===ZC.1d(C.J3.o.x))){1a f=C.iX,g=C.I;1R("2u"===C.J3.o["3G-gf"]&&(f=C.Q.iX,g=C.Q.I),C.J3.OM){1i"1K":C.J3.iX=f;1p;1i"3G":C.J3.iX=f+g/2-C.J3.I/2;1p;1i"2z":C.J3.iX=f+g-C.J3.I}}(1c!==ZC.1d(e=C.o.7T)||A.PU("7T",C.AF))&&(C.KQ=1m DP(C),C.KQ.OG="7T",A.2y(C.KQ.o,Z+".7T"),C.KQ.1C(e),C.KQ.K=C.K+"-7T",C.KQ.1q()),1c!==ZC.1d(e=C.o.7k)&&(C.N0=1m DP(C),C.N0.OG="7k",A.2y(C.N0.o,Z+".7k"),C.N0.1C(e),C.N0.K=C.K+"-7k",C.N0.1q()),1w rh!==ZC.1b[31]&&(1c!==ZC.1d(e=C.o.1V)||A.PU("1V",C.AF))&&(C.BB=1m rh(C),C.BB.K=C.K+"-1V",1w e.2n!==ZC.1b[31]&&e.2n<.1&&1w e[ZC.1b[62]]===ZC.1b[31]&&1w e["1G-2n"]===ZC.1b[31]&&(e["1G-2n"]=e.2n),A.2y(C.BB.o,Z+".1V"),C.BB.jX(e),(1c!==ZC.1d(e)&&1c!==ZC.1d(e.2K)||1c!==ZC.1d(C.BB.o.2K))&&A.2y(C.BB.o,Z+".1V[2K]"),C.BB.1C(e),ZC.2t(C.BB.o.6e)&&(C.BB.E["p-x"]=C.A.iX,C.BB.E["p-y"]=C.A.iY,C.BB.E["p-1s"]=C.A.I,C.BB.E["p-1M"]=C.A.F),C.BB.jX(e),C.BB.1q());1a B=!1,v=C.iX,E=C.iY,b=C.I,m=C.F,K="";if(C.J3&&C.J3.AL&&C.J3.o["94-3w"]&&(B=!0,(i=C.J3.iY+C.J3.F/2)<E+m/2&&(K="1v",m=E+m-C.J3.F-C.J3.iY,E=C.J3.iY+C.J3.F,C.KQ&&C.KQ.o["94-3w"]))){1a D=C.KQ.iY+C.KQ.F/2;D<E+m/2&&D>i&&(m-=C.KQ.F,E+=C.KQ.F)}if(C.N0&&C.N0.AL&&C.N0.o["94-3w"]&&(B=!0,(i=C.N0.iY+C.N0.F/2)>E+m/2&&(m-=C.N0.F)),C.BI&&C.BI.AL&&C.BI.o["94-3w"]&&(B=!0,(i=C.BI.B5.iY+C.BI.B5.F/2)>E+m/2?m-=C.BI.B5.F+C.BI.B5.DM:(E=C.BI.B5.iY+C.BI.B5.F,m-=C.BI.B5.F)),C.BB&&C.BB.AL&&C.BB.o["94-3w"]){B=!0;1a F=C.BB.D1&&C.BB.D1.3Z?15:5;if("1v"===K&&C.BB.iY<C.J3.iY+C.J3.F+5){if(1c!==ZC.1d(C.BB.o.2K)){1a I=(""+C.BB.o.2K).2p(" ");C.BB.o.2K=I[0]+" "+(C.J3.iY-C.iY+C.J3.F+C.BB.LA+F)}1u C.BB.o[ZC.1b[57]]=C.J3.iY-C.iY+C.J3.F+C.BB.LA;C.BB.1q()}C.BB.j8(),i=C.BB.iY+C.BB.F/2;1a x="",X=(ZC.3v,C.BB.E["2K-6x"]),y={hO:C.BB.iY-C.iY,gS:C.iY+C.F-C.BB.iY-C.BB.F,gP:C.BB.iX-C.iX,gR:C.iX+C.I-C.BB.iX-C.BB.I},Y="";if(C.BB.I/C.BB.F>2)Y="v";1u if(C.BB.F/C.BB.I>2)Y="h";1u{Y=1A.1X(y.gR*C.F,y.gP*C.F)/1A.1X(y.gS*C.I,y.hO*C.I)>1?"h":"v"}if(X)X[0]>=.8?x=X[1]<=.2?"v"===Y?"1v":"2z":X[1]>=.8&&"v"===Y?"2c":"2z":X[0]<=.2?x=X[1]<=.2?"v"===Y?"1v":"1K":X[1]>=.8&&"v"===Y?"2c":"1K":X[1]<=.2?x="1v":X[1]>=.8&&(x="2c");1u 1A.2j(y.gS,y.hO)/1A.1X(y.gS,y.hO)<1A.2j(y.gR,y.gP)/1A.1X(y.gR,y.gP)?y.gS>y.hO?(x="1v",C.BB.E2):(x="2c",C.BB.DM):y.gR>y.gP?(x="1K",C.BB.DY):(x="2z",C.BB.E1);1a L=0;"1v"===x&&(m=E+m-C.BB.F-C.BB.iY,E=C.BB.iY+C.BB.F),"2c"===x&&(m-=L=m-C.BB.iY+E+C.BB.FL+C.BB.FT),"1K"===x&&(v+=L=C.BB.iX-C.iX+C.BB.I,b-=L),"2z"===x&&(b-=L=b-(C.BB.iX-C.iX)+C.BB.EM+C.BB.FM)}1u C.BB&&C.BB.j8();B&&(C.E["2u-p-x"]=v,C.E["2u-p-y"]=E,C.E["2u-p-1s"]=b,C.E["2u-p-1M"]=m,C.j1()),C.tP(),C.AY.kC&&C.AY.kC(!0),C.BI&&C.BI.o["94-3w"]&&(1c===ZC.1d(C.BI.JW.x)&&(C.BI.B5.iX=C.Q.iX),1c===ZC.1d(C.BI.JW[ZC.1b[19]])&&(C.BI.B5.I=C.Q.I));1a w=0;1j(a=0;a<C.AY.A7.1f;a++)w+=C.AY.A7[a].S.1f;1c!==ZC.1d(e=C.o["no-1T"])&&0===w?(C.SD=1m DP(C),C.SD.OG="gB",A.2y(C.SD.o,Z+".17u"),C.SD.1C({x:C.Q.iX,y:C.Q.iY,1s:C.Q.I,1M:C.Q.F}),C.SD.1C(e),C.SD.K=C.K+"-gB",C.SD.1q()):C.SD=1c,C.E["2u-fm"]&&(C.E["2u-fm"]=1c,C.o.2u=C.o.2u||{},C.o.2u.2w=C.E["2u-2w"],C.o.2u[ZC.1b[57]]=C.E["2u-2w-1v"],C.o.2u[ZC.1b[58]]=C.E["2u-2w-2z"],C.o.2u[ZC.1b[59]]=C.E["2u-2w-2c"],C.o.2u[ZC.1b[60]]=C.E["2u-2w-1K"]);1a M=["1v","2z","2c","1K"];1j(a=0;a<M.1f;a++)C.E["2u.d-2w-"+M[a]]=1c;if(ZC.P.ET(C.A.K+"-2H"),1w C.E.bU!==ZC.1b[31]&&1c!==ZC.1d(C.E.bU)&&C.E.bU.1f>0&&"3c"!==C.H.AB&&C.AY.A7)1j(1a H=0,N=C.AY.A7.1f;H<N;H++){if(C.AY.A7[H].S.1f<C.E.bU[H])1j(r=C.AY.A7[H].S.1f,o=C.E.bU[H];r<o;r++)l=C.K+ZC.1b[35]+H+"-2r-"+r,ZC.P.ET([l+"-2R",l+"-1N-2R",l+"-sh-2R"]),-1!==ZC.AT(["6y","5i"],C.AF)&&ZC.P.ET([l+"-1Q-5c",l+"-1Q-2R",l+"-1Q-sh-2R",l+"-1Q-3A",l+"-1Q-sh-3A"]),C.EJ[H+"-"+r]=1c;if(-1===ZC.AT(["6y","5i"],C.AF)||ZC.A4.6I.7m)1j(r=0,o=C.E.bU[H];r<o;r++)l=C.K+ZC.1b[35]+H+"-2r-"+r,ZC.P.ET([l+"-1Q-5c",l+"-1Q-2R",l+"-1Q-sh-2R",l+"-1Q-3A",l+"-1Q-sh-3A"])}1j(C.E.bU=1c,a=0,n=C.AY.A7.1f;a<n;a++)C.GB=C.GB||C.AY.A7[a].GB;(C.HK||1w PO===ZC.1b[31])&&(C.GB=!1),C.GB&&(C.M7.lS=1n(){C.MK="9t"}),-1===ZC.AT(C.H.KY,ZC.1b[41])&&(C.HB=1m I4(C),C.HB.K=C.K+"-3H",A.2y(C.HB.o,Z+".3H"),C.HB.1C(C.o.3H),C.A8=1m DP(C),C.A8.OG="2H",C.o.2H&&C.o.2H[ZC.1b[7]]&&C.o.2H[ZC.1b[7]].1L("2r")>-1?A.2y(C.A8.o,Z+".2H[4N]"):A.2y(C.A8.o,Z+".2H"),C.A8.1C(C.o.2H),C.A8.QB=!0,C.A8.1q(),1c!==ZC.1d(e=C.o.2i)&&(C.o["9z-x"]=e),(1c!==ZC.1d(e=C.o["9z-x"])||A.PU("2i",C.AF)||A.PU("9z-x",C.AF))&&C.AJ[ZC.1b[23]]&&(C.CT=1m CY(C),C.CT.OG="17t",A.2y(C.CT.o,[Z+".2i",Z+".9z-x"],!0,!0),C.CT.1C(e),C.CT.1q(),C.E["2i-on"]=!0),(1c!==ZC.1d(e=C.o["9z-y"])||A.PU("9z-y",C.AF))&&C.AJ[ZC.1b[23]]&&(C.H8=1m CY(C),C.H8.OG="17s",A.2y(C.H8.o,[Z+".2i",Z+".9z-y"],!0,!0),C.H8.1C(e),C.H8.1q(),C.E["2i-on"]=!0)),C.O7(),ZC.AN.C2("17q",C.A,C.HW()),1c!==ZC.1d(e=C.o.cI)&&(C.HT={1J:"lL",ea:10,lv:"79",9M:"lg","94-1z":!1,"1X-9O":20,"l8-hm":100,"8M-hm":0,hH:!1,"hH-2e":5L},ZC.2E(e,C.HT),C.V4=1),C.MK="1q.aE"}O7(){}PK(){}LR(e,t,i){1a a=1g,n=(i=i||a.Q).iX,l=i.iY,r=i.I,o=i.F;if("2F"===t){if(a.AJ["3d"]){1a s,C=[];e=1;1a A,Z,c,p,u=[],h=n-ZC.AM.DZ,1b=l-ZC.AM.E0;s=1m CB(a,h+r/2-e,1b-e,ZC.AM.FS),p=ZC.1k(s.E9[1]),s=1m CB(a,h+r/2-e,1b-e,0),c=ZC.1k(s.E9[1]),u.1h(1m CB(a,h-e,1b-e,p<c?ZC.AM.FS:0),1m CB(a,h+r+e,1b-e,p<c?ZC.AM.FS:0)),s=1m CB(a,h+r-e,1b+o/2-e,ZC.AM.FS),A=ZC.1k(s.E9[0]),s=1m CB(a,h+r-e,1b+o/2-e,0),Z=ZC.1k(s.E9[0]),u.1h(1m CB(a,h+r+e,1b-e,A>Z?ZC.AM.FS:0),1m CB(a,h+r+e,1b+o+e,A>Z?ZC.AM.FS:0)),s=1m CB(a,h+r/2-e,1b+o+e,ZC.AM.FS),p=ZC.1k(s.E9[1]),s=1m CB(a,h+r/2-e,1b+o+e,0),c=ZC.1k(s.E9[1]),u.1h(1m CB(a,h+r+e,1b+o+e,p>c?ZC.AM.FS:0),1m CB(a,h-e,1b+o+e,p>c?ZC.AM.FS:0)),s=1m CB(a,h-e,1b+o/2-e,ZC.AM.FS),A=ZC.1k(s.E9[0]),s=1m CB(a,h-e,1b+o/2-e,0),Z=ZC.1k(s.E9[0]),u.1h(1m CB(a,h-e,1b+o+e,A<Z?ZC.AM.FS:0),1m CB(a,h-e,1b-e,A<Z?ZC.AM.FS:0)),u.1h(u[0]);1j(1a d=0;d<u.1f;d++)s=u[d],C.1h([ZC.1k(s.E9[0]),ZC.1k(s.E9[1])].2M(","));1l C.2M(" ")}1l[[n-e,l-e].2M(","),[n+r+e,l-e].2M(","),[n+r+e,l+o+e].2M(","),[n-e,l+o+e].2M(","),[n-e,l-e].2M(",")].2M(" ")}1l"3C"===t?n-e+","+(l-e)+","+(r+2*e)+","+(o+2*e):(a.AJ["3d"]&&(e+=10),"5t("+(l-e)+"px,"+(n+r+e)+"px,"+(l+o+e)+"px,"+(n-e)+"px)")}ua(){1a e,t=1g;if(t.AJ["3d"]&&t.EX["3i-iH"]){1a i=!1;1j(t.EX.3H=1;!i&&t.EX.3H>.25;){i=!0;1a a=t.LR(0,"2F").2p(" ");1j(e=0;e<a.1f;e++){1a n=a[e].2p(",");(ZC.1k(n[0])<t.iX+t.Q.DY||ZC.1k(n[0])>t.iX+t.I-t.Q.E1||ZC.1k(n[1])<t.iY+t.Q.E2||ZC.1k(n[1])>t.iY+t.F-t.Q.DM)&&(i=!1)}i||(t.EX.3H-=.gz),i&&(t.EX.3H-=.jg)}}}5N(){1a e,t,i,a,n,l,r,o,s=1g,C=s.A.I+"/"+s.A.F,A="0/0";if(s.ua(),!s.H.2P()){1a Z=2,c=6;if(1c!==ZC.1d(e=s.Q.o["4K-a1"])&&(e 3F 3N?(Z=c=ZC.1k(e[0]),e.1f>1&&(c=ZC.1k(e[1]))):Z=c=ZC.1k(e)),"2F"===s.A.AB&&s.AJ.3u&&(ZC.P.ET([s.K+"-3u",s.K+"-3u-2N",s.K+"-3u-2A"]),s.A.KH.3b(ZC.P.Y0({id:s.K+"-3u",2R:s.LR(Z,"2F")})),s.A.KH.3b(ZC.P.Y0({id:s.K+"-3u-2N",2R:s.LR(c,"2F")})),s.BI)){1a p=s.AJ["3d"];s.AJ["3d"]=!1,s.A.KH.3b(ZC.P.Y0({id:s.K+"-3u-2A",2R:s.LR(0,"2F",s.BI.B5)})),s.AJ["3d"]=p}1a u=!s.AJ.3u,h=u?1c:s.LR(Z),1b=u?1c:"3R(#"+s.K+"-3u)",d=u?1c:s.LR(c),f=u?1c:"3R(#"+s.K+"-3u-2N)";if(s.BI&&(n=u?1c:s.LR(0,s.A.AB,s.BI.B5),l=u?1c:"3R(#"+s.K+"-3u-2A)"),ZC.P.K3({2o:"zc-3l",id:s.K,p:ZC.AK(s.A.K+"-aS"),tl:A,wh:C},s.A.AB),s.A.O6.3a&&ZC.P.HI({2o:ZC.1b[24]+" zc-xw",id:s.K+"-c",p:ZC.AK(s.K),wh:C},s.A.AB),ZC.P.K3({id:s.K+"-2u",p:ZC.AK(s.K),tl:A,wh:C,2K:"4D"},s.A.AB),s.o.2u&&s.A.O6.2u&&ZC.P.HI({2o:ZC.1b[24],id:s.K+"-2u-c",p:ZC.AK(s.K+"-2u"),wh:C},s.A.AB),"1c"!==s.AF&&s.A.O6.4l){1j(ZC.P.K3({id:s.K+"-3z-bl",p:ZC.AK(s.K),tl:A,wh:C,2K:"4D","3u-2R":1b,3u:h},s.A.AB),t=0;t<s.xp;t++)ZC.P.HI({2o:ZC.1b[24],id:s.K+"-3z-bl-"+t+"-c",p:ZC.AK(s.K+"-3z-bl"),wh:C},s.A.AB);if(s.AY.E["1B-3X"]){1j(t=0,i=s.AY.A7.1f;t<i;t++){1j(s.AY.A7[t].V6={},a=0;a<s.AY.A7[t].T0;a++)ZC.P.ET(s.K+"-4l-bl-"+a);1j(a=0;a<s.AY.A7[t].kE;a++)ZC.P.ET(s.K+"-4l-fl-"+a)}4s s.AY.E["1B-3X"]}if(s.A.KE||s.AJ["3d"])ZC.AK(s.K+"-4l-bl")||ZC.P.K3({id:s.K+"-4l-bl",p:ZC.AK(s.K),8R:ZC.AK(s.K+"-3z-bl"),tl:A,wh:C,2K:"4D","3u-2R":1b,3u:h},s.A.AB),(r=ZC.P.HI({2o:"zc-3l zc-6v zc-bl",id:s.K+"-4l-bl-c",p:ZC.AK(s.K+"-4l-bl"),wh:C},s.A.AB)).4m("1T-3u",s.LR(Z,"3C"));1u 1j(t=0,i=s.AY.A7.1f;t<i;t++)1j(o=s.AY.LU[t],a=s.AY.A7[t].T0-1;a>=0;a--)ZC.AK(s.K+"-4l-bl-"+a)||ZC.P.K3({id:s.K+"-4l-bl-"+a,p:ZC.AK(s.K),8R:ZC.AK(s.K+"-3z-bl"),tl:A,wh:C,2K:"4D","3u-2R":1b,3u:h},s.A.AB),(r=ZC.P.HI({2o:"zc-3l zc-6v zc-bl",id:s.K+"-1B-"+o+"-bl-"+a+"-c",p:ZC.AK(s.K+"-4l-bl-"+a),wh:C},s.A.AB)).4m("1T-3u",s.LR(Z,"3C")),r.1I.3M="8K";1j(t=0;t<s.W0;t++)ZC.P.HI({2o:ZC.1b[24],id:s.K+"-3z-ml-"+t+"-c",p:ZC.AK(s.K),wh:C},s.A.AB);if(s.A.KE||s.AJ["3d"])ZC.AK(s.K+"-4l-fl")||ZC.P.K3({id:s.K+"-4l-fl",p:ZC.AK(s.K),8R:ZC.AK(s.K+"-3z-ml-"+(s.W0-1)+"-c"),tl:A,wh:C,2K:"4D"},s.A.AB),(r=ZC.P.HI({2o:"zc-3l zc-6v zc-fl",id:s.K+"-4l-fl-c",p:ZC.AK(s.K+"-4l-fl"),wh:C},s.A.AB)).4m("1T-3u",s.LR(c,"3C"));1u 1j(t=0,i=s.AY.A7.1f;t<i;t++)1j(o=s.AY.LU[t],a=s.AY.A7[t].kE-1;a>=0;a--)ZC.AK(s.K+"-4l-fl-"+a)||ZC.P.K3({id:s.K+"-4l-fl-"+a,p:ZC.AK(s.K),8R:ZC.AK(s.K+"-3z-ml-"+(s.W0-1)+"-c"),tl:A,wh:C,2K:"4D"},s.A.AB),(r=ZC.P.HI({2o:"zc-3l zc-6v zc-fl",id:s.K+"-1B-"+o+"-fl-"+a+"-c",p:ZC.AK(s.K+"-4l-fl-"+a),wh:C},s.A.AB)).4m("1T-3u",s.LR(c,"3C")),r.1I.3M="8K";1j(1o.3I.jd&&(ZC.P.K3({id:s.K+"-4l-2N",p:ZC.AK(s.K),tl:A,wh:C,2K:"4D"},s.A.AB),ZC.P.HI({2o:"zc-3l zc-6v zc-fl",id:s.K+"-4l-2N-c",p:ZC.AK(s.K+"-4l-2N"),wh:C},s.A.AB)),ZC.P.K3({id:s.K+"-3z-fl",p:ZC.AK(s.K),tl:A,wh:C,2K:"4D","3u-2R":1b,3u:h},s.A.AB),t=0;t<s.xl;t++)ZC.P.HI({2o:ZC.1b[24],id:s.K+"-3z-fl-"+t+"-c",p:ZC.AK(s.K+"-3z-fl"),wh:C},s.A.AB);if(s.BI&&(ZC.P.K3({id:s.K+"-2A",p:ZC.AK(s.A.K+"-bd"),tl:A,wh:C,2K:"4D","3u-2R":l,3u:n},s.A.AB),ZC.P.HI({2o:"zc-3l",id:s.K+"-2A-c",p:ZC.AK(s.K+"-2A"),wh:C},s.A.AB)),ZC.P.K3({id:s.K+"-1Z",p:ZC.AK(s.K),tl:A,wh:C,2K:"4D"},s.A.AB),s.o["1Z-x"]&&ZC.P.HI({2o:"zc-3l",id:s.K+"-1Z-x-c",p:ZC.AK(s.K+"-1Z"),wh:C},s.A.AB),s.o["1Z-y"]&&ZC.P.HI({2o:"zc-3l",id:s.K+"-1Z-y-c",p:ZC.AK(s.K+"-1Z"),wh:C},s.A.AB),ZC.P.K3({id:s.K+"-4l-vb",p:ZC.AK(s.K),tl:A,wh:C,2K:"4D"},s.A.AB),s.A.O6[ZC.1b[17]])if(s.A.KE||s.AJ["3d"])ZC.P.HI({2o:"zc-3l zc-6v zc-vb",id:s.K+"-4l-vb-c",p:ZC.AK(s.K+"-4l-vb"),wh:C},s.A.AB);1u 1j(t=0,i=s.AY.A7.1f;t<i;t++)ZC.P.HI({2o:"zc-3l zc-6v zc-vb",id:s.K+"-1B-"+t+"-vb-c",p:ZC.AK(s.K+"-4l-vb"),wh:C},s.A.AB)}(s.o.5D||s.o.7T||s.o.7k||s.o["no-1T"])&&(ZC.P.K3({id:s.K+"-gW",p:ZC.AK(s.K),tl:A,wh:C,2K:"4D"},s.A.AB),ZC.P.HI({2o:ZC.1b[24],id:s.K+"-gW-c",p:ZC.AK(s.K+"-gW"),wh:C},s.A.AB)),ZC.P.K3({2o:"zc-3l",wh:C,id:s.K+"-2N",p:ZC.AK(s.A.K+"-2N"),"3u-2R":f,3u:d},s.A.AB),"3c"===s.A.AB&&(ZC.AK(s.K+"-2N").1I.3u=d),ZC.P.HI({2o:ZC.1b[24],id:s.K+ZC.1b[22],p:ZC.AK(s.K+"-2N"),wh:C},s.A.AB),s.A.O6.4Y&&-1!==3h.5b(s.o).1L("1o.4Y")&&(ZC.P.K3({2o:"zc-3l",wh:C,id:s.K+"-2J-4Y",p:ZC.AK(s.A.K+"-2J-4Y"),"3u-2R":f,3u:d},s.A.AB),ZC.P.HI({2o:ZC.1b[24],id:s.K+"-2J-4Y-sh-c",p:ZC.AK(s.K+"-2J-4Y"),wh:C},s.A.AB),ZC.P.HI({2o:ZC.1b[24],id:s.K+"-2J-4Y-c",p:ZC.AK(s.K+"-2J-4Y"),wh:C},s.A.AB),ZC.P.HI({2o:ZC.1b[24],id:s.K+"-2J-4Y-3J-c",p:ZC.AK(s.K+"-2J-4Y"),wh:C},s.A.AB),ZC.P.HI({2o:ZC.1b[24],id:s.K+"-2J-4Y-2N-c",p:ZC.AK(s.K+"-2J-4Y"),wh:C},s.A.AB),ZC.P.HI({2o:ZC.1b[24],id:s.K+"-2J-4Y-6E-c",p:ZC.AK(s.K+"-2J-4Y"),wh:C,3M:"2a"},s.A.AB)),s.oj(),s.o.1V&&(ZC.P.HI({2o:ZC.1b[24],id:s.K+"-1V-c",p:ZC.AK(s.A.K+"-1V"),wh:C},s.A.AB),ZC.P.HI({2o:ZC.1b[24],id:s.K+"-1V-1Z-c",p:ZC.AK(s.A.K+"-1V"),wh:C},s.A.AB))}s.Z=s.H.2P()?s.H.mc():ZC.AK(s.K+"-c")}oj(){1a e=1g,t=e.A.I+"/"+e.A.F;!ZC.AK(e.K+"-2J-2c")&&e.A.O6["2J-2c"]&&(e.o.5U||e.o[ZC.1b[10]]||e.o.dl||e.o.8z)&&(ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2J-2c",p:ZC.AK(e.A.K+"-2J-2c")},e.A.AB),ZC.P.HI({2o:ZC.1b[24],id:e.K+"-2J-2c-sh-c",p:ZC.AK(e.K+"-2J-2c"),wh:t},e.A.AB),ZC.P.HI({2o:ZC.1b[24],id:e.K+"-2J-2c-c",p:ZC.AK(e.K+"-2J-2c"),wh:t},e.A.AB)),!ZC.AK(e.K+"-2J-1v")&&e.A.O6["2J-1v"]&&(e.o.5U||e.o[ZC.1b[10]]||e.o.dl||e.o.8z)&&(ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2J-1v",p:ZC.AK(e.A.K+"-2J-1v")},e.A.AB),ZC.P.HI({2o:ZC.1b[24],id:e.K+"-2J-1v-sh-c",p:ZC.AK(e.K+"-2J-1v"),wh:t},e.A.AB),ZC.P.HI({2o:ZC.1b[24],id:e.K+"-2J-1v-c",p:ZC.AK(e.K+"-2J-1v"),wh:t},e.A.AB)),(e.A.O6["2J-2c"]||e.A.O6["2J-1v"])&&(e.o.5U||e.o[ZC.1b[10]]||e.o.dl)&&ZC.P.HI({2o:ZC.1b[24],id:e.K+"-2J-6E-c",p:ZC.AK(e.K+"-2J-1v"),wh:t,3M:"2a"},e.A.AB),!ZC.AK(e.K+"-2J-3J")&&(e.A.O6["2J-2c"]||e.A.O6["2J-1v"])&&(e.o.5U||e.o[ZC.1b[10]]||e.o.dl||e.o.8z)&&(ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2J-3J",p:ZC.AK(e.A.K+"-2N")},e.A.AB),ZC.P.HI({2o:ZC.1b[24],id:e.K+"-2J-3J-c",p:ZC.AK(e.K+"-2J-3J"),wh:t},e.A.AB)),!ZC.AK(e.K+"-2J-2N")&&(e.A.O6["2J-2c"]||e.A.O6["2J-1v"])&&(e.o.5U||e.o[ZC.1b[10]]||e.o.dl||e.o.8z)&&(ZC.P.K3({2o:"zc-3l",wh:t,id:e.K+"-2J-2N",p:ZC.AK(e.A.K+"-2N")},e.A.AB),ZC.P.HI({2o:ZC.1b[24],id:e.K+"-2J-2N-c",p:ZC.AK(e.K+"-2J-2N"),wh:t},e.A.AB))}Y6(){}qI(){}a4(){1a e,t=1g;1c!==ZC.1d(e=t.A.SN[t.K])&&"bG"===t.HT.1J&&(e.8n("1o.mu"),e.7l(),t.A.SN[t.K]=1c),t.GB&&t.M7.8M(!0),t.MK="3k.7z",t.3m(),t.BB&&t.BB.3m(),t.BI&&t.BI.3m(),t.IG&&t.IG.3m(),t.ID&&t.ID.3m(),t.MK="3k.aE"}3k(e,t){1c===ZC.1d(e)&&(e=!1),1c===ZC.1d(t)&&(t=!1);1a i,a,n,l,r=1g;r.TT={},1c===ZC.1d(i=r.A.SN[r.K])||e||"bG"===r.HT.1J&&(i.8n("1o.mu"),i.7l(),r.A.SN[r.K]=1c),r.GB&&r.M7.8M(!0),r.MK="3k.7z",r.3m(e),r.Y6(!1,!0),r.L8(),r.L8("3J"),r.L8("2i",!0),r.L8("6E",!0),r.L8("ls",!0),e||(!r.BI||r.BI&&!r.BI.LV)&&r.L8("8N",!0),r.AY.ZK=[],r.A.T3=[],1o.4F.dZ||r.BB&&r.BB.3k(),r.E.bU=[];1a o,s,C,A=ZC.6Q?ZC.AK(r.A.K):1c;if(ZC.2L||ZC.6Q)ZC.A4("."+r.K+"-2r-1N",A).3q();1u if(ZC.AK(r.A.K+"-5X")&&ZC.AK(r.A.K+"-3f")){ZC.AK(r.A.K+"-5X").4m("sK","");1a Z=ZC.AK(r.A.K+"-3f").k4(!0);1j(a=(n=Z.7d.1f)-1;a>=0;a--)-1!==Z.7d[a].82.1L(r.K+"-2r-1N")&&Z.aJ(Z.7d[a]);ZC.P.ET(r.A.K+"-3f"),ZC.AK(r.A.K+"-1v").3b(Z),ZC.AK(r.A.K+"-5X").4m("sK","#"+r.A.K+"-3f")}1R(r.AY.HV=[],ZC.A4("."+r.K+"-1U-3C",A).3q(),ZC.A4("."+r.K+"-1z-1Q-1H",A).3q(),ZC.A4("."+r.K+"-1z-1P",A).3q(),ZC.A4("."+r.K+"-1z-1H",A).3q(),ZC.A4("."+r.K+"-2i-1H",A).3q(),ZC.A4("."+r.K+"-2S-1H",A).3q(),ZC.A4("."+r.K+"-sw-1H",A).3q(),e||ZC.A4("."+r.K+"-2A-1P",A).3q(),r.A.AB){1i"2F":1j(a=0,n=r.AY.A7.1f;a<n;a++)r.AY.A7[a].HJ=1c;ZC.A4("#"+r.A.K+"-j4").9i().5f(1n(){"174"!==1g.8b.5E()&&(0!==1g.id.1L(r.K+"-")&&1!==r.A.AH.1f||(e?1g.id!==r.K+"-5c"&&-1===1g.id.1L("-2A-5c")&&-1===1g.id.1L("-2B-7U-5c")&&-1!==1g.id.1L(r.K+ZC.1b[35])&&(t&&r.GB||-1!==1g.id.1L(r.K+"-1V-")&&1o.4F.dZ||ZC.A4(1g).3q()):-1===1g.id.1L("zc-2B-")&&-1===1g.id.1L("-2B-7U-")&&(-1!==1g.id.1L(r.K+"-1V-")?1o.4F.dZ||ZC.A4(1g).3q():r.BI&&r.BI.LV?-1===1g.id.1L("-2A-5c")&&ZC.A4(1g).3q():ZC.A4(1g).3q())))}),e||ZC.P.ET([r.K+"-3u",r.K+"-3u-2N",r.K+"-3u-2A"]),ZC.A4("#"+r.A.K+"-2F").9i().5f(1n(){1a e=r.K+"-";"wr"===1g.8b.b0()&&1g.id.2x(0,e.1f)===e&&1g.id!==r.K+"-3u"&&1g.id!==r.K+"-3u-2N"&&1g.id!==r.K+"-3u-2A"&&ZC.P.ET(1g.id)})}(ZC.P.ET(r.K+"-gB"),ZC.P.ET(r.A.K+"-2H-1D-8X"),e||(ZC.P.ET([r.K+"-5D",r.K+"-7T",r.K+"-7k",r.K+"-2N"]),1o.4F.dZ||r.BB&&(ZC.P.ET(r.K+"-1V-c"),ZC.P.ET(r.K+"-1V-1Z-c"),ZC.A4("."+r.K+"-1V-1P-1N",A).3q(),ZC.A4("."+r.K+"-1V-1Q-1N",A).3q(),ZC.A4("."+r.K+"-1V-1P",A).3q(),ZC.A4("."+r.K+"-1V-5Z",A).3q(),ZC.A4("."+r.K+"-1V-9Z",A).3q(),ZC.A4("."+r.K+"-1V-a0",A).3q(),r.BB.gc(),r.BB=1c),r.BI&&(r.BI.LV&&!r.A.E.bW||(r.BI.3m(),ZC.A4("."+r.K+"-2A-3O").3q(),ZC.A4("."+r.K+"-2A-4K").3q(),ZC.A4("#"+r.K+"-2A").3q(),r.BI.gc(),r.BI=1c)),r.IG&&(r.IG.3m(),r.IG=1c),ZC.P.IM(ZC.AK(r.K+"-1Z-x-c"),r.A.AB,r.iX,r.iY,r.I,r.F,r.K),ZC.P.IM(ZC.AK(r.K+"-1Z-y-c"),r.A.AB,r.iX,r.iY,r.I,r.F,r.K),ZC.A4("#"+r.K+"-1Z-x-3r").3q(),ZC.A4("#"+r.K+"-1Z-x-2U").3q(),r.ID&&(r.ID.3m(),r.ID=1c),ZC.A4("#"+r.K+"-1Z-y-3r").3q(),ZC.A4("#"+r.K+"-1Z-y-2U").3q(),ZC.A4("#"+r.K+"-c").lu(),r.H.R1[0]!==r.H.R1[1]&&""!==r.H.R1[1]&&("3c"===r.H.AB&&ZC.A4("#"+r.K+" 3c").5f(1n(){1g.1s=1,1g.1M=1,ZC.P.ET(1g)}),ZC.A4("#"+r.K+" 3E").5f(1n(){ZC.P.ET(1g)}),ZC.P.ET(r.K))),ZC.A4("#"+r.K+" .zc-6v").5f(1n(){1a i=ZC.P.TB(1g);if(-1===i.1L("zc-xw")){if(e&&(1g.id===r.K+"-2u-c"||1g.id===r.K+"-gW-c"))1l;if(-1===1g.id.1L(r.K+"-1B-")&&-1===1g.id.1L(r.K+"-4l-"))ZC.P.IM(1g,r.H.AB,r.iX,r.iY,r.I,r.F,r.K);1u if(t&&r.GB&&!r.HK){if("3c"!==r.H.AB)1j(1a a=0,n=r.AY.A7.1f;a<n;a++)r.E.bU[a]=r.AY.A7[a].S.1f;(l=r.A.KE?1m 5n("-4l-[a-z]+-c","g").3p(1g.id):1m 5n("-1B-(\\\\d+)-[a-z]+-\\\\d+-","g").3p(1g.id))&&(!r.E["1B"+l[1]+".2h"]&&"3q"===r.8f()||r.A.KE)&&ZC.P.IM(1g,r.H.AB,r.iX,r.iY,r.I,r.F,r.K),-1===i.1L("zc-vb")&&-1===i.1L("zc-fl")||ZC.P.IM(1g,r.H.AB,r.iX,r.iY,r.I,r.F,r.K)}1u ZC.P.IM(1g,r.H.AB,r.iX,r.iY,r.I,r.F,r.K)}}),-1!==ZC.AT(r.H.KY,ZC.1b[44]))&&((o=ZC.AK(r.H.K+"-46-c"))&&ZC.P.IM(o,r.H.AB,r.iX,r.iY,r.I,r.F,r.K),(s=ZC.AK(r.H.K+"-46-c-1v"))&&ZC.P.IM(s,r.H.AB,r.iX,r.iY,r.I,r.F,r.K),(C=ZC.AK(r.H.K+ZC.1b[15]))&&ZC.P.IM(C,r.H.AB,r.iX,r.iY,r.I,r.F,r.K));r.qI(),r.A.E.bW=!1,r.MK="3k.aE"}3m(e,t){1c===ZC.1d(e)&&(e=!1);1a i=1g;(-1===ZC.AT(i.H.KY,ZC.1b[41])||t)&&(ZC.A4("."+i.K+"-2r-1N").4k("6K 76 4I",i.XK).4k("6m 7F 5T",i.qr).4k("7W 6l",i.nr).4k("3J",i.TQ).4k("fP",i.TQ).4k("9A",i.ov),i.BB&&(1o.4F.dZ||(ZC.A4("."+i.K+"-1V-1P-1N").4k("6m 4I",i.SV).4k("fh",i.9C).4k("av",i.9C),ZC.A4("."+i.K+"-1V-1Q-1N").4k("6m 4I",i.SV).4k("fh",i.9C).4k("av",i.9C),ZC.A4("#"+i.K+"-1V-a0").4k("fh",i.9C).4k("av",i.9C),ZC.2L||(ZC.A4("."+i.K+"-1V-1P-1N").4k(ZC.P.BX("76"),i.QW).4k(ZC.P.BX("7F"),i.RH).4k(ZC.P.BX(ZC.1b[48]),i.PY),ZC.A4("."+i.K+"-1V-1Q-1N").4k(ZC.P.BX("76"),i.QW).4k(ZC.P.BX("7F"),i.RH).4k(ZC.P.BX(ZC.1b[48]),i.PY))))),i.ns()}ns(){}RP(){}PV(){}JS(){}R9(){}Q7(){}L8(e,t){1a i=1g;e=e||"2N",1c===ZC.1d(t)&&(t=!1);1a a=ZC.AK((t?i.A.K:i.K)+"-"+e+"-c");a&&(ZC.P.IM(a,i.H.AB,i.iX,i.iY,i.I,i.F,i.K,"ls"===e),ZC.A4("."+i.K+"-1H-2N").3q()),"2N"===e&&(ZC.P.IM(ZC.AK(i.K+"-2J-2N-c"),i.H.AB,i.iX,i.iY,i.I,i.F,i.K),ZC.P.IM(ZC.AK(i.K+"-2J-4Y-2N-c"),i.H.AB,i.iX,i.iY,i.I,i.F,i.K),1o.3I.jd&&ZC.P.IM(ZC.AK(i.K+"-4l-2N-c"),i.H.AB,i.iX,i.iY,i.I,i.F,i.K)),"3J"===e&&(ZC.P.IM(ZC.AK(i.K+"-2J-3J-c"),i.H.AB,i.iX,i.iY,i.I,i.F,i.K),ZC.P.IM(ZC.AK(i.K+"-2J-4Y-3J-c"),i.H.AB,i.iX,i.iY,i.I,i.F,i.K)),i.tS(e,t)}tS(){}oh(e,t){1a i,a=1g;if(1c!==ZC.1d(e)&&1c!==ZC.1d(t)){1a n=a.AY.A7[e].J2,l=a.AY.A7[e].RW;if("2a"===n)1l;if(1c!==ZC.1d(a.CW["p"+e])){if(1c!==ZC.1d(a.CW["p"+e]["n"+t])){if(4s a.CW["p"+e]["n"+t],l)1j(i=0;i<a.AY.A7.1f;i++)4s a.CW["p"+i]["n"+t]}1u if("3a"===n?(a.CW={},a.CW["p"+e]={}):"1B"===n&&(a.CW["p"+e]={}),a.CW["p"+e]["n"+t]=!0,l)1j(i=0;i<a.AY.A7.1f;i++)a.CW["p"+i]=a.CW["p"+i]||{},a.CW["p"+i]["n"+t]=!0}1u if("3a"===n&&(a.CW={}),a.CW["p"+e]={},a.CW["p"+e]["n"+t]=!0,l)1j(i=0;i<a.AY.A7.1f;i++)a.CW["p"+i]=a.CW["p"+i]||{},a.CW["p"+i]["n"+t]=!0}1c!==ZC.1d(e)&&1c!==ZC.1d(t)&&(a.HK=!0,a.JU(!0,!0))}1t(e){1c===ZC.1d(e)&&(e=!1);1a t,i,a,n,l,r,o=1g;o.A.ti=o.K,o.VL=e,2v.ik(ZC.ob[o.K]),o.A.pG("vb"+o.L);1a s,C,A,Z,c,p,u,h=o.BT("k")[0],1b=ZC.3v,d=-ZC.3v,f={},g=o.AY.A7,B=0;1j(Z=0;Z<g.1f;Z++)if(g[Z].o.aQ)1j(A=0;A<g.1f;A++)if(g[A].o.id&&g[A].o.id===g[Z].o.aQ){B++,u=!0;1a v=[];1j(l=0;l<g[A].S.1f;l++)(h.ED?g[A].S[l].BY>=h.B4&&g[A].S[l].BY<=h.BQ:g[A].S[l].L>=h.X&&g[A].S[l].L<=h.A1)?(s=g[A].S[l].AE,1b=1A.2j(1b,s),d=1A.1X(d,s),u?(u=!1,g[A].S[l].BY?v.1h([g[A].S[l].BY,0]):v.1h(0),p=s):g[A].S[l].BY?v.1h([g[A].S[l].BY,100*(s-p)/p]):v.1h(100*(s-p)/p)):g[A].S[l].BY?v.1h([g[A].S[l].BY,0]):v.1h(0);f["p-"+Z]=[].4z(v)}if(B>0){1j(1b=ZC.3v,d=-ZC.3v,Z=0;Z<g.1f;Z++)if(g[Z].o.aQ&&f["p-"+Z])1j(l=0;l<g[Z].S.1f;l++)2===(C=f["p-"+Z][l]).1f?(s=C[1],g[Z].W[l]=C,g[Z].S[l].AE=g[Z].S[l].CM=C[1]):(s=C,g[Z].W[l]=g[Z].S[l].AE=g[Z].S[l].CM=C),g[Z].FR(l),1b=1A.2j(1b,s),d=1A.1X(d,s);1a E=o.BT("v")[0];E.Q4(1b,d,!0),E.GV()}1j(o.A.E["g-"+o.L+"-aL"]&&(o.CW=3h.1q(o.A.E["g-"+o.L+"-aL"])),o.KX=!1,i=0,a=o.AY.A7.1f;i<a;i++)o.K6[i]=!1;1j(i in o.CW)if(o.CW.88(i)){1a b=ZC.1k(i.1F("p",""));1j(c in o.CW[i])if(o.CW[i].88(c)){o.K6[b]=!0,o.KX=!0;1p}}1n m(){if(o.AJ["3d"]){1a e=ZC.DE.D9(o.Q,o,o.Q.iX-ZC.AM.DZ,o.Q.iX-ZC.AM.DZ+o.Q.I,o.Q.iY-ZC.AM.E0,o.Q.iY-ZC.AM.E0+o.Q.F,ZC.AM.FS+10,ZC.AM.FS+10,"y"),i=ZC.DE.D9(o.Q,o,o.Q.iX-ZC.AM.DZ,o.Q.iX-ZC.AM.DZ+o.Q.I,o.Q.iY-ZC.AM.E0,o.Q.iY-ZC.AM.E0+o.Q.F,ZC.AM.FS,ZC.AM.FS,"y");i.K=o.K+"-2u",i.PL=e.D,o.CG.2Q(i)}1u{o.Q.Z=o.Q.C6=o.H.2P()?o.H.mc():ZC.AK(o.K+"-2u-c");1a a,n=[o.Q.iX,o.Q.iY,o.Q.I,o.Q.F],l=o.Q.AQ,r=o.Q.AQ,s=o.Q.AQ,C=o.Q.AQ;""!==(t=o.Q.QD)&&(a=t.2p(/\\s/),l=ZC.1k(a[0])),""!==(t=o.Q.OO)&&(a=t.2p(/\\s/),r=ZC.1k(a[0])),""!==(t=o.Q.NX)&&(a=t.2p(/\\s/),s=ZC.1k(a[0])),""!==(t=o.Q.PD)&&(a=t.2p(/\\s/),C=ZC.1k(a[0])),o.Q.iX-=C+1,o.Q.iY-=l+1,o.Q.I+=C+r+1,o.Q.F+=l+s+1,o.Q.1t(),o.Q.iX=n[0],o.Q.iY=n[1],o.Q.I=n[2],o.Q.F=n[3]}}if(o.A.Y2(),o.NB(),o.VL?o.E["2u.1t"]&&(m(),o.E["2u.1t"]=1c):(o.5N(),o.Z&&(o.C6=o.Z,1E.1t()),m()),"xy"===o.AJ.3w||"yx"===o.AJ.3w){1a K=o.BT("v"),D=1c;1j(l=0;l<K.1f;l++)(0===l||K[l].o["3Q-ci"])&&K[l].GX<=0&&K[l].HQ>=0&&K[l].TM&&(D=l);if(1c!==ZC.1d(D)){1a F=K[D].AX(0);1j(l=0;l<K.1f;l++)if(l!==D&&K[l].o["tc-ci"]&&K[l].GX<=0&&K[l].HQ>=0&&K[l].TM){1a I=K[l].AX(0);if(ZC.2l(I-F)>=1)1j(1a x=!0,X=0;x;)I>F?K[l].D8?K[l].AR?K[l].A6+=1:K[l].BV+=1:K[l].AR?K[l].BV+=1:K[l].A6+=1:K[l].D8?K[l].AR?K[l].BV+=1:K[l].A6+=1:K[l].AR?K[l].A6+=1:K[l].BV+=1,X++,K[l].GV(),K[l].T6(),(X>(K[l].D8?o.Q.I:o.Q.F)||ZC.2l(K[l].AX(0)-F)<1)&&(x=!1)}}}1j(l=0,r=o.BL.1f;l<r;l++)o.BL[l].Z=o.BL[l].C6=o.H.2P()?o.H.mc():ZC.AK(o.K+"-3z-bl-0-c"),o.A.OE=!0,o.BL[l].1t(),o.A.XN(),o.A.OE=!1;1a y=1w o.E["6e-3H"]!==ZC.1b[31]&&1c!==ZC.1d(o.E["6e-3H"])&&o.E["6e-3H"];if(o.BI&&o.BI.LV?o.BI.IQ&&(o.BI.IQ=!0,o.BI.1t()):o.E["b2-2A"]||!o.BI||o.VL&&!o.BI.IQ||y||(o.BI.IQ=!0,o.BI.1t()),o.E["6e-3H"]=1c,o.E["b2-2A"]=1c,o.IG&&o.IG.1t(),o.ID&&o.ID.1t(),o.VL||(n=o.H.2P()?o.H.mc():ZC.AK(o.K+"-gW-c"),o.J3&&o.J3.AL&&1c!==ZC.1d(o.J3.AP)&&(o.J3.Z=o.J3.C6=n,o.J3.1t(),!o.J3.KE&&ZC.AK(o.A.K+"-3f")&&(ZC.AK(o.A.K+"-3f").4o+=ZC.AN.OB(o.K,o.J3))),o.KQ&&o.KQ.AL&&1c!==ZC.1d(o.KQ.AP)&&(o.KQ.Z=o.KQ.C6=n,o.KQ.1t(),!o.KQ.KE&&ZC.AK(o.A.K+"-3f")&&(ZC.AK(o.A.K+"-3f").4o+=ZC.AN.OB(o.K,o.KQ))),o.N0&&o.N0.AL&&1c!==ZC.1d(o.N0.AP)&&(o.N0.Z=o.N0.C6=n,o.N0.1t(),!o.N0.KE&&ZC.AK(o.A.K+"-3f")&&(ZC.AK(o.A.K+"-3f").4o+=ZC.AN.OB(o.K,o.N0))),o.SD&&o.SD.AL&&1c!==ZC.1d(o.SD.AP)&&(o.SD.Z=o.SD.C6=n,o.SD.1t())),o.J3&&o.J3.EB(),o.KQ&&o.KQ.EB(),o.N0&&o.N0.EB(),o.AJ["3d"]||o.T9(),o.A.OE=!o.GB,1o.3I.bI&&(o.A.OE=!1),o.A.E["3a."+o.K+".ly"])1j(l=0,r=o.AY.A7.1f;l<r;l++)o.AY.A7[l].GB=!1;o.AY.1t(),o.H.tV()}T9(){}eM(){1a e=1g;e.BI&&(ZC.P.IM(ZC.AK(e.K+"-2A-c"),e.A.AB,e.iX,e.iY,e.I,e.F,e.K),e.A.HB&&!e.A.HB.l3&&e.BI.l8(),e.BI.IQ=!0)}bX(){}g7(){1a e,t,i,a,n=1g;1j(n.E["9L-8h-3q"]=1c,n.GB||n.A.XN(),n.A.OE=!1,(n.LV||!n.GB||n.H.E["3a."+n.K+".ly"]||!n.AJ[ZC.1b[55]]||-1!==ZC.AT(n.H.KY,ZC.1b[41])||1o.4F.aH)&&(n.MK="9t"),"wI"===n.lF&&(n.xR=!1,n.H.E["3a."+n.K+".ly"]=!0),t=0,i=n.BL.1f;t<i;t++)n.BL[t].6D();if(!n.A.E["cY-2y"]){1a l=ZC.AN.C2("16I",n.A,n.HW(),!0);if(l)1j(1a r=[ZC.1b[10],"5U","16H","dl"],o=0;o<r.1f;o++)l[r[o]]&&(n.o[r[o]]=(n.o[r[o]]||[]).4z(l[r[o]]))}1n s(e){1a t,i,a=(e.9G||e.2X.id).1F("-1N-2R","").1F("-2R","").1F(/--([a-zA-Z0-9]+)/,"").1F("-1Q","").1F("-3A","").2p("-").9D();1l"2r"===a[1]&&(t=a[2],i=a[0]),[t,i]}if(n.AJ["3d"]||(n.bX(),n.PK(),n.JS(),-1===ZC.AT(n.H.KY,ZC.1b[41])&&n.Q7()),-1===ZC.AT(n.H.KY,ZC.1b[41])){1a C=ZC.A4("."+n.K+"-2r-1N");n.XK=1n(e){if(!(1o.aY&&"76"===1o.l9&&"76"===e.1J||(1o.hz=n.A.K,1o.aY=e,1o.l9=e.1J,ZC.3o||n.BB&&n.BB.ZG||-1===ZC.P.TB(e.2X).1L("zc-2r-1N")||"9t"!==n.MK))){ZC.2L&&(n.E["2r-2X-id"]=e.2X.id,ZC.3o=!1,n.H.9p(),1c===n.H.DD||1c===ZC.1d(n.H.DD["3g-1Z"])||n.H.DD["3g-1Z"]||e.6X(),n.A.W8(e));1a a=s(e);if(n.AY.A7[a[0]]){1a l=n.AY.A7[a[0]].FR(a[1]);if(l&&(l.N?(ZC.aw=[l.N.C0,l.N.A0,l.N.AC,l.N.BU,l.N.B8],l.NG&&ZC.aw.1h(l.NG.A0,l.NG.AC,l.NG.BU,l.NG.B8)):ZC.aw=[],n.E["1B"+a[0]+".2h"])){1a r=ZC.2L?"6K":e.eG||e.1J;(ZC.2L||r!==ZC.1b[47])&&n.A.A8&&n.A8&&n.A8.AL&&n.A.A8.eK(e);1a o=n.AY.A7[a[0]];if("1B"===o.j2)1j(t=0,i=o.S.1f;t<i;t++)o.S[t]&&o.FR(t).HZ("2N");1u l.HZ("2N");l.OW(e,r),l.A.UP(e,r),n.BB&&(ZC.3o=!0,n.BB.SH?n.L===n.A.AH.1f-1&&n.BB.e7(a[0]):n.BB.e7(a[0]),ZC.3o=!1)}}}},C.4g("6K 76 4I",n.XK),n.qr=1n(e){if(1o.aY=1o.l9=1c,1o.hz=1c,!(ZC.3o||n.BB&&n.BB.ZG)){1a t=e.2X;if(ZC.2L&&2g.xL){1a i=ZC.P.MJ(e),a=1A.1X(2v.xP,2g.fN.aK,2g.3s.aK),l=1A.1X(2v.xO,2g.fN.aG,2g.3s.aG);if((t=2g.xL(i[0]-a,i[1]-l))&&n.E["2r-2X-id"]&&n.E["2r-2X-id"]!==t.id)1l}if(-1!==ZC.P.TB(e.2X).1L("zc-2r-1N")&&"9t"===n.MK){ZC.2L&&n.A.P7(e);1a r=s(e),o=n.AY.A7[r[0]].FR(r[1]);if(o){if(n.E["1B"+r[0]+".2h"]){n.A.A8&&n.A8&&n.A8.AL&&n.A.A8.eJ(e),n.AY.A7[r[0]].D=[],o.L8(),n.L8();1a C=ZC.2L?"6m":e.eG||e.1J;o.OW(e,C),o.A.UP(e,C),n.BB&&(ZC.3o=!0,n.BB.SH?n.L===n.A.AH.1f-1&&n.BB.e7(-1):n.BB.e7(-1),ZC.3o=!1)}!ZC.2L||n.H.ei||ZC.3o||(1o.SO(e),n.TQ(e))}}}},C.4g("6m 7F 5T",n.qr),n.nr=1n(e){if(1o.aY=e,1o.hz=n.A.K,1o.l9=e.1J,-1!==ZC.P.TB(e.2X).1L("zc-2r-1N")&&"9t"===n.MK){ZC.2L&&n.A.P7(e);1a t=s(e);n.E["1B"+t[0]+".2h"]&&n.A.A8&&n.A8&&n.A8.AL&&n.A.A8.gT(e)}},C.4g("7W 6l",n.nr),n.TQ=1n(e){if((e.9G||-1!==ZC.P.TB(e.2X).1L("zc-2r-1N"))&&"9t"===n.MK){1a t=s(e),i=n.AY.A7[t[0]].FR(t[1]);if(i&&("2a"===i.A.J2||!ZC.2L&&0!==e.7O||(n.A.E[ZC.1b[53]]=!0,n.eM(),n.oh(i.A.L,i.L)),i.OW(e,"3J"),i.A.UP(e,"3J"),1c!==ZC.1d(i.A.E5)&&"gU"!==i.A.E5))if(i.A.E5 3F 3N)1j(1a a=0;a<i.A.E5.1f;a++){1a l=i.A.FE;i.A.FE 3F 3N&&(l=i.A.FE[a]||"3a="+(n.o.id||"")),a===i.L&&n.U6(e,i.EW(i.A.E5[a],1c,1c,!0),l)}1u n.U6(e,i.EW(i.A.E5,1c,1c,!0),i.A.FE||"3a="+(n.o.id||""))}},n.ov=1n(e){if(-1!==ZC.P.TB(e.2X).1L("zc-2r-1N")&&"9t"===n.MK){1a t=s(e),i=n.AY.A7[t[0]].FR(t[1]);i&&(i.OW(e,"xI"),i.A.UP(e,"xI"))}},ZC.2L||C.4g("3J",n.TQ).4g("fP",n.TQ).4g("9A",n.ov)}if(n.ok(),n.A.E["tr-ev-"+n.L]?(n.A.E["tr-ev-"+n.L]=1c,n.nZ()):n.nZ(),n.iw){n.iw=!1;1a A={4u:n.K};1j(t=0,i=n.BT("k").1f;t<i;t++){1a Z=n.BT("k")[t];1c!==ZC.1d(e=Z.LZ)&&(A["7C"+(a=1===Z.L?"":"-"+Z.L)]=!0,A["4t"+a]=e[0],A["4p"+a]=e[1])}1j(t=0,i=n.BT("v").1f;t<i;t++){1a c=n.BT("v")[t];1c!==ZC.1d(e=c.LZ)&&(A["7N"+(a=1===c.L?"":"-"+c.L)]=!0,A["5r"+a]=e[0],A["5s"+a]=e[1])}if(A.oz=!0,n.A.G1){1j(1a p in n.A.G1)ZC.AK(p).3b(n.A.G1[p]);n.A.G1=1c}n.A.PH(A)}}ok(){}nZ(){1a e=1g;if(e.A.gV<e.A.AH.1f&&(e.A.gV++,ZC.AN.C2("16E",e.A,e.HW())),ZC.AN.C2("16D",e.A,e.HW()),e.BI&&(e.BI.IQ=!1),1o.aY&&1o.hz&&1o.hz===e.A.K){1a t=ZC.A4("#"+e.A.K+"-1v"),i=ZC.DU[0]-t.2b().1K,a=ZC.DU[1]-t.2b().1v,n=1o.3p(e.A.K,"xE",{x:i,y:a});if(n)1j(1a l=0;l<n.1f;l++)if("2r"===n[l].hA&&n[l].ho<10){1a r=n[l].4u+ZC.1b[35]+n[l].74+"-2r-"+n[l].7w;1o.aY&&1o.aY.2X&&1o.aY.2X.id===r&&(e.XK(1o.aY),1o.aY=1c)}}1o.hB&&e.A.D4&&e.A.D4.QN(1o.hB),e.A.lR<e.A.AH.1f?e.A.lR++:(e.A.lR=1,e.A.gV===e.A.AH.1f&&(e.A.gV++,e.A.E["cY-2y"]=!0,e.LV&&e.AY.A7.1f>1&&(1o.4F.9H||ZC.AN.C2("2y",e.A,e.A.FF()))),e.A.E["cY-aE"]=!0,(e.E["3a-JU"]||e.LV&&e.AY.A7.1f>1)&&(1o.4F.9H||ZC.AN.C2("aE",e.A,e.A.FF()),e.E["3a-JU"]=1c)),0!==e.A.R2.1f&&e.A.R2[e.A.R2.1f-1]===e.A.E.4G||(e.A.R2[e.A.NZ]!==e.A.E.4G&&(e.A.R2.1f=e.A.NZ+1),e.A.R2[e.A.NZ]=e.A.E.4G)}JU(e,t){1a i=1g;1c===ZC.1d(e)&&(e=!1),1c===ZC.1d(t)&&(t=!1),i.A.MO(i),i.E["3a-JU"]=!0,i.3k(e,t),i.1q(),i.UQ&&i.UQ(),i.1t(e),i.BI&&i.BI.nW(),i.HK=!1,1o.4F.8o=!1}U6(ev,E5,FE){if(2!==ev.7O){1a s=1g,C,PJ=[""];1R(1c!==ZC.1d(FE)&&(PJ=FE.2p("=")),PJ[0]){1i"od":2v.bn(E5,"od");1p;1i"x9":2v.1v.8d.7B=E5;1p;1i"wM":2v.wF.8d.7B=E5;1p;1i"2v":1c!==ZC.1d(PJ[1])&&""!==PJ[1]&&(2v.1v[PJ[1]].8d.7B=E5);1p;1i"3a":1a YF=1c;if("()"===E5.2x(E5.1f-2)||"7y:"===E5.2x(0,11))4O{1a EH=E5.1F("7y:","").1F("()","");7u(EH)&&(YF=7u(EH).4x(s))}4M(e){}1c!==ZC.1d(PJ[1])&&""!==PJ[1]?"x9"===PJ[1]||"wM"===PJ[1]?(s.A.MO(),YF?1o.3p(s.A.K,"b3",{1T:YF}):s.A.2y(1c,E5)):(C=s.A.OH(PJ[1]),C&&(s.A.MO(C),s.A.E["tr-ev-"+C.L]=!0,s.A.NZ++,YF?1o.3p(s.A.K,"b3",{4u:PJ[1],1T:YF}):s.A.2y(PJ[1],E5))):(C=s.A.AH[0],s.A.MO(C),YF?1o.3p(s.A.K,"b3",{4u:C.K,1T:YF}):(s.A.E["tr-ev-"+C.L]=!0,s.A.NZ++,s.A.2y(C.K,E5)));1p;2q:2v.8d.7B=E5}}}HO(e,t,i){1a a=1g;if(1c===ZC.1d(i)&&(i=a.AY.A7.1f-1),1c!==ZC.1d(e)&&1w e!==ZC.1b[31])1l a.AY.A7[e];if(1c===ZC.1d(t)||1w t===ZC.1b[31])1l a.AY.A7[i];1j(1a n=0,l=a.AY.A7.1f;n<l;n++)if(t===a.AY.A7[n].H4)1l a.AY.A7[n];1l 1c}YX(e,t){1a i,a,n=1g;(e=e||{})[ZC.1b[54]]=e[ZC.1b[54]]||n.8f();1a l=1c;if(1w e.3V!==ZC.1b[31]&&(l=ZC.1k(e.3V)),-1===l)1j(l=[],i=0,a=n.AY.A7.1f;i<a;i++)l.1h(i);l 3F 3N||(l=[l]);1a r=e.4T||"";r 3F 3N||(r=[r]);1a o=[];1j(i=0,a=ZC.BO(l.1f,r.1f);i<a;i++){1a s=n.HO(l[i],r[i]);if(s){1a C={};ZC.2E(e,C);1a A=s.L;C.3V=A,C.4T=s.H4,("4n"===t&&!n.E["1B"+A+".2h"]||"5e"===t&&n.E["1B"+A+".2h"])&&o.1h(C)}}1j(i=0,a=o.1f;i<a;i++)n.A.o[ZC.1b[16]][n.L][ZC.1b[11]][o[i].3V].2h="4n"===t,i===a-1&&(o[i].JU=1),n.PA(o[i])}PA(e){1a t,i,a,n=1g;n.A.E["3a."+n.K+".ly"]=!1,e=e||{};1a l=!1;1c!==ZC.1d(e.b2)&&e.b2&&(l=!0);1a r=!1;e[ZC.1b[54]]=e[ZC.1b[54]]||n.8f(),1c!==ZC.1d(t=e["bS-1V"])&&(r=ZC.2t(t));1a o=n.HO(e.3V,e.4T);if(o){1a s=o.L;1R(e[ZC.1b[54]]){1i"5e":if(n.BB&&(n.BB.E.lI=!0),n.E["1B"+s+".2h"]=!n.E["1B"+s+".2h"],1c!==ZC.1d(n.A.o[ZC.1b[16]][n.L][ZC.1b[11]])&&(n.A.o[ZC.1b[16]][n.L][ZC.1b[11]][s].2h=n.E["1B"+s+".2h"]),n.AJ["3d"])r=!0,l||n.JU();1u{1a C=n.E["1B"+s+".2h"]?"8K":"2a";if(1o.3I.bI||ZC.A4("."+n.K+ZC.1b[35]+s+"-2r-1N").5f(1n(){if("wJ"===1g.8b.5E()){1a e=ZC.A4(1g),t=e.3T("9s"),a=e.3T("2S");"2a"===C?(t="-"+t.1F(/,/g,",-"),"5t"===a?4===(i=t.2p(",")).1f&&(t=[i[2],i[3],i[0],i[1]].2M(",")):"3A"===a&&3===(i=t.2p(",")).1f&&(t=[i[0],i[1],-i[2]].2M(","))):(t=t.1F(/\\-/g,""),"5t"===a&&4===(i=t.2p(",")).1f&&(t=[i[2],i[3],i[0],i[1]].2M(","))),e.3T("9s",t)}}),n.A.KE)ZC.AK(n.K+"-4l-bl-c").1I.3M=C,ZC.AK(n.K+"-4l-fl-c").1I.3M=C,ZC.AK(n.K+"-4l-vb-c").1I.3M=C;1u{1j(a=0;a<o.T0;a++)(t=ZC.AK(n.K+"-1B-"+s+"-bl-"+a+"-c"))&&(t.1I.3M=C);1j(a=0;a<o.kE;a++)(t=ZC.AK(n.K+"-1B-"+s+"-fl-"+a+"-c"))&&(t.1I.3M=C);(t=ZC.AK(n.K+"-1B-"+s+"-vb-c"))&&(t.1I.3M=C)}1a A=ZC.A4("."+n.K+"-1B-"+s+"-1U-3C");n.E["1B"+s+".2h"]?(A.4n(),ZC.A4("."+n.K+ZC.1b[35]+s+"-2A").4n()):(A.5e(),ZC.A4("."+n.K+ZC.1b[35]+s+"-2A").5e())}1p;1i"3q":n.eM(),r=!0,n.E["9L-8h-3q"]=!0,n.E["1B"+s+".2h"]=!n.E["1B"+s+".2h"],e.JU&&(l||(n.LK("on-1V-9L"),n.JU(!0,!0)))}n.BB&&!r&&(n.BB.3k(),n.BB.1t())}}LK(e){1a t=1g,i=!0,a=t.o.1B||{};1c!==ZC.1d(a.8P)&&1c!==ZC.1d(a.8P[e])&&(i=ZC.2t(a.8P[e])),t.HK="wI"===t.lF||!i}HW(){1l{id:1g.A.K,Dx:1g.L,4u:1g.K.1F(1g.A.K+"-3a-",""),x:1g.iX,y:1g.iY,1s:1g.I,1M:1g.F,6J:1g.A.FF()}}SC(){}SB(){}gc(){1j(1a e=0;e<1g.BL.1f;e++)1g.BL[e].gc();1j(1a t=0;t<1g.AY.A7.1f;t++)1g.AY.A7[t].gc();ZC.AN.gc(1g.AY,["A","C","H","FA","o","I7","JW"]),ZC.AN.gc(1g,["Z","C6","AJ","J3","KQ","N0","EX"])}}K1.5m.PK=1n(){1a e,t,i,a,n,l,r,o,s=1g;s.oj(),s.BW=[],s.FH=[],s.YU=[],s.LQ=[],s.FN=[],s.XT={};1a C,A,Z,c=s.A.B9,p="("+s.AF+")";if(1c!==ZC.1d(C=s.o[ZC.1b[10]]))1j(t=0,i=C.1f;t<i;t++){C[t].id||(C[t].id="16x"+t+"1b"+ZC.hK(5L,6H)),a=C[t].id||t,n=!1,l=!1,s.E["2J.dA"]&&-1===ZC.AT(s.E["2J.dA"],a)&&(n=!0,l=!0),C[t].cw&&(n=!0);1a u=1o.6f.aF("DP",s,s.K+"-1H-"+a,n);if(!l||!u.nA){if(c.2y(u.o,p+".1H"),u.1C(C[t]),1c!==ZC.1d(e=u.o.wF))1j(1a h=0;h<s.BW.1f;h++)if(""+s.BW[h].H4==""+e){u.E["p-x"]=s.BW[h].iX,u.E["p-y"]=s.BW[h].iY,u.E["p-1s"]=s.BW[h].I,u.E["p-1M"]=s.BW[h].F;1p}if(u.H4=a,u.K=s.K+"-1H-"+a,u.GM=s.K+"-1H zc-1H",1c!==ZC.1d(e=C[t].7q)&&(u.E.7q=e),u.EW=1n(t){if(!t||-1===(""+t).1L("%"))1l t;t=""+t;1a i,a=[];a.1h(["%id",s.A.K]),a.1h(["%4u",s.K.1F(s.A.K+"-3a-","")]);1a n=s.E.3S;1j(1a l in n)a.1h(["%"+l,n[l]]);a.3X(ZC.mf);1j(1a r=0,o=a.1f;r<o;r++)i=1m 5n(a[r][0],"g"),t=t.1F(i,a[r][1]);1a C,A,Z,c,p=u.o["2q-1U"]||" ";1j(i=1m 5n("(%1B-([0-9]+?)-1U(-*)([0-9]*?))|(%1B-1U-([0-9]+?))|(%1B-1U)|(%8v)|(%2r-8l-1U)","g"),t=t.1F(i,p),i=1m 5n("%1B-([0-9]+?)-1T-([a-zA-Z0-9-]+)","g"),t=t.1F(i,p),i=1m 5n("\\\\((.+?)\\\\)\\\\(([0-9]*)\\\\)\\\\(([0-9]*)\\\\)");C=i.3p(t);)if("%2r-1U"===C[1]){A="";1a h=0,1b=0;""!==(e=C[2])&&(h=ZC.1k(e)),""!==(e=C[3])&&(1b=ZC.1k(e)),(c=s.AY.A7[h])&&(Z=c.FR(1b,3))&&(A=Z.EW(C[1])),t=t.1F(C[0],A)}1l t},u.1q(),C[t]["3d"]){1a 1b=1m CB(s,u.iX+u.I/2-ZC.AM.DZ,u.iY+u.F/2-ZC.AM.E0,ZC.1k(C[t].z||"0"));u.iX=1b.E9[0]-u.I/2,u.iY=1b.E9[1]-u.F/2}}s.BW.1h(u),s.FN.1h({1J:"1H",2Y:t,a6:u.JT}),s.XT[a]={2S:"1H",bO:t}}if(1c!==ZC.1d(A=s.o.dl))1j(t=0,i=A.1f;t<i;t++){1a d=1m wD(s);c.2y(d.o,p+".7L"),d.1C(A[t]),a=A[t].id||t,d.K=s.K+"-7L-"+a,d.1q(),s.YU.1h(d),s.FN.1h({1J:"7L",2Y:t,a6:d.JT})}1a f,g=0;if(1c!==ZC.1d(Z=s.o.5U))1j(t=0,i=Z.1f;t<i;t++)if(1c===ZC.1d(Z[t].1J)||0!==Z[t].1J.1L("1o.")){1a B,v,E;if(Z[t].id||(Z[t].id="16w"+t+"1b"+ZC.hK(5L,6H)),a=Z[t].id||t,l=1c!==ZC.1d(1o.6f[s.K+"-2S-"+a])&&1o.4F.lB,n=!1,s.E["2J.dA"]&&-1===ZC.AT(s.E["2J.dA"],a)&&(n=!0,l=!0),Z[t].cw&&(n=!0),Z[t]["3d"]?((r=1o.6f.aF("DS",s,s.K+"-2S-"+a,!0)).o=Z[t],("4B"!==Z[t].1J||Z[t]["3f-1P"])&&(l=!1)):(1c!==ZC.1d(Z[t].1H)?(r=1o.6f.aF("QY",s,s.K+"-2S-"+a,n)).X6=Z[t]:((r=1o.6f.aF("DS",s,s.K+"-2S-"+a,n)).o=Z[t],r.1C({},!0)),n&&r.nA||(l=!1)),l||(r.H4=a,r.K=s.K+"-2S-"+a,r.OE=!0,Z[t]["3f-1P"]&&(r.OE=!1),r.1q()),1c!==ZC.1d(e=Z[t].7q)&&(r.E.7q=e),Z[t]["3d"]){if(Z[t]["3f-1P"]){1j(B=[],v=0,E=r.D.1f;v<E;v++)1c!==r.D[v]?(o=1m CB(s,r.D[v][0]-ZC.AM.DZ,r.D[v][1]-ZC.AM.E0,ZC.1k(r.D[v][2]||Z[t].z||"0")),B.1h(o.E9)):B.1h(1c);r.D=B,s.FH.1h(r),s.FN.1h({1J:"2S",2Y:g,a6:r.JT,fG:o.dK}),s.XT[a]={2S:r.DN,bO:g}}1u if("4B"===Z[t].1J){1a b=ZC.DE.D5(r,s,Z[t].2W,!1);s.CG.2Q(b),s.FH.1h(1c)}1u{if(r.D.1f>0){1j(B=[],v=0,E=r.D.1f;v<E;v++)o=1m CB(s,r.D[v][0]-ZC.AM.DZ,r.D[v][1]-ZC.AM.E0,ZC.1k(r.D[v][2]||Z[t].z||"0")),B.1h(o.E9);r.D=B}1u o=1m CB(s,r.iX-ZC.AM.DZ,r.iY-ZC.AM.E0,ZC.1k(Z[t].z||"0")),r.iX=ZC.1k(o.E9[0]),r.iY=ZC.1k(o.E9[1]);s.FH.1h(r),s.FN.1h({1J:"2S",2Y:g,a6:r.JT,fG:o.dK})}r.E["wy"]=!0,r.E["3d"]=!0}1u s.FH.1h(r),r 3F QY?(s.FN.1h({1J:"2S",2Y:g,a6:r.BD.JT}),s.XT[a]={2S:r.BD.DN,bO:g}):(s.FN.1h({1J:"2S",2Y:g,a6:r.JT}),s.XT[a]={2S:r.DN,bO:g});g++}if(1c!==ZC.1d(f=s.o.8z))1j(t=0,i=f.1f;t<i;t++){1a m=f[t].5a;if(ZC.4f.1T[m]){1a K=1m I4(s);K.1C({"1W-6G":"no-6G","1W-4i":m,1s:ZC.4f.1T[m].1s,1M:ZC.4f.1T[m].1M}),K.1C(f[t]),a=f[t].id||t,K.H4=a,K.K=s.K+"-4i-"+a,K.L=t,K.1q(),s.LQ.1h(K),s.FN.1h({1J:"4i",2Y:t,a6:K.JT})}}s.E["2J.dA"]=1c,s.FN=s.FN.3X(1n(e,t){1l 1c!==ZC.1d(e.fG)&&1c!==ZC.1d(t.fG)?e.fG-t.fG>0?1:-1:0}),s.FN=s.FN.3X(1n(e,t){1l e.a6-t.a6==0?e.2Y-t.2Y:e.a6-t.a6})},K1.5m.Y6=1n(e,t){1w e===ZC.1b[31]&&(e=!1),1w t===ZC.1b[31]&&(t=!1);1a i,a=1g,n=[a.K+"-2J-2c-sh-c",a.K+"-2J-2c-c",a.K+"-2J-1v-sh-c",a.K+"-2J-1v-c",a.K+"-2J-5p-c",a.K+"-2J-6E-c"];ZC.dp||n.1h(a.K+"-2J-4Y-sh-c",a.K+"-2J-4Y-c");1j(1a l=0;l<n.1f;l++)(i=ZC.AK(n[l]))&&ZC.P.IM(i,a.H.AB,a.iX,a.iY,a.I,a.F,a.K);"3c"===a.A.AB&&!1o.h8&&ZC.bK||(ZC.A4("."+a.K+"-1H").3q(),ZC.A4("."+a.K+"-2S-1H").3q(),ZC.A4("."+a.K+"-7L-1H").3q()),e||(ZC.A4("."+a.K+"-1H-1N").5f(1n(){if(-1===ZC.AT([a.K+"-5D-1N",a.K+"-7T-1N",a.K+"-7k-1N"],1g.id)){1a e=1m 5n("16u(x|y|k|v)-(7E|aI)([0-9]+)").3p(1g.id);!t&&e&&e.1f||ZC.P.ET(1g.id)}}),ZC.A4("."+a.K+"-2S-1N").5f(1n(){(!ZC.dp||ZC.dp&&"1"!==1g.bP("1T-3f"))&&ZC.P.ET(1g.id)}),ZC.A4("."+a.K+"-7L-1N").3q()),"2F"===a.A.AB&&ZC.A4("#"+a.A.K+"-2F").9i().5f(1n(){1a e=a.K+"-1H-";"wr"===1g.8b.b0()&&1g.id.2x(0,e.1f)===e&&ZC.P.ET(1g.id)})},K1.5m.ns=1n(){1a e=1g;(e.H.O6["2J-1v"]||e.H.O6["2J-2c"])&&(ZC.A4("."+e.K+"-1H-1N").4k(ZC.2L?"4I":"6K 76",e.oU).4k(ZC.2L?"5T":"6m 7F",e.oR).4k(ZC.2L?"6l":ZC.1b[48],e.oO),ZC.2L||ZC.A4("."+e.K+"-1H-1N").4k("3J",e.UU).4k("9A",e.UU),ZC.A4("."+e.K+"-2S-1N").4k(ZC.2L?"4I":"6K 76",e.qj).4k(ZC.2L?"5T":"6m 7F",e.qi).4k(ZC.2L?"6l":ZC.1b[48],e.qh),ZC.2L||ZC.A4("."+e.K+"-2S-1N").4k("3J",e.UY).4k("9A",e.UY))},K1.5m.O7=1n(){1a e,t,i,a,n=1g;if(n.ZB=!1,1c!==ZC.1d(i=n.o[ZC.1b[10]]))1j(e=0,t=i.1f;e<t;e++){1a l=""+(i[e].1D||"");if(-1!==l.1L("%2r-")||-1!==l.1L("%1B-")||-1!==l.1L("%8v")||-1!==l.1L("%2r-8l-1U")||ZC.2t(i[e].4N)){n.ZB=!0;1p}}if(1c!==ZC.1d(a=n.o.5U))1j(e=0,t=a.1f;e<t;e++)if(ZC.2t(a[e].4N)){n.ZB=!0;1p}},K1.5m.PV=1n(e){1a t=1g;t.Y6(e),t.PK(),t.JS(e),ZC.dp=!1},K1.5m.JS=1n(e){1w e===ZC.1b[31]&&(e=!1);1a t,i,a,n=1g,l=[],r=[];1n o(e){1a t=n.YU[e];if(t.AL&&(t.Z=t.C6=n.H.2P()?n.H.mc("1v"):ZC.AK(n.K+"-2J-"+(t.JT<0?"2c":"1v")+"-c"),t.1t(),t.AL&&ZC.AK(n.A.K+"-3f"))){1a i=t.BD.kx(),a=ZC.P.GF(i[0],t.BD.E5,t.BD.IX)+\'1O="\'+n.K+\'-7L-1N zc-7L-1N" id="\'+t.BD.K+\'-1N" 9s="\'+i[1]+\'" />\';"1v"===t.o[ZC.1b[7]]?r.1h(a):l.1h(a)}}1n s(e){if(n.FH[e]){1a i=n.FH[e],a=i 3F QY?i.BD:i;if((!ZC.dp||!a.o["3f-1P"])&&a.AL){if(1c!==ZC.1d(t=i.E.7q)){1a o=n.OF(t);-1!==o[0]&&(a.iX=ZC.1k(o[0])),-1!==o[1]&&(a.iY=ZC.1k(o[1]))}if(!i.E["3d"]||i.E["wy"]){i.Z=n.H.2P()?n.H.mc("1v"):ZC.AK(n.K+"-2J-"+(a.JT<0?"2c":"1v")+"-c"),i.C6=n.H.2P()?n.H.mc("1v"):ZC.AK(n.K+"-2J-"+(a.JT<0?"2c":"1v")+"-sh-c"),a.o["3f-1P"]&&(i.Z=n.H.2P()?n.H.mc("1v"):ZC.AK(n.K+"-2J-4Y-c"),i.C6=n.H.2P()?n.H.mc("1v"):ZC.AK(n.K+"-2J-4Y-sh-c"));1a s="";1c!==ZC.1d(t=a.o.wv)&&("x"===t?s="x":"y"===t?s="y":"xy"===t&&(s="xy")),(""===s||"x"===s&&ZC.DQ(a.iX-a.BJ,n.Q.iX-2,n.Q.iX+n.Q.I+2)||"y"===s&&ZC.DQ(a.iY-a.BC,n.Q.iY-2,n.Q.iY+n.Q.F+2)||"xy"===s&&ZC.DQ(a.iX+a.BJ,n.Q.iX-2,n.Q.iX+n.Q.I-2)&&ZC.DQ(a.iY+a.BC,n.Q.iY-2,n.Q.iY+n.Q.F+2))&&(i.WQ=!1,i.E["6E-3c"]=n.K+"-"+(a.o["3f-1P"]?"4Y":"2J")+ZC.1b[15],i.1t())}if(!i.KE&&!n.QE&&"5h"===1o.en){1a C=a.kx();if(ZC.AK(n.A.K+"-3f"))1j(1a A=1,Z=C.1f;A<Z;A++)if(""!==C[A]){1a c=a.o["3f-1P"]&&!a.o["3f-b2-z-3X"]?\' 1T-3f="1"\':"",p=ZC.P.GF(C[0],a.E5,a.IX)+\'1O="\'+n.K+\'-2S-1N zc-2S-1N" id="\'+a.K+"-1N"+(A>1?"--"+A:"")+ZC.1b[30]+C[A]+\'" 1T-z-3X="\'+a.ks+\'"\'+c+" />";"1v"===i.o[ZC.1b[7]]?r.1h(p):l.1h(p)}}}}}1n C(e){1a t=n.LQ[e];if(t.AL)if(t.Z=t.C6=n.H.2P()?n.H.mc("1v"):ZC.AK(n.K+"-2J-"+(t.JT<0?"2c":"1v")+"-c"),1c!==ZC.1d(t.o.6G)&&ZC.2t(t.o.6G)){1a i=ZC.1k(ZC.7P(t.o.2C,0)),a=1c;if(t.o.fD&&((a=1m I4(t.A)).1S(t),a.1C(t.o.fD),a.1q(),a.Z=a.C6=t.Z),i>0||a){1a l=ZC.1k(ZC.7P(t.o.16t,-1)),r=ZC.1k(ZC.7P(t.o.16J,-1)),o=ZC.1k(ZC.7P(t.o["8A-x"],0)),s=ZC.1k(ZC.7P(t.o["8A-y"],0)),C=ZC.1k(ZC.7P(t.o["2b-5o"],0)),A=ZC.1k(ZC.7P(t.o["2b-kq"],0));-1!==l&&-1===r?r=1A.4j(i/l):-1===l&&-1!==r?l=1A.4j(i/r):-1===l&&-1===r&&(r=1A.4j(1A.5A(i)),l=1A.4j(i/r));1j(1a Z=t.iX,c=t.iY,p=t.K,u=0;u<l;u++)1j(1a h=0;h<r;h++)t.iX=Z+h*o+u*C,t.iY=c+u*s+h*A,t.K=p+(u*r+h),u*r+h<i?t.1t():a&&(a.iX=t.iX,a.iY=t.iY,a.K=t.K,a.1t())}1u t.1t()}1u t.1t()}1n A(e){1a i=n.BW[e];if(i.AL){if(i.E.sQ="1H",1c!==ZC.1d(t=i.E.7q)){1a a=n.OF(t);if(-1===a[0]&&-1===a[1])1l;if(-1!==a[0]&&(i.iX=a[0]),-1!==a[1]&&(i.iY=a[1]),1c===ZC.1d(a[2])||i.o.bL||1c!==ZC.1d(a[2].3G)&&a[2].3G&&(i.iX-=i.I/2,i.iY-=i.F/2),i.o.bL&&i.h3(),i.o["3d"]){1a o=0;a[2]&&a[2].z?o=a[2].z:i.o.z&&(o=ZC.1k(i.o.z));1a s=1m CB(n,i.iX+i.I/2-ZC.AM.DZ,i.iY+i.F/2-ZC.AM.E0,o);i.iX=s.E9[0]-i.I/2,i.iY=s.E9[1]-i.F/2}}i.iX=ZC.1k(i.iX),i.iY=ZC.1k(i.iY),i.IP=ZC.AK(n.A.K+"-1D"),i.Z=n.H.2P()?n.H.mc("1v"):ZC.AK(n.K+"-2J-"+(i.JT<0?"2c":"1v")+"-c"),i.C6=n.H.2P()?n.H.mc("1v"):ZC.AK(n.K+"-2J-"+(i.JT<0?"2c":"1v")+"-sh-c");1a C="";if(1c!==ZC.1d(t=i.o.wv)&&("x"===t?C="x":"y"===t?C="y":"xy"===t&&(C="xy")),(""===C||"x"===C&&ZC.DQ(i.iX-i.BJ,n.Q.iX-i.I/2-2,n.Q.iX+n.Q.I-i.I/2+2)||"y"===C&&ZC.DQ(i.iY-i.BC,n.Q.iY-i.F/2-2,n.Q.iY+n.Q.F-i.F/2+2)||"xy"===C&&ZC.DQ(i.iX+i.BJ,n.Q.iX-i.I/2-2,n.Q.iX+n.Q.I-i.I/2+2)&&ZC.DQ(i.iY+i.BC,n.Q.iY-i.F/2-2,n.Q.iY+n.Q.F-i.F/2+2))&&(i.WQ=!1,i.1t(),i.EB(ZC.AK(n.K+"-2J-6E-c")),!i.KE&&!n.QE&&"5h"===1o.en&&ZC.AK(n.A.K+"-3f"))){1a A=ZC.AN.OB(n.K,i);"1v"===i.o[ZC.1b[7]]?r.1h(A):l.1h(A)}}}if(n.H.pG("1H"),n.FN)1j(i=0,a=n.FN.1f;i<a;i++){1a Z=n.FN[i].2Y;1R(n.FN[i].1J){1i"7L":o(Z);1p;1i"2S":s(Z);1p;1i"4i":C(Z);1p;1i"1H":A(Z)}}1j(i=0;i<n.AY.A7.1f;i++)n.AY.A7[i].RO=1c;if(!e&&"5h"===1o.en&&(r.1f>0||l.1f>0)&&ZC.AK(n.A.K+"-3f")){if(n.pE){1a c=1n(e,t){1l-1!==e.1L("1T-3f")&&-1!==t.1L("1T-3f")?ZC.AN.N5(t)-ZC.AN.N5(e):ZC.AN.N5(e)-ZC.AN.N5(t)};r.3X(c),l.3X(c)}1o.3I.kj?2v.5I(1n(){ZC.AK(n.A.K+"-3f").4o=r.2M("")+ZC.AK(n.A.K+"-3f").4o+l.2M("")},33):ZC.AK(n.A.K+"-3f").4o=r.2M("")+ZC.AK(n.A.K+"-3f").4o+l.2M("")}n.A.E["cY-2y"]||ZC.AN.C2("16B",n.A,n.HW())},K1.5m.R9=1n(e,t,i,a){1a n,l,r,o,s=1g;1R(i=i||"2N",e){1i"2S":1a C=s.FH[t],A=C 3F QY?C.BD:C;if(1c!==ZC.1d(A.o[i+"-3Y"])){if(!a&&A.o.6h)1j(r=0,o=s.FH.1f;r<o;r++)r!==t&&(s.FH[r].o.6h===A.o.6h||s.FH[r].BD&&s.FH[r].BD.o.6h===A.o.6h)&&s.R9(e,r,i,!0);if((n=1m DS(s)).1C(A.o),n.1C(A.o[i+"-3Y"]),l=A.o.id||t,n.H4=l+"-"+i,n.K=s.K+"-2S-"+l+"-"+i,n.1q(),C.E["3d"]&&(n.D=A.D,n.iX=C.iX,n.iY=C.iY),n.AL)if(n.Z=n.C6=ZC.AK(s.K+"-2J-"+i+"-c"),n.o["3f-1P"]&&(n.Z=n.C6=ZC.AK(s.K+"-2J-4Y-"+i+"-c")),n.o["3f-1P"]&&1o.4Y.wt&&"3c"!==s.A.AB){if("2F"===s.A.AB){1a Z=ZC.A4("#"+s.K+"-2S-"+n.H4+"-bN-2R");s.E["3f-2S-6x"]={3j:Z.3T("3j"),4a:Z.3T("4a"),"4a-1s":Z.3T("4a-1s")},"4B"===n.DN?(Z.3T("3j",n.A0),Z.3T("4a-1s",n.AQ),Z.3T("4a",n.BU)):"1y"===n.DN&&(Z.3T("4a-1s",n.AZ),Z.3T("4a",n.B8))}1u if("3L"===s.A.AB){1a c=ZC.AK(s.K+"-2S-"+n.H4+"-bN-2R"),p=ZC.A4(c.7d[1]),u=ZC.A4(c.7d[2]);s.E["3f-2S-6x"]={3j:""+u.3T("1r"),4a:""+p.3T("1r"),"4a-1s":""+p.3T("7i")},"4B"===n.DN?(u.3T("1r",n.A0),p.3T("7i",n.AQ),p.3T("1r",n.BU)):"1y"===n.DN&&(p.3T("7i",n.AZ),p.3T("1r",n.B8))}}1u n.1t(),"3c"===s.A.AB&&1o.h8&&C.M&&(C.M.Z=C.M.C6=ZC.AK(s.K+"-2J-"+i+"-c"),C.M.1t())}1p;1i"1H":1a h=s.BW[t];if(h&&1c!==ZC.1d(h.o[i+"-3Y"])){if(!a&&h.o.6h)1j(r=0,o=s.BW.1f;r<o;r++)r!==t&&s.BW[r].o.6h===h.o.6h&&s.R9(e,r,i,!0);1a 1b=1o.6f.aF("DP",s,s.K+"-1H-"+i);1b.1C(h.o),1b.1C(h.o[i+"-3Y"]),l=h.id||t,1b.H4=l+"-"+i,1b.K=s.K+"-1H-"+l+"-"+i,1b.GM=s.K+"-1H "+s.K+"-1H-"+i+" zc-1H zc-1H-"+i,1b.IP=ZC.AK(s.A.K+"-1D"),1b.1q(),1b.AL&&(1b.iX=h.iX,1b.iY=h.iY,1b.I=h.I,1b.F=h.F,1b.Z=1b.C6=ZC.AK(s.K+"-2J-"+i+"-c"),ZC.AK(s.K+"-1H-"+l)&&(ZC.AK(s.K+"-1H-"+l).1I.3M="2a"),1b.1t())}}},K1.5m.Q7=1n(){1a e,t,i,a=1g;(a.H.O6["2J-1v"]||a.H.O6["2J-2c"])&&(a.qj=1n(e){ZC.2L&&(a.L8(),ZC.3o=!1,a.H.9p(),1c===a.H.DD||1c===ZC.1d(a.H.DD["3g-1Z"])||a.H.DD["3g-1Z"]||e.6X(),a.A.W8(e));1a t=n(e);t.2H&&a.A8&&a.A.A8&&a.A8.AL&&a.A.A8.eK(e);1a i=ZC.2L?"6K":e.eG||e.1J;t.kN||a.R9("2S",t.hc),a.SB(i,t)},a.qi=1n(e){ZC.2L&&(a.H.ei||ZC.3o||(1o.SO(e),a.UY(e)),a.A.P7(e)),a.A8&&a.A.A8&&a.A8.AL&&a.A.A8.eJ(e),ZC.2L||a.L8();1a t=ZC.2L?"6m":e.eG||e.1J,i=n(e);if(i.2S&&i.2S.wW&&1o.4Y.wt&&"3c"!==a.A.AB)if("2F"===a.A.AB){1a l=ZC.A4("#"+a.K+"-2S-"+i.2S.id+"-bN-2R");"4B"===i.2S.1J&&l.3T("3j",a.E["3f-2S-6x"].3j),l.3T("4a",a.E["3f-2S-6x"].4a),l.3T("4a-1s",a.E["3f-2S-6x"]["4a-1s"])}1u if("3L"===a.A.AB){1a r=ZC.AK(a.K+"-2S-"+i.2S.id+"-bN-2R"),o=r.7d[1],s=r.7d[2],C=a.E["3f-2S-6x"];"4B"===i.2S.1J&&ZC.P.G5(s,{1r:C.3j}),ZC.P.G5(o,{7i:C["4a-1s"],1r:C.4a})}a.SB(t,i)},a.qh=1n(e){1a t=n(e);t.2H&&a.A8&&a.A.A8&&a.A8.AL&&a.A.A8.gT(e),a.SB(ZC.1b[48],t)},a.UY=1n(e){1a t=n(e);if("9A"!==e.1J){e.hk||a.L8("3J"),a.TT=a.TT||{},a.TT["qk"+t.hd]?(a.TT["qk"+t.hd]=1c,a.L8("3J")):(e.hk||(a.TT={}),a.TT["qk"+t.hd]=1,a.R9("2S",t.hc,"3J")),a.SB("3J",t);1a i=a.FH[t.hc].BD||a.FH[t.hc];if(i&&i.E5&&"gU"!==i.E5)if(i.E5 3F 3N)1j(1a l=0;l<i.E5.1f;l++)1c!==ZC.1d(i.FE[l])&&a.U6(e,i.E5[l],i.FE[l]);1u a.U6(e,i.E5,i.FE)}1u a.SB("9A",t)},ZC.A4("."+a.K+"-2S-1N").4g(ZC.2L?"4I":"6K 76",a.qj).4g(ZC.2L?"5T":"6m 7F",a.qi).4g(ZC.2L?"6l":ZC.1b[48],a.qh),ZC.2L||ZC.A4("."+a.K+"-2S-1N").4g("3J",a.UY).4g("9A",a.UY),a.oU=1n(e){ZC.2L&&(a.L8(),ZC.3o=!1,a.H.9p(),1c===a.H.DD||1c===ZC.1d(a.H.DD["3g-1Z"])||a.H.DD["3g-1Z"]||e.6X(),a.A.W8(e));1a t=l(e);if(t.2H&&a.A8&&a.A.A8&&a.A8.AL&&a.A.A8.eK(e),1c!==t&&"1H"===t.1J){1a i=ZC.2L?"6K":e.eG||e.1J;t["1T-6L"]||a.R9("1H",t.eI),a.SC(i,t)}},a.oR=1n(e){ZC.2L&&(a.H.ei||ZC.3o||(1o.SO(e),a.UU(e)),a.A.P7(e)),a.A8&&a.A.A8&&a.A8.AL&&a.A.A8.eJ(e),ZC.2L||a.L8();1a t=l(e);if(1c!==t){1a i=ZC.2L?"6m":e.eG||e.1J;ZC.AK(a.K+"-1H-"+t.1H.id)&&(ZC.AK(a.K+"-1H-"+t.1H.id).1I.3M="8K"),a.SC(i,t)}},a.oO=1n(e){1a t=l(e);t.2H&&a.A8&&a.A.A8&&a.A8.AL&&a.A.A8.gT(e),a.SC(ZC.1b[48],t)},a.UU=1n(e){1a t=l(e);if("9A"!==e.1J){e.hk||a.L8("3J"),a.TT=a.TT||{},a.TT["oZ"+t.dq]?(a.TT["oZ"+t.dq]=1c,a.L8("3J")):(e.hk||(a.TT={}),a.TT["oZ"+t.dq]=1,a.R9("1H",t.eI,"3J")),a.SC("3J",t);1a i=a.BW[t.eI];if(!i)1R(t.1J){1i"3a-5D":i={E5:a.J3.E5,FE:a.J3.FE};1p;1i"3a-7T":i={E5:a.KQ.E5,FE:a.KQ.FE};1p;1i"3a-7k":i={E5:a.N0.E5,FE:a.N0.FE}}if(i&&i.E5&&"gU"!==i.E5)if(i.E5 3F 3N)1j(1a n=0;n<i.E5.1f;n++)1c!==ZC.1d(i.FE[n])&&(i.E5[n]=i.E5[n].1F("%id",a.A.K),i.E5[n]=i.E5[n].1F("%4u",a.K.1F(a.A.K+"-3a-","")),a.U6(e,i.E5[n],i.FE[n]));1u i.E5=i.E5.1F("%id",a.A.K),i.E5=i.E5.1F("%4u",a.K.1F(a.A.K+"-3a-","")),a.U6(e,i.E5,i.FE)}1u a.SC("9A",t)},ZC.A4("."+a.K+"-1H-1N").4g(ZC.2L?"4I":"6K 76",a.oU).4g(ZC.2L?"5T":"6m 7F",a.oR).4g(ZC.2L?"6l":ZC.1b[48],a.oO),ZC.2L||ZC.A4("."+a.K+"-1H-1N").4g("3J",a.UU).4g("9A",a.UU));1n n(e){1j(1a t=(e.9G||e.2X.id).1F(/\\-\\-\\d+/g,"").1F(a.K+"-2S-","").1F("-bN-1N","").1F("-1N",""),i=-1,n=1c,l=0,r=a.FH.1f;l<r;l++)if(a.FH[l]&&""+a.FH[l].H4==""+t){i=l,n=a.FH[l]3F QY?a.FH[l].BD:a.FH[l];1p}if(!n&&e.2X.bP("1T-kN"))1l{hd:e.2X.id,kN:!0,ev:e};if(-1===i)1l 1c;1a o={hd:t,hc:i,2H:n.o.2H?1:0,2S:{id:t,2Y:i,2o:n.DI,x:n.iX,y:n.iY,1J:n.DN,wW:n.o["3f-1P"],2W:n.D,1s:n.I,1M:n.F,2e:n.AI,wN:n.L2,2f:n.AA,9S:n.JT},ev:e};1j(1a s in n.o)n.o.88(s)&&"1T-"===s.2x(0,5)&&(o[s]=n.o[s]);1l o}1n l(n){1a l,r=n.9G||n.2X.id;if(r===a.K+"-5D-1N"||r===a.K+"-7T-1N"||r===a.K+"-7k-1N"){1a o=1c,s=-1;1R(l=r.1F(a.K+"-","").1F("-1N","")){1i"5D":o=a.J3,s=-1;1p;1i"7T":o=a.KQ,s=-2;1p;1i"7k":o=a.N0,s=-3}1l{1J:"3a-"+l,dq:o.K,eI:s,1D:o.AP,1H:{id:o.K,2Y:s,1D:o.AP},ev:n}}if(-1===r.1L("-1z")||-1===r.1L("-1P")&&-1===r.1L("-1Q")){if(-1!==r.1L("-1U-3C-")){e=r.1F(a.K+ZC.1b[35],"").1F("-1U-3C-1N",""),t=e.2p("-2r-");1a C=a.AY.A7[ZC.1k(t[0])].FR(ZC.1k(t[1]));1l C?{1J:ZC.1b[17],dq:"wQ"+t.2M("1b"),3V:ZC.1k(t[0]),5Q:ZC.1k(t[1]),1D:C.AE,1H:{id:"wQ"+t.2M("1b"),1D:C.AE},ev:n}:1c}e=r.1F(a.K+"-1H-","").1F("-1N","");1j(1a A=-1,Z=1c,c=0,p=a.BW.1f;c<p;c++)if(""+a.BW[c].H4==""+e){A=c,Z=a.BW[c];1p}if(i=-1===A?"":a.BW[A].AP,-1===A)1l 1c;1a u={1J:"1H",dq:e,eI:A,1D:i,2H:Z.o.2H?1:0,1H:{id:e,2Y:A,2o:Z.DI,x:Z.iX+Z.BJ,y:Z.iY+Z.BC,1s:Z.I,1M:Z.F,1D:i},ev:n};1j(1a h in Z.o)Z.o.88(h)&&"1T-"===h.2x(0,5)&&(u[h]=Z.o[h]);1l u}e=r.1F(a.K+"-","").1F("-1N","");1a 1b=(t=e.2p("-"))[1].2p("1b"),d=0;2===1b.1f?d=ZC.1k(1b[1]):3===1b.1f&&(d=ZC.1k(1b[2]));1a f,g=t[0].1F(/1b/g,"-"),B=a.BK(g);1l-1!==r.1L("-1P")?(l="1z-1P",f="16Y"+t[1].1F("7E",""),i=B.BW[d]||B.W[d],"16X"===f&&(i=B.M.AP)):(l="1z-1Q",f="16W"+t[1].1F("aI",""),i=B.E["yM"+d]||""),{1J:l,dq:f,eI:d,1z:g,1D:i,2H:B.o.2H||B.o.1P&&B.o.1P.2H?1:0,1H:{id:f,2Y:d,1D:i},ev:n}}},K1.5m.SC=1n(e,t){ZC.2E(1g.HW(),t),t.ev=ZC.A4.BX(t.ev),ZC.AN.C2("16U"+e,1g.A,t)},K1.5m.SB=1n(e,t){ZC.2E(1g.HW(),t),t.ev=ZC.A4.BX(t.ev),ZC.AN.C2("16T"+e,1g.A,t)},K1.5m.OF=1n(e){1a t,i,a=1g;if("3e"==1w e){1a n={},l=e.2p(":");if(2===l.1f){n.1J=l[0];1j(1a r=0,o=(l=l[1].2p(/\\s|,|;/)).1f;r<o;r++){1a s=l[r].2p("=");n[s[0]]=s[1]}}e=n}1a C=[-1,-1];1R(a.E.Fs=!0,e.1J){1i"1z":1a A,Z,c,p="",u=-1,h=1c;if(1c!==ZC.1d(t=e.8C)&&(p=t),1c!==ZC.1d(t=e.2Y)&&(u=ZC.1k(t)),1c!==ZC.1d(t=e[ZC.1b[9]])&&(h=ZC.1k(t)),i=1c,""===p&&(p=ZC.1b[50]),i=a.BK(p))1R(i.H1&&-1!==u?c=i.H1(u):i.AX&&(1c!==ZC.1d(h)?c=i.AX(h):-1!==u&&(c=i.AX(i.W[u]))),a.AJ.3w){1i"7g":1i"8E":A=c[0],Z=c[1];1p;1i"xy":"k"===i.AF?(A=c,Z=i.iY,"2q"===i.B7&&(Z+=i.F)):"v"===i.AF&&(Z=c,A=i.iX,"5B"===i.B7&&(A+=i.I));1p;1i"yx":"k"===i.AF?(Z=c,A=i.iX,"5B"===i.B7&&(A+=i.I)):"v"===i.AF&&(A=c,Z=i.iY,"2q"===i.B7&&(Z+=i.F))}C=[A,Z,{3G:!0}];1p;1i"2r":1a 1b=-1,d=1c,f=1c,g=1c,B=1c;1c!==ZC.1d(t=e.1B)&&(g=t),1c!==ZC.1d(t=e.3V)&&(g=t),1c!==ZC.1d(t=e.4T)&&(B=t);1a v=a.HO(g,B);1c!==ZC.1d(t=e.2Y)&&(1b=ZC.1k(t)),1c!==ZC.1d(t=e[ZC.1b[9]])&&(d=t),1c!==ZC.1d(t=e.h7)&&(f=t);1a E=1c;if(v){if(-1!==1b&&v.S[1b])E=v.FR(1b,3);1u if(1c!==ZC.1d(d)||1c!==ZC.1d(f)){1a b,m;if(i=v.C.BK(v.BL[0]),1c!==f&&1c===d&&v.S.1f>16S&&i.FG&&"5C"===i.FG.o.1J&&1c!==(b=ZC.kG(f,v,0,v.S.1f-1))&&(E=v.FR(b,3)),!E)1j(b=0,m=v.S.1f;b<m;b++)v.S[b]&&(1c!==d&&v.S[b].AE==d&&(E=v.FR(b,3)),1c!==f&&1c!==ZC.1d(v.S[b].BY)&&v.S[b].BY==f&&(E=v.FR(b,3)))}E&&(E.2I(),C=E.OF(e),!E.JG&&ZC.DQ(C[0],a.Q.iX,a.Q.iX+a.Q.I)&&ZC.DQ(C[1],a.Q.iY,a.Q.iY+a.Q.F)&&(E.JG=!0),E.JG&&E.AL&&E.A.AL&&E.C.E["1B"+E.A.L+".2h"]||(C=[-1,-1])),v.E["z-9V"]&&(C[2].z=v.E["z-9V"])}}1l 1c!==ZC.1d(e.x)&&(C[0]=ZC.1k(e.x)),1c!==ZC.1d(e.y)&&(C[1]=ZC.1k(e.y)),1c!==ZC.1d(t=e["2b-x"])&&(C[0]+=ZC.1k(t)),1c!==ZC.1d(t=e["2b-y"])&&(C[1]+=ZC.1k(t)),C},1o.pl=1n(e,t,i){2g.cQ("zc-5R")&&(e="zc-5R"),"3e"==1w(i=i||{})&&(i=3h.1q(i));1a a,n,l,r,o,s,C,A,Z,c,p,u,h,1b,d=!(1c!==ZC.1d(i.3S)&&!ZC.2t(i.3S)),f=!!i.4N&&ZC.2t(i.4N),g=1o.7c(e);if(g)1R(t){1i"o0":if((a=g.C7(i[ZC.1b[3]]))&&i.1T){if(Z=(A=i.1T 3F 3N)?[]:{},ZC.2E(i.1T,Z),n=i.1J||"1H",A)1j(o=0,s=Z.1f;o<s;o++)n=i.1J||Z[o].kS||"1H",a.o[n+"s"]||(a.o[n+"s"]=[]),f&&(Z[o]["3f-1P"]=!1),a.o[n+"s"].1h(Z[o]);1u a.o[n+"s"]||(a.o[n+"s"]=[]),f&&(Z["3f-1P"]=!1),a.o[n+"s"].1h(Z);d&&(a.O7(),a.PV(f))}i.5H&&"1n"==1w i.5H&&i.5H(i);1p;1i"pO":if(a=g.C7(i[ZC.1b[3]]),i["1O"]&&(i.2o=i["1O"]),a&&(i.id||i.2o||i.6h)){n=i.1J||"1H",C=a.o[n+"s"]||[],l=i.id?"3e"==1w i.id?[i.id]:i.id:[],r=i.2o?"3e"==1w i.2o?[i.2o]:i.2o:[],c=!1;1a B=[];1j(o=C.1f-1;o>=0;o--)(1c!==ZC.1d(C[o].id)&&-1!==ZC.AT(l,C[o].id)||1c!==ZC.1d(C[o].2o)&&-1!==ZC.AT(r,C[o].2o)||1c!==ZC.1d(C[o]["1O"])&&-1!==ZC.AT(r,C[o]["1O"])||i.6h&&C[o].6h===i.6h)&&(1c!==ZC.1d(C[o].id)&&B.1h(C[o].id),C.6u(o,1),c=!0);1j(o=0;o<B.1f;o++)ZC.P.ET([a.K+"-1H-"+B[o]+"-5c",a.K+"-1H-"+B[o]+"-1v-5c",a.K+"-2S-"+B[o]+"-5c",a.K+"-2S-"+B[o]+"-1v-5c",a.K+"-2S-"+B[o]+"-bN-5c",a.K+"-2S-"+B[o]+"-bN-1v-5c"]);c&&d&&(a.O7(),a.PV(f))}i.5H&&"1n"==1w i.5H&&i.5H(i);1p;1i"16R":if(i["1O"]&&(i.2o=i["1O"]),(a=g.C7(i[ZC.1b[3]]))&&i.1T){a.E["2J.dA"]=[],n=i.1J||"1H",C=a.o[n+"s"]||[],1b="1H"===n?a.BW:a.FH,Z=(A=i.1T 3F 3N)?[]:{},ZC.2E(i.1T,Z),c=!1;1a v=!0,E=1n(e,t){1a i,l,r,o=a.XT[e.id||""],s=!1;if(o&&("1H"===o.2S?(r=a.BW[o.bO],9d.cj&&3===9d.cj(e).1f&&1c!==ZC.1d(e.x)&&1c!==ZC.1d(e.y)&&(r.iX=e.x,r.iY=e.y,s=!0)):((r=a.FH[o.bO]).BD&&r.BD.o["3f-1P"]&&(v=!1),"3A"===o.2S?9d.cj&&3===9d.cj(e).1f&&1c!==ZC.1d(e.x)&&1c!==ZC.1d(e.y)&&(r.BD?(r.BD.iX=e.x,r.BD.iY=e.y):(r.iX=e.x,r.iY=e.y),s=!0):"1y"===o.2S&&9d.cj&&2===9d.cj(e).1f&&1c!==ZC.1d(e.2W)&&(r.BD?r.BD.D=e.2W:r.D=e.2W,s=!0))),s||a.E["2J.dA"].1h(e.id),ZC.2E(e,t),1c!==ZC.1d(e.8P)){1a C=1c;if("1H"===n){1j(i=0,l=a.BW.1f;i<l;i++)if(a.BW[i].H4===e.id){C=a.BW[i];1p}}1u if("2S"===n)1j(i=0,l=a.FH.1f;i<l;i++)if(a.FH[i].H4===e.id){C=a.FH[i]3F QY?a.FH[i].BD:a.FH[i];1p}1a A=a.M7,Z={};if(ZC.2E(e,Z),1c!==ZC.1d(Z.x)&&(Z.x+=a.iX),1c!==ZC.1d(Z.y)&&(Z.y+=a.iY),1c!==ZC.1d(Z.2W))1j(i=0,l=Z.2W.1f;i<l;i++)1c!==ZC.1d(Z.2W[i])&&(Z.2W[i][0]+=a.iX,Z.2W[i][1]+=a.iY,1c!==ZC.1d(Z.2W[i][2])&&(Z.2W[i][2]+=a.iX),1c!==ZC.1d(Z.2W[i][3])&&(Z.2W[i][3]+=a.iY));Z.8P=1c;1a p=1m E8(C,Z,ZC.1k(e.8P.oQ||"fc"),ZC.1k(e.8P.Fd||"0"),E8.RR[ZC.1k(e.8P.9M||"0")],1n(){1c!==ZC.1d(e.8P.6i)&&e.8P.6i.4x()});a.QE=!0,2v.5I(1n(){A.2Q(p)},33)}c=!0};if(A){1a b=!1,m=!1;1j(o=0,s=Z.1f;o<s;o++){if(1c!==ZC.1d(Z[o].kS)&&(C=a.o[Z[o].kS+"s"]),C)1j(p=0,u=C.1f;p<u;p++)1c!==ZC.1d(Z[o].id)&&1c!==ZC.1d(C[p].id)&&C[p].id===Z[o].id&&E(Z[o],C[p]);1c!==ZC.1d(Z[o].8P)?b=!0:m=!0,m&&b&&(ZC.dp=v,a.PK())}}1u if(i.6h)1j(p=0,u=C.1f;p<u;p++)C[p].6h===i.6h&&(Z.id=C[p].id,E(Z,C[p]));1u if(i.2o)1j(p=0,u=C.1f;p<u;p++)C[p].2o===i.2o&&(Z.id=C[p].id,E(Z,C[p]));1u 1j(e=Z.id||i.id,p=0,u=C.1f;p<u;p++)1c!==ZC.1d(C[p].id)&&1c!==ZC.1d(e)&&C[p].id===e&&(Z.id=e,E(Z,C[p]));ZC.dp=v,!c||!d&&a.QE||a.QE||(a.O7(),a.PV(f))}i.5H&&"1n"==1w i.5H&&i.5H(i);1p;1i"16Q":(a=g.C7(i[ZC.1b[3]]))&&(a.O7(),a.PV(f)),i.5H&&"1n"==1w i.5H&&i.5H(i);1p;1i"16P":if(i["1O"]&&(i.2o=i["1O"]),l=[],(a=g.C7(i[ZC.1b[3]]))&&i.2o){n=i.1J||"1H",C=a.o[n+"s"]||[];1a K=i.2o 3F 3N?i.2o:[i.2o];1j(o=0,s=C.1f;o<s;o++)-1===ZC.AT(K,C[o].2o)&&-1===ZC.AT(K,C[o]["1O"])||1c===ZC.1d(C[o].id)||l.1h(C[o].id)}1l l;1i"ul":1i"ui":1a D={x:"iX",y:"iY",1s:"I",1M:"F",1r:"C0",iB:"B8",cV:"AZ",gs:"BU",gq:"AQ",gu:"A0",gg:"AC",2e:"AI",1J:"DN",1D:"AP",6M:"DF",6F:"KZ",ug:"ER",km:"BJ",ko:"BC"};if(a=g.C7(i[ZC.1b[3]]),n=i.1J||"1H","ul"===t&&"1H"!==n||"ui"===t&&"2S"!==n)1l 1c;if(e=i.id||"",a&&""!==e){1b=[],"1H"===n?1b=a.BW:"2S"===n&&(1b=a.FH);1a F=1c;1j(o=0,s=1b.1f;o<s;o++)1b[o].H4===e&&(F=1b[o]);if(F){1a I={};if("2S"===n){if(F.M)1j(h in I.1H={},D)I.1H[h]=F.M[D[h]];F.BD&&(F=F.BD)}1j(h in D)I[h]=F[D[h]];1l I}}1l 1c;1i"17K":1o.en="5h",i.4E&&"7M"===i.4E&&(1o.en="7M");1p;1i"15e":ZC.bK=!1,i.4E&&"2K"===i.4E&&(ZC.bK=!0)}1l 1c},K1.5m.u8=1n(){1a e,t,i=1g,a=0;1j(e=0,t=i.BL.1f;e<t;e++)"k"===i.BL[e].AF&&i.o[i.BL[e].BE]&&i.o[i.BL[e].BE][ZC.1b[5]]&&(a=ZC.BO(a,i.o[i.BL[e].BE][ZC.1b[5]].1f));1j(e=0,t=i.AY.A7.1f;e<t;e++)1c!==ZC.1d(i.o[ZC.1b[11]][e])&&i.o[ZC.1b[11]][e][ZC.1b[5]]&&(a=ZC.BO(a,i.o[ZC.1b[11]][e][ZC.1b[5]].1f));1l a},K1.5m.UQ=1n(){1a e,t=1g;if(t.HT)1j(1a i=t.u8(),a=0,n=t.BL.1f;a<n;a++)"k"===t.BL[a].AF&&(t.BL[a].D8?(e=(t.BL[a].F-t.BL[a].A6-t.BL[a].BV)/ZC.1k(t.HT["1X-9O"]),t.BL[a].OT=ZC.BO(0,t.BL[a].F-i*e)):(e=(t.BL[a].I-t.BL[a].A6-t.BL[a].BV)/ZC.1k(t.HT["1X-9O"]),t.BL[a].OT=ZC.BO(0,t.BL[a].I-i*e)),ZC.2t(t.HT["94-1z"])&&(t.BL[a].OT=0),t.BL[a].A6=t.BL[a].oL+t.BL[a].OT,t.A.E[t.BL[a].BE+"-bG-2b-4c"]=t.BL[a].A6,t.BL[a].X=ZC.BO(0,t.BL[a].A1-t.HT["1X-9O"]+1),t.BL[a].GV())},K1.5m.ok=1n(){1a s=1g,G,MW,ws;if(s.E["6o-7t"]&&(2v.ik(ZC.eR[s.K]),4s s.E["6o-7t"]),s.HT){1a P1=ZC.1k(s.HT.ea);if(P1=P1>=50?P1:5L*P1,"lL"===s.HT.1J)"79"===s.HT.lv?ZC.eR[s.K]=2v.5I(1n(){s.A.MO(s),ZC.ZZ(1n(){s.A.2y(s.K,s.oD)})},P1):"gH"===s.HT.lv&&ZC.gH&&(s.H.SN[s.K]?"lg"===s.HT.9M&&(ZC.eR[s.K]=2v.5I(1n(){s.H.SN[s.K].8n("1o.gE")},P1)):(ws=1m rL(s.HT.3R,"1o"),ws.un=1n(){ws.8n("1o."+s.HT.1J),ws.8n("1o."+s.HT.9M),ws.8n("1o.gE")},ws.uv=1n(e){"9t"===s.MK&&(s.A.MO(s),s.MK="lL",ZC.ZZ(1n(){1o.3p(s.A.K,"b3",{4u:s.K,1T:e.1T,16N:!0})}))},s.H.SN[s.K]=ws));1u if("bG"===s.HT.1J&&1c!==ZC.1d(s.HT.3R)){if(1c!==ZC.1d(s.HT.dH)){1a OK=s.BT("k");if(OK.1f>0&&(ZC.P.ET(s.K+"-dH-t"),OK[0].OT>0)){1a M5=1m DP(s);s.A.B9.2y(M5.o,"("+s.AF+").cI.dH"),M5.1C(s.HT.dH),M5.1q(),M5.AL&&(OK[0].D8&&M5.F<=OK[0].OT||!OK[0].D8&&M5.I<=OK[0].OT)&&(M5.K=s.K+"-dH-t",M5.IP=ZC.AK(s.A.K+"-1D-1v"),OK[0].D8?(M5.F>OK[0].OT&&(M5.AP="",M5.1q()),M5.iX=s.Q.iX,M5.iY=OK[0].AR?s.Q.iY:s.Q.iY+s.Q.F-OK[0].OT,M5.I=s.Q.I,M5.F=OK[0].OT):(M5.I>OK[0].OT&&(M5.AP="",M5.1q()),M5.iX=OK[0].AR?s.Q.iX+s.Q.I-OK[0].OT:s.Q.iX,M5.iY=s.Q.iY,M5.I=OK[0].OT,M5.F=s.Q.F),M5.Z=M5.C6=ZC.AK(s.K+"-3z-ml-0-c"),M5.1t())}}1a gF=s.HT.lv,tq=ZC.1k(s.HT["l8-hm"]),tU=ZC.1k(s.HT["8M-hm"]),sD=ZC.2t(s.HT.hH),lk=!0;1c!==ZC.1d(s.HT["dJ-1T"])&&(lk=ZC.2t(s.HT["dJ-1T"]));1a ng=1n(KL){1j(1a U3=7u("("+KL+")"),i,A5,sZ=U3 3F 3N?U3:[U3],r=0,ud=sZ.1f;r<ud;r++){1a DG=sZ[r];1j(i=0,A5=s.BL.1f;i<A5;i++)if("k"===s.BL[i].AF){1a BE=s.BL[i].BE;1c!==ZC.1d(DG[BE])&&1c!==ZC.1d(s.o[BE])&&(1c===ZC.1d(s.o[BE][ZC.1b[5]])&&(s.H.o[ZC.1b[16]][s.L][BE][ZC.1b[5]]=[],s.o[BE][ZC.1b[5]]=[]),s.o[BE][ZC.1b[5]].1h(DG[BE]),!lk&&s.o[BE][ZC.1b[5]].1f>ZC.1k(s.HT["1X-9O"])&&s.o[BE][ZC.1b[5]].6u(0,1),s.H.o[ZC.1b[16]][s.L][BE][ZC.1b[5]].1h(DG[BE]),(s.o[BE][ZC.1b[5]].1f>tq||1===s.MH[1])&&(s.H.o[ZC.1b[16]][s.L][BE][ZC.1b[5]]=[],s.o[BE][ZC.1b[5]]=[],s.H.E["3a"+s.L+".3H"]&&(s.H.E["3a"+s.L+".3H"].4t=1c,s.H.E["3a"+s.L+".3H"].4p=1c),s.IG&&(s.IG.3m(),ZC.P.IM(ZC.AK(s.K+"-1Z-x-c"),s.A.AB,s.iX,s.iY,s.I,s.F,s.K),ZC.A4("#"+s.K+"-1Z-x-3r").3q(),ZC.A4("#"+s.K+"-1Z-x-2U").3q()),s.ID&&(s.ID.3m(),ZC.P.IM(ZC.AK(s.K+"-1Z-y-c"),s.A.AB,s.iX,s.iY,s.I,s.F,s.K),ZC.A4("#"+s.K+"-1Z-y-3r").3q(),ZC.A4("#"+s.K+"-1Z-y-2U").3q())),ZC.t9&&sD&&ZC.AN.hH.1h("1o.1z."+s.K+"."+BE,""+DG[BE]))}1j(i=0,A5=s.AY.A7.1f;i<A5;i++)if(1c!==ZC.1d(s.o[ZC.1b[11]][i])){1a hM=1c;1c!==ZC.1d(G=DG["1B-"+i])?hM=G:1c!==ZC.1d(G=DG["1B"+i])&&(hM=G),"xy"===s.AJ.3w||"yx"===s.AJ.3w?(s.H.o[ZC.1b[16]][s.L][ZC.1b[11]][i][ZC.1b[5]].1h(hM),!lk&&s.H.o[ZC.1b[16]][s.L][ZC.1b[11]][i][ZC.1b[5]].1f>ZC.1k(s.HT["1X-9O"])&&s.H.o[ZC.1b[16]][s.L][ZC.1b[11]][i][ZC.1b[5]].6u(0,1)):s.H.o[ZC.1b[16]][s.L][ZC.1b[11]][i][ZC.1b[5]]=[hM],ZC.t9&&sD&&(G=DG["1B"+i],"4d"==1w G&&(G=G.2M("###")),ZC.AN.hH.1h("1o.1B."+s.K+".1B"+i,""+G)),(s.o[ZC.1b[11]][i][ZC.1b[5]].1f>tq||1===s.MH[1])&&(ZC.AN.C2("16O",s.A,s.HW(),DG),s.H.o[ZC.1b[16]][s.L][ZC.1b[11]][i][ZC.1b[5]]=[])}MW=s.u8()}("9t"===s.MK||s.GB)&&(1===s.MH[1]&&(s.MH[1]=0),(MW<=tU||0===tU)&&(s.MK="bG",ZC.ZZ(1n(){ZC.AK(s.A.K+"-46")&&(ZC.AN.C2("16M",s.H,s.HW(),s.o),s.1q(),s.3k(!0),s.UQ(),s.1t(!0,!0))})))};if("79"===gF||"js"===gF){1a E5=s.HT.3R;ZC.eR[s.K]=2v.5I(1n(){if(1===s.MH[0]||1===s.MH[1])if(s.A.MO(s),"79"===gF){1a F0=["eU-3e"===s.A.N6?"eV="+1A.d6():"",1o.hy?"jS="+s.H.AB:""].2M("&");ZC.A4.a9({1J:"bY",3R:E5,ej:1n(e){s.A.S9.1T||"79-eX"!==s.A.N6||e.cC(ZC.1b[45],"cB, 8I cr dU 6R:6R:6R dY")},1T:F0,s9:"1D",4J:1n(){},aD:1n(e){ng(e)}})}1u if("()"===E5.2x(E5.1f-2)||"7y:"===E5.2x(0,11))4O{1a EH=E5.1F("7y:","").1F("()","");7u(EH)&&7u(EH).4x(s,1n(e){ng(e)},s.HW())}4M(e){}},P1)}1u"gH"===gF&&ZC.gH&&(s.H.SN[s.K]?"lg"===s.HT.9M&&(ZC.eR[s.K]=2v.5I(1n(){s.H.SN[s.K].8n("1o.gE")},P1)):(ws=1m rL(s.HT.3R,"1o"),ws.un=1n(){ws.8n("1o."+s.HT.1J),ws.8n("1o."+s.HT.9M),ws.8n("1o.tu"),"lg"===s.HT.9M&&ws.8n("1o.gE")},ws.uv=1n(e){1!==s.MH[0]&&1!==s.MH[1]||ng(e.1T)},s.H.SN[s.K]=ws))}}},1o.rq=1n(e,t,i){1a a;2g.cQ("zc-5R")&&(e="zc-5R"),"3e"==1w(i=i||{})&&(i=3h.1q(i));1a n=1o.7c(e);if(n){1a l=n.C7(i[ZC.1b[3]]);1R(t){1i"16Z":l.MH[1]=1,0===l.MH[0]&&ZC.ZZ(1n(){l.1q(),l.3k(!0),l.UQ(),l.1t(!0,!0)});1p;1i"170":1l l.HT.ea;1i"171":ZC.AN.C2("172",n,l.HW()),l.o.cI=l.o.cI||{},l.o.cI.ea=i.ea||1;1p;1i"mu":1===l.MH[0]&&(ZC.AN.C2("16V",n,l.HW()),l.MH[0]=0,1c!==ZC.1d(a=n.SN[l.K])&&a.8n("1o.mu"));1p;1i"tu":0===l.MH[0]&&(ZC.AN.C2("16K",n,l.HW()),l.MH[0]=1,1c!==ZC.1d(a=n.SN[l.K])&&a.8n("1o.tu"),ZC.ZZ(1n(){l.1q(),l.3k(!0),l.UQ(),l.1t(!0,!0)}))}}1l 1c},ZC.AN.ox=1n(e){1j(1a t={},i=[],a=0,n=(i="4d"==1w e?e:3h.1q(e)).1f;a<n;a++)if(1c!==ZC.1d(e=i[a])){t["p"+a]={};1a l=[];if("4d"==1w e)l=e;1u if("3e"==1w e&&/\\d+\\-\\d+/.5O(e)){1a r=e.2p("-");if(2===r.1f){l=[];1j(1a o=ZC.1k(r[0]);o<=ZC.1k(r[1]);o++)l.1h(o)}}1u l=[e];1j(1a s=0,C=l.1f;s<C;s++)t["p"+a]["n"+l[s]]=!0}1l t},K1.5m.sH=1n(){1a e,t=1g;1c!==ZC.1d(e=t.o.aL)&&(t.CW=ZC.AN.ox(e),t.o.aL=1c)},1o.t8=1n(e,t,i){1a a,n,l,r,o,s,C,A,Z;2g.cQ("zc-5R")&&(e="zc-5R"),"3e"==1w(i=i||{})&&(i=3h.1q(i));1a c=1o.7c(e);if(c)1R(t){1i"16v":if(n=c.C7(i[ZC.1b[3]])){1j(n.CW={},l=0,r=n.AY.A7.1f;l<r;l++)n.K6[l]=!1;n.HK=!0,n.eM(),n.JU(!0,!0)}1p;1i"16y":if(n=c.C7(i[ZC.1b[3]])){1j(s=[],l=0,r=n.AY.A7.1f;l<r;l++)if(s[l]=1c,1c!==ZC.1d(n.CW["p"+l])){1a p=[];1j(C in n.CW["p"+l])n.CW["p"+l].88(C)&&n.CW["p"+l][C]&&p.1h(ZC.1k(C.1F("n","")));s[l]=p}1l s}1l{};1i"16z":1a u={};s=[],1c!==ZC.1d(a=i.aL)&&(u=ZC.AN.ox(a)),(n=c.C7(i[ZC.1b[3]]))&&(n.CW=u,n.HK=!0,n.eM(),n.JU(!0,!0));1p;1i"9F":1i"pz":1a h=[],1b=1n(e){1a i=!1;1c!==ZC.1d(a=e.9L)&&(i=ZC.2t(a));1a n=c.C7(e[ZC.1b[3]]);if(n){1j(l=0,r=n.AY.A7.1f;l<r;l++)n.K6[l]=!1;1a s=1c,p=1c;if(1c!==ZC.1d(a=e.3V))if("4d"==1w a)s=a;1u if("3e"==1w a&&/\\d+\\-\\d+/.5O(a)){if(2===(o=a.2p("-")).1f)1j(s=[],Z=ZC.1k(o[0]);Z<=ZC.1k(o[1]);Z++)s.1h(Z)}1u s=[a];if(1c!==ZC.1d(a=e.4T)){1a u=[];1j(u="4d"==1w a?a:[a],Z=0;Z<u.1f;Z++){1a 1b=n.HO(1c,u[Z]);1b&&(s||(s=[]),s.1h(1b.L))}}if(1c!==ZC.1d(a=e.5Q))if("4d"==1w a)p=a;1u if("3e"==1w a&&/\\d+\\-\\d+/.5O(a)){if(2===(o=a.2p("-")).1f)1j(p=[],Z=ZC.1k(o[0]);Z<=ZC.1k(o[1]);Z++)p.1h(Z)}1u p=[a];if(1c===ZC.1d(s))1j(s=[],l=0,r=n.AY.A7.1f;l<r;l++)s.1h(l);1j(l=0,r=s.1f;l<r;l++){1a d=s[l];if(n.AY.A7[d])if(1c===ZC.1d(n.CW["p"+d])&&(n.CW["p"+d]={}),1c===ZC.1d(p))1j(C=0,A=n.AY.A7[d].S.1f;C<A;C++)"9F"===t?i&&n.CW["p"+d]["n"+C]?4s n.CW["p"+d]["n"+C]:n.CW["p"+d]["n"+C]=!0:"pz"===t&&4s n.CW["p"+d]["n"+C];1u 1j(C=0,A=p.1f;C<A;C++)"9F"===t?i&&n.CW["p"+d]["n"+p[C]]?4s n.CW["p"+d]["n"+p[C]]:n.CW["p"+d]["n"+p[C]]=!0:"pz"===t&&4s n.CW["p"+d]["n"+p[C]]}-1===ZC.AT(h,n)&&h.1h(n)}};if(i 3F 3N)1j(Z=0;Z<i.1f;Z++)1b(i[Z]);1u 1b(i);1j(Z=0;Z<h.1f;Z++)h[Z].HK=!0,h[Z].eM(),h[Z].JU(!0,!0)}1l 1c},K1.5m.NB=1n(){1a e=1g;e.AJ["3d"]&&1w ZC.AM!==ZC.1b[31]&&(ZC.AM.fK=2.5*ZC.BO(e.I,e.F),ZC.AM.DZ=e.Q.iX+e.Q.I/2,ZC.AM.E0=e.Q.iY+e.Q.F/2,ZC.AM.FS=ZC.1k(e.EX.5v),ZC.AM.DZ+=e.EX["2b-x"],ZC.AM.E0+=e.EX["2b-y"])},K1.5m.p7=1n(){1a e,t,i=1g;if(i.AJ["3d"]&&1w ZC.AM!==ZC.1b[31]){if(i.A.B9.2y(i.EX,"3a.3d-7j"),i.A.B9.2y(i.EX,i.AF+".3d-7j"),1c!==ZC.1d(e=i.o[ZC.1b[26]])&&ZC.2E(e,i.EX),"7e"===i.AF&&i.o.1B&&i.o.1B.xV){1a a=ZC.5l(ZC.1Y(i.o.1B.xV),1,3);i.EX[ZC.1b[27]]=25+(a-1)/2*(i.AJ["x-2f-1X"]-i.AJ["x-2f-2j"])}1a n=["2f","5v",ZC.1b[27],ZC.1b[28],ZC.1b[29],"3H","2b-x","2b-y"];1j(t=0;t<n.1f;t++)i.EX[n[t]]=ZC.1Y(i.EX[n[t]]);1a l=["2f",ZC.1b[27],ZC.1b[28],ZC.1b[29]];1j(t=0;t<l.1f;t++)ZC.DQ(i.EX[l[t]],i.AJ[l[t]+"-2j"],i.AJ[l[t]+"-1X"])||(i.EX[l[t]]=i.AJ[l[t]+"-2j"]);i.EX.7G=ZC.2t(i.EX.7G)}},K1.5m.RP=1n(){1a e,t,i,a,n=1g;3!==1o.d4&&(1o.d4=n.EX.7G?1:2);1a l=n.CG.eL.1f;1j(e=0;e<l;e++)(t=n.CG.eL[e]).Bc(),n.EX.7G?3===1o.d4?n.CG.XD[e]=[ZC.1Y(t.gw.4C(1))*t.MI[2],e]:n.CG.XD[e]=[[ZC.1Y(t.SX.4C(1))*t.MI[0],ZC.1Y(t.n5.4C(1))*t.MI[1],ZC.1Y(t.gw.4C(1))*t.MI[2],ZC.1Y(t.gx.4C(1))],e]:n.CG.XD[e]=[[ZC.1Y(t.SX.4C(1))*t.MI[0],ZC.1Y(t.mg.4C(1))*t.MI[1],ZC.1Y(t.mb.4C(1))*t.MI[2],ZC.1k(t.G0)],e];n.CG.XD.3X(n.CG.Gi);1a r=1m DS(n);1j(i=n.H.2P()?n.H.mc():ZC.AK(n.K+"-4l-bl-c"),a=ZC.P.E6(i,n.H.AB),e=0;e<l;e++){1a o=[],s=n.CG.XD[e][1],C=(t=n.CG.eL[s]).D.1f;if(C>0){1j(1a A=0;A<C;A++)o.1h(t.D[A].E9);o.1h(t.D[0].E9),r.7z(n),r.K=n.K+"-16s-"+(""!==t.K?t.K:ZC.c6++),r.1S(t.N),r.CX=!1,r.Z=i,r.9g(1),r.D=o,r.DN="4B",r.9g(2),r.1t()}}1a Z=[];1j(1a c in n.CG.SR)Z.1h([c,n.CG.SR[c].9S]);Z.3X(1n(e,t){1l t[1]-e[1]});1j(1a p=0;p<Z.1f;p++){1a u=n.CG.SR[Z[p][0]];ZC.CN.2I(a,u.1I),ZC.CN.1t(a,u.1I,u.2W)}},K1.5m.T9=1n(){if(!1o.4F.dZ){1a e,t=1g;if(t.BB){if(t.BB.SH&&t.L!==t.A.AH.1f-1&&!t.BB.o.e9)1l;t.BB.Z=t.BB.C6=t.H.2P()?t.H.mc("1v"):ZC.AK(t.K+"-1V-c"),t.BB.1t(),-1===ZC.AT(t.H.KY,ZC.1b[41])&&(t.QW=1n(e){1a i,a;if(!ZC.3o){t.A8&&t.A.A8&&t.A8.AL&&t.A.A8.eK(e);1a n=e.9G||e.2X.id,l=ZC.1k(n.1F(t.K,"").1F("-1V-7E","").1F("-1V-aI","").1F("-1N","").1F("-1Q","")),r=t.AY.A7[l];if(r.FY&&(t.BB.X4||r.IE)&&r.S.1f)1j(i=0,a=r.S.1f;i<a;i++)1c!==r.S[i]&&r.S[i].JG&&r.FR(i).HZ("5V");ZC.3o=!0;1a o=ZC.AT(t.AY.LU,l);t.BB.e7(o),ZC.3o=!1;1a s=t.AY.A7[l].TJ(e);t.E["1V-8h-2Y"]=l,ZC.AN.C2("16A",t.A,s)}},t.PY=1n(e){ZC.3o||t.A8&&t.A.A8&&t.A8.AL&&t.A.A8.gT(e)},t.RH=1n(e){if(!ZC.3o){t.A8&&t.A.A8&&t.A8.AL&&t.A.A8.eJ(e),t.L8(),ZC.3o=!0,t.BB.e7(-1),ZC.3o=!1;1a i=ZC.7P(t.E["1V-8h-2Y"],0),a=t.AY.A7[i].TJ(e);ZC.AN.C2("16C",t.A,a)}},t.9C=1n(e){t.BB.DC&&"1Z-y"===t.BB.DC.AF&&(e.6X(),t.BB.DC.Gv(e))},t.SV=1n(i){if(t.E.oc=!0,!(ZC.3o||(1o.SO(i),i.9u>1))){1a a,n,l,r=i.9G||i.2X.id,o=ZC.2t(t.BB.BR.o.nu);ZC.2L&&t.H.A8&&t.H.A8.5e();1a s="1P";-1!==r.1L("-1V-aI")&&(s="1Q"),t.L8(),i.6X();1a C=t.BB.IK;"1P"===s?C=t.BB.RA:"1Q"===s&&(C=t.BB.Q1),t.A.KE&&(C="3q"),t.E["1V-8e-7U"]=s;1a A=ZC.1k(r.1F(t.K+"-1V-7E","").1F(t.K+"-1V-aI","").1F("-1N",""));if(t.o[ZC.1b[11]]&&t.o[ZC.1b[11]][A]){if(1c!==ZC.1d(e=t.o[ZC.1b[11]][A]["1V-1P"])){1a Z=e.3R||"",c=e.2X||"";""!==Z&&t.U6(i,Z,c)}t.o[ZC.1b[11]][A].2h=!0}1a p,u,h,1b=t.AY.A7[A].TJ(i);1R(1b.2h=ZC.2t(t.E["1B"+A+".2h"]),ZC.AN.C2("16F"+s+"16G",t.A,1b),C){2q:1p;1i"5e":1i"3q":if(i.Fl){1a d=0;1j(a=0,n=t.AY.A7.1f;a<n;a++)if(a!==A&&(l=++d===n-1,t.PA({"bS-1V":o,JU:l,3V:a,"9L-8h":C}),t.BB.SH))1j(p=0,u=t.H.AH.1f;p<u;p++)(h=t.H.AH[p]).BB&&h.BB.SH&&h.BB.eS===t.BB.eS&&h.K!==t.K&&h.PA({"bS-1V":!0,JU:l,3V:a,"9L-8h":C})}1u if(t.PA({"bS-1V":o,JU:1,3V:A,"9L-8h":C}),t.BB.SH)1j(p=0,u=t.H.AH.1f;p<u;p++)(h=t.H.AH[p]).BB&&h.BB.SH&&h.BB.eS===t.BB.eS&&h.K!==t.K&&h.PA({"bS-1V":!0,JU:1,3V:A,"9L-8h":C})}"5e"===C&&t.E.Fs&&(t.O7(),t.PV())}},ZC.A4("."+t.K+"-1V-1P-1N").4g("6m 4I",t.SV).4g("fh",t.9C).4g("av",t.9C),ZC.A4("."+t.K+"-1V-1Q-1N").4g("6m 4I",t.SV).4g("fh",t.9C).4g("av",t.9C),ZC.A4("#"+t.K+"-1V-a0").4g("fh",t.9C).4g("av",t.9C),ZC.2L||(ZC.A4("."+t.K+"-1V-1P-1N").4g(ZC.P.BX("76"),t.QW).4g(ZC.P.BX("7F"),t.RH).4g(ZC.P.BX(ZC.1b[48]),t.PY),ZC.A4("."+t.K+"-1V-1Q-1N").4g(ZC.P.BX("76"),t.QW).4g(ZC.P.BX("7F"),t.RH).4g(ZC.P.BX(ZC.1b[48]),t.PY)))}}};1O Dv 2k K1{2G(e){1E(e);1a t=1g;t.AF="1c",t.AJ.3u=!0,t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!0}}1O Du 2k K1{2G(e){1E(e);1a t=1g;t.AF="rz",t.CG=1m VI,t.AJ["3d"]=!0,t.AJ["x-2f-2j"]=-fd,t.AJ["x-2f-1X"]=fd,t.AJ["y-2f-2j"]=-fd,t.AJ["y-2f-1X"]=fd,t.AJ["z-2f-2j"]=-fd,t.AJ["z-2f-1X"]=fd,1o.d4=3}3k(){1E.3k(),1g.CG.3k()}1t(){1a e=1g;1E.1t(),e.PK(),e.RP(),e.bX(),e.JS(),-1===ZC.AT(e.H.KY,ZC.1b[41])&&e.Q7()}}1O NP 2k K1{2G(e){1E(e);1a t=1g;t.AF="xy",t.AJ.3u=!0,t.AJ.3w="xy"}F8(e){1R(e){1i"x":1l 1m TF(1g);1i"y":1l 1m TE(1g)}}O1(){1a e,t=1g,i=t.F8("x",ZC.1b[50]);1j(i.BE=ZC.1b[50],i.K=t.K+"-1z-x",t.BL.1h(i),e=2;e<50;e++)if(1c!==ZC.1d(t.o["1z-x-"+e])){1a a=t.F8("x","1z-x-"+e);a.L=e,a.BE="1z-x-"+e,a.K=t.K+"-1z-x-"+e,t.BL.1h(a)}1a n=t.F8("y",ZC.1b[51]);1j(n.BE=ZC.1b[51],n.K=t.K+"-1z-y",t.BL.1h(n),e=2;e<50;e++)if(1c!==ZC.1d(t.o["1z-y-"+e])){1a l=t.F8("y","1z-y-"+e);l.L=e,l.BE="1z-y-"+e,l.K=t.K+"-1z-y-"+e,t.BL.1h(l)}1E.O1()}}1O sS 2k NP{2G(e){1E(e);1a t=1g;t.AF="1y",t.AY=1m oT(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!0,t.AJ["4V-1Z"]=!0}}1O sF 2k NP{2G(e){1E(e);1a t=1g;t.AF="1N",t.AY=1m ps(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!0,t.AJ["4V-1Z"]=!0}}1O Dg 2k NP{2G(e){1E(e);1a t=1g;t.AF="bQ",t.AJ.3w="yx",t.AY=1m Gh(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!1,t.AJ["4V-1Z"]=!0}F8(e){1R(e){1i"x":1l 1m VC(1g);1i"y":1l 1m VD(1g)}}}1O Dr 2k NP{2G(e){1E(e);1a t=1g;t.AF="c2",t.AJ.3w="yx",t.AY=1m Gs(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!1,t.AJ["4V-1Z"]=!0}F8(e){1R(e){1i"x":1l 1m VC(1g);1i"y":1l 1m VD(1g)}}}1O jq 2k NP{2G(e){1E(e);1a t=1g;t.AF="5x",t.AY=1m kO(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!0,t.AJ["4V-1Z"]=!0}F8(e,t){1R(e){1i"x":1a i=1E.F8(e,t);1l i.DJ=!0,i;1i"y":1l 1E.F8(e,t)}}}1O jn 2k NP{2G(e){1E(e);1a t=1g;t.AF="6b",t.AJ.3w="yx",t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!1,t.AJ["4V-1Z"]=!0,t.AY=1m kM(t)}F8(e){1R(e){1i"x":1a t=1m VC(1g);1l t.DJ=!0,t;1i"y":1l 1m VD(1g)}}}1O sc 2k NP{2G(e){1E(e);1a t=1g;t.AF="9f",t.AY=1m lG(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!0,t.AJ["4V-1Z"]=!0}F8(e,t){1R(e){1i"x":1a i=!1;if(1g.o[ZC.1b[11]])1j(1a a=0;a<1g.o[ZC.1b[11]].1f;a++)if(1g.o[ZC.1b[11]][a]&&1g.o[ZC.1b[11]][a].1J&&-1!==ZC.AT(["2U","5x","f5","8k","7Y","6T"],1g.o[ZC.1b[11]][a].1J)){1a n=(1g.o[ZC.1b[11]][a].3z||"1z-x,1z-y").2p(",");-1!==ZC.AT(n,t)&&(i=!0)}1a l=1E.F8(e,t);1l l.DJ=i,l;1i"y":1l 1E.F8(e,t)}}}1O Dn 2k NP{2G(e){1E(e);1a t=1g;t.AF="gZ",t.AJ.3w="yx",t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!1,t.AJ["4V-1Z"]=!0,t.AY=1m lG(t)}F8(e,t){1R(e){1i"x":1a i=1m VC(1g),a=!1;if(1g.o[ZC.1b[11]])1j(1a n=0;n<1g.o[ZC.1b[11]].1f;n++)if(1g.o[ZC.1b[11]][n]&&1g.o[ZC.1b[11]][n].1J&&-1!==ZC.AT(["6b","81"],1g.o[ZC.1b[11]][n].1J)){1a l=(1g.o[ZC.1b[11]][n].3z||"1z-x,1z-y").2p(",");-1!==ZC.AT(l,t)&&(a=!0)}1l i.DJ=a,i;1i"y":1l 1m VD(1g)}}}1O sd 2k sc{2G(e){1E(e);1a t=1g;t.AF="aM",t.AY=1m lG(t),t.CG=1m VI,t.AJ["3d"]=!0,t.AJ[ZC.1b[56]]=!1,t.AJ[ZC.1b[55]]=!1,t.AJ["4V-1Z"]=!0}3k(){1E.3k(),1g.CG.3k()}1t(){1a e=1g;1E.1t(),e.RP(),e.bX(),e.PK(),e.FN.1f&&(e.CG.3k(),e.JS(),e.RP()),e.T9(),-1===ZC.AT(e.H.KY,ZC.1b[41])&&e.Q7()}}1O Dl 2k NP{2G(e){1E(e);1a t=1g;t.AF="6y",t.AY=1m Gy(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!0,t.AJ["4V-1Z"]=!0}}1O Dk 2k NP{2G(e){1E(e);1a t=1g;t.AF="8t",t.AJ.3w="yx",t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!1,t.AJ["4V-1Z"]=!0,t.AY=1m Gu(t)}F8(e){1R(e){1i"x":1l 1m VC(1g);1i"y":1l 1m VD(1g)}}}1O Fb 2k NP{2G(e){1E(e);1a t=1g;t.AF="5i",t.AY=1m Gg(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!0,t.AJ["4V-1Z"]=!0}}1O Ew 2k NP{2G(e){1E(e);1a t=1g;t.AF="6B",t.AJ.3w="yx",t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[56]]=!1,t.AJ["4V-1Z"]=!0,t.AY=1m Fu(t)}F8(e){1R(e){1i"x":1l 1m VC(1g);1i"y":1l 1m VD(1g)}}}1O u9 2k K1{2G(e){1E(e),1g.AF="3P",1g.AY=1m oY(1g)}NM(){1l""}F8(e){1R(e){1i"m":1l 1m YJ(1g);1i"v":1l 1m ZU(1g);1i"r":1l 1m rf(1g)}}O1(){1a e=1g,t=e.F8("m","1z"),i=e.F8("v",ZC.1b[52]),a=e.F8("r","1z-r");t.BE="1z",t.K=e.K+"-1z",e.o[ZC.1b[11]]&&e.o[ZC.1b[11]].1f&&e.o[ZC.1b[11]][0][ZC.1b[5]]&&(t.NN="1x"+e.o[ZC.1b[11]][0][ZC.1b[5]].1f),i.BE=ZC.1b[52],i.K=e.K+"-1z-v",a.BE="1z-r",a.K=e.K+"-1z-r",e.BL.1h(t,i,a),1E.O1()}qI(){-1!==ZC.AT(["2F","3L"],1g.H.AB)&&ZC.A4("#"+1g.K+" .zc-6v").5f(1n(){/\\-1B-\\d+\\-bl\\-\\d+\\-/.5O(1g.id)&&ZC.A4(1g).9i().5f(1n(){/\\-98\\-2R/.5O(1g.id)&&ZC.P.ET(1g)})})}}1O Ei 2k K1{2G(e){1E(e);1a t=1g;t.AF="8Y",t.AY=1m Fm(t)}NM(){1l""}F8(e){1R(e){1i"m":1l 1m YJ(1g)}}O1(){1a e=1g,t=e.F8("m","1z");t.BE="1z",t.K=e.K+"-1z",e.BL.1h(t),1E.O1()}}1O Es 2k K1{2G(e){1E(e);1a t=1g;if(t.AF="7g",t.AJ.3w="7g",t.AY=1m Gc(t),-1!==ZC.AT(t.A.K,"qE")){1j(1a i=1,a=0;a<t.A.MF.ex.1f;a++)i=ZC.BO(i,t.A.MF.ex[a][ZC.1b[5]].1f);i=1A.4b(2m/i).ai(),1c===ZC.1d(t.A.MF.1B)?t.A.MF.1B={7j:"1N"}:ZC.2E({7j:"1N"},t.A.MF.1B),1c===ZC.1d(t.A.MF["1z-k"])?t.A.MF["1z-k"]={7j:"3A",5F:"%v\\Er",6n:"0:Eq:"+i}:ZC.2E({7j:"3A",5F:"%v\\Er",6n:"0:Eq:"+i},t.A.MF["1z-k"],!0)}}NM(){1l""}F8(e){1a t=1g;1R(e){1i"m":1l 1m YJ(t);1i"k":1l 1m Cz(t);1i"v":1l 1m Cr(t)}}O1(){1a e=1g,t=e.F8("k","1z-k");t.BE="1z-k",t.K=e.K+"-1z-k",e.BL.1h(t);1a i=e.F8("v",ZC.1b[52]);i.BE=ZC.1b[52],i.K=e.K+"-1z-v",e.BL.1h(i);1a a=e.F8("m","1z");a.BE="1z",a.K=e.K+"-1z",e.BL.1h(a),1E.O1()}}1O Eo 2k jq{2G(e){1E(e);1a t=1g;t.AF="8k",t.AY=1m Fz(t),t.AJ[ZC.1b[55]]=!1}}1O Ep 2k jn{2G(e){1E(e);1a t=1g;t.AF="81",t.AJ.3w="yx",t.AY=1m Fy(t),t.AJ[ZC.1b[55]]=!1}}1O Ex 2k NP{2G(e){1E(e);1a t=1g;t.AF="5S",t.AY=1m Fw(t),t.AJ[ZC.1b[55]]=!1,t.AJ["4V-1Z"]=!0}UM(e){1a t=1g;if("v"===e){1a i=[];if(t.o[ZC.1b[11]]&&t.o[ZC.1b[11]].1f)1j(1a a=0;a<t.o[ZC.1b[11]].1f;a++)i.1h(t.o[ZC.1b[11]][a].1D||"16L "+(a+1));1l i}}F8(e){1R(e){1i"x":1a t=1m TF(1g);1l t.DJ=!0,t;1i"y":1a i=1m TE(1g);1l i.DJ=!0,i.1C({7h:1,"7A-7h":!0}),i}}}1O Ez 2k NP{2G(e){1E(e);1a t=1g;t.AF="aa",t.AY=1m Ft(t),t.AJ[ZC.1b[55]]=!1,t.AJ["4V-cK"]=!1,t.AJ["4V-1Z"]=!1}F8(e,t){1R(e){1i"x":1a i=1E.F8(e,t);1l i.DJ=!0,i;1i"y":1a a=1E.F8(e,t);1l a.DJ=!0,a}}UM(e){if("v"===e){1j(1a t=[],i=0;i<1g.o[ZC.1b[11]].1f;i++)t.1h("Fa "+(i+1));1l t}}1t(){1j(1a e=1g,t=0,i=e.BL.1f;t<i;t++)"v"===e.BL[t].AF&&(e.BL[t].AR=!e.BL[t].AR);1E.1t()}}1O EQ 2k NP{2G(e){1E(e);1a t=1g;t.AF="au",t.AY=1m Fk(t),t.AJ[ZC.1b[55]]=!1,t.AJ["4V-cK"]=!1,t.AJ["4V-1Z"]=!1}UM(e){if("v"===e){1j(1a t=[],i=0;i<1g.o[ZC.1b[11]].1f;i++)t.1h("Fa "+(i+1));1l t}}F8(e){1R(e){1i"x":1a t=1m VC(1g);1l t.DJ=!0,t;1i"y":1a i=1m VD(1g);1l i.DJ=!0,i}}}1O Fc 2k NP{2G(e){1E(e);1a t=1g;t.AF="7Y",t.AY=1m Fp(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[55]]=!1,t.AJ["4V-1Z"]=!0,t.AJ[ZC.1b[56]]=!0}F8(e,t){1R(e){1i"x":1a i=1E.F8(e,t);1l i.DJ=!0,i;1i"y":1l 1E.F8(e,t)}}}1O Ff 2k K1{2G(e){1E(e);1a t=1g;t.AF="8E",t.AJ.3w="8E",t.AY=1m Fo(t)}NM(){1l""}F8(e){1a t=1g;1R(e){1i"m":1l 1m YJ(t);1i"r":1l 1m Cn(t);1i"v":1l 1m ZU(t)}}O1(){1a e,t=1g,i=t.F8("m","1z");1j(i.BE="1z",i.K=t.K+"-1z",t.BL.1h(i),e=2;e<10;e++)if(1c!==ZC.1d(t.o["1z-"+e])){1a a=t.F8("m","1z-"+e);a.L=e,a.BE="1z-"+e,a.K=t.K+"-1z-"+e,t.BL.1h(a)}1a n=t.F8("r","1z-r");1j(n.BE="1z-r",n.K=t.K+"-1z-r",t.BL.1h(n),e=2;e<10;e++)if(1c!==ZC.1d(t.o["1z-r-"+e])){1a l=t.F8("r","1z-r-"+e);l.L=e,l.BE="1z-r-"+e,l.K=t.K+"-1z-r-"+e,t.BL.1h(l)}1E.O1()}tS(){1a e=1g;ZC.A4("#"+e.K+"-4l-bl-2").9i().5f(1n(){ZC.P.IM(1g,e.H.AB,e.iX,e.iY,e.I,e.F,e.K)})}}1O Ev 2k NP{2G(e){1E(e);1a t=1g;t.AF="5z",t.AY=1m Gw(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[55]]=!1,t.AJ["4V-1Z"]=!0,t.AJ[ZC.1b[56]]=!0}}1O Eg 2k NP{2G(e){1E(e);1a t=1g;t.AF="5z",t.AJ.3w="yx",t.AY=1m Gx(t),t.AJ[ZC.1b[23]]=!0,t.AJ[ZC.1b[55]]=!1,t.AJ["4V-1Z"]=!0,t.AJ[ZC.1b[56]]=!1}F8(e){1R(e){1i"x":1l 1m VC(1g);1i"y":1l 1m VD(1g)}}}1O Di 2k u9{2G(e){1E(e);1a t=1g;t.AF="7e",t.AY=1m Gt(t),t.CG=1m VI,t.AJ["3d"]=!0,t.AJ[ZC.1b[55]]=!1,t.AJ["x-2f-2j"]=15,t.AJ["x-2f-1X"]=75,t.AJ["y-2f-2j"]=0,t.AJ["y-2f-1X"]=0,t.AJ["z-2f-2j"]=0,t.AJ["z-2f-1X"]=0}3k(){1E.3k(),1g.CG.3k()}1t(){1a e=1g;1E.1t(),e.RP(),e.bX(),e.PK(),e.FN.1f&&(e.CG.3k(),e.JS(),e.RP()),e.T9(),-1===ZC.AT(e.H.KY,ZC.1b[41])&&e.Q7()}}1O Dj 2k jn{2G(e){1E(e);1a t=1g;t.AF="7o",t.AY=1m Gj(t),t.CG=1m VI,t.AJ["3d"]=!0,t.AJ[ZC.1b[56]]=!1,t.AJ[ZC.1b[55]]=!1,t.AJ["x-2f-2j"]=-20,t.AJ["x-2f-1X"]=20,t.AJ["y-2f-2j"]=-20,t.AJ["y-2f-1X"]=0}3k(){1E.3k(),1g.CG.3k()}1t(){1a e=1g;1E.1t(),e.RP(),e.bX(),e.PK(),e.FN.1f&&(e.CG.3k(),e.JS(),e.RP()),e.T9(),-1===ZC.AT(e.H.KY,ZC.1b[41])&&e.Q7()}}1O Dm 2k jq{2G(e){1E(e);1a t=1g;t.AF="6T",t.AY=1m Gn(t),t.CG=1m VI,t.AJ["3d"]=!0,t.AJ[ZC.1b[56]]=!0,t.AJ[ZC.1b[55]]=!1,t.AJ["4V-1Z"]=!0}3k(e,t){1E.3k(e,t),1g.CG.3k()}1t(){1a e=1g;1E.1t(),e.RP(),e.bX(),e.PK(),e.FN.1f&&(e.CG.3k(),e.JS(),e.RP()),e.T9(),-1===ZC.AT(e.H.KY,ZC.1b[41])&&e.Q7()}}1O Dw 2k sS{2G(e){1E(e);1a t=1g;t.AF="9c",t.AY=1m Eh(t),t.CG=1m VI,t.AJ["3d"]=!0,t.AJ[ZC.1b[56]]=!0,t.AJ[ZC.1b[55]]=!1,t.AJ["4V-1Z"]=!0}3k(e,t){1E.3k(e,t),1g.CG.3k()}1t(){1a e=1g;1E.1t(),e.RP(),e.bX(),e.PK(),e.FN.1f&&(e.CG.3k(),e.JS(),e.RP()),e.T9(),-1===ZC.AT(e.H.KY,ZC.1b[41])&&e.Q7()}}1O Ea 2k sF{2G(e){1E(e);1a t=1g;t.AF="8a",t.AY=1m Fh(t),t.CG=1m VI,t.AJ["3d"]=!0,t.AJ[ZC.1b[56]]=!0,t.AJ[ZC.1b[55]]=!1,t.AJ["4V-1Z"]=!0}3k(e,t){1E.3k(e,t),1g.CG.3k()}1t(){1a e=1g;1E.1t(),e.RP(),e.bX(),e.PK(),e.FN.1f&&(e.CG.3k(),e.JS(),e.RP()),e.T9(),-1===ZC.AT(e.H.KY,ZC.1b[41])&&e.Q7()}}1O Fn 2k K1{2G(e){1E(e);1a t=1g;t.AF="b9",t.AY=1m Ed(t)}NM(){1l""}F8(e){1R(e){1i"m":1l 1m YJ(1g)}}1q(){1a e=1g;1E.1q(),e.BB&&(e.BB.IK="3q",e.BB.RA="3q",e.BB.Q1="3q")}O1(){1a e=1g,t=e.F8("m","1z");t.BE="1z",t.K=e.K+"-1z",e.BL.1h(t),1E.O1()}}1O LS 2k I4{2G(e){1E(e);1a t=1g;t.C=e,t.H=t.C.A,t.A7=[],t.HV=1c,t.KF=[],t.K7=[],t.QB=!0,t.FA=1c,t.kZ=!0,t.ZK=[]}HM(){1l 1m II(1g)}1q(){1a e,t,i,a=1g;1j(a.K=a.A.K+"-cE",a.FA=1c,t=a.o.1f-1;t>=0;t--)1w a.o[t]===ZC.1b[31]&&a.o.6u(t,1);if(1c===ZC.1d(a.E["1B-3X"])&&(a.E["1B-3X"]=!1),a.o.1f>1){1j(t=0,i=a.o.1f;t<i;t++)1w a.o[t].6P===ZC.1b[31]&&(a.o[t].6P=t);1a n=[],l=[];1j(t=0,i=a.o.1f;t<i;t++)l[t]=t,n[t]={"z-2Y":a.o[t]["z-2Y"]||0};1j(1a r=!1;!r;)1j(r=!0,t=0,i=n.1f;t<i-1;t++){if(n[t]["z-2Y"]>n[t+1]["z-2Y"]){a.E["1B-3X"]=!0;1a o=n[t];n[t]=n[t+1],n[t+1]=o;1a s=l[t];l[t]=l[t+1],l[t+1]=s,r=!1}}a.LU=l}1u a.LU=[0];1j(a.A7=[],t=0,i=a.o.1f;t<i;t++){1a C="";a.A.o.1B&&1c!==ZC.1d(e=a.A.o.1B.1J)&&(C=e),1c!==ZC.1d(e=a.o[t].1J)&&(C=e);1a A=a.HM(C,t);A.OG=A.AF+"1B",A.L=t,A.JT=t,a.C.A.B9.2y(A.o,["("+A.AF+").1B"]),A.dk&&a.C.A.B9.2y(A.o,["("+A.dk+").1B"]),a.C.A.B9.2y(A.o,["("+A.AF+").1B.8P"]),1c!==ZC.1d(e=a.A.o.1B)&&A.1C(e),A.1C(a.o[t]),A.C9=a.A.C9,A.1q(),a.A7.1h(A)}1a Z={},c=[],p=[],u={},h={},1b=0,d=0;1j(t=0,i=a.A7.1f;t<i;t++)if(1c!==ZC.1d(a.A.A.E["g-"+a.A.L+"-p-"+t+".2h"])&&(a.C.E["1B"+t+".2h"]=a.A.A.E["g-"+a.A.L+"-p-"+t+".2h"]),!a.A7[t].HN&&(a.C.E["1B"+t+".2h"]||"5e"===a.C.8f())){a.A7[t].C9?(-1===(d=ZC.AT(p,a.A7[t].DV))&&(p.1h(a.A7[t].DV),d=p.1f-1),1c===ZC.1d(c[d])?c[d]=[t]:c[d].1h(t)):(p.1h(-1),d=p.1f-1,1c===ZC.1d(c[d])?c[d]=[t]:c[d].1h(t));1a f=a.A7[t].AF;if(a.A7[t].o.1J&&f!==a.A7[t].o.1J){1a g=f.1L("3d"),B=a.A7[t].o.1J.1L("3d");(-1===g&&-1!==B||-1===g&&-1===B)&&(f=a.A7[t].o.1J)}-1!==ZC.AT(["2U","dP","f5"],f)&&(f="v"+f),-1===ZC.AT(["5x","6b","8k","81","7Y","6T","7o"],f)||a.A7[t].HN||(1c===ZC.1d(u[f])&&(u[f]=[]),1c===ZC.1d(h[f])&&(h[f]=[]),a.A7[t].C9?(1c===ZC.1d(Z[a.A7[t].DV])?Z[a.A7[t].DV]=1:Z[a.A7[t].DV]++,-1===(1b=ZC.AT(h[f],a.A7[t].DV))&&(h[f].1h(a.A7[t].DV),1b=h[f].1f-1),1c===ZC.1d(u[f][1b])?u[f][1b]=[t]:u[f][1b].1h(t)):(h[f].1h(-1),1b=h[f].1f-1,1c===ZC.1d(u[f][1b])?u[f][1b]=[t]:u[f][1b].1h(t)))}if(a.KF=c,a.K7=u,a.XA)1j(1a v in a.XA)a.XA[v].3X();1j(a.l4=[],t=0;t<a.KF.1f;t++)a.l4.1h(a.KF[t][a.KF[t].1f-1])}1t(){1a e=1g;1n t(i){1a a=e.LU[i];(e.A7[a].I6||e.A7[a].E3.1f&&e.A.BI||"2a"!==e.A7[a].J2)&&(e.H.OE=!1),e.kZ=!0;1a n=e.C.8f();e.C.AJ["3d"]?e.C.E["1B"+a+".2h"]&&(e.A7[a].1t(),e.H.XN()):(e.C.E["1B"+a+".2h"]||"5e"===n)&&(1w e.C.E["1B-"+a+"-gy-pf"]!==ZC.1b[31]&&(e.A7[a].TX=0),e.A7[a].1t(),e.A7[a].TX=0,e.H.XN(),e.C.E["1B"+a+".2h"]||"5e"!==n||(e.C.E["1B"+a+".2h"]=!0,e.A.PA({3V:a,"bS-1V":!0}))),e.C.E["1B-"+a+"-gy-pf"]=!1,i<e.A7.1f-1?e.C.LV?ZC.ob[e.C.K]=2v.5I(1n(){t(i+1)},10):e.A7.1f<=100&&t(i+1):(!e.C.LV||e.C.LV&&e.kZ)&&e.g7()}if(e.HV=[],e.A7.1f>0)if(e.A7.1f>100&&!e.C.LV)1j(1a i=0;i<e.A7.1f;i++)t(i);1u t(0);1u e.g7()}g7(){1a e,t=1g;t.S2=1c,t.W4=1c;1j(1a i=0;i<t.C.BL.1f;i++)t.C.BL[i].ES=1c,t.C.BL[i].X5=1c;1n a(e){1a i=0,a=e.1L(ZC.1b[35]),n=e.1L("-2r-",a);1l-1!==a&&-1!==n&&(i=e.5y(a+14,n-a-14)),1w t.A7[i].E["z-9V"]!==ZC.1b[31]?t.A7[i].E["z-9V"]:i}(e=ZC.AK(t.C.A.K+"-3f"))&&!t.H.dC&&(-1===ZC.AT(["5i","6B","8k","81","7g","6T","7o","9f","aM","7e","gZ","17v"],t.C.AF)&&1!==1o.ny||t.HV.3X(1n(e,i){1l"7e"===t.C.AF?ZC.AN.N5(e)>ZC.AN.N5(i)?1:ZC.AN.N5(e)<ZC.AN.N5(i)?-1:0:a(e)>a(i)&&t.A.AJ["3d"]?1:a(e)<a(i)&&t.A.AJ["3d"]?-1:ZC.AN.N5(e)>ZC.AN.N5(i)?1:ZC.AN.N5(e)<ZC.AN.N5(i)?-1:0}),1o.3I.Gp?2v.5I(1n(){e.4o+=t.HV.2M("")},lT):e.4o+=t.HV.2M("")),t.F3=1c,t.D3=1c,t.C.Gq=[],t.A.g7()}}1O oT 2k LS{HM(){1l 1m QS(1g)}}1O ps 2k LS{HM(){1l 1m R7(1g)}}1O Gh 2k LS{HM(){1a e=1m QS(1g);1l e.OZ=!0,e}}1O Gs 2k LS{HM(){1a e=1m R7(1g);1l e.OZ=!0,e}}1O kO 2k LS{HM(){1l 1m QZ(1g)}}1O kM 2k LS{HM(){1l 1m R6(1g)}}1O lG 2k LS{HM(e){1a t=1g;1R(e){2q:1l 1m QS(t);1i"bQ":1a i=1m QS(t);1l i.OZ=!0,i;1i"4B":1a a=1m PG(t);1l a.kw=!0,a.dk="4B",a;1i"1N":1l 1m R7(t);1i"c2":1a n=1m R7(t);1l n.OZ=!0,n;1i"2U":1i"5x":1l 1m QZ(t);1i"6b":1l 1m R6(t);1i"6y":1l 1m PG(t);1i"8t":1l 1m PG(t,"8t");1i"5i":1l 1m S8(t);1i"6B":1l 1m S8(t,"6B");1i"7Y":1l 1m VZ(t);1i"5z":1l 1m UJ(t);1i"9c":1l 1m V0(t);1i"8a":1l 1m UW(t);1i"dP":1i"6T":1l 1m V3(t);1i"f5":1i"8k":1l 1m TU(t);1i"81":1l 1m TR(t)}}}1O Gy 2k LS{HM(){1l 1m PG(1g)}}1O 17w 2k LS{HM(){1a e=1m PG(1g);1l e.kw=!0,e.dk="4B",e}}1O Gu 2k LS{HM(){1l 1m PG(1g,"8t")}}1O Gg 2k LS{HM(){1l 1m S8(1g)}}1O Fu 2k LS{HM(){1l 1m S8(1g,"6B")}}1O oY 2k LS{2G(e){1E(e);1a t=1g;t.KO=[],t.PE=[],t.UC=[]}HM(){1l 1m WW(1g)}kC(e){1a t,i,a,n,l=1g;e&&(l.UC=[],l.PE=[]);1a r,o=l.A.BK("1z-r"),s=l.A.BK("1z"),C=.9,A=1;l.A7.1f>=10&&(A=1),l.A7.1f>=20&&(A=1.25),l.A7.1f>=30&&(A=1.5);1a Z=o.DL;1j(t=0,i=l.A7.1f;t<i;t++)1c!==ZC.1d(l.A7[t].o["3Q-2f"])&&(Z=l.A7[t].DL);1j(t=0,i=l.A7.1f;t<i;t++)if(l.C.E["1B"+t+".2h"]||"5e"===l.C.8f())1j(1a c=0,p=l.A7[t].S.1f;c<p;c++)if(l.A7[t].S[c]){l.YO["n"+c]=l.YO["n"+c]||[];1a u,h,1b=l.A7[t].S[c];1c===ZC.1d(l.PE[c])&&(l.PE[c]=Z),u=1c!==ZC.1d(n=l.A7[t].o[ZC.1b[1]])?ZC.1Y(n):l.PE[c],h=l.KO[c],1c!==ZC.1d(l.A7[t].o.hb)&&1c!==ZC.1d(l.A7[t].o.hb[c])&&(h=l.KO[c]=ZC.1Y(l.A7[t].o.hb[c])),a=0===h?u+o.EO*(1/i):0===1b.AE&&l.A7[t].TZ?u+o.EO*(.nR*l.KO[c])/h:u+o.EO*1b.AE/h,l.PE[c]=a,1b.B2=u,1b.BH=a;1a d=1b.F7(!0);if("4R"===d.o[ZC.1b[7]]&&d.AL){1a f=ZC.1k((u+a)/2);l.YO["n"+c][t]=f-Z,r=ZC.CV(s.I/2-A*d.I-d.DR-35,s.F/2-A*d.F-d.DR-15),C=ZC.CV(C,2*r/ZC.CV(s.I,s.F))}}if("7e"===l.A.AF&&(C*=.75),C=ZC.BO(.1,ZC.CV(.9,C)),"3i"===s.o["2e-7f"]&&(s.JQ=C),e)1j(1a g in l.YO)l.YO[g]=ZC.AO.Gf(l.YO[g],Z)}1q(){1a e=1g;e.A.o.1B&&"3i"===e.A.o.1B.3w&&(1c===ZC.1d(e.A.o.1B["3Q-2f"])&&(e.A.o.1B["3Q-2f"]=-90),e.o.3X(1n(e,t){1l t[ZC.1b[5]][0]-e[ZC.1b[5]][0]})),e.UC=[],e.KO=[],e.PE=[],e.YO={},1E.1q();1j(1a t=0,i=e.A7.1f;t<i;t++)1j(1a a=0,n=e.A7[t].S.1f;a<n;a++)e.A7[t].S[a]&&e.A7[t].S[a]&&(e.C.E["1B"+t+".2h"]||"5e"===e.C.8f())&&0===e.A7[t].S[a].AE&&e.A7[t].TZ&&(e.KO[a]+=.nR*e.KO[a]);e.kC()}}1O Fm 2k LS{2G(e){1E(e);1g.KO=[],1g.PE=[]}HM(){1l 1m UF(1g)}1q(){1a e=1g;e.KO=[],e.PE=[],1E.1q();1j(1a t,i=e.A.BK("1z"),a=i.iX+i.I/2,n=1,l=0,r=e.A7.1f;l<r;l++)if(e.C.E["1B"+l+".2h"]||"5e"===e.C.8f())1j(1a o=0,s=e.A7[l].S.1f;o<s;o++)if(e.A7[l].S[o]){1a C=e.A7[l].S[o];1c===ZC.1d(e.PE[o])&&(e.PE[o]=e.A7[l].DL);1a A=e.PE[o],Z=A+2m*C.AE/e.KO[o];e.PE[o]=Z,C.B2=A,C.BH=Z;1a c=C.F7(!0);if(c&&"in"!==c.o[ZC.1b[7]]){1a p=ZC.1k((A+Z)/2);t=((p>=0&&p<=90||p>=3U&&p<=2m?i.iX+i.I-(c.I+25):i.iX+(c.I+25))-a)/ZC.EF(p),n=ZC.CV(n,2*t/i.I),t=i.F/2-(c.F/2+10),n=ZC.CV(n,2*t/i.F)}}n=ZC.BO(.15,ZC.CV(.85,n)),"3i"===i.o["2e-7f"]&&(i.o["2e-7f"]=i.JQ=n)}}1O Gc 2k LS{2G(e){1E(e),1g.gO={}}HM(){1l 1m XW(1g)}1t(){1g.gO={},1E.1t()}}1O Fz 2k kO{HM(){1l 1m TU(1g)}}1O Fy 2k kM{HM(){1l 1m TR(1g)}}1O Fw 2k LS{HM(){1l 1m XV(1g)}}1O qc 2k LS{1q(){1a e,t,i,a,n,l=1g;1j(l.B4=ZC.3v,l.BQ=-ZC.3v,l.eu=[],l.SP=[],1E.1q(),e=0,t=l.A7.1f;e<t;e++)1j(i=0,a=l.A7[e].S.1f;i<a;i++)l.A7[e].S[i]&&(n=l.A7[e].S[i],1c===ZC.1d(l.SP[i])&&(l.SP[i]=ZC.3v),1c===ZC.1d(l.eu[i])&&(l.eu[i]=-ZC.3v),l.SP[i]=ZC.CV(l.SP[i],n.AE),l.eu[i]=ZC.BO(l.eu[i],n.AE));1j(e=0,t=l.A7.1f;e<t;e++)1j(i=0,a=l.A7[e].S.1f;i<a;i++)l.A7[e].S[i]&&(n=l.A7[e].S[i],l.B4=ZC.CV(l.B4,n.AE),l.BQ=ZC.BO(l.BQ,n.AE))}}1O Ft 2k qc{HM(){1l 1m VT(1g)}}1O Fk 2k qc{HM(){1l 1m VU(1g)}}1O Fp 2k LS{HM(){1l 1m VZ(1g)}}1O Fo 2k LS{HM(){1l 1m XQ(1g)}}1O Gw 2k LS{HM(){1l 1m UJ(1g)}}1O Gx 2k LS{HM(){1a e=1m UJ(1g);1l e.OZ=!0,e}}1O Gt 2k oY{HM(){1l 1m XO(1g)}}1O Gn 2k kO{HM(){1l 1m V3(1g)}}1O Gj 2k kM{HM(){1l 1m WV(1g)}}1O Eh 2k oT{HM(){1l 1m V0(1g)}}1O Fh 2k ps{HM(){1l 1m UW(1g)}}1O Ed 2k LS{2G(e){1E(e),1g.DW=[],1g.O8=[],1g.XZ=[]}HM(){1l 1m Z3(1g)}1t(){1a e,t,i,a,n,l,r,o,s,C,A=1g,Z=A.A.BK("1z"),c=ZC.CV(Z.GC,Z.GJ),p=-ZC.3v,u=ZC.CV(3,A.A7.1f);1j(e=0,t=u;e<t;e++)1j(C=A.A7[e].S,n=ZC.AN.P2(A.A7[e].o[ZC.1b[17]],A.A7[e].o),i=0,a=C.1f;i<a;i++)C[i].2I(),p=ZC.BO(p,C[i].AE),C[i].XC=ZC.AN.GH(A.A7[e].nX[i],n);1a h=c/(4*1A.5A(p/1A.PI));1n 1b(e,t){1a i=ZC.2l(e[0]-t[0]),a=ZC.2l(e[1]-t[1]);1l 1A.5A(i*i+a*a)}1a d,f,g,B=[],v=[],E=[],b=[],m=1c;1j(A.O8=[],e=0,t=u;e<t;e++)1j(B[e]||(B[e]=[]),v[e]||(v[e]=[],E[e]=[]),A.DW[e]||(A.DW[e]=[]),C=A.A7[e].S,b=A.A7[e+1]&&e+1<3?A.A7[e+1].S:A.A7[0].S,i=0,a=C.1f;i<a;i++){A.O8[i]||(A.O8[i]=[]),A.XZ[i]||(A.XZ[i]={}),C[i].X7=b[i].AE,0===e?(d=h*1A.5A(C[i].AE/1A.PI),f=h*1A.5A(C[i].X7/1A.PI),B[e][i]=h*ZC.AO.kJ(C[i].AE,C[i].X7,C[i].XC),v[e][i]=C[i].iX-ZC.BO(d,f)/2,E[e][i]=C[i].iY+C[i].F/4):1===e?(B[e][i]=h*ZC.AO.kJ(C[i].AE,C[i].X7,C[i].XC),v[e][i]=v[0][i]+B[0][i],E[e][i]=E[0][i],2===u&&(g=(v[0][i]-d-(Z.GJ-(v[1][i]+f)))/2,A.A7[e-1].S[i].iX-=g,v[1][i]-=g,A.DW[0][i].x-=g,A.O8[i][0][0]-=g,A.A7[e-1].S[i].iY=Z.iY+Z.GC/2,E[1][i]=Z.iY+Z.GC/2,A.DW[0][i].y=Z.iY+Z.GC/2)):2===e&&(B[e][i]=h*ZC.AO.kJ(C[i].AE,C[i].X7,C[i].XC),r=(B[0][i]*B[0][i]-B[1][i]*B[1][i]+B[2][i]*B[2][i])/(2*B[0][i]),v[e][i]=v[0][i]+r,o=1A.5A(B[2][i]*B[2][i]-r*r),E[e][i]=E[0][i]-o,3===u&&(g=(v[0][i]-d-(Z.GJ-(v[1][i]+f)))/2,A.A7[0].S[i].iX-=g,A.A7[1].S[i].iX-=g,A.DW[0][i].x-=g,A.DW[1][i].x-=g,A.O8[i][0][0]-=g,v[2][i]-=g)),C[i].iX=v[e][i]+Z.iX,C[i].iY=E[e][i],C[i].I=h*1A.5A(C[i].AE/1A.PI),C[i].F=h*1A.5A(C[i].AE/1A.PI),C[i].AI=h*1A.5A(C[i].AE/1A.PI),1c===ZC.1d(m)&&(m=C[i].AE/(1A.PI*C[i].AI*C[i].AI));1a K=h*1A.5A(C[i].AE/1A.PI),D=h*1A.5A(C[i].X7/1A.PI),F=K+D-B[e][i],I=(2*F*D-F*F)/(2*(K+D-F)),x=F-I;if(A.DW[e][i]={x:v[e][i],y:E[e][i],sz:C[i].AI,r1:K,r2:D,dv:x,ds:I},0===e?(o=1A.5A(K*K-(K-I)*(K-I)),A.O8[i].1h([v[0][i]+K-I,E[0][i]-o])):2===e&&(K=A.DW[1][i].r1,D=A.DW[1][i].r2,x=A.DW[1][i].dv,I=A.DW[1][i].ds,l=ZC.U4(1A.p8((E[1][i]-E[2][i])/B[1][i]))-ZC.U4(1A.kF((K-I)/K)),A.O8[i].1h([v[1][i]-K*ZC.EF(l)-g,E[1][i]-K*ZC.EL(l)]),K=A.DW[2][i].r1,D=A.DW[2][i].r2,x=A.DW[2][i].dv,I=A.DW[2][i].ds,l=ZC.U4(1A.p8((E[0][i]-E[2][i])/B[2][i]))-ZC.U4(1A.kF((D-x)/D)),A.O8[i].1h([v[0][i]+D*ZC.EF(l)-g,E[0][i]-D*ZC.EL(l)])),e===u-1)if(3===u){if(1c!==ZC.1d(A.A7[0].lP[i]))A.XZ[i].1N=A.A7[0].lP[i];1u{1a X=[-1],y=[-1];X[1]=1b(A.O8[i][0],A.O8[i][2]),X[2]=1b(A.O8[i][0],A.O8[i][1]),X[3]=1b(A.O8[i][2],A.O8[i][1]),y[1]=A.DW[0][i].sz,y[2]=A.DW[1][i].sz,y[3]=A.DW[2][i].sz;1a Y=.25*1A.5A((X[1]+X[2]+X[3])*(X[1]+X[2]-X[3])*(X[1]+X[3]-X[2])*(X[2]+X[3]-X[1]));1j(s=1;s<=3;s++)Y+=y[s]*y[s]*1A.p8(X[s]/(2*y[s]))-X[s]/4*1A.5A(4*y[s]*y[s]-X[s]*X[s]);A.XZ[i].1N=m*Y}A.DW[0][i].f0=ZC.AO.h6(A.DW[0][i].x,A.DW[0][i].y,A.DW[1][i].x,A.DW[1][i].y,A.DW[0][i].r1-(A.DW[0][i].dv+A.DW[0][i].ds)/2),A.DW[1][i].f0=ZC.AO.h6(A.DW[1][i].x,A.DW[1][i].y,A.DW[2][i].x,A.DW[2][i].y,-(A.DW[1][i].r1-(A.DW[1][i].dv+A.DW[1][i].ds)/2)),A.DW[2][i].f0=ZC.AO.h6(A.DW[2][i].x,A.DW[2][i].y,A.DW[0][i].x,A.DW[0][i].y,-(A.DW[2][i].r1-(A.DW[2][i].dv+A.DW[2][i].ds)/2)),A.XZ[i].xy=[(A.O8[i][0][0]+A.O8[i][1][0]+A.O8[i][2][0])/3,(A.O8[i][0][1]+A.O8[i][1][1]+A.O8[i][2][1])/3]}1u A.DW[0][i].f0=ZC.AO.h6(A.DW[0][i].x,A.DW[0][i].y,A.DW[1][i].x,A.DW[1][i].y,A.DW[0][i].r1-(A.DW[0][i].dv+A.DW[0][i].ds)/2),A.DW[1][i].f0=[-6H,-6H]}if(3===u)1j(e=0,t=u;e<t;e++)1j(n=ZC.AN.P2(A.A7[e].o[ZC.1b[17]],A.A7[e].o),1c!==ZC.1d(n[ZC.1b[12]])&&-1!==n[ZC.1b[12]]||(n[ZC.1b[12]]=0),i=0,a=A.A7[e].S.1f;i<a;i++)A.XZ[i].1N=ZC.AN.GH(A.XZ[i].1N,n);1E.1t()}}1O II 2k I4{2G(e){1E(e);1a t=1g;t.C=e.A,t.H=t.C.A,t.oa={},t.HN=!1,t.T0=3,t.kE=1,t.W=[],t.KJ={},t.S=[],t.AF="",t.dk=1c,t.IH=1c,t.RW=!1,t.J2="2a",t.OD="1B",t.VF=!0,t.T5=1c,t.TC=1c,t.U8={},t.A2=1c,t.G6=1c,t.PX=1c,t.PR=1c,t.BN=1c,t.L=-1,t.BL=[],t.C9=!1,t.KT="5h",t.DV=0,t.U=1c,t.O5=1c,t.A8=1c,t.JV=1c,t.AP=1c,t.K4=1c,t.pq=1c,t.ZI=1c,t.DT=-1,t.I3=-1,t.RN=1c,t.S4=1c,t.f3=!1,t.SS=2,t.dw=!1,t.TY="",t.f7="zW",t.CS=1c,t.aZ=1c,t.MY=1c,t.S5=1c,t.YI=!0,t.Y5=1c,t.YV=1,t.QV=!1,t.RS=!0,t.JT=0,t.YK=1c,t.T8=1c,t.QB=!0,t.K9=1c,t.Dq=1,t.j3=1,t.SI=[],t.JA=1c,t.ED=!1,t.T4=[],t.kH=-1,t.GB=!1,t.LG=0,t.JI=.6,t.LF=0,t.17E=0,t.17H=1c,t.TX=0,t.FV=1c,t.IW=!1,t.Z4=!0,t.o3=!1,t.YL=1,t.Z6=0,t.IE=!1,t.LH=!1,t.j2="2r",t.M1=!1,t.RE=-1,t.RX=0,t.QL=!1,t.GP=[1c,1c,1c,1c],t.PW="1y"}lD(){1a e,t=1g;1c!==ZC.1d(e=t.E["l-2n"])&&1c===ZC.1d(t.JW.2n)&&(t.C5=e),1c!==ZC.1d(e=t.E["bg-2n"])&&1c===ZC.1d(t.JW["2n-1N"])&&(t.o["2n-1N"]=e)}FR(e,t){1a i=1g;1l(1w t===ZC.1b[31]||!i.GP[t]&&i.GP[1])&&(t=1),e=5w(e,10),!i.IW||"xy"!==i.C.AJ.3w&&"yx"!==i.C.AJ.3w?i.S[e]:i.S[e]&&i.GP[t]?(i.GP[t].K=i.K+"-2r-"+e,i.GP[t].o={1U:i.W[e]},"3e"==1w i.W[e]&&(i.GP[t].hx=!0),i.GP[t].L=e,"1y"!==i.AF&&"1N"!==i.AF&&"bQ"!==i.AF&&"c2"!==i.AF||i.U?i.GP[t].1q():1c===i.S[e].BY&&1w i.C.E["1B-"+i.L+"-gy-pf"]===ZC.1b[31]||i.GP[t].1q(),"1y"===i.AF||"1N"===i.AF||"bQ"===i.AF||"c2"===i.AF?"xy"===i.C.AJ.3w?(1c!==i.S[e].BY?i.GP[t].iX=i.S[e].iX=i.B1.AX(i.S[e].BY):i.GP[t].iX=i.S[e].iX=i.B1.H1(e),i.C9&&"100%"===i.KT?i.GP[t].iY=i.S[e].iY=i.CH.AX(100*i.S[e].CM/i.A.FA[e]["%6j-"+i.DV]):i.GP[t].iY=i.S[e].iY=i.CH.AX(i.S[e].CM)):(1c!==i.S[e].BY?i.GP[t].iY=i.S[e].iY=i.B1.AX(i.S[e].BY):i.GP[t].iY=i.S[e].iY=i.B1.H1(e),i.C9&&"100%"===i.KT?i.GP[t].iX=i.S[e].iX=i.CH.AX(100*i.S[e].CM/i.A.FA[e]["%6j-"+i.DV]):i.GP[t].iX=i.S[e].iX=i.CH.AX(i.S[e].CM)):i.GP[t].RU(),i.GP[t].JG=i.S[e].JG,i.GP[t]):1c}TD(e,t){1a i=1g;i.K9[e]||(i.K9[e]=[]),(!i.IW||i.IW&&-1===ZC.AT(i.K9[e],t))&&i.K9[e].1h(t)}FZ(){1l 1m MG(1g)}nI(){1l{}}ND(){1l 1g.YQ("6P","kH","i"),1g.C.A.B9.ph(-1!==1g.kH?1g.kH:1g.L,1g.C.AF)}N7(){1a e=1g;if(e.BN[4]){1a t,i={};1j(1a a in e.BN[4])-1===(t=a.1L("."))?1c===ZC.1d(e.o[a])&&(i[a]=!0,e.o[a]=e.BN[4][a]):a.2x(0,t)===e.AF&&(1c===ZC.1d(e.o[a.2x(t+1)])||i[a.2x(t+1)])&&(e.o[a.2x(t+1)]=e.BN[4][a])}}HY(e,t){1a i,a,n=1g,l=!1,r="";if("2a"!==n.J2&&(n.C.K6[n.L]||n.C.KX)){1a o=!(e.E[ZC.1b[73]]||e.E[ZC.1b[72]]);n.C.CW["p"+n.L]&&n.C.CW["p"+n.L]["n"+e.L]?1o.3I.kI&&o&&n.U8[ZC.1b[73]]?(a=n.U8[ZC.1b[73]],l=!0):(r=ZC.1b[73],(a=1m DP(n)).1S(t),e.E[ZC.1b[73]]?a.OV=e.E[ZC.1b[73]]:a.OV=n.T5?n.T5.o:{}):"2a"!==n.OD&&("1B"===n.OD&&n.C.K6[n.L]||"3a"===n.OD&&n.C.KX)&&(1o.3I.kI&&o&&n.U8[ZC.1b[72]]?(a=n.U8[ZC.1b[72]],l=!0):(r=ZC.1b[72],(a=1m DP(n)).1S(t),e.E[ZC.1b[72]]?a.OV=e.E[ZC.1b[72]]:a.OV=n.TC?n.TC.o:{})),l||(a?(a.QB=!0,a.1q()):(a=1m DP(n)).1S(t),1o.3I.kI&&o&&""!==r&&(n.U8[r]=a))}1u(a=1m DP(n)).1S(t);1l 1c!==ZC.1d(i=n.T4[e.L])&&(0===e.A.E3.1f&&(e.A.E3=[{}]),"3e"==1w n.T4[e.L]?a.1C({"1W-1r":ZC.AN.JL(i,20)+" "+i,"1y-1r":i,"1G-1r":ZC.AN.JL(i,20)}):a.1C(n.T4[e.L]),a.1q()),a.Z=t.Z,a.C6=t.C6,a}BT(e){1a t=1g,i=[];if(1c!==ZC.1d(e))1j(1a a=0,n=t.BL.1f;a<n;a++){1a l=t.C.BK(t.BL[a]);l&&l.AF===e&&i.1h(t.BL[a])}1u i=t.BL;1l i}LT(){1a e=1g;1l{83:e.f7,"mJ-8O":e.RN,"6p-8O":e.S4,6p:e.DT,"1X-6p":e.I3,5M:e.dw,"5M-dS":e.TY,aA:e.f3,"aA-6p":e.SS}}1q(){1a e,t,i,a,n=1g;if(n.V6={},1E.1q(),n.K9={},1c!==ZC.1d(e=n.o.3z))1j(n.BL=e.2p(/,|;|\\s/),i=0;i<n.BL.1f;i++)n.BL[i]=ZC.V7(ZC.GT(n.BL[i]));if(n.C.o.1V&&n.C.o.1V["5V-1B"]&&(n.IE=!0),1c!==ZC.1d(n.o.iP)&&1c===ZC.1d(n.o.5M)&&(n.o.5M=n.o.iP),1c!==ZC.1d(n.o["3J-1Q"])&&1c===ZC.1d(n.o["aL-4E"])&&1c===ZC.1d(n.o["e8-1Q"])&&(n.o["aL-4E"]="aq",n.o["e8-1Q"]={},ZC.2E(n.o["3J-1Q"],n.o["e8-1Q"])),n.KT=n.C.KT,n.4A([["bS","HN","b"],["aA","f3","b"],[ZC.1b[25],"SS","ia"],[ZC.1b[12],"DT","ia"],["1X-6p","I3","i"],["2A","RS","b"],["po","C9","b"],["7H-1J","KT"],["pp","QV","b"],["1D","AP"],["2H-1D","K4"],["1V-1D","pq"],["tm","ZI"],["7H","DV","i"],["z-2Y","JT","i"],["7j","CS"],["4E","aZ"],["17p","YL","f"],["1X-d3","MY"],["1X-pu","S5"],["eQ-pu","YI","b"],["dE-7h","Y5","i"],["1Z-7h-iP","YV","i"],["3R","E5"],["2X","FE"],[ZC.1b[14],"S4"],[ZC.1b[13],"RN"],["5M","dw","b"],["83","f7"],["5M-dS","TY"],["8p-an","o3","b"],["Fg","SI"],["ay","T4"],["El","QL","b"],["5V","IE","b"],["5V-1V","LH","b"],["2N-4E","j2"],["9V-gf","VF","b"],["17g","M1","b"],["Ej-2Y","RE","i"],["Ej-2b","RX","i"],["Ek","GB","b"],["Ey","LG","i"],["oQ","JI","f"],["aL-4E","J2"],["6h-17o","RW","b"],["1W-4E","OD"],["178-6n","Z6","ia"]]),n.q8=n.QV,!n.E["Eu-1q"]){1a l;if(ZC.6z(n.T4),n.IE&&(1c===ZC.1d(n.C.o.1V)||1c===ZC.1d(n.C.o.1V["5V-1V"]))&&ZC.1d(1c===n.o["5V-1V"])&&(n.LH=n.IE),1c!==ZC.1d(e=n.o.8P))n.GB=!0,1c!==ZC.1d(t=e.Ey)&&(0===(t+"").1L("kR")&&1c!==ZC.1d(l=ZC.aH[(t+"").2x(10)])&&(t=l),n.LG=ZC.1k(t),0===n.LG&&(n.GB=!1)),1c!==ZC.1d(t=e.oQ)&&(0===(t+"").1L("kR")&&1c!==ZC.1d(l=ZC.aH[(t+"").2x(10)])&&(t=l),n.JI=ZC.1Y(t)),1c!==ZC.1d(t=e.Fd)&&(n.LB=ZC.1Y(t)),1c!==ZC.1d(t=e.9M)&&(0===(t+"").1L("kR")&&1c!==ZC.1d(l=ZC.aH[(t+"").2x(10)])&&(t=l),n.LF=ZC.1k(t)),1c!==ZC.1d(t=e.179)&&(0===(t+"").1L("kR")&&1c!==ZC.1d(l=ZC.aH[(t+"").2x(10)])&&(t=l),n.TX=ZC.1k(t)),1c!==ZC.1d(t=e.17a)&&(n.FV=t);1j(1a r in n.JI<10&&(n.JI*=5L),n.LB<10&&(n.LB*=5L),1w PO!==ZC.1b[31]&&(n.JI=ZC.BO(PO.UH,n.JI)),("8p"===n.aZ||1w PO===ZC.1b[31]||1o.4F.aH)&&(n.GB=!1),n.H.dC&&(n.GB=!1),-1!==ZC.AT(["1y","1N","5x","6b","7Y","6y","5i","7g","5S"],n.AF)&&("8p"===n.aZ?n.IW=!0:"5h"===n.aZ||n.GB||-1!==3h.5b(n.o).1L(\'"an"\')||-1!==3h.5b(n.o).1L(\'"js-c8"\')||0!==n.T4.1f||-1!==n.H.E.4G.1L(\'"7a"\')||-1!==n.H.E.4G.1L(\'"Fg"\')||"2a"!==n.J2?n.IW=!1:n.IW=!0),n.o)if("1T-"===r.2x(0,5)){1a o=r.2x(5);n.KJ[o]=n.o[r]}1a s=n.H.B9;if(n.IH=1m CY(n),n.IH.1C(n.o),s.2y(n.IH.o,v(ZC.1b[71])),n.IH.1C(n.o[ZC.1b[71]]),1c!==ZC.1d(n.o[ZC.1b[71]])||"1y"!==n.AF&&"1N"!==n.AF||(n.IH.AL=!1),n.IE&&(n.SE=1m CY(n),s.2y(n.SE.o,v("5V-3Y")),n.SE.1C(n.o),1c!==ZC.1d(e=n.o["5V-3Y"])&&n.SE.1C(e),1c===ZC.1d(n.SE.o.3K)&&(n.SE.o.3K=!0)),1c!==ZC.1d(e=n.o[ZC.1b[73]])&&(n.T5=1m CY(n),s.2y(n.T5.o,v(ZC.1b[73])),n.T5.1C(e)),1c!==ZC.1d(e=n.o[ZC.1b[72]])&&(n.TC=1m CY(n),s.2y(n.TC.o,v(ZC.1b[72])),n.TC.1C(e)),n.A2=1m CY(n),s.2y(n.A2.o,v("1Q")),s.2y(n.A2.o,v("1Q["+n.CS+"]")),n.A2.1C(n.o.1Q),"3i"===n.A2.o.1J){1a C=["3A","9j","Dt","Ef","Dh"];n.A2.o.1J=C[n.L%C.1f]}if(n.A2.1q(),(n.A2.E3.1f>0||n.T4.1f>0||n.A2.o["1v-3Y"])&&(n.Z4=!1),n.G6=1m CY(n),s.2y(n.G6.o,v("2N-1Q")),n.G6.1C(n.o.1Q),n.G6.1C(n.o["2N-1Q"]),1c!==ZC.1d(e=n.o["e8-1Q"])&&(n.PX=1m CY(n),s.2y(n.PX.o,v("e8-1Q")),n.PX.1C(e)),1c!==ZC.1d(e=n.o["1W-1Q"])&&(n.PR=1m CY(n),s.2y(n.PR.o,v("1W-1Q")),n.PR.1C(e)),n.IE&&(n.VO=1m CY(n),n.VO.1C(n.o.1Q),1c!==ZC.1d(e=n.o["5V-1Q"])&&(s.2y(n.VO.o,v("5V-1Q")),n.VO.1C(e))),"5h"!==n.aZ&&(n.T5||n.PX)&&(n.IW=!1),"8p"===n.aZ&&(n.IW=!0),n.A8=1m DP(n),n.o.2H&&n.o.2H.6d&&n.o.2H.6d.1L("2r")>-1?s.2y(n.A8.o,"("+n.AF+").2H[4N]"):s.2y(n.A8.o,n.AF+".2H"),n.A8.1C(n.o.2H),1c!==ZC.1d(e=n.o.4J)&&(n.JA=1m DS(n),s.2y(n.JA.o,v("4J")),n.JA.1C(e),1c===ZC.1d(n.JA.o[ZC.1b[21]])&&(n.JA.o[ZC.1b[21]]=4)),1c!==ZC.1d(e=n.o[ZC.1b[17]])){if(e 3F 3N)1j(n.U=1m CY(n),s.2y(n.U.o,v(ZC.1b[17])),1c!==ZC.1d(t=n.C.o.1B)&&n.U.1C(t[ZC.1b[17]]),n.U.1C(e[0]),e.1f>1&&(n.O5=[]),i=1;i<e.1f;i++)n.O5[i-1]=1m CY(n),s.2y(n.O5[i-1].o,v(ZC.1b[17])),1c!==ZC.1d(t=n.C.o.1B)&&n.O5[i-1].1C(t[ZC.1b[17]]),n.O5[i-1].1C(e[i]);1u n.U=1m CY(n),s.2y(n.U.o,v(ZC.1b[17])),1c!==ZC.1d(t=n.C.o.1B)&&n.U.1C(t[ZC.1b[17]]),n.U.1C(e);n.U.1q()}n.H.R0&&(n.AL=ZC.kV["g-"+n.C.L+"-p-"+n.L]);1a A=!1;1j(1w n.C.E["1B"+n.L+".2h"]===ZC.1b[31]&&(A=!0),A?n.C.E["1B"+n.L+".2h"]=!0:n.AL=n.C.E["1B"+n.L+".2h"],n.AL||A&&(n.C.E["1B"+n.L+".2h"]=!1),i=0,a=n.C.BL.1f;i<a;i++)1c!==ZC.1d(n.C.BL[i].o[ZC.1b[5]])?n.C.BL[i].TM=!0:-1!==ZC.AT(n.BL,n.C.BL[i].BE)&&("3q"===n.C.8f()||n.C.A.KE?n.AL&&n.C.E["1B"+n.L+".2h"]&&(n.C.BL[i].TM=!0):n.C.BL[i].TM=!0);1a Z,c=1c;if(n.K=n.A.K+"-1B-"+n.L,n.S=[],n.A.FA||(n.A.FA={}),-1!==n.AF.1L("1N")&&-1===n.AF.1L("3d")&&n.C9){n.A.XA||(n.A.XA={}),n.A.XA["s"+n.DV]||(n.A.XA["s"+n.DV]=[]);1a p=!1;if(1c!==ZC.1d(n.o[ZC.1b[5]]))1j(i=0,a=n.o[ZC.1b[5]].1f;i<a;i++)if("4d"==1w n.o[ZC.1b[5]][i]&&1c!==ZC.1d(n.o[ZC.1b[5]][i])){p=!0;1p}p&&(n.GB=!1,n.I6||0!==n.E3.1f||(n.IW=!0,-1===1o.3I.p6&&(n.C.V4=1)))}if(n.B1=n.C.BK(n.BT("k")[0]),n.CH=n.C.BK(n.BT("v")[0]),1c!==ZC.1d(n.o[ZC.1b[5]])&&""!==n.AF){n.W=n.o[ZC.1b[5]];1a u=1c;n.QC=[ZC.3v,-ZC.3v];1a h=[],1b=[],d=0;1j(i=0,a=n.W.1f;i<a;i++){1a f=!1;if(n.o["Dp-ts"]||(1c!==ZC.1d(n.W[i])&&"4d"==1w n.W[i]&&n.W[i].1f>1?(1c===ZC.1d(n.W[i][1])||"3e"==1w n.W[i][1]&&"gU"===n.W[i][1].5E())&&(f=!0):(1c===ZC.1d(n.W[i])||"3e"==1w n.W[i]&&"gU"===n.W[i].5E())&&(f=!0),"5S"===n.C.AF&&(f=!1)),f)n.S.1h(1c);1u{!n.IW||"xy"!==n.C.AJ.3w&&"yx"!==n.C.AJ.3w?c=n.FZ():n.GP[1]||("5i"===n.AF||"6y"===n.AF?n.GP[1]=c=n.FZ():(n.GP[0]=n.FZ(),n.GP[1]=c=n.FZ(),n.GP[2]=n.FZ(),n.GP[3]=n.FZ())),c.K=n.K+"-2r-"+i,"3e"==1w n.W[i]&&1o.Do&&(n.W[i]=ZC.1Y(n.W[i])),c.o={1U:n.W[i]},"3e"==1w n.W[i]&&(c.hx=!0),c.L=i,n.o["Dp-ts"]?(c.E.74=n.L,c.E.7w=c.L,c.K=n.K+"-2r-"+c.L,c.BY=n.W[i][0],c.AE=n.W[i][1]):c.1q(),(a<bJ||1o.3I.q5)&&1c!==ZC.1d(c.AE)&&2===(Z=c.AE.ai().2p(".")).1f&&(d=ZC.BO(d,Z[1].1f)),c.BY&&(1c!==u&&ZC.2l(c.BY-u)>0&&h.1h(ZC.2l(c.BY-u)),u=c.BY),n.A.XA=n.A.XA||{};1a g=n.A.XA["s"+n.DV];if(g&&(1c!==u?-1===ZC.AT(g,c.BY)&&g.1h(c.BY):-1===ZC.AT(g,i)&&g.1h(i)),!n.IW||"xy"!==n.C.AJ.3w&&"yx"!==n.C.AJ.3w)n.S.1h(c);1u{1a B={iX:c.iX,iY:c.iY,L:c.L,BY:c.BY,AE:c.AE,CM:c.AE,DK:c.DK,JG:c.JG};"5i"===n.AF&&(B.SY=c.SY),n.S.1h(B)}1c!==c.BY&&(n.QC[0]=1A.2j(n.QC[0],c.BY),n.QC[1]=1A.1X(n.QC[1],c.BY)),n.C.E["1B"+n.L+".2h"]&&(1o.3I.kW||"100%"===n.KT)&&n.C9&&(1c===ZC.1d(n.A.FA[i])?(n.A.FA[i]={},n.A.FA[i]["%6j-"+n.DV]=c.AE):1c===ZC.1d(n.A.FA[i]["%6j-"+n.DV])?n.A.FA[i]["%6j-"+n.DV]=c.AE:n.A.FA[i]["%6j-"+n.DV]+=c.AE),1o.3I.kW&&(1b.1h(c.AE),n.JV?(n.JV["%1B-1X-2Y"]=i,n.JV["%1B-7V"]+=c.AE,a<bJ&&(n.JV["%1B-6n"]+=","+c.AE)):n.JV={"%1B-2j-2Y":i,"%1B-1X-2Y":i,"%1B-7V":c.AE,"%1B-6n":c.AE},n.A.FA||(n.A.FA={}),n.AL&&(1c===ZC.1d(n.A.FA["%aT-"+i+"-"+n.DV+"-7V"])?(n.A.FA["%aT-"+i+"-"+n.DV+"-7V"]=c.AE,n.A.FA["%aT-"+i+"-"+n.DV+"-7H-1f"]=1):(n.A.FA["%aT-"+i+"-"+n.DV+"-7V"]+=c.AE,n.A.FA["%aT-"+i+"-"+n.DV+"-7H-1f"]+=1)))}}(n.W.1f<bJ||1o.3I.q5)&&n.JV&&1c!==ZC.1d(n.JV["%1B-7V"])&&2===(Z=n.JV["%1B-7V"].ai().2p(".")).1f&&ZC.1k(Z[1])>d&&(n.JV["%1B-7V"]=ZC.1Y(n.JV["%1B-7V"].4C(ZC.CV(20,d)))),1o.3I.kW?(n.JV&&(n.JV["%1B-er"]=n.JV["%1B-7V"]/n.W.1f,n.JV["%1B-er"]=ZC.1Y(n.JV["%1B-er"].4C(ZC.CV(20,d+2)))),1b.1f>0&&(n.JV["%1B-2j-1U"]=ZC.YH(1b),n.JV["%1B-1X-1U"]=ZC.dG(1b))):n.JV={"%1B-2j-2Y":0,"%1B-1X-2Y":n.W.1f,"%1B-7V":-1,"%1B-6n":"","%1B-er":-1,"%1B-2j-1U":-1,"%1B-1X-1U":-1},u&&h.1f>0&&(n.Dq=ZC.YH(h),n.j3=ZC.dG(h))}}1n v(e){1a t=["("+n.AF+").1B."+e];1l n.dk&&t.1h("("+n.dk+").1B."+e),t}}ag(e,t){1j(1a i=1g,a=i.C.Q,n=i.C.BI.B5,l=[],r=0,o=e.1f;r<o;r++)if(e[r]){"3L"===i.H.AB&&t&&(e[r][0]=e[r][0]/10,e[r][1]=e[r][1]/10);1a s=(e[r][0]-a.iX)/a.I,C=(e[r][1]-a.iY)/a.F,A=n.iX+n.AQ+s*(n.I-2*n.AQ),Z=n.iY+n.AQ+C*(n.F-2*n.AQ);l.1h([A,Z])}1u l.1h(1c);1l l}1t(){1a e=1g,t=e.C.Q.I;1R(e.C.AF){1i"6y":1i"5i":t=hj;1p;1i"6b":1i"7o":t=e.C.Q.F}1c===ZC.1d(e.MY)&&(e.MY=ZC.1k(t/4)),1c===ZC.1d(e.S5)&&(e.S5=ZC.1k(t/4)),e.Z4&&(e.HC=1c,e.HJ=1c,e.RJ=1c,e.QG=1c)}VR(e){1a t,i,a,n=1g;1j(t=0,i=n.S.1f;t<i;t++)n.S[t]&&(n.S[t].JG=!1);1a l=n.C.Q;if(n.RD=!1,n.FY=!0,n.UK=!1,a=0,n.C.OI||1w n.q8!==ZC.1b[31]&&(n.QV=n.q8),e)n.RD=!0,n.S5<n.S.1f&&(n.FY=!1);1u{if(n.B1.ED&&n.ED){1j(t=0,i=n.S.1f;t<i;t++)n.S[t]&&(n.B1.IU.1f>0||ZC.DQ(n.S[t].BY,n.B1.W[n.B1.X],n.B1.W[n.B1.A1]))&&a++;n.S5<a&&(n.FY=!1),a*n.YL>l.I&&(n.UK=!0),n.MY>=a&&(n.RD=!0)}1u n.MY>n.B1.A1-n.B1.X&&(n.RD=!0);n.Y=1,n.B1.ED&&n.ED||(a=n.B1.A1-n.B1.X,n.S5<a&&(n.FY=!1),a*n.YL>l.I&&(n.UK=!0),!n.QV&&a*n.YL>l.I&&(n.Y=ZC.BO(1,ZC.1k(a*n.YL/l.I)))),n.B1.ED&&n.ED&&(n.QV||a*n.YL>l.I&&(n.Y=ZC.BO(1,ZC.1k(a*n.YL/l.I)))),n.C.OI&&(n.QV=!1,n.Y*=n.YV)}1c!==ZC.1d(n.Y5)&&n.Y>n.Y5&&(n.Y=n.Y5)}OA(e){1a t,i,a,n=1g;1c!==ZC.1d(e)&&e||(e=!1),n.B1&&"2Z"===n.B1.C8&&(e=!0),n.VR(e);1a l=1c;if(e||n.M1)n.A.kZ=!1,1n u(e,t){1j(1a i=e;i<ZC.CV(e+t,n.S.1f);i++)n.S[i]?((l=n.FR(i)).Z=n.KG,l.1t(),l.JG=!0,n.S[i].JG=!0):"7g"===n.C.AF&&(i===n.S.1f-1?"1y"!==n.CS&&"1N"!==n.CS&&"5z"!==n.CS||ZC.CN.1t(n.QK,n,n.D):n.D.1h(1c));e+t<n.S.1f?n.C.LV?2v.5I(1n(){u(e+t,t)},10):u(e+t,t):n.C.LV&&n.L===n.A.A7.1f-1&&n.A.g7()}(0,ZC.d1||ZC.2L?q2:qf);1u{1a r="5x"!==n.AF&&"6b"!==n.AF;if(n.B1.ED&&n.ED){a=n.G8=n.HH=n.Y;1a o=!0,s=0,C=0;1j(t=0,i=n.S.1f;t<i;t+=a)r&&(i-t==1?(n.G8=a,n.HH=1):i-t<n.Y&&(n.G8=n.Y,n.HH=i-t-1,a=i-t-1)),n.S[t]&&(n.B1.IU.1f>0||ZC.DQ(n.S[t].BY,n.B1.W[n.B1.X],n.B1.W[n.B1.A1])||r&&o&&n.S[t+a]&&n.S[t+a].BY>=n.B1.W[n.B1.X])&&(r&&o&&n.S[t-a]&&((l=n.FR(t-a)).Z=n.KG,l.1t(),l.JG=!0,o=!1,C++),(l=n.FR(t)).Z=n.KG,l.1t(),l.JG=!0,C++,o=!1,s=t);r&&C>0&&n.S[s+a]&&((l=n.FR(s+a)).Z=n.KG,l.1t(),l.JG=!0)}1u{a=n.G8=n.HH=n.Y;1a A=0,Z=1,c=1c;if(!r){1a p="5x"===n.AF?n.C.Q.I:n.C.Q.F;A=4/("5x"===n.AF?n.C.Q.F:n.C.Q.I)*(n.CH.BQ-n.CH.B4),Z=1+ZC.1k((n.B1.A1-n.B1.X)/(2*p)),a=1}1j(t=n.B1.X;t<=n.B1.A1;t+=a)(n.B1.A1-n.B1.X)%n.Y!=0&&r&&(n.B1.A1-t==0?(n.G8=a,n.HH=1):n.B1.A1-t<=n.Y&&(n.G8=n.Y,n.HH=n.B1.A1-t,a=n.B1.A1-t)),n.S[t]?(l=n.FR(t),(r||n.QV||!r&&1c===c||ZC.2l(l.AE-c)>A||t%Z==0)&&(l.Z=n.KG,l.1t(),l.JG=!0,n.S[t].JG=!0),c=l.AE):n.C9&&-1!==ZC.AT(["5x","6b","6T","7o"],n.AF)&&n.PN()}}}CL(e,t){1a i=1g;if(i.V6[e+t])1l i.V6[e+t];1a a=1c;1l a=i.H.2P()?ZC.AK(i.H.K+"-46-c"+("fl"===e?"-1v":"")):i.H.KE||i.C.AJ["3d"]?ZC.AK(i.C.K+"-4l-"+e+"-c"):ZC.AK(i.C.K+"-1B-"+i.L+"-"+e+"-"+t+"-c"),i.V6[e+t]||(i.V6[e+t]=a),a}TJ(e){1a t=1g;1l{id:t.H.K,4u:t.C.K,Dx:t.C.L,4T:t.H4,3V:t.L,17c:t.AP,ev:e?ZC.A4.BX(e):1c,iq:t.KJ}}UP(e,t){ZC.AN.C2("17d"+t,1g.H,1g.TJ(e))}jC(e,t,i){1a a;if(a=e.o["js-c8-2F"]){1a n=ZC.AK(t),l=ZC.kn(a.1F("7y:","").1F("()",""),2v);if(n&&l)4O{1a r=l.4x(1g,i);1j(1a o in r)n.4m(o,r[o])}4M(s){}}}lJ(){1a e=1g,t=e.C,i=t.Q;if(t.o["1z-z"]&&t.E["1B"+e.L+".2h"]){1a a,n,l,r,o;if(a=1m CB(t,i.iX+i.I-ZC.AM.DZ+10,i.iY+i.F-ZC.AM.E0,e.E["z-9V"]),(n=1m DP(e)).GM=t.K+"-1z-z-1P "+t.K+"-1z-1P zc-1z-1P",n.K=t.K+"-1z-z-7E"+e.L,n.AP=t.o["1z-z"][ZC.1b[5]][e.L],n.Z=n.C6=e.H.2P()?e.H.mc():ZC.AK(t.K+"-3z-ml-0-c"),o=ZC.P.E6(n.Z,e.H.AB),n.IP=e.H.2P()?ZC.AK(e.H.K+"-46"):ZC.AK(e.H.K+"-1D"),n.1C(t.o["1z-z"].1P),n.1q(),n.AA+=n.VQ?0:ZC.DE.nH(t,n),n.iX=a.E9[0],n.iY=a.E9[1],n.o["3i-3y"]&&n.VQ&&(n.iY-=n.F/2),n.1t(),1c===ZC.1d(e.E["1z-z-1P-1X-1s"])&&(e.E["1z-z-1P-1X-1s"]=0),e.E["1z-z-1P-1X-1s"]=ZC.BO(e.E["1z-z-1P-1X-1s"],n.I),e.E["z-8g"]===e.E["z-4l"]-1&&t.o["1z-z"].1H){1a s,C;a=1m CB(t,i.iX+i.I-ZC.AM.DZ+20+e.E["1z-z-1P-1X-1s"],i.iY+i.F-ZC.AM.E0,ZC.AM.FS/2),(n=1m DP(e)).GM=t.K+"-1z-z-1H "+t.K+"-1z-1H zc-1z-1H",n.K=t.K+"-1z-z-1H",n.Z=n.C6=e.H.2P()?e.H.mc():ZC.AK(t.K+"-3z-ml-0-c"),o=ZC.P.E6(n.Z,e.H.AB),n.IP=e.H.2P()?ZC.AK(e.H.K+"-46"):ZC.AK(e.H.K+"-1D"),n.1C(t.o["1z-z"].1H),n.1q(),s=1m CB(t,i.iX+i.I-ZC.AM.DZ,i.iY+i.F-ZC.AM.E0,0),C=1m CB(t,i.iX+i.I-ZC.AM.DZ,i.iY+i.F-ZC.AM.E0,ZC.AM.FS);1a A=ZC.U4(1A.af((C.E9[1]-s.E9[1])/(C.E9[0]-s.E9[0])));n.AA+=n.VQ?0:A,n.iX=a.E9[0],n.iY=a.E9[1],n.1t()}if(t.o["1z-z"].43&&((r=1m DS(e)).B8="#dm",r.AZ=1,r.AI=6,r.1C(t.o["1z-z"].43),r.1q(),r.AL&&r.AZ>0)){r.K=t.K+"-1z-z-43-"+e.L;1j(1a Z=[],c=[[i.iX+i.I,i.iY+i.F],[i.iX+i.I+r.AI,i.iY+i.F]],p=0;p<c.1f;p++)a=1m CB(t,c[p][0]-ZC.AM.DZ,c[p][1]-ZC.AM.E0,e.E["z-9V"]),Z.1h([a.E9[0],a.E9[1]]);ZC.CN.1t(o,r,Z)}if(0===e.E["z-8g"]&&((r=1m CY(e)).B8="#dm",r.AZ=1,r.1C(t.o["1z-z"].cg),r.1q(),r.AZ>0&&r.AL&&(r.A0=r.AC=r.B8,(l=ZC.DE.D9(r,t,i.iX+i.I-ZC.AM.DZ-r.AZ,i.iX+i.I-ZC.AM.DZ,i.iY+i.F-ZC.AM.E0,i.iY+i.F-ZC.AM.E0,0,ZC.AM.FS,"x")).K=t.K+"-1z-z-cg",t.CG.2Q(l))),e.E["z-8g"]>0&&t.o["1z-z"].2i&&((r=1m CY(e)).B8="#dm",r.AZ=1,r.1C(t.o["1z-z"].2i),r.1q(),r.AZ>0&&r.AL&&(r.A0=r.AC=r.B8,(l=ZC.DE.D9(r,t,i.iX-ZC.AM.DZ,i.iX+i.I-ZC.AM.DZ,i.iY+i.F-ZC.AM.E0,i.iY+i.F-ZC.AM.E0+r.AZ,e.E["z-8g"]*e.E["z-5v"],e.E["z-8g"]*e.E["z-5v"],"y")).K=t.K+"-1z-z-177-"+e.L,t.CG.2Q(l),(l=ZC.DE.D9(r,t,i.iX-ZC.AM.DZ,i.iX-ZC.AM.DZ,i.iY-ZC.AM.E0,i.iY+i.F-ZC.AM.E0,e.E["z-8g"]*e.E["z-5v"],e.E["z-8g"]*e.E["z-5v"]+r.AZ,"y")).K=t.K+"-1z-z-17f-"+e.L,t.CG.2Q(l))),t.o["1z-z"].2C&&t.o["1z-z"].2C.1f){(r=1m CY(e)).A0=r.AC="#17h",r.C5=.25;1a u=e.E["z-8g"]%t.o["1z-z"].2C.1f;r.1C(t.o["1z-z"].2C[u]),r.1q(),(l=ZC.DE.D9(r,t,i.iX-ZC.AM.DZ,i.iX+i.I-ZC.AM.DZ,i.iY+i.F-ZC.AM.E0,i.iY+i.F-ZC.AM.E0,e.E["z-8g"]*e.E["z-5v"],e.E["z-8g"]*e.E["z-5v"]+e.E["z-5v"],"z")).K=e.K+"-1P-",t.CG.2Q(l)}}}gc(){if(1g.S)1j(1a e=0;e<1g.S.1f;e++)1g.S[e]&&1g.S[e].A&&ZC.AN.gc(1g.S[e],["Z","C6","o","JW","I7","A","C","H","N","NG"]);ZC.AN.gc(1g,["W","S","GP","K9","VN","A8","Z","C6","V6","A2","U1","HC","G6","IH","KG","QK","B1","CH","S","GP","K9","JV","o","JW","I7","A","C","H"])}}1O WI 2k II{2G(e){1E(e);1a t=1g;t.yN=!0,t.AF="xy",t.BL=[ZC.1b[50],ZC.1b[51]]}1t(){1E.1t()}}1O QS 2k WI{2G(e){1E(e);1a t=1g;t.AF="1y",t.CS="az",t.Y=1,t.SU="6r",t.VN=[],t.QJ=!1,t.OZ=!1}FZ(){1l 1m nU(1g)}1q(){1a e=1g;e.BN=e.ND(),e.C0=e.BN[0],e.B8=e.BN[1],e.N7(),1E.1q(),e.4A([["7h-4c","SU"],["fZ-dE","QJ","b"]]),e.B1=e.C.BK(e.BT("k")[0]),e.CH=e.C.BK(e.BT("v")[0])}1t(){1a e,t,i,a,n,l,r,o=1g;1E.1t(),o.VN=[];1a s=o.OZ;if(o.KG=o.CL("bl",0),o.QK=ZC.P.E6(o.CL("bl",1),o.H.AB),!o.IW||o.C.AJ["3d"])o.OA(),o.D=1c;1u{o.VR(),o.C6=o.CL("bl",0);1a C=!0;(1c!==ZC.1d(o.A2.o.2h)&&!ZC.2t(o.A2.o.2h)||1c!==ZC.1d(o.A.o.1J)&&"2a"===o.A2.o.1J)&&(C=!1);1a A=[],Z=[],c=[],p=!0,u=0,h=1c;a=0;1a 1b=-1,d=-1,f=o.A.A7[0].SI&&o.A.A7[0].SI.1f,g=o.Y,B=o.CS;if(o.Y>1&&"4Z"===B&&(B="az"),o.B1.ED&&o.ED){1j(i=o.Y,e=0,t=o.S.1f;e<t;e+=i)d-e<=o.Y&&(i=ZC.BO(1,d-e)),o.S[e]&&(o.B1.IU.1f>0||ZC.DQ(o.S[e].BY,o.B1.W[o.B1.X],o.B1.W[o.B1.A1])||p&&o.S[e+i]&&o.S[e+i].BY>=o.B1.W[o.B1.X])&&(p&&o.S[e-i]&&(-1===1b&&(1b=e-i),d=e-i,p=!1,u++),-1===1b&&(1b=e),d=e,u++,p=!1,a=e);u>0&&o.S[a+i]&&(-1===1b&&(1b=a+i),d=a+i,o.S[a+i].JG=!0)}1u 1b=o.B1.X,d=o.M1?o.S.1f:o.B1.A1;o.Y=g;1a v=-1;i=o.Y;1a E=1c,b=1c,m=0,K=1;a=1b,s?d-1b>o.C.Q.F&&(m=4/o.C.Q.I*(o.CH.BQ-o.CH.B4),K=ZC.1k((d-1b)/(4*o.C.Q.F))):d-1b>o.C.Q.I&&(m=4/o.C.Q.F*(o.CH.BQ-o.CH.B4),K=ZC.1k((d-1b)/(4*o.C.Q.I))),o.o["dE-j0"]&&(m*=1A.1X(1,(d-1b)/ZC.1k(o.o["dE-j0"])),K*=1A.1X(1,(d-1b)/ZC.1k(o.o["dE-j0"])));1j(o.D=[],e=1b;e<=d;e+=i){1a D=!1;if(((d-1b)%o.Y!=0||o.B1.ED&&o.ED)&&d-e<=o.Y&&(i=ZC.BO(1,d-e),D=!0),o.QJ&&!D&&o.S[e])if(1c===ZC.1d(E))E=o.S[e].CM,a=e,b=0;1u{if(1A.3l(o.S[e].CM-E)<m&&e-a<K&&(!o.ED||o.S[e].BY-b<4*o.B1.SQ))d9;E=o.S[e].CM,b=o.S[e].BY,a=e}if(0,h=o.FR(e)){1R(o.S[e].JG=!0,(o.FY||o.M1)&&h.1t(!0),-1===v&&(v=h.iX),B){2q:A.1h([h.iX,h.iY]);1p;1i"4Z":s?(Z.1h(h.iX),c.1h(h.iY),1===Z.1f&&(Z.1h(h.iX),c.1h(h.iY))):(Z.1h(h.iY),c.1h(h.iX),1===Z.1f&&(Z.1h(h.iY),c.1h(h.iX)));1p;1i"ec":1R(o.SU){2q:(l=o.FR(e-i,0))&&(l.2I(),n=ZC.AO.JZ(o.S[e-i].iX,o.S[e-i].iY,h.iX,h.iY),A.1h(s?[h.iX,n[1]]:[n[0],h.iY])),A.1h([h.iX,h.iY]),(r=o.FR(e+i,0))&&(r.2I(),n=ZC.AO.JZ(h.iX,h.iY,o.S[e+i].iX,o.S[e+i].iY),A.1h(s?[h.iX,n[1]]:[n[0],h.iY]));1p;1i"fv":(l=o.FR(e-i,0))&&(l.2I(),A.1h([o.S[e-i].iX,o.S[e-i].iY],[o.S[e-i].iX,h.iY])),A.1h([h.iX,h.iY]);1p;1i"8R":A.1h([h.iX,h.iY]),(r=o.FR(e+i,0))&&(r.2I(),A.1h([o.S[e+i].iX,h.iY],[o.S[e+i].iX,o.S[e+i].iY]))}1p;1i"yg":(l=o.FR(e-i,0))?(l.2I(),n=ZC.AO.JZ(o.S[e-i].iX,o.S[e-i].iY,h.iX,h.iY),A.1h(s?[h.iX,n[1]]:[n[0],h.iY])):A.1h(s?[h.iX,h.iY-o.B1.A9/2]:[h.iX-o.B1.A9/2,h.iY]),A.1h([h.iX,h.iY]),(r=o.FR(e+i,0))?(r.2I(),n=ZC.AO.JZ(h.iX,h.iY,o.S[e+i].iX,o.S[e+i].iY),A.1h(s?[h.iX,n[1]]:[n[0],h.iY])):A.1h(s?[h.iX,h.iY+o.B1.A9/2]:[h.iX+o.B1.A9/2,h.iY]),A.1h(1c)}f&&h.MR(ZC.P.E6(o.CL("fl",0),o.H.AB)),(o.RD&&C||o.FY)&&h.ON(),h.JG=!0}1u 1c!==ZC.1d(o.o["kk-ka"])&&ZC.2t(o.o["kk-ka"])||(A.1h(1c),Z.1h(1c),c.1h(1c))}if("4Z"===B){Z.1h(Z[Z.1f-1]),c.1h(c[c.1f-1]),A=[];1j(1a F=1;F<Z.1f-1;F++){1a I=[Z[F-1],Z[F],Z[F+1],Z[F+2]],x=ZC.2l(c[F+1]-c[F]),X=ZC.AO.YS(o.QL,I,x);1j(e=0;e<X.1f;e++)1c!==ZC.1d(X[e][0])&&1c!==ZC.1d(X[e][1])?s?A.1h([X[e][1],c[F]+(o.B1.AR?1:-1)*X[e][0]*x]):A.1h([c[F]+(o.B1.AR?-1:1)*X[e][0]*x,X[e][1]]):A.1h(1c)}}o.CX=!1;1a y=o.H.OE;if(o.H.OE=!1,o.E["8p-du-2R"]=!0,ZC.CN.2I(o.QK,o),ZC.CN.1t(o.QK,o,A),o.H.OE=y,o.C.BI&&o.C.BI.IQ&&o.RS){1a Y=o.ag(A,!0),L=ZC.P.E6(o.C.BI.Z,o.H.AB),w=1m CY(o);w.1S(o),w.K=o.K+"-2A",w.DI=o.K+"-2A",w.AZ=1;1a M=o.o["2A-3Y"];M&&(w.1C(M),w.1q()),ZC.CN.1t(L,w,Y,1c,3)}}}}1O R7 2k WI{2G(e){1E(e);1a t=1g;t.AF="1N",t.Y=1,t.CS="az",t.T0=3,t.HX=t.C.AJ["3d"]?1:.5,t.SU="6r",t.pD=!0,t.VN=[],t.QJ=!1,t.XR=!1,t.OZ=!1}FZ(){1l 1m op(1g)}1q(){1a e=1g;e.BN=e.ND(),e.C0=e.BN[0],e.B8=e.BN[1],e.C.AJ["3d"]||"2V"===e.o["1W-1r-1I"]?e.A0=e.AC=e.BN[1]:(e.A0=e.BN[0],e.AC=e.BN[1]),e.N7(),1E.1q(),e.lD(),e.4A([["2n-1N","HX","f",0,1],["7h-4c","SU"],["6L-1N","XR","b"],["ki-on-1v","pD","b"],["fZ-dE","QJ","b"]]),e.B1=e.C.BK(e.BT("k")[0]),e.CH=e.C.BK(e.BT("v")[0])}1t(){1a e,t,i,a,n,l,r,o,s,C,A,Z=1g;1E.1t(),Z.VN=[];1a c=Z.OZ;if(-1===ZC.AT(["az","4Z","ec"],Z.CS)&&(Z.CS="az"),Z.KG=Z.CL("bl",0),Z.jK=ZC.P.E6(Z.CL("bl",1),Z.H.AB),Z.QK=ZC.P.E6(Z.CL("bl",Z.pD?2:1),Z.H.AB),C=Z.C.Q,!Z.IW||Z.C.AJ["3d"]){1a p=ZC.3v,u=-ZC.3v;1j(e=0,t=Z.S.1f;e<t;e++)Z.S[e]&&(p=ZC.CV(p,Z.S[e].CM),u=ZC.BO(u,Z.S[e].CM));1a h=Z.CH.AX(p),1b=Z.CH.AX(u),d=Z.CH.AX(Z.CH.H3);if(ZC.DQ(d,h,1b)&&(Z.CH.AR?d<h&&(h=d):d>1b&&(1b=d)),Z.E["2j-y"]=1A.2j(h,1b),Z.E["1X-y"]=1A.1X(h,1b),Z.C9&&Z.A.F3){1a f=ZC.3v,g=-ZC.3v;1j(e=0,t=Z.A.F3.1f;e<t;e++)if(Z.A.F3[e])1j(1a B=0,v=Z.A.F3[e].1f;B<v;B++)f=ZC.CV(f,Z.A.F3[e][B][1]),g=ZC.BO(g,Z.A.F3[e][B][1]);Z.CH.AR?Z.E["2j-y"]=f:Z.E["1X-y"]=g}Z.E["1X-y"]-Z.E["2j-y"]<100&&(Z.E["1X-y"]+=50,Z.E["2j-y"]-=50),Z.OA(),Z.D=1c,Z.D3=1c,Z.AG=1c}1u{Z.VR(),Z.C6=Z.CL("bl",0);1a E=!0;(1c!==ZC.1d(Z.A2.o.2h)&&!ZC.2t(Z.A2.o.2h)||1c!==ZC.1d(Z.A.o.1J)&&"2a"===Z.A2.o.1J)&&(E=!1);1a b=Z.C9&&0===Z.C.V4,m=[],K=[],D=[],F=[],I=[],x=Z.CH.H3;Z.o["3Q-1U"]&&(x=ZC.1Y(Z.o["3Q-1U"]));1a X=Z.CH.AX(x);c?"xy"===Z.C.AJ.3w?(X=Z.B1.AX(x),X=ZC.5l(X,Z.B1.iX,Z.B1.iX+Z.B1.I)):X=ZC.5l(X,Z.CH.iX,Z.CH.iX+Z.CH.I):"yx"===Z.C.AJ.3w?(X=Z.B1.AX(x),X=ZC.5l(X,Z.B1.iY,Z.B1.iY+Z.B1.F)):X=ZC.5l(X,Z.CH.iY,Z.CH.iY+Z.CH.F);1a y=!0,Y=0,L=1c;i=0;1a w=-1,M=-1,H=Z.A.A7[0].SI&&Z.A.A7[0].SI.1f,N=Z.Y,O=Z.CS;if(Z.Y>1&&"4Z"===O&&(O="az"),Z.B1.ED&&Z.ED){1j(a=Z.Y,e=0,t=Z.S.1f;e<t;e+=a)M-e<=Z.Y&&(a=ZC.BO(1,M-e)),Z.S[e]&&(Z.B1.IU.1f>0||ZC.DQ(Z.S[e].BY,Z.B1.W[Z.B1.X],Z.B1.W[Z.B1.A1])||y&&Z.S[e+a]&&Z.S[e+a].BY>=Z.B1.W[Z.B1.X])&&(y&&Z.S[e-a]&&(-1===w&&(w=e-a),M=e-a,y=!1,Y++),-1===w&&(w=e),M=e,Y++,y=!1,i=e);Y>0&&Z.S[i+a]&&(-1===w&&(w=i+a),M=i+a,Z.S[i+a].JG=!0)}1u w=Z.B1.X,M=Z.M1?Z.S.1f:Z.B1.A1;Z.Y=N,b||Z.A.D3&&(K=Z.A.D3.9D());1a S=1c,P=1c,G=0,T=1;i=w,c?M-w>Z.C.Q.F&&(G=4/Z.C.Q.I*(Z.CH.BQ-Z.CH.B4),T=ZC.1k((M-w)/(4*Z.C.Q.F))):M-w>Z.C.Q.I&&(G=4/Z.C.Q.F*(Z.CH.BQ-Z.CH.B4),T=ZC.1k((M-w)/(4*Z.C.Q.I)));1a k=!1,J=!1,z=-1;a=Z.Y,k=!0,!Z.A.S2&&b&&(Z.A.S2={},Z.A.W4={});1a R=1c,Q=1c;if(Z.A.S2&&!Z.A.S2["s"+Z.DV]&&b){Z.A.S2["s"+Z.DV]={},Z.A.W4["s"+Z.DV]={};1a W=Z.A.XA["s"+Z.DV];1j(e=0;e<=W.1f;e++)1c!==ZC.1d(W[e])&&(n=Z.B1.ED?ZC.1k(Z.B1.AX(W[e])):ZC.1k(Z.B1.H1(W[e])),Z.A.S2["s"+Z.DV][n]=X,Z.A.W4["s"+Z.DV][n]=X)}1j(b&&(R=Z.A.S2["s"+Z.DV],Q=Z.A.W4["s"+Z.DV]),e=w;e<=M;e+=a){1a V=!1;if(((M-w)%Z.Y!=0||Z.B1.ED&&Z.ED)&&M-e<=Z.Y&&(a=ZC.BO(1,M-e),V=!0),Z.QJ&&!V&&Z.S[e])if(1c===ZC.1d(S))S=Z.S[e].CM,i=e,P=0;1u{if(1A.3l(Z.S[e].CM-S)<G&&e-i<T&&(!Z.ED||Z.S[e].BY-P<4*Z.B1.SQ))d9;S=Z.S[e].CM,P=Z.S[e].BY,i=e}if(L=Z.FR(e)){1R(Z.S[e].JG=!0,(Z.FY||Z.M1)&&L.1t(!0),(J||("az"===O||"ec"===O)&&e===w&&0===K.1f)&&(b||(K.1h(c?[X,L.iY]:[L.iX,X]),J&&D.1h(c?[X,L.iY]:[L.iX,X]))),J=!1,-1===z&&(z=L.iX),O){2q:b||k&&(c?L.iY>Z.B1.iY&&(D.1h([X,Z.B1.iY]),D.1h([X,L.iY]),K.1h([X,L.iY])):L.iX>Z.B1.iX&&(D.1h([Z.B1.iX,X]),D.1h([L.iX,X]),K.1h([L.iX,X])),k=!1),m.1h([L.iX,L.iY]),b?c?Q[ZC.1k(L.iY)]=L.iX:Q[ZC.1k(L.iX)]=L.iY:(D.1h([L.iX,L.iY]),K.1h([L.iX,L.iY]));1p;1i"4Z":c?(F.1h(L.iX),I.1h(L.iY),1===F.1f&&(F.1h(L.iX),I.1h(L.iY))):(F.1h(L.iY),I.1h(L.iX),1===F.1f&&(F.1h(L.iY),I.1h(L.iX)));1p;1i"ec":1a U=Z.B1.AR?-1:1;1R(Z.SU){2q:(r=Z.FR(e-a,0))&&(r.2I(),l=ZC.AO.JZ(Z.S[e-a].iX,Z.S[e-a].iY,L.iX,L.iY),m.1h(c?[L.iX,l[1]]:[l[0],L.iY]),b?c?Q[ZC.1k(l[1])-U]=L.iX:Q[ZC.1k(l[0])+U]=L.iY:(D.1h(c?[L.iX,l[1]]:[l[0],L.iY]),K.1h(c?[L.iX,l[1]]:[l[0],L.iY]))),m.1h([L.iX,L.iY]),b?c?Q[ZC.1k(L.iY)]=L.iX:Q[ZC.1k(L.iX)]=L.iY:(D.1h([L.iX,L.iY]),K.1h([L.iX,L.iY])),(o=Z.FR(e+a,0))&&(o.2I(),l=ZC.AO.JZ(L.iX,L.iY,Z.S[e+a].iX,Z.S[e+a].iY),m.1h(c?[L.iX,l[1]]:[l[0],L.iY]),b?c?Q[ZC.1k(l[1])+U]=L.iX:Q[ZC.1k(l[0])-U]=L.iY:(D.1h(c?[L.iX,l[1]]:[l[0],L.iY]),K.1h(c?[L.iX,l[1]]:[l[0],L.iY])));1p;1i"fv":(r=Z.FR(e-a,0))&&(r.2I(),m.1h([Z.S[e-a].iX,Z.S[e-a].iY],[Z.S[e-a].iX,L.iY]),b?c?(Q[ZC.1k(L.iY)+U]=Z.S[e-a].iX,Q[ZC.1k(L.iY)]=Z.S[e-a].iX):(Q[ZC.1k(Z.S[e-a].iX)]=Z.S[e-a].iY,Q[ZC.1k(Z.S[e-a].iX)+U]=L.iY):(D.1h([Z.S[e-a].iX,Z.S[e-a].iY],[Z.S[e-a].iX,L.iY]),K.1h([Z.S[e-a].iX,Z.S[e-a].iY],[Z.S[e-a].iX,L.iY]))),m.1h([L.iX,L.iY]),b?c?Q[ZC.1k(L.iY)]=L.iX:Q[ZC.1k(L.iX)]=L.iY:(D.1h([L.iX,L.iY]),K.1h([L.iX,L.iY]));1p;1i"8R":m.1h([L.iX,L.iY]),b?c?Q[ZC.1k(L.iY)]=L.iX:Q[ZC.1k(L.iX)]=L.iY:(D.1h([L.iX,L.iY]),K.1h([L.iX,L.iY])),(o=Z.FR(e+a,0))&&(o.2I(),m.1h([Z.S[e+a].iX,L.iY],[Z.S[e+a].iX,Z.S[e+a].iY]),b?c?(Q[ZC.1k(L.iY)-U]=Z.S[e+a].iX,Q[ZC.1k(Z.S[e+a].iY)]=Z.S[e+a].iX):(Q[ZC.1k(Z.S[e+a].iX)-U]=L.iY,Q[ZC.1k(Z.S[e+a].iX)]=Z.S[e+a].iY):(D.1h([Z.S[e+a].iX,L.iY],[Z.S[e+a].iX,Z.S[e+a].iY]),K.1h([Z.S[e+a].iX,L.iY],[Z.S[e+a].iX,Z.S[e+a].iY])))}}H&&L.MR(ZC.P.E6(Z.CL("fl",0),Z.H.AB)),(Z.RD&&E||Z.FY)&&L.ON(),L.JG=!0}1u 1c!==ZC.1d(Z.o["kk-ka"])&&ZC.2t(Z.o["kk-ka"])||(m.1h(1c),F.1h(1c),I.1h(1c),b||(K.1f-1>=0&&K.1h(c?[X,K[K.1f-1][1]]:[K[K.1f-1][0],X]),D.1f-1>=0&&D.1h(c?[X,K[K.1f-1][1]]:[K[K.1f-1][0],X]),J=!0))}if("az"!==O&&"ec"!==O||b||K.1f-1>=0&&(c?K.1h([X,K[K.1f-1][1]]):K.1h([K[K.1f-1][0],X])),"4Z"===O){F.1h(F[F.1f-1]),I.1h(I[I.1f-1]),m=[],b||K.1h(c?[X,I[0]]:[I[0],X]);1j(1a j=1;j<F.1f-1;j++){1a q=[F[j-1],F[j],F[j+1],F[j+2]],$=ZC.2l(I[j+1]-I[j]),ee=ZC.AO.YS(Z.QL,q,$);1j(e=0;e<ee.1f;e++)1c!==ZC.1d(ee[e][0])&&1c!==ZC.1d(ee[e][1])?(s=c?[ee[e][1],I[j]+(Z.B1.AR?1:-1)*ee[e][0]*$]:[I[j]+(Z.B1.AR?-1:1)*ee[e][0]*$,ee[e][1]],m.1h(s),b?c?Q[ZC.1k(s[1])]=s[0]:Q[ZC.1k(s[0])]=s[1]:(K.1h(s),D.1h(s))):m.1h(1c)}b||K.1h(c?[X,K[K.1f-1][1]]:[K[K.1f-1][0],X])}if(!b&&D.1f>0){1a te=D[D.1f-1];c||te[0]<Z.B1.iX+Z.B1.I&&(D.1h(c?[X,te[1]]:[te[0],X]),D.1h(c?[X,Z.B1.iY]:[Z.B1.iX+Z.B1.I,X]))}if(b){1a ie=[],ae=[],ne=[],le=[];1j(A in Q)ne.1h([A,Q[A]]);1j(A in ne.3X(1n(e,t){1l e[0]-t[0]}),R)le.1h([A,R[A]]);1j(le.3X(1n(e,t){1l e[0]-t[0]}),e=0;e<ne.1f;e++)c?ie.1h([ne[e][1],ne[e][0]]):ie.1h([ne[e][0],ne[e][1]]);1j(e=0;e<le.1f;e++)c?ae.1h([le[e][1],le[e][0]]):ae.1h([le[e][0],le[e][1]]);1j(A in(K=ie.4z(ae.9D()))[0]&&K.1h(K[0]),R=Z.A.S2["s"+Z.DV]={},Q)R[A]=Q[A]}1a re=1m DS(Z);if(re.1S(Z),re.CX=!0,re.LC=!0,re.AZ=0,re.AQ=0,re.EV=0,re.G9=0,re.NI=Z.OZ?180:90,re.1q(),re.C5=Z.HX,re.Z=Z.CL("bl",Z.C.C9?0:1),re.D=K,re.Z0(),re.K=Z.K+"-1N",re.1t(),Z.CX=!1,ZC.CN.2I(Z.QK,Z),ZC.CN.1t(Z.QK,Z,m),Z.C.BI&&Z.C.BI.IQ&&Z.RS){1a oe,se=Z.C.BI,Ce=Z.ag(K),Ae=1m DS(Z.A);Ae.1S(Z),Ae.CX=!0,Ae.LC=!0,Ae.AZ=0,Ae.AQ=0,Ae.EV=0,Ae.G9=0,Ae.C5=Z.HX,Ae.CZ=[C.iX,C.iY,C.iX+C.I,C.iY+C.F],Ae.K=Z.K+"-1N-2A",Ae.DI=Z.K+"-2A",Ae.Z=se.Z;1a Ze=Z.o["2A-3Y"];Ze&&(1c!==ZC.1d(Ze["2n-1N"])?(oe=Ze.2n,Ze.2n=Z.o["2A-3Y"]["2n-1N"]):Ze.2n=Ae.C5,Ae.1C(Ze),Ae.1q(),1c!==ZC.1d(oe)?Ze.2n=oe:4s Ze.2n),Ae.D=Ce,Ae.1t();1a ce=Z.ag(m),pe=ZC.P.E6(se.Z,Z.H.AB),ue=1m CY(Z);ue.1S(Z),ue.CX=!0,ue.LC=!0,ue.K=Z.K+"-1y-2A",ue.DI=Z.K+"-2A",ue.AZ=1,Ze&&(ue.1C(Ze),ue.1q()),ZC.CN.1t(pe,ue,ce,1c,3)}Z.C9&&(Z.A.D3=D)}}}1O hJ 2k WI{2G(e){1E(e);1a t=1g;t.AF="2U",t.o7="2U",t.F4=.1,t.D0=0,t.pP=!1,t.Z9=-1,t.CC=.1,t.CP=.1,t.EZ=0,t.TZ=!1,t.M4=[],t.PW="bg",t.mY=!0,t.QJ=!1}1q(){1a e=1g;if(e.BN=e.ND(),e.C0=e.BN[0],e.B8=e.BN[1],e.BU=e.BN[1],e.A0=e.BN[1],e.AC=e.BN[2],e.N7(),1E.1q(),"17i"===e.CS&&(e.F4=e.CC=e.CP=0),e.4A([["6h-kp","mY","b"],["4n-ci","TZ","b"],["2b-6n","M4"],["2U-8A","F4","fp"],["2U-1s","D0","fp"],["84-1s","pP","b"],["2U-1X-1s","Z9","fp"],["kp-8A-1K","CC","fp"],["kp-8A-2z","CP","fp"],["kp-iG","EZ","fp"],["fZ-dE","QJ","b"]]),e.mY||(e.EZ=1),0===e.F4&&0===e.CC&&0===e.CP&&(e.FC=!1),e.B1=e.C.BK(e.BT("k")[0]),e.CH=e.C.BK(e.BT("v")[0]),1c!==ZC.1d(e.o.96)){1a t=e.o.96.2p("/");if(2===t.1f){1a i=ZC.1k(t[0]),a=ZC.1k(t[1]),n=e.CC;e.CC>=1&&(n=e.CC/e.B1.A9);1a l=e.CP;e.CP>=1&&(l=e.CP/e.B1.A9);1a r=1-n-l,o=ZC.4w(r/(3*a+1));e.CC=n+o+3*(i-1)*o,e.CP=1-e.CC-2*o}}}PN(){1a e,t=1g;if(t.RO)1l t.RO;if(t.o["8p-17j"]&&t.A.A7[0].RO)1l t.A.A7[0].RO;t.pP&&(t.4A([["2U-1s","D0","fp"]]),t.D0=1A.4b((t.B1.D8?t.B1.F:t.B1.I)*(t.D0/(t.B1.BQ-t.B1.B4))));1a i,a=t.B1.A9*t.Y,n=0;1j(t.A.K7[t.AF]=t.A.K7[t.AF]||[],e=0;e<t.A.K7[t.AF].1f;e++){1a l=t.A.K7[t.AF][e][0];t.A.A7[l].BL[0]===t.BL[0]&&n++}if(t.M1)1j(n=0,e=0;e<t.A.A7.1f;e++)"2U"===t.A.A7[e].o7&&(n=ZC.BO(n,t.A.A7[e].S.1f));if(1c===ZC.1d(t.B1.ES)&&(t.B1.ES=0,t.B1.X5={}),t.C9&&1c!==ZC.1d(t.B1.X5["7H-"+t.DV]))i=t.B1.X5["7H-"+t.DV];1u{1j(i=t.B1.ES,e=0;e<t.L;e++)if((t.A.A7[e].AL||"5e"===t.C.8f())&&t.BL[0]===t.A.A7[e].BL[0]&&t.A.A7[e].AF===t.AF&&(!t.C9||t.A.A7[e].DV!==t.DV)&&!t.A.A7[e].HN){i++;1p}t.B1.ES=i,t.B1.X5["7H-"+t.DV]=i}1j(1a r=!0,o=0,s=[],C=0;C<t.A.A7.1f;C++)t.A.A7[C].D0<=1?r=!1:1c!==ZC.1d(t.A.A7[C].D0)&&(t.A.A7[C].C9&&-1!==ZC.AT(s,t.A.A7[C].DV)||(s.1h(t.A.A7[C].DV),o+=t.A.A7[C].D0));1a A=t.CC;A<=1&&(A*=a);1a Z=t.CP;Z<=1&&(Z*=a),A=ZC.1k(A),Z=ZC.1k(Z);1a c,p,u,h,1b,d=t.EZ;1l r?(c=o,0===t.EZ||n<=1?((p=t.F4)<=1&&(p*=c/n),Z=(h=a-c-(p=ZC.BO(0,p))*(n-1))-(A=h*(1b=0===Z?1:A/Z)/(1+1b)),A<1&&(A=Z=0,p=a-c,n>1&&(p/=n-1),p<0&&(c=a-A-Z-(p=0)*(n-1))),u=(c=ZC.BO(c,1*n))/n):n>1&&(p=0,u=c/n,d<=1&&(d*=u),Z=(h=a-(c=n*(u-(d=ZC.CV(d,u)))+d)-p*(n-1))-(A=h*(1b=0===Z?1:A/Z)/(1+1b)),A<1&&(c-=1-A))):(c=a-A-Z,0===t.EZ||n<=1?((p=t.F4)<=1&&(p*=c/n),Z=(h=a-c-(p=ZC.BO(0,p))*(n-1))-(A=h*(1b=0===Z?1:A/Z)/(1+1b)),A<1&&(A=Z=0,p=a-c,n>1&&(p/=n-1),p<0&&(c=a-A-Z-(p=0)*(n-1))),u=(c=ZC.BO(c,1*n))/n):n>1&&(p=0,u=c/n,d>1&&(d=u/d),d*=u=c/(n-n*d+d),Z=(h=a-c-p*(n-1))-(A=h*(1b=0===Z?1:A/Z)/(1+1b)),A<1&&(c-=1-A))),-1!==t.Z9&&u>t.Z9&&!t.E.bw&&(t.D0=t.Z9,t.E.bw=!0,t.PN(),t.E.bw=1c),t.RO={A9:a,ES:i,CC:A,CP:Z,F4:p,D0:u,EZ:d},{A9:a,ES:i,CC:A,CP:Z,F4:p,D0:u,EZ:d}}1t(){1a e=1g;1E.1t(),e.KG=e.CL("bl",0);1a t=e.FC;e.jQ=!1,e.SK=1c;1a i=1;e.B1.ED&&(i=e.S.1f/(e.B1.EG-e.B1.E7)),0!==e.E3.1f||e.I6||e.C.KX||"2F"!==e.H.AB||!(e.B1.A1-e.B1.X>pT||e.B1.ED&&i*(e.B1.A1-e.B1.X)>pT)||(e.jQ=!0,1c===ZC.1d(e.o["5t-zG"])&&(e.FC=!0)),e.FC||(e.jQ=!1),e.OA(),e.FC=t,e.17m=1c,e.WJ=1c}}1O QZ 2k hJ{2G(e){1E(e),1g.AF="5x"}FZ(){1l 1m ZW(1g)}}1O R6 2k hJ{2G(e){1E(e),1g.AF="6b"}FZ(){1l 1m ZV(1g)}}1O PG 2k WI{2G(e,t){1E(e),1g.AF=t||"6y",1g.PW="jN",1g.kw=!1,1g.HX=.5}FZ(){1l 1m y4(1g)}1q(){1a e=1g;e.BN=e.ND(),e.C0=e.BN[0],e.A0=e.BN[1],e.AC=e.BN[1],e.B8=e.BN[2],e.BU=e.BN[2],e.N7(),1E.1q(),e.4A([["2n-1N","HX","f",0,1]]),e.B1=e.C.BK(e.BT("k")[0]),e.CH=e.C.BK(e.BT("v")[0])}1t(){1a e,t,i,a=1g;if(1E.1t(),a.KG=a.CL("bl",0),a.pW=ZC.P.E6(a.CL("bl",0),a.H.AB),!a.IW||a.C.AJ["3d"]||"8p"!==a.aZ||0!==a.S5)a.OA(!0);1u{1a n=1c,l=a.B1,r=a.CH;a.VR(!0);1a o=1m DS(a.A);1j(o.Z=a.CL("bl",1),o.C6=a.CL("bl",0),o.B8=a.BN[3],o.BU=a.BN[3],o.A0=a.BN[2],"5i"===a.AF||"6B"===a.AF?o.AC=a.BN[1]:o.AC=a.BN[2],o.1C(a.A2.o),o.1q(),t=0;t<=a.S.1f;t++)if(n=a.FR(t)){1a s=!1;l.D8?ZC.DQ(n.iX,r.iX+(r.AR?r.BV:r.A6)-1,r.iX+r.I-(r.AR?r.A6:r.BV)+1)&&ZC.DQ(n.iY,l.iY+(l.AR?l.BV:l.A6)-1,l.iY+l.F-(l.AR?l.A6:l.BV)+1)&&(s=!0):ZC.DQ(n.iX,l.iX+(l.AR?l.BV:l.A6)-1,l.iX+l.I-(l.AR?l.A6:l.BV)+1)&&ZC.DQ(n.iY,r.iY+(r.AR?r.A6:r.BV)-1,r.iY+r.F-(r.AR?r.BV:r.A6)+1)&&(s=!0),s&&(n.JG=!0,a.S[t].JG=!0,o.K=n.K+"-1Q",o.iX=n.iX,o.iY=n.iY,"3A"!==o.DN&&o.1q(),"2a"!==a.J2&&(a.C.K6[a.L]||a.C.KX)&&(o.o={},o.OV={},a.C.CW["p"+a.L]&&a.C.CW["p"+a.L]["n"+t]?o.OV=a.PX?a.PX.o:{}:"2a"!==a.OD&&("1B"===a.OD&&a.C.K6[t]||"3a"===a.OD&&a.C.KX)&&(o.OV=a.PR?a.PR.o:{}),o.B8=a.BN[3],o.BU=a.BN[3],o.A0=a.BN[2],"5i"===a.AF||"6B"===a.AF?o.AC=a.BN[1]:o.AC=a.BN[2],o.1C(a.A2.o),o.1q()),o.1t())}}if(a.kw){1j(e=[],t=0,i=a.S.1f;t<i;t++)e.1h([a.S[t].iX,a.S[t].iY]);e.1f&&e.1h(e[0]);1a C=1m DS(a);C.1S(a),C.C5=a.HX,C.CX=!0,C.LC=!0,C.AZ=0,C.AQ=0,C.EV=0,C.G9=0,C.Z=a.KG,C.D=e,C.Z0(),C.K=a.K+"-1N",C.1t(),a.CX=!1,ZC.CN.2I(a.pW,a),ZC.CN.1t(a.pW,a,e)}}}1O S8 2k WI{2G(e,t){1E(e),1g.AF=t||"5i",1g.WC=1c,1g.WD=1c,1g.l0=1,1g.JQ=1,1g.pB="1N",1g.PW="jN"}FZ(){1l 1m y3(1g)}1q(){1a e=1g;e.BN=e.ND(),e.C0=e.BN[0],e.A0=e.BN[2],e.AC=e.BN[1],e.B8=e.BN[2],e.BU=e.BN[2],e.N7(),1E.1q(),e.4A([["2j-2e","WC","i"],["1X-2e","WD","i"],["15M","pB"],["Dc-6h","l0","i"],["2e-7f","JQ","f"]]),e.B1=e.C.BK(e.BT("k")[0]),e.CH=e.C.BK(e.BT("v")[0]),1c===ZC.1d(e.WC)&&(e.WC=15),1c===ZC.1d(e.WD)&&(e.WD=.75*1A.2j(e.B1.A6,e.B1.BV,e.CH.A6,e.CH.BV),e.WD=ZC.BO(25,ZC.CV(50,e.WD)))}jG(e){1a t,i=1g,a=1c;1R(e=ZC.BO(e,i.RT),t=i.WZ===i.RT?e-i.RT:(e-i.RT)/(i.WZ-i.RT),i.pB){1i"9v":a=i.WC+i.JQ*(i.WD-i.WC)*t;1p;1i"1N":1i"5A":a=i.WC+i.JQ*(i.WD-i.WC)*1A.5A(t)}1l ZC.BO(i.WC,a)}1t(){1a e=1g;if(1E.1t(),e.KG=e.CL("bl",0),1c!==ZC.1d(e.WD)){e.WZ=-ZC.3v,e.RT=ZC.3v;1j(1a t=e.A.A7,i=0,a=t.1f;i<a;i++)if(t[i].l0===e.l0)1j(1a n=0,l=t[i].S.1f;n<l;n++)e.WZ=ZC.BO(e.WZ,ZC.2l(t[i].S[n].SY)),e.RT=ZC.CV(e.RT,ZC.2l(t[i].S[n].SY))}e.OA(!0)}}1O WW 2k II{2G(e){1E(e);1a t=1g;t.AF="3P",t.BL=["1z",ZC.1b[52],"1z-r"],t.Q3=0,t.DL=0,t.TZ=!1,t.mq=!0,t.C1=1c,t.PW="bg"}FZ(){1l 1m y0(1g)}1q(){1a e,t,i=1g;1c===ZC.1d(i.o[ZC.1b[17]])&&(i.o[ZC.1b[17]]={}),"9B"!==i.A.A.o.1J&&"nD"!==i.A.A.o.1J||(i.Q3=.35),i.BN=i.ND(),i.C0=i.BN[0],i.A0=i.BN[1],i.AC=i.BN[2],i.BU=i.BN[0],i.B8=i.BN[0],i.N7(),1E.1q(),i.C1=1m CY(i),i.C.A.B9.2y(i.C1.o,["3a.1B.1U-3C.98",i.AF+".1B.1U-3C.98"]),1c!==ZC.1d(e=i.C.o.1B)&&1c!==ZC.1d(e[ZC.1b[17]])&&1c!==ZC.1d(t=e[ZC.1b[17]].98)&&i.C1.1C(t),i.C1.1C(i.o[ZC.1b[17]].98),i.4A([["2b","DR","fp"],[ZC.1b[8],"Q3","fp"],["4n-ci","TZ","b"],["s6","mq","b"],["3Q-2f","DL","i"]]),i.DL%=2m;1j(1a a=0,n=i.S.1f;a<n;a++)i.S[a]&&(i.S[a].CK=i.Q3,i.S[a]&&(i.C.E["1B"+i.L+".2h"]||"5e"===i.C.8f())&&(1c===ZC.1d(i.A.KO[a])&&(i.A.KO[a]=0),i.A.KO[a]+=ZC.1Y(i.S[a].AE)))}1t(){1a e=1g;1E.1t(),e.KG=e.CL("bl",0),e.OA(!0)}}1O UF 2k II{2G(e){1E(e);1a t=1g;t.AF="8Y",t.BL=["1z"],t.UG=0,t.SZ=0,t.DL=0,t.C1=1c,t.PW="bg",t.fA=1c}FZ(){1l 1m xZ(1g)}1q(){1a e,t,i=1g;i.BN=i.ND(),i.C0=i.BN[0],i.A0=i.BN[1],i.AC=i.BN[2],i.BU=i.BN[0],i.B8=i.BN[0],i.N7(),1E.1q(),i.U&&(i.C1=1m CY(i),i.C.A.B9.2y(i.C1.o,["3a.1B.1U-3C.98",i.AF+".1B.1U-3C.98"]),1c!==ZC.1d(e=i.C.o.1B)&&1c!==ZC.1d(e[ZC.1b[17]])&&1c!==ZC.1d(t=e[ZC.1b[17]].98)&&i.C1.1C(t),i.C1.1C(i.o[ZC.1b[17]].98)),i.4A([["7p-4c","UG","fp"],["2b","UG","fp"],[ZC.1b[8],"UG","fp"],["za-8A","SZ","fp"],["3Q-2f","DL","i"],["za-15u","fA"]]),i.DL%=2m;1j(1a a=0,n=i.S.1f;a<n;a++)i.S[a]&&(i.C.E["1B"+i.L+".2h"]||"5e"===i.C.8f())&&(1c===ZC.1d(i.A.KO[a])&&(i.A.KO[a]=0),i.A.KO[a]+=ZC.1Y(i.S[a].AE))}1t(){1a e=1g;1E.1t(),e.KG=e.CL("bl",0),e.OA(!0)}}1O XW 2k II{2G(e){1E(e);1a t=1g;t.AF="7g",t.T0=3,t.BL=["1z-k",ZC.1b[52],"1z"],t.HX=.5,t.CS="1y",t.sa=1c,t.XR=!1,t.D=[],t.AG=[]}FZ(){1l 1m xX(1g)}1q(){1a e=1g;e.BN=e.ND(),e.C0=e.BN[0],e.B8=e.BN[1],e.A0=e.BN[3],e.AC=e.BN[3],e.N7(),1E.1q(),e.lD(),e.4A([["6L-1N","XR","b"],["2n-1N","HX","f",0,1],["2f-8A","sa","f"]]),e.B1=e.C.BK("1z-k"),e.CH=e.C.BK(ZC.1b[52]),"5z"===e.CS&&(e.aZ="5h",e.IW=!1)}1t(){1a e=1g;1E.1t(),e.B1.W.1f===e.W.1f&&-1===ZC.AT(e.W,1c)||(e.aZ="5h",e.IW=!1),e.KG=ZC.AK(e.C.K+"-1B-"+e.L+"-bl-0-c"),e.jK=ZC.P.E6(e.CL("bl",0),e.H.AB),e.QK=ZC.P.E6(e.CL("bl",2),e.H.AB),e.OA(!0)}}1O nK 2k hJ{2G(e){1E(e);1a t=1g;t.F4=.2,t.CC=.28,t.CP=.28,t.EZ=0,t.FJ=1c,t.dI=[],t.Q9=[],t.yW=!0,t.PW="bg"}nI(e){1a t;if("7v"===e){if(1c!==ZC.1d(t=1g.FJ.o.2H))1l t;if(1c!==ZC.1d(t=1g.FJ.o["2H-1D"]))1l{1D:t}}1l{}}1q(){1a e,t=1g;if(t.BN=t.ND(),1E.1q(),1c!==ZC.1d(t.dI=t.o.gJ))1j(1a i=0,a=t.dI.1f;i<a;i++)1c!==ZC.1d(t.dI[i])?"3e"==1w t.dI[i]?t.Q9[i]=ZC.AT(t.CH.JN,t.dI[i]):t.Q9[i]=ZC.1Y(t.dI[i]):t.Q9[i]=1c;t.FJ=1m I4(t),t.FJ.1S(t),t.FJ.1C({"1W-1r":t.BN[3]}),t.FJ.o["2H-1D"]="%2r-7v-1U",t.H.B9.2y(t.FJ.o,["("+t.AF+").1B.7v"],!0,!0),1c!==ZC.1d(e=t.o.7v)&&t.FJ.1C(e),t.FJ.1q()}}1O TU 2k nK{2G(e){1E(e),1g.AF="8k"}FZ(){1l 1m y9(1g)}}1O TR 2k nK{2G(e){1E(e),1g.AF="81"}FZ(){1l 1m ym(1g)}}1O XV 2k WI{2G(e){1E(e);1a t=1g;t.AF="5S",t.CS="2n",t.sb="1B-1X",t.QI=.2,t.VB=1,t.PW="bg"}FZ(){1l 1m yB(1g)}1q(){1a e=1g;e.BN=e.ND(),e.C0=e.BN[0],e.B8=e.BN[1],e.BU=e.BN[1],e.A0=e.BN[2],e.AC=e.BN[1],e.N7(),1E.1q(),e.4A([["2j-fH","QI","f",0,1],["1X-fH","VB","f",0,1],["cW","sb",""]]),e.QI>=e.VB&&(e.QI=.2,e.VB=1),e.B1=e.C.BK(e.BT("k")[0]),e.CH=e.C.BK(e.BT("v")[0])}1t(){1a e=1g;1E.1t(),e.KG=e.CL("bl",0),e.jY=e.jw=-ZC.3v,e.YT=e.X9=ZC.3v,e.rV=e.rU=0;1j(1a t=0,i=e.A.A7.1f;t<i;t++)1j(1a a=e.A.A7[t],n=0,l=a.S.1f;n<l;n++)if(a.S[n]){1a r=ZC.1Y(a.S[n].AE);a.L===e.L&&(e.jY=ZC.BO(e.jY,r),e.YT=ZC.CV(e.YT,r),e.rV+=r),e.jw=ZC.BO(e.jw,r),e.X9=ZC.CV(e.X9,r),e.rU+=r}e.OA()}}1O WK 2k WI{2G(e){1E(e);1a t=1g;t.L6=.1,t.NV=.1,t.M8=0,t.ji="4N",t.P6=[],t.W2=[],t.PW="bg"}1q(){1a e,t,i,a,n=1g;if(n.BN=n.ND(),n.C0=n.BN[0],n.B8=n.BN[1],n.BU=n.BN[1],n.A0=n.BN[2],n.AC=n.BN[1],n.N7(),1E.1q(),n.4A([["4c-1s","ji"],["2j-7S","M8","fp"],["8A-8j","L6","fp"],["8A-7S","NV","fp"],["2b","L6","fp"],["2b","NV","fp"]]),1c!==ZC.1d(i=n.o.8j))1j(i 3F 3N||(i=[i]),e=0,t=i.1f;e<t;e++){1a l=1m DS(n);l.o=i[e],l.1q(),n.P6.1h(l)}if(1c!==ZC.1d(a=n.o.7S))1j(a 3F 3N||(a=[a]),e=0,t=a.1f;e<t;e++){1a r=1m DS(n);r.o=a[e],r.1q(),n.W2.1h(r)}n.B1=n.C.BK(n.BT("k")[0]),n.CH=n.C.BK(n.BT("v")[0])}1t(){1a e=1g;1E.1t(),e.KG=e.CL("bl",0),e.OA()}}1O VT 2k WK{2G(e){1E(e),1g.AF="aa"}FZ(){1l 1m yG(1g)}}1O VU 2k WK{2G(e){1E(e),1g.AF="au"}FZ(){1l 1m yF(1g)}}1O VZ 2k hJ{2G(e){1E(e);1a t=1g;t.AF="7Y",t.CS="yv",t.N2={2e:0},t.PW="bg"}FZ(){1l 1m yE(1g)}1q(){1E.1q()}1t(){1E.1t(),1g.9n()}9n(){1a e=1g,t=e.C.BK(e.BT("v")[0]),i=t.AX(t.H3);if(e.C.BI&&e.C.BI.IQ&&e.RS){1j(1a a=e.C.Q,n=e.C.BI,l=[],r=[],o=!0,s=0,C=e.S.1f;s<C;s++)if(1c!==ZC.1d(e.S[s])&&1c!==ZC.1d(e.S[s].DK[2])){1a A=t.AX(e.S[s].DK[2]);o&&(r.1h([e.S[s].iX,i]),o=!1),l.1h([e.S[s].iX,A]),r.1h([e.S[s].iX,A])}r.1f&&r.1h([r[r.1f-1][0],i]);1a Z=e.ag(r),c=e.o.2A||{};if("1N"===(c.1J||"1N")){1a p=1m DS(e.A);p.1S(e),p.1C({"1W-1r":e.BU,"2n-1N":.2}),p.1C(c),p.1q(),p.CX=!0,p.LC=!0,p.AZ=0,p.AQ=0,p.EV=0,p.G9=0,p.C5=ZC.1Y(p.o["2n-1N"]),p.CZ=[a.iX,a.iY,a.iX+a.I,a.iY+a.F],p.K=e.K+"-1N-2A",p.Z=n.Z,p.D=Z,p.1t()}1a u=e.ag(l),h=ZC.P.E6(n.Z,e.H.AB),1b=1m CY(e);1b.1S(e),1b.1C({"1y-1r":e.BU,"1y-1s":1}),1b.1C(c),1b.1q(),ZC.CN.1t(h,1b,u,1c,3)}}}1O XQ 2k II{2G(e){1E(e);1a t=1g;t.AF="8E",t.T0=3,t.BL=["1z-r",ZC.1b[52],"1z"],t.HX=.5,t.I0=[10,0,0,0,0],t.PW="bg"}FZ(){1l 1m yt(1g)}1q(){1a e,t=1g;t.BN=t.ND(),t.C0=t.BN[0],t.B8=t.BN[1],t.A0=t.BN[3],t.AC=t.BN[3],t.N7(),1E.1q(),t.4A([["2n-1N","HX","f",0,1],["z7","I0"]]),1c!==ZC.1d(e=t.o.15w)&&(t.I0[0]=ZC.1k(e)),t.I0=[ZC.1Y(t.I0[0]||"10"),ZC.1Y(t.I0[1]||"0"),ZC.1Y(t.I0[2]||"0"),ZC.1Y(t.I0[3]||"0"),ZC.1Y(t.I0[4]||"0")]}1t(){1a e=1g;1E.1t(),e.KG=e.CL("bl",0),e.OA(!0)}}1O UJ 2k WI{2G(e){1E(e);1a t=1g;t.AF="5z",t.Y=1,t.CS="az",t.T0=3,t.HX=.5}FZ(){1l 1m yq(1g)}1q(){1a e=1g;e.BN=e.ND(),e.C0=e.BN[0],e.B8=e.BN[1],e.A0=e.BN[0],e.AC=e.BN[1],e.N7(),1E.1q(),e.lD(),e.YQ("2n-1N","HX","f",0,1),e.B1=e.C.BK(e.BT("k")[0]),e.CH=e.C.BK(e.BT("v")[0])}OA(){1a e,t,i=1g,a=i.OZ;i.VR(!1);1a n=i.C.Q;i.Y=1;1a l=a?n.F:n.I;i.B1.ED||!i.QV&&5*(i.B1.A1-i.B1.X)>l&&(i.Y=ZC.1k(5*(i.B1.A1-i.B1.X)/l));1a r=i.B1.ED;if(r&&i.QC[0]===ZC.3v&&i.QC[1]===-ZC.3v&&(r=!1),r)1j(e=0,t=i.S.1f;e<t;e++)i.S[e]&&ZC.DQ(i.S[e].BY,i.B1.W[i.B1.X],i.B1.W[i.B1.A1])&&(i.S[e].Z=i.KG,i.S[e].MU="2j",i.S[e].1t(),i.S[e].MU="1X",i.S[e].1t(),4s i.S[e].E["d5.2Y"]);1u 1j(e=i.B1.X;e<=i.B1.A1;e+=i.Y)i.S[e]&&(i.S[e].MU="2j",i.S[e].1t(),i.S[e].MU="1X",i.S[e].1t(),4s i.S[e].E["d5.2Y"])}1t(){1a e=1g;1E.1t(),e.KG=e.CL("bl",0),e.jK=ZC.P.E6(e.CL("bl",1),e.H.AB),e.QK=ZC.P.E6(e.CL("bl",2),e.H.AB),e.OA(),e.D=1c,e.D3=1c,e.h4=1c,e.SJ=1c}}1O XO 2k WW{2G(e){1E(e);1g.AF="7e",1g.NR=-1}1q(){1E.1q(),1g.4A([["sW","NR","ia"]])}FZ(){1l 1m Bu(1g)}}1O V3 2k QZ{2G(e){1E(e),1g.AF="6T"}FZ(){1l 1m Bh(1g)}1q(){1a e=1g;1E.1q(),1c===ZC.1d(e.o[ZC.1b[61]])&&(e.BU=e.BN[0]),1c===ZC.1d(e.o["1y-1r"])&&(e.B8=e.BN[0])}1t(){1E.1t(),1g.lJ()}}1O WV 2k R6{2G(e){1E(e),1g.AF="7o"}FZ(){1l 1m Br(1g)}1q(){1a e=1g;1E.1q(),1c===ZC.1d(e.o[ZC.1b[61]])&&(e.BU=e.BN[0]),1c===ZC.1d(e.o["1y-1r"])&&(e.B8=e.BN[0])}}1O V0 2k QS{2G(e){1E(e),1g.AF="9c"}FZ(){1l 1m Cx(1g)}1q(){1a e=1g;1E.1q(),1c===ZC.1d(e.o[ZC.1b[61]])&&(e.BU=e.BN[1])}1t(){1E.1t(),1g.lJ()}}1O UW 2k R7{2G(e){1E(e),1g.AF="8a"}FZ(){1l 1m Cs(1g)}1q(){1a e=1g;1E.1q(),1c===ZC.1d(e.o[ZC.1b[61]])&&(e.BU=e.BN[1])}1t(){1E.1t(),1g.lJ()}}1O Z3 2k II{2G(e){1E(e);1a t=1g;t.AF="b9",t.nX=[],t.lP=[],t.BL=["1z"],t.PW="bg"}FZ(){1l 1m Ck(1g)}1q(){1a e=1g;e.BN=e.ND(),e.C0=e.BN[0],e.BU=e.BN[1],e.A0=e.BN[3],e.AC=e.BN[3],e.N7(),1E.1q(),e.4A([["2M","nX"],["15J","lP"]])}1t(){1a e=1g;1E.1t(),e.KG=e.CL("bl",0),e.OA(!0)}}1O MG 2k DP{2G(e){1E(e);1a t=1g;t.C=e.A.A,t.H=t.C.A,t.L=-1,t.AE=1c,t.DK=[],t.CM=1c,t.BY=1c,t.CJ=1c,t.JO=[],t.IQ=!1,t.QB=!0,t.N=t,t.JG=!1,t.hx=!1}GK(e,t){1E.GK(1g.A,e,t,1g.LI(1c,!1),1g.A.N8)}OF(){1l[1g.iX,1g.iY,{cW:1g,3G:!0}]}jM(){1l[1g.iX,1g.iY]}9Q(e,t,i){1a a,n,l,r,o=1g;1R(o.1t(!0),a=o.iX,n=o.iY,l=o.I,r=o.F,t){1i"3G":a=o.iX+l/2,n=o.iY+r/2;1p;1i"1v":a=o.iX+l/2,n=o.iY,n=i?n-i:n;1p;1i"2c":a=o.iX+l/2,n=o.iY+r,n=i?n+i:n;1p;1i"1K":a=o.iX,n=o.iY+r/2,a=i?a-i:a;1p;1i"2z":a=o.iX+l,n=o.iY+r/2,a=i?a+i:a;1p;2q:a+=o.BJ,n+=o.BC}1l{x:a,y:n}}bu(e){1a t=1g;1j(1a i in e)e.88(i)&&(t.A.IW?t.A.S[t.L][i]=e[i]:t.E[i]=e[i])}5K(e){1l 1g.A.IW?1g.A.S[1g.L][e]:1g.E[e]}X2(){1a e,t,i=1g,a=i.C.E,n=i.A.L;1c===ZC.1d(a.3S)&&(a.3S={});1a l=a.3S,r=""+i.AE,o=i.A.LT();1j(ZC.PI(r)&&ZC.1Y(r)<0&&"cJ"===o.83&&(r=ZC.2l(ZC.1Y(r))),o.cR=i.C.UT,o.cN=i.C.NE,r=ZC.AN.GH(r,o,i.A),l["1B-"+n+"-1U"]=r,l["1B-"+n+"-1U-0"]=r,e=0,t=i.DK.1f;e<t;e++)l["1B-"+n+"-1U-"+(e+1)]=i.DK[e];1j(l["1B-1U"]=l["1B-1U-0"]=r,e=0,t=i.DK.1f;e<t;e++)l["1B-1U-"+(e+1)]=i.DK[e];1j(1a s in i.A.KJ){1a C=1c;C="4d"==1w i.A.KJ[s]&&i.A.KJ[s].1f?i.A.KJ[s][i.L]:i.A.KJ[s],l["1B-"+n+"-1T-"+s]=C}}RU(){1a e,t,i=1g,a=i.A.B1,n=i.A.CH,l=[a.X,a.A1,n.X,n.A1];if(i.A.IW&&(i.CM=i.A.S[i.L].CM),i.JO!==l){a.D8?(1c!==i.BY?i.iY=a.AX(i.BY):i.iY=a.H1(i.L),i.A.C9&&"100%"===i.A.KT?i.A.A.FA[i.L]["%6j-"+i.A.DV]>0?i.iX=n.AX(100*i.CM/i.A.A.FA[i.L]["%6j-"+i.A.DV]):i.iX=n.AX(100*i.CM):i.iX=n.AX(i.CM+0)):(1c!==i.BY?i.iX=a.AX(i.BY):i.A.M1?"2U"===i.A.o7?i.iX=a.H1(i.A.RE):i.iX=a.H1(i.A.RE)+i.A.RX+i.L*(a.A9-2*i.A.RX)/(i.A.S.1f-1)-a.A9/2:i.iX=a.H1(i.L),i.A.C9&&"100%"===i.A.KT?i.A.A.FA[i.L]["%6j-"+i.A.DV]>0?i.iY=n.AX(100*i.CM/i.A.A.FA[i.L]["%6j-"+i.A.DV]):i.iY=n.AX(100*i.CM):i.iY=n.AX(i.CM+0)),i.A.IW&&(i.A.S[i.L].iX=i.iX,i.A.S[i.L].iY=i.iY),i.JO=l}i.IQ||(0!==i.A.E3.1f||-1===ZC.AT(["1y","1N","5x","6b","9c","8a","6T","7o"],i.A.AF)||i.A.o.7a?ZC.A4.6I.yY?(i.1S(i.A),i.E3=i.A.E3,i.DB(),i.1q(!1),i.N=i):i.A.o.7a?(i.1S(i.A),i.E3=i.A.E3,i.DB(),i.1q(!1),i.N=i):(e=i.yX(i.A.E3),1c===ZC.1d(t=i.A.oa[e])?(i.1S(i.A),i.E3=i.A.E3,i.DB(),i.1q(!1),i.N=i,i.A.oa[e]=i):i.N=t):i.N=i.A,i.A.o.7a&&(i.N.E.74=i.A.L,i.N.E.7w=i.L,i.N.1q(!1)),i.IQ=!0)}H9(){1a e,t=1g;if(t.o[ZC.1b[9]]3F 3N&&(t.CJ=t.o[ZC.1b[9]].2M(" "),"3e"==1w t.o[ZC.1b[9]][0]?-1!==(e=ZC.AT(t.A.B1.IU,t.o[ZC.1b[9]][0]))?t.BY=e:(t.A.B1.IU.1h(t.o[ZC.1b[9]][0]),t.BY=t.A.B1.IU.1f-1):t.BY=6a(t.o[ZC.1b[9]][0]),"3e"==1w t.o[ZC.1b[9]][1]?-1!==(e=ZC.AT(t.A.CH.JN,t.o[ZC.1b[9]][1]))?t.AE=e:(t.A.CH.JN.1h(t.o[ZC.1b[9]][1]),t.AE=t.A.CH.JN.1f-1):t.AE=6a(t.o[ZC.1b[9]][1]),1c!==t.BY&&t.A.TD(t.BY,t.L),t.A.Z6>0&&t.o[ZC.1b[9]].1f>t.A.Z6))1j(1a i=t.o[ZC.1b[9]].1f-t.A.Z6;i<t.o[ZC.1b[9]].1f;i++)t.DK.1h(t.o[ZC.1b[9]][i])}1q(e){1a t=1g;if(t.E.74=t.A.L,t.E.7w=t.L,t.K=t.A.K+"-2r-"+t.L,1c===ZC.1d(e)&&(e=!0),e){if(t.o[ZC.1b[9]]3F 3N||t.A.yW)t.H9();1u if(t.CJ=t.o[ZC.1b[9]],"3e"==1w t.o[ZC.1b[9]]){1a i=ZC.AT(t.A.CH.JN,t.o[ZC.1b[9]]);-1!==i?t.AE=i:(t.A.CH.JN.1h(t.o[ZC.1b[9]]),t.AE=t.A.CH.JN.1f-1)}1u t.AE=t.o[ZC.1b[9]];1c===t.CM&&(t.CM=t.AE)}1u 1E.1q()}IY(e){1l 1g.EW(e,{})}k1(){1l 1g.AE}EW(AP,EP,LY,yV){1a s=1g,G,CJ,BG,i,A5,D2;1w LY===ZC.1b[31]&&(LY=!1);1a 7I,9e=s.A.JV,8G=s.A.A;if(!yV&&"7y:"===AP.2x(0,11))4O{1a EH=AP.1F("7y:","").1F("()","");7u(EH)&&(G=0===s.DK.1f?s.AE:[s.AE].4z(s.DK),AP=7u(EH).4x(s,G,{5Q:s.L,3V:s.A.L,4T:s.A.H4,15a:s.LI(1c,!1),15b:s.A.TJ()})||AP)}4M(e){}if(AP+="",s.A.o3){1j(1a EY in CJ=s.k1(),1c!==ZC.1d(s.A.CH.JN[CJ])&&s.hx&&(CJ=s.A.CH.JN[CJ]),AP=AP.1F(/%2r-zd-1U/g,s.AE).1F(/%2r-1U/g,CJ).1F(/%2r-2Y/g,s.L).1F(/%1B-1D/g,s.A.AP).1F(/%1B-2Y/g,s.A.L).1F(/%1B-fz/g,8G.A7.1f).1F(/%p/g,s.A.L).1F(/%P/g,8G.A7.1f).1F(/%v/g,CJ).1F(/%V/g,s.AE).1F(/%i/g,s.L).1F(/%n/g,s.L),s.A.KJ){1a Q2="";Q2=s.A.KJ[EY]3F 3N?1c!==s.A.KJ[EY][s.L]?s.A.KJ[EY][s.L]:"":1c!==s.A.KJ[EY]?s.A.KJ[EY]:"",7I=1m 5n("%1T-"+EY,"g"),AP=AP.1F(7I,Q2)}1l AP}1a PT="",S3="",RV="",WF="",R=s.C.BK(s.A.BT("k")[0]),V=s.C.BK(s.A.BT("v")[0]);R&&(1c!==s.BY?PT=S3=RV=s.BY:(1c!==ZC.1d(R.W[s.L])&&(PT=S3=RV=R.W[s.L]),1c!==ZC.1d(R.BW[s.L])&&(RV=S3=R.BW[s.L]))),1c!==ZC.1d(G=s.A.B1.IU[PT])&&"92"==1w PT&&(PT=G),1c!==ZC.1d(G=s.A.B1.IU[S3])&&"92"==1w S3&&(S3=G),1c!==ZC.1d(G=s.A.B1.IU[RV])&&"92"==1w RV&&(RV=G),WF=1c!==ZC.1d(s.A.AP)?s.A.AP:"lU "+(s.A.L+1),s.A.M1&&s.A.A.A7[s.L]&&(WF=s.A.A.A7[s.L].AP||"lU "+s.L);1a UB=(WF+"").2p(/\\s+/),nL=PT;R&&(BG=R.LT(),EP&&EP[ZC.1b[68]]&&ZC.2E({"5J-5C":!0,"5J-5C-5F":EP[ZC.1b[67]]},BG),BG.cR=s.C.UT,BG.cN=s.C.NE,RV=S3=ZC.AN.GH(PT,BG,R,!0),1c===ZC.1d(R.BW[s.BY])&&1c===ZC.1d(R.BW[s.L])||(S3=RV=R.BW[s.BY]||R.BW[s.L]),BG[ZC.1b[68]]&&(RV=ZC.AN.GH(RV,BG,R,!0)));1a l6=(S3+"").2p(/\\s+/),l7=(RV+"").2p(/\\s+/),hv=(PT+"").2p(/\\s+/);CJ=s.k1(),s.A.CH&&1c!==ZC.1d(s.A.CH.JN[CJ])&&s.hx&&(CJ=s.A.CH.JN[CJ]);1a P0=ZC.PI(CJ)&&ZC.1Y(CJ)<0;if(BG=s.A.LT(),ZC.2E(EP,BG),P0&&"cJ"===BG.83&&(CJ=ZC.2l(ZC.1Y(CJ))),BG.cR=s.C.UT,BG.cN=s.C.NE,CJ=ZC.AN.GH(CJ,BG,s.A,!(!V||!V.FG)&&V.FG),"%v"===AP&&"%vv"!==AP||"%2r-1U"===AP)1l CJ;if("%t"===AP||"%1B-1D"===AP)1l WF;1a CR=s.CR||[],li,Z7,or,om;if(V&&V.KW){1a ZH=V.LT();1c===ZC.1d(ZH[ZC.1b[12]])&&(ZH[ZC.1b[12]]=0);1a yU=V.D8?V.KW(1g.iX,!0,"5S"===s.A.AF):V.KW(1g.iY,!0,"5S"===s.A.AF),X0=V.FQ(0,yU,ZH);CR.1h(["%1z-1U-1U",X0],["%vv",X0]),1c!==ZC.1d(G=V.BW[s.L])?CR.1h(["%1z-1U-1H",G],["%vl",G]):CR.1h(["%1z-1U-1H",X0],["%vl",X0])}if(V&&(-1!==AP.1L("%1z-1U-1D")||-1!==AP.1L("%vt")))1j(-1!==(G=ZC.AT(V.W,s.AE))&&1c!==ZC.1d(V.BW)&&1c!==ZC.1d(V.BW[G])?CR.1h(["%1z-1U-1D",V.BW[G]],["%vt",V.BW[G]]):CR.1h(["%1z-1U-1D",s.AE],["%vt",s.AE]),7I=-1!==AP.1L("%vt(")?1m 5n("(%vt)\\\\(([0-9]*)\\\\)"):1m 5n("(%1z-1U-1D)\\\\(([0-9]*)\\\\)");D2=7I.3p(AP);)Z7="",""!==(G=D2[2])&&(or=ZC.1k(G),1c!==ZC.1d(om=s.A.A.A7[or])&&(li=om.FR(s.L),1c!==li&&(Z7=li.EW(D2[1])))),AP=AP.1F(D2[0],Z7),""!==Z7&&CR.1h([D2[0],Z7]);1j(1a EY in 1c!==ZC.1d(s.A.M4)&&1c!==ZC.1d(s.A.M4[s.L])&&CR.1h(["%2b-6n",s.A.M4[s.L]]),s.A.A.l4&&CR.1h(["%7H-1v",-1!==ZC.AT(s.A.A.l4,s.A.L)?1:0]),s.A.KJ){1a Q2;Q2=s.A.KJ[EY]3F 3N?1c!==s.A.KJ[EY][s.L]?s.A.KJ[EY][s.L]:"":1c!==s.A.KJ[EY]?s.A.KJ[EY]:"","92"==1w Q2&&(Q2=ZC.AN.GH(Q2,BG,s.A,!(!V||!V.FG)&&V.FG)),CR.1h(["%1T-"+EY,Q2])}1j(i=0;i<l6.1f;i++)CR.1h(["%1z-84-1H-"+i,l6[i]],["%kl"+i,l6[i]]);1j(i=0;i<l7.1f;i++)CR.1h(["%1z-84-1D-"+i,l7[i]],["%kt"+i,l7[i]]);1j(i=0;i<hv.1f;i++)CR.1h(["%1z-84-1U-"+i,hv[i]],["%kv"+i,hv[i]],["%k"+i,hv[i]]);CR.1h(["%1z-84-1H",S3],["%1z-84-1D",RV],["%1z-84-1U",PT],["%1z-84-1U-ts",nL],["%15c",nL],["%kt",RV],["%kl",S3],["%kv",PT],["%k",PT],["%2r-1U",CJ],["%v",CJ],["%2r-zd-1U",s.AE],["%V",s.AE],["%2r-2Y",s.L],["%2r-x",s.iX],["%2r-y",s.iY],["%b1-1s",s.H.I],["%b1-1M",s.H.F],["%i",s.L],["%n",s.L],["%2r-fz",s.A.S.1f],["%N",s.A.S.1f]);1a z1=9e["%1B-7V"],hs=z1+"",zf=9e["%1B-er"],hn=zf+"",sY=ZC.1Y(8G.FA["%aT-"+s.L+"-"+s.A.DV+"-7V"]||"0"),la=sY+"",zs=ZC.1Y(sY/8G.FA["%aT-"+s.L+"-"+s.A.DV+"-7H-1f"]),lb=5P(zs),zD=5P(8G.FA["%aT-"+s.L+"-"+s.A.DV+"-7H-1f"]),t0=0;1c!==ZC.1d(8G.FA)&&1c!==ZC.1d(8G.FA[s.L])&&(t0=ZC.1Y(8G.FA[s.L]["%6j-"+s.A.DV]||"0"));1a ld=t0+"";hs=ZC.AN.GH(hs,BG),hn=ZC.AN.GH(hn,BG),ld=ZC.AN.GH(ld,BG),la=ZC.AN.GH(la,BG),lb=ZC.AN.GH(lb,BG),CR.1h(["%2r-4J-8u",s.E["2r-4J-8u"]],["%2r-4J-sB",s.E["2r-4J-sB"]],["%7H-6j",la],["%7H-er",lb],["%7H-1f",zD],["%6j",ld],["%1B-2j-2Y",9e["%1B-2j-2Y"]],["%15d",9e["%1B-2j-2Y"]],["%1B-1X-2Y",9e["%1B-1X-2Y"]],["%17J",9e["%1B-1X-2Y"]],["%1B-2j-1U",9e["%1B-2j-1U"]],["%15f",9e["%1B-2j-1U"]],["%1B-1X-1U",9e["%1B-1X-1U"]],["%15g",9e["%1B-1X-1U"]],["%1B-7V",hs],["%159",hs],["%1B-er",hn],["%15h",hn],["%1B-6n",9e["%1B-6n"]],["%pv",9e["%1B-6n"]]);1a zy=100*s.AE/9e["%1B-7V"],ZL=zy+"";1c!==ZC.1d(BG[ZC.1b[12]])&&(ZL=ZC.AN.GH(ZL,BG)),CR.1h(["%1B-8l",ZL],["%15j",ZL]);1a tf=!1,WN,AV,J,BZ;1j(i=0,A5=CR.1f;i<A5;i++)if("%8v"===CR[i][0]){tf=!0;1p}if(!tf&&1c!==ZC.1d(s.A.A.FA)&&1c!==ZC.1d(s.A.A.FA[s.L])){1a JP=100*s.AE/s.A.A.FA[s.L]["%6j-"+s.A.DV],HS=JP+"";1c!==ZC.1d(BG[ZC.1b[12]])&&(HS=ZC.AN.GH(HS,BG)),CR.1h(["%2r-8l-1U",HS],["%8v",HS])}1j(i=0;i<UB.1f;i++)CR.1h(["%1B-1D-"+i,UB[i]],["%t"+i,UB[i]]);1j(CR.1h(["%1B-1D",WF],["%t",WF],["%1B-tm",s.A.ZI],["%1B-2Y",s.A.L],["%p",s.A.L],["%1B-fz",8G.A7.1f],["%P",8G.A7.1f],["%id",s.H.K],["%4u",s.C.K.1F(s.H.K+"-3a-","")]),-1!==AP.1L("%83")&&(P0&&"cJ"===BG.83?(CR.1h(["%83","-"]),P0=!1):CR.1h(["%83",""])),CR.1h(["%2r-x",s.iX],["%2r-y",s.iY],["%2r-1s",s.I],["%2r-1M",s.F],["%2r-2e",s.E["1Q.2e"]||1]),1o.3I.zu&&CR.3X(ZC.mf),7I=1m 5n("\\\\(([^(]+?)\\\\)\\\\(([0-9]*)\\\\)(\\\\(*)([0-9]*)(\\\\)*)");D2=7I.3p(AP);){WN="";1a CQ=s.A.L,D6=s.L;""!==(G=D2[2])&&(CQ=ZC.1k(G)),""!==(G=D2[4])&&(D6=ZC.1k(G)),1c!==(J=8G.A7[CQ])&&(AV=J.FR(D6,3),1c!==AV&&(WN=AV.EW(D2[1],EP))),AP=AP.1F(D2[0],WN)}if(-1!==AP.1L("%zt-")){7I=1m 5n("%zt-([a-zA-Z0-9-]+)");1j(1a l2=s.8c();D2=7I.3p(AP);)1c!==ZC.1d(l2[D2[1]])&&1c!==ZC.1d(s[l2[D2[1]]])&&(AP=AP.1F(D2[0],s[l2[D2[1]]]))}if(-1!==AP.1L("%zr"))1j(7I=1m 5n("%zr([0-9]*)");D2=7I.3p(AP);)""===D2[1]?(BZ=s.N||s,BZ.B8||(BZ=s.A)):BZ=8G.A7[D2[1]],AP=AP.1F(D2[0],BZ&&BZ.B8||"#4v");if(-1!==AP.1L("%zh"))1j(7I=1m 5n("%zh([0-9]*)");D2=7I.3p(AP);)""===D2[1]?(BZ=s.N||s,BZ.B8||(BZ=s.A)):BZ=8G.A7[D2[1]],AP="jN"===s.A.PW?AP.1F(D2[0],BZ&&BZ.A2&&BZ.A2.A0||"#4v"):AP.1F(D2[0],BZ&&BZ.A0||"#4v");if(-1!==AP.1L("%1r"))1j(7I=1m 5n("%1r([0-9]*)");D2=7I.3p(AP);)""===D2[1]?(BZ=s.N||s,BZ.B8||(BZ=s.A)):BZ=8G.A7[D2[1]],AP="1y"===s.A.PW?AP.1F(D2[0],BZ&&BZ.B8||"#4v"):"jN"===s.A.PW?AP.1F(D2[0],BZ&&BZ.A2&&BZ.A2.A0||"#4v"):AP.1F(D2[0],BZ&&BZ.A0||"#4v");1j(AP=ZC.AN.Z2(AP,1g),i=0,A5=CR.1f;i<A5;i++)7I=1m 5n(CR[i][0],"g"),AP=1w CR[i][1]===ZC.1b[31]?AP.1F(7I,""):LY?AP.1F(7I,fM(CR[i][1])):AP.1F(7I,CR[i][1]);1l AP=AP.1F(1m 5n("%1T-([a-zA-Z0-9]+)","g"),""),P0&&"cJ"===BG.83&&(AP="-"+AP),AP}1t(){}6D(){}J9(){1l{1r:1g.N.A0}}KC(){1l{"1G-1r":1g.N.A0,"1W-1r":1g.N.AC,1r:1g.N.C0}}n1(){1l 1g.KC()}F7(e,t){1a i,a,n,l=1g;if(t||(t=1),l.A.O5&&l.A.O5.1f>0&&l.A.O5.1f>t-1&&l.F7(e,t+1),l.AL||"3P"===l.A.AF||"7e"===l.A.AF){1a r,o=1===t?l.A.U:l.A.O5[t-2];if(o){if(l.A.sI)(r=l.A.sI).K=l.K+"-1U-3C-"+t,r.Z=r.C6=l.H.2P()?l.H.mc("1v"):l.C.AJ["3d"]||l.H.KE?ZC.AK(l.C.K+"-4l-vb-c"):ZC.AK(l.C.K+"-1B-"+l.A.L+"-vb-c"),r.IP=l.H.2P()?ZC.AK(l.C.A.K+"-1v"):ZC.AK(l.C.A.K+"-1D"),r.E.74=l.A.L,r.E.7w=l.L,n=ZC.AN.P2(r.o,l.A.o),r.EW=1n(e){1l l.EW(e,n)},r.1q();1u{r=1m DP(l.A),o.o.an||l.A.U.I6||(a="4q",1c!==ZC.1d(i=o.o.1J)&&(a=i),"3P"===l.C.AF||"8Y"===l.C.AF||"7e"===l.C.AF||"4q"!==a||l.A.O5&&0!==l.A.O5.1f||(l.A.sI=r)),r.1C(o.o),l.qO&&!e&&(r.1q(),r.1C(l.qO(r))),r.GM=l.C.K+"-1U-3C "+l.C.K+"-1B-"+l.A.L+"-1U-3C zc-1U-3C",r.K=l.K+"-1U-3C-"+t,r.Z=r.C6=l.H.2P()?l.H.mc("1v"):l.C.AJ["3d"]||l.H.KE?ZC.AK(l.C.K+"-4l-vb-c"):ZC.AK(l.C.K+"-1B-"+l.A.L+"-vb-c"),r.IP=l.H.2P()?ZC.AK(l.C.A.K+"-1v"):ZC.AK(l.C.A.K+"-1D"),n=ZC.AN.P2(r.o,l.A.o),r.EW=1n(e){1l l.EW(e,n)};1a s=l.J9(r);if(1c!==ZC.1d(i=s.1r)&&(r.C0=i),1c!==ZC.1d(i=s[ZC.1b[0]])&&(r.A0=r.AC=i),r.E.74=l.A.L,r.E.7w=l.L,l.A.U.I6&&(l.A.U.GK(l.A.U,r,1c,l.LI(1c,!1)),r.1q()),r.1q(),r.IY=1n(e){1l l.IY(e)},r.DB()&&r.1q(),!l.A.Z5){1a C=1m DP(l.A);C.1S(r),l.A.Z5=C}if(a="4q",1c!==ZC.1d(i=o.o.1J)&&(a=i),r.AL){r.AL=!1;1a A=l.A.o[ZC.1b[17]].1D||"";if("6n("===a.2x(0,7)){1a Z=a.2x(7,a.1f).1F(")","").2p(",");-1!==ZC.AT(Z,l.AE)&&(r.AL=!0)}1u{1a c=a.2p(","),p={2j:"%1B-2j-1U",1X:"%1B-1X-1U",gy:"%1B-2j-2Y",8e:"%1B-1X-2Y"};1j(1a u in p)-1!==ZC.AT(c,u)&&(("gy"!==u&&"8e"!==u||l.L!==l.A.JV[p[u]])&&("2j"!==u&&"1X"!==u||l.AE!==l.A.JV[p[u]])||("4d"==1w A&&1c!==ZC.1d(A[u])&&(r.o.1D=A[u],r.1q()),r.AL=!0));-1!==ZC.AT(c,"4q")&&(r.AL=!0)}}}if(l.C.E["1B"+l.A.L+".2h"]||(r.E["2O-3M"]="2a"),e)1l r;if(r.AL&&1c!==ZC.1d(r.AP)&&""!==r.AP){1a h=l.HD(r);r.E.u1=h,r.iX=h[0],r.iY=h[1];1a 1b={};if(-1!==r.iX&&-1!==r.iY){1a d=!1;if(1c!==ZC.1d(r.o.iG)&&!ZC.2t(r.o.iG)){1b={x:r.iX,y:r.iY,1s:r.I,1M:r.F};1j(1a f=0,g=l.A.A.ZK.1f;f<g;f++)if(ZC.AO.YB(1b,l.A.A.ZK[f])){d=!0;1p}}d||(l.C.E["1B"+l.A.L+".2h"]||(r.E["2O-3M"]="2a"),r.E.sQ="vb"+l.C.L,r.1t(),r.EB(),l.A.A.ZK.1h(1b),!r.KE&&ZC.AK(l.H.K+"-3f")&&l.A.A.HV.1h(ZC.AN.OB(l.C.K,r)))}}1l r}}}yb(e){if(1c!==ZC.1d(e.o[ZC.1b[19]])){1a t=ZC.IL(e.o[ZC.1b[19]]);t<=1&&(t=1g.I*t),e.I=t}if(1c!==ZC.1d(e.o[ZC.1b[20]])){1a i=ZC.IL(e.o[ZC.1b[20]]);i<=1&&(i=1g.I*i),e.F=i}1l e}HD(e){1a t,i=1g,a=i.C.BK(i.A.BT("v")[0]),n=i.AE>=a.LJ&&!a.AR||i.AE<a.LJ&&a.AR?-1:1,l="3i";if(1c!==ZC.1d(t=e.o[ZC.1b[7]])&&(l=t),"3i"===l){1a r=1c!==ZC.1d(i.A.S[i.L-1])?i.A.S[i.L-1].AE:i.AE,o=1c!==ZC.1d(i.A.S[i.L+1])?i.A.S[i.L+1].AE:i.AE;r>=i.AE&&i.AE<=o?l="2c":r<=i.AE&&i.AE>=o?l="1v":r>=i.AE&&i.AE>=o?l=r/i.AE>i.AE/o?"2c":"1v":r<=i.AE&&i.AE<=o&&(l=i.AE/r>o/i.AE?"1v":"2c")}1a s=e.I,C=e.F,A=i.iX-s/2,Z=i.iY-C/2;1R(l){1i"1v":Z-=n*(C/2+4);1p;1i"2c":Z+=n*(C/2+4);1p;1i"1K":A-=s/2+4;1p;1i"2z":A+=s/2+4}1l i.C.AJ["3d"]||(A=ZC.BO(i.C.Q.iX-s/2,A),A=ZC.CV(i.C.Q.iX+i.C.Q.I-s/2,A),Z=ZC.BO(i.C.Q.iY-C,Z),Z=ZC.CV(i.C.Q.iY+i.C.Q.F,Z)),1c!==ZC.1d(e.o.x)&&(A=e.iX),1c!==ZC.1d(e.o.y)&&(Z=e.iY),[ZC.1k(A),ZC.1k(Z)]}ON(e,t){1a i,a,n,l,r,o=1g;if(1w o.A.dW===ZC.1b[31]&&(o.A.dW=-1===ZC.AT(["5i","6B","6y","8t"],o.A.AF)),(!o.C.OI||!o.A.dW)&&(1c===ZC.1d(e)&&(e=!1),1c===ZC.1d(t)&&(t=!1),ZC.DQ(o.iX,o.C.Q.iX-2,o.C.Q.iX+o.C.Q.I+2)&&ZC.DQ(o.iY,o.C.Q.iY-2,o.C.Q.iY+o.C.Q.F+2))){1a s=o.C.K+ZC.1b[34]+o.C.K+ZC.1b[35]+o.A.L+ZC.1b[6];if(-1===ZC.AT(o.H.KY,ZC.1b[39])&&o.A.FY){if(o.A.YI&&!1o.3I.bI){1a C=o.5K("2W");-1!==ZC.AT(o.H.KY,ZC.1b[42])&&-1!==ZC.AT(["1y","1N"],o.A.AF)&&1w C===ZC.1b[31]&&o.1t(!0),""!==(n=1w o.E.pU===ZC.1b[31]?ZC.AO.Q6(ZC.AO.Z1(C,ZC.BO(6,o.A.AZ/2)),4):ZC.AO.Q6(C,4))&&o.A.A.HV.1h(ZC.P.GF("4B",o.A.E5,o.N.IX)+\'1O="\'+s+\'" id="\'+o.K+ZC.1b[30]+n+\'" />\')}if(("1N"===o.A.AF||"8a"===o.A.AF||"7g"===o.A.AF&&("1N"===o.A.CS||"5z"===o.A.CS))&&o.A.XR){1a A=o.5K("9W");""!==(n=ZC.AO.Q6(A,4))&&o.A.A.HV.1h(ZC.P.GF("4B",o.A.E5,o.A.IX)+\'1O="\'+s+\'" id="\'+o.K+\'--1N" 9s="\'+n+\'" />\')}}if(o.A.U||!o.A.IW||!o.A.A2.o||"2a"!==o.A.A2.o.1J&&(1c===ZC.1d(o.A.A2.o.2h)||ZC.2t(o.A.A2.o.2h))){if(t||o.A.RD){if(o.A.HC)l=o.A.HC,"2F"!==o.H.AB&&(e?(r=1m CB(o.C,o.iX-ZC.AM.DZ,o.iY-ZC.AM.E0,o.A.E["z-4c"]||0),l.iX=ZC.4w(r.E9[0]),l.iY=ZC.4w(r.E9[1]),o.E["dX"]=[l.iX,l.iY]):(l.iX=ZC.4w(o.iX),l.iY=ZC.4w(o.iY)),l.E.74=o.A.L,l.E.7w=o.L,l.K=o.K+"-1Q",l.1q(!0));1u{if(o.IW?o.A.sT?l=o.A.sT:o.A.sT=l=1m DS(o.A):l=1m DS(o.A),l.K=o.K+"-1Q",l.E["p-1s"]=o.A.B1.A9,l.E["p-1M"]=o.A.CH.A9,o.A.dW)l.Z=o.A.CL("fl",0),l.C6=o.A.CL("fl",0);1u if(l.Z=o.A.CL("bl",1),l.C6=o.A.CL("bl",0),9d&&9d.cj&&9d.cj(o.C.CW).1f>0){1a Z=o.C.CW["p"+o.A.L];"2a"!==o.A.J2&&Z&&Z["n"+o.L]&&(l.Z=o.A.CL("bl",2))}e?(r=1m CB(o.C,o.iX-ZC.AM.DZ,o.iY-ZC.AM.E0,o.A.E["z-4c"]||0),l.iX=ZC.4w(r.E9[0]),l.iY=ZC.4w(r.E9[1]),o.E["dX"]=[l.iX,l.iY]):(l.iX=ZC.4w(o.iX),l.iY=ZC.4w(o.iY)),l.B8=o.A.BN[3],l.BU=o.A.BN[3],l.A0=o.A.BN[2],"5i"===o.A.AF||"6B"===o.A.AF?l.AC=o.A.BN[1]:l.AC=o.A.BN[2],l.1C(o.A.A2.o),1c!==ZC.1d(o.E["1Q.2e"])&&(l.AI=o.E["1Q.2e"]),l.E.74=o.A.L,l.E.7w=o.L,"2a"!==o.A.J2&&(o.C.K6[o.A.L]||o.C.KX)&&(o.C.CW["p"+o.A.L]&&o.C.CW["p"+o.A.L]["n"+o.L]?l.OV=o.A.PX?o.A.PX.o:{}:"2a"!==o.A.OD&&("1B"===o.A.OD&&o.C.K6[o.A.L]||"3a"===o.A.OD&&o.C.KX)&&(l.OV=o.A.PR?o.A.PR.o:{})),1c!==ZC.1d(i=o.A.o.1Q)&&1c!==ZC.1d(i.ay)&&1c!==ZC.1d(a=i.ay[o.L])&&("3e"==1w a?l.1C({"1W-1r":ZC.AN.QR(a,20),"1y-1r":ZC.AN.JL(a,20),"1G-1r":ZC.AN.JL(a,20)}):l.1C(a)),l.1q(),l.IY=1n(e){1l o.IY(e)},l.DB()&&l.1q()}if(o.E["1Q.2e"]=ZC.BO(2.u2,o.E["1Q.2e"]||l.AI),l.DI=s,!(e||ZC.DQ(l.iX,o.C.Q.iX-2,o.C.Q.iX+o.C.Q.I+2)&&ZC.DQ(l.iY,o.C.Q.iY-2,o.C.Q.iY+o.C.Q.F+2)))1l;if(l.I6&&(o.A.Z4=!1,l.GK(l,l,1c,o.LI(1c,!1)),l.1q()),o.NG=l,l.AL&&"2a"!==l.AF){1a c=1n(){if(o.A.dW||o.MR(ZC.P.E6(o.A.CL("bl",0),o.H.AB)),o.E["1Q.1J"]=l.DN,o.A.FY&&-1===ZC.AT(o.H.KY,ZC.1b[40])&&!1o.3I.bI){1a e=o.E["dX"]?o.E["dX"][0]:o.iX,t=o.E["dX"]?o.E["dX"][1]:o.iY;-1!==ZC.AT(["3P","9j","5t","fW"],l.DN)?o.A.A.HV.1h(ZC.P.GF("4B",o.A.E5,o.A.IX)+\'1O="\'+s+\'" id="\'+o.K+"--1Q"+ZC.1b[30]+l.F1()+\'" />\'):o.A.A.HV.1h(ZC.P.GF("3A",o.A.E5,o.A.IX)+\'1O="\'+s+\'" id="\'+o.K+"--1Q"+ZC.1b[30]+ZC.1k(e+l.BJ+ZC.3B)+","+5w(t+l.BC+ZC.3B,10)+","+5w(ZC.BO(ZC.2L?6:3,o.E["1Q.2e"]+1)*(ZC.2L?1.25:1.gz),10)+\'" />\')}if(o.A.U&&(o.A.E.jJ=o.K,o.F7()),!o.A.dW&&o.C.BI&&o.C.BI.IQ&&o.A.RS&&o.C.BI.AL){1a i=o.C.Q,a=o.C.BI,n=a.B5,r=o.A.HC||l,C=1m DS(o.A);C.1S(r);1a A=(o.iX-i.iX)/i.I,Z=(o.iY-i.iY)/i.F;C.iX=n.iX+n.AQ+A*(n.I-2*n.AQ),C.iY=n.iY+n.AQ+Z*(n.F-2*n.AQ),C.K=o.K+"-1Q-2A",C.DI=o.A.K+"-2A",C.AI=ZC.BO(2.u2,ZC.CV(A,Z)*r.AI),C.Z=C.C6=a.Z,C.1q(),C.1t()}},p=!1;if((!o.A.dW||"7g"===o.A.AF&&"sj"===o.A.CS)&&(p=!0),o.A.GB&&p&&!o.C.HK){1a u=l,h={},1b=l.C5,d=l.AI,f=l.iX,g=l.iY;u.iX=f,u.iY=g,h.x=f,h.y=g;1a B,v=o.A.LG,E=o.C.Q;1j(B in u.C5=0,h.2n=1b,3===v?(u.AI=2,h.2e=d):8===v?(u.iX=f-E.iX,h.x=f):9===v?(u.iX=f+E.iX,h.x=f):10===v?(u.iY=g-E.iY,h.y=g):11===v&&(u.iY=g+E.iY,h.y=g),o.A.FV)u[E8.GO[ZC.EC(B)]]=o.A.FV[B],h[ZC.EC(B)]=o.N[E8.GO[ZC.EC(B)]];if(1c===ZC.1d(o.C.EJ)&&(o.C.EJ={}),1c!==ZC.1d(o.C.EJ[o.A.L+"-"+o.L]))1j(B in o.C.EJ[o.A.L+"-"+o.L])u[E8.GO[ZC.EC(B)]]=o.C.EJ[o.A.L+"-"+o.L][B];o.C.EJ[o.A.L+"-"+o.L]={},ZC.2E(h,o.C.EJ[o.A.L+"-"+o.L]);1a b=1m E8(u,h,o.A.JI,o.A.LB,E8.RR[o.A.LF],1n(){c()});b.AV=o,b.OJ=1n(){o.MR(ZC.P.E6(o.A.CL("bl",0),o.H.AB))},o.L5(b)}1u{1a m="3A"===l.DN?"3A":"2R";if(o.A.HJ){1a K=1n(t,i){1a a=t.k4(!1),n=o.iX,r=o.iY;if(e){1a s=1m CB(o.C,n-ZC.AM.DZ,r-ZC.AM.E0,o.A.E["z-4c"]||0);n=ZC.4w(s.E9[0]),r=ZC.4w(s.E9[1]),o.E["dX"]=[n,r]}a.4m("5J","77("+ZC.1k(n-l.iX)+","+ZC.1k(r-l.iY)+") "+(a.bP("5J")||"")),a.4m("id",i),"5i"!==o.A.AF&&"6B"!==o.A.AF||a.4m("r",o.E["1Q.2e"]),t.6q.3b(a)};l.ME&&K(o.A.RJ,o.K+"-1Q-sh-"+m),K(o.A.HJ,o.K+"-1Q-"+m),l.D7&&K(o.A.QG,o.K+"-1Q-5g")}1u{l.1t();1a D=l.A0!==l.AC;if(!o.C.K6[o.A.L]&&o.A.Z4&&!D)if("2F"===o.H.AB){if(-1===ZC.AT(["3P","9j","5t","fW","9x","8u","5G"],l.DN))if(o.A.HC=l,1o.3I.jZ&&2g.dV){1j(1a F in o.H.G1)o.A.HJ||(o.A.HJ=o.H.G1[F].dV("#"+o.K+"-1Q-"+m)),l.ME&&!o.A.RJ&&(o.A.RJ=o.H.G1[F].dV("#"+o.K+"-1Q-sh-"+m)),l.D7&&!o.A.QG&&(o.A.QG=o.H.G1[F].dV("#"+o.K+"-1Q-5g")||o.H.G1[F].dV("#"+o.K+"-1Q-2R-5g"));o.A.HJ||(o.A.HJ=ZC.AK(o.K+"-1Q-"+m),l.ME&&(o.A.RJ=ZC.AK(o.K+"-1Q-sh-"+m)),l.D7&&(o.A.QG=ZC.AK(o.K+"-1Q-5g")))}1u o.A.HJ=ZC.AK(o.K+"-1Q-"+m),l.ME&&(o.A.RJ=ZC.AK(o.K+"-1Q-sh-"+m)),l.D7&&(o.A.QG=ZC.AK(o.K+"-1Q-5g")||ZC.AK(o.K+"-1Q-2R-5g"))}1u"5i"!==o.A.AF&&"6B"!==o.A.AF&&(e||(o.A.HC=l))}"2F"===o.H.AB&&o.A.jC(o.A.A2,o.K+"-1Q-"+m,o.LI()),c()}}1u o.A.U&&o.F7()}1u o.A.U&&o.F7()}}}L5(e,t){1a i,a=1g,n=a.C.M7,l=n.PP,r=a.A.TX;1R(r){2q:t&&n.2Q(t),n.2Q(e);1p;1i 1:1i 2:1i 3:if(t){1a o="4q";if(1===r?o="4l-6h-"+a.L+"-1N":2===r&&(o="d3-6h-"+a.A.L+"-1N"),1c===ZC.1d(l[o])){1a s=1m o1(o);n.pw(s,t.XP)}l[o].2Q(t)}if(i="4q",1===r?i="4l-6h-"+a.L:2===r&&(i="d3-6h-"+a.A.L),1c===ZC.1d(l[i])){1a C=1m o1(i);n.pw(C,e.XP)}l[i].2Q(e)}}SA(e){1a t=1g;t.A.IW&&t.A.yN&&(t.RU(),e&&("6y"!==t.A.AF&&"8t"!==t.A.AF&&"5i"!==t.A.AF&&"6B"!==t.A.AF||t.1t(!0)));1a i=t.A.BN;t.LL({6v:e,1J:"2S",id:"1Q",1Q:!0,8S:1n(){1g.DN=t.E["1Q.1J"],1g.iX=t.iX,1g.iY=t.iY,"5i"===t.A.AF||"6B"===t.A.AF?(1g.AC=i[3],1g.A0=i[2]):(1g.B8=i[3],1g.BU=i[3],1g.A0=i[2],1g.AC=i[1]),1g.AI=t.E["1Q.2e"]}})}YE(e){1a t=1g;t.LL({6v:e,1J:"1y",id:"1y",8S:1n(){1g.B8=t.A.BN[3]}})}LL(e){if(!ZC.3o){1a t,i,a,n,l,r,o=1g,s=e.6v||"2N",C=e.id||"",A=!1;1R(o.GI=1c,1c!==ZC.1d(t=e.1Q)&&(A=ZC.2t(t)),s){1i"2N":1c!==ZC.1d(o.C.CW["p"+o.A.L])&&1c!==ZC.1d(o.C.CW["p"+o.A.L]["n"+o.L])||(a=A?o.A.G6:o.A.IH,n="2N");1p;1i"5V":a=A?o.A.VO:o.A.SE,n="2N"}if(1c!==ZC.1d(e.3Y)&&(a=e.3Y),a&&o.C.E["1B"+o.A.L+".2h"]&&a.AL){1R(e.1J){1i"3C":(r=1m I4(o.A)).QB=!0;1p;1i"1y":r=1m DS(o.A),l=ZC.P.E6(o.C.K+"-"+n+"-c",o.H.AB),r.CX=!1;1p;1i"2S":r=1m DS(o.A);1p;1i"1N":r=1m DS(o.A),l=ZC.P.E6(o.C.K+"-"+n+"-c",o.H.AB)}if(A&&(r.E["p-1s"]=o.A.B1.A9,r.E["p-1M"]=o.A.CH.A9),1o.3I.jd&&"2N"===n?r.Z=r.C6=ZC.AK(o.C.K+"-4l-2N-c"):r.Z=r.C6=ZC.AK(o.C.K+"-"+n+"-c"),r.K=o.K+"-"+(""!==C?C+"-":"")+s,r.E.74=o.A.L,r.E.7w=o.L,"2N"!==s&&(r.tC=!0),e.8S&&e.8S.4x(r),r.1C(a.o),e.jL&&e.jL.4x(r),"2N"===s&&1c!==ZC.1d(t=o.A.o)&&1c!==ZC.1d(t.ay)&&1c!==ZC.1d(i=t.ay[o.L])&&("3e"==1w i?r.1C({"1W-1r":i,"1y-1r":i,"1G-1r":i}):r.1C(i)),1c!==ZC.1d(t=o.A.o[s+"-3Y"])&&1c!==ZC.1d(t.ay)&&1c!==ZC.1d(i=t.ay[o.L])&&("3e"==1w i?r.1C({"1W-1r":i,"1y-1r":i,"1G-1r":i}):r.1C(i)),o.A.I6&&o.GK(r,s),"2N"===s&&o.A.A2&&o.A.A2.I6&&(o.A.A2.GK(o.A.A2,r,1c,o.LI(1c,!1)),r.1q()),r.1q(),r.IY=1n(e){1l o.IY(e)},r.DB()&&r.1q(),r.AL){1R(e.c9&&e.c9.4x(r),e.1J){1i"3C":1i"2S":r.9g(2),r.1t();1p;1i"1y":ZC.CN.2I(l,r),"1B"===o.A.j2?ZC.CN.1t(l,r,o.A.VN):ZC.CN.1t(l,r,o.5K("2W"));1p;1i"1N":"4Z"!==o.A.CS&&(1c!==ZC.1d(t=a.o["2n-1N"])&&(r.C5=ZC.1Y(t)),ZC.CN.2I(l,r),r.1t())}o.GI=r}}}}MR(){}2I(){}HZ(){}L8(){1a e=1g;ZC.P.ET([e.K+"-2N-5c",e.K+"-1Q-2N-5c",e.H.K+"-2H-1D-5c",e.H.K+"-2H-1D-sh-5c"])}LI(e,t){1a i=1g;1w t===ZC.1b[31]&&(t=!0);1a a=!1;"2a"!==i.A.J2&&i.C.CW&&i.C.CW["p"+i.A.L]&&i.C.CW["p"+i.A.L]["n"+i.L]&&(a=!0);1a n={id:i.C.A.K,4u:i.C.K,190:i.C.L,4T:i.A.H4,3V:i.A.L,5Q:i.L,84:1c===i.BY?i.L:i.BY,18Z:i.A.B1?i.A.B1.W[1c===i.BY?i.L:i.BY]:1c,yh:i.A.B1?i.A.B1.FQ(i.L,1c===i.BY?1c:i.A):1c,1U:i.AE,1D:t?i.EW(i.A.K4):i.A.K4,ev:e?ZC.A4.BX(e):1c,x:i.iX,y:i.iY,1s:i.I,1M:i.F,2e:i.E["1Q.2e"]||1,e8:a};1j(1a l in i.A.KJ)i.A.KJ[l]3F 3N?1c!==ZC.1d(i.A.KJ[l][i.L])&&(n["1T-"+l]=i.A.KJ[l][i.L]):n["1T-"+l]=i.A.KJ[l];1l n}OW(e,t){ZC.AN.C2("18T"+t,1g.H,1g.LI(e))}}1O nU 2k MG{2I(){1g.RU()}J9(){1l{1r:1g.N.B8}}KC(){1l{"1W-1r":1g.N.B8,"1G-1r":1g.N.B8,1r:1g.N.C0}}9Q(e,t){1E.9Q(e,t,1g.NG.AI)}1t(e){1a t=1g;1w e===ZC.1b[31]&&(e=!1),1E.1t();1a i=t.A.OZ,a=t.A.QK,n=t.A.B1,l=t.A.S;if(t.2I(),!t.A.IW||t.C.AJ["3d"]||t.A.FY){t.N.CX=t.CX=!1,t.N.C6=t.A.CL("bl",0);1a r=[],o=t.A.CS;(t.C.OI||t.A.UK)&&"4Z"===t.A.CS&&(o="az");1a s=1w t.A.G8!==ZC.1b[31]?t.A.G8:t.A.Y,C=1w t.A.HH!==ZC.1b[31]?t.A.HH:t.A.Y,A=!0,Z=!0;(1c===ZC.1d(l[t.L-s])||"2Z"!==n.C8&&!n.ED&&t.L<=n.X)&&(A=!1);1a c,p,u,h,1b=t.A.M1?t.A.S.1f:n.A1;1R((1c===ZC.1d(l[t.L+C])||"2Z"!==n.C8&&!n.ED&&t.L>=1b)&&(Z=!1),o){2q:A&&(t.A.FR(t.L-s,0).2I(),t.A.VF&&(c=ZC.AO.JZ(t.A.S[t.L-s].iX,t.A.S[t.L-s].iY,t.A.S[t.L].iX,t.A.S[t.L].iY),r.1h(c))),r.1h([t.iX,t.iY]),Z&&(t.A.FR(t.L+C,2).2I(),c=t.A.VF?ZC.AO.JZ(t.A.S[t.L].iX,t.A.S[t.L].iY,t.A.S[t.L+C].iX,t.A.S[t.L+C].iY,t.N.C5):[l[t.L+C].iX,l[t.L+C].iY],r.1h(c));1p;1i"4Z":if(t.A.D&&(r=t.A.D),t.A.D=[],l[t.L+1]){1a d=[],f=[];1j(p=-1;p<3;p++)l[t.L+p]?(t.A.FR(t.L+p,2).2I(),i?(d.1h(l[t.L+p].iX),f.1h(l[t.L+p].iY)):(d.1h(l[t.L+p].iY),f.1h(l[t.L+p].iX))):0===d.1f?i?(f.1h(t.iY),d.1h(t.iX)):(f.1h(t.iX),d.1h(t.iY)):(d.1h(d[d.1f-1]),f.1h(f[f.1f-1]));1a g=ZC.2l(f[2]-f[1]),B=ZC.AO.YS(t.A.QL,d,g);if(t.A.VF){1j(p=0;p<ZC.1k(B.1f/2)+(1===t.N.C5?1:0);p++)B[p]&&(i?r.1h([B[p][1],t.iY+(n.AR?1:-1)*B[p][0]*g]):r.1h([t.iX+(n.AR?-1:1)*B[p][0]*g,B[p][1]]));1j(p=ZC.1k(B.1f/2)-1,u=B.1f;p<u;p++)B[p]&&(i?t.A.D.1h([B[p][1],t.iY+(n.AR?1:-1)*B[p][0]*g]):t.A.D.1h([t.iX+(n.AR?-1:1)*B[p][0]*g,B[p][1]]))}1u 1j(p=0;p<ZC.1k(B.1f);p++)i?r.1h([B[p][1],t.iY+(n.AR?1:-1)*B[p][0]*g]):r.1h([t.iX+(n.AR?-1:1)*B[p][0]*g,B[p][1]])}1p;1i"ec":if(A)1R(t.A.FR(t.L-s,0).2I(),c=ZC.AO.JZ(t.A.S[t.L-s].iX,t.A.S[t.L-s].iY,t.A.S[t.L].iX,t.A.S[t.L].iY),t.A.SU){2q:i?r.1h([l[t.L-s].iX,c[1]],[t.iX,c[1]]):r.1h([c[0],l[t.L-s].iY],[c[0],t.iY]);1p;1i"fv":r.1h([t.A.S[t.L-s].iX,l[t.L-s].iY],[t.A.S[t.L-s].iX,t.iY]);1p;1i"8R":}if(r.1h([t.iX,t.iY]),Z)1R(t.A.FR(t.L+C,0).2I(),c=ZC.AO.JZ(t.A.S[t.L+s].iX,t.A.S[t.L+s].iY,t.A.S[t.L].iX,t.A.S[t.L].iY),t.A.SU){2q:r.1h(i?[t.iX,c[1]]:[c[0],t.iY]);1p;1i"fv":1p;1i"8R":r.1h([t.A.S[t.L+s].iX,t.iY],[t.A.S[t.L+s].iX,l[t.L+C].iY])}1p;1i"yg":A?(t.A.FR(t.L-s,0).2I(),c=ZC.AO.JZ(t.A.S[t.L-s].iX,t.A.S[t.L-s].iY,t.A.S[t.L].iX,t.A.S[t.L].iY),r.1h(i?[t.iX,c[1]]:[c[0],t.iY])):r.1h(i?[t.iX,t.iY-n.A9/2]:[t.iX-n.A9/2,t.iY]),r.1h([t.iX,t.iY]),Z?(t.A.FR(t.L+C,0).2I(),c=ZC.AO.JZ(t.A.S[t.L+s].iX,t.A.S[t.L+s].iY,t.A.S[t.L].iX,t.A.S[t.L].iY),r.1h(i?[t.iX,c[1]]:[c[0],t.iY])):r.1h(i?[t.iX,t.iY+n.A9/2]:[t.iX+n.A9/2,t.iY])}if(t.bu({2W:r}),"9t"!==t.C.MK&&(t.A.VN=t.A.VN.4z(r)),!e&&!t.C.AJ["3d"]){1a v=t.N=t.A.HY(t,t.N),E=t.C.K+ZC.1b[34]+t.C.K+ZC.1b[35]+t.A.L+ZC.1b[6];if(v.DI=E,v.K=t.K,t.A.I6&&t.GK(v),ZC.CN.2I(a,v),t.9n(v,r),t.A.GB&&!t.C.HK){1a b=1m DS(t),m={};b.1S(v),b.K=t.K,b.Z=t.A.CL("bl",1),b.C6=t.A.CL("bl",0),b.D=r,m.2W=r;1a K=[],D=t.A.LG,F=t.C.Q;1j(b.C5=0,m.2n=v.C5,p=0;p<r.1f;p++)2===D?K[p]=[r[p][0],F.iY+F.F/2]:3===D?K[p]=[r[p][0],F.iY-5]:4===D?K[p]=[r[p][0],F.iY+F.F+5]:5===D?K[p]=[F.iX-5,r[p][1]]:6===D?K[p]=[F.iX+F.I+5,r[p][1]]:7===D?K[p]=[F.iX+F.I/2,r[p][1]]:8===D?K[p]=[r[p][0]-F.I,r[p][1]]:9===D?K[p]=[r[p][0]+F.I,r[p][1]]:10===D?K[p]=[r[p][0],r[p][1]-F.F]:11===D?K[p]=[r[p][0],r[p][1]+F.F]:12===D?K[p]=[(r[0][0]+r[r.1f-1][0])/2,r[0][1]]:13===D&&(K[p]=[r[0][0],(r[0][1]+r[r.1f-1][1])/2]),D>1&&(b.D=K,m.2W=r);1j(h in t.A.FV)b[E8.GO[ZC.EC(h)]]=t.A.FV[h],m[ZC.EC(h)]=v[E8.GO[ZC.EC(h)]];if(t.C.EJ||(t.C.EJ={}),1c!==ZC.1d(t.C.EJ[t.A.L+"-"+t.L]))1j(h in t.C.EJ[t.A.L+"-"+t.L])b[E8.GO[ZC.EC(h)]]=t.C.EJ[t.A.L+"-"+t.L][h];t.C.EJ[t.A.L+"-"+t.L]={},ZC.2E(m,t.C.EJ[t.A.L+"-"+t.L]);1a I=1m E8(b,m,t.A.JI,t.A.LB,E8.RR[t.A.LF],1n(){x()});I.AV=t,I.OJ=1n(){t.MR(ZC.P.E6(t.A.CL("bl",1),t.H.AB))},I.IO=a,t.L5(I)}1u ZC.CN.1t(a,v,r),x()}}1n x(){!t.C.OI&&ZC.DQ(t.iX,n.iX-1,n.iX+n.I+1)&&ZC.DQ(t.iY,n.iY-1,n.iY+n.F+1)&&(t.ON(),t.MR(ZC.P.E6(t.A.CL("bl",1),t.H.AB)),t.A.U&&t.A.U.AL&&t.A.E.jJ!==t.K&&t.F7())}}9n(e,t){1a i=1g;if(i.C.BI&&i.C.BI.IQ&&i.A.RS){1a a,n=i.A.ag(t);i.A.WX?a=i.A.WX:(a=1m CY(i),i.A.WX=a),a.1S(e),a.K=i.K+"-1y-2A",a.DI=i.A.K+"-2A";1a l=ZC.P.E6(i.C.BI.Z,i.H.AB);a.AZ=1;1a r=i.o["2A-3Y"];r&&(a.1C(r),a.1q()),ZC.CN.1t(l,a,n,1c,3)}}HZ(e){1a t=1g;ZC.3o||(t.YE(e),t.A.RD&&t.SA(e))}}1O op 2k MG{2I(){1g.RU()}J9(){1l{1r:1g.N.B8}}KC(){1l{"1W-1r":1g.N.B8,"1G-1r":1g.N.B8,1r:1g.N.C0}}9Q(e,t){1l 1E.9Q(e,t,1g.NG.AI)}1t(e){1a t,i,a,n,l,r,o,s,C=1g;1w e===ZC.1b[31]&&(e=!1),1E.1t();1a A=C.A.OZ,Z=C.A.QK,c=C.A.B1,p=C.A.CH,u=C.A.S;if(C.2I(),!C.A.IW||C.C.AJ["3d"]||C.A.FY){C.N.CX=C.CX=!1,C.N.C6=C.A.CL("bl",1);1a h=p.H3,1b=p.AX(h);1b=A?ZC.5l(1b,p.iX,p.iY+p.I):ZC.5l(1b,p.iY,p.iY+p.F);1a d=c.DJ?c.A9/2:0,f=[],g=[],B=[],v=1c;1c!==ZC.1d(C.A.A.F3)&&1c!==ZC.1d(C.A.A.F3[C.L])&&(v=C.A.A.F3[C.L]);1a E=C.A.CS;(C.C.OI||C.A.UK)&&"4Z"===C.A.CS&&(E="az"),i=C.N.AZ/2-1,a="2F"===C.H.AB&&ZC.2L?C.N.HX/4:0,"3L"===C.H.AB&&C.A.GB&&(a=.5),C.C.AJ["3d"]&&(1===C.A.HX?a=1:(a=C.A.HX/3,"3c"===C.H.AB&&(ZC.A4.6I.ax||ZC.A4.6I.jP)&&(a=.5)),c.AR&&(a=-a));1a b,m=1w C.A.G8!==ZC.1b[31]?C.A.G8:C.A.Y,K=1w C.A.HH!==ZC.1b[31]?C.A.HH:C.A.Y,D=!0,F=!0;(!u[C.L-m]||"2Z"!==c.C8&&!c.ED&&C.L<=c.X)&&(D=!1);1a I=C.A.M1?C.A.S.1f:c.A1;1R((!u[C.L+K]||"2Z"!==c.C8&&!c.ED&&C.L>=I)&&(F=!1),E){2q:if(D)C.A.FR(C.L-m,0).2I(),C.A.VF?(l=ZC.AO.JZ(u[C.L-m].iX,u[C.L-m].iY,u[C.L].iX,u[C.L].iY),B.1h([ZC.1k(l[0])-a,l[1]-i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(l[0])-a,1b]),g.1h([ZC.1k(l[0])-a,l[1]+i]),f.1h([l[0],l[1]])):g.1h([ZC.1k(C.iX),1b]);1u if(c.ED||C.L!==c.X)C.A.C9&&1c!==ZC.1d(v)?(b=C.A.A.A7[C.A.L-1])&&b.S[C.L]&&g.1h([ZC.1k(C.iX),b.S[C.L].iY+i]):(g.1h([ZC.1k(C.iX),1b]),B.1h([ZC.1k(C.iX-c.A9/2),1b]),B.1h([ZC.1k(C.iX),1b]));1u if(c.AR)C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(c.iX+c.I-c.BV-d),1b]),g.1h([ZC.1k(c.iX+c.I-c.BV-d),C.iY+i]);1u{1a x=ZC.1k(c.iX+c.A6+d);C.A.M1&&(x=c.H1(C.A.RE)-c.A9/2),C.A.C9&&1c!==ZC.1d(v)||g.1h([x,1b]),g.1h([x,C.iY+i])}B.1h([ZC.1k(C.iX),C.iY-i]),g.1h([ZC.1k(C.iX),C.iY+i]),f.1h([C.iX,C.iY]),F?(C.A.FR(C.L+K,2).2I(),n=C.A.VF?ZC.AO.JZ(u[C.L].iX,u[C.L].iY,u[C.L+K].iX,u[C.L+K].iY):[u[C.L+K].iX,u[C.L+K].iY],B.1h([ZC.1k(n[0]),n[1]-i]),g.1h([ZC.1k(n[0]),n[1]+i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(n[0]),1b]),l=C.A.VF?ZC.AO.JZ(u[C.L].iX,u[C.L].iY,u[C.L+K].iX,u[C.L+K].iY,C.N.C5):[u[C.L+K].iX,u[C.L+K].iY],f.1h([l[0],l[1]])):C.L===c.A1?c.AR?(g.1h([c.iX+c.A6-d,C.iY+i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(c.iX+c.A6-d),1b])):(g.1h([c.iX+c.I-c.BV-d,C.iY+i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(c.iX+c.I-c.BV-d),1b])):C.A.C9&&1c!==ZC.1d(v)?(b=C.A.A.A7[C.A.L-1])&&b.S[C.L]&&g.1h([ZC.1k(C.iX),b.S[C.L].iY+i]):(g.1h([ZC.1k(C.iX),1b]),B.1h([ZC.1k(C.iX),1b]),B.1h([ZC.1k(C.iX+c.A9/2),1b]));1p;1i"4Z":if(1c!==ZC.1d(C.A.D3)&&(B=C.A.D3),1c!==ZC.1d(C.A.AG)&&(g=C.A.AG),C.A.D3=[],C.A.AG=[],1c!==ZC.1d(C.A.D)&&(f=C.A.D),C.A.D=[],u[C.L+1]){1a X=[],y=[];1j(r=-1;r<3;r++)u[C.L+r]?(C.A.FR(C.L+r,2).2I(),A?(X.1h(u[C.L+r].iX),y.1h(u[C.L+r].iY)):(X.1h(u[C.L+r].iY),y.1h(u[C.L+r].iX))):0===X.1f?A?(y.1h(C.iY),X.1h(C.iX)):(y.1h(C.iX),X.1h(C.iY)):(X.1h(X[X.1f-1]),y.1h(y[y.1f-1]));1a Y=ZC.2l(y[2]-y[1]),L=ZC.AO.YS(C.A.QL,X,Y);if(C.A.VF){1j(0===g.1f&&(C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[0][0]*Y),1b])),r=0;r<ZC.1k(L.1f/2)+(1===C.N.C5?1:0);r++)L[r]&&(A?f.1h([L[r][1],C.iY+(c.AR?1:-1)*L[r][0]*Y]):f.1h([C.iX+(c.AR?-1:1)*L[r][0]*Y,L[r][1]]));1j(r=0;r<ZC.1k(L.1f/2)+(1===C.N.HX?1:0);r++)B.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),L[r][1]-i]),g.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),L[r][1]]);1j(C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(g[g.1f-1][0]),1b]),s=1===C.HX?ZC.CV(2,ZC.1k(L.1f/2)):1,r=ZC.1k(L.1f/2)-1,o=L.1f;r<o;r++)L[r]&&(A?C.A.D.1h([L[r][1],C.iY+(c.AR?1:-1)*L[r][0]*Y]):C.A.D.1h([C.iX+(c.AR?-1:1)*L[r][0]*Y,L[r][1]]));1j(r=ZC.1k(L.1f/2)-s,o=L.1f;r<o;r++)0===C.A.AG.1f&&(C.A.C9&&1c!==ZC.1d(v)||C.A.AG.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),1b])),C.A.AG.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),L[r][1]]),C.A.D3.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),L[r][1]-i])}1u{1j(0===g.1f&&(C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[0][0]*Y),1b])),r=0;r<L.1f;r++)A?f.1h([L[r][1],C.iY+(c.AR?1:-1)*L[r][0]*Y]):f.1h([C.iX+(c.AR?-1:1)*L[r][0]*Y,L[r][1]]);1j(r=0;r<L.1f;r++)B.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),L[r][1]-i]),g.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),L[r][1]]);1j(C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(g[g.1f-1][0]),1b]),s=1===C.HX?ZC.CV(2,ZC.1k(L.1f/2)):1,r=L.1f,o=L.1f;r<o;r++)A?C.A.D.1h([L[r][1],C.iY+(c.AR?1:-1)*L[r][0]*Y]):C.A.D.1h([C.iX+(c.AR?-1:1)*L[r][0]*Y,L[r][1]]);1j(r=L.1f-s,o=L.1f;r<o;r++)0===C.A.AG.1f&&(C.A.C9&&1c!==ZC.1d(v)||C.A.AG.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),1b])),C.A.AG.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),L[r][1]]),C.A.D3.1h([ZC.1k(C.iX+(c.AR?-1:1)*L[r][0]*Y),L[r][1]-i])}}1u g.1f>0&&g.1h([g[g.1f-1][0],1b]);1p;1i"ec":if(D)1R(C.A.FR(C.L-m,0).2I(),l=ZC.AO.JZ(u[C.L-m].iX,u[C.L-m].iY,u[C.L].iX,u[C.L].iY),C.A.SU){2q:B.1h([ZC.1k(l[0])-a,C.iY-i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(l[0])-a,1b]),g.1h([ZC.1k(l[0])-a,C.iY+i]),f.1h(A?[u[C.L-m].iX,l[1]]:[l[0],u[C.L-m].iY]),f.1h(A?[C.iX,l[1]]:[l[0],C.iY]);1p;1i"fv":B.1h([ZC.1k(u[C.L-m].iX)-a,C.iY-i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(u[C.L-m].iX)-a,1b]),g.1h([ZC.1k(u[C.L-m].iX)-a,C.iY+i]),f.1h([u[C.L-m].iX,u[C.L-m].iY]),f.1h([u[C.L-m].iX,C.iY]);1p;1i"8R":B.1h([ZC.1k(C.iX)-a,C.iY-i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(C.iX)-a,1b]),g.1h([ZC.1k(C.iX)-a,C.iY+i])}1u c.ED||C.L!==c.X?C.A.C9&&1c!==ZC.1d(v)?(b=C.A.A.A7[C.A.L-1])&&b.S[C.L]&&g.1h([ZC.1k(C.iX),b.S[C.L].iY+i]):(g.1h([ZC.1k(C.iX),1b]),B.1h([ZC.1k(C.iX-c.A9/2),1b]),B.1h([ZC.1k(C.iX),1b])):c.AR?(C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(c.iX+c.I-c.BV-d),1b]),g.1h([ZC.1k(c.iX+c.I-c.BV-d),C.iY+i])):(C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(c.iX+c.A6+d),1b]),g.1h([ZC.1k(c.iX+c.A6+d),C.iY+i]));if(B.1h([ZC.1k(C.iX),C.iY-i]),g.1h([ZC.1k(C.iX),C.iY+i]),f.1h([C.iX,C.iY]),F)1R(C.A.FR(C.L+K,2).2I(),l=ZC.AO.JZ(u[C.L].iX,u[C.L].iY,u[C.L+K].iX,u[C.L+K].iY,C.N.C5),C.A.SU){2q:B.1h([ZC.1k(l[0]),C.iY-i]),g.1h([ZC.1k(l[0]),C.iY+i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(l[0]),1b]),f.1h(A?[C.iX,l[1]]:[l[0],C.iY]);1p;1i"fv":B.1h([ZC.1k(C.iX),C.iY-i]),g.1h([ZC.1k(C.iX),C.iY+i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(C.iX),1b]);1p;1i"8R":B.1h([ZC.1k(u[C.L+K].iX),C.iY-i]),g.1h([ZC.1k(u[C.L+K].iX),C.iY+i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(u[C.L+K].iX),1b]),f.1h([u[C.L+K].iX,C.iY]),f.1h([u[C.L+K].iX,u[C.L+K].iY])}1u C.L===c.A1?c.AR?(g.1h([c.iX+c.A6-d,C.iY+i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(c.iX+c.A6-d),1b])):(g.1h([c.iX+c.I-c.BV-d,C.iY+i]),C.A.C9&&1c!==ZC.1d(v)||g.1h([ZC.1k(c.iX+c.I-c.BV-d),1b])):C.A.C9&&1c!==ZC.1d(v)?(b=C.A.A.A7[C.A.L-1])&&b.S[C.L]&&g.1h([ZC.1k(C.iX),b.S[C.L].iY+i]):(g.1h([ZC.1k(C.iX),1b]),B.1h([ZC.1k(C.iX),1b]),B.1h([ZC.1k(C.iX+c.A9/2),1b]))}if(C.A.C9&&1c!==ZC.1d(v))1j(r=v.1f-1;r>=0;r--)g.1h(v[r]);if(C.bu({2W:f,9W:g}),"9t"!==C.C.MK&&(C.A.VN=C.A.VN.4z(f)),1c===ZC.1d(C.A.A.F3)&&(C.A.A.F3=[]),C.A.A.F3[C.L]=B,!e&&!C.C.AJ["3d"]){1a w=C.N=C.A.HY(C,C.N),M=C.C.K+ZC.1b[34]+C.C.K+ZC.1b[35]+C.A.L+ZC.1b[6];w.DI=M,w.K=C.K,C.A.I6&&C.GK(w);1a H,N=C.C.Q;if(0!==C.A.E3.1f||C.A.I6||1w C.A.lW===ZC.1b[31]||C.N.o.7a||C.C.KX?((H=1m DS(C.A)).1S(w),H.C5=C.A.HX):H=C.A.lW,C.GK(H),H.C5=ZC.1Y(H.o["2n-1N"]||"1"),H.CX=!1,H.LC=!0,H.AZ=0,H.AQ=0,H.EV=0,H.G9=0,H.Z=C.A.CL("bl",C.C.C9?0:1),H.D=g,H.CZ=[N.iX,N.iY,N.iX+N.I,N.iY+N.F],1c!==ZC.1d(t=C.A.E["2j-y"])&&(H.E["lO-1"]=t,H.CZ[1]=t),1c!==ZC.1d(t=C.A.E["1X-y"])&&(H.E["lO-3"]=t,H.CZ[3]=t),H.K=C.K+"-1N",C.A.GB||(H.E.r6=!0),ZC.CN.2I(Z,w),C.9n(w,f,g),C.A.GB&&!C.C.HK){1a O=1m DS(C),S={};O.1S(w),O.K=C.K,O.Z=C.A.CL("bl",2),O.C6=C.A.CL("bl",1),O.D=f;1a P=H,G={},T=[],k=[];O.D=f,S.2W=f,P.D=g,G.2W=g;1a J=C.A.LG,z=C.C.Q;O.C5=0,S.2n=w.C5,P.C5=0,G.2n=C.A.HX;1a R,Q=1n(e){1j(1a t=e?g:f,i=e?k:T,a=0;a<t.1f;a++)2===J?i[a]=[t[a][0],z.iY+C.C.Q.F/2]:3===J?i[a]=[t[a][0],z.iY-5]:4===J?i[a]=[t[a][0],z.iY+z.F+5]:5===J?i[a]=[z.iX-5,t[a][1]]:6===J?i[a]=[z.iX+z.I+5,t[a][1]]:7===J?i[a]=[z.iX+z.I/2,t[a][1]]:8===J?i[a]=[t[a][0]-z.I,t[a][1]]:9===J?i[a]=[t[a][0]+z.I,t[a][1]]:10===J?i[a]=[t[a][0],t[a][1]-z.F]:11===J?i[a]=[t[a][0],t[a][1]+z.F]:12===J?i[a]=[(t[0][0]+t[t.1f-1][0])/2,t[0][1]]:13===J&&(i[a]=[t[0][0],(t[0][1]+t[t.1f-1][1])/2]),J>1&&(e?(P.D=k,G.2W=g):(O.D=T,S.2W=f))};1j(R in Q(),Q(!0),C.A.FV)O[E8.GO[ZC.EC(R)]]=C.A.FV[R],S[ZC.EC(R)]=w[E8.GO[ZC.EC(R)]],P[E8.GO[ZC.EC(R)]]=C.A.FV[R],G[ZC.EC(R)]=w[E8.GO[ZC.EC(R)]];if(1c===ZC.1d(C.C.EJ)&&(C.C.EJ={}),1c===ZC.1d(C.C.T2)&&(C.C.T2={}),1c!==ZC.1d(C.C.EJ[C.A.L+"-"+C.L])){1j(R in C.C.EJ[C.A.L+"-"+C.L])O[E8.GO[ZC.EC(R)]]=C.C.EJ[C.A.L+"-"+C.L][R];1j(R in C.C.T2[C.A.L+"-"+C.L])P[E8.GO[ZC.EC(R)]]=C.C.T2[C.A.L+"-"+C.L][R]}C.C.EJ[C.A.L+"-"+C.L]={},ZC.2E(S,C.C.EJ[C.A.L+"-"+C.L]),C.C.T2[C.A.L+"-"+C.L]={},ZC.2E(G,C.C.T2[C.A.L+"-"+C.L]);1a W=1m E8(O,S,C.A.JI,C.A.LB,E8.RR[C.A.LF],1n(){U()});W.AV=C,W.OJ=1n(){C.MR(ZC.P.E6(C.A.CL("bl",1),C.H.AB))},W.IO=Z;1a V=1m E8(P,G,C.A.JI,C.A.LB,E8.RR[C.A.LF],1n(){});V.AV=C,C.L5(W,V)}1u H.1t(),0!==C.A.E3.1f||1w C.A.lW!==ZC.1b[31]||C.N.o.7a||C.C.KX||C.C.HK||(C.A.lW=H),ZC.CN.1t(Z,w,f),U()}}1n U(){!C.C.OI&&ZC.DQ(C.iX,c.iX-1,c.iX+c.I+1)&&ZC.DQ(C.iY,c.iY-1,c.iY+c.F+1)&&(C.ON(),C.MR(ZC.P.E6(C.A.CL("bl",1),C.H.AB)),C.A.U&&C.A.U.AL&&C.A.E.jJ!==C.K&&C.F7())}}9n(e,t,i){1a a=1g;if(a.C.BI&&a.C.BI.IQ&&a.A.RS){1a n,l=a.C.Q,r=a.C.BI,o=a.A.ag(i),s=1m DS(a.A);s.1S(e),s.CX=!0,s.LC=!0,s.AZ=0,s.AQ=0,s.EV=0,s.G9=0,s.C5=a.A.HX,s.CZ=[l.iX,l.iY,l.iX+l.I,l.iY+l.F],s.K=a.K+"-1N-2A",s.DI=a.A.K+"-2A",s.Z=r.Z;1a C=a.A.o["2A-3Y"];C&&(1c!==ZC.1d(C["2n-1N"])?(n=C.2n,C.2n=C["2n-1N"]):C.2n=s.C5,s.1C(C),s.1q(),1c!==ZC.1d(n)?C.2n=n:4s C.2n),s.D=o,s.1t();1a A,Z=a.A.ag(t);a.A.WX?A=a.A.WX:(A=1m CY(a),a.A.WX=A),A.1S(e),A.K=a.K+"-1y-2A",A.DI=a.A.K+"-2A";1a c=ZC.P.E6(r.Z,a.H.AB);A.AZ=1,C&&(A.1C(C),A.1q()),ZC.CN.1t(c,A,Z,1c,3)}}HZ(e){1a t=1g;ZC.3o||(t.A.OZ||t.LL({6v:e,1J:"1N",8S:1n(){1g.A0=t.A.BN[2],1g.AC=t.A.BN[2],1g.D=t.5K("9W")||[]},c9:1n(){1g.AZ=0,1g.AQ=0,1g.C5=t.A.HX;1a e=t.C.Q;1g.CZ=[e.iX,e.iY,e.iX+e.I,e.iY+e.F]}}),t.YE(e),t.A.RD&&t.SA(e))}}1O ZW 2k MG{2I(){1g.RU()}OF(){1a e=1g;e.1t(!0);1a t=e.C.BK(e.A.BT("v")[0]);1l[e.iX+e.I/2,e.iY+(t.AR?e.F:0),{cW:e,3G:!0}]}HD(e){1a t=1g,i="1v-4R",a=t.C.BK(t.A.BT("v")[0]),n=t.AE>=a.H3&&!a.AR||t.AE<a.H3&&a.AR?1:-1;e=t.yb(e),1c!==ZC.1d(e.o[ZC.1b[7]])&&(i=e.o[ZC.1b[7]]);1a l=e.I,r=e.F,o=t.iX+t.I/2-l/2,s=t.bE-r/2,C=e.AA%180==90,A=C?l/2:r/2,Z=C?l/2-r/2:0;1R(i){1i"1v-4R":1i"1v":s-=n*(A+5);1p;1i"1v-in":s+=n*(A+5);1p;1i"6r":s+=n*(t.F/2);1p;1i"2c-in":s+=n*(t.F-A-5);1p;1i"2c-4R":1i"2c":s+=n*(t.F+r/2+5)}if(1c!==ZC.1d(e.o.x)||1c!==ZC.1d(e.o.y))1c!==ZC.1d(e.o.x)&&(o=e.iX),1c!==ZC.1d(e.o.y)&&(s=e.iY);1u{1a c=ZC.7P(t.A.o.a1,5);if(!ZC.AO.aV(t,t.C.Q,c))1l[-1,-1]}1a p=e.o.a1||[t.C.Q.E2,t.C.Q.E1,t.C.Q.DM,t.C.Q.DY];1l t.C.AJ["3d"]||(o=ZC.BO(t.C.Q.iX+0-p[3],o),o=ZC.CV(t.C.Q.iX+t.C.Q.I-l-0+p[1],o),s-Z<t.C.Q.iY+5-p[0]&&(s=t.C.Q.iY+5-p[0]+Z),s+Z>t.C.Q.iY+t.C.Q.F-r-5+p[2]&&(s=t.C.Q.iY+t.C.Q.F-r-5+p[2]-Z)),[ZC.1k(o),ZC.1k(s)]}8c(){1a e=1E.8c();1l 1g.e2(e,"185","I"),e}1t(e){1a t,i=1g;if(1E.1t(),!i.C.AJ["3d"]){1w e===ZC.1b[31]&&(e=!1);1a a=i.A.B1,n=i.A.CH;i.2I();1a l,r,o,s,C,A=n.H3,Z=n.AX(A),c=i.A.PN(),p=c.A9,u=c.ES,h=c.CC,1b=c.CP,d=c.F4,f=c.D0,g=c.EZ;if(e?u=i.A.E["2r-"+i.L+"-2U-2Y"]:i.A.E["2r-"+i.L+"-2U-2Y"]=c.ES,i.A.C9){l=0;1j(1a B=i.A.A.KF[u],v=0;v<B.1f;v++){1a E=i.A.A.A7[B[v]].S[i.L];E&&(l+=E.AE)}}1a b=1,m=1;if(i.A.C9&&(i.CM!==i.AE&&(b=(l-i.CM+i.AE)/l),m=(l-i.CM)/l),n.AR){1a K=b;b=m,m=K}i.A.M1&&(u=i.L);1a D=i.iX-p/2+h+u*(f+d)-u*g;if(D=ZC.5l(D,i.iX-p/2+h,i.iX+p/2-1b),i.A.D0>0){1a F=f;(f=i.A.D0)<=1&&(f*=F),D+=(F-f)/2}1a I=f,x=i.iY,X=1c!==ZC.1d(i.A.M4[i.L])?i.A.M4[i.L]:0;if(x=i.A.C9&&"100%"===i.A.KT?n.AX(100*(i.CM+X)/i.A.A.FA[i.L]["%6j-"+i.A.DV]):n.AX(i.CM+X),i.A.C9){r="100%"===i.A.KT?n.AX(100*(i.CM-i.AE+X)/i.A.A.FA[i.L]["%6j-"+i.A.DV]):n.AX(i.CM-i.AE+X),x=ZC.1k(x),r=ZC.1k(r);1a y=!n.AR&&i.AE>=0||n.AR&&i.AE<=0?-1:1,Y=0,L=0;""!==i.A.QD?(Y=i.US(i.A.QD)[0],L=0):Y=i.A.AQ,""!==i.A.NX?(L=i.US(i.A.NX)[0],Y=0):L=i.A.AQ,Y!==L&&(y=0),o=x-r+y*Y,i.AE<0&&(x=r),n.AR?o>0&&(o=ZC.2l(o),x=r):o<0&&(o=ZC.2l(o),x=r-o),n.AR&&i.AE<0&&(o+=L)}1u r=n.AX(X),(o=x-r)<0?(o=ZC.2l(o),x=r-o):x=r;if(i.A.TZ&&i.A.C9&&i.A.L>0&&i.A.A.A7[i.A.L-1].S[i.L]&&0===i.A.A.A7[i.A.L-1].S[i.L].AE&&(o-=1,x+=n.AR?1:-1),o<2&&(i.AE>0||i.A.TZ)&&(o=1,n.AR?i.A.C9&&i.A.L>0&&(x-=1):i.A.C9?0===i.A.L&&(x-=1):x=X?r-1:Z-2),i.I=I,i.F=o,i.iX=D,i.iY=x,n.AR?i.AE>=n.H3?i.bE=x+i.F:i.bE=x:i.AE>=n.H3?i.bE=x:i.bE=x+i.F,i.C.CT){1a w="6r";i.C.CT.o.1Q&&1c!==ZC.1d(t=i.C.CT.o.1Q.ic)&&(w=t),1c!==ZC.1d(i.A.o["2i-1Q"])&&1c!==ZC.1d(t=i.A.o["2i-1Q"].ic)&&(w=t),"2r"===w&&(i.E.ha=i.iX+i.I/2)}if(!e){1a M;i.bu({x:D,y:x,w:I,h:o});1a H=!0;if("2a"!==i.A.J2||i.C.K6[i.A.L]||i.C.KX||i.A.T4&&i.A.T4[i.L]?(M=i.N=i.A.HY(i,i.N),H=!1):M=i.N,(0!==i.A.E3.1f||i.A.I6||i.N.o.7a||i.C.KX)&&(H=!1),i.AL){1a N;1R(i.A.CS){2q:0!==i.A.E3.1f||i.A.I6||1w i.A.W3===ZC.1b[31]||i.N.o.7a||i.C.KX?(N=1m I4(i.A)).1S(M):N=i.A.W3,i.A.I6&&(i.GK(N),N.1q()),N.FC=i.A.FC,N.K=i.K,N.iX=D,N.iY=x,N.I=i.I,N.F=i.F,a.A9<5&&N.I<5?(N.I=ZC.BO(1,N.I)+1,N.OU=!1,N.CX=!1):(N.OU=!0,N.CX=!0),N.I<5&&a.A1!==a.X&&i.C.Q.I/(a.A1-a.X)<1&&(N.QT=!0);1p;1i"b5":1i"eZ":0!==i.A.E3.1f||i.A.I6||1w i.A.W3===ZC.1b[31]||i.N.o.7a||i.C.KX?(N=1m DS(i.A)).1S(M):N=i.A.W3,i.A.I6&&(i.GK(N),N.1q()),N.K=i.K,n.AR&&!i.A.C9?(C=i.AE>=0?0:i.F,s=i.AE>=0?i.F:0):(C=i.AE>=0?i.F:0,s=i.AE>=0?0:i.F),N.D=[],N.D.1h([D+i.I/2-b*i.I/2,x+C],[D+i.I/2+b*i.I/2,x+C]),i.A.C9&&0!==m?N.D.1h([D+i.I/2+m*i.I/2,x+s],[D+i.I/2-m*i.I/2,x+s]):N.D.1h([D+i.I/2,x+s]),N.D.1h([N.D[0][0],N.D[0][1]]),i.bu({2W:N.D}),N.iX=D,N.iY=x,N.9g(2)}N.Z=i.A.CL("bl",1),N.C6=i.A.CL("bl",0),i.9n(M,H);1a O=i.C.K+ZC.1b[34]+i.C.K+ZC.1b[35]+i.A.L+ZC.1b[6];N.DI=O;1a S=ZC.7P(i.A.o.a1,5),P=1n(){if(1w i.6D!==ZC.1b[31]&&i.6D(),i.MR(ZC.P.E6(N.Z,i.H.AB)),ZC.AO.aV(i,i.C.Q,S)&&i.A.FY&&-1===ZC.AT(i.H.KY,ZC.1b[39])){1a e=I<5?.5:-.5,t=o<3?.5:-.5,a=ZC.P.GF("5t",i.A.E5,N.IX)+\'1O="\'+O+\'" id="\'+i.K+ZC.1b[30]+ZC.1k(D+i.A.BJ+ZC.3B-e)+","+ZC.1k(x+i.A.BC+ZC.3B-t)+","+ZC.1k(D+i.A.BJ+I+ZC.3B+e)+","+ZC.1k(x+i.A.BC+o+ZC.3B+t)+\'" />\';i.A.A.HV.1h(a)}i.A.U&&i.A.U.AL&&i.F7()};if(i.A.GB&&!i.C.HK){1a G=N,T={};G.iX=D,G.iY=x,G.I=I,G.F=o,T.x=D,T.y=x,T.1s=I,T.1M=o;1a k,J=i.A.LG,z=i.C.Q;1j(k in G.C5=0,T.2n=M.C5,2===J?(G.iY=z.iY+z.F/2,G.F=1,T.1M=i.F,T.y=x):3===J?(G.iY=z.iY,G.F=1,T.1M=i.F,T.y=x):4===J?(G.iY=z.iY+z.F,G.F=1,T.1M=i.F,T.y=x):5===J?(G.iX=z.iX,G.I=1,T.1s=i.I,T.x=D):6===J?(G.iX=z.iX+z.I,G.I=1,T.1s=i.I,T.x=D):7===J?(G.iX=z.iX+z.I/2,G.I=1,T.1s=i.I,T.x=D):8===J?(G.iX=D-z.I,T.x=D):9===J?(G.iX=D+z.I,T.x=D):10===J?(G.iY=x-z.F,T.y=x):11===J?(G.iY=x+z.F,T.y=x):12===J?(G.I=1,T.1s=i.I):13===J&&(G.F=1,T.1M=i.F),i.A.FV)G[E8.GO[ZC.EC(k)]]=i.A.FV[k],T[ZC.EC(k)]=M[E8.GO[ZC.EC(k)]];if(1c===ZC.1d(i.C.EJ)&&(i.C.EJ={}),1c!==ZC.1d(i.C.EJ[i.A.L+"-"+i.L]))1j(k in i.C.EJ[i.A.L+"-"+i.L])G[E8.GO[ZC.EC(k)]]=i.C.EJ[i.A.L+"-"+i.L][k];if(i.C.EJ[i.A.L+"-"+i.L]={},ZC.2E(T,i.C.EJ[i.A.L+"-"+i.L]),ZC.AO.aV(i,i.C.Q,S)){1a R=1m E8(G,T,i.A.JI,i.A.LB,E8.RR[i.A.LF],1n(){P()});R.AV=i,R.OJ=1n(){i.MR(ZC.P.E6(N.Z,i.H.AB))},i.L5(R)}}1u{if(N.AL||0===i.A.E3.1f&&!i.A.I6)if(i.A.WJ||(i.A.WJ={iX:N.iX,iY:N.iY,F:N.F}),i.A.jQ)if(i.A.SK)if(i.A.SK.el&&"184"===i.A.SK.el.8b.5E()){1a Q=!1;if(i.A.QJ&&i.A.WJ&&ZC.2l(N.iX-i.A.WJ.iX)<.75&&ZC.2l(N.iY-i.A.WJ.iY)<1.5&&ZC.2l(N.F-i.A.WJ.F)<1.5&&(Q=!0),!Q){i.A.WJ={iX:N.iX,iY:N.iY,F:N.F};1a W=i.A.SK.el.k4(!1);W.4m("id",i.K),W.4m("x",i.iX),W.4m("y",i.iY),W.4m(ZC.1b[20],i.F),i.A.SK.df?i.H.G1[N.Z.id].3b(W):i.A.SK.el.6q.3b(W)}}1u N.1t();1u N.1t(),i.A.SK={id:N.K+"-2R"},1o.3I.jZ&&2g.dV&&i.H.G1&&i.H.G1[N.Z.id]?(i.A.SK.df=!0,i.A.SK.el=i.H.G1[N.Z.id].dV("#"+N.K+"-2R")):(i.A.SK.df=!1,i.A.SK.el=ZC.AK(i.A.SK.id));1u ZC.AO.aV(i,i.C.Q,S)&&N.1t();N.AL&&P()}"2F"===i.H.AB&&i.A.jC(i.A,i.K+"-2R",i.LI()),0!==i.A.E3.1f||i.A.I6||1w i.A.W3!==ZC.1b[31]||i.N.o.7a||i.C.KX||i.A.GB||(i.A.W3=N)}}}}9n(e,t){1a i,a,n=1g;if(n.C.BI&&n.C.BI.IQ&&n.A.RS){1a l=n.C.Q,r=n.C.BI,o=r.B5,s=(n.iX-l.iX)/l.I,C=(n.iY-l.iY)/l.F;n.A.qx?i=n.A.qx:(i=1m I4(n.A),n.A.qx=i,i.1S(e),(a=n.A.o["2A-3Y"])&&(i.1C(a),i.1q())),t||(i.1S(e),(a=n.A.o["2A-3Y"])&&(i.1C(a),i.1q())),i.K=n.K+"-2A",i.DI=n.A.K+"-2A",i.iX=o.iX+o.AQ+s*(o.I-2*o.AQ),i.iY=o.iY+o.AQ+C*(o.F-2*o.AQ),i.I=n.I/l.I*(o.I-2*o.AQ),i.F=n.F/l.F*(o.F-2*o.AQ),o.I/n.A.S.1f<10?(i.I=i.I+.5,i.OU=!1,i.CX=!1):(i.OU=!0,i.CX=!0),i.Z=i.C6=r.Z,i.1t()}}HZ(e){1a t=1g;if(e=e||"2N",!ZC.3o){1a i="";1R(t.A.CS){2q:i="3C";1p;1i"b5":i="2S"}t.LL({6v:e,1J:i,8S:1n(){1g.A0=t.A.BN[3],1g.B8=t.A.BN[1],1g.BU=t.A.BN[1],1g.AC=t.A.BN[2]},c9:1n(){1R(t.A.CS){2q:1g.iX=t.5K("x"),1g.iY=t.5K("y"),1g.I=t.5K("w"),1g.F=t.5K("h");1a e=t.C.Q;1g.iY<e.iY&&(1g.F=1g.F-(e.iY-1g.iY),1g.iY=e.iY),1g.iY+1g.F>e.iY+e.F&&(1g.F=e.iY+e.F-1g.iY);1p;1i"b5":1i"eZ":1g.D=t.5K("2W")}}}),t.MR(ZC.P.E6(t.C.K+ZC.1b[22],t.H.AB),!0),t.A.RO=1c}}}1O ZV 2k MG{2I(){1g.RU()}OF(){1a e=1g;e.1t(!0);1a t=e.C.BK(e.A.BT("v")[0]);1l[e.iX+(t.AR?0:e.I),e.iY+e.F/2,{cW:e,3G:!0}]}HD(e){1a t=1g,i="1v-4R",a=t.C.BK(t.A.BT("v")[0]),n=t.AE>=a.H3&&!a.AR||t.AE<a.H3&&a.AR?-1:1;1c!==ZC.1d(e.o[ZC.1b[7]])&&(i=e.o[ZC.1b[7]]);1a l=e.I,r=e.F,o=t.bf-l/2,s=t.iY+t.F/2-r/2,C=e.AA%180==90?r/2:l/2;1R(i){1i"1v-4R":1i"1v":o-=n*(C+5);1p;1i"1v-in":o+=n*(C+5);1p;1i"6r":o+=n*(t.I/2);1p;1i"2c-in":o+=n*(t.I-C-5);1p;1i"2c-4R":1i"2c":o+=n*(t.I+C+5)}if(1c!==ZC.1d(e.o.x)||1c!==ZC.1d(e.o.y))1c!==ZC.1d(e.o.x)&&(o=e.iX),1c!==ZC.1d(e.o.y)&&(s=e.iY);1u{1a A=ZC.7P(t.A.o.a1,5);if(!ZC.AO.aV(t,t.C.Q,A))1l[-1,-1]}1a Z=e.o.a1||[t.C.Q.E2,t.C.Q.E1,t.C.Q.DM,t.C.Q.DY];1l t.C.AJ["3d"]||(o=ZC.BO(t.C.Q.iX+5-Z[3],o),o=ZC.CV(t.C.Q.iX+t.C.Q.I-l-5+Z[1],o),s=ZC.BO(t.C.Q.iY+0-Z[0],s),s=ZC.CV(t.C.Q.iY+t.C.Q.F-r/2-0+Z[2],s)),[ZC.1k(o),ZC.1k(s)]}1t(e){1a t=1g;if(1E.1t(),!t.C.AJ["3d"]){1w e===ZC.1b[31]&&(e=!1);1a i=t.A.B1,a=t.A.CH;t.2I();1a n,l,r,o,s,C=t.A.PN(),A=C.A9,Z=C.ES,c=C.CC,p=C.CP,u=C.F4,h=C.D0,1b=C.EZ;if(e?Z=t.A.E["2r-"+t.L+"-2U-2Y"]:t.A.E["2r-"+t.L+"-2U-2Y"]=C.ES,t.A.C9){n=0;1j(1a d=t.A.A.KF[Z],f=0;f<d.1f;f++){1a g=t.A.A.A7[d[f]].S[t.L];g&&(n+=g.AE)}}1a B=1,v=1;if(t.A.C9&&(t.CM!==t.AE&&(B=(n-t.CM+t.AE)/n),v=(n-t.CM)/n),a.AR){1a E=B;B=v,v=E}t.A.M1&&(Z=t.L);1a b=t.iY-A/2+c+Z*(h+u)-Z*1b;if(b=ZC.5l(b,t.iY-A/2+c,t.iY+A/2-p),t.A.D0>0){1a m=h;(h=t.A.D0)<=1&&(h*=m),b+=(m-h)/2}1a K,D=h,F=t.iX,I=1c!==ZC.1d(t.A.M4[t.L])?t.A.M4[t.L]:0;if(F=t.A.C9&&"100%"===t.A.KT?a.AX(100*(t.CM+I)/t.A.A.FA[t.L]["%6j-"+t.A.DV]):a.AX(t.CM+I),t.A.C9){l="100%"===t.A.KT?a.AX(100*(t.CM-t.AE+I)/t.A.A.FA[t.L]["%6j-"+t.A.DV]):a.AX(t.CM-t.AE+I),F=ZC.1k(F),l=ZC.1k(l);1a x=!a.AR&&t.AE>=0||a.AR&&t.AE<=0?1:-1,X=0,y=0;""!==t.A.OO?(X=t.US(t.A.OO)[0],y=0):X=t.A.AQ,""!==t.A.PD?(y=t.US(t.A.PD)[0],X=0):y=t.A.AQ,X!==y&&(x=0),r=F-l+x*X,t.AE>0?F=l:r=ZC.2l(r),a.AR?r>0?(r=ZC.2l(r),F=l):(r=ZC.2l(r),F-=r):r<0&&(r=ZC.2l(r),F=l-r)}1u l=a.AX(I),(r=F-l)<0?(r=ZC.2l(r),F=l-r):F=l;if(t.A.TZ&&t.A.C9&&t.A.L>0&&t.A.A.A7[t.A.L-1].S[t.L]&&0===t.A.A.A7[t.A.L-1].S[t.L].AE&&(r-=1,F+=a.AR?-1:1),r<1&&(t.AE>0||t.A.TZ)&&(r=1,a.AR?t.A.C9?0===t.A.L&&(F-=1):F-=2:t.A.L>0&&t.A.C9&&(F-=1)),t.I=r,t.F=D,t.iX=F,t.iY=b,a.AR?t.AE>=a.H3?t.bf=F:t.bf=F+t.I:t.AE>=a.H3?t.bf=F+t.I:t.bf=F,!e)if(t.bu({x:F,y:b,w:r,h:D}),K="2a"!==t.A.J2||t.C.K6[t.A.L]||t.C.KX||t.A.T4&&t.A.T4[t.L]?t.N=t.A.HY(t,t.N):t.N,t.AL){1a Y;1R(t.A.CS){2q:0!==t.A.E3.1f||t.A.I6||1w t.A.W3===ZC.1b[31]||t.N.o.7a||t.C.KX?(Y=1m I4(t.A)).1S(K):Y=t.A.W3,t.A.I6&&(t.GK(Y),Y.1q()),Y.FC=t.A.FC,Y.K=t.K,Y.iX=F,Y.iY=b,Y.I=t.I,Y.F=t.F,i.A9<5&&Y.F<5?(Y.F=ZC.BO(1,Y.F)+1,Y.OU=!1,Y.CX=!1):(Y.OU=!0,Y.CX=!0),Y.F<5&&i.A1!==i.X&&t.C.Q.F/(i.A1-i.X)<1&&(Y.QT=!0);1p;1i"b5":1i"eZ":0!==t.A.E3.1f||t.A.I6||1w t.A.W3===ZC.1b[31]||t.N.o.7a||t.C.KX?(Y=1m DS(t.A)).1S(K):Y=t.A.W3,t.A.I6&&(t.GK(Y),Y.1q()),Y.K=t.K,a.AR&&!t.A.C9?(s=t.AE>=0?t.I:0,o=t.AE>=0?0:t.I):(s=t.AE>=0?0:t.I,o=t.AE>=0?t.I:0),Y.D=[],Y.D.1h([F+s,b+t.F/2-B*t.F/2],[F+s,b+t.F/2+B*t.F/2]),t.A.C9&&0!==v?Y.D.1h([F+o,b+t.F/2+v*t.F/2],[F+o,b+t.F/2-v*t.F/2]):Y.D.1h([F+o,b+t.F/2]),Y.D.1h([Y.D[0][0],Y.D[0][1]]),t.E.2W=Y.D,Y.iX=F,Y.iY=b,Y.9g(2)}Y.Z=t.A.CL("bl",1),Y.C6=t.A.CL("bl",0);1a L=t.C.K+ZC.1b[34]+t.C.K+ZC.1b[35]+t.A.L+ZC.1b[6];Y.DI=L;1a w=ZC.7P(t.A.o.a1,5),M=1n(){if(1w t.6D!==ZC.1b[31]&&t.6D(),t.MR(ZC.P.E6(Y.Z,t.H.AB)),ZC.AO.aV(t,t.C.Q,w)&&t.A.FY&&-1===ZC.AT(t.H.KY,ZC.1b[39])){1a e=r<3?.5:-.5,i=D<5?.5:-.5,a=ZC.P.GF("5t",t.A.E5,Y.IX)+\'1O="\'+L+\'" id="\'+t.K+ZC.1b[30]+ZC.1k(F+t.A.BJ+ZC.3B-e)+","+ZC.1k(b+t.A.BC+ZC.3B-i)+","+ZC.1k(F+t.A.BJ+r+ZC.3B+e)+","+ZC.1k(b+t.A.BC+D+ZC.3B+i)+\'" />\';t.A.A.HV.1h(a)}t.A.U&&t.A.U.AL&&t.F7()};if(t.A.GB&&!t.C.HK){1a H=Y,N={};H.iX=F,H.iY=b,H.I=r,H.F=D,N.x=F,N.y=b,N.1s=r,N.1M=D;1a O,S=t.A.LG,P=t.C.Q;1j(O in H.C5=0,N.2n=K.C5,2===S?(H.iX=P.iX+P.I/2,H.I=1,N.1s=t.I,N.x=F):3===S?(H.iX=P.iX+P.I,H.I=1,N.1s=t.I,N.x=F):4===S?(H.iX=P.iX,H.I=1,N.1s=t.I,N.x=F):5===S?(H.iY=P.iY+P.F,H.F=1,N.1M=t.F,N.y=b):6===S?(H.iY=P.iY,H.F=1,N.1M=t.F,N.y=b):7===S?(H.iY=P.iY+P.F/2,H.F=1,N.1M=t.F,N.y=b):8===S?(H.iY=b+P.F,N.y=b):9===S?(H.iY=b-P.F,N.y=b):10===S?(H.iX=F+P.I,N.x=F):11===S?(H.iX=F-P.I,N.x=F):12===S?(H.F=1,N.1M=t.F):13===S&&(H.I=1,N.1s=t.I),t.A.FV)H[E8.GO[ZC.EC(O)]]=t.A.FV[O],N[ZC.EC(O)]=t.N[E8.GO[ZC.EC(O)]];if(1c===ZC.1d(t.C.EJ)&&(t.C.EJ={}),1c!==ZC.1d(t.C.EJ[t.A.L+"-"+t.L]))1j(O in t.C.EJ[t.A.L+"-"+t.L])H[E8.GO[ZC.EC(O)]]=t.C.EJ[t.A.L+"-"+t.L][O];if(t.C.EJ[t.A.L+"-"+t.L]={},ZC.2E(N,t.C.EJ[t.A.L+"-"+t.L]),ZC.AO.aV(t,t.C.Q,w)){1a G=1m E8(H,N,t.A.JI,t.A.LB,E8.RR[t.A.LF],1n(){M()});G.AV=t,G.OJ=1n(){t.MR(ZC.P.E6(Y.Z,t.H.AB))},t.L5(G)}}1u(Y.AL||0===t.A.E3.1f&&!t.A.I6)&&ZC.AO.aV(t,t.C.Q,w)&&Y.1t(),Y.AL&&M();"2F"===t.H.AB&&t.A.jC(t.A,t.K+"-2R",t.LI()),0!==t.A.E3.1f||t.A.I6||1w t.A.W3!==ZC.1b[31]||t.N.o.7a||t.C.KX||t.A.GB||(t.A.W3=Y)}}}HZ(e){1a t=1g;if(!ZC.3o){1a i="";1R(t.A.CS){2q:i="3C";1p;1i"b5":i="2S"}t.LL({6v:e,1J:i,8S:1n(){1g.B8=t.A.BN[1],1g.BU=t.A.BN[1],1g.A0=t.A.BN[3],1g.AC=t.A.BN[2]},c9:1n(){1R(t.A.CS){2q:1g.iX=t.5K("x"),1g.iY=t.5K("y"),1g.I=t.5K("w"),1g.F=t.5K("h");1a e=t.C.Q;1g.iX<e.iX&&(1g.I=1g.I-(e.iX-1g.iX),1g.iX=e.iX),1g.iX+1g.I>e.iX+e.I&&(1g.I=e.iX+e.I-1g.iX);1p;1i"b5":1i"eZ":1g.D=t.5K("2W")}}}),t.MR(ZC.P.E6(t.C.K+ZC.1b[22],t.H.AB),!0),t.A.RO=1c}}}1O y4 2k MG{2I(){1a e=1g,t=e.A.B1,i=e.A.CH,a=[t.X,t.A1,i.X,i.A1];if(e.JO!==a){if("6y"===e.A.AF){if(e.A.M1&&e.A.QC){1a n=ZC.AO.WT(e.A.QC[0],e.A.QC[1]),l=(e.BY-n[0])/(n[1]-n[0]);e.iX=t.H1(e.A.RE)-t.A9/2+e.A.RX+l*(t.A9-2*e.A.RX)}1u e.iX=t.AX(e.BY);e.iY=i.AX(e.AE)}1u e.iY=t.AX(e.BY),e.iX=i.AX(e.AE);e.JO=a}e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0)}1q(){1E.1q(),1g.o[ZC.1b[9]]3F 3N||(1g.BY=1g.L)}J9(){1l{1r:"-1"===1g.A.A2.A0?1g.N.A0:1g.A.A2.A0}}9Q(e,t){1l 1E.9Q(e,t,1g.NG.AI)}KC(){1l{"1W-1r":"-1"===1g.A.A2.AC?1g.N.AC:1g.A.A2.AC,"1G-1r":"-1"===1g.A.A2.AC?1g.N.AC:1g.A.A2.AC,1r:1g.N.C0}}1t(e){1a t=1g;1E.1t();1a i=t.A.B1,a=t.A.CH;t.2I(),e||(i.D8?ZC.DQ(t.iX,a.iX+(a.AR?a.BV:a.A6)-1,a.iX+a.I-(a.AR?a.A6:a.BV)+1)&&ZC.DQ(t.iY,i.iY+(i.AR?i.BV:i.A6)-1,i.iY+i.F-(i.AR?i.A6:i.BV)+1)&&t.ON(!1,!0):ZC.DQ(t.iX,i.iX+(i.AR?i.BV:i.A6)-1,i.iX+i.I-(i.AR?i.A6:i.BV)+1)&&ZC.DQ(t.iY,a.iY+(a.AR?a.A6:a.BV)-1,a.iY+a.F-(a.AR?a.BV:a.A6)+1)&&t.ON(!1,!0))}HZ(e){ZC.3o||1g.SA(e)}}1O y3 2k MG{2G(e){1E(e),1g.SY=1c}1q(){1E.1q(),1g.o[ZC.1b[9]]3F 3N||(1g.BY=1g.L),1g.o[ZC.1b[9]]3F 3N&&1c!==ZC.1d(1g.o[ZC.1b[9]][2])?1g.SY=ZC.1Y(1g.o[ZC.1b[9]][2]):1g.SY=2}J9(){1l{1r:"-1"===1g.A.A2.A0?1g.N.A0:1g.A.A2.A0}}9Q(e,t){1a i=1g.A.jG(ZC.2l(1g.SY));1l 1E.9Q(e,t,i)}KC(){1l{"1W-1r":"-1"===1g.A.A2.AC?1g.N.AC:1g.A.A2.AC,"1G-1r":"-1"===1g.A.A2.AC?1g.N.AC:1g.A.A2.AC,1r:1g.N.C0}}EW(e,t,i,a){1a n=1g,l=n.A.LT();ZC.2E(t,l);1a r=ZC.AN.GH(n.SY,l);1l n.CR=[["%v0",n.BY],["%v1",n.AE],["%v2",r],["%2r-2e-1U",r]],e=1E.EW(e,t,i,a)}2I(){1a e=1g,t=e.A.B1,i=e.A.CH,a=[t.X,t.A1,i.X,i.A1];if(e.JO!==a){if("5i"===e.A.AF){if(e.A.M1&&e.A.QC){1a n=ZC.AO.WT(e.A.QC[0],e.A.QC[1]),l=(e.BY-n[0])/(n[1]-n[0]);e.iX=t.H1(e.A.RE)-t.A9/2+e.A.RX+l*(t.A9-2*e.A.RX)}1u e.iX=t.AX(e.BY);e.iY=i.AX(e.AE)}1u e.iY=t.AX(e.BY),e.iX=i.AX(e.AE);e.JO=a}e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0)}HD(e){1a t,i=1g,a="3i";1c!==ZC.1d(t=e.o[ZC.1b[7]])&&(a=t);1a n=e.I,l=e.F,r=i.E["1Q.2e"],o=i.iX-n/2,s=i.iY-l/2,C=0,A=0;1R(a){1i"1v":s-=l/2+r,A=i.iY-i.C.Q.iY+r;1p;1i"2c":s+=l/2+r,A=i.C.Q.iY+i.C.Q.F-i.iY+r;1p;1i"1K":o-=n/2+r,C=i.iX-i.C.Q.iX+r;1p;1i"2z":o+=n/2+r,C=i.C.Q.iX+i.C.Q.I-i.iX+r}1l 1c!==ZC.1d(e.o.x)&&(o=e.iX),1c!==ZC.1d(e.o.y)&&(s=e.iY),o<i.C.Q.iX&&(o=i.C.Q.iX+C),o+n>i.C.Q.iX+i.C.Q.I&&(o=i.C.Q.iX+i.C.Q.I-n-C),s<i.C.Q.iY&&(s=i.C.Q.iY+A),s+l>i.C.Q.iY+i.C.Q.F&&(s=i.C.Q.iY+i.C.Q.F-l-A),[ZC.1k(o),ZC.1k(s)]}1t(e){1a t=1g;1w e===ZC.1b[31]&&(e=!1),1E.1t();1a i=t.A.B1,a=t.A.CH;t.2I(),t.E["1Q.2e"]=t.A.jG(ZC.2l(t.SY)),e||(i.D8?ZC.DQ(t.iX,a.iX+(a.AR?a.BV:a.A6)-1,a.iX+a.I-(a.AR?a.A6:a.BV)+1)&&ZC.DQ(t.iY,i.iY+(i.AR?i.BV:i.A6)-1,i.iY+i.F-(i.AR?i.A6:i.BV)+1)&&t.ON(!1,!0):ZC.DQ(t.iX,i.iX+(i.AR?i.BV:i.A6)-1,i.iX+i.I-(i.AR?i.A6:i.BV)+1)&&ZC.DQ(t.iY,a.iY+(a.AR?a.A6:a.BV)-1,a.iY+a.F-(a.AR?a.BV:a.A6)+1)&&t.ON(!1,!0))}HZ(e){ZC.3o||1g.SA(e)}}1O y0 2k MG{2G(e){1E(e),1g.U=1c}1q(){1E.1q()}X2(){1E.X2();1a e=1g.C.E;e.3S.8v=e.3S["2r-8l-1U"]=1g.EW("%8v")}EW(e,t,i,a){1a n=1g,l=n.A.LT();ZC.2E(t,l),-1===e.1L("%8v")&&-1===e.1L("%2r-8l-1U")||1c!==ZC.1d(l[ZC.1b[12]])&&-1!==l[ZC.1b[12]]||(l[ZC.1b[12]]=1);1a r=0,o="0";if(n.A.A.KO[n.L]>0&&(o=""+(r=100*n.AE/n.A.A.KO[n.L])),n.A.A.A7.1f>1&&n.A.L===n.A.A.A7.1f-1){1a s=0;if(1c===ZC.1d(n.A.o.hb)){1j(1a C=0;C<n.A.A.A7.1f-1;C++)if(n.A.A.A7[C].AL){1a A=0,Z="0";n.A.A.KO[n.L]>0&&(Z=""+(A=100*n.A.A.A7[C].S[n.L].AE/n.A.A.KO[n.L])),1c!==ZC.1d(l[ZC.1b[12]])&&(Z=A.4C(ZC.BO(0,ZC.1k(l[ZC.1b[12]])))),s+=ZC.1Y(Z)}o=""+(r=1A.1X(0,100-s))}}1c!==ZC.1d(l[ZC.1b[12]])&&(o=r.4C(ZC.BO(0,ZC.1k(l[ZC.1b[12]]))));1a c,p=ZC.1Y(n.A.A.KO[n.L]||"0");1l c=ZC.AN.GH(p,l,n.A),n.CR=[["%2r-8l-1U",o],["%8v",o],["%3P-6j-1U",c]],e=1E.EW(e,t,i,a)}9Q(e,t){1a i,a,n,l=1g,r=(l.B2+l.BH)/2%2m;1R(t){1i"4R":a=(i=ZC.AO.BM(l.iX,l.iY,l.AI+l.DR+e.DR,r))[0]+l.BJ,n=i[1]+l.BC,r>3U&&r<=2m?n-=e.F:r>90&&r<=180?a-=e.I:r>180&&r<=3U&&(a-=e.I,n-=e.F);1p;1i"3G":a=(i=ZC.AO.BM(l.iX,l.iY,l.CK+.5*(l.AI-l.CK)+l.DR,r))[0]+l.BJ,n=i[1]+l.BC;1p;2q:a=l.iX+l.BJ,n=l.iY+l.BC}1l{x:a,y:n}}OF(e){1a t,i=1g,a=(i.B2+i.BH)/2%2m,n=0;1c!==ZC.1d(t=e["2b-r"])&&(n=ZC.1Y(ZC.8B(t))),n<1&&(n*=i.AI);1a l=ZC.AO.BM(i.iX,i.iY,i.CK+.6*(i.AI-i.CK)+i.DR+n,a);1l[l[0],l[1],{cW:i,3G:!0}]}jM(){1a e=1g,t=(e.B2+e.BH)/2%2m,i=ZC.AO.BM(e.iX,e.iY,e.CK+.5*(e.AI-e.CK)+e.DR,t);1l[i[0],i[1]]}2I(){1a e=1g,t=e.C.BK(e.A.BT("k")[0]),i=e.L%t.GZ,a=1A.4h(e.L/t.GZ);e.iX=t.iX+i*t.GJ+t.GJ/2+t.BJ,e.iY=t.iY+a*t.GC+t.GC/2+t.BC,e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0)}J9(e){1a t,i={},a="4R";1l 1c!==ZC.1d(t=e.o[ZC.1b[7]])&&(a=t),i.1r="4R"===a?1g.A0:1g.C0,i}HD(e){1a t,i=1g,a="4R";1c!==ZC.1d(t=e.o[ZC.1b[7]])&&(a=t);1a n,l,r,o,s,C=e.I,A=e.F,Z=(i.B2+i.BH)/2%2m,c=Z;if("4R"===a){Z=c=i.A.A.YO["n"+i.L][i.A.L];1a p=1n(t,a){a<0&&(a=2m+a),a%=2m;1a n=(s=ZC.AO.BM(i.iX,i.iY,t+i.DR+e.DR+20,a))[0]+e.BJ-C/2,l=s[1]+e.BC-A/2;1l a>=0&&a<=90||a>=3U&&a<=2m?n+=C/2+10:n-=C/2+10,[n,l]},u=p(i.AI,c);n=u[0],l=u[1],i.U=e;1a h={x:n,y:l,1s:C,1M:A},1b=1o.3I.tA;o=!0;1j(1a d=0,f=0,g=-1,B=0,v=0;o&&v<hf;){o=!1;1j(1a E=0,b=i.A.A.UC.1f;E<b;E++)r=i.A.A.UC[E],(ZC.AO.YB(h,r)||h.x+e.I>i.C.Q.iX+i.C.Q.I||h.x<i.C.Q.iX||h.y+e.F>i.C.Q.iY+i.C.Q.F||h.y<i.C.Q.iY)&&(o=!0,0===1b?(d+=.4,g*=-1):1===1b&&(f+=2),u=p(i.AI+f,c+d*g),h.x=u[0],h.y=u[1],v++,++B>100&&(B=0,0===1b?(d=0,f+=2):1===1b&&(f=0,d+=.4,g*=-1)))}n=h.x,l=h.y,Z=c+d,r={1D:i.A.AP,x:h.x,y:h.y,1s:C,1M:A,3V:i.A.L,5Q:i.L},i.A.A.UC.1h(r)}1u if("in"===a||"8H"===a){1a m=i.CK<30?.65:.5;n=(s=i.B2%2m==i.BH%2m?0===i.CK?[i.iX,i.iY]:ZC.AO.BM(i.iX,i.iY,i.CK+.3*(i.AI-i.CK)+i.DR+e.DR,3U):ZC.AO.BM(i.iX,i.iY,i.CK+m*(i.AI-i.CK)+i.DR+e.DR,Z))[0]-C/2+i.BJ,l=s[1]-A/2+i.BC}1u if(-1!==a.1L("7A=")){1a K=a.2p(/=|;|,/),D=(i.AI+i.CK)/2,F=Z;K[1]&&(D=(D=ZC.IL(K[1],!0))>=-1&&D<=1||-1!==K[1].1L("%")?i.CK+i.DR+D*(i.AI-i.CK):i.CK+i.DR+D),K[2]&&(F=(F=ZC.IL(K[2],!0))>=-1&&F<=1||-1!==K[2].1L("%")?i.B2+F*(i.BH-i.B2):i.B2+F),K[3]&&("+"===K[3].gr(0)||"-"===K[3].gr(0)?(F%=2m,e.AA=F+ZC.1Y(K[3]),e.AA>90&&e.AA<3U&&(e.AA+=180)):e.AA=ZC.1Y(K[3])),n=(s=ZC.AO.BM(i.iX,i.iY,D,F))[0]-C/2,l=s[1]-A/2}1u"3G"===a&&(n=i.iX-C/2+i.BJ,l=i.iY-A/2+i.BC);1l o&&(n=-6H,l=-6H,e.AL=!1),1c!==ZC.1d(e.o.x)&&(n=e.iX),1c!==ZC.1d(e.o.y)&&(l=e.iY),n>=-2&&(n=ZC.2l(n)),l>=-2&&(l=ZC.2l(l)),[ZC.1k(n),ZC.1k(l),Z]}qO(e){1a t=1g,i={};if("8H"===e.o[ZC.1b[7]]){1a a=.9*ZC.2l(t.AI-t.CK),n=1A.PI*(t.AI+t.CK)*.9*ZC.2l(t.BH-t.B2)/2m,l=ZC.1k(1A.1X(a,n)/(.75*e.DF));if(1c===ZC.1d(e.o.2h)?i.2h=1===t.A.A.A7.1f||n>1.25*e.DF:i.2h=e.JW.2h,1c===ZC.1d(e.o["1X-qQ"])&&(i["1X-qQ"]=l),1c===ZC.1d(e.o.2f)){1a r=(t.B2+t.BH)/2%2m;t.A.A.A7.1f>1?n>a?r>0&&r<180?r-=90:r+=90:r>90&&r<3U&&(r+=180):r=0,i.2f=r}}1l i}F7(e,t){1a i,a=1g,n=1E.F7(e,t);if(e)1l n;if(a.AL&&n.AL&&1c!==ZC.1d(n.AP)&&""!==n.AP){1a l="4R";if(1c!==ZC.1d(i=n.o[ZC.1b[7]])&&(l=i),"4R"===l){1a r=!0;if(1c!==ZC.1d(i=n.o.Bp)&&(r=ZC.2t(i)),r){1a o=1m DS(a.A);o.Z=o.C6=a.A.CL("bl",0),o.1C(a.A.C1.o),o.K=a.K+"-98",o.B8=a.A0,o.DN="1y",o.D=[];1a s=n.E.u1,C=(a.B2+a.BH)/2%2m,A=ZC.AO.BM(a.iX,a.iY,a.AI+a.DR,C);A[0]+=a.BJ,A[1]+=a.BC,o.D.1h(A);1a Z=ZC.AO.BM(a.iX,a.iY,a.AI+a.DR+10,C);Z[0]+=a.BJ,Z[1]+=a.BC,n.iX>=a.iX?"3L"===a.H.AB?o.D.1h([s[0],s[1]+n.F/2]):o.D.1h([Z[0],Z[1],s[0],s[1]+n.F/2]):"3L"===a.H.AB?o.D.1h([s[0]+n.I+2,s[1]+n.F/2]):o.D.1h([Z[0],Z[1],s[0]+n.I+2,s[1]+n.F/2]),o.1q(),o.IY=1n(e){1l a.IY(e)},o.DB()&&o.1q(),o.AL&&o.1t()}}}}1t(){1a e,t=1g;if(1E.1t(),!(t.AE<0)){1a i=t.C.BK(t.A.BT("k")[0]);t.2I();1a a="3P-f6-"+t.A.L+"-"+t.L;if(t.o.Bn&&1w t.C.E[a]===ZC.1b[31]&&(t.C.E[a]=!0),t.AI=ZC.CV(i.GC,i.GJ)/2,1c!==ZC.1d(t.A.o[ZC.1b[21]])){1a n=ZC.IL(t.A.o[ZC.1b[21]],!1);t.AI=n<=1?t.AI*n:n}1u t.AI=i.JQ*t.AI;t.CK<=1&&(t.CK*=t.AI),t.CK=1A.1X(0,t.CK),t.o[ZC.1b[8]]=t.CK,t.DR<=1&&(t.DR*=t.AI),t.o["2b-r"]=t.DR,t.C.E[a]&&(t.DR+=ZC.1k(.15*t.AI));1a l=t.N=t.A.HY(t,t);if(t.GK(l),t.AE>=0||0===t.A.A.KO[t.L]){1a r=1m DS(t.A);r.K=t.K,r.Z=t.A.CL("bl",1),r.C6=t.A.CL("bl",0),r.1S(l);1a o=t.iX,s=t.iY;t.DR>0&&(o=(e=ZC.AO.BM(t.iX,t.iY,t.DR,(t.B2+t.BH)/2))[0],s=e[1]),r.iX=o,r.iY=s,r.AI=t.AI,r.o[ZC.1b[21]]=t.AI,r.DN="3P",r.B2=ZC.1Y(t.B2),r.BH=ZC.1Y(t.BH),r.CK=t.CK,r.E.74=t.A.L,r.E.7w=t.L,r.1q(),t.G3=r;1a C=1n(){if(!t.A.KE&&t.AL){1a e=r.F1(),i=t.C.K+ZC.1b[34]+t.C.K+ZC.1b[35]+t.A.L+ZC.1b[6],a=ZC.P.GF("4B",t.A.E5,t.A.IX)+\'1O="\'+i+\'" id="\'+t.K+ZC.1b[30]+e+\'" />\';t.A.A.HV.1h(a)}t.A.U&&t.F7()};if(t.A.GB&&!t.C.HK){1a A=r,Z={};A.iX=o,A.iY=s,A.B2=t.B2,A.BH=t.BH,Z.bR=t.B2,Z.9P=t.BH,Z.x=o,Z.y=s;1a c,p=t.A.LG;1j(c in A.C5=0,Z.2n=l.C5,2===p?(A.BH=t.B2,Z.9P=t.BH):3===p?(A.AI=t.CK,Z.2e=t.AI):4===p?(e=ZC.AO.BM(t.iX,t.iY,1.2*t.AI,(t.B2+t.BH)/2),A.iX=e[0],A.iY=e[1],Z.x=o,Z.y=s):5===p&&(A.B2=A.BH=(t.B2+t.BH)/2,Z.bR=t.B2,Z.9P=t.BH),t.A.FV)A[E8.GO[ZC.EC(c)]]=t.A.FV[c],Z[ZC.EC(c)]=l[E8.GO[ZC.EC(c)]];if(1c===ZC.1d(t.C.EJ)&&(t.C.EJ={}),1c!==ZC.1d(t.C.EJ[t.A.L+"-"+t.L]))1j(c in t.C.EJ[t.A.L+"-"+t.L])A[E8.GO[ZC.EC(c)]]=t.C.EJ[t.A.L+"-"+t.L][c];t.C.EJ[t.A.L+"-"+t.L]={},ZC.2E(Z,t.C.EJ[t.A.L+"-"+t.L]);1a u=1m E8(A,Z,t.A.JI,t.A.LB,E8.RR[t.A.LF],1n(){C()});u.AV=t,t.L5(u)}1u r.1t(),C()}1u t.A.U&&t.F7()}}HZ(e){1a t=1g;ZC.3o||t.LL({6v:e,1J:"2S",8S:1n(){if(1g.1S(t),1g.iX=t.iX,1g.iY=t.iY,t.DR>0){1a e=ZC.AO.BM(t.iX,t.iY,t.DR,(t.B2+t.BH)/2);1g.iX=e[0],1g.iY=e[1]}1g.AI=t.AI,1g.DN="3P",1g.A0=t.A.BN[3],1g.AC=t.A.BN[2],1g.B2=ZC.1Y(t.B2),1g.BH=ZC.1Y(t.BH),1g.CK=t.CK},jL:1n(){1g.o[ZC.1b[21]]=t.AI,1g.o[ZC.1b[8]]=t.CK,1g.o["2b-r"]=t.DR}})}OW(e,t){1a i=1g;if(1E.OW(e,t),"3J"===t&&e.9u<=1&&i.A.mq){1o.4F.aH=!0,1o.4F.9H=!0;1a a="3P-f6-"+i.A.L+"-"+i.L;i.C.E[a]=1w i.C.E[a]===ZC.1b[31]||!i.C.E[a],i.C.JU(),1o.4F.9H=!1,1o.4F.aH=!1}}}1O xZ 2k MG{2I(){1a e=1g,t=e.C.BK(e.A.BT("k")[0]);e.iX=t.iX+t.I/2+t.BJ,e.iY=t.iY+t.F/2+t.BC,e.IQ||(e.1S(e.A),e.o[ZC.1b[8]]=1c,e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0)}jM(){1a e=1g,t=(e.B2+e.BH)/2%2m,i=ZC.AO.BM(e.iX,e.iY,e.CK+e.E.eg/2+e.DR,t);1l[i[0],i[1]]}EW(e,t,i,a){1a n=1g,l=n.A.LT();ZC.2E(t,l);1a r=100*n.AE/n.A.A.KO[n.L],o=""+r;1l 1c!==ZC.1d(l[ZC.1b[12]])&&(o=r.4C(ZC.BO(0,ZC.1k(l[ZC.1b[12]])))),n.CR=[["%2r-8l-1U",o],["%8v",o]],e=1E.EW(e,t,i,a)}J9(e){1a t={},i="in";1l 1c!==ZC.1d(e.o[ZC.1b[7]])&&(i=e.o[ZC.1b[7]]),t.1r="4R"===i?1g.A0:1g.C0,t}HD(e){1a t=1g,i="in";1c!==ZC.1d(e.o[ZC.1b[7]])&&(i=e.o[ZC.1b[7]]);1a a,n,l,r=e.I,o=e.F,s=(t.B2+t.BH)/2%2m;1l"4R"===i?t.L===t.A.S.1f-1?(l=ZC.AO.BM(t.iX,t.iY,t.A.UG+t.A.S.1f*(t.E.eg+t.E.s2)+15+e.DR,s),a=s>=0&&s<90||s>=3U&&s<2m?l[0]+10+t.BJ:l[0]-r-10+t.BJ,n=l[1]-o/2+t.BC):(a=-1,n=-1):(a=(l=ZC.AO.BM(t.iX,t.iY,t.CK+t.E.eg/2+e.DR,s))[0]-r/2+t.BJ,n=l[1]-o/2+t.BC),1c!==ZC.1d(e.o.x)&&(a=e.iX),1c!==ZC.1d(e.o.y)&&(n=e.iY),[ZC.1k(a),ZC.1k(n),s]}F7(e){1a t=1g,i=1E.F7(e);if(e)1l i;if(i.AL&&1c!==ZC.1d(i.AP)&&""!==i.AP){1a a="in";if(1c!==ZC.1d(i.o[ZC.1b[7]])&&(a=i.o[ZC.1b[7]]),"4R"===a&&t.L===t.A.S.1f-1){1a n=1m DS(t.A);n.Z=n.C6=t.H.2P()?t.H.mc("1v"):t.C.AJ["3d"]||t.H.KE?ZC.AK(t.C.K+"-4l-vb-c"):ZC.AK(t.C.K+"-1B-"+t.A.L+"-vb-c"),n.1C(t.A.C1.o),n.B8=t.A0,n.DN="1y",n.D=[];1a l=(t.B2+t.BH)/2%2m,r=ZC.AO.BM(t.iX,t.iY,t.CK+t.E.eg+i.DR,l),o=ZC.AO.BM(t.iX,t.iY,t.A.UG+t.A.S.1f*(t.E.eg+t.E.s2)+15+i.DR,l);r[0]+=t.BJ,o[0]+=t.BJ,r[1]+=t.BC,o[1]+=t.BC,n.D.1h(r),l>=0&&l<90||l>=3U&&l<2m?n.D.1h([o[0],o[1],o[0]+10,o[1]]):n.D.1h([o[0],o[1],o[0]-10,o[1]]),n.1q(),n.IY=1n(e){1l t.IY(e)},n.DB()&&n.1q(),n.AL&&n.1t()}}}1t(){1a e,t=1g;1E.1t();1a i=t.C.BK(t.A.BT("k")[0]);t.2I(),t.AI=ZC.CV(i.I,i.F)/2,t.AI=i.JQ*t.AI,t.CK=t.A.UG,t.CK<1&&(t.CK=t.A.UG*t.AI);1a a=t.A.SZ;a<1&&(a=t.A.SZ*t.AI);1a n=2,l=t.AI-t.CK;if(1c!==ZC.1d(t.A.fA)&&1c!==ZC.1d(t.A.fA[t.L])){(n=ZC.1Y(t.A.fA[t.L]))>1&&(n/=100),n=ZC.1k(l*n),n=ZC.BO(n,2);1j(1a r=0,o=0;o<t.L;o++)r+=ZC.1Y(t.A.fA[o]);r>1&&(r/=100),r=ZC.1k(l*r),t.CK+=r,t.AI=t.CK+n}1u n=(l-(t.A.S.1f-1)*a)/t.A.S.1f,n=ZC.BO(n,2),t.CK+=t.L*(n+a),t.AI=t.CK+n;1a s=t.N=t.A.HY(t,t);t.GK(s);1a C=1m DS(t.A);C.K=t.K,C.Z=t.A.CL("bl",1),C.C6=t.A.CL("bl",0),C.1S(s),C.iX=t.iX,C.iY=t.iY,C.DN="3P",C.B2=t.B2,C.BH=t.BH,C.CK=t.CK,C.AI=t.AI,C.1q();1a A=C.CK;1n Z(){1a e=C.F1(),i=t.C.K+ZC.1b[34]+t.C.K+ZC.1b[35]+t.A.L+ZC.1b[6],a=ZC.P.GF("4B",t.A.E5,t.A.IX)+\'1O="\'+i+\'" id="\'+t.K+ZC.1b[30]+e+\'" />\';t.A.A.HV.1h(a),t.A.U&&t.A.U.AL&&t.F7()}if(t.E.eg=n,t.E.s2=a,t.A.GB&&!t.C.HK){1a c=C,p={};c.B2=t.B2,c.BH=t.BH,p.bR=t.B2,p.9P=t.BH;1a u=t.A.LG;if(c.C5=0,p.2n=s.C5,2===u)c.BH=t.B2,p.9P=t.BH;1u if(3===u)c.CK=A+t.E.eg,p.7p=A;1u if(4===u){1a h=ZC.AO.BM(t.iX,t.iY,t.AI,(t.B2+t.BH)/2);c.iX=h[0],c.iY=h[1],p.x=t.iX,p.y=t.iY}1u 5===u&&(c.B2=c.BH=(t.B2+t.BH)/2,p.bR=t.B2,p.9P=t.BH);1j(e in t.A.FV)c[E8.GO[ZC.EC(e)]]=t.A.FV[e],p[ZC.EC(e)]=s[E8.GO[ZC.EC(e)]];if(t.C.EJ||(t.C.EJ={}),1c!==ZC.1d(t.C.EJ[t.A.L+"-"+t.L]))1j(e in t.C.EJ[t.A.L+"-"+t.L])c[E8.GO[ZC.EC(e)]]=t.C.EJ[t.A.L+"-"+t.L][e];t.C.EJ[t.A.L+"-"+t.L]={},ZC.2E(p,t.C.EJ[t.A.L+"-"+t.L]);1a 1b=1m E8(c,p,t.A.JI,t.A.LB,E8.RR[t.A.LF],1n(){Z()});1b.AV=t,t.L5(1b)}1u C.1t(),Z()}HZ(e){1a t=1g;ZC.3o||t.LL({6v:e,1J:"2S",8S:1n(){1g.1S(t),1g.iX=t.iX,1g.iY=t.iY,1g.DN="3P",1g.A0=t.A.BN[3],1g.AC=t.A.BN[2],1g.B2=t.B2,1g.BH=t.BH,1g.CK=t.CK,1g.AI=t.AI},jL:1n(){1g.o[ZC.1b[8]]=1c}})}}1O xX 2k MG{2G(e){1E(e);1a t=1g;t.CI=1c,t.CO=1c,t.MU="1X"}EW(e,t,i,a){1a n=1g;1l"5z"===n.A.CS&&(n.CR=[["%2r-2j-1U",n.CI],["%2r-1X-1U",n.CO]]),e=1E.EW(e,t,i,a)}H9(){1a e=1g;"5z"===e.A.CS&&e.o[ZC.1b[9]]3F 3N?(e.CI=ZC.1Y(e.o[ZC.1b[9]][0]),e.CO=ZC.1Y(e.o[ZC.1b[9]][1]),e.AE=e.CM=e.CO,e.DK.1h(e.CI)):1E.H9()}2I(){1a e=1g,t=e.A.B1,i=e.A.CH,a=[t.X,t.A1,i.X,i.A1];if(e.JO!==a){1a n;n="5z"===e.A.CS?i.ST("2j"===e.MU?e.CI:e.CO):i.ST(e.CM);1a l=t.jV(e.L,n);e.iX=l[0],e.iY=l[1],e.JO=a}e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0)}HD(e){1a t,i=1g,a=i.A.B1,n=i.A.CH,l=i.C.BK("1z"),r=l.iX+l.I/2,o=l.iY+l.F/2,s=e.I,C=e.F,A="4R";1c!==ZC.1d(e.o[ZC.1b[7]])&&(A=e.o[ZC.1b[7]]);1a Z=1.15;1R(A){1i"4R":Z=1.15;1p;1i"sq":Z=1;1p;1i"in":Z=.85;1p;1i"6r":Z=.5}1a c,p,u=a.EO/(a.W.1f-(2m===a.EO||a.DJ?0:1)),h=n.ST(i.CM);1R(i.A.CS){1i"9y":1i"5S":1a 1b=(ZC.CV(l.I/2,l.F/2)*l.JQ-n.A6)/i.A.A.A7.1f;c=n.A6+i.A.L*1b,p=n.A6+(i.A.L+1)*1b,t=ZC.AO.BM(r,o,(c+p)/2*Z+e.DR,a.DL+(a.DJ?u/2:0)+i.L*u);1p;2q:t=ZC.AO.BM(r,o,n.A6+h*Z+e.DR,a.DL+(a.DJ?u/2:0)+i.L*u)}1l t[0]-=s/2,t[1]-=C/2,1c!==ZC.1d(e.o.x)&&(t[0]=e.iX),1c!==ZC.1d(e.o.y)&&(t[1]=e.iY),[ZC.1k(t[0]),ZC.1k(t[1])]}J9(){1l{1r:"9w"===1g.A.CS?1g.A0:1g.B8}}KC(){1l{"1W-1r":"9w"===1g.A.CS?1g.A0:1g.B8,"1G-1r":"9w"===1g.A.CS?1g.A0:1g.B8,1r:1g.C0}}1t(){1a e,t,i=1g;1E.1t();1a a,n=i.A.QK,l=i.A.jK,r=i.A.B1,o=i.A.CH,s=i.A.S;i.2I(),i.CX=!1,i.C6=i.A.CL("bl",0);1a C,A,Z=[],c=[],p=[],u=[],h="5z"===i.A.CS;1n 1b(){if(i.A.S5>=i.A.S.1f&&i.A.YI){1a e=i.C.K+ZC.1b[34]+i.C.K+ZC.1b[35]+i.A.L+ZC.1b[6],t="",n="";-1!==ZC.AT(["1y","1N","5z"],i.A.CS)?""!==(n="5z"!==i.A.CS||i.A.XR?ZC.AO.Q6(ZC.AO.Z1(i.E.2W),4):ZC.AO.Q6(c,4))&&(t=ZC.P.GF("4B",i.A.E5,i.A.IX)+\'1O="\'+e+\'" id="\'+i.K+ZC.1b[30]+n+\'" />\'):-1!==ZC.AT(["9w","96","2U","9y","5S"],i.A.CS)&&(n=a.F1(),t=ZC.P.GF("4B",i.A.E5,i.A.IX)+\'1O="\'+e+\'" id="\'+i.K+ZC.1b[30]+n+\'" 1T-z-3X="\'+(i.A.A.A7.1f-i.A.L)+\'" />\'),i.A.A.HV.1h(t)}i.A.U&&i.A.E.jJ!==i.K&&i.F7()}1a d=i.N=i.A.HY(i,i);if(i.A.I6&&i.GK(d),-1!==ZC.AT(["1y","1N","5z"],i.A.CS)){Z=[],c=[],p=[],u=[];1a f=i.iX,g=i.iY,B=i.iX,v=i.iY;h&&(i.MU="1X",i.2I(),f=i.iX,g=i.iY,i.MU="2j",i.2I(),B=i.iX,v=i.iY),i.A.IW&&(i.A.D.1h([f,g]),i.A.AG.1h([f,g])),i.L>r.X?(A=s[i.L-1])&&(A.MU="1X",A.2I(),C=ZC.AO.JZ(A.iX,A.iY,f,g),Z.1h(C),c.1h(C),h&&(A.MU="2j",A.2I(),C=ZC.AO.JZ(A.iX,A.iY,B,v),p.1h(C),u.1h(C))):(A=s[r.A1])&&(A.MU="1X",A.2I(),C=ZC.AO.JZ(A.iX,A.iY,f,g),Z.1h(C),c.1h(C),h&&(A.MU="2j",A.2I(),C=ZC.AO.JZ(A.iX,A.iY,B,v),p.1h(C),u.1h(C))),Z.1h([f,g]),c.1h([f,g]),h&&(p.1h([B,v]),u.1h([B,v])),i.L<r.A1?(A=s[i.L+1])&&(A.MU="1X",A.2I(),C=ZC.AO.JZ(f,g,A.iX,A.iY),Z.1h(C),c.1h(C),h&&(A.MU="2j",A.2I(),C=ZC.AO.JZ(B,v,A.iX,A.iY),p.1h(C),u.1h(C))):(A=s[0])&&(A.MU="1X",A.2I(),C=ZC.AO.JZ(f,g,A.iX,A.iY),Z.1h(C),c.1h(C),h&&(A.MU="2j",A.2I(),C=ZC.AO.JZ(B,v,A.iX,A.iY),p.1h(C),u.1h(C))),ZC.CN.2I(n,d)}h&&(Z.1h(1c),Z=Z.4z(p.9D()),c=c.4z(u.9D()));1a E,b,m,K,D,F,I,x,X,y,Y,L,w,M,H,N,O=i.C.Q;if(E=i.C.BK("1z"),"1N"!==i.A.CS&&"5z"!==i.A.CS||(b=E.iX+E.I/2,m=E.iY+E.F/2,K=2m/r.W.1f,"1N"===i.A.CS&&c.1h([b,m]),i.A.IW||((D=1m DS(i.A)).K=i.K+"-1N",D.Z=i.A.CL("bl",0),D.1S(d),D.LC=!0,D.D=c,D.1q(),D.C5=i.A.HX,1===D.C5&&0===D.AQ&&(D.A0=ZC.AN.QR(ZC.AN.G7(D.A0),20),D.AC=ZC.AN.QR(ZC.AN.G7(D.AC),20),D.AQ=2,D.BU=D.A0),D.CZ=[O.iX,O.iY,O.iX+O.I,O.iY+O.F],ZC.CN.2I(l,D))),i.E.2W=Z,i.E.9W=c,i.bu({2W:Z,9W:c}),i.A.IW&&i.L===r.A1&&("1N"===i.A.CS&&((D=1m DS(i.A)).K=i.K+"-1N",D.Z=i.A.CL("bl",0),D.1S(i.A),D.LC=!0,D.D=i.A.AG,D.1q(),D.C5=i.A.HX,D.CZ=[O.iX,O.iY,O.iX+O.I,O.iY+O.F],D.1t()),"1y"!==i.A.CS&&"1N"!==i.A.CS&&"5z"!==i.A.CS||(i.A.D[0]&&i.A.D.1h([i.A.D[0][0],i.A.D[0][1]]),ZC.CN.1t(n,d,i.A.D))),-1!==ZC.AT(["sj","6y","1N","1y"],i.A.CS))i.ON(!1,!0);1u if(-1!==ZC.AT(["9w","96","2U","5S","9y"],i.A.CS)){(a=1m DS(i.A)).K=i.K+"-3P",a.1S(d),a.Z=i.A.CL("bl",1),a.C6=i.A.CL("bl",0),b=(E=i.C.BK("1z")).iX+E.I/2,m=E.iY+E.F/2;1a S=.1*(K=r.EO/(r.W.1f-(2m===r.EO||r.DJ?0:1)));i.A.C9||(S=.1*K+.4*K*i.A.L/i.A.A.A7.1f),1c!==ZC.1d(e=i.A.sa)&&(S=e<1?K*e:e),Y=o.A6;1a P=i.A.A;i.A.C9&&1c!==ZC.1d(P.gO["7H"+i.L])&&(Y+=P.gO["7H"+i.L]);1a G=ZC.1k(o.ST(i.CM));if(i.A.C9&&(P.gO["7H"+i.L]=G),x=r.DL+i.L*K-K/2+S+(r.DJ?K/2:0),X=r.DL+(i.L+1)*K-K/2-S+(r.DJ?K/2:0),y=G+o.A6,"5S"===i.A.CS||"9y"===i.A.CS){1a T=(ZC.CV(E.I/2,E.F/2)*E.JQ-o.A6)/i.A.A.A7.1f;y=o.A6+i.A.L*T,Y=o.A6+(i.A.L+1)*T}i.bu({x:b,y:m,sz:y,sl:Y,as:x,ae:X}),a.iX=b,a.iY=m,a.DN="3P",a.B2=x,a.BH=X,a.AI=y,a.CK=Y,a.1q(),a.IY=1n(e){1l i.IY(e)},a.DB()&&a.1q()}if(i.A.GB&&-1!==ZC.AT(["1y","1N","9w","96","2U","9y","5S"],i.A.CS)){1R(i.A.CS){1i"1y":1i"1N":I={},(F=1m DS(i)).1S(d),F.K=i.K,F.Z=i.A.CL("bl",1),F.C6=i.A.CL("bl",0),F.D=Z,F.C5=0,I.2n=d.C5,I.2W=Z;1a k=[];"1N"===i.A.CS&&(M={},L=[],(w=D).D=c,w.C5=0,M.2W=c,M.2n=i.A.HX);1p;1i"9w":1i"96":1i"2U":1i"9y":1i"5S":I={},(F=a).iX=b,F.iY=m,F.B2=x,F.BH=X,F.C5=0,I.bR=x,I.9P=X,I.x=b,I.y=m,I.2e=y,I.2n=d.C5}1a J,z=i.A.LG,R=i.C.Q;1R(z){1i 1:1p;1i 7:1R(i.A.CS){1i"1y":1i"1N":1j(t=0;t<Z.1f;t++)k[t]=[Z[t][0],R.iY+R.F/2];if(F.D=k,I.2W=Z,"1N"===i.A.CS){1j(t=0;t<c.1f;t++)L[t]=[c[t][0],R.iY+R.F/2];w.D=L,M.2W=c}}1p;1i 2:1R(i.A.CS){1i"1y":1i"1N":1j(t=0;t<Z.1f;t++)k[t]=[R.iX+R.I/2,Z[t][1]];if(F.D=k,I.2W=Z,"1N"===i.A.CS){1j(t=0;t<c.1f;t++)L[t]=[R.iX+R.I/2,c[t][1]];w.D=L,M.2W=c}1p;1i"9w":1i"96":1i"2U":1i"9y":1i"5S":F.BH=x,I.9P=X}1p;1i 3:1R(i.A.CS){1i"1y":1i"1N":1j(t=0;t<Z.1f;t++)k[t]=[R.iX+R.I/2,R.iY+R.F/2];if(F.D=k,I.2W=Z,"1N"===i.A.CS){1j(t=0;t<c.1f;t++)L[t]=[R.iX+R.I/2,R.iY+R.F/2];w.D=L,M.2W=c}1p;1i"9w":1i"96":1i"2U":1i"9y":1i"5S":F.AI=o.A6,I.2e=y}1p;1i 4:1R(i.A.CS){1i"1y":1i"1N":1j(t=0;t<Z.1f;t++)H=R.iX+R.I/2-Z[t][0],N=R.iY+R.F/2-Z[t][1],k[t]=[R.iX+R.I/2-2.5*H,R.iY+R.F/2-2.5*N];if(F.D=k,I.2W=Z,"1N"===i.A.CS){1j(t=0;t<c.1f;t++)H=R.iX+R.I/2-c[t][0],N=R.iY+R.F/2-c[t][1],L[t]=[R.iX+R.I/2-2.5*H,R.iY+R.F/2-2.5*N];w.D=L,M.2W=c}1p;1i"9w":1i"96":1i"2U":1i"9y":1i"5S":F.AI=2*y,I.2e=y}1p;1i 5:1R(i.A.CS){1i"9w":1i"96":1i"2U":1i"9y":1i"5S":F.B2=F.BH=(x+X)/2,I.bR=x,I.9P=X}}1j(J in i.A.FV)F[E8.GO[ZC.EC(J)]]=i.A.FV[J],I[ZC.EC(J)]=d[E8.GO[ZC.EC(J)]];if(1c===ZC.1d(i.C.EJ)&&(i.C.EJ={},"1N"===i.A.CS&&(i.C.T2={})),1c!==ZC.1d(i.C.EJ[i.A.L+"-"+i.L])){1j(J in i.C.EJ[i.A.L+"-"+i.L])F[E8.GO[ZC.EC(J)]]=i.C.EJ[i.A.L+"-"+i.L][J];if("1N"===i.A.CS)1j(J in i.C.T2[i.A.L+"-"+i.L])w[E8.GO[ZC.EC(J)]]=i.C.T2[i.A.L+"-"+i.L][J]}i.C.EJ[i.A.L+"-"+i.L]={},ZC.2E(I,i.C.EJ[i.A.L+"-"+i.L]),"1N"===i.A.CS&&(i.C.T2[i.A.L+"-"+i.L]={},ZC.2E(M,i.C.T2[i.A.L+"-"+i.L]));1a Q=1m E8(F,I,i.A.JI,i.A.LB,E8.RR[i.A.LF],1n(){1b()});Q.AV=i,-1!==ZC.AT(["1y","1N"],i.A.CS)&&(Q.IO=n);1a W=1c;"1N"===i.A.CS&&((W=1m E8(w,M,i.A.JI,i.A.LB,E8.RR[i.A.LF],1n(){})).AV=i),i.L5(Q,W)}1u{1R(i.A.CS){1i"1y":1i"1N":1i"5z":i.A.IW||(ZC.CN.1t(n,d,Z),"1N"!==i.A.CS&&"5z"!==i.A.CS||D.1t());1p;1i"9w":1i"96":1i"2U":1i"9y":1i"5S":a.1t()}1b()}}HZ(e){1a t=1g;ZC.3o||(t.A.IH&&t.A.AL&&(-1!==ZC.AT(["1y","1N","5z"],t.A.CS)?(t.YE(e),"1N"!==t.A.CS&&"5z"!==t.A.CS||t.LL({6v:e,1J:"1N",8S:1n(){1g.D=t.E.9W},c9:1n(){1g.AZ=0,1g.AQ=0,1g.C5=t.A.HX;1a e=t.C.Q;1g.CZ=[e.iX,e.iY,e.iX+e.I,e.iY+e.F]}})):-1!==ZC.AT(["9w","96","2U","9y","5S"],t.A.CS)&&t.LL({6v:e,1J:"2S",8S:1n(){1g.1S(t),1g.B8=t.A.BN[1],1g.BU=t.A.BN[1],1g.A0=t.A.BN[3],1g.AC=t.A.BN[2],1g.iX=t.5K("x"),1g.iY=t.5K("y"),1g.CK=t.5K("sl"),1g.B2=t.5K("as"),1g.BH=t.5K("ae"),1g.DN="3P",1g.AI=t.5K("sz")}})),-1!==ZC.AT(["sj","6y","1y"],t.A.CS)&&t.SA(e))}}1O y9 2k ZW{2G(e){1E(e),1g.FJ=1c}EW(e,t,i,a){1a n=1g,l=n.A.LT();ZC.2E(t,l);1a r=ZC.AN.GH(n.A.Q9[n.L],l);1l n.CR=[["%2r-7v-1U",r],["%g",r]],e=1E.EW(e,t,i,a)}HD(e){1a t=1g;1l"7v"===ZC.1d(e.o[ZC.1b[7]])?[t.FJ.iX+t.FJ.I/2-e.I/2,t.FJ.iY-e.F]:1E.HD(e)}H9(){1a e,t=1g;if(t.DK=[],t.CJ=t.o[ZC.1b[9]],"3e"==1w t.o[ZC.1b[9]]){1a i=ZC.AT(t.A.CH.JN,t.o[ZC.1b[9]]);-1!==i?t.AE=i:(t.A.CH.JN.1h(t.o[ZC.1b[9]]),t.AE=t.A.CH.JN.1f-1)}1u t.AE=ZC.1Y(t.o[ZC.1b[9]]);t.A.o.gJ&&1c!==ZC.1d(e=t.A.o.gJ[t.L])&&t.DK.1h(ZC.1Y(e))}1t(){1E.1t()}6D(){1a e,t,i=1g;if(1c!==ZC.1d(i.A.Q9[i.L])&&i.AL){1a a=i.A.CH.AX(i.A.Q9[i.L]);i.FJ=1m I4(i.A),i.FJ.K=i.K+"-7v",i.FJ.1S(i.A.FJ),i.FJ.Z=i.A.CL("fl",0),i.FJ.C6=i.A.CL("fl",0),i.FJ.IY=1n(e){1l i.IY(e)},i.FJ.DB()&&i.FJ.1q(),1c!==ZC.1d(e=i.FJ.o)&&1c!==ZC.1d(e.ay)&&1c!==ZC.1d(t=e.ay[i.L])&&("3e"==1w t?i.FJ.1C({"1W-1r":t}):i.FJ.1C(t),i.FJ.1q());1a n=.2;if(1c!==ZC.1d(e=i.FJ.o.so)&&(n=ZC.1Y(e)),i.FJ.iX=i.5K("x")-i.I*n,i.FJ.I=i.I*(1+2*n),1c===ZC.1d(i.A.FJ.o[ZC.1b[20]])&&(i.FJ.F=ZC.CV(5,i.C.Q.F/30)),i.FJ.iY=a-i.FJ.F/2,i.FJ.AL){i.FJ.1t();1a l=i.C.K+ZC.1b[34]+i.C.K+ZC.1b[35]+i.A.L+ZC.1b[6];i.A.A.HV.1h(ZC.P.GF("5t",i.A.E5,i.A.IX)+\'1O="\'+l+\'" id="\'+i.K+"--7v"+ZC.1b[30]+ZC.1k(i.FJ.iX+i.A.BJ+ZC.3B)+","+ZC.1k(i.FJ.iY+i.A.BC+ZC.3B)+","+ZC.1k(i.FJ.iX+i.A.BJ+i.FJ.I+ZC.3B)+","+ZC.1k(i.FJ.iY+i.A.BC+i.FJ.F+ZC.3B)+\'" />\')}}}HZ(e){1a t=1g;if(!ZC.3o&&(1E.HZ(e),t.FJ&&t.FJ.AL)){1a i=1m I4(t.A);i.1S(t.FJ),i.Z=ZC.AK(t.C.K+ZC.1b[22]),i.ME=!1,i.iX=t.FJ.iX,i.iY=t.FJ.iY,i.1t()}}}1O ym 2k ZV{2G(e){1E(e),1g.FJ=1c}EW(e,t,i,a){1a n=1g,l=n.A.LT();ZC.2E(t,l);1a r=ZC.AN.GH(n.A.Q9[n.L],l);1l n.CR=[["%2r-7v-1U",r],["%g",r]],e=1E.EW(e,t,i,a)}HD(e){1a t=1g;1l"7v"===ZC.1d(e.o[ZC.1b[7]])?[t.FJ.iX+t.FJ.I,t.FJ.iY+t.FJ.F/2-e.F/2]:1E.HD(e)}H9(){1a e,t=1g;if(t.DK=[],t.CJ=t.o[ZC.1b[9]],"3e"==1w t.o[ZC.1b[9]]){1a i=ZC.AT(t.A.CH.JN,t.o[ZC.1b[9]]);-1!==i?t.AE=i:(t.A.CH.JN.1h(t.o[ZC.1b[9]]),t.AE=t.A.CH.JN.1f-1)}1u t.AE=ZC.1Y(t.o[ZC.1b[9]]);t.A.o.gJ&&1c!==ZC.1d(e=t.A.o.gJ[t.L])&&t.DK.1h(ZC.1Y(e))}1t(){1E.1t()}6D(){1a e,t,i=1g;if(1c!==ZC.1d(i.A.Q9[i.L])&&i.AL){1a a=i.A.CH.AX(i.A.Q9[i.L]);i.FJ=1m I4(i.A),i.FJ.K=i.K+"-7v",i.FJ.1S(i.A.FJ),i.FJ.Z=i.A.CL("fl",0),i.FJ.C6=i.A.CL("fl",0),i.FJ.IY=1n(e){1l i.IY(e)},i.FJ.DB()&&i.FJ.1q(),1c!==ZC.1d(e=i.FJ.o)&&1c!==ZC.1d(e.ay)&&1c!==ZC.1d(t=e.ay[i.L])&&("3e"==1w t?i.FJ.1C({"1W-1r":t}):i.FJ.1C(t),i.FJ.1q());1a n=.2;if(1c!==ZC.1d(e=i.FJ.o.so)&&(n=ZC.1Y(e)),i.FJ.iY=i.5K("y")-i.F*n,i.FJ.F=i.F*(1+2*n),1c===ZC.1d(i.A.FJ.o[ZC.1b[19]])&&(i.FJ.I=ZC.CV(5,i.C.Q.I/30)),i.FJ.iX=a-i.FJ.I/2,i.FJ.AL){i.FJ.1t();1a l=i.C.K+ZC.1b[34]+i.C.K+ZC.1b[35]+i.A.L+ZC.1b[6];i.A.A.HV.1h(ZC.P.GF("5t",i.A.E5,i.A.IX)+\'1O="\'+l+\'" id="\'+i.K+"--7v"+ZC.1b[30]+ZC.1k(i.FJ.iX+i.A.BJ+ZC.3B)+","+ZC.1k(i.FJ.iY+i.A.BC+ZC.3B)+","+ZC.1k(i.FJ.iX+i.A.BJ+i.FJ.I+ZC.3B)+","+ZC.1k(i.FJ.iY+i.A.BC+i.FJ.F+ZC.3B)+\'" />\')}}}HZ(e){1a t=1g;if(!ZC.3o&&(1E.HZ(e),t.FJ&&t.FJ.AL)){1a i=1m I4(t.A);i.1S(t.FJ),i.Z=ZC.AK(t.C.K+ZC.1b[22]),i.ME=!1,i.iX=t.FJ.iX,i.iY=t.FJ.iY,i.1t()}}}1O yB 2k MG{H9(){1a e,t=1g;t.o[ZC.1b[9]]3F 3N&&1c!==ZC.1d(t.o[ZC.1b[9]][1])&&(t.CJ=t.o[ZC.1b[9]][1],"3e"==1w t.o[ZC.1b[9]][0]?-1!==(e=ZC.AT(t.A.B1.IU,t.o[ZC.1b[9]][0]))?t.BY=e:(t.A.B1.IU.1h(t.o[ZC.1b[9]][0]),t.BY=t.A.B1.IU.1f-1):t.BY=ZC.1Y(t.o[ZC.1b[9]][0]),"3e"==1w t.o[ZC.1b[9]][1]?-1!==(e=ZC.AT(t.A.CH.JN,t.o[ZC.1b[9]][1]))?t.AE=e:(t.A.CH.JN.1h(t.o[ZC.1b[9]][1]),t.AE=t.A.CH.JN.1f-1):t.AE=ZC.1Y(t.o[ZC.1b[9]][1]),1c!==t.BY&&t.A.TD(t.BY,t.L))}2I(){1a e=1g,t=e.A.B1,i=e.A.CH,a=[t.X,t.A1,i.X,i.A1];e.JO!==a&&(t.AR?e.iX=t.iX+t.I-t.A6-(e.L-t.X+1)*t.A9:e.iX=t.iX+t.A6+(e.L-t.X)*t.A9,i.AR?e.iY=i.iY+i.A6+(e.A.L-i.B4)*i.A9:e.iY=i.iY+i.F-i.A6-(e.A.L-i.B4+1)*i.A9,e.JO=a),e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0),e.GK(e)}HD(e){1a t=1g,i="sq";1c!==ZC.1d(e.o[ZC.1b[7]])&&(i=e.o[ZC.1b[7]]);1a a=e.I,n=e.F,l=t.iX+t.I/2-a/2,r=t.iY+t.F/2-n/2;1R(i){1i"1v":r-=t.F/2+n/2+2;1p;1i"1K":l-=t.I/2+a/2+2;1p;1i"2c":r+=t.F/2+n/2+2;1p;1i"2z":l+=t.I/2+a/2+2}1l 1c!==ZC.1d(e.o.x)&&(l=e.iX),1c!==ZC.1d(e.o.y)&&(r=e.iY),[ZC.1k(l),ZC.1k(r)]}J9(){1l{1r:"#4v"}}k1(){1l 1g.CJ}EW(e,t,i,a){1a n,l=1g,r=l.A.CH,o=l.A.L;1l n=1c!==ZC.1d(r.BW[o])?r.BW[o]:r.W[o],l.CR=[["%y",n],["%1z-1U-1H",n]],e=1E.EW(e,t,i,a)}RU(){1a e=1g;e.2I();1a t,i=e.A.B1,a=e.A.CH;1R(e.A.sb){1i"1B-1X":t=(ZC.1Y(e.AE)-e.A.YT)/(e.A.jY-e.A.YT);1p;1i"1B-6j":t=(ZC.1Y(e.AE)-e.A.YT)/(e.A.rV-e.A.YT);1p;1i"b1-1X":t=(ZC.1Y(e.AE)-e.A.X9)/(e.A.jw-e.A.X9);1p;1i"b1-6j":t=(ZC.1Y(e.AE)-e.A.X9)/(e.A.rU-e.A.X9)}1R(ZC.PI(t)||(t=.5),e.I=i.A9,e.F=a.A9,e.A.CS){1i"2n":1i"197":e.C5=e.A.QI+t*(e.A.VB-e.A.QI);1p;1i"cf":e.I=1.8I+e.A.QI*i.A9+t*i.A9*(e.A.VB-e.A.QI),i.AR&&(e.iX=e.iX+i.A9-e.I);1p;1i"9h":e.F=1.8I+e.A.QI*a.A9+t*a.A9*(e.A.VB-e.A.QI),a.AR||(e.iY=e.iY+a.A9-e.F);1p;1i"2e":e.I=1.8I+e.A.QI*i.A9+t*i.A9*(e.A.VB-e.A.QI),e.F=1.8I+e.A.QI*a.A9+t*a.A9*(e.A.VB-e.A.QI),e.iX+=(i.A9-e.I)/2,e.iY+=(a.A9-e.F)/2}e.iX-=e.AQ/2,e.iY-=e.AQ/2,e.I+=e.AQ,e.F+=e.AQ}1t(){1a e=1g;1E.1t(),e.RU();1a t=e.C.Q;if(!(e.iY+5<t.iY||e.iY+5>=t.iY+t.F)){if(e.AL){1a i=1o.6f.aF("I4",e,e.A.K+"-5S-3C");if(i.K=e.K,i.1S(e),("2a"!==e.A.J2||e.C.K6[e.A.L]||e.C.KX||e.A.T4&&e.A.T4[e.L])&&i.1S(e.A.HY(e,i)),i.iX=e.iX,i.iY=e.iY,i.I=e.I,i.F=e.F,i.Z=e.A.CL("bl",1),i.C6=e.A.CL("bl",0),(-1!==i.BU&&i.AQ>0||i.QD+i.OO+i.NX+i.PD!==""||-1!==i.A0||-1!==i.AC||""!==i.D7||""!==i.GQ||""!==i.HP)&&(i.1t(),!i.KE)){1a a=e.C.K+ZC.1b[34]+e.C.K+ZC.1b[35]+e.A.L+ZC.1b[6];e.A.A.HV.1h(ZC.P.GF("5t",e.A.E5,e.A.IX)+\'1O="\'+a+\'" id="\'+e.K+ZC.1b[30]+ZC.1k(e.iX+ZC.3B)+","+ZC.1k(e.iY+ZC.3B)+","+ZC.1k(e.iX+e.I+ZC.3B)+","+ZC.1k(e.iY+e.F+ZC.3B)+\'" />\')}}e.A.U&&e.A.U.AL&&e.F7()}}HZ(e){1a t=1g;ZC.3o||t.LL({6v:e,1J:"3C",8S:1n(){1g.AC=t.A.BN[3],1g.B8=t.A.BN[1],1g.BU=t.A.BN[1],1g.A0=t.A.BN[2]},c9:1n(){1g.iX=t.iX,1g.iY=t.iY,1g.I=t.I,1g.F=t.F}})}}1O yG 2k MG{2I(){1a e=1g,t=e.A.B1,i=e.A.CH,a=[t.X,t.A1,i.X,i.A1];e.JO!==a&&(t.AR?e.iX=t.iX+t.I-t.A6-(e.L+1)*t.A9:e.iX=t.iX+t.A6+e.L*t.A9,i.AR?e.iY=i.iY+i.A6+e.A.L*i.A9:e.iY=i.iY+i.F-i.A6-(e.A.L+1)*i.A9,e.JO=a),e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0)}EW(e,t,i,a){1a n,l,r=1g,o=ZC.1Y(r.A.A.FA["%aT-"+r.L+"-0-7V"]||"0"),s=r.A.LT();if(ZC.2E(t,s),r.CR=[],r.A.L>0&&r.A.A.A7[r.A.L-1]&&r.A.A.A7[r.A.L-1].S[r.L]?l=""+(n=100*r.AE/r.A.A.A7[r.A.L-1].S[r.L].AE):(n=100,l="100"),1c!==ZC.1d(s[ZC.1b[12]])&&(l=n.4C(ZC.BO(0,ZC.1k(s[ZC.1b[12]])))),r.CR.1h(["%bD-8l-1U",l]),o>0){1a C=100*r.AE/o,A=""+C;1c!==ZC.1d(s[ZC.1b[12]])&&(A=C.4C(ZC.BO(0,ZC.1k(s[ZC.1b[12]])))),r.CR.1h(["%2r-8l-1U",A]),r.CR.1h(["%8v",A])}1l e=1E.EW(e,t,i,a)}1t(){1a e,t,i,a,n,l,r,o,s,C,A,Z,c,p=1g;1E.1t();1a u=p.A.B1,h=p.A.CH;p.2I(),"8N"===p.A.ji?(p.C.AY.SP[p.L],e=p.C.AY.eu[p.L]):(p.C.AY.B4,e=p.C.AY.BQ);1a 1b=p.A.L6;1b<=1&&(1b*=u.A9);1a d=p.A.NV;d<=1&&(d*=u.A9);1a f=p.A.M8;f<=1&&(f*=u.A9);1a g=u.A9-1b-d-f,B=f+g*(p.AE/e),v=0;p.A.L+1<p.A.A.A7.1f&&p.A.A.A7[p.A.L+1].S[p.L]&&(v=p.A.A.A7[p.A.L+1].S[p.L].AE);1a E=f+g*(v/e);p.E["8j-7S"]=[B,E];1a b=p.iX+(u.AR?d:1b)+g/2+f/2;if(a=[],h.AR?a.1h([b-B/2,p.iY],[b+B/2,p.iY],[b+E/2,p.iY+h.A9],[b-E/2,p.iY+h.A9],[b-B/2,p.iY]):a.1h([b-B/2,p.iY+h.A9],[b+B/2,p.iY+h.A9],[b+E/2,p.iY],[b-E/2,p.iY],[b-B/2,p.iY+h.A9]),p.E.2W=a,p.AL){1a m=1m DS(p.A);m.K=p.K+"-nb",m.1S(p),m.D=a,m.1q(),m.Z=p.A.CL("bl",1),m.C6=p.A.CL("bl",0),m.1t();1a K=m.F1(),D=p.C.K+ZC.1b[34]+p.C.K+ZC.1b[35]+p.A.L+ZC.1b[6];p.A.A.HV.1h(ZC.P.GF("4B",p.A.E5,p.A.IX)+\'1O="\'+D+\'" id="\'+p.K+ZC.1b[30]+K+\'" />\')}1j(t=0,i=p.A.P6.1f;t<i;t++){1a F=p.A.P6[t];F&&1c!==ZC.1d(F.o[ZC.1b[5]])&&1c!==ZC.1d(F.o[ZC.1b[5]][p.L])&&(1c===ZC.1d(F.o[ZC.1b[19]])&&1c===ZC.1d(F.o[ZC.1b[20]])||((n=1m I4(p.A)).1C(F.o),n.1q()),l=0,r=0,1c!==ZC.1d(F.o[ZC.1b[19]])&&(l=n.I),1c!==ZC.1d(F.o[ZC.1b[20]])&&(r=n.F),0===l&&(l=ZC.BO(20,u.A9/10)),0===r&&(r=ZC.BO(16,h.A9/10)),(o=1m DS(p.A)).K=p.K+"-7L-8j",o.1S(p),o.1C(F.o),o.1q(),a=[],1===p.A.P6.1f?C=p.iY+h.A9/2:(A=h.A9/(p.A.P6.1f+1),C=p.iY+A+t*A),u.AR?(s=p.iX+u.A9+l-1b-g/2+(B+E)/4-f/2+2,a.1h([s,C-2*r/6],[s-2*l/3,C-r/6],[s-2*l/3,C-3*r/6],[s-l,C],[s-2*l/3,C+3*r/6],[s-2*l/3,C+r/6],[s,C+2*r/6],[s,C-2*r/6])):(s=p.iX+1b-l+g/2-(B+E)/4+f/2-2,a.1h([s,C-2*r/6],[s+2*l/3,C-r/6],[s+2*l/3,C-3*r/6],[s+l,C],[s+2*l/3,C+3*r/6],[s+2*l/3,C+r/6],[s,C+2*r/6],[s,C-2*r/6])),o.D=a,o.1q(),o.Z=p.A.CL("bl",1),o.C6=p.A.CL("bl",0),o.1t(),1c!==ZC.1d(F.o[ZC.1b[10]])&&1c!==ZC.1d(F.o[ZC.1b[10]][p.L])&&""!==F.o[ZC.1b[10]][p.L]&&(Z=F.o[ZC.1b[10]][p.L],(c=1m DP(p.A)).K=p.K+"-8j-1H-"+t,c.GM=p.K+"-8j-1H "+p.A.K+"-8j-1H zc-8j-1H",c.1S(p),c.o.1D=Z,c.1C(F.o),1c!==ZC.1d(F.o.1H)&&c.1C(F.o.1H),c.Z=p.A.CL("fl",0),c.1q(),u.AR?c.iX=s+2:c.iX=s-c.I-2,c.iY=C-c.F/2,c.1t(),c.EB()))}1j(t=0,i=p.A.W2.1f;t<i;t++){1a I=p.A.W2[t];I&&1c!==ZC.1d(I.o[ZC.1b[5]])&&1c!==ZC.1d(I.o[ZC.1b[5]][p.L])&&(1c===ZC.1d(I.o[ZC.1b[19]])&&1c===ZC.1d(I.o[ZC.1b[20]])||((n=1m I4(p.A)).1C(I.o),n.1q()),l=0,r=0,1c!==ZC.1d(I.o[ZC.1b[19]])&&(l=n.I),1c!==ZC.1d(I.o[ZC.1b[20]])&&(r=n.F),0===l&&(l=ZC.BO(20,u.A9/10)),0===r&&(r=ZC.BO(16,h.A9/10)),(o=1m DS(p.A)).K=p.K+"-7L-7S",o.1S(p),o.1C(I.o),o.1q(),a=[],1===p.A.W2.1f?C=p.iY+h.A9/2:(A=h.A9/(p.A.W2.1f+1),C=p.iY+A+t*A),u.AR?(s=p.iX+d+g/2-(B+E)/4+f/2-2,a.1h([s,C-2*r/6],[s-2*l/3,C-r/6],[s-2*l/3,C-3*r/6],[s-l,C],[s-2*l/3,C+3*r/6],[s-2*l/3,C+r/6],[s,C+2*r/6],[s,C-2*r/6])):(s=p.iX+u.A9-d-g/2+(B+E)/4-f/2+2,a.1h([s,C-2*r/6],[s+2*l/3,C-r/6],[s+2*l/3,C-3*r/6],[s+l,C],[s+2*l/3,C+3*r/6],[s+2*l/3,C+r/6],[s,C+2*r/6],[s,C-2*r/6])),o.D=a,o.1q(),o.Z=p.A.CL("bl",1),o.C6=p.A.CL("bl",0),o.1t(),1c!==ZC.1d(I.o[ZC.1b[10]])&&1c!==ZC.1d(I.o[ZC.1b[10]][p.L])&&""!==I.o[ZC.1b[10]][p.L]&&(Z=I.o[ZC.1b[10]][p.L],(c=1m DP(p.A)).K=p.K+"-7S-1H-"+t,c.GM=p.K+"-7S-1H "+p.A.K+"-7S-1H zc-7S-1H",c.1S(p),c.o.1D=Z,c.1C(I.o),1c!==ZC.1d(I.o.1H)&&c.1C(I.o.1H),c.1q(),c.Z=p.A.CL("fl",0),u.AR?c.iX=s-l-c.I-2:c.iX=s+l+2,c.iY=C-c.F/2,c.1t(),c.EB()))}p.A.U&&p.F7()}HD(e){1a t,i=1g,a=i.A.B1,n=i.A.CH;1c!==ZC.1d(e.o[ZC.1b[7]])&&(t=e.o[ZC.1b[7]]);1a l=i.iX+a.A9/2-e.I/2,r=i.iY+n.A9/2-e.F/2,o=i.E["8j-7S"],s=(o[0]+o[1])/2;1R(t){1i"in":1i"3i":1p;1i"1v":r=i.iY+5;1p;1i"2c":r=i.iY+n.A9-e.F-5;1p;1i"1K":l=i.iX+a.A9/2-s/2+5;1p;1i"1K-4R":l=i.iX+a.A9/2-s/2-e.I-5;1p;1i"2z":l=i.iX+a.A9/2+s/2-e.I-5;1p;1i"2z-4R":l=i.iX+a.A9/2+s/2+5}1l 1c!==ZC.1d(e.o.x)&&(l=e.iX),1c!==ZC.1d(e.o.y)&&(r=e.iY),[ZC.1k(l),ZC.1k(r)]}HZ(){1a e=1g;if(!ZC.3o&&e.A.IH&&e.A.AL){1E.HZ();1a t=1m DS(e.A);t.K=e.K+"-nb-2N",t.Z=ZC.AK(e.C.K+ZC.1b[22]),t.D=e.E.2W,t.1q(),t.B8=e.A.BN[1],t.BU=e.A.BN[1],t.A0=e.A.BN[2],t.AC=e.A.BN[3],t.1C(e.A.IH.o),t.1q(),t.IY=1n(t){1l e.IY(t)},t.DB()&&t.1q(),t.AL&&t.1t()}}}1O yF 2k MG{2I(){1a e=1g,t=e.A.B1,i=e.A.CH,a=[t.X,t.A1,i.X,i.A1];e.JO!==a&&(t.AR?e.iY=t.iY+t.A6+e.L*t.A9:e.iY=t.iY+t.F-t.A6-(e.L+1)*t.A9,i.AR?e.iX=i.iX+i.I-i.A6-(e.A.L+1)*i.A9:e.iX=i.iX+i.A6+e.A.L*i.A9,e.JO=a),e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0)}EW(e,t,i,a){1a n,l,r=1g,o=ZC.1Y(r.A.A.FA["%aT-"+r.L+"-0-7V"]||"0"),s=r.A.LT();if(ZC.2E(t,s),r.CR=[],r.A.L>0&&r.A.A.A7[r.A.L-1]&&r.A.A.A7[r.A.L-1].S[r.L]?l=""+(n=100*r.AE/r.A.A.A7[r.A.L-1].S[r.L].AE):(n=100,l="100"),1c!==ZC.1d(s[ZC.1b[12]])&&(l=n.4C(ZC.BO(0,ZC.1k(s[ZC.1b[12]])))),r.CR.1h(["%bD-8l-1U",l]),o>0){1a C=100*r.AE/o,A=""+C;1c!==ZC.1d(s[ZC.1b[12]])&&(A=C.4C(ZC.BO(0,ZC.1k(s[ZC.1b[12]])))),r.CR.1h(["%2r-8l-1U",A]),r.CR.1h(["%8v",A])}1l e=1E.EW(e,t,i,a)}HD(e){1a t,i=1g,a=i.A.B1,n=i.A.CH;1c!==ZC.1d(e.o[ZC.1b[7]])&&(t=e.o[ZC.1b[7]]);1a l=i.iX+n.A9/2-e.I/2,r=i.iY+a.A9/2-e.F/2,o=i.E["8j-7S"],s=(o[0]+o[1])/2;1R(t){1i"in":1i"3i":1p;1i"1v":l=i.iX+n.A9-e.I-5;1p;1i"2c":l=i.iX+5;1p;1i"1K":r=i.iY+a.A9/2-s/2+5;1p;1i"1K-4R":r=i.iY+a.A9/2-s/2-e.F-5;1p;1i"2z":r=i.iY+a.A9/2+s/2-e.F-5;1p;1i"2z-4R":r=i.iY+a.A9/2+s/2+5}1l 1c!==ZC.1d(e.o.x)&&(l=e.iX),1c!==ZC.1d(e.o.y)&&(r=e.iY),[ZC.1k(l),ZC.1k(r)]}1t(){1a e,t,i,a,n,l,r,o,s,C,A,Z,c,p=1g;1E.1t();1a u=p.A.B1,h=p.A.CH;p.2I(),"8N"===p.A.ji?(p.C.AY.SP[p.L],e=p.C.AY.eu[p.L]):(p.C.AY.B4,e=p.C.AY.BQ);1a 1b=p.A.L6;1b<=1&&(1b*=u.A9);1a d=p.A.NV;d<=1&&(d*=u.A9);1a f=p.A.M8;f<=1&&(f*=u.A9);1a g=u.A9-1b-d-f,B=f+g*(p.AE/e),v=0;p.A.L+1<p.A.A.A7.1f&&p.A.A.A7[p.A.L+1].S[p.L]&&(v=p.A.A.A7[p.A.L+1].S[p.L].AE);1a E=f+g*(v/e);p.E["8j-7S"]=[B,E];1a b=p.iY+(u.AR?1b:d)+g/2+f/2;if(r=[],h.AR?r.1h([p.iX+h.A9,b-B/2],[p.iX+h.A9,b+B/2],[p.iX,b+E/2],[p.iX,b-E/2],[p.iX+h.A9,b-B/2]):r.1h([p.iX,b-B/2],[p.iX,b+B/2],[p.iX+h.A9,b+E/2],[p.iX+h.A9,b-E/2],[p.iX,b-B/2]),p.E.2W=r,p.AL){1a m=1m DS(p.A);m.K=p.K+"-nb",m.1S(p),m.D=r,m.1q(),m.Z=p.A.CL("bl",1),m.C6=p.A.CL("bl",0),m.1t();1a K=m.F1(),D=p.C.K+ZC.1b[34]+p.C.K+ZC.1b[35]+p.A.L+ZC.1b[6];p.A.A.HV.1h(ZC.P.GF("4B",p.A.E5,p.A.IX)+\'1O="\'+D+\'" id="\'+p.K+ZC.1b[30]+K+\'" />\')}1j(t=0,i=p.A.P6.1f;t<i;t++){1a F=p.A.P6[t];F&&1c!==ZC.1d(F.o[ZC.1b[5]])&&1c!==ZC.1d(F.o[ZC.1b[5]][p.L])&&(1c===ZC.1d(F.o[ZC.1b[19]])&&1c===ZC.1d(F.o[ZC.1b[20]])||((l=1m I4(p.A)).1C(F.o),l.1q()),a=0,n=0,1c!==ZC.1d(F.o[ZC.1b[19]])&&(a=l.I),1c!==ZC.1d(F.o[ZC.1b[20]])&&(n=l.F),0===n&&(n=ZC.BO(20,u.A9/10)),0===a&&(a=ZC.BO(16,h.A9/10)),(o=1m DS(p.A)).K=p.K+"-7L-8j",o.1S(p),o.1C(F.o),o.1q(),r=[],1===p.A.P6.1f?s=p.iX+h.A9/2:(A=h.A9/(p.A.P6.1f+1),s=p.iX+A+t*A),u.AR?(C=p.iY+1b-n+g/2-(B+E)/4+f/2-2,r.1h([s-2*a/6,C],[s+2*a/6,C],[s+a/6,C+2*n/3],[s+3*a/6,C+2*n/3],[s,C+n],[s-3*a/6,C+2*n/3],[s-a/6,C+2*n/3])):(C=p.iY+u.A9+n-1b-g/2+(B+E)/4-f/2+2,r.1h([s-2*a/6,C],[s+2*a/6,C],[s+a/6,C-2*n/3],[s+3*a/6,C-2*n/3],[s,C-n],[s-3*a/6,C-2*n/3],[s-a/6,C-2*n/3])),o.D=r,o.1q(),o.Z=p.A.CL("bl",1),o.C6=p.A.CL("bl",0),o.1t(),1c!==ZC.1d(F.o[ZC.1b[10]])&&1c!==ZC.1d(F.o[ZC.1b[10]][p.L])&&""!==F.o[ZC.1b[10]][p.L]&&(Z=F.o[ZC.1b[10]][p.L],(c=1m DP(p.A)).K=p.K+"-8j-1H-"+t,c.GM=p.K+"-8j-1H "+p.A.K+"-8j-1H zc-8j-1H",c.1S(p),c.o.1D=Z,c.1C(F.o),1c!==ZC.1d(F.o.1H)&&c.1C(F.o.1H),c.AP=Z,c.Z=p.A.CL("fl",0),c.1q(),c.iX=s-c.I/2,u.AR?c.iY=C-c.F-2:c.iY=C+2,c.1t(),c.EB()))}1j(t=0,i=p.A.W2.1f;t<i;t++){1a I=p.A.W2[t];I&&1c!==ZC.1d(I.o[ZC.1b[5]])&&1c!==ZC.1d(I.o[ZC.1b[5]][p.L])&&(1c===ZC.1d(I.o[ZC.1b[19]])&&1c===ZC.1d(I.o[ZC.1b[20]])||((l=1m I4(p.A)).1C(I.o),l.1q()),a=0,n=0,1c!==ZC.1d(I.o[ZC.1b[19]])&&(a=l.I),1c!==ZC.1d(I.o[ZC.1b[20]])&&(n=l.F),0===n&&(n=ZC.BO(20,u.A9/10)),0===a&&(a=ZC.BO(16,h.A9/10)),(o=1m DS(p.A)).K=p.K+"-7L-7S",o.1S(p),o.1C(I.o),o.1q(),r=[],1===p.A.P6.1f?s=p.iX+h.A9/2:(A=h.A9/(p.A.P6.1f+1),s=p.iX+A+t*A),u.AR?(C=p.iY+1b+g/2+(B+E)/4+f/2+2,r.1h([s-2*a/6,C],[s+2*a/6,C],[s+a/6,C+2*n/3],[s+3*a/6,C+2*n/3],[s,C+n],[s-3*a/6,C+2*n/3],[s-a/6,C+2*n/3])):(C=p.iY+u.A9-1b-g/2-(B+E)/4-f/2-2,r.1h([s-2*a/6,C],[s+2*a/6,C],[s+a/6,C-2*n/3],[s+3*a/6,C-2*n/3],[s,C-n],[s-3*a/6,C-2*n/3],[s-a/6,C-2*n/3])),o.D=r,o.1q(),o.Z=p.A.CL("bl",1),o.C6=p.A.CL("bl",0),o.1t(),1c!==ZC.1d(I.o[ZC.1b[10]])&&1c!==ZC.1d(I.o[ZC.1b[10]][p.L])&&""!==I.o[ZC.1b[10]][p.L]&&(Z=I.o[ZC.1b[10]][p.L],(c=1m DP(p.A)).K=p.K+"-7S-1H-"+t,c.GM=p.K+"-7S-1H "+p.A.K+"-7S-1H zc-7S-1H",c.1S(p),c.o.1D=Z,c.1C(I.o),1c!==ZC.1d(I.o.1H)&&c.1C(I.o.1H),c.AP=Z,c.Z=p.A.CL("fl",0),c.1q(),c.iX=s-c.I/2,u.AR?c.iY=C+n+2:c.iY=C-n-c.F-2,c.1t(),c.EB()))}p.A.U&&p.F7()}HZ(){1a e=1g;if(!ZC.3o&&e.A.IH&&e.A.AL){1E.HZ();1a t=1m DS(e.A);t.K=e.K+"-nb-2N",t.Z=ZC.AK(e.C.K+ZC.1b[22]),t.D=e.E.2W,t.1q(),t.B8=e.A.BN[1],t.BU=e.A.BN[1],t.A0=e.A.BN[2],t.AC=e.A.BN[3],t.1C(e.A.IH.o),t.1q(),t.IY=1n(t){1l e.IY(t)},t.DB()&&t.1q(),t.AL&&t.1t()}}}1O yE 2k MG{2G(e){1E(e),1g.J4=1c}2I(){1a e=1g,t=e.A.B1,i=e.A.CH,a=[t.X,t.A1,i.X,i.A1];if(e.JO!==a&&(1c!==e.BY?e.iX=t.AX(e.BY):e.iX=t.H1(e.L),e.iY=i.AX(e.AE),e.E.XX=i.AX(e.AE),e.E.ma=i.AX(e.DK[0]),e.E.m8=i.AX(e.DK[1]),e.E.VX=i.AX(e.DK[2]),e.JO=a),(!e.IQ||e.A.IW&&e.A.N2[ZC.1b[21]]<3)&&(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.J4=1m DP(e.A),e.J4.1S(e),e.DK[2]<e.AE&&(e.J4.A0=e.J4.AC=e.C0,e.J4.BU=e.B8),e.DK[2]<e.AE?(e.A.o["6Y-ar"]&&(e.J4.1C(e.A.o["6Y-ar"]),e.J4.1q()),e.A.N2.ar||(e.A.N2.ar=1m DP(e.A),e.A.N2.ar.1S(e.J4),e.A.N2[ZC.1b[21]]++)):e.DK[2]>e.AE?(e.A.o["6Y-up"]&&(e.J4.1C(e.A.o["6Y-up"]),e.J4.1q()),e.A.N2.up||(e.A.N2.up=1m DP(e.A),e.A.N2.up.1S(e.J4),e.A.N2[ZC.1b[21]]++)):(e.A.o["6Y-a7"]&&(e.J4.1C(e.A.o["6Y-a7"]),e.J4.1q()),e.A.N2.a7||(e.A.N2.a7=1m DP(e.A),e.A.N2.a7.1S(e.J4),e.A.N2[ZC.1b[21]]++)),e.IQ=!0),e.A.IW){e.DK[2]<e.AE?e.J4=e.A.N2.ar:e.DK[2]>e.AE?e.J4=e.A.N2.up:e.J4=e.A.N2.a7;1a n=ZC.CV(e.E.XX,e.E.VX),l=ZC.BO(e.E.XX,e.E.VX)-ZC.CV(e.E.XX,e.E.VX);l<2&&(l=2),e.E.n8=n+l/2}}EW(e,t,i,a){1a n=1g,l=n.A.LT();1n r(e){1l ZC.AN.GH(e,l)}1l ZC.2E(t,l),n.CR=[["%2r-1U-7Y-bn",r(n.AE)],["%bn",r(n.AE)],["%v0",r(n.AE)],["%2r-1U-7Y-rO",r(n.DK[0])],["%rO",r(n.DK[0])],["%v1",r(n.DK[0])],["%2r-1U-7Y-rG",r(n.DK[1])],["%rG",r(n.DK[1])],["%v2",r(n.DK[1])],["%2r-1U-7Y-7l",r(n.DK[2])],["%7l",r(n.DK[2])],["%v3",r(n.DK[2])]],e=1E.EW(e,t,i,a)}H9(){1a e,t,i=1g;if(i.DK=[],i.o[ZC.1b[9]]3F 3N&&5===i.o[ZC.1b[9]].1f)i.BY=ZC.1Y(i.o[ZC.1b[9]][0]),1c!==i.BY&&(1c!==ZC.1d(i.A.K9[i.BY])&&-1!==ZC.AT(i.A.K9[i.BY],i.L)||i.A.TD(i.BY,i.L)),t=[i.o[ZC.1b[9]][1],i.o[ZC.1b[9]][2],i.o[ZC.1b[9]][3],i.o[ZC.1b[9]][4]];1u if(i.o[ZC.1b[9]][1]3F 3N){if("3e"==1w i.o[ZC.1b[9]][0]){1a a=ZC.AT(i.A.B1.IU,i.o[ZC.1b[9]][0]);-1!==a?i.BY=a:(i.A.B1.IU.1h(i.o[ZC.1b[9]][0]),i.BY=i.A.B1.IU.1f-1)}1u i.BY=ZC.1Y(i.o[ZC.1b[9]][0]);1c!==i.BY&&(1c!==ZC.1d(i.A.K9[i.BY])&&-1!==ZC.AT(i.A.K9[i.BY],i.L)||i.A.TD(i.BY,i.L)),t=i.o[ZC.1b[9]][1]}1u t=i.o[ZC.1b[9]];i.CJ=t.2M(" "),i.AE=ZC.1Y(t[0]),1c!==ZC.1d(e=t[1])&&i.DK.1h(ZC.1Y(e)),1c!==ZC.1d(e=t[2])&&i.DK.1h(ZC.1Y(e)),1c!==ZC.1d(e=t[3])&&i.DK.1h(ZC.1Y(e))}J9(){1a e=1g,t={};1l e.DK[2]<e.AE?t[ZC.1b[0]]=e.J4.B8:t[ZC.1b[0]]=e.J4.A0,t.1r=e.J4.C0,t}KC(){1a e=1g,t={};1l e.DK[2]<e.AE?t[ZC.1b[0]]=e.J4.B8:t[ZC.1b[0]]=e.J4.A0,t[ZC.1b[61]]=t[ZC.1b[0]],t.1r=e.J4.C0,t}n1(){1l 1g.KC()}1t(){1a e,t=1g;1E.1t();1a i=t.A.B1;t.2I();1j(1a a=i.A9*t.A.Y,n=t.A.L,l=0,r=0;r<t.A.A.K7.7Y.1f;r++)l++,-1!==ZC.AT(t.A.A.K7[t.A.AF][r],t.A.L)&&(n=r);1a o=t.A.CC;o<=1&&(o*=a);1a s=t.A.CP;s<=1&&(s*=a);1a C=a-o-s,A=t.A.F4;A<=1&&(A*=C),C<1&&(C=.8*a,o=.1*a,s=.1*a);1a Z=C,c=t.A.EZ;0!==c&&(A=0),l>1&&(c>1?Z=(C-(l-1)*A+(l-1)*c)/l:c*=Z=(C-(l-1)*A)/(l-(l-1)*c)),Z=ZC.5l(Z,1,C);1a p=t.iX-a/2+o+n*(Z+A)-n*c;p=ZC.5l(p,t.iX-a/2+o,t.iX+a/2-s);1a u,h=Z,1b=ZC.CV(t.E.XX,t.E.VX),d=ZC.BO(t.E.XX,t.E.VX)-ZC.CV(t.E.XX,t.E.VX);if(d<2&&(d=2),o+s===0&&(p-=.5,h+=1),t.I=h,t.F=d,t.iX=p,t.E.n8=1b+d/2,t.bu({x:p,y:1b,w:h,h:d}),t.AL){u=ZC.P.E6(t.H.2P()?t.H.K+"-46-c":t.H.KE?t.C.K+"-4l-bl-c":t.C.K+"-1B-"+t.A.L+"-bl-1-c",t.H.AB);1a f=t.iX+t.I/2;t.DK[2]<t.AE&&(e=t.A.o["6Y-ar"])?(t.E[ZC.1b[73]]=e[ZC.1b[73]],t.E[ZC.1b[72]]=e[ZC.1b[72]]):t.DK[2]>t.AE&&(e=t.A.o["6Y-up"])?(t.E[ZC.1b[73]]=e[ZC.1b[73]],t.E[ZC.1b[72]]=e[ZC.1b[72]]):t.DK[2]===t.AE&&(e=t.A.o["6Y-a7"])&&(t.E[ZC.1b[73]]=e[ZC.1b[73]],t.E[ZC.1b[72]]=e[ZC.1b[72]]);1a g,B=t.A.HY(t,t.J4);1R(t.A.CS){2q:1a v,E;(g=[]).1h([f,t.E.ma],[f,ZC.CV(t.E.XX,t.E.VX)],1c,[f,t.E.m8],[f,ZC.BO(t.E.XX,t.E.VX)]),ZC.CN.1t(u,B,g),E=t.DK[2]<t.AE?t.A.yo:t.DK[2]>t.AE?t.A.yz:t.A.yy,0!==t.A.E3.1f||1w E===ZC.1b[31]||t.N.o.7a||t.C.KX?(v=1m I4(t.A)).1S(B):v=E,t.GK(v),v.Z=t.A.CL("bl",1),v.C6=t.A.CL("bl",0),v.K=t.K,v.iX=p,v.iY=1b,v.I=t.I,v.F=t.F,v.1t(),0!==t.A.E3.1f||1w E!==ZC.1b[31]||t.N.o.7a||t.C.KX||(t.DK[2]<t.AE?t.A.yo=v:t.DK[2]>t.AE?t.A.yz=v:t.A.yy=v);1p;1i"19a":1i"19c":(g=[]).1h([f,t.E.ma],[f,t.E.m8],1c,[f-t.I/4,t.E.XX],[f,t.E.XX],1c,[f+t.I/4,t.E.VX],[f,t.E.VX]),t.GK(B),ZC.CN.1t(u,B,g)}if(t.A.FY){1a b=t.C.K+ZC.1b[34]+t.C.K+ZC.1b[35]+t.A.L+ZC.1b[6];t.A.A.HV.1h(ZC.P.GF("5t",t.A.E5,t.A.IX)+\'1O="\'+b+\'" id="\'+t.K+ZC.1b[30]+ZC.1k(p+ZC.3B)+","+ZC.1k(t.E.ma+ZC.3B)+","+ZC.1k(p+h+ZC.3B)+","+ZC.1k(t.E.m8+ZC.3B)+\'" />\')}t.A.U&&t.A.U.AL&&t.F7()}}HZ(){1a e=1g;if(!ZC.3o&&e.A.IH&&e.A.AL)1R(1E.HZ(),e.A.CS){1i"yv":1a t=1m I4(e.A);t.K=e.K+"-2N",t.Z=ZC.AK(e.C.K+ZC.1b[22]),t.C0=e.A.BN[0],t.AC=e.A.BN[3],t.B8=e.A.BN[1],t.BU=e.A.BN[1],t.A0=e.A.BN[2],t.1C(e.A.IH.o),t.QB=!0,t.1q(),t.IY=1n(t){1l e.IY(t)},t.DB()&&t.1q(),e.DK[2]<e.AE&&(t.A0=t.AC=t.C0,t.BU=t.B8),e.DK[2]<e.AE&&e.A.o["6Y-ar"]?(t.1C(e.A.o["6Y-ar"]),t.1C(e.A.o[ZC.1b[71]]),e.A.o["6Y-ar"][ZC.1b[71]]&&t.1C(e.A.o["6Y-ar"][ZC.1b[71]]),t.1q()):e.DK[2]>e.AE&&e.A.o["6Y-up"]?(t.1C(e.A.o["6Y-up"]),t.1C(e.A.o[ZC.1b[71]]),e.A.o["6Y-up"][ZC.1b[71]]&&t.1C(e.A.o["6Y-up"][ZC.1b[71]]),t.1q()):e.DK[2]===e.AE&&e.A.o["6Y-a7"]&&(t.1C(e.A.o["6Y-a7"]),t.1C(e.A.o[ZC.1b[71]]),e.A.o["6Y-a7"][ZC.1b[71]]&&t.1C(e.A.o["6Y-a7"][ZC.1b[71]]),t.1q()),t.iX=e.5K("x"),t.iY=e.5K("y"),t.I=e.5K("w"),t.F=e.5K("h");1a i=e.C.Q;t.iY<i.iY&&(t.F=t.F-(i.iY-t.iY),t.iY=i.iY),t.iY+t.F>i.iY+i.F&&(t.F=i.iY+i.F-t.iY),t.AL&&t.1t()}}}1O yt 2k MG{2I(){1a e=1g,t=e.C.BK(e.A.BT("k")[0]),i=e.C.BK(e.A.BT("v")[0]),a=e.L%t.GZ,n=1A.4h(e.L/t.GZ),l=i.EO/(i.BQ-i.B4);e.iX=t.iX+a*t.GJ+t.GJ/2,e.iY=t.iY+n*t.GC+t.GC/2,e.E.2f=i.DL-i.EO/2+l*(e.AE-i.B4),i.AR&&(e.E.2f=i.DL+i.EO/2-l*(e.AE-i.B4)),e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0)}HD(e){1a t,i,a,n=e.I,l=e.F,r=1g,o=r.C.BK(r.A.BT("k")[0]),s=ZC.CV(o.GJ/2,o.GC/2)*o.JQ,C=r.L%o.GZ,A=1A.4h(r.L/o.GZ),Z=o.iX+C*o.GJ+o.GJ/2+o.BJ,c=o.iY+A*o.GC+o.GC/2+o.BC;1R(e.o[ZC.1b[7]]){1i"3G":i=Z-n/2+r.BJ,a=c-l/2+r.BC;1p;1i"18c":i=(t=ZC.AO.BM(Z,c,s+e.DR,r.E.2f))[0]-n/2+r.BJ,a=t[1]-l/2+r.BC;1p;1i"m1":i=(t=ZC.AO.BM(Z,c,r.E[ZC.1b[21]]+e.DR,r.E.2f))[0]-n/2+r.BJ,a=t[1]-l/2+r.BC;1p;2q:i=(t=ZC.AO.BM(Z,c,s/2+e.DR,r.E.2f))[0]-n/2+r.BJ,a=t[1]-l/2+r.BC}1l 1c!==ZC.1d(e.o.x)&&(i=e.iX),1c!==ZC.1d(e.o.y)&&(a=e.iY),[ZC.1k(i),ZC.1k(a)]}J9(){1l{1r:1g.A0}}KC(){1l{"1W-1r":1g.A0,"1G-1r":1g.B8,1r:1g.C0}}1t(){1a e,t=1g;1E.1t(),t.2I(),t.CX=!1;1a i=t.C.BK(t.A.BT("k")[0]),a=ZC.CV(i.GJ/2,i.GC/2)*i.JQ,n=t.L%i.GZ,l=1A.4h(t.L/i.GZ),r=i.iX+n*i.GJ+i.GJ/2+i.BJ,o=i.iY+l*i.GC+i.GC/2+i.BC,s=ZC.IL(t.A.o[ZC.1b[21]]||"0.9",!1);s>0&&s<=1&&(s*=a),t.E[ZC.1b[21]]=s;1a C=t.N=t.A.HY(t,t),A=1m DS(t.A);1n Z(i){1a n=[],l=t.A.I0;l[4]>-1&&l[4]<1&&(l[4]=ZC.1k(l[4]*a));1a C=ZC.AO.BM(r,o,l[4],i);if(l[0]>=0)1j(e=-l[2];e<=180+l[2];e+=5)n.1h(ZC.AO.BM(C[0],C[1],l[0],i+3U-e));1u n.1h(ZC.AO.BM(C[0],C[1],ZC.2l(l[0]),i-90)),n.1h(ZC.AO.BM(C[0],C[1],ZC.2l(l[0]),i+90));if(0===l[1])n.1h(ZC.AO.BM(r,o,s>0?s:.9*a,i));1u if(l[1]>0)1j(C=ZC.AO.BM(r,o,s>0?s:.9*a,i),e=-l[3];e<=180+l[3];e+=5)n.1h(ZC.AO.BM(C[0],C[1],l[1],i-3U-e));1u C=ZC.AO.BM(r,o,(s>0?s:.9*a)+l[1],i),n.1h(ZC.AO.BM(C[0],C[1],ZC.2l(l[1]/(90/l[3])),i+90),ZC.AO.BM(C[0],C[1],ZC.2l(l[1]),i+90),ZC.AO.BM(r,o,s>0?s:.9*a,i),ZC.AO.BM(C[0],C[1],ZC.2l(l[1]),i+3U),ZC.AO.BM(C[0],C[1],ZC.2l(l[1]/(90/l[3])),i+3U));1l n.1h([n[0][0],n[0][1]]),n}1n c(){1a e=A.F1(),i=t.C.K+ZC.1b[34]+t.C.K+ZC.1b[35]+t.A.L+ZC.1b[6],a=ZC.P.GF("4B",t.A.E5,t.A.IX)+\'1O="\'+i+\'" id="\'+t.K+ZC.1b[30]+e+\'" />\';t.A.A.HV.1h(a)}A.1S(C),A.Z=t.A.CL("bl",1),A.C6=t.A.CL("bl",0),A.K=t.K+"-7L";1a p=t.C.BK(t.A.BT("v")[0]),u=p.DL-p.EO/2,h=Z(t.E.2f);if(t.E.2W=h,A.DN="4B",A.D=h,A.1q(),A.IY=1n(e){1l t.IY(e)},A.DB()&&A.1q(),t.A.GB&&!t.C.HK){1a 1b,d=A,f={},g=t.A.LG;1j(1b in d.C5=0,f.2n=C.C5,2===g&&(d.m9=u,f.m9=t.E.2f),t.A.FV)d[E8.GO[ZC.EC(1b)]]=t.A.FV[1b],f[ZC.EC(1b)]=C[E8.GO[ZC.EC(1b)]];if(t.C.EJ||(t.C.EJ={}),1c!==ZC.1d(t.C.EJ[t.A.L+"-"+t.L]))1j(1b in t.C.EJ[t.A.L+"-"+t.L]){1a B=E8.GO[ZC.EC(1b)];1c===ZC.1d(B)&&(B=1b),d[B]=t.C.EJ[t.A.L+"-"+t.L][1b]}t.C.EJ[t.A.L+"-"+t.L]={},ZC.2E(f,t.C.EJ[t.A.L+"-"+t.L]);1a v=1m E8(d,f,t.A.JI,t.A.LB,E8.RR[t.A.LF],1n(){c()});v.AV=t,v.lM=1n(e,t){1c!==ZC.1d(t.m9)&&(e.D=Z(t.m9))},t.L5(v),t.A.U&&t.F7()}1u A.1t(),t.A.U&&t.F7(),c()}HZ(e){1a t=1g;ZC.3o||t.LL({6v:e,1J:"2S",8S:1n(){1g.1S(t),1g.B8=t.A.BN[1],1g.BU=t.A.BN[1],1g.A0=t.A.BN[3],1g.AC=t.A.BN[2],1g.D=t.E.2W,1g.Z=1g.C6=t.A.CL("bl",2)}})}}1O yq 2k MG{2G(e){1E(e);1a t=1g;t.CI=1c,t.CO=1c,t.MU="2j"}EW(e,t,i,a){1a n=1g;1l n.CR=[["%5z-mN",n.MU],["%2r-2j-1U",n.CI],["%2r-1X-1U",n.CO]],e=1E.EW(e,t,i,a)}H9(){1a e,t,i=1g;i.o[ZC.1b[9]][1]3F 3N?("3e"==1w i.o[ZC.1b[9]][0]?-1!==(t=ZC.AT(i.A.B1.IU,i.o[ZC.1b[9]][0]))?i.BY=t:(i.A.B1.IU.1h(i.o[ZC.1b[9]][0]),i.BY=i.A.B1.IU.1f-1):i.BY=ZC.1Y(i.o[ZC.1b[9]][0]),1c!==i.BY&&(1c!==ZC.1d(i.A.K9[i.BY])&&-1!==ZC.AT(i.A.K9[i.BY],i.L)||i.A.TD(i.BY,i.L)),e=i.o[ZC.1b[9]][1]):e=i.o[ZC.1b[9]],"3e"==1w e[0]?-1!==(t=ZC.AT(i.A.CH.JN,e[0]))?i.CI=t:(i.A.CH.JN.1h(e[0]),i.CI=i.A.CH.JN.1f-1):i.CI=ZC.1Y(e[0]),i.DK.1h(i.CI),"3e"==1w e[1]?-1!==(t=ZC.AT(i.A.CH.JN,e[1]))?i.CO=t:(i.A.CH.JN.1h(e[1]),i.CO=i.A.CH.JN.1f-1):i.CO=ZC.1Y(e[1]),i.CJ=e.2M(" "),i.AE=i.CO}2I(){1a e=1g,t=e.A.OZ,i=e.A.B1,a=e.A.CH,n=[i.X,i.A1,a.X,a.A1,e.MU];1c===ZC.1d(e.AG)&&(e.AG=[]),e.JO!==n&&(t?(1c!==e.BY?e.iY=i.AX(e.BY):e.iY=i.H1(e.L),e.iX=a.AX("2j"===e.MU?e.CI:e.CO)):(1c!==e.BY?e.iX=i.AX(e.BY):e.iX=i.H1(e.L),e.iY=a.AX("2j"===e.MU?e.CI:e.CO)),e.JO=n),e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q()),e.E.NK=a.AX(e.CI),e.E.RG=a.AX(e.CO),e.IQ=!0}J9(){1l{1r:1g.B8}}KC(){1l{"1W-1r":1g.B8,"1G-1r":1g.B8,1r:1g.C0}}1t(){1a e,t=1g;1E.1t();1a i=t.A.B1,a=t.A.QK,n=t.A.OZ,l=t.A.S;t.2I(),1c!==ZC.1d(t.A.o[t.MU+"-1y"])&&(t.1C(t.A.o[t.MU+"-1y"]),t.1q()),t.CX=!1,t.C6=t.A.CL("bl",1);1a r,o,s,C,A,Z,c,p,u,h,1b,d,f,g=[],B=[];1R(t.A.CS){2q:1a v=!0;!i.ED&&t.L<=i.X&&(v=!1),l[t.L-t.A.Y]||(v=!1),v&&(l[t.L-t.A.Y].MU=t.MU,l[t.L-t.A.Y].2I(),n?(o=[t.E.NK,t.iY],s=[l[t.L-t.A.Y].E.NK,l[t.L-t.A.Y].iY],C=[t.E.RG,t.iY],A=[l[t.L-t.A.Y].E.RG,l[t.L-t.A.Y].iY],Z=ZC.AO.h2(o,s,C,A),r=ZC.DQ(Z[1],l[t.L-t.A.Y].iY,t.iY)?Z:ZC.AO.JZ(l[t.L-t.A.Y].iX,l[t.L-t.A.Y].iY,l[t.L].iX,l[t.L].iY),B.1h([r[0],ZC.1k(r[1])]),g.1h([r[0],r[1]])):(o=[t.iX,t.E.NK],s=[l[t.L-t.A.Y].iX,l[t.L-t.A.Y].E.NK],C=[t.iX,t.E.RG],A=[l[t.L-t.A.Y].iX,l[t.L-t.A.Y].E.RG],Z=ZC.AO.h2(o,s,C,A),r=ZC.DQ(Z[0],l[t.L-t.A.Y].iX,t.iX)?Z:ZC.AO.JZ(l[t.L-t.A.Y].iX,l[t.L-t.A.Y].iY,l[t.L].iX,l[t.L].iY),B.1h([ZC.1k(r[0]),r[1]]),g.1h([r[0],r[1]]))),n?B.1h([t.iX,ZC.1k(t.iY)]):B.1h([ZC.1k(t.iX),t.iY]),g.1h([t.iX,t.iY]);1a E=!0;!i.ED&&t.L>=i.A1&&(E=!1),l[t.L+t.A.Y]||(E=!1),E&&(l[t.L+t.A.Y].MU=t.MU,l[t.L+t.A.Y].2I(),n?(o=[t.E.NK,t.iY],s=[l[t.L+t.A.Y].E.NK,l[t.L+t.A.Y].iY],C=[t.E.RG,t.iY],A=[l[t.L+t.A.Y].E.RG,l[t.L+t.A.Y].iY],Z=ZC.AO.h2(o,s,C,A),r=ZC.DQ(Z[1],l[t.L+t.A.Y].iY,t.iY)?Z:ZC.AO.JZ(l[t.L].iX,l[t.L].iY,l[t.L+t.A.Y].iX,l[t.L+t.A.Y].iY),B.1h([r[0],ZC.1k(r[1])]),g.1h([r[0],r[1]])):(o=[t.iX,t.E.NK],s=[l[t.L+t.A.Y].iX,l[t.L+t.A.Y].E.NK],C=[t.iX,t.E.RG],A=[l[t.L+t.A.Y].iX,l[t.L+t.A.Y].E.RG],Z=ZC.AO.h2(o,s,C,A),r=ZC.DQ(Z[0],l[t.L+t.A.Y].iX,t.iX)?Z:ZC.AO.JZ(l[t.L].iX,l[t.L].iY,l[t.L+t.A.Y].iX,l[t.L+t.A.Y].iY),B.1h([ZC.1k(r[0]),r[1]]),g.1h([r[0],r[1]])));1p;1i"4Z":if(1w t.E["d5.2Y"]===ZC.1b[31]&&(t.E["d5.2Y"]=-1,l[t.L+t.A.Y])){1a b=[],m=[],K=[];1j(c=-1;c<3;c++)l[t.L+c]?(l[t.L+c].2I(),b.1h(l[t.L+c].E.NK),K.1h(l[t.L+c].E.RG),n?m.1h(l[t.L+c].iY):m.1h(l[t.L+c].iX)):(b.1h(t.E.NK),K.1h(t.E.RG),n?m.1h(t.iY):m.1h(t.iX));u=ZC.2l(m[2]-m[1]);1a D=ZC.AO.YS(t.A.QL,b,ZC.1k(u)),F=ZC.AO.YS(t.A.QL,K,ZC.1k(u));if(l[t.L+t.A.Y].CI===l[t.L+t.A.Y].CO)t.E["d5.2Y"]=D.1f;1u{1a I=D[0][1]-F[0][1];1j(c=1,p=D.1f;c<p;c++)if(1A.4b(I*(D[c][1]-F[c][1]),2)<=0){t.E["d5.2Y"]=c+1;1p}}t.E["4Z.2W.2j"]=D,t.E["4Z.2W.1X"]=F,t.E["4Z.zF"]=u}u=t.E["4Z.zF"]||i.A9,1c===ZC.1d(t.A.h4)&&(t.A.h4={}),1c===ZC.1d(t.A.SJ)&&(t.A.SJ={});1a x=[],X=[];if("2j"===t.MU){if(1c!==ZC.1d(e=t.A.SJ.1X))1j(c=e.1f-1;c>=0;c--)t.AG.1h(t.A.SJ.1X[c]);if(1c!==ZC.1d(e=t.A.SJ.2j))1j(c=0,p=e.1f;c<p;c++)t.AG.1h(e[c])}if(1c!==ZC.1d(e=t.A.h4[t.MU]))1j(g=[],c=0,p=e.1f;c<p;c++)g.1h(e[c]);if(l[t.L+t.A.Y]&&t.L<i.A1){"2j"===t.MU?h=t.E["4Z.2W.2j"]:"1X"===t.MU&&(h=t.E["4Z.2W.1X"]),1b=-1===t.E["d5.2Y"]?ZC.1k(h.1f/2):t.E["d5.2Y"];1a y=n?i.AR?1:-1:i.AR?-1:1;1j(c=0;c<1b;c++)n?(g.1h([h[c][1],t.iY+y*h[c][0]*u]),B.1h([h[c][1],ZC.1k(t.iY+y*h[c][0]*u)])):(g.1h([t.iX+y*h[c][0]*u,h[c][1]]),B.1h([ZC.1k(t.iX+y*h[c][0]*u),h[c][1]]));1a Y=1===t.HX?ZC.CV(2,1b):1;1j(c=1b-1,p=h.1f;c<p;c++)n?x.1h([h[c][1],t.iY+y*h[c][0]*u]):x.1h([t.iX+y*h[c][0]*u,h[c][1]]);1j(c=1b-Y,p=h.1f;c<p;c++)n?X.1h([h[c][1],ZC.1k(t.iY+y*h[c][0]*u)]):X.1h([ZC.1k(t.iX+y*h[c][0]*u),h[c][1]])}1u g.1h([l[t.L].iX,l[t.L].iY]),n?(x.1h([l[t.L].iX,ZC.1k(l[t.L].iY)]),B.1h([l[t.L].iX,ZC.1k(l[t.L].iY)]),X.1h([l[t.L].iX,ZC.1k(l[t.L].iY)])):(x.1h([ZC.1k(l[t.L].iX),l[t.L].iY]),B.1h([ZC.1k(l[t.L].iX),l[t.L].iY]),X.1h([ZC.1k(l[t.L].iX),l[t.L].iY]));t.A.h4[t.MU]=x,t.A.SJ[t.MU]=X}if("2j"===t.MU)1j(c=0,p=B.1f;c<p;c++)t.AG.1h(B[c]);1u 1j(c=B.1f-1;c>=0;c--)t.AG.1h(B[c]);if("1X"===t.MU){1a L=1m DS(t.A);L.K=t.K+"-1N",L.Z=t.A.CL("bl",0),L.1S(t),L.AZ=0,L.AQ=0,L.EV=0,L.G9=0,L.1q(),L.D=t.AG,L.C5=t.A.HX;1a w=t.C.Q;1j(L.CZ=[w.iX,w.iY,w.iX+w.I,w.iY+w.F],L.1t(),t.E.9W=[],c=0,p=t.AG.1f;c<p;c++)t.E.9W.1h(t.AG[c]);t.AG=[],t.A.FY&&(f=L.F1(),d=t.C.K+ZC.1b[34]+t.C.K+"-1B-"+t.A.L+ZC.1b[6],t.A.A.HV.1h(ZC.P.GF("4B",t.A.E5,t.A.IX)+\'1O="\'+d+\'" id="\'+t.K+"--1N"+ZC.1b[30]+f+\'" />\'))}"2j"===t.MU?t.E.2W=g:(t.E.2W.1h(1c),t.E.2W=t.E.2W.4z(g));1a M=1m CY(t);M.1S(t),M.1C(t.A.o[t.MU+"-1y"]),M.1q(),ZC.CN.2I(a,M),ZC.CN.1t(a,M,g),"1X"===t.MU&&t.9n(t,t.E.2W,t.E.9W);if(n?ZC.DQ(t.iY,i.iY-1,i.iY+i.F+1)&&ZC.DQ(t.iX,i.iX-1,i.iX+i.I+1):ZC.DQ(t.iX,i.iX-1,i.iX+i.I+1)&&ZC.DQ(t.iY,i.iY-1,i.iY+i.F+1)){1a H=1m DS(t.A);H.K=t.K+"-1Q-"+t.MU,H.Z=H.C6=t.A.CL("fl",0),H.iX=t.iX,H.iY=t.iY,H.B8=t.A.BN[3],H.BU=t.A.BN[3],H.A0=t.A.BN[2],H.AC=t.A.BN[2],H.1C(t.A.A2.o),t.A.o[t.MU+"-1Q"]&&H.1C(t.A.o[t.MU+"-1Q"]),H.1q(),H.IY=1n(e){1l t.IY(e)},H.DB()&&H.1q(),H.AL&&"2a"!==H.AF&&(t.A.MY>i.A1-i.X&&H.1t(),t.E["1Q.1J"]=H.DN,d=t.C.K+ZC.1b[34]+t.C.K+ZC.1b[35]+t.A.L+ZC.1b[6],i.AR&&g.9D(),t.A.FY&&(""!==(f=ZC.AO.Q6(ZC.AO.Z1(t.E.2W),4))?t.A.A.HV.1h(ZC.P.GF("4B",t.A.E5,t.A.IX)+\'1O="\'+d+\'" id="\'+t.K+"--"+t.MU+ZC.1b[30]+f+\'" />\'):t.A.A.HV.1h(ZC.P.GF("3A",t.A.E5,t.A.IX)+\'1O="\'+d+\'" id="\'+t.K+"--"+t.MU+ZC.1b[30]+ZC.1k(H.iX+ZC.3B)+","+ZC.1k(H.iY+ZC.3B)+","+ZC.1k(1.5*ZC.BO(3,H.AI))+\'" />\'))),t.A.U&&t.A.U.AL&&t.F7()}}9n(e,t,i){1a a=1g;if(a.C.BI&&a.C.BI.IQ&&a.A.RS){1a n=a.C.Q,l=a.C.BI,r=a.A.ag(i),o=1m DS(a.A);o.1S(e),o.CX=!0,o.LC=!0,o.AZ=0,o.AQ=0,o.EV=0,o.G9=0,o.C5=a.A.HX,o.CZ=[n.iX,n.iY,n.iX+n.I,n.iY+n.F],o.K=a.K+"-1N-2A",o.Z=l.Z,o.D=r,o.1t();1a s,C=a.A.ag(t);a.A.WX?s=a.A.WX:(s=1m CY(a),a.A.WX=s),s.1S(e);1a A=ZC.P.E6(l.Z,a.H.AB);s.AZ=1,ZC.CN.1t(A,s,C,1c,3)}}HZ(){1a e=1g,t=e.A.OZ;if(!ZC.3o){1a i=e.A.B1;if(e.A.G6&&e.A.AL){1a a=ZC.P.E6(e.C.K+ZC.1b[22],e.H.AB),n=1m DS(e.A);if(n.K=e.K+"-1N-2N",n.Z=ZC.AK(e.C.K+ZC.1b[22]),n.LC=!0,n.1S(e),n.1C(e.A.IH.o),n.D=e.E.9W,n.1q(),n.AL){n.C5=e.A.HX;1a l=e.C.Q;n.CZ=[l.iX,l.iY,l.iX+l.I,l.iY+l.F],ZC.CN.2I(a,n),n.1t()}1a r=ZC.P.E6(e.C.K+ZC.1b[22],e.H.AB),o=1m CY(e.A);o.K=e.K+"-1y-2N",o.CX=!1,o.B8=e.A.BN[3],o.1C(e.A.IH.o),o.1q(),o.IY=1n(t){1l e.IY(t)},o.DB()&&o.1q(),o.AL&&(ZC.CN.2I(r,o),ZC.CN.1t(r,o,e.E.2W))}if(e.A.MY>i.A1-i.X&&e.A.G6&&e.A.AL){1E.HZ();1a s=1m DS(e.A);s.K=e.K+"-1Q-1X-2N",s.Z=ZC.AK(e.C.K+ZC.1b[22]),s.DN=e.E["1Q.1J"],t?(s.iY=e.iY,s.iX=e.E.RG):(s.iX=e.iX,s.iY=e.E.RG),s.B8=e.A.BN[3],s.BU=e.A.BN[3],s.A0=e.A.BN[2],s.AC=e.A.BN[2],s.1C(e.A.G6.o),s.1q(),s.IY=1n(t){1l e.IY(t)},s.DB()&&s.1q(),s.AL&&"2a"!==s.AF&&s.1t(),s.K=e.K+"-1Q-2j-2N",t?s.iX=e.E.NK:s.iY=e.E.NK,s.AL&&"2a"!==s.AF&&s.1t()}}}}1O Bu 2k MG{2G(e){1E(e),1g.U=1c}1q(){1E.1q()}X2(){1E.X2();1a e=1g.C.E;e.3S.8v=e.3S["2r-8l-1U"]=1g.EW("%8v")}EW(e,t,i,a){1a n=1g,l=n.A.LT();ZC.2E(t,l),-1===e.1L("%8v")&&-1===e.1L("%2r-8l-1U")||1c!==ZC.1d(l[ZC.1b[12]])&&-1!==l[ZC.1b[12]]||(l[ZC.1b[12]]=1);1a r=0,o="0";if(n.A.A.KO[n.L]>0&&(o=""+(r=100*n.AE/n.A.A.KO[n.L])),n.A.A.A7.1f>1&&n.A.L===n.A.A.A7.1f-1){1a s=0;if(1c===ZC.1d(n.A.o.hb)){1j(1a C=0;C<n.A.A.A7.1f-1;C++)if(n.A.A.A7[C].AL){1a A=0,Z="0";n.A.A.KO[n.L]>0&&(Z=""+(A=100*n.A.A.A7[C].S[n.L].AE/n.A.A.KO[n.L])),1c!==ZC.1d(l[ZC.1b[12]])&&(Z=A.4C(ZC.BO(0,ZC.1k(l[ZC.1b[12]])))),s+=ZC.1Y(Z)}o=""+(r=1A.1X(0,100-s))}}1c!==ZC.1d(l[ZC.1b[12]])&&(o=r.4C(ZC.BO(0,ZC.1k(l[ZC.1b[12]]))));1a c,p=ZC.1Y(n.A.A.KO[n.L]||"0");1l c=ZC.AN.GH(p,l,n.A),n.CR=[["%2r-8l-1U",o],["%8v",o],["%3P-6j-1U",c]],e=1E.EW(e,t,i,a)}OF(e){1a t,i=1g,a=(i.B2+i.BH)/2%2m,n=0;1c!==ZC.1d(t=e["2b-r"])&&(n=ZC.1Y(ZC.8B(t))),n<1&&(n*=i.AI);1a l=1m CB(i.C,(i.CK+.5*(i.AI-i.CK)+i.DR+n)*ZC.EF(a),(i.CK+.5*(i.AI-i.CK)+i.DR+n)*ZC.EL(a),0).E9;1l[l[0],l[1],{cW:i,3G:!0}]}2I(){1a e=1g,t=e.C.BK(e.A.BT("k")[0]),i=e.L%t.GZ,a=1A.4h(e.L/t.GZ);e.iX=t.iX+i*t.GJ+t.GJ/2+t.BJ,e.iY=t.iY+a*t.GC+t.GC/2+t.BC,e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(),e.IQ=!0)}J9(e){1a t={},i="4R";1l 1c!==ZC.1d(e.o[ZC.1b[7]])&&(i=e.o[ZC.1b[7]]),t.1r="4R"===i?1g.A0:1g.C0,t}HD(e){1a t,i=1g,a="4R";1c!==ZC.1d(t=e.o[ZC.1b[7]])&&(a=t);1a n,l,r,o,s,C=e.I,A=e.F,Z=(i.B2+i.BH)/2%2m,c=Z;if("4R"===a){Z=c=i.A.A.YO["n"+i.L][i.A.L];1a p=1n(t,a){a<0&&(a=2m+a),a%=2m;1a n=ZC.AO.BM(i.iX,i.iY,t+i.DR+e.DR+20,a),l=i.C.EX[ZC.1b[27]];l>45&&i.A.A.A7.1f>10&&(i.C.EX[ZC.1b[27]]=45+(l-45)/3),s=1m CB(i.C,n[0]-ZC.AM.DZ,n[1]-ZC.AM.E0,0),i.C.EX[ZC.1b[27]]=l,n[0]=s.E9[0],n[1]=s.E9[1];1a r=n[0]+e.BJ-C/2,o=n[1]+e.BC-A/2;1l a>=0&&a<=90||a>=3U&&a<=2m?r+=C/2+10:r-=C/2+10,[r,o]},u=p(i.AI,c);n=u[0],l=u[1],i.U=e;1a h={x:n,y:l,1s:C,1M:A},1b=1o.3I.tA;o=!0;1j(1a d=0,f=0,g=-1,B=0,v=0;o&&v<hf;){o=!1;1j(1a E=0,b=i.A.A.UC.1f;E<b;E++)r=i.A.A.UC[E],(ZC.AO.YB(h,r,i.A.A.A7.1f>10?-8:-2)||h.x+e.I>i.C.Q.iX+i.C.Q.I||h.x<i.C.Q.iX||h.y+e.F>i.C.Q.iY+i.C.Q.F||h.y<i.C.Q.iY)&&(o=!0,0===1b?(d+=.4,g*=-1):1===1b&&(f+=1),u=p(i.AI+f,c+d*g),h.x=u[0],h.y=u[1],v++,++B>100&&(B=0,0===1b?(d=0,f+=4):1===1b&&(f=0,d+=1,g*=-1)))}n=h.x,l=h.y,Z=c+d,r={1D:i.A.AP,x:h.x,y:h.y,1s:C,1M:A,3V:i.A.L,5Q:i.L},i.A.A.UC.1h(r)}1u if("in"===a){1a m=i.CK<30?.65:.5,K=ZC.AO.BM(i.iX,i.iY,i.CK+m*(i.AI-i.CK)+i.DR+e.DR,Z);s=1m CB(i.C,K[0]-ZC.AM.DZ,K[1]-ZC.AM.E0,0),K[0]=s.E9[0],K[1]=s.E9[1],n=K[0]+e.BJ-C/2,l=K[1]+e.BC-A/2}1u"3G"===a&&(n=(s=1m CB(i.C,i.iX-ZC.AM.DZ,i.iY-ZC.AM.E0,0)).E9[0]+e.BJ-C/2,l=s.E9[1]+e.BC-A/2);1l o&&(n=-6H,l=-6H,e.AL=!1),1c!==ZC.1d(e.o.x)&&(n=e.iX),1c!==ZC.1d(e.o.y)&&(l=e.iY),n>=-2&&(n=ZC.2l(n)),l>=-2&&(l=ZC.2l(l)),[ZC.1k(n),ZC.1k(l),Z]}F7(e,t){1a i,a=1g,n=1E.F7(e,t);if(e)1l n;if(a.AL&&n.AL&&1c!==ZC.1d(n.AP)&&""!==n.AP){1a l="4R";if(1c!==ZC.1d(n.o[ZC.1b[7]])&&(l=n.o[ZC.1b[7]]),"4R"===l){1a r=!0;if(1c!==ZC.1d(i=n.o.Bp)&&(r=ZC.2t(i)),r){1a o=1m DS(a.A);o.Z=o.C6=a.A.CL("bl",0),o.1C(a.A.C1.o),o.B8=a.A0,o.DN="1y",o.D=[];1a s=n.E.u1,C=(a.B2+a.BH)/2%2m,A=0;C>=0&&C<=180&&(A=a.E.sW/2);1a Z=ZC.AO.BM(a.iX,a.iY,a.AI+a.DR+n.DR,C);(Z=1m CB(a.C,Z[0]-ZC.AM.DZ,Z[1]-ZC.AM.E0,A).E9)[0]+=a.BJ,Z[1]+=a.BC,o.D.1h(Z);1a c=ZC.AO.BM(a.iX,a.iY,a.AI+a.DR+n.DR+20,C);(c=1m CB(a.C,c[0]-ZC.AM.DZ,c[1]-ZC.AM.E0,A).E9)[0]+=a.BJ,c[1]+=a.BC,n.iX>=a.iX?o.D.1h([c[0],c[1],s[0],s[1]+n.F/2]):o.D.1h([c[0],c[1],s[0]+n.I+2,s[1]+n.F/2]),o.1q(),o.IY=1n(e){1l a.IY(e)},o.DB()&&o.1q(),o.AL&&o.1t()}}}}1t(){1a e,t,i,a,n,l,r,o,s,C=1g,A=C.C.CG,Z=C.C.BK(C.A.BT("k")[0]),c=C.C.EX[ZC.1b[27]],p=C.C.EX[ZC.1b[28]];C.2I();1a u="3P-f6-"+C.A.L+"-"+C.L;if(C.o.Bn&&1w C.C.E[u]===ZC.1b[31]&&(C.C.E[u]=!0),!(C.AE<0)){1a h=ZC.BO(.7,ZC.EF(c));C.AI=ZC.CV(Z.GC/h,Z.GJ)/2,1c!==ZC.1d(C.A.o[ZC.1b[21]])?C.AI=C.A.AI:C.AI=Z.JQ*C.AI,C.CK<1&&(C.CK*=C.AI),C.CK=1A.1X(0,C.CK),C.o[ZC.1b[8]]=C.CK,C.DR<1&&(C.DR*=C.AI),C.o["2b-r"]=C.DR;1a 1b=C.A.NR;-1===1b&&(1b=C.AI/5),C.E.sW=1b;1a d=C.iX-ZC.AM.DZ,f=C.iY-ZC.AM.E0;C.B2=ZC.1k(C.B2),C.BH=ZC.1k(C.BH);1a g=(C.B2+C.BH)/2;C.C.E[u]&&(C.DR+=ZC.1k(.15*C.AI)),C.DR>0&&(d+=C.DR*ZC.EF(g),f+=C.DR*ZC.EL(g));1a B=C.N=C.A.HY(C,C);B.DI=C.K+"-hG";1a v=1m CY(C);if(v.1S(B),v.A0=ZC.AN.JL(ZC.AN.G7(v.A0)),v.AC=ZC.AN.JL(ZC.AN.G7(v.AC)),C.AE>=0||0===C.A.A.KO[C.L]){1j(r=[],e=C.B2,r.1h([d+C.CK*ZC.EF(e),f+C.CK*ZC.EL(e),0]),e=C.B2;e<=C.BH;e+=1)r.1h([d+C.AI*ZC.EF(e),f+C.AI*ZC.EL(e),0]);1j(e=C.BH,r.1h([d+C.CK*ZC.EF(e),f+C.CK*ZC.EL(e),0]),e=C.BH;e>=C.B2;e-=1)r.1h([d+C.CK*ZC.EF(e),f+C.CK*ZC.EL(e),0]);if((t=ZC.DE.D5(B,C.C,r)).K=C.K+"-bk",A.2Q(t),i=1c,C.B2%2m>=0+p&&C.B2%2m<180+p||C.BH%2m>0+p){o=C.B2,s=C.BH;1a E=1n(e,t,a){1a n,l=[];1j(n=e,l.1h([d+C.AI*ZC.EF(n),f+C.AI*ZC.EL(n),0]),n=e;n<=t;n+=1)l.1h([d+C.AI*ZC.EF(n),f+C.AI*ZC.EL(n),0]);1j(n=t,l.1h([d+C.AI*ZC.EF(n),f+C.AI*ZC.EL(n),1b]),n=t;n>=e;n-=1)l.1h([d+C.AI*ZC.EF(n),f+C.AI*ZC.EL(n),1b]);(i=ZC.DE.D5(v,C.C,l)).MI=[.8I,1,1,1],i.K=C.K+"-bA"+a,A.2Q(i)};o<180&&s>2m?(E(o=o<0?o+2m:o,180,1),E(2m,s,2)):(o=ZC.BO(o,s>2m?Bk:5),(s=ZC.CV(s,s>2m?18f:175))>o&&E(o,s,1))}if(l=1c,C.CK>0+p&&C.BH>180+p){1j(r=[],e=C.B2,o=C.B2,C.B2<180+p&&C.BH>180+p&&(e=180+p,o=180+p),r.1h([d+C.CK*ZC.EF(e),f+C.CK*ZC.EL(e),0]),e=o;e<=C.BH;e+=1)r.1h([d+C.CK*ZC.EF(e),f+C.CK*ZC.EL(e),0]);1j(e=C.BH,r.1h([d+C.CK*ZC.EF(e),f+C.CK*ZC.EL(e),1b]),e=C.BH;e>=o;e-=1)r.1h([d+C.CK*ZC.EF(e),f+C.CK*ZC.EL(e),1b]);(l=ZC.DE.D5(v,C.C,r)).K=C.K+"-bF",A.2Q(l)}1a b=1n(e,t,i){1l[[d+e*ZC.EF(i),f+e*ZC.EL(i),0],[d+e*ZC.EF(i),f+e*ZC.EL(i),1b],[d+t*ZC.EF(i),f+t*ZC.EL(i),1b],[d+t*ZC.EF(i),f+t*ZC.EL(i),0]]};(a=ZC.DE.D5(v,C.C,{2W:b(C.CK,C.AI,C.B2),sL:b(C.CK+1,C.AI+1,C.B2-1)})).K=C.K+"-gY",A.2Q(a),(n=ZC.DE.D5(v,C.C,{2W:b(C.CK,C.AI,C.BH),sL:b(C.CK+1,C.AI+1,C.BH+1)})).K=C.K+"-hl",A.2Q(n);1a m=C.C.K+ZC.1b[34]+C.C.K+ZC.1b[35]+C.A.L+ZC.1b[6],K=ZC.P.GF("4B",C.A.E5)+\'1O="\'+m+\'" id="\'+C.K,D=C.A.A.HV;D.1h(K+\'--1v" 1T-z-3X="1" 9s="\'+t.F1()+\'" />\'),i&&D.1h(K+\'--6Z" 1T-z-3X="1" 9s="\'+i.F1()+\'" />\'),(C.CK>0||C.DR>0)&&(l&&D.1h(K+\'--5W" 1T-z-3X="2" 9s="\'+l.F1()+\'" />\'),D.1h(K+\'--4c" 1T-z-3X="2" 9s="\'+a.F1()+\'" />\',K+\'--6i" 1T-z-3X="2" 9s="\'+n.F1()+\'" />\'))}C.A.U&&C.F7()}}OW(e,t){1a i=1g;if(1E.OW(e,t),"3J"===t&&e.9u<=1&&i.A.mq){1a a="3P-f6-"+i.A.L+"-"+i.L;i.C.E[a]=1w i.C.E[a]===ZC.1b[31]||!i.C.E[a],i.C.JU()}}}1O Bh 2k ZW{2I(){1g.RU()}OF(){1a e=1g;e.1t(!0);1a t=e.C.BK(e.A.BT("v")[0]),i=e.iX+e.I/2,a=e.iY+(t.AR?e.F:0),n=1m CB(e.C,i-ZC.AM.DZ,a-ZC.AM.E0,e.A.E["z-4c"]);1l[ZC.1k(n.E9[0]),ZC.1k(n.E9[1]),{cW:e,3G:!0}]}HD(e){1a t=1E.HD(e);if("-1/-1"!==t.2M("/")){1a i=1m CB(1g.C,t[0]+e.I/2-ZC.AM.DZ,t[1]+e.F/2-ZC.AM.E0,1g.A.E["z-9V"]);1l[ZC.1k(i.E9[0])-e.I/2,ZC.1k(i.E9[1])-e.F/2]}1l t}1t(e){1a t,i=1g;1E.1t(),1w e===ZC.1b[31]&&(e=!1);1a a=i.C.CG,n=i.A.B1,l=i.A.CH;i.2I();1a r,o,s,C,A,Z,c,p,u,h,1b,d,f,g,B,v,E=i.A.PN(),b=E.A9,m=E.ES,K=E.CC,D=E.CP,F=E.F4,I=E.D0,x=E.EZ;if(e?m=i.A.E["2r-"+i.L+"-2U-2Y"]:i.A.E["2r-"+i.L+"-2U-2Y"]=E.ES,i.A.C9){s=0;1a X=i.A.A.KF[m];1j(r=0;r<X.1f;r++){1a y=i.A.A.A7[X[r]].S[i.L];y&&(s+=y.AE)}}1a Y=1,L=1;if(i.A.C9&&s>0&&(i.CM!==i.AE&&(Y=(s-i.CM+i.AE)/s),L=(s-i.CM)/s),l.AR){1a w=Y;Y=L,L=w}i.A.M1&&(m=i.L);1a M=i.iX-b/2+K+m*(I+F)-m*x;if(M=ZC.5l(M,i.iX-b/2+K,i.iX+b/2-D),i.A.D0>0){1a H=I;(I=i.A.D0)<=1&&(I*=H),M+=(H-I)/2}1a N=I,O=i.iY,S=1c!==ZC.1d(i.A.M4[i.L])?i.A.M4[i.L]:0;if(O=i.A.C9&&"100%"===i.A.KT?l.AX(100*(i.CM+S)/i.A.A.FA[i.L]["%6j-"+i.A.DV]):l.AX(i.CM+S),i.A.C9?(A=O-(C="100%"===i.A.KT?l.AX(100*(i.CM-i.AE+S)/i.A.A.FA[i.L]["%6j-"+i.A.DV]):l.AX(i.CM-i.AE+S)),i.AE<0&&(O=C),l.AR?A>0&&(A=ZC.2l(A),O=C):A<0&&(O=C-(A=ZC.2l(A)))):O=(A=O-(C=l.AX(S)))<0?C-(A=ZC.2l(A)):C,K+D===0&&(M-=.5,N+=1),i.I=N,i.F=A,i.iX=M,i.iY=O,l.AR?i.AE>=l.H3?i.bE=O+i.F:i.bE=O:i.AE>=l.H3?i.bE=O:i.bE=O+i.F,i.C.CT){1a P="6r";i.C.CT.o.1Q&&1c!==ZC.1d(t=i.C.CT.o.1Q.ic)&&(P=t),1c!==ZC.1d(i.A.o["2i-1Q"])&&1c!==ZC.1d(t=i.A.o["2i-1Q"].ic)&&(P=t),"2r"===P&&(i.E.ha=i.iX+i.I/2)}if(!e){1a G,T,k,J=M-ZC.AM.DZ,z=O-ZC.AM.E0,R=0,Q=ZC.AM.FS,W=0,V=Q;if(i.A.mY){if(T=R,"aM"===i.C.AF||"9f"===i.C.AF){1j(G=1,r=0,o=i.A.A.A7.1f;r<o;r++)"6T"!==i.A.A.A7[r].AF&&G++;T=(G-1)*(ZC.AM.FS/G),Q=ZC.1k(.9*Q/G)}k=T+Q}1u{if(G=0,W=-1,V=ZC.AM.FS,"5e"===i.C.8f())G=i.A.A.A7.1f,W=i.A.L,V/=G;1u if(i.A.C9)W=0;1u{1j(r=0;r<i.A.A.A7.1f;r++)i.C.E["1B"+r+".2h"]&&W++;1j(r=0;r<i.A.A.A7.1f;r++)i.C.E["1B"+r+".2h"]&&(G++,i.A.L>r&&W--);V/=G,W=G-W-1}T=W*V+.2*V,k=(W+1)*V-.2*V}if(1c!==ZC.1d(i.A.o["z-4c"])&&(T=ZC.1k(i.A.o["z-4c"])),1c!==ZC.1d(i.A.o["z-6i"])&&(k=ZC.1k(i.A.o["z-6i"])),1c!==ZC.1d(i.A.o.5v)){1a U=ZC.1k(i.A.o.5v);T=W*V+V/2-U,k=W*V+V/2+U}R=T,Q=k-T,i.A.E["z-4l"]=G,i.A.E["z-8g"]=W,i.A.E["z-5v"]=V,i.A.E["z-4c"]=T,i.A.E["z-9V"]=(T+k)/2;1a j=i.N=i.A.HY(i,i.N);if(j.DI=i.K+"-hG",i.A.I6&&(i.GK(j),j.1q()),j.AL){1a q=1m CY(i);q.1S(j),q.A0=ZC.AN.JL(ZC.AN.G7(q.A0)),q.AC=ZC.AN.JL(ZC.AN.G7(q.AC)),q.BU=ZC.AN.JL(ZC.AN.G7(q.BU));1a $=1m CY(i);$.1S(j),$.A0=ZC.AN.JL(ZC.AN.G7($.A0),15),$.AC=ZC.AN.JL(ZC.AN.G7($.AC),15),$.BU=ZC.AN.JL(ZC.AN.G7($.BU),15);1a ee=1m CY(i);ee.1S(j);1a te=i.C.K+ZC.1b[34]+i.C.K+ZC.1b[35]+i.A.L+ZC.1b[6],ie=ZC.P.GF("4B",i.A.E5,i.N.IX)+\'1O="\'+te+\'" id="\'+i.K,ae=i.C.EX.7G,ne=i.I/2,le=Q/2,re=Y*ne,oe=L*ne,se=L*le,Ce=Y*le;l.AR&&!i.A.C9?(Z=i.AE>=0?0:i.F,c=i.AE>=0?i.F:0):(Z=i.AE>=0?i.F:0,c=i.AE>=0?0:i.F);1a Ae=i.A.A.HV,Ze=ZC.CV(le,ne),ce=i.C.EX[ZC.1b[28]],pe=i.C.EX.2f,ue=ZC.EF(pe)*le,he=ZC.EL(pe)*le;ae||(Ze=ZC.CV(2*ue,ne));1a 6g=1n(e){1a t=0,a=i.A.L,r=i.L,o=i.A.A.A7.1f,s=i.A.S.1f;1R((i.A.C9?"s":"")+(n.AR?"k":"")+(l.AR?"v":"")){1i"":1i"v":t=10*a+8i*r+e;1p;1i"sv":t=10*(o-a)+8i*r+e;1p;1i"k":t=10*a+8i*(s-r)+e;1p;1i"Da":t=10*(o-a)+8i*(s-r)+e;1p;1i"kv":t=10*a+8i*(s-r)+e;1p;1i"s":t=10*a+8i*r+e;1p;1i"sk":t=10*a+8i*(s-r)+e}1l t},de=ZC.3v,fe=-ZC.3v,ge=ZC.3v,Be=-ZC.3v,ve=ZC.3v,Ee=-ZC.3v,be=ZC.3v,me=-ZC.3v;if("ou"===i.A.CS)1j(v=0;v<=2m;v+=4)(u=1m CB(i.C,J+ZC.EL(v)*Ze+ne,z,R+ZC.EF(v)*Ze+le)).E9[0]<ge&&(ge=u.E9[0],de=v),u.E9[0]>Be&&(Be=u.E9[0],fe=v),(u=1m CB(i.C,J+ZC.EL(v)*Ze+ne,z+i.F,R+ZC.EF(v)*Ze+le)).E9[0]<be&&(be=u.E9[0],ve=v),u.E9[0]>me&&(me=u.E9[0],Ee=v);1a Ke=i.A.o.Cy||{};1R(i.A.CS){2q:Ke.2c?((p=1m CY(i)).1S(q),p.1C(Ke.2c),p.1q(),f=ZC.DE.D9(p,i.C,J+.1,J+i.I-.1,z+i.F-.1,z+i.F-.1,R+.1,R+Q-.1,"x")):f=ZC.DE.D9(q,i.C,J+.1,J+i.I-.1,z+i.F-.1,z+i.F-.1,R+.1,R+Q-.1,"x"),f.K=i.K+"-bk",f.G0=6g(1),a.2Q(f),Ke.1v?((p=1m CY(i)).1S(q),p.1C(Ke.1v),p.1q(),d=ZC.DE.D9(p,i.C,J+.1,J+i.I-.1,z+.1,z+.1,R+.1,R+Q-.1,"x")):d=ZC.DE.D9(q,i.C,J+.1,J+i.I-.1,z+.1,z+.1,R+.1,R+Q-.1,"x"),d.K=i.K+"-bA",d.G0=6g(3),a.2Q(d),Ke.1K?((p=1m CY(i)).1S($),p.1C(Ke.1K),p.1q(),g=ZC.DE.D9(p,i.C,J+.1,J+.1,z+.1,z+i.F-.1,R+.1,R+Q-.1,"z")):g=ZC.DE.D9($,i.C,J+.1,J+.1,z+.1,z+i.F-.1,R+.1,R+Q-.1,"z"),g.K=i.K+"-bF",g.G0=6g(2),a.2Q(g),Ke.2z?((p=1m CY(i)).1S($),p.1C(Ke.2z),p.1q(),B=ZC.DE.D9(p,i.C,J+i.I-.1,J+i.I-.1,z+.1,z+i.F-.1,R+.1,R+Q-.1,"z")):B=ZC.DE.D9($,i.C,J+i.I-.1,J+i.I-.1,z+.1,z+i.F-.1,R+.1,R+Q-.1,"z"),B.K=i.K+"-gY",B.G0=6g(4),a.2Q(B),Ke.5p?((p=1m CY(i)).1S(ee),p.1C(Ke.5p),p.1q(),1b=ZC.DE.D9(p,i.C,J+.1,J+i.I-.1,z+.1,z+i.F-.1,R+.1,R+.1,"y")):1b=ZC.DE.D9(ee,i.C,J+.1,J+i.I-.1,z+.1,z+i.F-.1,R+.1,R+.1,"y"),1b.K=i.K+"-hl",1b.G0=6g(5),a.2Q(1b),i.A.FY&&(1===L&&Ae.1h(ie+"--1v"+ZC.1b[30]+d.F1()+\'" />\'),Ae.1h(ie+"--1K"+ZC.1b[30]+g.F1()+\'" />\',ie+"--2z"+ZC.1b[30]+B.F1()+\'" />\',ie+"--5p"+ZC.1b[30]+1b.F1()+\'" 1T-z-3X="-100" />\'));1p;1i"b5":Ke.2c?((p=1m CY(i)).1S(q),p.1C(Ke.2c),p.1q(),f=ZC.DE.D9(p,i.C,J+ne-re,J+ne+re,z+Z,z+Z,R+le-Ce,R+le+Ce,"x")):f=ZC.DE.D9(q,i.C,J+ne-re,J+ne+re,z+Z,z+Z,R+le-Ce,R+le+Ce,"x"),f.K=i.K+"-bk",f.G0=6g(l.AR&&!i.A.C9?6:1),a.2Q(f),h=[[J+ne-re,z+Z,R+le-Ce],[J+ne+re,z+Z,R+le-Ce]],i.A.C9&&0!==L?h.1h([J+ne+oe,z+c,R+le-se],[J+ne-oe,z+c,R+le-se]):h.1h([J+ne,z+c,R+le]),Ke.5p?((p=1m CY(i)).1S(j),p.1C(Ke.5p),p.1q(),1b=ZC.DE.D5(p,i.C,h)):1b=ZC.DE.D5(j,i.C,h),1b.K=i.K+"-bA",1b.G0=6g(3),a.2Q(1b),h=[[J+ne-re,z+Z,R+le-Ce],[J+ne-re,z+Z,R+le+Ce]],i.A.C9&&0!==L?h.1h([J+ne-oe,z+c,R+le+se],[J+ne-oe,z+c,R+le-se]):h.1h([J+ne,z+c,R+le]),Ke.1K?((p=1m CY(i)).1S($),p.1C(Ke.1K),p.1q(),g=ZC.DE.D5(p,i.C,h)):g=ZC.DE.D5($,i.C,h),g.K=i.K+"-bF",g.G0=6g(2),a.2Q(g),h=[[J+ne+re,z+Z,R+le-Ce],[J+ne+re,z+Z,R+le+Ce]],i.A.C9&&0!==L?h.1h([J+ne+oe,z+c,R+le+se],[J+ne+oe,z+c,R+le-se]):h.1h([J+ne,z+c,R+le]),Ke.2z?((p=1m CY(i)).1S($),p.1C(Ke.2z),p.1q(),B=ZC.DE.D5(p,i.C,h)):B=ZC.DE.D5($,i.C,h),B.K=i.K+"-gY",B.G0=6g(4),a.2Q(B),i.A.C9&&0!==L&&(h=[[J+ne-oe,z+c,R+le-se],[J+ne-oe,z+c,R+le+se],[J+ne+oe,z+c,R+le+se],[J+ne+oe,z+c,R+le-se]],Ke.1v?((p=1m CY(i)).1S(q),p.1C(Ke.1v),p.1q(),d=ZC.DE.D5(p,i.C,h)):d=ZC.DE.D5(q,i.C,h),d.K=i.K+"-hl",d.G0=6g(5),a.2Q(d)),i.A.FY&&Ae.1h(ie+"--1K"+ZC.1b[30]+g.F1()+\'" />\',ie+"--2z"+ZC.1b[30]+B.F1()+\'" />\',ie+"--5p"+ZC.1b[30]+1b.F1()+\'" 1T-z-3X="-100" />\');1p;1i"ou":if(h=[],ae)1j(v=0;v<=2m;v+=5)h.1h([J+ZC.EL(v)*Ze+ne,z+i.F,R+ZC.EF(v)*Ze+le]);1u 1j(v=0;v<=2m;v+=5)(u=1m CB(i.C,0,0,0)).E9=[M+ZC.EF(v)*Ze+ne+ue,O+i.F+ZC.EL(v)*(Ze/2)-he],h.1h(u);if(Ke.2c?((p=1m CY(i)).1S(q),p.1C(Ke.2c),p.1q(),f=ZC.DE.D5(p,i.C,h,!ae)):f=ZC.DE.D5(q,i.C,h,!ae),f.K=i.K+"-bk",f.G0=6g(1),a.2Q(f),h=[],ae)1j(v=0;v<=2m;v+=5)h.1h([J+ZC.EL(v)*Ze+ne,z,R+ZC.EF(v)*Ze+le]);1u 1j(v=0;v<=2m;v+=5)(u=1m CB(i.C,0,0,0)).E9=[M+ZC.EF(v)*Ze+ne+ue,O+ZC.EL(v)*(Ze/2)-he],h.1h(u);if(Ke.1v?((p=1m CY(i)).1S(q),p.1C(Ke.1v),p.1q(),d=ZC.DE.D5(p,i.C,h,!ae)):d=ZC.DE.D5(q,i.C,h,!ae),d.K=i.K+"-bA",d.G0=6g(3),a.2Q(d),h=[],ae){1j(v=ZC.CV(de,fe);v<=ZC.BO(de,fe);v+=1)h.1h([J+ZC.EL(v)*Ze+ne,z,R+ZC.EF(v)*Ze+le]);1j(h.1h([J+ZC.EL(v)*Ze+ne,z+i.F,R+ZC.EF(v)*Ze+le]),v=ZC.BO(ve,Ee);v>=ZC.CV(ve,Ee);v-=1)h.1h([J+ZC.EL(v)*Ze+ne,z+i.F,R+ZC.EF(v)*Ze+le])}1u{1j(v=0;v<=180;v+=5)(u=1m CB(i.C,0,0,0)).E9=[M+ZC.EF(v)*Ze+ne+ue,O+i.F+ZC.EL(v)*(Ze/2)-he],h.1h(u);1j(v=180;v>=0;v-=5)(u=1m CB(i.C,0,0,0)).E9=[M+ZC.EF(v)*Ze+ne+ue,O+ZC.EL(v)*(Ze/2)-he],h.1h(u)}Ke.5p?((p=1m CY(i)).1S(j),p.1C(Ke.5p),p.1q(),1b=ZC.DE.D5(p,i.C,h,!ae)):1b=ZC.DE.D5(j,i.C,h,!ae),1b.K=i.K+"-bF",1b.G0=6g(2),a.2Q(1b),i.A.FY&&Ae.1h(ie+"--5p"+ZC.1b[30]+1b.F1()+\'" 1T-z-3X="-100" />\',ie+"--1v"+ZC.1b[30]+d.F1()+\'" />\');1p;1i"eZ":if(h=[],ae)1j(v=0;v<=2m;v+=5)h.1h([J+ZC.EL(v)*Ze*Y+ne,z+Z,R+ZC.EF(v)*Ze*Y+le]);1u 1j(v=0;v<=2m;v+=5)(u=1m CB(i.C,0,0,0)).E9=[M+ZC.EF(v)*Ze*Y+ne+ue,O+Z+ZC.EL(v)*(Ze/2)*Y-he],h.1h(u);if(Ke.2c?((p=1m CY(i)).1S(q),p.1C(Ke.2c),p.1q(),f=ZC.DE.D5(p,i.C,h,!ae)):f=ZC.DE.D5(q,i.C,h,!ae),f.K=i.K+"-bk",f.G0=6g(1),a.2Q(f),h=[],ae){1j(v=90+ce;v<=3U+ce;v+=5)h.1h([J+ZC.EL(v)*Ze*Y+ne,z+Z,R+ZC.EF(v)*Ze*Y+le]);if(i.A.C9&&0!==L)1j(v=3U+ce;v>=90+ce;v-=5)h.1h([J+ZC.EL(v)*Ze*L+ne,z+c,R+ZC.EF(v)*Ze*L+le]);1u h.1h([J+ne,z+c,R+le])}1u{1j(v=0;v<=180;v+=5)(u=1m CB(i.C,0,0,0)).E9=[M+ZC.EF(v)*Ze*Y+ne+ue,O+Z+ZC.EL(v)*(Ze/2)*Y-he],h.1h(u);if(i.A.C9&&0!==L)1j(v=180;v>=0;v-=5)(u=1m CB(i.C,0,0,0)).E9=[M+ZC.EF(v)*Ze*L+ne+ue,O+c+ZC.EL(v)*(Ze/2)*L-he],h.1h(u);1u(u=1m CB(i.C,0,0,0)).E9=[M+ne+ue,O+c-he],h.1h(u)}if(Ke.5p?((p=1m CY(i)).1S(j),p.1C(Ke.5p),p.1q(),1b=ZC.DE.D5(p,i.C,h,!ae)):1b=ZC.DE.D5(j,i.C,h,!ae),1b.K=i.K+"-bA",1b.G0=6g(2),a.2Q(1b),i.A.C9&&0!==L){if(h=[],ae)1j(v=0;v<=2m;v+=5)h.1h([J+ZC.EL(v)*Ze*L+ne,z+c,R+ZC.EF(v)*Ze*L+le]);1u 1j(v=0;v<=2m;v+=5)(u=1m CB(i.C,0,0,0)).E9=[M+ZC.EF(v)*Ze*L+ne+ue,O+c+ZC.EL(v)*(Ze/2)*L-he],h.1h(u);Ke.1v?((p=1m CY(i)).1S(q),p.1C(Ke.1v),p.1q(),d=ZC.DE.D5(p,i.C,h,!ae)):d=ZC.DE.D5(q,i.C,h,!ae),d.K=i.K+"-bF",a.2Q(d),d.G0=6g(3)}i.A.FY&&Ae.1h(ie+"--5p"+ZC.1b[30]+1b.F1()+\'" 1T-z-3X="-100" />\')}i.A.U&&i.A.U.AL&&i.F7()}i.9n(j)}}HZ(){}}1O Br 2k ZV{2I(){1g.RU()}OF(){1a e=1g;e.1t(!0);1a t=e.C.BK(e.A.BT("v")[0]),i=e.iX+(t.AR?0:e.I),a=e.iY+e.F/2,n=1m CB(e.C,i-ZC.AM.DZ,a-ZC.AM.E0,e.A.E["z-4c"]);1l[ZC.1k(n.E9[0]),ZC.1k(n.E9[1]),{cW:e,3G:!0}]}HD(e){1a t=1E.HD(e);if("-1/-1"!==t.2M("/")){1a i=1m CB(1g.C,t[0]-ZC.AM.DZ,t[1]-ZC.AM.E0,1g.A.E["z-4c"]);1l[ZC.1k(i.E9[0]),ZC.1k(i.E9[1])]}1l t}1t(e){1a t=1g;1E.1t(),1w e===ZC.1b[31]&&(e=!1);1a i=t.C.CG,a=t.A.B1,n=t.A.CH;t.2I();1a l,r,o,s,C,A,Z,c,p,u,h,1b,d,f,g=t.A.PN(),B=g.A9,v=g.ES,E=g.CC,b=g.CP,m=g.F4,K=g.D0,D=g.EZ;if(e?v=t.A.E["2r-"+t.L+"-2U-2Y"]:t.A.E["2r-"+t.L+"-2U-2Y"]=g.ES,t.A.C9){l=0;1j(1a F=t.A.A.KF[v],I=0;I<F.1f;I++){1a x=t.A.A.A7[F[I]].S[t.L];x&&(l+=x.AE)}}1a X=1,y=1;if(t.A.C9&&(t.CM!==t.AE&&(X=(l-t.CM+t.AE)/l),y=(l-t.CM)/l),n.AR){1a Y=X;X=y,y=Y}t.A.M1&&(v=t.L);1a L=t.iY-B/2+E+v*(K+m)-v*D;if(L=ZC.5l(L,t.iY-B/2+E,t.iY+B/2-b),t.A.D0>0){1a w=K;(K=t.A.D0)<=1&&(K*=w),L+=(w-K)/2}1a M=K,H=t.iX,N=1c!==ZC.1d(t.A.M4[t.L])?t.A.M4[t.L]:0;if(H=t.A.C9&&"100%"===t.A.KT?n.AX(100*(t.CM+N)/t.A.A.FA[t.L]["%6j-"+t.A.DV]):n.AX(t.CM+N),t.A.C9?(o=H-(r="100%"===t.A.KT?n.AX(100*(t.CM-t.AE+N)/t.A.A.FA[t.L]["%6j-"+t.A.DV]):n.AX(t.CM-t.AE+N)),t.AE>0?H=r:o=ZC.2l(o),n.AR?o>0?(o=ZC.2l(o),H=r):H-=o=ZC.2l(o):o<0&&(H=r-(o=ZC.2l(o)))):H=(o=H-(r=n.AX(N)))<0?r-(o=ZC.2l(o)):r,E+b===0&&(L-=.5,M+=1),t.I=o,t.F=M,t.iX=H,t.iY=L,n.AR?t.AE>=n.H3?t.bf=H:t.bf=H+t.I:t.AE>=n.H3?t.bf=H+t.I:t.bf=H,!e){1a O=H+o-ZC.AM.DZ,S=L-ZC.AM.E0,P=0,G=ZC.AM.FS;1c!==ZC.1d(t.A.o["z-4c"])&&(P=ZC.1k(t.A.o["z-4c"])),1c!==ZC.1d(t.A.o["z-6i"])&&(G=ZC.1k(t.A.o["z-6i"])-P),t.A.E["z-4c"]=P,t.A.E["z-9V"]=P+G/2;1a T=t.N=t.A.HY(t,t.N);if(T.DI=t.K+"-hG",t.A.I6&&(t.GK(T),T.1q()),T.AL){1a k=1m CY(t);k.1S(T),k.A0=ZC.AN.JL(ZC.AN.G7(k.A0)),k.AC=ZC.AN.JL(ZC.AN.G7(k.AC)),k.BU=ZC.AN.JL(ZC.AN.G7(k.BU));1a J=1m CY(t);J.1S(T),J.A0=ZC.AN.JL(ZC.AN.G7(J.A0),15),J.AC=ZC.AN.JL(ZC.AN.G7(J.AC),15),J.BU=ZC.AN.JL(ZC.AN.G7(J.BU),15);1a z=1m CY(t);z.1S(T);1a R=t.C.K+ZC.1b[34]+t.C.K+ZC.1b[35]+t.A.L+ZC.1b[6],Q=ZC.P.GF("4B",t.A.E5,t.N.IX)+\'1O="\'+R+\'" id="\'+t.K,W=t.C.EX.7G,V=t.F/2,U=G/2,j=X*V,q=y*V,$=y*U,ee=X*U;n.AR&&!t.A.C9?(C=t.AE>=0?0:t.I,s=t.AE>=0?t.I:0):(C=t.AE>=0?t.I:0,s=t.AE>=0?0:t.I);1a te=t.A.A.HV,ie=ZC.CV(U,V),ae=t.C.EX[ZC.1b[27]],ne=t.C.EX.2f,le=ZC.EF(ne)*U,re=ZC.EL(ne)*U;W||(ie=ZC.CV(2*re,V));1a oe=1n(e){1a i=-1,l=t.A.L,r=t.L,o=t.A.A.A7.1f,s=t.A.S.1f;1R((t.A.C9?"s":"")+(a.AR?"k":"")+(n.AR?"v":"")){1i"":1i"v":1i"sv":i=10*(o-l)+8i*r+e;1p;1i"k":1i"Da":1i"kv":i=10*(o-l)+8i*(s-r)+e;1p;1i"s":i=10*l+8i*r+e;1p;1i"sk":i=10*l+8i*(s-r)+e}1l ZC.1k(i)},se=t.A.o.Cy||{};1R(t.A.CS){2q:se.1K?((A=1m CY(t)).1S(J),A.1C(se.1K),A.1q(),Z=ZC.DE.D9(A,t.C,O-t.I+.1,O-.1,S+.1,S+.1,P+.1,P+G-.1,"x")):Z=ZC.DE.D9(J,t.C,O-t.I+.1,O-.1,S+.1,S+.1,P+.1,P+G-.1,"x"),Z.K=t.K+"-bk",Z.G0=oe(5),i.2Q(Z),se.2z?((A=1m CY(t)).1S(J),A.1C(se.2z),A.1q(),h=ZC.DE.D9(A,t.C,O-t.I+.1,O-.1,S+t.F-.1,S+t.F-.1,P+.1,P+G-.1,"x")):h=ZC.DE.D9(J,t.C,O-t.I+.1,O-.1,S+t.F-.1,S+t.F-.1,P+.1,P+G-.1,"x"),h.K=t.K+"-bA",h.G0=oe(1),i.2Q(h),se.2c?((A=1m CY(t)).1S(k),A.1C(se.2c),A.1q(),c=ZC.DE.D9(A,t.C,O-t.I+.1,O-t.I+.1,S+t.F-.1,S+.1,P+.1,P+G-.1,"z")):c=ZC.DE.D9(k,t.C,O-t.I+.1,O-t.I+.1,S+t.F-.1,S+.1,P+.1,P+G-.1,"z"),c.K=t.K+"-bF",c.G0=oe(2),i.2Q(c),se.1v?((A=1m CY(t)).1S(k),A.1C(se.1v),A.1q(),p=ZC.DE.D9(A,t.C,O-.1,O-.1,S+t.F-.1,S+.1,P+.1,P+G-.1,"z")):p=ZC.DE.D9(k,t.C,O-.1,O-.1,S+t.F-.1,S+.1,P+.1,P+G-.1,"z"),p.K=t.K+"-gY",p.G0=oe(3),i.2Q(p),se.5p?((A=1m CY(t)).1S(z),A.1C(se.5p),A.1q(),u=ZC.DE.D9(A,t.C,O-t.I+.1,O-.1,S+t.F-.1,S+.1,P+.1,P+.1,"y")):u=ZC.DE.D9(z,t.C,O-t.I+.1,O-.1,S+t.F-.1,S+.1,P+.1,P+.1,"y"),u.K=t.K+"-hl",u.G0=oe(4),i.2Q(u),t.A.FY&&(t.A.C9||te.1h(Q+"--1v"+ZC.1b[30]+p.F1()+\'" />\'),te.1h(Q+"--1K"+ZC.1b[30]+Z.F1()+\'" />\',Q+"--2z"+ZC.1b[30]+h.F1()+\'" />\',Q+"--5p"+ZC.1b[30]+u.F1()+\'" 1T-z-3X="-100" />\'));1p;1i"b5":se.2c?((A=1m CY(t)).1S(k),A.1C(se.2c),A.1q(),c=ZC.DE.D9(A,t.C,O-C,O-C,S+V-j,S+V+j,U-ee,U+ee,"z")):c=ZC.DE.D9(k,t.C,O-C,O-C,S+V-j,S+V+j,U-ee,U+ee,"z"),c.K=t.K+"-bk",c.G0=oe(n.AR&&!t.A.C9?6:1),i.2Q(c),f=[[O-C,S+V-j,U-ee],[O-C,S+V+j,U-ee]],t.A.C9&&0!==y?f.1h([O-s,S+V+q,U-$],[O-s,S+V-q,U-$]):f.1h([O-s,S+V,G/2]),se.5p?((A=1m CY(t)).1S(T),A.1C(se.5p),A.1q(),u=ZC.DE.D5(A,t.C,f)):u=ZC.DE.D5(T,t.C,f),u.K=t.K+"-bA",u.G0=oe(3),i.2Q(u),f=[[O-C,S+V-j,U-ee],[O-C,S+V-j,U+ee]],t.A.C9&&0!==y?f.1h([O-s,S+V-q,U+$],[O-s,S+V-q,U-$]):f.1h([O-s,S+t.F/2,G/2]),se.1K?((A=1m CY(t)).1S(J),A.1C(se.1K),A.1q(),Z=ZC.DE.D5(A,t.C,f)):Z=ZC.DE.D5(J,t.C,f),Z.K=t.K+"-bF",Z.G0=oe(4),i.2Q(Z),f=[[O-C,S+V+j,U-ee],[O-C,S+V+j,U+ee]],t.A.C9&&0!==y?f.1h([O-s,S+V+q,U+$],[O-s,S+V+q,U-$]):f.1h([O-s,S+V,G/2]),se.2z?((A=1m CY(t)).1S(J),A.1C(se.2z),A.1q(),h=ZC.DE.D5(A,t.C,f)):h=ZC.DE.D5(J,t.C,f),h.K=t.K+"-gY",h.G0=oe(2),i.2Q(h),t.A.C9&&0!==y&&(se.1v?((A=1m CY(t)).1S(k),A.1C(se.1v),A.1q(),p=ZC.DE.D9(A,t.C,O-s,O-s,S+V-q,S+V+q,U-$,U+$,"z")):p=ZC.DE.D9(k,t.C,O-s,O-s,S+V-q,S+V+q,U-$,U+$,"z"),p.K=t.K+"-hl",p.G0=oe(5),i.2Q(p)),t.A.FY&&te.1h(Q+"--1K"+ZC.1b[30]+Z.F1()+\'" />\',Q+"--2z"+ZC.1b[30]+h.F1()+\'" />\',Q+"--5p"+ZC.1b[30]+u.F1()+\'" 1T-z-3X="-100" />\');1p;1i"ou":if(f=[],W)1j(1b=0;1b<=2m;1b+=5)f.1h([O-t.I,S+ZC.EL(1b)*ie+V,P+ZC.EF(1b)*ie+U]);1u 1j(1b=0;1b<=2m;1b+=5)(d=1m CB(t.C,0,0,0)).E9=[H+ZC.EF(1b)*(ie/2)+le,L+V+ZC.EL(1b)*ie-re],f.1h(d);if(se.2c?((A=1m CY(t)).1S(k),A.1C(se.2c),A.1q(),c=ZC.DE.D5(A,t.C,f,!W)):c=ZC.DE.D5(k,t.C,f,!W),c.K=t.K+"-bk",c.G0=oe(1),i.2Q(c),f=[],W){1j(1b=90-ae;1b<=3U-ae;1b+=5)f.1h([O-t.I,S+ZC.EL(1b)*ie+V,P+ZC.EF(1b)*ie+U]);1j(f.1h([O,S+ZC.EL(1b)*ie+V,P+ZC.EF(1b)*ie+U]),1b=3U-ae;1b>=90-ae;1b-=5)f.1h([O,S+ZC.EL(1b)*ie+V,P+ZC.EF(1b)*ie+U])}1u{1j(1b=90;1b<=3U;1b+=5)(d=1m CB(t.C,0,0,0)).E9=[H+ZC.EF(1b)*(ie/2)+le,L+V+ZC.EL(1b)*ie-re],f.1h(d);1j(1b=3U;1b>=90;1b-=5)(d=1m CB(t.C,0,0,0)).E9=[H+ZC.EF(1b)*(ie/2)+t.I+le,L+V+ZC.EL(1b)*ie-re],f.1h(d)}if(se.5p?((A=1m CY(t)).1S(T),A.1C(se.5p),A.1q(),u=ZC.DE.D5(A,t.C,f,!W)):u=ZC.DE.D5(T,t.C,f,!W),u.K=t.K+"-bA",u.G0=oe(2),i.2Q(u),f=[],W)1j(1b=0;1b<=2m;1b+=5)f.1h([O,S+ZC.EL(1b)*ie+V,P+ZC.EF(1b)*ie+U]);1u 1j(1b=0;1b<=2m;1b+=5)(d=1m CB(t.C,0,0,0)).E9=[H+ZC.EF(1b)*(ie/2)+t.I+le,L+V+ZC.EL(1b)*ie-re],f.1h(d);se.1v?((A=1m CY(t)).1S(k),A.1C(se.1v),A.1q(),p=ZC.DE.D5(A,t.C,f,!W)):p=ZC.DE.D5(k,t.C,f,!W),p.K=t.K+"-bF",p.G0=oe(3),i.2Q(p),t.A.FY&&te.1h(Q+"--5p"+ZC.1b[30]+u.F1()+\'" 1T-z-3X="-100" />\',Q+"--1v"+ZC.1b[30]+p.F1()+\'" />\');1p;1i"eZ":if(f=[],W)1j(1b=0;1b<=2m;1b+=5)f.1h([O-C,S+ZC.EL(1b)*ie*X+V,ZC.EF(1b)*ie*X+U]);1u 1j(1b=0;1b<=2m;1b+=5)(d=1m CB(t.C,0,0,0)).E9=[H+s+ZC.EF(1b)*(ie/2)*X+le,L+V+ZC.EL(1b)*ie*X-re],f.1h(d);if(se.2c?((A=1m CY(t)).1S(k),A.1C(se.2c),A.1q(),c=ZC.DE.D5(A,t.C,f,!W)):c=ZC.DE.D5(k,t.C,f,!W),c.K=t.K+"-bk",c.G0=oe(1),i.2Q(c),f=[],W){1j(1b=90-ae;1b<=3U-ae;1b+=5)f.1h([O-C,S+ZC.EL(1b)*ie*X+V,ZC.EF(1b)*ie*X+U]);if(t.A.C9&&0!==y)1j(1b=3U-ae;1b>=90-ae;1b-=5)f.1h([O-s,S+ZC.EL(1b)*ie*y+V,ZC.EF(1b)*ie*y+U]);1u f.1h([O-s,S+V,ie])}1u{1j(1b=90;1b<=3U;1b+=5)(d=1m CB(t.C,0,0,0)).E9=[H+s+ZC.EF(1b)*(ie/2)*X+le,L+V+ZC.EL(1b)*ie*X-re],f.1h(d);if(t.A.C9&&0!==y)1j(1b=3U;1b>=90;1b-=5)(d=1m CB(t.C,0,0,0)).E9=[H+C+ZC.EF(1b)*(ie/2)*y+le,L+V+ZC.EL(1b)*ie*y-re],f.1h(d);1u(d=1m CB(t.C,0,0,0)).E9=[H+C+le,L+V-re],f.1h(d)}if(se.5p?((A=1m CY(t)).1S(T),A.1C(se.5p),A.1q(),u=ZC.DE.D5(A,t.C,f,!W)):u=ZC.DE.D5(T,t.C,f,!W),u.K=t.K+"-bA",u.G0=oe(2),i.2Q(u),t.A.C9&&0!==y){if(f=[],W)1j(1b=0;1b<=2m;1b+=5)f.1h([O-s,S+ZC.EL(1b)*ie*y+V,ZC.EF(1b)*ie*y+U]);1u 1j(1b=0;1b<=2m;1b+=5)(d=1m CB(t.C,0,0,0)).E9=[H+C+ZC.EF(1b)*(ie/2)*y+le,L+V+ZC.EL(1b)*ie*y-re],f.1h(d);se.1v?((A=1m CY(t)).1S(k),A.1C(se.1v),A.1q(),p=ZC.DE.D5(A,t.C,f,!W)):p=ZC.DE.D5(k,t.C,f,!W),p.K=t.K+"-bF",p.G0=oe(3),i.2Q(p)}t.A.FY&&te.1h(Q+"--5p"+ZC.1b[30]+u.F1()+\'" 1T-z-3X="-100" />\')}}t.A.U&&t.A.U.AL&&t.F7()}}HZ(){}}1O Cx 2k nU{2I(){1g.RU()}J9(){1l{1r:1g.N.B8}}KC(){1l{"1W-1r":1g.N.B8,"1G-1r":1g.N.B8,1r:1g.N.C0}}HD(e){1a t=1E.HD(e);1l 1m CB(1g.C,t[0]-ZC.AM.DZ,t[1]-ZC.AM.E0,1g.A.E["z-4c"]).E9}1t(){1a e,t,i=1g;1E.1t();1a a,n=i.E.2W;(a="2a"!==i.A.J2?i.N=i.A.HY(i,i.N):i.N).DI=i.K+"-hG",i.A.I6&&i.GK(a);1a l=0,r=-1,o=ZC.AM.FS;if("5e"===i.C.8f())i.A.C9?r=0:(l=i.A.A.A7.1f,r=i.A.L,o/=l);1u if(i.A.C9)r=0;1u{1j(e=0;e<i.A.A.A7.1f;e++)i.C.E["1B"+e+".2h"]&&r++;1j(e=0;e<i.A.A.A7.1f;e++)i.C.E["1B"+e+".2h"]&&(l++,i.A.L>e&&r--);o/=l,r=l-r-1}a.A0=a.AC=a.B8,"4Z"===i.A.CS&&(a.BU=a.B8);1a s=i.A.A.HV,C=i.C.K+ZC.1b[34]+i.C.K+ZC.1b[35]+i.A.L+ZC.1b[6],A=ZC.P.GF("4B",i.A.E5,i.N.IX)+\'1O="\'+C+\'" id="\'+i.K,Z=r*o,c=(r+1)*o;if(1c!==ZC.1d(i.A.o["z-4c"])&&(Z=ZC.1k(i.A.o["z-4c"])),1c!==ZC.1d(i.A.o["z-6i"])&&(c=ZC.1k(i.A.o["z-6i"])),1c!==ZC.1d(i.A.o.5v)){1a p=ZC.1k(i.A.o.5v);Z=r*o+o/2-p,c=r*o+o/2+p}i.A.E["z-4l"]=l,i.A.E["z-8g"]=r,i.A.E["z-5v"]=o,i.A.E["z-4c"]=Z,i.A.E["z-9V"]=(Z+c)/2;1a u,h,1b,d=[],f=[],g=a;ZC.2l(Z-c)<=2&&(i.C.CG.SR[i.A.K]||(i.C.CG.SR[i.A.K]={9S:i.A.L,1I:a,2W:[]},i.C.CG.SR[i.A.K].1I.ME=!1,i.C.CG.SR[i.A.K].1I.AZ=ZC.BO(1,ZC.1k(ZC.2l(Z-c)/1))));1j(1a B=0;B<n.1f-1;B++){if(ZC.2l(Z-c)>2){1a v=-ZC.1k(ZC.U4(1A.af((n[B+1][1]-n[B][1])/(n[B+1][0]-n[B][0]))));(g=1m CY(i)).1S(a),g.A0=ZC.AN.JL(ZC.AN.G7(g.A0),v),g.AC=ZC.AN.JL(ZC.AN.G7(g.AC),v),g.BU=ZC.AN.JL(ZC.AN.G7(g.BU),v)}1a E,b,m,K;if(i.A.oE&&ZC.2l(Z-c)<=2?((E=i.A.oE).1q(i.C,n[B][0]-ZC.AM.DZ,n[B][1]-ZC.AM.E0,Z),(b=i.A.Cw).1q(i.C,n[B+1][0]-ZC.AM.DZ,n[B+1][1]-ZC.AM.E0,Z),(m=i.A.Cv).1q(i.C,n[B+1][0]-ZC.AM.DZ,n[B+1][1]-ZC.AM.E0,c-1),(K=i.A.Cu).1q(i.C,n[B][0]-ZC.AM.DZ,n[B][1]-ZC.AM.E0,c-1)):(E=i.A.oE=1m CB(i.C,n[B][0]-ZC.AM.DZ,n[B][1]-ZC.AM.E0,Z),b=i.A.Cw=1m CB(i.C,n[B+1][0]-ZC.AM.DZ,n[B+1][1]-ZC.AM.E0,Z),m=i.A.Cv=1m CB(i.C,n[B+1][0]-ZC.AM.DZ,n[B+1][1]-ZC.AM.E0,c-1),K=i.A.Cu=1m CB(i.C,n[B][0]-ZC.AM.DZ,n[B][1]-ZC.AM.E0,c-1)),ZC.2l(Z-c)>2?((u=1m eE(g,i.C)).K=i.K+"-Cg"+B,u.2Q(E),u.2Q(b),u.2Q(m),u.2Q(K),i.C.CG.2Q(u)):(i.C.CG.SR[i.A.K].2W.1h(E.E9),B===n.1f-2&&i.C.CG.SR[i.A.K].2W.1h(b.E9),"4Z"===i.A.CS&&(E=1m CB(i.C,n[B][0]-ZC.AM.DZ,n[B][1]-ZC.AM.E0,Z-10),K=1m CB(i.C,n[B][0]-ZC.AM.DZ,n[B][1]-ZC.AM.E0,c-1+10))),d.1h(E.E9),f.1h(K.E9),i.A.FY&&"4Z"!==i.A.CS)if(ZC.2l(Z-c)>2)t=u.F1();1u{1j(h=ZC.AO.Z1([E.E9,b.E9],4),1b=0;1b<h.1f;1b++)h[1b][0]=1A.4b(h[1b][0]),h[1b][1]=1A.4b(h[1b][1]);t=h.2M(",")}"4Z"!==i.A.CS&&i.A.FY&&s.1h(A+"--Cm"+B+ZC.1b[30]+t+\'" />\')}"4Z"===i.A.CS?(i.E.pU=!0,i.E.2W=d.4z(f.9D())):i.E.2W=1c,i.A.A2.o&&("4Z"===i.A.CS||"2a"===i.A.A2.o.1J||1c!==ZC.1d(i.A.A2.o.2h)&&!ZC.2t(i.A.A2.o.2h))&&"4Z"!==i.A.CS||i.ON(!0),i.A.U&&i.A.U.AL&&i.F7(),i.9n(a,n)}HZ(){}}1O Cs 2k op{2I(){1g.RU()}J9(){1l{1r:1g.N.B8}}KC(){1l{"1W-1r":1g.N.B8,"1G-1r":1g.N.B8,1r:1g.N.C0}}HD(e){1a t=1E.HD(e);1l 1m CB(1g.C,t[0]-ZC.AM.DZ,t[1]-ZC.AM.E0,1g.A.E["z-4c"]).E9}1t(){1a e,t,i=1g;1E.1t();1a a=i.A.CH,n=a.H3,l=a.AX(n);l=ZC.5l(l,a.iY,a.iY+a.F);1a r,o=i.E.2W,s=i.E.9W;(r="2a"!==i.A.J2?i.N=i.A.HY(i,i.N):i.N).DI=i.K+"-hG",i.A.I6&&i.GK(r);1a C=0,A=-1,Z=ZC.AM.FS;if("5e"===i.C.8f())i.A.C9?A=0:(C=i.A.A.A7.1f,A=i.A.L,Z/=C);1u if(i.A.C9)A=0;1u{1j(e=0;e<i.A.A.A7.1f;e++)i.C.E["1B"+e+".2h"]&&A++;1j(e=0;e<i.A.A.A7.1f;e++)i.C.E["1B"+e+".2h"]&&(C++,i.A.L>e&&A--);Z/=C,A=C-A-1}1a c=1m CY(i);c.1S(r),c.A0=c.AC=r.B8,"4Z"===i.A.CS&&(c.BU=r.B8);1a p=1m CY(i);p.1S(r),p.LC=!0,p.AQ=0,p.C5=i.A.HX,p.A0=ZC.AN.QR(ZC.AN.G7(p.A0),30),p.AC=ZC.AN.QR(ZC.AN.G7(p.AC),30);1a u=i.A.A.HV,h=i.C.K+ZC.1b[34]+i.C.K+ZC.1b[35]+i.A.L+ZC.1b[6],1b=ZC.P.GF("4B",i.A.E5,i.N.IX)+\'1O="\'+h+\'" id="\'+i.K,d=[],f=[],g=A*Z,B=(A+1)*Z;if(1c!==ZC.1d(i.A.o["z-4c"])&&(g=ZC.1k(i.A.o["z-4c"])),1c!==ZC.1d(i.A.o["z-6i"])&&(B=ZC.1k(i.A.o["z-6i"])),1c!==ZC.1d(i.A.o.5v)){1a v=ZC.1k(i.A.o.5v);g=A*Z+Z/2-v,B=A*Z+Z/2+v}i.A.E["z-4l"]=C,i.A.E["z-8g"]=A,i.A.E["z-5v"]=Z,i.A.E["z-4c"]=g,i.A.E["z-9V"]=(g+B)/2;1a E,b,m=1m eE(p,i.C);1j(E=0,b=s.1f;E<b;E++){1a K=1m CB(i.C,s[E][0]-ZC.AM.DZ,s[E][1]-ZC.AM.E0,g);m.2Q(K)}i.C.CG.2Q(m),i.E.9W=s,i.L===i.A.S.1f-1&&((m=1m eE(p,i.C)).2Q(1m CB(i.C,i.iX-.5-ZC.AM.DZ,i.iY-ZC.AM.E0,g)),m.2Q(1m CB(i.C,i.iX-.5-ZC.AM.DZ,l-ZC.AM.E0,g)),m.2Q(1m CB(i.C,i.iX-.5-ZC.AM.DZ,l-ZC.AM.E0,B-1)),m.2Q(1m CB(i.C,i.iX-.5-ZC.AM.DZ,i.iY-ZC.AM.E0,B-1)),m.K=i.K+"-15S",i.C.CG.2Q(m));1a D=r;1j(ZC.2l(g-B)<=2&&(i.C.CG.SR[i.A.K]||(i.C.CG.SR[i.A.K]={9S:i.A.L,1I:r,2W:[]},i.C.CG.SR[i.A.K].1I.ME=!1,i.C.CG.SR[i.A.K].1I.AZ=ZC.BO(1,ZC.1k(ZC.2l(g-B)/1)))),E=0;E<o.1f-1;E++){if(ZC.2l(g-B)>2){1a F=-ZC.1k(ZC.U4(1A.af((o[E+1][1]-o[E][1])/(o[E+1][0]-o[E][0]))));(D=1m CY(i)).1S(c),D.A0=ZC.AN.JL(ZC.AN.G7(D.A0),F),D.AC=ZC.AN.JL(ZC.AN.G7(D.AC),F),D.BU=ZC.AN.JL(ZC.AN.G7(D.BU),F)}1a I=1m CB(i.C,o[E][0]-ZC.AM.DZ,o[E][1]-ZC.AM.E0,g),x=1m CB(i.C,o[E+1][0]-ZC.AM.DZ,o[E+1][1]-ZC.AM.E0,g),X=1m CB(i.C,o[E+1][0]-ZC.AM.DZ,o[E+1][1]-ZC.AM.E0,B-1),y=1m CB(i.C,o[E][0]-ZC.AM.DZ,o[E][1]-ZC.AM.E0,B-1);if(ZC.2l(g-B)>2?((m=1m eE(D,i.C)).K=i.K+"-Cg"+E,m.2Q(I),m.2Q(x),m.2Q(X),m.2Q(y),i.C.CG.2Q(m)):(i.C.CG.SR[i.A.K].2W.1h(I.E9),E===o.1f-2&&i.C.CG.SR[i.A.K].2W.1h(x.E9),"4Z"===i.A.CS&&(I=1m CB(i.C,o[E][0]-ZC.AM.DZ,o[E][1]-ZC.AM.E0,g-10),y=1m CB(i.C,o[E][0]-ZC.AM.DZ,o[E][1]-ZC.AM.E0,B-1+10))),d.1h(I.E9),f.1h(y.E9),i.A.FY&&"4Z"!==i.A.CS)if(ZC.2l(g-B)>2)t=m.F1();1u{1j(1a Y=ZC.AO.Z1([m.D[0].E9,m.D[1].E9],4),L=0;L<Y.1f;L++)Y[L][0]=1A.4b(Y[L][0]),Y[L][1]=1A.4b(Y[L][1]);t=Y.2M(",")}"4Z"!==i.A.CS&&i.A.FY&&u.1h(1b+"--Cm"+E+ZC.1b[30]+t+\'" />\')}"4Z"===i.A.CS?(i.E.pU=!0,i.E.2W=d.4z(f.9D())):i.E.2W=1c,i.A.A2.o&&("2a"===i.A.A2.o.1J||1c!==ZC.1d(i.A.A2.o.2h)&&!ZC.2t(i.A.A2.o.2h))&&"4Z"!==i.A.CS||i.ON(!0),i.A.U&&i.A.U.AL&&i.F7(),i.9n(r,o,s)}HZ(){}}1O Ck 2k MG{2G(e){1E(e),1g.X7=0,1g.XC=0}EW(e,t,i,a){1a n=1g,l=1c;1l l=n.A.L<n.A.A.A7.1f-1?n.A.A.A7[n.A.L+1]:n.A.A.A7[0],n.CR=[["%Cj-1B-1D",l.AP],["%Cj-2r-1U",l.S[n.L].AE],["%q0-1U",n.XC],["%6e-1U",1c===ZC.1d(n.A.A.XZ[n.L])?0:n.A.A.XZ[n.L].1N]],e=1E.EW(e,t,i,a)}2I(){1a e=1g,t=e.C.BK("1z"),i=e.L%t.GZ,a=1A.4h(e.L/t.GZ);e.iX=t.iX+i*t.GJ+t.GJ/2+t.BJ,e.iY=t.iY+a*t.GC+t.GC/2+t.BC,e.IQ||(e.1S(e.A),e.E3=e.A.E3,e.DB()&&e.1q(!1),e.IQ=!0),e.I=t.GJ/2,e.F=t.GC/2}HD(e){1a t=1g,i=e.I,a=e.F,n=t.iX-i/2,l=t.iY-a/2;if(3===t.A.A.A7.1f)1R(t.A.L){1i 0:n-=t.AI/4,l+=t.AI/8;1p;1i 1:n+=t.AI/4,l+=t.AI/8;1p;1i 2:l-=t.AI/4}1u 1R(t.A.L){1i 0:n-=t.AI/4;1p;1i 1:n+=t.AI/4}1l 1c!==ZC.1d(e.o.x)&&(n=e.iX),1c!==ZC.1d(e.o.y)&&(l=e.iY),n+=e.BJ,l+=e.BC,[ZC.1k(n),ZC.1k(l)]}F7(){1a e,t,i=1g,a=1E.F7(),n=i.C.K+"-1U-3C "+i.C.K+"-1B-"+i.A.L+"-1U-3C zc-1U-3C",l=i.H.2P()?i.H.mc("1v"):i.C.AJ["3d"]||i.H.KE?ZC.AK(i.C.K+"-4l-vb-c"):ZC.AK(i.C.K+"-1B-"+i.A.L+"-vb-c"),r=i.H.2P()?ZC.AK(i.C.A.K+"-1v"):ZC.AK(i.C.A.K+"-1D");if(1c!==ZC.1d(a.o.q0)){if(0===i.A.L&&!i.C.E["Ch.2h"]||1===i.A.L&&!i.C.E["Cf.2h"]||2===i.A.L&&!i.C.E["Ci.2h"])1l;i.A.L<i.A.A.A7.1f-1?i.A.A.A7[i.A.L+1]:i.A.A.A7[0],e=i.A.A.DW[i.A.L][i.L].f0,(t=1m DP(i)).1S(a),t.o.1D=""+i.XC,t.1C(a.o.q0),t.EW=1n(e){1l i.EW(e,{})},t.1q(),t.GM=n,t.K=i.K+"-1U-3C-2M",t.Z=a.C6=l,t.IP=r,t.iX=e[0]-t.I/2,t.iY=e[1]-t.F/2,t.AL&&(t.1t(),t.EB())}if(1c!==ZC.1d(a.o.6e)&&2===i.A.L){if(!i.C.E["Ci.2h"]||!i.C.E["Ch.2h"]||!i.C.E["Cf.2h"])1l;e=i.A.A.XZ[i.L].xy,(t=1m DP(i)).1S(a),t.o.1D=""+i.A.A.HV[i.A.L],t.1C(a.o.6e),t.EW=1n(e){1l i.EW(e,{})},t.1q(),t.GM=n,t.K=i.K+"-1U-3C-6e",t.Z=a.C6=l,t.IP=r,t.iX=e[0]-t.I/2,t.iY=e[1]-t.F/2,t.AL&&(t.1t(),t.EB())}}J9(){1l{1r:1g.B8}}KC(){1l{"1W-1r":1g.BU,"1G-1r":1g.BU,1r:1g.C0}}1t(){1a e,t=1g;if(t.A.L>=3)t.A.U&&t.F7();1u{1E.1t();1a i=t.N=t.A.HY(t,t),a=1m DS(t.A);a.K=t.K,a.Z=t.A.CL("bl",1),a.C6=t.A.CL("bl",0),a.1S(i);1a n=t.iX,l=t.iY;if(a.iX=n,a.iY=l,a.AI=t.AI,a.DN="3A",a.E.74=t.A.L,a.E.7w=t.L,a.1q(),t.FP=a,t.A.GB&&!t.C.HK){1a r=a,o={};r.iX=n,r.iY=l,o.x=n,o.y=l;1a s=t.A.LG;if(r.C5=0,o.2n=i.C5,3===s)r.AI=2,o.2e=t.AI;1u if(4===s){1R(t.A.L){1i 0:r.iX=n-3*t.AI,r.iY=l;1p;1i 1:r.iX=n+3*t.AI,r.iY=l;1p;1i 2:r.iX=n,r.iY=l-3*t.AI}o.x=n,o.y=l}1j(e in t.A.FV)r[E8.GO[ZC.EC(e)]]=t.A.FV[e],o[ZC.EC(e)]=i[E8.GO[ZC.EC(e)]];if(t.C.EJ||(t.C.EJ={}),1c!==ZC.1d(t.C.EJ[t.A.L+"-"+t.L]))1j(e in t.C.EJ[t.A.L+"-"+t.L])r[E8.GO[ZC.EC(e)]]=t.C.EJ[t.A.L+"-"+t.L][e];t.C.EJ[t.A.L+"-"+t.L]={},ZC.2E(o,t.C.EJ[t.A.L+"-"+t.L]);1a C=1m E8(r,o,t.A.JI,t.A.LB,E8.RR[t.A.LF],1n(){A()});C.AV=t,t.L5(C)}1u a.1t(),A()}1n A(){1a e=t.C.K+ZC.1b[34]+t.C.K+ZC.1b[35]+t.A.L+ZC.1b[6],i=ZC.P.GF("3A",t.A.E5,t.A.IX)+\'1O="\'+e+\'" id="\'+t.K+ZC.1b[30]+ZC.1k(t.iX+ZC.3B)+","+ZC.1k(t.iY+ZC.3B)+","+ZC.1k(ZC.BO(ZC.2L?6:3,t.AI)*(ZC.2L?2:1.2))+\'" />\';t.A.A.HV.1h(i),t.A.U&&t.F7()}}HZ(e){1a t=1g;ZC.3o||t.LL({6v:e,1J:"2S",8S:1n(){1g.DN="3A",1g.A0=t.A.BN[3],1g.AC=t.A.BN[3]},c9:1n(){1g.iX=t.iX,1g.iY=t.iY,1g.AI=t.AI}})}}MG.5m.MR=1n(e,t){1a i,a,n=1g;if(1w t===ZC.1b[31]&&(t=!1),t)1w n.E.pi!==ZC.1b[31]&&((i=1m CY(n)).1S(n.A),n.A.JA&&(i.1S(n.A.JA),i.1C(n.A.JA.o[ZC.1b[71]])),i.1q(),i.K=n.K+"--4J-2N",i.AL&&ZC.CN.1t(e,i,n.E.pi));1u{1a l=n.A.CH,r=n.A.B1;if(0!==n.A.SI.1f){1a o=1c,s=1c,C=!0;n.A.SI.1f<=2?(1c!==ZC.1d(n.A.SI[0])&&n.A.SI[0]3F 3N&&(C=!1),1c!==ZC.1d(n.A.SI[1])&&n.A.SI[1]3F 3N&&(C=!1)):C=!1,C?(o=n.A.SI[0],s=n.A.SI[1]):1c!==ZC.1d(a=n.A.SI[n.L])&&a 3F 3N&&(o=s=a[0],2===a.1f&&(s=a[1])),n.E["2r-4J-8u"]=o,n.E["2r-4J-sB"]=s,-1!==(o+"").1L("%")&&(o=ZC.IL(o))<=1&&(o*=n.AE),-1!==(s+"").1L("%")&&(s=ZC.IL(s))<=1&&(s*=n.AE);1a A=[],Z=ZC.IL(n.A.JA&&n.A.JA.o[ZC.1b[21]]||.5);Z<=1&&(Z="5x"===n.A.AF?ZC.1k(Z*n.I):"6b"===n.A.AF?ZC.1k(Z*n.F):ZC.1k(Z*r.A9));1a c,p=0;if(p=r.D8?n.F:n.I,1c!==ZC.1d(o)){1a u=l.AX(n.CM+o);r.D8?(c=l.AR?n.AE<0?n.iX+n.I:n.iX:n.AE>0?n.iX+n.I:n.iX,A.1h([u,n.iY+p/2-Z/2],[u,n.iY+p/2+Z/2],1c,[u,n.iY+p/2],[c,n.iY+p/2])):(c=l.AR?n.AE>0?n.iY+n.F:n.iY:n.AE<0?n.iY+n.F:n.iY,A.1h([n.iX+p/2-Z/2,u],[n.iX+p/2+Z/2,u],1c,[n.iX+p/2,u],[n.iX+p/2,c]))}if(1c!==ZC.1d(s)){1a h=l.AX(n.CM-s);r.D8?(c=l.AR?n.AE<0?n.iX+n.I:n.iX:n.AE>0?n.iX+n.I:n.iX,A.1h(1c,[h,n.iY+p/2-Z/2],[h,n.iY+p/2+Z/2],1c,[h,n.iY+p/2],[c,n.iY+p/2])):(c=l.AR?n.AE>0?n.iY+n.F:n.iY:n.AE<0?n.iY+n.F:n.iY,A.1h(1c,[n.iX+p/2-Z/2,h],[n.iX+p/2+Z/2,h],1c,[n.iX+p/2,h],[n.iX+p/2,c]))}(i=1m CY(n)).1S(n.A),n.A.JA&&i.1S(n.A.JA),i.1q(),i.K=n.K+"--4J",i.CX=!1,ZC.CN.1t(e,i,A),n.E.pi=A}}};1O HA 2k I4{2G(e){1E(e);1a t=1g;t.H=t.A.A,t.BE="",t.W=[],t.BW=[],t.oI=[],t.DJ=!1,t.M=1c,t.BR=1c,t.IV=1c,t.D4=1c,t.GU=0,t.IC=1c,t.G2=1c,t.H3=0,t.PB=1c,t.L=1,t.A6=0,t.oL=0,t.BV=0,t.AR=!1,t.D8=!1,t.A9=0,t.DT=-1,t.RN=ZC.HF[ZC.1b[13]]||"",t.S4=ZC.HF[ZC.1b[14]]||".",t.f3=!1,t.SS=2,t.dw=!1,t.TY="",t.f7="zW",t.CF=1c,t.AF="",t.EE=ZC.3v,t.MA=ZC.3v,t.H7=!1,t.YN=!1,t.LZ=1c,t.NY=1c,t.QF=[],t.E4=1,t.B4=-1,t.BQ=-1,t.SQ=-1,t.GX=-1,t.HQ=-1,t.C8="mx",t.EN=10,t.FG=1c,t.P9=1,t.QB=!0,t.n7=!1,t.7D=[!1,!1],t.M3=1c,t.X1=1c,t.TM=!1,t.I3=-1,t.YY=!1,t.B7="2q",t.Q8=!1,t.VW=!1,t.R8=1,t.dL="",t.hZ=!0}1q(){1E.1q();1a e,t=1g;if(1c!==ZC.1d(e=t.o.7h))if(ZC.PI(e))t.E4=ZC.1Y(e);1u{1a i=e.1F(/[0-9]/gi,""),a=5w(e.1F(/[^0-9]/gi,""),10);1R(a=a||1,i){1i"mz":t.E4=5L*a;1p;1i"i0":t.E4=5L*a*60;1p;1i"mv":t.E4=5L*a*60*60;1p;1i"dn":t.E4=5L*a*60*60*24;1p;1i"Ag":t.E4=5L*a*60*60*24*7;1p;1i"eT":t.E4=15r*a;1p;1i"lY":t.E4=15C*a}}if(1c!==ZC.1d(t.o.iP)&&1c===ZC.1d(t.o.5M)&&(t.o.5M=t.o.iP),t.4A([[ZC.1b[10],"BW"],["2H-1D","oI"],["5F","CF"],["2b-4c","A6","i"],["2b-4c","oL","i"],["2b-6i","BV","i"],["4U-9O","GU","i"],["2Y","L","i"],["zT","AR","b"],["cK","H7","b"],["3H-15I","YN","b"],["7A-7h","Q8","b"],["3H-to","LZ"],["e9-15H","YY","b"],["3H-to-6n","NY"],["2C-iG","n7","b"],["15G","TM","b"],["1X-d2","EE","i"],["1X-2C","EE","i"],["3Q-1U","H3","f"],[ZC.1b[12],"DT","ia"],[ZC.1b[14],"S4"],[ZC.1b[13],"RN"],["5M","dw","b"],["5M-dS","TY"],["83","f7"],["aA","f3","b"],[ZC.1b[25],"SS","ia"],["f4","C8"],["2Z-15F","EN","fa"],["1z-7f","P9","fa"],["4n-d2","M3"],["1X-6p","I3","i"],[ZC.1b[7],"B7"],["7f","R8","f"],["15A","dL"],["15z","VW","b"],["Db","DJ","b"],["iN","hZ","b"]]),1c!==ZC.1d(e=t.o["3i-iH"])&&(e.1f?(t.7D[0]=ZC.2t(e[0]),t.7D[1]=ZC.2t(e[e.1f-1])):t.7D[0]=t.7D[1]=ZC.2t(e)),"3e"==1w t.BW){1a n=t.BW.2p(":"),l=1;3===n.1f&&(l=ZC.1Y(n[2])),t.BW=[];1j(1a r=ZC.1Y(n[0]);r<ZC.1Y(n[1]);r+=l)t.BW.1h(""+r);t.BW.1h(""+n[1])}1c!==ZC.1d(t.o["7A-2C"])&&(t.EE=ZC.3v),t.EE=ZC.BO(t.EE,2),1c!==ZC.1d(e=t.o.2b)&&(t.A6=t.BV=ZC.1k(e),0!==ZC.1k(e)||"9f"!==t.A.AF&&"aM"!==t.A.AF||(t.DJ=!1)),1c!==ZC.1d(e=t.o["1X-9O"])?t.MA=ZC.1k(e):t.MA=t.EE,t.MA=ZC.BO(2,t.MA),1c!==ZC.1d(e=t.o.5J)&&(t.FG=1m CY,t.FG.1C(e));1a o=t.A.A.B9,s="("+t.A.AF+")",C=t.BE.1F(/\\-[0-9]/,""),A=t.BE.1F(/\\-[0-9]/,"-n");1n Z(e){1a i=[s+".4y."+e,s+"."+t.BE+"."+e,s+"."+C+"."+e,s+"."+C+"["+t.B7+"]."+e,s+"."+A+"."+e];1l t.A.AJ["3d"]&&(i=i.4z([s+".4y[3d]."+e,s+"."+t.BE+"[3d]."+e,s+"."+C+"[3d]."+e,s+"."+A+"[3d]."+e])),i}if(1c===ZC.1d(t.o[ZC.1b[7]])&&t.L>1&&(t.B7="5B"),1c!==ZC.1d(e=t.o.15y))1j(1a c=0,p=e.1f;c<p;c++){1a u=1m Bs(t);u.L=c,u.K=t.K+"-1Q-"+c,o.2y(u.o,Z("1Q")),u.1C(e[c]),u.1q(),t.QF.1h(u)}t.PB=1m CY(t),o.2y(t.PB.o,Z("3Q-1y")),t.PB.1C(t.o["3Q-1y"]),"k"===t.AF&&(t.PB.AL=!1),t.PB.1q(),t.M=1m DP(t),o.2y(t.M.o,Z("1H")),t.M.1C(t.o.1H),t.M.K=t.K+"-1H",t.M.1q(),t.BR=1m DP(t),o.2y(t.BR.o,Z("1P")),t.BR.1C(t.o.1P),t.BR.K=t.K+"-1P",t.BR.1q(),t.IV=1m CY(t),o.2y(t.IV.o,Z("43")),t.IV.1C(t.o.43),t.IV.1q(),t.D4=1m CY(t),o.2y(t.D4.o,Z("2i")),t.D4.1C(t.o.2i),t.D4.1q(),1c===ZC.1d(t.D4.o.2C)&&"-1"!==t.D4.A0&&"-1"!==t.D4.AC&&t.D4.A0!==t.D4.AC&&(t.D4.o.2C=[{2n:t.D4.C5,"1W-1r":t.D4.A0},{2n:t.D4.C5,"1W-1r":t.D4.AC}]),t.IC=1m CY(t),o.2y(t.IC.o,Z("4U-43")),t.IC.1C(t.o["4U-43"]),t.IC.1q(),t.G2=1m CY(t),o.2y(t.G2.o,Z("4U-2i")),t.G2.1C(t.o["4U-2i"]),t.G2.1q(),t.WU()}WU(){1a e,t=1g,i={x:"iX",y:"iY",1s:"I",1M:"F"};1j(1a a in i){1a n=t.A.Q[i[a]];1c!==ZC.1d(t.o[a])&&(n=ZC.IL(t.o[a]))>=0&&n<=1&&(n="x"===a||"y"===a?t.A.Q["x"===a?"iX":"iY"]+ZC.1k(n*t.A.Q["x"===a?"I":"F"]):ZC.1k(n*t.A.Q[i[a]])),t[i[a]]=n}1c!==ZC.1d(e=t.o.2b)&&(t.A6=t.BV=ZC.1Y(ZC.8B(e))),1c!==ZC.1d(e=t.o["2b-4c"])&&(t.A6=ZC.1Y(ZC.8B(e))),1c!==ZC.1d(e=t.o["2b-6i"])&&(t.BV=ZC.1Y(ZC.8B(e)));1a l="k"===t.AF&&!t.D8||"v"===t.AF&&t.D8?t.I:t.F;t.A6<1&&(t.A6*=l),t.BV<1&&(t.BV*=l)}W9(e){1a t=1g;1c!==ZC.1d(t.o.an)&&(t.X1||(t.X1=1m HA(t.A)),t.X1.1C(t.o),t.X1.1q(),t.X1.IY=e,t.X1.DB()&&(t.X1.1q(),t.DT=t.X1.DT,t.CF=t.X1.CF))}GV(){}T6(){}ZS(){}H9(){}3k(){}5N(){}LT(){1a e,t=1g,i={83:t.f7,"mJ-8O":t.RN,"6p-8O":t.S4,6p:t.DT,"1X-6p":t.I3,5M:t.dw,"5M-dS":t.TY,aA:t.f3,"aA-6p":t.SS};if(t.FG)1R(t.FG.o.1J){1i"5C":i[ZC.1b[68]]=!0,1c!==ZC.1d(e=t.FG.o.1D)&&(t.FG.o.4q=e);1a a=t.W[t.A1]-t.W[t.X],n="",l="",r={},o=["pR","mz","i0","mv","dn","eT","lY"];1j(1a s in o)r[o[s]]=ZC.HF["5C-pN"][o[s]];l=0<=a&&a<=5L?"pR":5L<a&&a<=mR?"mz":mR<a&&a<=zL?"i0":zL<a&&a<=zK?"mv":zK<a&&a<=zJ?"dn":zJ<a&&a<=15x?"eT":"lY",n=1c!==ZC.1d(t.FG.o[l])?t.FG.o[l]:1c!==ZC.1d(t.FG.o.4q)?t.FG.o.4q:r[l],t.E.Ab=n,i[ZC.1b[67]]=t.E.Ab}1l i}Y1(){1j(1a e=1g,t=e.A.AY.A7,i=-1,a=0,n=t.1f;a<n;a++){1a l=t[a].BT(e.AF);if(-1!==ZC.AT(l,e.BE)){1R(t[a].AF){1i"3P":1i"7e":1i"8Y":1i"5x":1i"6T":1i"6b":1i"7o":1i"8k":1i"81":1i"1N":1i"8a":1i"8E":1i"aa":1i"au":1i"b9":i=t[a].A0;1p;1i"6y":1i"5i":i=-1!==t[a].A2.A0?t[a].A2.A0:t[a].A0;1p;2q:i=t[a].B8}1p}}1l i}1t(){1g.5N(),1g.A.AJ["3d"]||1E.1t()}MB(e,t,i,a){1a n=1g;if(1c===ZC.1d(a)&&(a=5),n.A.AJ["3d"]){1a l=1m CB(n.A,e.iX+e.I/2-ZC.AM.DZ,e.iY+e.F/2-ZC.AM.E0,0+e.nE);e.iX=l.E9[0]-e.I/2+("v"===i?"2q"===n.B7?-a:a:0),e.iY=l.E9[1]-e.F/2+("h"===i?"2q"===n.B7?a:-a:0);1a r=ZC.DE.nH(n.A,e);1c===ZC.1d(t)&&(t=e.AA,e.AA%90==0&&(t+=e.VQ?0:r)),e.AA=t}1l t}UL(e,t,i){1a a=1g,n=(i.2C,i.ib),l=i.i7,r=i.b4,o=i.b8,s=i.i5,C=i.4e,A=[e.iX+e.BJ,e.iY+e.BC,e.I,e.F],Z=ZC.2l(e.AA%180),c=!1;Z%2m!=0&&(c=!0),c&&(A=[e.iX+e.BJ+e.I/2-e.F/2,e.iY+e.BC+e.F/2-e.I/2,e.F,e.I]);1a p=!0;if(e.AL){if(!a.n7)if("2Z"===a.C8||t!==a.X&&t!==a.A1){t%l==0&&(p=!0);1j(1a u=0,h=n.1f;u<h;u++)if(ZC.AO.YB({x:A[0],y:A[1],1s:A[2],1M:A[3]},{x:n[u][0],y:n[u][1],1s:n[u][2],1M:n[u][3]})){p=!1;1p}}1u p=!0;p&&(n.1h(A),e.1t(),0,o=ZC.BO(o,1.5*e.DF*(e.AP||"").2p("<br>").1f),"h"===s?(r+=e.F,o=ZC.BO(o,ZC.2l(ZC.EL(Z))*ZC.BO(e.I,e.F))):"w"===s&&(r+=e.I,o=ZC.BO(o,ZC.2l(ZC.EF(Z))*ZC.BO(e.I,e.F))),e.EB(),1c===ZC.1d(a.o.2H)&&e.KE||(1c!==ZC.1d(a.o.2H)&&(a.o.2H.1D=a.o.2H.1D||"%1z-1U"),C.1h(ZC.AN.OB(a.A.K,e))))}1l{b4:r,b8:o,Aj:!p}}TN(e,t){1a i=1g;if("v"===i.AF&&(i.H3!==i.B4&&i.H3!==i.BQ||(1c===ZC.1d(i.o["3Q-1y"])||1c!==ZC.1d(i.o["3Q-1y"])&&1c===ZC.1d(i.o["3Q-1y"].2h))&&(i.PB.AL=!1)),i.PB.K=i.K+"-3Q-1y",i.W.1f>0&&i.PB.AL&&!i.A.AJ["3d"]&&i.PB.AZ>0){"5q"===i.PB.o["1y-1r"]&&-1!==t&&(i.PB.B8=t);1a a=i.H3;if("k"===i.AF&&!i.D8||"v"===i.AF&&i.D8){1a n=i.AX(a);n>=i.iX&&n<=i.iX+i.I&&ZC.CN.1t(e,i.PB,[[n,i.iY],[n,i.iY+i.F]])}1u{1a l=i.AX(a);l>=i.iY&&l<=i.iY+i.F&&ZC.CN.1t(e,i.PB,[[i.iX,l],[i.iX+i.I,l]])}}}6D(){}VP(){1j(1a e=1g,t=0,i=e.QF.1f;t<i;t++)e.W.1f>0&&e.QF[t].1t()}gc(){ZC.AN.gc(1g,["W","BW","Z","C6","D4","BR","M","G2","IC","PB","IV","IY","o","I7","JW","A","H"])}}1O hQ 2k HA{2G(e){1E(e);1a t=1g;t.ED=!1,t.AF="k",t.E7=-1,t.EG=-1,t.X=-1,t.A1=-1,t.VH=1,t.DT=1c,t.OT=0,t.jk=!1,t.O2=!1,t.UO={},t.IU=[]}8y(e,t){1a i=1g;if(i.H7){1c!==ZC.1d(e)?i.X=e:i.X=i.E7,1c!==ZC.1d(t)?i.A1=t:i.A1=i.EG;1a a=i.IU;if(a.1f>0?(i.B4=ZC.AT(a,i.W[i.X]),i.BQ=ZC.AT(a,i.W[i.A1])):(i.B4=i.W[i.X],i.BQ=i.W[i.A1]),i.H.HB.C||(i.H.HB.C=i.A),i.A.HB&&1c!==ZC.1d(i.A.HB.o.6e)&&ZC.2t(i.A.HB.o.6e)&&i.A.K===i.H.HB.C.K)1j(1a n=0,l=i.H.AH.1f;n<l;n++){1a r=i.H.AH[n];if(r.K!==i.A.K&&1c!==ZC.1d(r.HB.o.6e)&&ZC.2t(r.HB.o.6e)){1a o=r.BK(i.BE);o&&o.H7&&(e=1A.1X(o.E7,1A.2j(o.EG,i.X)),t=1A.1X(o.E7,1A.2j(o.EG,i.A1)),o.8y(e,t),ZC.AK(r.K)&&(r.3k(!0),r.E["6e-3H"]=!0,r.1t(),r.BI&&r.BI.3S(e,t,1c,1c,!0)))}}i.GV()}}15v(e,t){1a i=1g;1c!==ZC.1d(e)?i.B4=e:i.B4=i.GX,1c!==ZC.1d(t)?i.BQ=t:i.BQ=i.HQ,i.Q4(i.B4,i.BQ,1c===ZC.1d(e)&&1c===ZC.1d(t))}FQ(L,J,EP,Ar){1a s=1g,CU="";J?(CU=J.S[L].BY,s.FG&&"5C"===s.FG.o.1J||"92"==1w CU||(1c!==ZC.1d(s.BW[CU])?CU=s.BW[CU]:1c!==ZC.1d(s.W[CU])&&(CU=s.W[CU]))):CU="2Z"===s.C8&&Ar?L+1:1c!==ZC.1d(s.BW[L])?s.BW[L]:s.W[L],"92"==1w CU&&1c!==ZC.1d(s.IU[CU])&&(CU=s.IU[CU]);1a P0=ZC.PI(CU)&&ZC.1Y(CU)<0,BG=s.LT();if(ZC.2E(EP,BG),P0&&"cJ"===BG.83&&(CU=ZC.2l(ZC.1Y(CU))),BG.cR=s.A.UT,BG.cN=s.A.NE,CU=ZC.AN.GH(CU,BG,s,!0),s.CF)if("()"===s.CF.2x(s.CF.1f-2)||"7y:"===s.CF.2x(0,11))4O{1a EH=s.CF.1F("7y:","").1F("()","");7u(EH)&&(CU=7u(EH).4x(s,CU))}4M(e){}1u CU=P0&&"cJ"===BG.83?"-"+s.CF.1F(/%v|%1z-1U/g,CU):s.CF.1F(/%v|%1z-1U/g,CU);1l CU}EW(e,t,i,a,n){1a l=1g,r=l.FQ(t,i,a,n),o=[];o.1h(["%1z-1H",r],["%1z-2Y",t],["%1z-2K",t]),l.FG&&"5C"===l.FG.o.1J?o.1h(["%1z-1U",r],["%v",r]):"2Z"===l.C8&&n?o.1h(["%1z-1U",1A.5d(l.EN,t)],["%v",1A.5d(l.EN,t)]):o.1h(["%1z-1U",ZC.7P(l.W[t],"")],["%v",ZC.7P(l.W[t],"")]),o.1h(["%l",r],["%t",r],["%i",t],["%c",t]),o.3X(ZC.mf);1j(1a s=0,C=o.1f;s<C;s++){1a A=1m 5n(o[s][0],"g");e=e.1F(A,o[s][1])}1l e}T6(){1a e=1g,t=ZC.BO(e.W.1f,e.BW.1f),i=0;if(t>0&&e.BR.AA%180==0){1j(1a a=ZC.BO(1,ZC.1k(t/20)),n=0,l=0;l<t;l+=a){1j(1a r=((e.BW[l]||e.W[l])+"").2p(/<br>|<br\\/>|<br \\/>|\\n/),o=0,s=0,C=r.1f;s<C;s++)o=ZC.BO(o,10*r[s].1F(/<.+?>/gi,"").1F(/<\\/.+?>/gi,"").1f);i+=o,n++}i=.75*i/1A.1X(1,n)}1u i=15;e.D8?e.EE=ZC.1k((e.F-e.A6-e.BV)/15):e.EE=ZC.1k((e.I-e.A6-e.BV)/i),e.EE=ZC.CV(e.EE,10),(e.BQ-e.B4)/e.E4+1<e.EE?e.EE=ZC.BO(e.EE,ZC.1k((e.BQ-e.B4)/e.E4)+1):(e.BQ-e.B4)/(2*e.E4)+1<e.EE&&(e.EE=ZC.BO(e.EE,ZC.1k((e.BQ-e.B4)/(2*e.E4))+1)),e.EE=ZC.BO(2,e.EE)}ZS(){1a e=1g;1c===ZC.1d(e.o["1X-9O"])&&(e.MA=e.EE)}H9(e){1a t,i,a,n,l,r=1g;if(1===e&&r.o.5J&&"5C"===r.o.5J.1J&&(1c===ZC.1d(r.o.5J.Bb)||ZC.2t(r.o.5J.Bb)||(r.O2=!0)),1===e&&1c!==ZC.1d(r.o[ZC.1b[5]]))if(r.W=[],"4d"==1w r.o[ZC.1b[5]])1j(r.W=r.o[ZC.1b[5]],0===r.BW.1f&&(r.BW=r.W),a=0,n=r.W.1f;a<n;a++)"3e"==1w r.W[a]&&(r.jk=!0,r.IU.1h(r.W[a]));1u{1a o=r.o[ZC.1b[5]].2p(":"),s=r.E4;if(3===o.1f&&(s=ZC.1Y(o[2])),r.E4=r.SQ=s,ZC.1Y(o[0])>ZC.1Y(o[1])){1a C=o[0];o[0]=o[1],o[1]=C}if(s<=0&&(s=1),o.1f>1){1j(1a A=0,Z=0,c=0,p=(""+s).2p("."),u=ZC.1Y(o[0]);u<=ZC.1Y(o[1]);u+=s){1a h=(""+u).2p(".");p.1f>1&&h.1f>1&&p[1].1f>0&&h[1].1f>=9&&ZC.2l(h[1].1f-p[1].1f)>2?(A+=p[1].1f,Z=ZC.BO(Z,p[1].1f),c++,1c!==(l=ZC.1d(r.o[ZC.1b[12]]))?r.W.1h(ZC.1Y(4Q(u).4C(ZC.1k(l)))):r.W.1h(ZC.1Y(ZC.bB(4Q(u),p[1].1f)))):(A+=h[1]?h[1].1f:0,Z=ZC.BO(Z,h[1]?h[1].1f:0),c++,1c!==(l=ZC.1d(r.o[ZC.1b[12]]))?r.W.1h(ZC.1Y(4Q(u).4C(ZC.1k(l)))):r.W.1h(u))}1c===ZC.1d(r.o[ZC.1b[12]])&&(A=1A.4j(A/c),r.DT=ZC.2l(Z-A)<=1?Z:A)}}if(2===e){1a 1b=0,d=[];0===r.W.1f?(t=ZC.3v,i=-ZC.3v):(t=r.W[0],i=r.W[r.W.1f-1]);1a f,g,B=r.A.AY.A7,v=!1;1j(a=0,n=B.1f;a<n;a++){1a E=B[a].BT();if(-1!==ZC.AT(E,r.BE)){1j(1a b=0===d.1f,m=0,K=B[a].S.1f;m<K;m++)if(B[a].S[m])if(1c!==B[a].S[m].BY){1a D=B[a].S[m].BY;t=ZC.CV(t,D),i=ZC.BO(i,D),r.O2&&b&&d.1h(D),r.ED=!0,B[a].ED=!0}1u v=!0;1u r.O2&&b&&d.1h("");B[a].ED||(1b=ZC.BO(1b,B[a].S.1f))}}if(1c!==ZC.1d(r.o[ZC.1b[5]]))1j(a=0;a<r.W.1f;a++)1c===r.W[a]&&(r.W[a]="");if(1c!==ZC.1d(r.o[ZC.1b[10]]))1j(a=0;a<r.BW.1f;a++)1c===r.BW[a]&&(r.BW[a]="");if(1b>r.W.1f&&r.W.1f>0&&!r.ED)1j(a=r.W.1f;a<1b;a++);1a F=0;1j(a=0;a<B.1f;a++)B[a].M1&&(-1===B[a].RE&&(B[a].RE=F),F++,r.DJ=!0);if(0===r.W.1f)1j(a=0;a<F;a++)r.W.1h(a),r.BW.1h(a);if(0===r.W.1f)if(r.ED)v&&t>0&&(t=0),v&&i<1b-1&&(i=1b-1),1c!==ZC.1d(r.o["2j-1U"])&&(t=ZC.1Y(r.o["2j-1U"])),1c!==ZC.1d(r.o["1X-1U"])&&(i=ZC.1Y(r.o["1X-1U"])),i-t<r.E4&&i-t>0&&(r.E4=1A.5d(10,1A.4h(ZC.HE(i-t)/1A.bj))),r.O2||r.Q4(t,i,!0),0===t&&0===i&&"0,1"===r.W.2M(",")&&(r.W=[0]);1u if(1c!==ZC.1d(r.o["1X-1U"])){f=0,g=0,1c!==ZC.1d(r.o["2j-1U"])&&(f=ZC.1Y(r.o["2j-1U"])),g=ZC.1Y(r.o["1X-1U"]),a=0;1a I=f;if(r.FG&&1c!==ZC.1d(r.FG.o.1J))1R(r.FG.o.1J){1i"5C":r.E4=r.XH(f,g)}1u g-f/r.E4>8i&&(r.E4=1A.5d(10,ZC.BO(1,ZC.1k(ZC.HE(ZC.2l(g-f),10)-4))));1j(;I<g;)I=r.A.NM(a*r.E4+f),1c===ZC.1d(r.W[a])&&(r.W[a]=I),a++}1u if(g=(f=1c!==ZC.1d(r.o["2j-1U"])?ZC.1Y(r.o["2j-1U"]):0)+(1b-1)*r.E4,"2Z"===r.C8)r.Q4(f,g,!0);1u 1j(a=0;a<1b;a++)1c===ZC.1d(r.W[a])&&(r.W[a]=r.A.NM(a*r.E4+f));r.O2&&r.ED&&(r.W=[].4z(d),r.BW=[].4z(d))}if(r.O2)1j(r.UO={},a=0,n=r.BW.1f;a<n;a++)r.UO[r.BW[a]]=a;if(r.X=0,r.A1=r.W.1f-1,r.E7=0,r.EG=r.W.1f-1,r.IU.1f>0?(r.B4=r.X,r.BQ=r.A1):(r.B4=ZC.1Y(r.W[r.X]),r.BQ=ZC.1Y(r.W[r.A1])),r.NY){-1===ZC.AT(r.W,r.NY[0])&&ZC.PI(r.NY[0])&&1c!==ZC.1d(r.W[0])&&-1!==r.SQ&&(r.NY[0]=r.W[0]+r.SQ*1A.4h((r.NY[0]-r.W[0])/r.SQ)),-1===ZC.AT(r.W,r.NY[1])&&ZC.PI(r.NY[1])&&1c!==ZC.1d(r.W[0])&&-1!==r.SQ&&(r.NY[1]=r.W[0]+r.SQ*1A.4j((r.NY[1]-r.W[0])/r.SQ));1a x=ZC.AT(r.W,r.NY[0]),X=ZC.AT(r.W,r.NY[1]);r.LZ=[-1===x?0:x,-1===X?r.W.1f-1:X]}r.LZ&&-1!==r.X&&-1!==r.A1&&((r.LZ[0]>r.A1||r.LZ[0]<r.X)&&(r.LZ[0]=r.X),(r.LZ[1]>r.A1||r.LZ[1]<r.X)&&(r.LZ[1]=r.A1));1a y=r.H.E["3a"+r.A.L+".3H"];if(1c===ZC.1d(r.H.E[ZC.1b[53]])||r.H.E[ZC.1b[53]]){1a Y=1===r.L?"":"-"+r.L;1w y!==ZC.1b[31]&&1c!==ZC.1d(y["4t"+Y])&&1c!==ZC.1d(y["4p"+Y])&&(r.LZ=[y["4t"+Y],y["4p"+Y]])}1u r.H.E["3a"+r.A.L+".3H"]={};r.LZ&&(r.A.iw=!0)}Q4(e,t,i){1a a,n,l,r,o=1g,s=!1,C=1c!==ZC.1d(o.o.7h)&&-1!==(""+o.o.7h).1L("eT");if(o.FG&&1c!==ZC.1d(o.FG.o.1J))1R(o.FG.o.1J){1i"5C":1a A=o.XH(e,t);(t-e)%A!=0&&(C||(t+=A-(t-e)%A)),a=[e,t,A,1,A],s=!0}1u if("2Z"===o.C8)a=[e,t,1,1,1];1u{1a Z=1c!==ZC.1d(o.o.7h)||1c!==ZC.1d(o.o["2j-1U"])||1c!==ZC.1d(o.o["1X-1U"]);a=e!==t?ZC.AO.WT(e,t,o.E4,o.P9,Z):[e,t,o.E4,1,o.E4]}-1===o.SQ&&(o.SQ=a[4]);1a c=a[0],p=a[1];r=a[2],i&&"2Z"===o.C8&&(c=1A.4h(ZC.HE(c,o.EN)),p=1A.4j(ZC.HE(p,o.EN))),1c===ZC.1d(o.o.7h)&&(p-c)/r>8i&&(r=(p-c)/8i,l=1A.4j(ZC.HE(r)/1A.bj),r=1A.5d(10,l)),1c===ZC.1d(o.o["2j-1U"])&&c!==p&&(s&&C||(c-=c%r)),1c===ZC.1d(o.o["1X-1U"])&&c!==p&&(s&&C||(p=p-p%r+(p%r==0?0:r))),l=1A.4h(ZC.HE(r)/1A.bj);1a u,h=a[3];if(l<h&&l<0&&(h=l),"2Z"===o.C8&&(h=ZC.BO(1,h)),o.W=[],s&&C){1a 1b=ZC.AN.YP(c,"%Y-%n-%d-%H-%i-%s",!1,0).2p("-"),d=!0,f=ZC.1k((""+o.o.7h).1F("eT"));0===f&&(f=1);1a g=ZC.1k(1b[1]),B=ZC.1k(1b[0]);1j(o.W.1h(c);d&&c!==p;){d=!1;1a v=ZC.1k(1b[2]);g+f>=12&&B++,g=(g+f)%12,(31===v&&(3===g||5===g||8===g||10===g)||v>28&&1===g)&&(v=1===g?B%4==0&&B%100!=0||B%ow==0?29:28:30);1a E=1m a2(B,g,v,1b[3],1b[4],1b[5]).bH();o.W.1h(E),E<p&&E<=t&&(d=!0)}}1u if(i){o.GX=e,o.HQ=t,o.VH=ZC.1k((p-c)/r);1a b=(""+r).2p("."),m=1m 5P(b[1]||"0").1f;1j(n=c;n<=p;n+=r){1a K,D;u=n;1a F=o.DT;if("2Z"===o.C8)1j(1a I=!0;I;)I=!1,D=K=1A.5d(o.EN,u),K=ZC.1Y(ZC.bB(K,F)),D<1&&D!==K&&ZC.BO(D,K)/ZC.CV(D,K)>1.nR&&(I=!0,++F>ZC.CV(20,-1===o.I3?99:o.I3)&&(I=!1));1u K=1c!==F?ZC.1Y(ZC.bB(u,1A.1X(F,m))):ZC.1Y(ZC.bB(u,m));o.W.1h(K)}}1u 1j(r=ZC.1Y((t-e)/o.VH),n=0;n<=o.VH;n++)u=e+r*n,h<0&&(u=ZC.1Y(u.4C(-h))),o.W.1h(u);o.X=0,o.A1=o.W.1f-1,o.E7=0,o.EG=o.W.1f-1,o.B4=ZC.1Y(o.W[o.X]),o.BQ=ZC.1Y(o.W[o.A1])}XH(e,t,i){1w i===ZC.1b[31]&&(i=!1);1a a=t-e,n=1A.4h(ZC.HE(a)/1A.bj);1l 1c===ZC.1d(1g.o.7h)||i?n<=3?1:4===n?5L:5===n?8i:6===n?16q:7===n?176:8===n?Az:9===n?17n:10===n?17l:11===n?17k:mR:1g.E4}1q(){1E.1q()}3k(){1E.3k()}5N(){1E.5N()}1t(){1E.1t(),1c!==ZC.1d(1g.o[ZC.1b[5]])&&(1g.TM=!0)}}1O ZU 2k HA{2G(e){1E(e);1a t=1g;t.AF="v",t.X=-1,t.A1=-1,t.VH=0,t.DT=1c,t.KT="5h",t.JN=[]}8y(e,t){1a i,a,n=1g;if(n.H7){1c!==ZC.1d(e)?n.B4=e:n.B4=n.GX,1c!==ZC.1d(t)?n.BQ=t:n.BQ=n.HQ,("5S"===n.A.AF||n.Q8)&&(n.B4=ZC.1k(n.B4),n.BQ=ZC.1k(n.BQ)),n.Q4(n.B4,n.BQ,!1);1a l=n.A.BT("v");1j(i=0;i<l.1f;i++)l[i].BE!==n.BE&&l[i].dL===n.BE&&l[i].8y(e,t);if(""===n.dL){if(n.H.HB.C||(n.H.HB.C=n.A),n.A.HB&&1c!==ZC.1d(n.A.HB.o.6e)&&ZC.2t(n.A.HB.o.6e)&&n.A.K===n.H.HB.C.K)1j(i=0,a=n.H.AH.1f;i<a;i++){1a r=n.H.AH[i];if(r.K!==n.A.K&&1c!==ZC.1d(r.HB.o.6e)&&ZC.2t(r.HB.o.6e)){1a o=r.BK(n.BE);o&&o.H7&&(e=1A.1X(o.GX,1A.2j(o.HQ,n.B4)),t=1A.1X(o.GX,1A.2j(o.HQ,n.BQ)),o.8y(e,t),ZC.AK(r.K)&&(r.3k(!0),r.E["6e-3H"]=!0,r.1t(),r.BI&&r.BI.3S(1c,1c,e,t,!0)))}}n.GV()}}}FQ(L,CU,EP){1a s=1g;1w CU===ZC.1b[31]&&(CU="",CU=1c!==ZC.1d(s.BW[L])?s.BW[L]:s.W[L]),"92"==1w CU&&1c!==ZC.1d(s.JN[CU])&&(CU=s.JN[CU]);1a P0=ZC.PI(CU)&&ZC.1Y(CU)<0,BG=s.LT();if(ZC.2E(EP,BG),1c!==ZC.1d(s.E["1X-cO"])&&(BG["1X-cO"]=s.E["1X-cO"]),P0&&"cJ"===BG.83&&(CU=ZC.2l(ZC.1Y(CU))),BG.cR=s.A.UT,BG.cN=s.A.NE,CU=ZC.AN.GH(CU,BG,s,!0),s.CF)if("()"===s.CF.2x(s.CF.1f-2)||"7y:"===s.CF.2x(0,11))4O{1a EH=s.CF.1F("7y:","").1F("()","");7u(EH)&&(CU=7u(EH).4x(s,CU))}4M(e){}1u CU=P0&&"cJ"===BG.83?"-"+s.CF.1F(/%v|%1z-1U/g,CU):s.CF.1F(/%v|%1z-1U/g,CU);1l CU}T6(){1a e=1g,t=ZC.BO(e.W.1f,e.BW.1f);if(0===t&&(t=10),"2Z"===e.C8)e.EE=4L;1u{1a i=1A.1X(15,10*ZC.BO(e.W.2M("").1f,e.BW.2M("").1f)/t);e.D8?e.EE=ZC.1k((e.I-e.A6-e.BV)/i):e.EE=ZC.1k((e.F-e.A6-e.BV)/10),e.EE=ZC.CV(e.EE,10),e.EE=ZC.BO(2,e.EE)}}ZS(){1a e=1g;1c===ZC.1d(e.o["1X-9O"])&&(e.MA=e.EE)}H9(e){1a t,i,a,n,l,r,o,s=1g;if(""!==s.dL&&2===e){1a C=s.A.BK(s.dL);if(C)1l s.B4=C.B4,s.GX=C.GX,s.BQ=C.BQ,s.HQ=C.HQ,s.E4=C.E4,s.SQ=C.SQ,s.X=C.X,s.A1=C.A1,s.E7=C.E7,s.EG=C.EG,s.W=[].4z(C.W),8m(s.BW=[].4z(C.BW))}1===e&&1c===ZC.1d(s.o[ZC.1b[5]])&&1c!==ZC.1d(t=s.A.UM("v"))&&(s.o[ZC.1b[5]]=t);1a A,Z=0,c=s.JN;if(1===e&&1c!==ZC.1d(s.o[ZC.1b[5]])){if(s.W=[],"4d"==1w s.o[ZC.1b[5]]){1a p=s.o[ZC.1b[5]],u=ZC.YH(p),h=ZC.dG(p),1b=!0;1j(i=0,a=p.1f-2;i<a;i++)if("92"==1w p[i+2]&&"92"==1w p[i+1]&&"92"==1w p[i]&&ZC.1Y(p[i+2])-ZC.1Y(p[i+1])!=ZC.1Y(p[i+1])-ZC.1Y(p[i])){1b=!1;1p}if(!1b&&(s.o[ZC.1b[5]]=u+":"+h,!s.M3))1j(s.M3=[],i=0,a=p.1f;i<a;i++)s.M3.1h(""+p[i])}if("4d"==1w s.o[ZC.1b[5]]){1j(ZC.sy(s.o[ZC.1b[5]],s.W),0===s.BW.1f&&ZC.sy(s.BW,s.W),i=0,a=s.W.1f;i<a;i++)if("3e"==1w s.W[i]){1a d=s.W[i],f=ZC.AT(c,s.W[i]);-1===f?(c.1h(s.W[i]),s.W[i]=c.1f-1):s.W[i]=f,1c===ZC.1d(s.BW[i])&&(s.BW[i]=d)}}1u{1a g=s.o[ZC.1b[5]].2p(":");if(o=1,3===g.1f&&(o=ZC.1Y(g[2])),ZC.1Y(g[0])>ZC.1Y(g[1])){1a B=g[0];g[0]=g[1],g[1]=B}if(o<=0&&(o=1),1c!==ZC.1d(s.o["7A-2C"])&&(o=(ZC.1Y(g[1])-ZC.1Y(g[0]))/ZC.BO(1,ZC.1k(s.o["7A-2C"])-1),s.VH=ZC.BO(1,ZC.1k(s.o["7A-2C"])-1)),g.1f>1){1j(1a v=0,E=0,b=0,m=(""+o).2p("."),K=ZC.1Y(g[0]);K<=ZC.1Y(g[1]);K+=o)n=(""+K).2p("."),m.1f>1&&n.1f>1&&m[1].1f>0&&n[1].1f>=9&&ZC.2l(n[1].1f-m[1].1f)>2?(v+=m[1].1f,E=ZC.BO(E,m[1].1f),b++,s.W.1h(ZC.1Y(ZC.bB(4Q(K),m[1].1f)))):(v+=ZC.1k(n[1]?n[1].1f:0),E=ZC.BO(E,n[1]?n[1].1f:0),b++,s.W.1h(K));K-ZC.1Y(g[1])!=0&&ZC.2l(K-ZC.1Y(g[1]))/o<1e-8&&s.W.1h(ZC.1Y(g[1])),1c===ZC.1d(s.o[ZC.1b[12]])&&(v=(n=(""+o).2p("."))[1]?n[1].1f:1A.4j(v/b),s.DT=ZC.2l(E-v)<=1?E:v)}}s.X=0,s.A1=s.W.1f-1,s.E4=o,c.1f>1?(Z=ZC.YH(s.W,!0),s.B4=ZC.YH(s.W),s.BQ=ZC.dG(s.W)):(s.B4=s.W[0],s.BQ=s.W[s.W.1f-1]),"2Z"===s.C8&&(0===s.B4&&(A=1A.4h(ZC.HE(Z,s.EN)),s.B4=1A.5d(s.EN,1A.2j(-1,A))),s.Q4(ZC.HE(s.B4,s.EN),ZC.HE(s.BQ,s.EN),!1))}if(2===e){1a D={};1c===ZC.1d(s.o[ZC.1b[5]])&&(s.W=[],l=ZC.3v,r=-ZC.3v);1a F=[],I=s.A.AY.A7;1j(i=0,a=I.1f;i<a;i++)if(s.A.E["1B"+i+".2h"]||"5e"===s.A.8f()){1a x=I[i].BT();if(-1!==ZC.AT(x,s.BE))1j(1a X=-1!==ZC.AT(["5x","6b","6T","7o"],I[i].AF),y=[],Y=0,L=I[i].W.1f;Y<L;Y++)if(I[i].S[Y]){1a w=1c===I[i].S[Y].BY?Y:I[i].S[Y].BY;if(I[i].C9&&-1!==ZC.AT(y,w))d9;y.1h(w);1a M=I[i].M4&&1c!==ZC.1d(I[i].M4[Y])?ZC.1Y(I[i].M4[Y]):0;if(I[i].C9)1c===ZC.1d(D[I[i].DV])&&(D[I[i].DV]=[]),1c===ZC.1d(D[I[i].DV][w])?I[i].S[Y].AE>=0||!X?D[I[i].DV][w]=[I[i].S[Y].AE,0]:D[I[i].DV][w]=[0,I[i].S[Y].AE]:I[i].S[Y].AE>=0||!X?D[I[i].DV][w][0]+=I[i].S[Y].AE:D[I[i].DV][w][1]+=I[i].S[Y].AE,I[i].S[Y].AE>=0||!X?I[i].S[Y].CM=D[I[i].DV][w][0]:I[i].S[Y].CM=D[I[i].DV][w][1],1c===ZC.1d(s.o[ZC.1b[5]])&&F.1h(D[I[i].DV][w][0]+M,D[I[i].DV][w][1]+M);1u if(1c===ZC.1d(s.o[ZC.1b[5]])){F.1h(I[i].S[Y].AE+M),0!==M&&F.1h(M);1j(1a H=0,N=I[i].S[Y].DK.1f;H<N;H++)F.1h(I[i].S[Y].DK[H]+M)}}}F.1f>0&&(Z=ZC.YH(F,!0),l=ZC.YH(F),r=ZC.dG(F)),0!==s.W.1f||l!==4Q.ir&&r!==4Q.17b||(s.W=[0,1],l=0,r=1),1c===ZC.1d(s.o[ZC.1b[5]])&&(1c!==ZC.1d(s.o["2j-1U"])&&"3i"!==s.o["2j-1U"]?l=ZC.1Y(s.o["2j-1U"]):l>0&&"3i"!==s.o["2j-1U"]&&"2Z"!==s.C8&&(l=0),1c!==ZC.1d(s.o["1X-1U"])&&(r=ZC.1Y(s.o["1X-1U"])),l===ZC.3v&&r===-ZC.3v?(s.X=0,s.A1=0,s.B4=0,s.BQ=0):"2Z"===s.C8?(0===l&&(A=1A.4h(ZC.HE(Z,s.EN)),l=1A.5d(s.EN,1A.2j(-1,A))),s.Q4(ZC.HE(l,s.EN),ZC.HE(r,s.EN),!1)):s.Q4(l,r,!0))}2===e&&(-1===s.GX&&-1===s.HQ&&(s.GX=s.B4,s.HQ=s.BQ),-1===s.SQ&&(s.SQ=s.E4)),"3i"===s.o["2j-1U"]&&1c===ZC.1d(s.o["3Q-1U"])&&(s.H3=s.B4),0===s.VH&&(s.VH=ZC.1k((s.BQ-s.B4)/s.E4));1a O=s.H.E["3a"+s.A.L+".3H"];if(1c===ZC.1d(s.H.E[ZC.1b[53]])||s.H.E[ZC.1b[53]]){1a S=1===s.L?"":"-"+s.L;2===e&&1w O!==ZC.1b[31]&&1c!==ZC.1d(O["5r"+S])&&1c!==ZC.1d(O["5s"+S])&&(ZC.DQ(O["5r"+S],s.B4,s.BQ)||(O["5r"+S]=s.B4),ZC.DQ(O["5s"+S],s.B4,s.BQ)||(O["5s"+S]=s.BQ),s.LZ=[O["5r"+S],O["5s"+S]])}1u s.H.E["3a"+s.A.L+".3H"]={};s.LZ&&(s.A.iw=!0)}Q4(e,t,i){1a a,n,l,r,o=1g;"5S"!==o.A.AF&&!o.Q8&&o.JN.1f>1&&(e=0),o.TY.1f&&1c===ZC.1d(o.o["1z-7f"])&&(l=1A.4h(ZC.HE(ZC.2l(t),ZC.1Y(o.TY[0]))),o.P9=1A.5d(ZC.1Y(o.TY[0]),l)/1A.5d(5L,l),o.E["1X-cO"]=l);1a s=(r=o.FG&&"5C"===o.FG.o.1J?ZC.AO.WT(e,t,"mx"===o.C8?o.E4:1c,o.P9,o.hZ,o.EE):ZC.AO.WT(e,t,"mx"===o.C8?o.o.7h:1c,o.P9,o.hZ,o.EE))[0],C=r[1],A=!1;n=1A.4h(r[0]),"2Z"===o.C8&&(l=1A.4j(r[1]),r[1]-r[0]>=.5?A=!0:r=ZC.AO.WT(1A.5d(o.EN,r[0]),1A.5d(o.EN,r[1]),1c,o.P9,o.hZ));1a Z,c,p=r[0],u=r[1],h=r[2];1c!==ZC.1d(o.o["7A-2C"])&&(h=(u-p)/ZC.BO(1,ZC.1k(o.o["7A-2C"])-1)),o.Q8&&t===e&&(t+h<=o.BQ?t+=h:e-=h),1!==o.R8&&(p*=o.R8,u*=o.R8,h*=o.R8),1c!==ZC.1d(o.E["o-6p"])?o.DT=o.E["o-6p"]:o.E["o-6p"]=o.DT,1c===ZC.1d(o.o[ZC.1b[12]])&&("2Z"===o.C8&&A?o.DT=n<0?1c:0:n<0?o.DT=r[3]:o.dw||(o.DT=0));1a 1b,d,f,g=!0;if(A){1a B,v;n=1A.4h(p),l=1A.4j(u),1b=1A.5d(o.EN,e),d=1A.5d(o.EN,t),o.W=[];1a E=[0,2,5];1j(v=[0,1,2,3,4,5,6,7,8,9,10],a=n;a<=l;a++){1a b=r[3];if(b=a<0?1A.1X(ZC.2l(a),b):0,a===l)1j(B=0;B<E.1f;B++)f=1A.5d(o.EN,a)+E[B]*1A.5d(o.EN,a-1),f=ZC.1Y(f.4C(b)),-1===ZC.AT(o.W,f)&&o.W.1h(f);1j(B=0;B<v.1f;B++)f=v[B]*1A.5d(o.EN,a),f=ZC.1Y(f.4C(b)),-1===ZC.AT(o.W,f)&&o.W.1h(f)}o.W.3X(1n(e,t){1l e-t});1j(1a m=-1,K=-1,D=0;D<o.W.1f-1;D++)o.W[D]<=1b&&1b<=o.W[D+1]&&(m=D),o.W[D]===d?K=D:o.W[D]<=d&&d<=o.W[D+1]&&(K=D+1);o.W=o.W.7p(m,K+1),0===o.W[0]&&o.W.17z(),s=ZC.HE(o.W[0],o.EN),C=ZC.HE(o.W[o.W.1f-1],o.EN)}1u{1j("2Z"===o.C8&&(1b=1A.5d(o.EN,e),d=1A.5d(o.EN,t));g;){g=!1,o.W=[],Z=c=p;do{c=Z,c=ZC.1Y(c.4C(o.DT)),-1!==ZC.AT(o.W,c)&&(g=!0),"2Z"===o.C8?c>=p&&c<=u&&o.W.1h(c):o.W.1h(c),Z+=h,Z=ZC.1Y(Z.4C(r[3]))}17r(Z<=u);g&&(o.DT+=1)}"2Z"===o.C8&&(s=ZC.HE(p,o.EN),C=ZC.HE(u,o.EN),o.W.1h(p),o.W.1h(u),o.W.3X(1n(e,t){1l e-t}))}o.E4=h,o.X=0,o.A1=o.W.1f-1,i?(o.B4=s,o.BQ=C):(o.B4=e,o.BQ=t)}1q(){1a e=1g;e.4A([["7H-1J","KT"]]),(e.A.C9&&"100%"===e.A.KT||"100%"===e.KT)&&1c===ZC.1d(e.o[ZC.1b[5]])&&(e.o[ZC.1b[5]]="0:100:20",e.o.5F="%v%"),1E.1q()}3k(){1E.3k()}5N(){1E.5N()}1t(){1E.1t(),1c===ZC.1d(1g.E[ZC.1b[12]])&&(1g.E[ZC.1b[12]]=1c!==ZC.1d(1g.DT)?1g.DT:-1),1c!==ZC.1d(1g.o[ZC.1b[5]])&&(1g.TM=!0)}}1O TF 2k hQ{2G(e){1E(e)}1q(){1E.1q()}GV(){1a e=1g;e.A1===e.X?e.A9=e.I-e.A6-e.BV:e.A9=(e.I-e.A6-e.BV)/(e.A1-e.X+(e.DJ?1:0))}H9(e){1E.H9(e),1g.GV()}8y(e,t){1E.8y(e,t);1g.GV()}3k(){}5N(){1E.5N()}KW(e){1a t,i=1g;1l t=i.AR?(i.iX+i.I-i.A6-e)/(i.I-i.A6-i.BV):(e-i.iX-i.A6)/(i.I-i.A6-i.BV),i.B4+ZC.1Y((i.BQ-i.B4)*t)}MS(e,t,i){1a a,n,l,r=1g;1w i===ZC.1b[31]&&(i=!1);1a o=r.DJ?r.A9:0;l=r.AR?(r.iX+r.I-e-r.A6-o/2)/(r.I-r.A6-r.BV-o):(e-r.iX-r.A6-o/2)/(r.I-r.A6-r.BV-o);1a s,C=!1;if(t)1j(s in t.K9){C=!0;1p}if(t&&!r.O2&&C){1a A=r.W[r.X];"3e"==1w A&&(A=ZC.AT(r.IU,A)),"2Z"===r.C8&&(A=ZC.HE(A,r.EN));1a Z=r.W[r.A1];"3e"==1w Z&&(Z=ZC.AT(r.IU,Z)),"2Z"===r.C8&&(Z=ZC.HE(Z,r.EN));1a c=A+ZC.1Y((Z-A)*l);"2Z"===r.C8&&(c=1A.5d(r.EN,c));1a p=ZC.3v;1j(s in n=1c,t.K9)(a=1A.3l(s-c))<p&&(p=a,n=t.K9[s]);if(1c===ZC.1d(n)&&(n=c),p>t.j3){1a u=1A.4j((Z-A)/(r.I-r.A6-r.BV));if(t.W.1f<2&&(u*=100),p>u)1l 1c}1l n}1a h=r.X,1b=r.A1;1l r.ED&&(1c!==ZC.1d(a=r.W[h])&&(h=a),1c!==ZC.1d(a=r.W[1b])&&(1b=a)),"2Z"===r.C8&&(h=ZC.HE(h,r.EN),1b=ZC.HE(1b,r.EN)),n=i?r.DJ?h+(1b-h+1)*l:h+(1b-h)*l:r.DJ?r.X+(r.A1-r.X+1)*l:r.X+(r.A1-r.X)*l,"2Z"===r.C8?(n=1A.5d(r.EN,n),n=1A.4h(n)-1):(n=r.DJ?1A.4h(n):ZC.1k(n),n=ZC.BO(0,n),n=ZC.CV(r.EG,n)),n}H1(e){1a t=1g;t.X,t.A1;1l t.ED&&!t.O2&&(t.B4,t.BQ),"2Z"===t.C8&&(e=ZC.HE(e+1,t.EN)),t.AR?t.iX+t.I-t.A6-(e-t.X+(t.DJ?1:0))*t.A9+(t.DJ?t.A9/2:0):t.iX+t.A6+(e-t.X)*t.A9+(t.DJ?t.A9/2:0)}AX(e){1a t,i,a,n,l,r=1g;if("2Z"===r.C8&&(e=ZC.HE(e,r.EN)),r.O2){1a o=r.UO[e];1l r.H1(o)}1l-1!==(t=ZC.AT(r.IU,e))?r.H1(t):!r.jk&&(r.ED||r.FG&&"5C"===r.FG.o.1J)?(n=r.W[r.X],l=r.W[r.A1],"2Z"===r.C8&&(n=ZC.HE(n,r.EN),l=ZC.HE(l,r.EN)),l===n?i=0:(a=l-n,i=(r.I-r.A6-r.BV-(r.DJ?r.A9:0))/a),r.AR?r.iX+r.I-r.A6-(e-n)*i-(r.DJ?r.A9/2:0):r.iX+r.A6+(e-n)*i+(r.DJ?r.A9/2:0)):(n=r.B4,l=r.BQ,"2Z"===r.C8&&(n=ZC.HE(n,r.EN),l=ZC.HE(l,r.EN)),l===n?i=0:(a=l-n+(r.DJ?1:0),i=(r.I-r.A6-r.BV)/a),r.AR?r.iX+r.I-r.A6-(e-n)*i-(r.DJ?r.A9/2:0):r.iX+r.A6+(e-n)*i+(r.DJ?r.A9/2:0))}1t(){1a e,t,i,a,n,l,r,o,s,C,A,Z,c,p,u,h,1b,d=1g;1E.1t(),1c!==ZC.1d(d.A.A.E[d.BE+"-bG-2b-4c"])&&(d.A6=d.A.A.E[d.BE+"-bG-2b-4c"]),"5i"!==d.A.AF&&"6y"!==d.A.AF||(-1===d.A6&&-1===d.BV||1===d.W.1f)&&(d.A6=d.BV=d.I/(d.W.1f+1),d.GV());1a f=d.Y1(),g=0,B=1,v=1,E={};1j(t=0,i=d.A.BL.1f;t<i;t++)d.A.BL[t].BE.2x(0,7)===ZC.1b[50]&&d.A.BL[t].B7===d.B7&&g++,d.A.BL[t].BE.2x(0,7)===ZC.1b[50]&&("2q"===d.A.BL[t].B7?(E[d.A.BL[t].BE]=B,B++):(E[d.A.BL[t].BE]=v,v++));1a b=E[d.BE],m="2q"===d.B7,K=1c,D=1c;1j(t=0,i=d.A.AY.A7.1f;t<i;t++){1a F=d.A.AY.A7[t],I=F.BT();if(-1!==ZC.AT(I,d.BE)){1a x=d.A.BK(F.BT("v")[0]);K=x.AX(x.H3),D=F;1p}}1a X=8;1c!==ZC.1d(d.IV.o[ZC.1b[21]])&&(X=ZC.1k(d.IV.o[ZC.1b[21]]));1a y=4;1c!==ZC.1d(d.IC.o[ZC.1b[21]])&&(y=ZC.1k(d.IC.o[ZC.1b[21]]));1a Y=ZC.1k(d.A.E[d.BE+"-6N"]||-1);d.VW&&(Y=0),"2q"===d.B7?(C=ZC.1k(d.A.Q.DM/g),n=d.iY+d.F+(b-1)*C,-1!==Y&&(n=d.iY+d.F+Y)):(C=ZC.1k(d.A.Q.E2/g),n=d.iY-(b-1)*C,-1!==Y&&(n=d.iY-Y));1a L=n;if(d.A.IG&&(d.A.IG.AL=!0,d.E7===d.X&&d.EG===d.A1&&(d.A.IG.AL=!1),d.A.IG.AL&&0===d.A.IG.B0.BC&&"2q"===d.B7&&(n+=d.A.IG.B0.F+d.AZ/2)),d.E.iY=n,d.AL&&d.TM){1c!==ZC.1d(d.o["7A-2C"])&&(d.MA=d.EE=ZC.1k(d.o["7A-2C"]));1a w=ZC.BO(1,1A.4j((d.A1-d.X)/(d.MA-1))),M=ZC.BO(1,1A.4j((d.A1-d.X)/(d.EE-1)));1c===ZC.1d(d.o["7A-2C"])&&ZC.2t(d.o.iN)&&(w=ZC.AO.iM(w),M=ZC.AO.iM(M));1a H,N,O,S=0,P=d.A9*w/(d.GU+1),G=d.AR?d.iX+d.BV:d.iX+d.A6,T=d.AR?d.iX+d.I-d.A6:d.iX+d.I-d.BV;if(1c===ZC.1d(K)&&(K=n),l=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-ml-0-c"),o=ZC.P.E6(l,d.H.AB),r=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-bl-0-c"),s=ZC.P.E6(r,d.H.AB),"5q"===d.o["1y-1r"]&&-1!==f&&(d.B8=f),d.A.AJ["3d"]){if((u=ZC.DE.D9(d,d.A,d.iX-ZC.AM.DZ,d.iX-ZC.AM.DZ+d.I,n-ZC.AM.E0,n-ZC.AM.E0,-1,ZC.AM.FS+1,"x")).K=d.K+"-1y",d.A.EX.7G&&(d.A.EX[ZC.1b[27]]>0?u.MI=[1===d.L?-100:100,1,1]:u.MI=[1===d.L?100:-100,1,1]),d.A.CG.2Q(u),1c!==ZC.1d(d.o.cg)){1a k=1m CY(d);k.1C(d.o.cg),k.1q(),k.A0=k.AC=k.B8,(u=ZC.DE.D9(k,d.A,d.iX-ZC.AM.DZ,d.iX-ZC.AM.DZ+d.I,n-ZC.AM.E0,n-ZC.AM.E0,-k.AZ/2,k.AZ/2,"x")).K=d.K+"-cg",d.A.CG.2Q(u)}}1u{A=[[d.iX-1,L],[d.iX+d.I+1,L]];1a J=d.K;d.K+="-1y",ZC.CN.1t(o,d,A),d.K=J}if(d.W.1f>0&&d.D4.AL){1a z=1c===ZC.1d(d.D4.o["2b-4c"])?0:ZC.1k(d.D4.o["2b-4c"]),R=1c===ZC.1d(d.D4.o["2b-6i"])?0:ZC.1k(d.D4.o["2b-6i"]);if(d.D4.o.2C&&d.D4.o.2C.1f>0&&!d.A.AJ["3d"])1j(h=1m I4(d),t=d.X;t<d.A1+(d.DJ?1:0);t++)Z=t-d.X,1b=t%d.D4.o.2C.1f,h.1C(d.D4.o.2C[1b]),h.K=d.K+"-2i-"+t,h.Z=r,h.1q(),d.AR?h.iX=d.iX+d.I-d.A6-Z*d.A9-d.A9:h.iX=d.iX+d.A6+Z*d.A9,h.iY=d.iY+z,h.I=d.A9,h.F=d.F-z-R,h.1t();if(d.D4.AZ>0)1j(d.GS=0,t=d.X;t<=d.A1+(d.DJ?1:0);t++)if(d.K8=t,t===d.X||t===d.A1+(d.DJ?1:0)||(t-d.X)%w==0){(d.D4.E3.1f>0||t===d.X)&&((p=1m CY(d)).Z=p.C6=r,p.1S(d.D4),p.IY=Ee,p.DB()&&p.1q()),A=[],Z=t-d.X,c=d.AR?d.iX+d.I-d.A6-Z*d.A9:d.iX+d.A6+Z*d.A9;1a Q=d.iY+z,W=d.F-z-R;if(p.AL)if(d.A.AJ["3d"]){1a V=1m CY(d);V.1S(p),1c!==ZC.1d(d.o["1z-z"])&&1c!==ZC.1d(e=d.o["1z-z"].2i)&&(V.1C(e),V.1q()),V.A0=V.AC=V.B8,u=ZC.DE.D9(V,d.A,c-ZC.AM.DZ-V.AZ/2,c-ZC.AM.DZ+V.AZ/2,n-ZC.AM.E0,n-ZC.AM.E0,0,ZC.AM.FS,"z"),d.A.CG.2Q(u),p.A0=p.AC=p.B8,(u=ZC.DE.D9(p,d.A,c-ZC.AM.DZ-p.AZ/2,c-ZC.AM.DZ+p.AZ/2,Q-ZC.AM.E0,Q+W-ZC.AM.E0,ZC.AM.FS+2,ZC.AM.FS+2,"y")).K=d.K+"-2i-"+t,d.A.CG.2Q(u)}1u A.1h([c,Q],[c,Q+W]),p.K=d.K+"-2i-"+t,ZC.CN.1t(s,p,A);d.GS++}}if(d.W.1f>0&&d.G2.AL&&!d.A.AJ["3d"]&&d.G2.o.2C&&d.G2.o.2C.1f>0)1j(h=1m I4(d),t=d.X;t<d.A1+(d.DJ?1:0);t++)1j(d.K8=t,Z=t-d.X,d.GS=0,a=1;a<=d.GU;a++)1b=d.GS%d.G2.o.2C.1f,h.1C(d.G2.o.2C[1b]),h.K=d.K+"-2i-"+t+"-"+a,h.Z=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-bl-0-c"),h.1q(),d.AR?h.iX=d.iX+d.I-d.A6-Z*d.A9-(a+1)*P:h.iX=d.iX+d.A6+Z*d.A9+a*P,h.iY=d.iY,h.I=P,h.F=d.F,h.1t(),d.GS++;if(d.G2.AZ>0)1j(t=d.X;t<d.A1+(d.DJ?1:0);t++)if(d.K8=t,t%w==0)1j(Z=t-d.X,d.GS=0,a=1;a<=d.GU;a++)A=[],(p=1m CY(d)).1S(d.G2),p.IY=Ee,p.DB()&&p.1q(),c="2Z"===d.C8?d.AX(d.W[t]+a*(d.W[t+1]-d.W[t])/(d.GU+1)):d.AR?d.iX+d.I-d.A6-Z*d.A9-a*P:d.iX+d.A6+Z*d.A9+a*P,ZC.DQ(c,G,T)&&(A.1h([c,d.iY],[c,d.iY+d.F]),p.AL&&(p.K=d.K+"-4U-2i-"+a,ZC.CN.1t(s,p,A))),d.GS++;if(d.TN(s,f),d.W.1f>0&&d.IV.AL){1R(d.IV.o[ZC.1b[7]]){1i"5W":1p;1i"6Z":S+=X;1p;2q:S+=X/2}if(!1o.3I.rm||!d.FG||"5C"!==d.FG.o.1J)1j(d.GS=0,t=d.X;t<=d.A1+(d.DJ?1:0);t++)if(t===d.X||t===d.A1+(d.DJ?1:0)||(t-d.X)%w==0){d.K8=t;1a U=X;1R(A=[],Z=t-d.X,(d.IV.E3.1f>0||t===d.X)&&((p=1m DS(d)).1S(d.IV),"5q"===d.IV.o["1y-1r"]&&-1!==f&&(p.B8=f),p.IY=Ee,p.DB()&&p.1q(),p.AI>1&&(U=p.AI)),c=d.AR?d.iX+d.I-d.A6-Z*d.A9:d.iX+d.A6+Z*d.A9,p.o[ZC.1b[7]]){1i"3Q-3i":A.1h([c,K+U/2],[c,K-U/2]);1p;1i"3Q-1v":A.1h([c,K-U],[c,K]);1p;1i"3Q-2c":A.1h([c,K+U],[c,K]);1p;1i"5W":A.1h([c,n-(m?U:-U)],[c,n]);1p;1i"6Z":A.1h([c,n],[c,n+(m?U:-U)]);1p;2q:A.1h([c,n+U/2],[c,n-U/2])}if(p.AL){1j(N=ZC.1k(p.o["2b-x"]||"0"),O=ZC.1k(p.o["2b-y"]||"0"),H=0;H<A.1f;H++)A[H][0]+=N,A[H][1]+=O;if(p.K=d.K+"-43-"+t,d.A.AJ["3d"]&&d.A.EX.7G){1a j,q=[];1j(H=0;H<A.1f;H++)j=1m CB(d.A,A[H][0]-ZC.AM.DZ,A[H][1]-ZC.AM.E0,0),q.1h([j.E9[0],j.E9[1]]);ZC.CN.1t(o,p,q)}1u ZC.CN.1t(o,p,A)}d.GS++}}if(d.W.1f>0&&d.GU>0&&d.IC.AL&&!d.A.AJ["3d"])1j(t=d.X;t<d.A1+(d.DJ?1:0);t++)if(d.K8=t,t%w==0)1j(Z=t-d.X,d.GS=0,a=1;a<=d.GU;a++){if(A=[],(p=1m CY(d)).1S(d.IC),"5q"===d.IC.o["1y-1r"]&&-1!==f&&(p.B8=f),p.IY=Ee,p.DB()&&p.1q(),c="2Z"===d.C8?d.AX(d.W[t]+a*(d.W[t+1]-d.W[t])/(d.GU+1)):d.AR?d.iX+d.I-d.A6-Z*d.A9-a*P:d.iX+d.A6+Z*d.A9+a*P,ZC.DQ(c,G,T)){1R(p.o[ZC.1b[7]]){1i"3Q-3i":A.1h([c,K+y/2],[c,K-y/2]);1p;1i"3Q-1v":A.1h([c,K],[c,K-y]);1p;1i"3Q-2c":A.1h([c,K],[c,K+y]);1p;1i"5W":A.1h([c,n-(m?y:-y)],[c,n]);1p;1i"6Z":A.1h([c,n],[c,n+(m?y:-y)]);1p;2q:A.1h([c,n+y/2],[c,n-y/2])}if(p.AL){1j(N=ZC.1k(p.o["2b-x"]||"0"),O=ZC.1k(p.o["2b-y"]||"0"),H=0;H<A.1f;H++)A[H][0]+=N,A[H][1]+=O;p.K=d.K+"-4U-43-"+t,ZC.CN.1t(o,p,A)}}d.GS++}d.VP();1a $=1c,ee=1c,te=d.CF,ie=d.DT,ae=[],ne=1m DS(d);ne.1S(d.IV);1a le,re=0,oe=0,se=0,Ce=[],Ae=[];if(d.o["5G-2C"])1j(t=0;t<d.o["5G-2C"].1f;t++)be(d.o["5G-2C"][t][0],!1,!0,d.o["5G-2C"][t][1]);if(d.W.1f>0&&d.BR.AL)if(1o.3I.rm&&d.FG&&"5C"===d.FG.o.1J){1a Ze=d.Ak(d.W[d.A1]-d.W[d.X]),ce=Ze[0];le=Ze[1];1a pe=Ze[2],ue=Ze[3];se=Ze[4];1a he=pe*1A.4j(d.W[d.X]/pe),6g=pe*1A.4h(d.W[d.A1]/pe),de="";d.GS=0;1a fe=!0;1j(t=he;t<=6g;t+=pe){fe=!0;1a ge=ZC.AN.YP(t,ce,d.A.UT,d.A.NE);if(ge!==de){1R(ue){1i"yr":se>15&&(fe=ZC.1k(ge)%2==0);1p;1i"Af":se>15&&(fe=ZC.1k(ge)%3==0);1p;1i"dn":se>45?fe=1===ZC.1k(ge)||15===ZC.1k(ge):se>30?fe=1===ZC.1k(ge)||10===ZC.1k(ge)||20===ZC.1k(ge):se>15&&(fe=1===ZC.1k(ge)||10===ZC.1k(ge)||15===ZC.1k(ge)||20===ZC.1k(ge)||25===ZC.1k(ge));1p;1i"hr":se>45?fe=ZC.1k(ge)%12==0:se>30?fe=ZC.1k(ge)%6==0:se>15&&(fe=ZC.1k(ge)%3==0);1p;1i"2j":1i"Al":se>45?fe=ZC.1k(ge)%30==0:se>30?fe=ZC.1k(ge)%10==0:se>15&&(fe=ZC.1k(ge)%5==0)}fe&&(be(t,!0),de=ge)}}ne.AL&&(ne.K=d.K+"-9O",ZC.CN.1t(o,ne,ae))}1u 1j(d.GS=0,be(d.X),d.GS=d.A1-d.X,be(d.A1),d.GS=1,t=d.X+1;t<d.A1;t++)(t-d.X)%M==0&&be(t);if(d.M.AL&&d.M.AP&&""!==d.M.AP){($=1m DP(d)).1S(d.M),$.K=d.A.K+"-"+d.BE.1F(/\\-/g,"1b")+"-jI",$.GM=d.K+"-1H "+d.A.K+"-1z-1H zc-1z-1H",$.AP=d.M.AP,$.Z=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-ml-0-c"),$.IP=d.H.2P()?ZC.AK(d.H.K+"-46"):ZC.AK(d.H.K+"-1D"),$.1q(),"5q"!==d.M.o["2s-1r"]&&"5q"!==d.M.o.1r||-1===f||($.C0=f);1a Be=d.iX+(d.AR?d.BV:d.A6),ve=d.I-d.A6-d.BV;1R("b1"===$.o["3G-gf"]&&(Be=d.A.iX,ve=d.A.I),$.OM){1i"1K":$.iX=Be;1p;1i"3G":$.iX=Be+ve/2-$.I/2;1p;1i"2z":$.iX=Be+ve-$.I}$.iY=m?n+S+oe:n-$.F-S-oe,d.M.iX=$.iX,d.M.iY=$.iY,$.AL&&(d.MB($,1c,"h"),$.1t(),$.EB(),1c===ZC.1d($.o.2H)&&$.KE||Ae.1h(ZC.AN.OB(d.A.K,$)))}Ae.1f>0&&ZC.AK(d.A.A.K+"-3f")&&(ZC.AK(d.A.A.K+"-3f").4o+=Ae.2M("")),1c!==ZC.1d(d.o.5J)&&"5C"===d.o.5J.1J&&d.Aq()}1n Ee(e){1l e=(e=(e=(e=(e=(e=e.1F(/%1z-8e-2K/g,d.A1-d.X)).1F(/(%c)|(%1z-2K)/g,d.GS)).1F(/(%i)|(%1z-2Y)/g,d.K8)).1F(/(%v)|(%1z-1U)/g,1c!==ZC.1d(d.W[d.K8])?d.W[d.K8]:"")).1F(/(%l)|(%1z-1H)/g,1c!==ZC.1d(d.BW[d.K8])?d.BW[d.K8]:"")).1F(/%1z-dn-of-Ag/g,ZC.AN.YP(d.W[d.K8],"%w",d.A.UT,d.A.NE))}1n be(e,t,i,a){1a l;if(d.K8=e,Z=e-d.X,(d.BR.E3.1f>0||e===d.X||!$||d.BR.I6||i)&&($=1m DP(d)),$.1S(d.BR),$.GM=d.K+"-1P "+d.A.K+"-1z-1P zc-1z-1P",$.K=d.A.K+"-"+d.BE.1F(/\\-/g,"1b")+"-7E"+e,$.E["p-1s"]=d.A9,d.CF=te,d.DT=ie,i||d.W9(Ee),l=t?ZC.AN.YP(e,le,d.A.UT,d.A.NE):a||d.FQ(e,1c,1c),!i&&d.BR.I6&&d.GK(d.BR,$,1c,{2Y:e,8g:Z,1D:l},d.BR.N8),1c===ZC.1d(d.M3)||-1!==ZC.AT(d.M3,l)){if($.AP=l,$.Z=$.C6=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-ml-0-c"),$.IP=d.H.2P()?ZC.AK(d.H.K+"-46"):ZC.AK(d.H.K+"-1D"),$.E.7w=e,$.1q(),d.BR.i6&&d.BR.AA%180==0&&($.o[ZC.1b[19]]=ZC.1k(.9*d.A9),$.1q()),"5q"!==d.BR.o["2s-1r"]&&"5q"!==d.BR.o.1r||-1===f||($.C0=f),i||($.IY=Ee,$.DB()&&$.1q()),$.o["3i-iH"]&&($.I=ZC.1k(d.A9)),t?(c=d.AX(e),$.iX=c-$.I/2-(d.DJ?d.A9/2:0)):i?(c=d.AX(e),$.iX=c-$.I/2):d.AR?(c=d.iX+d.I-d.A6-Z*d.A9,$.iX=c-$.I/2-(d.DJ?d.A9/2:0)):(c=d.iX+d.A6+Z*d.A9,$.iX=c-$.I/2+(d.DJ?d.A9/2:0)),d.A.BI&&d.A.BI.BW&&d.A.BI.IQ){1j(1a r=!1,o=0;o<d.A.BI.BW.1f;o++)d.A.BI.BW[o].1D===$.AP&&(r=!0);r||d.A.BI.BW.1h({x:ZC.1k(c),1D:$.AP})}1R($.o[ZC.1b[7]]){1i"5W":$.iY=m?n-$.F-X:n+X;1p;1i"3Q-1v":$.iY=K-$.F-X;1p;1i"3Q-2c":$.iY=K+X;1p;1i"3Q-3i":D&&D.S[e]?(D.FR(e).2I(),D.FR(e).iY<K?$.iY=K+X:$.iY=K-$.F-X):$.iY=K+X;1p;2q:$.iY=m?n+X:n-$.F-X}if(ee=d.MB($,ee,"h",0),d.BR.o["3i-3y"]&&d.BR.AA%180!=0){1a s=ZC.DQ(d.BR.AA,0,180)?m?1:-1:m?-1:1;$.iX+=s*$.I*ZC.EF(d.BR.AA)/2,$.iY+=s*($.I*ZC.EL(d.BR.AA)/2-$.F*ZC.EL(d.BR.AA)/2)}1a C=d.UL($,e,{2C:se,ib:Ce,i7:M,b4:re,b8:oe,i5:"h",4e:Ae});if(re=C.b4,oe=C.b8,!C.Aj&&t&&d.IV.AL)1R(ne.o[ZC.1b[7]]){1i"3Q-3i":ae.1h([c,K+X/2],[c,K-X/2],1c);1p;1i"3Q-1v":ae.1h([c,K-X],[c,K],1c);1p;1i"3Q-2c":ae.1h([c,K+X],[c,K],1c);1p;1i"5W":ae.1h([c,n-(m?X:-X)],[c,n],1c);1p;1i"6Z":ae.1h([c,n],[c,n+(m?X:-X)],1c);1p;2q:ae.1h([c,n+X/2],[c,n-X/2],1c)}d.GS++}}}Ak(e){1a t,i,a,n,l;1l 0<=e&&e<=3*ZC.aB?(t="%q",i="%q ms",a=10,n="ms",l=ZC.1k(e/10)):3*ZC.aB<e&&e<=3*ZC.aC?(t="%s",i="%h:%i:%s %A",a=ZC.aB,n="Al",l=ZC.1k(e/ZC.aB)):3*ZC.aC<e&&e<=3*ZC.HR?(t="%i",i="%h:%i %A",a=ZC.aC,n="2j",l=ZC.1k(e/ZC.aC)):3*ZC.HR<e&&e<=3*ZC.9o?(t="%h:%i",i="%M %d, %h %A",a=ZC.HR,n="hr",l=ZC.1k(e/ZC.HR)):3*ZC.9o<e&&e<=3*ZC.dc?(t="%d",i="%M %d",a=ZC.9o,n="dn",l=ZC.1k(e/ZC.9o)):3*ZC.dc<e&&e<=3*ZC.YR?(t="%m",i="%M %Y",a=ZC.9o,n="Af",l=ZC.1k(e/ZC.dc)):(t="%Y",i="%Y",a=ZC.9o,n="yr",l=ZC.1k(e/ZC.YR)),[t,i,a,n,l]}Aq(){1a e,t,i=1g;t=ZC.P.E6(i.H.2P()?i.H.K+"-46-c":i.A.K+"-3z-bl-0-c",i.H.AB);1a a,n,l=[],r=1;1n o(e,t){1w t===ZC.1b[31]&&(t=!1),0<=e&&e<=2*ZC.aB?(a="%q",n="%q ms",t&&o(60*e)):2*ZC.aB<e&&e<=2*ZC.aC?(a="%s",n="%h:%i:%s %A",t&&o(60*e),e>10*ZC.aB&&(r=2),e>30*ZC.aB&&(r=5),e>60*ZC.aB&&(r=10)):2*ZC.aC<e&&e<=2*ZC.HR?(a="%i",n="%h:%i %A",t&&o(24*e),e>10*ZC.aC&&(r=2),e>30*ZC.aC&&(r=5),e>60*ZC.aC&&(r=10)):2*ZC.HR<e&&e<=2*ZC.9o?(a="%h",n="%M %d, %h %A",t&&o(30*e),e>6*ZC.HR&&(r=2),e>12*ZC.HR&&(r=4),e>24*ZC.HR&&(r=6)):2*ZC.9o<e&&e<=2*ZC.dc?(a="%d",n="%M %d",t&&o(173*e),e>12*ZC.9o&&(l=[1,5,9,13,17,21,25,29]),e>24*ZC.9o&&(l=[1,6,11,16,21,26])):2*ZC.dc<e&&e<=2*ZC.YR?(a="%m",n="%M %Y",t&&o(10*e),e>9*ZC.dc&&(l=[1,4,7,10])):(a="%Y",n="%Y",e>9*ZC.YR&&(r=3),e>16*ZC.YR&&(r=4),e>25*ZC.YR&&(r=5))}o(i.W[i.A1]-i.W[i.X]);1a s=1c,C=1c,A=[],Z=!1,c=!1;1n p(e){1a c,p;if(1c!==ZC.1d(i.W[e])&&""!==i.W[e]){if(i.O2&&e!==i.X&&e!==i.A1&&1c!==ZC.1d(i.W[e-1])&&""!==i.W[e-1]&&1c!==ZC.1d(i.W[e])&&""!==i.W[e]){1a u=i.W[e]-i.W[e-1];1c!==ZC.1d(C)&&C!==u&&o(C,!0),C=u}1a h=ZC.AN.YP(i.W[e],a,i.A.UT,i.A.NE);if(h!==s&&ZC.1k(h)%r==0&&(0===l.1f||-1!==ZC.AT(l,ZC.1k(h)))){1a 1b,d=!0,f=e-i.X;c=i.AR?i.iX+i.I-i.A6-f*i.A9:i.iX+i.A6+f*i.A9+(i.DJ?i.A9/2:0);1a g=1m DP(i);i.H.B9.2y(g.o,"3a.4y.5J[5C].1P"),1c!==ZC.1d(1b=i.o.5J.1P)&&g.1C(1b),g.GM=i.K+"-1P "+i.A.K+"-1z-1P zc-1z-1P",g.K=i.K+"-5C-1P-"+e;1a B=ZC.AN.YP(i.W[e],n,i.A.UT,i.A.NE);g.AP=B,g.Z=g.C6=i.H.2P()?i.H.mc():ZC.AK(i.A.K+"-3z-ml-0-c"),g.IP=i.H.2P()?ZC.AK(i.H.K+"-46"):ZC.AK(i.H.K+"-1D"),g.1q(),i.AR?g.iX=c-g.I/2-(i.DJ?i.A9/2:0):g.iX=c,g.iY=i.iY,i.A.AJ["3d"]&&(i.A.NB(),p=1m CB(i.A,g.iX+g.I/2-ZC.AM.DZ,g.iY+g.F/2-ZC.AM.E0,0),g.iX=p.E9[0]-g.I/2,g.iY=p.E9[1]-g.F/2);1a v=[g.iX+g.BJ,g.iY+g.BC,g.I,g.F];if(g.AA%180==90&&(v=[g.iX+g.BJ+g.I/2-g.F/2,g.iY+g.BC+g.F/2-g.I/2,g.F,g.I]),i.A.BI&&i.A.BI.IQ){1j(1a E=!1,b=0;b<i.A.BI.BW.1f;b++)i.A.BI.BW[b].1D===g.AP&&(E=!0);E||g.iX>=i.iX&&g.iX+g.I<=i.iX+i.I&&i.A.BI.BW.1h({x:ZC.1k(g.iX),1D:g.AP})}if(g.AL&&Z){if(d=!0,!i.n7){if(e===i.X||e===i.A1)d=!0;1u 1j(1a m=0,K=A.1f;m<K;m++)if(ZC.DQ(v[0],A[m][0],A[m][0]+A[m][2])||ZC.DQ(v[0]+v[2],A[m][0],A[m][0]+A[m][2])){d=!1;1p}g.iX+g.BJ+g.I>i.iX+i.BJ+i.I&&(d=!1)}if(d){A.1h(v),g.1t(),g.EB();1a D=1m CY(i);1c!==ZC.1d(1b=i.o.5J.2i)&&D.1C(1b),D.AZ=1,D.B8="#86",D.1q();1a F=[];if(F.1h([c,i.iY],[c,i.iY+i.F]),i.A.AJ["3d"]){i.A.NB();1j(1a I=0,x=F.1f;I<x;I++)p=1m CB(i.A,F[I][0]-ZC.AM.DZ,F[I][1]-ZC.AM.E0,0),F[I][0]=p.E9[0],F[I][1]=p.E9[1]}D.AL&&ZC.CN.1t(t,D,F)}}0}s=h}}if(i.A.BI&&i.A.BI.IQ&&(i.A.BI.BW=[]),i.W.1f>0&&(Z=!1,1c!==ZC.1d(e=i.o.5J.1P)&&(Z=!(1c!==ZC.1d(e.2h)&&!ZC.2t(e.2h))),c=!1,i.A.BI&&i.A.BI.BW&&(c=!0),Z||c)){p(i.X),p(i.A1);1j(1a u=i.X+1;u<i.A1;u++)p(u)}}}1O TE 2k ZU{2G(e){1E(e)}1q(){1E.1q()}GV(){1a e=1g;e.A1===e.X?e.A9=e.F-e.A6-e.BV:e.A9=(e.F-e.A6-e.BV)/(e.A1-e.X+(e.DJ?1:0))}H9(e){1E.H9(e),1g.GV()}3k(){}5N(){1E.5N()}8y(e,t){1E.8y(e,t),1g.GV()}KW(e,t,i){1a a,n=1g;a=n.AR?(e-n.iY-n.A6)/(n.F-n.A6-n.BV):(n.iY+n.F-n.A6-e)/(n.F-n.A6-n.BV);1a l=n.B4+ZC.1Y((n.BQ-n.B4)*a);1l i&&(l=ZC.2l(n.AR?1A.4j(l):1A.4h(l))),"2Z"===n.C8&&t&&(l=1A.5d(n.EN,l)),l}AX(e){1a t=1g,i=t.BQ-t.B4,a=0===i?0:(t.F-t.A6-t.BV)/i;1l"2Z"===t.C8&&0===(e=ZC.HE(e,t.EN))&&(e=t.GX),t.AR?t.iY+t.A6+(e-t.B4)*a:t.iY+t.F-t.A6-(e-t.B4)*a}1t(){1a e,t,i,a,n,l,r,o,s,C,A,Z,c,p,u,h,1b,d,f,g=1g;1E.1t(),"5i"!==g.A.AF&&"6y"!==g.A.AF||1!==g.W.1f||(g.A6=g.F/2);1a B=g.Y1(),v=0,E=1,b=1,m={};1j(t=0,i=g.A.BL.1f;t<i;t++)g.A.BL[t].AL&&g.A.BL[t].TM&&(g.A.BL[t].BE.2x(0,7)===ZC.1b[51]&&g.A.BL[t].B7===g.B7&&v++,g.A.BL[t].BE.2x(0,7)===ZC.1b[51]&&("2q"===g.A.BL[t].B7?(m[g.A.BL[t].BE]=E,E++):(m[g.A.BL[t].BE]=b,b++)));1a K=m[g.BE],D="2q"===g.B7,F=1c,I=1c;1j(t=0,i=g.A.AY.A7.1f;t<i;t++){1a x=g.A.AY.A7[t],X=x.BT();if(-1!==ZC.AT(X,g.BE)){1a y=g.A.BK(x.BT("k")[0]);F=y.AX(y.H3),I=x;1p}}1a Y=8;1c!==ZC.1d(g.IV.o[ZC.1b[21]])&&(Y=ZC.1k(g.IV.o[ZC.1b[21]]));1a L=4;1c!==ZC.1d(g.IC.o[ZC.1b[21]])&&(L=ZC.1k(g.IC.o[ZC.1b[21]]));1a w=ZC.1k(g.A.E[g.BE+"-6N"]||-1);g.VW&&(w=0),"2q"===g.B7?(f=ZC.1k(g.A.Q.DY/v),a=g.iX-(K-1)*f,-1!==w&&(a=g.iX-w)):(f=ZC.1k(g.A.Q.E1/v),a=g.iX+g.I+(K-1)*f,-1!==w&&(a=g.iX+g.I+w));1a M=a;if(g.A.ID&&g.BE===ZC.1b[51]&&(g.A.ID.AL=!0,g.GX===g.B4&&g.HQ===g.BQ&&(g.A.ID.AL=!1),g.A.ID.AL&&0===g.A.ID.B0.BJ&&"2q"===g.B7&&(a-=g.A.ID.B0.I+g.AZ/2)),g.E.iX=a,g.AL&&g.TM){1a H=1A.4j((g.A1-g.X)/(g.EE-1)),N=1A.4j((g.A1-g.X)/(g.MA-1)),O=0,S=g.A9*N/(g.GU+1);if(n=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-ml-0-c"),l=ZC.P.E6(n,g.H.AB),r=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-bl-0-c"),o=ZC.P.E6(r,g.H.AB),g.TM||g.YY||1c!==ZC.1d(g.A.o[g.BE])){if("5q"===g.o["1y-1r"]&&-1!==B&&(g.B8=B),g.A.AJ["3d"]){if((c=ZC.DE.D9(g,g.A,a-ZC.AM.DZ,a-ZC.AM.DZ,g.iY-ZC.AM.E0,g.iY-ZC.AM.E0+g.F,-1,ZC.AM.FS+1,"y")).K=g.K+"-1y",g.A.EX.7G&&(g.A.EX[ZC.1b[28]]>0?c.MI=[1===g.L?-100:100,1,1]:c.MI=[1===g.L?100:-100,1,1]),g.A.CG.2Q(c),1c!==ZC.1d(g.o.cg)){1a P=1m CY(g);P.1C(g.o.cg),P.1q(),P.A0=P.AC=P.B8,(c=ZC.DE.D9(P,g.A,a-ZC.AM.DZ,a-ZC.AM.DZ,g.iY-ZC.AM.E0,g.iY-ZC.AM.E0+g.F,-P.AZ/2,P.AZ/2,"y")).K=g.K+"-cg",g.A.CG.2Q(c)}}1u{C=[[M,g.iY+g.F],[M,g.iY]];1a G=g.K;g.K+="-1y",ZC.CN.1t(l,g,C),g.K=G}1a T=0,k=0,J=[],z=[];if(g.TM||g.YY){if(g.W.1f>0&&g.D4.AL){1a R=1c===ZC.1d(g.D4.o["2b-4c"])?0:ZC.1k(g.D4.o["2b-4c"]),Q=1c===ZC.1d(g.D4.o["2b-6i"])?0:ZC.1k(g.D4.o["2b-6i"]);if(g.D4.o.2C&&g.D4.o.2C.1f>0&&!g.A.AJ["3d"])1j(g.GS=0,p=1m I4(g),t=g.X;t<g.A1+(g.DJ?1:0);t++)g.K8=t,t%N==0&&(A=t-g.X,u=g.GS%g.D4.o.2C.1f,p.1C(g.D4.o.2C[u]),p.K=g.K+"-2i-"+t,p.Z=r,p.1q(),p.iX=g.iX+R,s="2Z"===g.C8?g.AX(g.W[t]):g.AR?g.iY+g.A6+A*g.A9:g.iY+g.F-g.A6-A*g.A9-g.A9*N,p.iY=s,p.I=g.I-R-Q,p.F=g.A9*N,p.1t(),g.GS++);if(g.D4.AZ>0)1j(g.GS=0,t=g.X;t<=g.A1+(g.DJ?1:0);t++)if(g.K8=t,t===g.X||t===g.A1||t%N==0){(g.D4.E3.1f>0||t===g.X||"2Z"===g.C8)&&((Z=1m CY(g)).Z=Z.C6=r,"2Z"===g.C8?ZC.AO.e0(ZC.HE(g.W[t],g.EN))?Z.1S(g.D4):Z.1S(g.G2):Z.1S(g.D4),Z.IY=Ae,Z.DB()&&Z.1q()),C=[],A=t-g.X;1a W=g.iX+R,V=g.I-R-Q;if(s="2Z"===g.C8?g.AX(g.W[t]):g.AR?g.iY+g.A6+A*g.A9:g.iY+g.F-g.A6-A*g.A9,Z.AL)if(g.A.AJ["3d"]){1a U=1m CY(g);U.1S(Z),1c!==ZC.1d(g.o["1z-z"])&&1c!==ZC.1d(e=g.o["1z-z"].2i)&&(U.1C(e),U.1q()),U.A0=U.AC=U.B8,c=ZC.DE.D9(U,g.A,a-ZC.AM.DZ,a-ZC.AM.DZ,s-ZC.AM.E0-U.AZ/2,s-ZC.AM.E0+U.AZ/2,0,ZC.AM.FS,"y"),g.A.CG.2Q(c),Z.A0=Z.AC=Z.B8,(c=ZC.DE.D9(Z,g.A,W-ZC.AM.DZ,W-ZC.AM.DZ+V,s-ZC.AM.E0-Z.AZ/2,s-ZC.AM.E0+Z.AZ/2,ZC.AM.FS+2,ZC.AM.FS+2,"x")).K=g.K+"-2i-"+t,g.A.CG.2Q(c)}1u C.1h([W,s],[W+V,s]),Z.K=g.K+"-2i-"+t,ZC.CN.1t(o,Z,C);g.GS++}}if(g.W.1f>0&&g.G2.AL&&S>2&&!g.A.AJ["3d"]){if(g.G2.o.2C&&g.G2.o.2C.1f>0)1j(p=1m I4(g),t=g.X;t<g.A1+(g.DJ?1:0);t++)if(g.K8=t,t%N==0)1j(A=t-g.X,g.GS=0,h=1;h<=g.GU;h++)u=g.GS%g.G2.o.2C.1f,p.1C(g.G2.o.2C[u]),p.K=g.K+"-2i-"+t+"-"+h,p.Z=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-bl-0-c"),p.1q(),p.iX=g.iX,s=g.AR?g.iY+g.A6+A*g.A9+h*S:g.iY+g.F-g.A6-A*g.A9-(h+1)*S,p.iY=s,p.I=g.I,p.F=S,p.1t(),g.GS++;if(g.G2.AZ>0&&"2Z"!==g.C8)1j(t=g.X;t<g.A1+(g.DJ?1:0);t++)if(g.K8=t,t===g.X||t===g.A1||t%N==0)1j(A=t-g.X,g.GS=0,h=1;h<=g.GU;h++)C=[],(Z=1m CY(g)).1S(g.G2),Z.IY=Ae,Z.DB()&&Z.1q(),s="2Z"===g.C8?g.AX(g.W[t]+h*(g.W[t+1]-g.W[t])/(g.GU+1)):g.AR?g.iY+g.A6+A*g.A9+h*S:g.iY+g.F-g.A6-A*g.A9-h*S,ZC.DQ(s,g.iY,g.iY+g.F)&&(C.1h([g.iX,s],[g.iX+g.I,s]),Z.AL&&(Z.K=g.K+"-4U-2i-"+h,ZC.CN.1t(o,Z,C))),g.GS++}1a j,q,$;if(g.TN(o,B),g.W.1f>0&&g.IV.AL){1R(g.IV.o[ZC.1b[7]]){1i"5W":1p;1i"6Z":O+=Y;1p;2q:O+=Y/2}1j(g.GS=0,1b=ZC.AT(g.W,0),t=g.X;t<=g.A1+(g.DJ?1:0);t++){g.K8=t;1a ee=-1;if((t===g.X||t===g.A1||t%N==0||ZC.2t(g.o["4n-ci"])&&t===1b)&&(C=[],A=t-g.X,(g.IV.E3.1f>0||t===g.X||"2Z"===g.C8)&&(Z=1m CY(g),"2Z"===g.C8?ZC.AO.e0(ZC.HE(g.W[t],g.EN))?Z.1S(g.IV):(Z.1S(g.IC),ee=Y,Y=L):Z.1S(g.IV),"5q"===g.IV.o["1y-1r"]&&-1!==B&&(Z.B8=B),Z.IY=Ae,Z.DB()&&Z.1q()),s="2Z"===g.C8?g.AX(g.W[t]):g.AR?g.iY+g.A6+A*g.A9:g.iY+g.F-g.A6-A*g.A9,ZC.DQ(s,g.A.Q.iY,g.A.Q.iY+g.A.Q.F))){1R(Z.o[ZC.1b[7]]){1i"3Q-2z":C.1h([F,s],[F+Y,s]);1p;1i"3Q-1K":C.1h([F,s],[F-Y,s]);1p;1i"3Q-3i":C.1h([F-Y/2,s],[F+Y/2,s]);1p;1i"5W":C.1h([a,s],[a+(D?Y:-Y),s]);1p;1i"6Z":C.1h([a,s],[a-(D?Y:-Y),s]);1p;2q:C.1h([a+Y/2,s],[a-Y/2,s])}if(-1!==ee&&(Y=ee,ee=-1),Z.AL){1j(q=ZC.1k(Z.o["2b-x"]||"0"),$=ZC.1k(Z.o["2b-y"]||"0"),j=0;j<C.1f;j++)C[j][0]+=q,C[j][1]+=$;if(Z.K=g.K+"-43-"+t,g.A.AJ["3d"]&&g.A.EX.7G){1a te,ie=[];1j(j=0;j<C.1f;j++)te=1m CB(g.A,C[j][0]-ZC.AM.DZ,C[j][1]-ZC.AM.E0,0),ie.1h([te.E9[0],te.E9[1]]);ZC.CN.1t(l,Z,ie)}1u ZC.CN.1t(l,Z,C)}g.GS++}}}if(g.W.1f>0&&g.IC.AL&&g.GU>0&&S>5&&!g.A.AJ["3d"]&&"2Z"!==g.C8)1j(t=g.X;t<g.A1+(g.DJ?1:0);t++)if(g.K8=t,t===g.X||t===g.A1||t%N==0)1j(A=t-g.X,g.GS=0,h=1;h<=g.GU;h++){if(C=[],(Z=1m CY(g)).1S(g.IC),"5q"===g.IC.o["1y-1r"]&&-1!==B&&(Z.B8=B),Z.IY=Ae,Z.DB()&&Z.1q(),s="2Z"===g.C8?g.AX(g.W[t]+h*(g.W[t+1]-g.W[t])/(g.GU+1)):g.AR?g.iY+g.A6+A*g.A9+h*S:g.iY+g.F-g.A6-A*g.A9-h*S,ZC.DQ(s,g.iY,g.iY+g.F)){1R(Z.o[ZC.1b[7]]){1i"3Q-2z":C.1h([F,s],[F+L,s]);1p;1i"3Q-1K":C.1h([F,s],[F-L,s]);1p;1i"3Q-3i":C.1h([F-L/2,s],[F+L/2,s]);1p;1i"5W":C.1h([a,s],[a+(D?L:-L),s]);1p;2q:C.1h([a,s],[a-(D?L:-L),s]);1p;1i"9x":C.1h([a+L/2,s],[a-L/2,s])}if(Z.AL){1j(q=ZC.1k(Z.o["2b-x"]||"0"),$=ZC.1k(Z.o["2b-y"]||"0"),j=0;j<C.1f;j++)C[j][0]+=q,C[j][1]+=$;Z.K=g.K+"-4U-43-"+t,ZC.CN.1t(l,Z,C)}}g.GS++}g.VP();1a ae=1c,ne=g.CF,le=g.DT,re=1n(e){1a t;if(g.K8=e,A=e-g.X,(g.BR.E3.1f>0||e===g.X||!d||g.BR.I6)&&(d=1m DP(g)),d.1S(g.BR),d.GM=g.K+"-1P "+g.A.K+"-1z-1P zc-1z-1P",d.K=g.A.K+"-"+g.BE.1F(/\\-/g,"1b")+"-7E"+e,g.CF=ne,g.DT=le,g.W9(Ae),t=("5S"===g.A.AF||g.Q8)&&g.BW.1f?g.FQ(e+g.B4):g.FQ(e),g.BR.I6&&g.GK(g.BR,d,1c,{2Y:e,8g:A,1D:t},g.BR.N8),1c===ZC.1d(g.M3)||-1!==ZC.AT(g.M3,t)){1R(d.AP=t,d.Z=d.C6=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-ml-0-c"),d.IP=g.H.2P()?ZC.AK(g.H.K+"-46"):ZC.AK(g.H.K+"-1D"),d.1q(),"5q"!==g.BR.o["2s-1r"]&&"5q"!==g.BR.o.1r||-1===B||(d.C0=B),d.IY=Ae,d.DB()&&d.1q(),d.o[ZC.1b[7]]){1i"3Q-1K":d.iX=F-d.I-Y;1p;1i"3Q-2z":d.iX=F+Y;1p;1i"3Q-3i":I&&I.S[e]?(I.FR(e).2I(),I.FR(e).iX<F?d.iX=F+Y:d.iX=F-d.I-Y):d.iX=F+Y;1p;1i"6r":d.iX=a-d.I/2;1p;1i"5W":d.iX=D?a+Y:a-d.I-Y;1p;2q:d.iX=D?a-d.I-Y:a+Y}if("2Z"===g.C8?d.iY=g.AX(g.W[e])-d.F/2:g.AR?d.iY=g.iY+g.A6+A*g.A9-d.F/2+(g.DJ?g.A9/2:0):d.iY=g.iY+g.F-g.A6-A*g.A9-d.F/2-(g.DJ?g.A9/2:0),ae=g.MB(d,ae,"v"),g.BR.o["3i-3y"]&&g.BR.AA%180!=0){1a i=D?1:-1;90===g.BR.AA||3U===g.BR.AA?d.iX+=i*(d.I/2-d.F/2):ZC.DQ(g.BR.AA,0,90)||ZC.DQ(g.BR.AA,3U,2m)?(d.iX+=i*(d.I-d.I*ZC.EF(g.BR.AA))/2,d.iY-=i*d.I*ZC.EL(g.BR.AA)/2):ZC.DQ(g.BR.AA,90,3U)&&(d.iX+=i*(d.I+d.I*ZC.EF(g.BR.AA))/2,d.iY+=i*d.I*ZC.EL(g.BR.AA)/2)}if(ZC.DQ(d.iY+d.F/2,g.A.Q.iY,g.A.Q.iY+g.A.Q.F)){1a n=g.UL(d,e,{2C:0,ib:J,i7:H,b4:T,b8:k,i5:"w",4e:z});T=n.b4,k=n.b8,g.GS++}}};if(g.W.1f>0&&g.BR.AL)if("2Z"===g.C8){1a oe=[];1j(t=g.X;t<=g.A1;t++)ZC.AO.e0(ZC.HE(g.W[t],g.EN))&&(g.GS=t,re(t),oe.1h(t));1j(t=g.X;t<=g.A1;t++)-1===ZC.AT(oe,t)&&(g.GS=t,re(t))}1u 1j(g.GS=0,re(g.X),g.GS=g.A1-g.X,re(g.A1),-1!==(1b=ZC.AT(g.W,0))&&ZC.2t(g.o["4n-ci"])&&(g.GS=1b,re(1b)),g.GS=1,t=g.X+1;t<g.A1;t++)t%H==0&&re(t)}if(g.M.AL&&g.M.AP&&""!==g.M.AP){(d=1m DP(g)).1S(g.M),d.K=g.A.K+"-"+g.BE.1F(/\\-/g,"1b")+"-jI",d.GM=g.K+"-1H "+g.A.K+"-1z-1H zc-1z-1H",d.AP=g.M.AP,d.Z=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-ml-0-c"),d.IP=g.H.2P()?ZC.AK(g.H.K+"-46"):ZC.AK(g.H.K+"-1D"),d.1q(),"5q"!==g.M.o["2s-1r"]&&"5q"!==g.M.o.1r||-1===B||(d.C0=B);1a se=g.iY+(g.AR?g.A6:g.BV),Ce=g.F-g.BV-g.A6;1R("b1"===d.o["3G-gf"]&&(se=g.A.iY,Ce=g.A.F),d.K0){1i"1v":d.iY=se+d.I/2-d.F/2;1p;1i"6r":d.iY=se+Ce/2-d.F/2;1p;1i"2c":d.iY=se+Ce-d.I/2-d.F/2}d.iX=D?a-d.I/2-d.F/2-O-k:a+k+d.F/2+O-d.I/2,g.M.iX=d.iX,g.M.iY=d.iY,d.AL&&(g.MB(d,1c,"v",10),d.1t(),d.EB(),1c===ZC.1d(d.o.2H)&&d.KE||z.1h(ZC.AN.OB(g.A.K,d)))}z.1f>0&&ZC.AK(g.A.A.K+"-3f")&&(ZC.AK(g.A.A.K+"-3f").4o+=z.2M(""))}}1n Ae(e){1l e=(e=(e=(e=(e=e.1F(/%1z-8e-2K/g,g.A1-g.X)).1F(/(%c)|(%1z-2K)/g,g.GS)).1F(/(%i)|(%1z-2Y)/g,g.K8)).1F(/(%v)|(%1z-1U)/g,1c!==ZC.1d(g.W[g.K8])?g.W[g.K8]:"")).1F(/(%l)|(%1z-1H)/g,1c!==ZC.1d(g.BW[g.K8])?g.BW[g.K8]:"")}}}1O VC 2k hQ{2G(e){1E(e),1g.D8=!0}1q(){1E.1q()}GV(){1a e=1g;e.A1===e.X?e.A9=e.F-e.A6-e.BV:e.A9=(e.F-e.A6-e.BV)/(e.A1-e.X+(e.DJ?1:0))}H9(e){1E.H9(e),1g.GV()}3k(){}5N(){1E.5N()}8y(e,t){1E.8y(e,t),1g.GV()}KW(e){1a t,i=1g;1l t=i.AR?(e-i.iY-i.A6)/(i.F-i.A6-i.BV):(i.iY+i.F-i.A6-e)/(i.F-i.A6-i.BV),i.B4+ZC.1Y((i.BQ-i.B4)*t)}MS(e,t,i){1a a,n,l,r,o=1g;1w i===ZC.1b[31]&&(i=!1);1a s=o.DJ?o.A9:0;l=o.AR?(e-o.iY-o.A6-s/2)/(o.F-o.A6-o.BV-s):(o.iY+o.F-e-o.A6-s/2)/(o.F-o.A6-o.BV-s);1a C=!1;if(t)1j(r in t.K9){C=!0;1p}if(t&&!o.O2&&C){1a A=o.W[o.X];"3e"==1w A&&(A=ZC.AT(o.IU,A)),"2Z"===o.C8&&(A=ZC.HE(A,o.EN));1a Z=o.W[o.A1];"3e"==1w Z&&(Z=ZC.AT(o.IU,Z)),"2Z"===o.C8&&(Z=ZC.HE(Z,o.EN));1a c=A+ZC.1Y((Z-A)*l);"2Z"===o.C8&&(c=1A.5d(o.EN,c));1a p=ZC.3v;1j(r in n=1c,t.K9)(a=1A.3l(r-c))<p&&(p=a,n=t.K9[r]);if(1c===ZC.1d(n)&&(n=c),p>t.j3){1a u=1A.4j((Z-A)/(o.I-o.A6-o.BV));if(t.W.1f<2&&(u*=100),p>u)1l 1c}1l n}1a h=o.X,1b=o.A1;1l o.ED&&(1c!==ZC.1d(a=o.W[h])&&(h=a),1c!==ZC.1d(a=o.W[1b])&&(1b=a)),"2Z"===o.C8&&(h=ZC.HE(h,o.EN),1b=ZC.HE(1b,o.EN)),n=i?o.DJ?h+(1b-h+1)*l:h+(1b-h)*l:o.DJ?o.X+(o.A1-o.X+1)*l:o.X+(o.A1-o.X)*l,"2Z"===o.C8?(n=1A.5d(o.EN,n),n=1A.4h(n)-1):(n=o.DJ?1A.4h(n):ZC.1k(n),n=ZC.BO(0,n),n=ZC.CV(o.EG,n)),n}H1(e){1a t=1g;t.X,t.A1;1l t.ED&&!t.O2&&(t.B4,t.BQ),"2Z"===t.C8&&(e=ZC.HE(e+1,t.EN)),t.AR?t.iY+t.A6+(e-t.X)*t.A9+(t.DJ?t.A9/2:0):t.iY+t.F-t.A6-(e-t.X)*t.A9-(t.DJ?t.A9/2:0)}AX(e){1a t,i,a,n,l,r=1g;if("2Z"===r.C8&&(e=ZC.HE(e,r.EN)),r.O2){1a o=r.UO[e];1l r.H1(o)}1l-1!==(t=ZC.AT(r.IU,e))?r.H1(t):!r.jk&&(r.ED||r.FG&&"5C"===r.FG.o.1J)?(n=r.W[r.X],l=r.W[r.A1],"2Z"===r.C8&&(n=ZC.HE(n,r.EN),l=ZC.HE(l,r.EN)),l===n?a=0:(i=l-n,a=(r.F-r.A6-r.BV-(r.DJ?r.A9:0))/i),r.AR?r.iY+r.A6+(e-n)*a+(r.DJ?r.A9/2:0):r.iY+r.F-r.A6-(e-n)*a-(r.DJ?r.A9/2:0)):(n=r.B4,l=r.BQ,"2Z"===r.C8&&(n=ZC.HE(n,r.EN),l=ZC.HE(l,r.EN)),l===n?a=0:(i=l-n+(r.DJ?1:0),a=(r.F-r.A6-r.BV)/i),r.AR?r.iY+r.A6+(e-n)*a+(r.DJ?r.A9/2:0):r.iY+r.F-r.A6-(e-n)*a-(r.DJ?r.A9/2:0))}1t(){1a e,t,i,a,n,l,r,o,s,C,A,Z,c,p,u,h,1b,d=1g;if(d.AL){1E.1t(),1c!==ZC.1d(d.A.A.E[d.BE+"-bG-2b-4c"])&&(d.A6=d.A.A.E[d.BE+"-bG-2b-4c"]),"6B"!==d.A.AF&&"8t"!==d.A.AF||(-1===d.A6&&-1===d.BV||1===d.W.1f)&&(d.A6=d.BV=d.F/(d.W.1f+1),d.GV());1a f=d.Y1(),g=0,B=1,v=1,E={};1j(t=0,i=d.A.BL.1f;t<i;t++)d.A.BL[t].BE.2x(0,7)===ZC.1b[50]&&d.A.BL[t].B7===d.B7&&g++,d.A.BL[t].BE.2x(0,7)===ZC.1b[50]&&("2q"===d.A.BL[t].B7?(E[d.A.BL[t].BE]=B,B++):(E[d.A.BL[t].BE]=v,v++));1a b=E[d.BE],m="2q"===d.B7,K=1c,D=1c;1j(t=0,i=d.A.AY.A7.1f;t<i;t++){1a F=d.A.AY.A7[t],I=F.BT();if(-1!==ZC.AT(I,d.BE)){1a x=d.A.BK(F.BT("v")[0]);K=x.AX(x.H3),D=F;1p}}1a X=8;1c!==ZC.1d(d.IV.o[ZC.1b[21]])&&(X=ZC.1k(d.IV.o[ZC.1b[21]]));1a y=4;1c!==ZC.1d(d.IC.o[ZC.1b[21]])&&(y=ZC.1k(d.IC.o[ZC.1b[21]]));1a Y=ZC.1k(d.A.E[d.BE+"-6N"]||-1);d.VW&&(Y=0),"2q"===d.B7?(a=ZC.1k(d.A.Q.DY/g),n=d.iX-(b-1)*a,-1!==Y&&(n=d.iX-Y)):(a=ZC.1k(d.A.Q.E1/g),n=d.iX+d.I+(b-1)*a,-1!==Y&&(n=d.iX+d.I+Y));1a L=n;if(d.A.IG&&d.BE===ZC.1b[50]&&(d.A.IG.AL=!0,d.E7===d.X&&d.EG===d.A1&&(d.A.IG.AL=!1),d.A.IG.AL&&0===d.A.IG.B0.BJ&&"2q"===d.B7&&(n-=d.A.IG.B0.I+d.AZ/2)),d.E.iX=n,d.AL&&d.TM){1c!==ZC.1d(d.o["7A-2C"])&&(d.MA=d.EE=ZC.1k(d.o["7A-2C"]));1a w=1A.4j((d.A1-d.X)/(d.MA-1)),M=1A.4j((d.A1-d.X)/(d.EE-1));1c===ZC.1d(d.o["7A-2C"])&&ZC.2t(d.o.iN)&&(w=ZC.AO.iM(w),M=ZC.AO.iM(M));1a H,N,O,S=0,P=d.A9*w/(d.GU+1);if(1c===ZC.1d(K)&&(K=n),l=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-ml-0-c"),r=ZC.P.E6(l,d.H.AB),o=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-bl-0-c"),s=ZC.P.E6(o,d.H.AB),"5q"===d.o["1y-1r"]&&-1!==f&&(d.B8=f),d.A.AJ["3d"])(p=ZC.DE.D9(d,d.A,n-ZC.AM.DZ,n-ZC.AM.DZ,d.iY-ZC.AM.E0,d.iY-ZC.AM.E0+d.F,-1,ZC.AM.FS+1,"y")).K=d.K+"-1y",d.A.EX.7G&&(d.A.EX[ZC.1b[27]]>0?p.MI=[1===d.L?-100:100,1,1]:p.MI=[1===d.L?100:-100,1,1]),d.A.CG.2Q(p);1u{A=[[L,d.iY+d.F],[L,d.iY]];1a G=d.K;d.K+="-1y",ZC.CN.1t(r,d,A),d.K=G}if(d.W.1f>0&&d.D4.AL){1a T=1c===ZC.1d(d.D4.o["2b-4c"])?0:ZC.1k(d.D4.o["2b-4c"]),k=1c===ZC.1d(d.D4.o["2b-6i"])?0:ZC.1k(d.D4.o["2b-6i"]);if(d.D4.o.2C&&d.D4.o.2C.1f>0&&!d.A.AJ["3d"])1j(u=1m I4(d),t=d.X;t<d.A1+(d.DJ?1:0);t++)C=t-d.X,1b=t%d.D4.o.2C.1f,u.1C(d.D4.o.2C[1b]),u.K=d.K+"-2i-"+t,u.Z=o,u.1q(),u.iX=d.iX+T,d.AR?u.iY=d.iY+d.A6+C*d.A9:u.iY=d.iY+d.F-d.A6-(C+1)*d.A9,u.I=d.I-T-k,u.F=d.A9,u.1t();if(d.D4.AZ>0)1j(d.GS=0,t=d.X;t<=d.A1+(d.DJ?1:0);t++)if(d.K8=t,t===d.X||t===d.A1+(d.DJ?1:0)||(t-d.X)%w==0){(d.D4.E3.1f>0||t===d.X)&&((c=1m CY(d)).Z=c.C6=o,c.1S(d.D4),c.IY=ne,c.DB()&&c.1q()),C=t-d.X,A=[],Z=d.AR?d.iY+d.A6+C*d.A9:d.iY+d.F-d.A6-C*d.A9;1a J=d.iX+T,z=d.I-T-k;if(c.AL)if(d.A.AJ["3d"]){1a R=1m CY(d);R.1S(c),1c!==ZC.1d(d.o["1z-z"])&&1c!==ZC.1d(e=d.o["1z-z"].2i)&&(R.1C(e),R.1q()),R.A0=R.AC=R.B8,p=ZC.DE.D9(R,d.A,n-ZC.AM.DZ,n-ZC.AM.DZ,Z-ZC.AM.E0-R.AZ/2,Z-ZC.AM.E0+R.AZ/2,0,ZC.AM.FS,"z"),d.A.CG.2Q(p),c.A0=c.AC=c.B8,(p=ZC.DE.D9(c,d.A,J-ZC.AM.DZ,J-ZC.AM.DZ+z,Z-ZC.AM.E0-R.AZ/2,Z-ZC.AM.E0+R.AZ/2,ZC.AM.FS+2,ZC.AM.FS+2,"x")).K=d.K+"-2i-"+t,d.A.CG.2Q(p)}1u A.1h([J,Z],[J+z,Z]),c.K=d.K+"-2i-"+t,ZC.CN.1t(s,c,A);d.GS++}}if(d.W.1f>0&&d.G2.AL&&!d.A.AJ["3d"]){if(d.G2.o.2C&&d.G2.o.2C.1f>0)1j(u=1m I4(d),t=d.X;t<d.A1+(d.DJ?1:0);t++)1j(d.K8=t,C=t-d.X,d.GS=0,h=1;h<=d.GU;h++)1b=d.GS%d.G2.o.2C.1f,u.1C(d.G2.o.2C[1b]),u.K=d.K+"-2i-"+t+"-"+h,u.Z=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-bl-0-c"),u.1q(),u.iX=d.iX,d.AR?u.iY=d.iY+d.A6+(C+1)*d.A9-(h+1)*P:u.iY=d.iY+d.F-d.A6-(C+1)*d.A9+h*P,u.I=d.I,u.F=P,u.1t(),d.GS++;if(d.G2.AZ>0)1j(t=d.X;t<d.A1+(d.DJ?1:0);t++)if(d.K8=t,t%w==0)1j(C=t-d.X,d.GS=0,h=1;h<=d.GU;h++)A=[],(c=1m CY(d)).1S(d.G2),c.IY=ne,c.DB()&&c.1q(),Z="2Z"===d.C8?d.AX(d.W[t]+h*(d.W[t+1]-d.W[t])/(d.GU+1)):d.AR?d.iY+d.A6+C*d.A9+h*P:d.iY+d.F-d.A6-C*d.A9-h*P,ZC.DQ(Z,d.iY,d.iY+d.F)&&(A.1h([d.iX,Z],[d.iX+d.I,Z]),c.AL&&(c.K=d.K+"-4U-2i-"+h,ZC.CN.1t(s,c,A))),d.GS++}if(d.TN(s,f),d.W.1f>0&&d.IV.AL&&(!d.A.AJ["3d"]||!d.A.EX.7G)){1R(d.IV.o[ZC.1b[7]]){1i"5W":1p;1i"6Z":S+=X;1p;2q:S+=X/2}1j(d.GS=0,t=d.X;t<=d.A1+(d.DJ?1:0);t++)if(d.K8=t,t===d.X||t===d.A1+(d.DJ?1:0)||(t-d.X)%w==0){1R(A=[],C=t-d.X,(d.IV.E3.1f>0||t===d.X)&&((c=1m CY(d)).1S(d.IV),"5q"===d.IV.o["1y-1r"]&&-1!==f&&(c.B8=f),c.IY=ne,c.DB()&&c.1q()),Z=d.AR?d.iY+d.A6+C*d.A9:d.iY+d.F-d.A6-C*d.A9,c.o[ZC.1b[7]]){1i"3Q-3i":A.1h([K-X/2,Z],[K+X/2,Z]);1p;1i"3Q-1K":A.1h([K-X,Z],[K,Z]);1p;1i"3Q-2z":A.1h([K+X,Z],[K,Z]);1p;1i"5W":A.1h([n,Z],[n+(m?X:-X),Z]);1p;1i"6Z":A.1h([n,Z],[n-(m?X:-X),Z]);1p;2q:A.1h([n+X/2,Z],[n-X/2,Z])}if(c.AL){1j(N=ZC.1k(c.o["2b-x"]||"0"),O=ZC.1k(c.o["2b-y"]||"0"),H=0;H<A.1f;H++)A[H][0]+=N,A[H][1]+=O;c.K=d.K+"-43-"+t,ZC.CN.1t(r,c,A)}d.GS++}}if(d.W.1f>0&&d.GU>0&&d.IC.AL&&!d.A.AJ["3d"])1j(t=d.X;t<d.A1+(d.DJ?1:0);t++)if(t===d.X||t===d.A1+(d.DJ?1:0)||t%w==0)1j(C=t-d.X,h=1;h<=d.GU;h++){if(A=[],(c=1m CY(d)).1S(d.IC),"5q"===d.IC.o["1y-1r"]&&-1!==f&&(c.B8=f),c.IY=ne,c.DB()&&c.1q(),Z="2Z"===d.C8?d.AX(d.W[t]+h*(d.W[t+1]-d.W[t])/(d.GU+1)):d.AR?d.iY+d.A6+C*d.A9+h*P:d.iY+d.F-d.A6-C*d.A9-h*P,ZC.DQ(Z,d.iY,d.iY+d.F)){1R(c.o[ZC.1b[7]]){1i"3Q-3i":A.1h([K-y/2,Z],[K+y/2,Z]);1p;1i"3Q-1K":A.1h([K-y,Z],[K,Z]);1p;1i"3Q-2z":A.1h([K+y,Z],[K,Z]);1p;1i"5W":A.1h([n,Z],[n+(m?y:-y),Z]);1p;1i"6Z":A.1h([n,Z],[n-(m?y:-y),Z]);1p;2q:A.1h([n+y/2,Z],[n-y/2,Z])}if(c.AL){1j(N=ZC.1k(c.o["2b-x"]||"0"),O=ZC.1k(c.o["2b-y"]||"0"),H=0;H<A.1f;H++)A[H][0]+=N,A[H][1]+=O;c.K=d.K+"-4U-43-"+t,ZC.CN.1t(r,c,A)}}d.GS++}d.VP();1a Q,W=1c,V=d.CF,U=d.DT,j=0,q=0,$=0,ee=[],te=[];if(1===d.W.1f&&d.BR.AL)d.GS=0,le(d.X);1u if(d.W.1f>1&&d.BR.AL)1j(d.GS=0,le(d.X),d.GS=d.A1-d.X,le(d.A1),d.GS=1,t=d.X+1;t<d.A1;t++)(t-d.X)%M==0&&le(t);if(d.M.AL&&d.M.AP&&""!==d.M.AP){(Q=1m DP(d)).1S(d.M),Q.K=d.A.K+"-"+d.BE.1F(/\\-/g,"1b")+"-jI",Q.GM=d.K+"-1H "+d.A.K+"-1z-1H zc-1z-1H",Q.AP=d.M.AP,Q.Z=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-ml-0-c"),Q.IP=d.H.2P()?ZC.AK(d.H.K+"-46"):ZC.AK(d.H.K+"-1D"),Q.1q(),"5q"!==d.M.o["2s-1r"]&&"5q"!==d.M.o.1r||-1===f||(Q.C0=f);1a ie=d.iY+(d.AR?d.A6:d.BV),ae=d.F-d.A6-d.BV;1R("b1"===Q.o["3G-gf"]&&(ie=d.A.iY,ae=d.A.F),Q.K0){1i"1v":Q.iY=ie+Q.I/2-Q.F/2;1p;1i"6r":Q.iY=ie+ae/2-Q.F/2;1p;1i"2c":Q.iY=ie+ae-Q.I/2-Q.F/2}Q.iX=m?n-Q.I/2-Q.F/2-S-q:n+Q.F/2+q+S-Q.I/2,d.M.iX=Q.iX,d.M.iY=Q.iY,Q.AL&&(d.MB(Q,1c,"v"),Q.1t(),Q.EB(),1c===ZC.1d(Q.o.2H)&&Q.KE||te.1h(ZC.AN.OB(d.A.K,Q)))}te.1f>0&&ZC.AK(d.A.A.K+"-3f")&&(ZC.AK(d.A.A.K+"-3f").4o+=te.2M(""))}}1n ne(e){1l e=(e=(e=(e=(e=e.1F(/%1z-8e-2K/g,d.A1-d.X)).1F(/(%c)|(%1z-2K)/g,d.GS)).1F(/(%i)|(%1z-2Y)/g,d.K8)).1F(/(%v)|(%1z-1U)/g,1c!==ZC.1d(d.W[d.K8])?d.W[d.K8]:"")).1F(/(%l)|(%1z-1H)/g,1c!==ZC.1d(d.BW[d.K8])?d.BW[d.K8]:"")}1n le(e){d.K8=e,C=e-d.X,(d.BR.E3.1f>0||e===d.X||!Q||d.BR.I6)&&(Q=1m DP(d)),Q.1S(d.BR),Q.K=d.A.K+"-"+d.BE.1F(/\\-/g,"1b")+"-7E"+e,Q.GM=d.K+"-1P "+d.A.K+"-1z-1P zc-1z-1P",Q.E["p-1M"]=d.A9,d.CF=V,d.DT=U,d.W9(ne);1a t=d.FQ(e);if(d.BR.I6&&d.GK(d.BR,Q,1c,{2Y:e,8g:C,1D:t},d.BR.N8),1c===ZC.1d(d.M3)||-1!==ZC.AT(d.M3,t)){1R(Q.AP=t,Q.Z=Q.C6=d.H.2P()?d.H.mc():ZC.AK(d.A.K+"-3z-ml-0-c"),Q.IP=d.H.2P()?ZC.AK(d.H.K+"-46"):ZC.AK(d.H.K+"-1D"),Q.E.7w=e,Q.1q(),"5q"!==d.BR.o["2s-1r"]&&"5q"!==d.BR.o.1r||-1===f||(Q.C0=f),Q.IY=ne,Q.DB()&&Q.1q(),Q.o["3i-iH"]&&(Q.F=ZC.1k(d.A9)),Q.o[ZC.1b[7]]){1i"5W":Q.iX=m?n+X:n-Q.I-X;1p;1i"3Q-1K":Q.iX=K-Q.I-X;1p;1i"3Q-2z":Q.iX=K+X;1p;1i"3Q-3i":D&&D.S[e]?(D.S[e].2I(),D.S[e].iX<K?Q.iX=K+X:Q.iX=K-Q.I-X):Q.iX=K+X;1p;2q:Q.iX=m?n-Q.I-X:n+X}if(d.AR?Q.iY=d.iY+d.A6+C*d.A9-Q.F/2+(d.DJ?d.A9/2:0):Q.iY=d.iY+d.F-d.A6-C*d.A9-Q.F/2-(d.DJ?d.A9/2:0),W=d.MB(Q,W,"v"),d.BR.o["3i-3y"]&&d.BR.AA%180!=0){1a i=m?1:-1;90===d.BR.AA||3U===d.BR.AA?Q.iX+=i*(Q.I/2-Q.F/2):ZC.DQ(d.BR.AA,0,90)||ZC.DQ(d.BR.AA,3U,2m)?(Q.iX+=i*(Q.I-Q.I*ZC.EF(d.BR.AA))/2,Q.iY-=i*Q.I*ZC.EL(d.BR.AA)/2):ZC.DQ(d.BR.AA,90,3U)&&(Q.iX+=i*(Q.I+Q.I*ZC.EF(d.BR.AA))/2,Q.iY+=i*Q.I*ZC.EL(d.BR.AA)/2)}1a a=d.UL(Q,e,{2C:$,ib:ee,i7:M,b4:j,b8:q,i5:"w",4e:te});j=a.b4,q=a.b8,d.GS++}}}}1O VD 2k ZU{2G(e){1E(e),1g.D8=!0}1q(){1E.1q()}GV(){1a e=1g;e.A1===e.X?e.A9=e.I-e.A6-e.BV:e.A9=(e.I-e.A6-e.BV)/(e.A1-e.X+(e.DJ?1:0))}H9(e){1E.H9(e),1g.GV()}8y(e,t){1E.8y(e,t),1g.GV()}3k(){}5N(){1E.5N()}KW(e,t){1a i,a=1g;i=a.AR?(a.iX+a.I-a.A6-e)/(a.I-a.A6-a.BV):(e-a.iX-a.A6)/(a.I-a.A6-a.BV);1a n=a.B4+ZC.1Y((a.BQ-a.B4)*i);1l"2Z"===a.C8&&t&&(n=1A.5d(a.EN,n)),n}AX(e){1a t=1g,i=t.BQ-t.B4,a=0===i?0:(t.I-t.A6-t.BV)/i;1l"2Z"===t.C8&&0===(e=ZC.HE(e,t.EN))&&(e=t.GX),t.AR?t.iX+t.I-t.A6-(e-t.B4)*a:t.iX+t.A6+(e-t.B4)*a}1t(){1a e,t,i,a,n,l,r,o,s,C,A,Z,c,p,u,h,1b,d,f,g=1g;if(g.AL&&0!==g.W.1f){1E.1t(),"6B"!==g.A.AF&&"8t"!==g.A.AF||1!==g.W.1f||(g.A6=g.I/2);1a B=g.Y1(),v=0,E=1,b=1,m={};1j(t=0,i=g.A.BL.1f;t<i;t++)g.A.BL[t].BE.2x(0,7)===ZC.1b[51]&&g.A.BL[t].B7===g.B7&&v++,g.A.BL[t].BE.2x(0,7)===ZC.1b[51]&&("2q"===g.A.BL[t].B7?(m[g.A.BL[t].BE]=E,E++):(m[g.A.BL[t].BE]=b,b++));1a K=m[g.BE],D="2q"===g.B7;1j(t=0,i=g.A.AY.A7.1f;t<i;t++){1a F=g.A.AY.A7[t],I=F.BT();if(-1!==ZC.AT(I,g.BE)){1a x=g.A.BK(F.BT("k")[0]);x.AX(x.H3),F;1p}}1a X=8;1c!==ZC.1d(g.IV.o[ZC.1b[21]])&&(X=ZC.1k(g.IV.o[ZC.1b[21]]));1a y=4;1c!==ZC.1d(g.IC.o[ZC.1b[21]])&&(y=ZC.1k(g.IC.o[ZC.1b[21]]));1a Y=ZC.1k(g.A.E[g.BE+"-6N"]||-1);g.VW&&(Y=0),"2q"===g.B7?(u=ZC.1k(g.A.Q.DM/v),a=g.iY+g.F+(K-1)*u,-1!==Y&&(a=g.iY+g.F+Y)):(u=ZC.1k(g.A.Q.E2/v),a=g.iY-(K-1)*u,-1!==Y&&(a=g.iY-Y));1a L=a;if(g.A.ID&&(g.A.ID.AL=!0,g.GX===g.B4&&g.HQ===g.BQ&&(g.A.ID.AL=!1),g.A.ID.AL&&0===g.A.ID.B0.BC&&"2q"===g.B7&&(a+=g.A.ID.B0.F+g.AZ/2)),g.E.iY=a,g.AL&&g.TM){1a w=1A.4j((g.A1-g.X)/(g.EE-1)),M=1A.4j((g.A1-g.X)/(g.MA-1)),H=0,N=g.A9*M/(g.GU+1);if(n=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-ml-0-c"),l=ZC.P.E6(n,g.H.AB),r=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-bl-0-c"),o=ZC.P.E6(r,g.H.AB),g.TM||g.YY||1c!==ZC.1d(g.A.o[g.BE])){if("5q"===g.o["1y-1r"]&&-1!==B&&(g.B8=B),g.A.AJ["3d"])(c=ZC.DE.D9(g,g.A,g.iX-ZC.AM.DZ,g.iX-ZC.AM.DZ+g.I,a-ZC.AM.E0,a-ZC.AM.E0,-1,ZC.AM.FS+1,"x")).K=g.K+"-1y",g.A.EX.7G&&(g.A.EX[ZC.1b[28]]>0?c.MI=[1===g.L?-100:100,1,1]:c.MI=[1===g.L?100:-100,1,1]),g.A.CG.2Q(c);1u{s=[[g.iX,L],[g.iX+g.I,L]];1a O=g.K;g.K+="-1y",ZC.CN.1t(l,g,s),g.K=O}1a S=[],P=0,G=0,T=[];if(g.TM||g.YY){if(g.W.1f>0&&g.D4.AL){1a k=1c===ZC.1d(g.D4.o["2b-4c"])?0:ZC.1k(g.D4.o["2b-4c"]),J=1c===ZC.1d(g.D4.o["2b-6i"])?0:ZC.1k(g.D4.o["2b-6i"]);if(g.D4.o.2C&&g.D4.o.2C.1f>0&&!g.A.AJ["3d"])1j(g.GS=0,1b=1m I4(g),t=g.X;t<g.A1+(g.DJ?1:0);t++)g.K8=t,t%M==0&&(C=t-g.X,h=g.GS%g.D4.o.2C.1f,1b.1C(g.D4.o.2C[h]),1b.K=g.K+"-2i-"+t,1b.Z=r,1b.1q(),A="2Z"===g.C8?g.AX(g.W[t]):g.AR?g.iX+g.I-g.A6-C*g.A9:g.iX+g.A6+C*g.A9,1b.iX=A,1b.iY=g.iY+k,1b.I=g.A9*M,1b.F=g.F-k-J,1b.1t(),g.GS++);if(g.D4.AZ>0)1j(g.GS=0,t=g.X;t<=g.A1+(g.DJ?1:0);t++)if(g.K8=t,t===g.X||t===g.A1||t%M==0){(g.D4.E3.1f>0||t===g.X||"2Z"===g.C8)&&((Z=1m CY(g)).Z=Z.C6=r,"2Z"===g.C8?ZC.AO.e0(ZC.HE(g.W[t],g.EN))?Z.1S(g.D4):Z.1S(g.G2):Z.1S(g.D4),Z.IY=le,Z.DB()&&Z.1q()),s=[],C=t-g.X;1a z=g.iY+k,R=g.F-k-J;if(A="2Z"===g.C8?g.AX(g.W[t]):g.AR?g.iX+g.I-g.A6-C*g.A9:g.iX+g.A6+C*g.A9,Z.AL)if(g.A.AJ["3d"]){1a Q=1m CY(g);Q.1S(Z),1c!==ZC.1d(g.o["1z-z"])&&1c!==ZC.1d(e=g.o["1z-z"].2i)&&(Q.1C(e),Q.1q()),Q.A0=Q.AC=Q.B8,c=ZC.DE.D9(Q,g.A,A-ZC.AM.DZ-Q.AZ/2,A-ZC.AM.DZ+Q.AZ/2,a-ZC.AM.E0,a-ZC.AM.E0,0,ZC.AM.FS,"z"),g.A.CG.2Q(c),Z.A0=Z.AC=Z.B8,(c=ZC.DE.D9(Z,g.A,A-ZC.AM.DZ-Z.AZ/2,A-ZC.AM.DZ+Z.AZ/2,z-ZC.AM.E0,z-ZC.AM.E0+R,ZC.AM.FS+2,ZC.AM.FS+2,"y")).K=g.K+"-2i-"+t,g.A.CG.2Q(c)}1u s.1h([A,z],[A,z+R]),Z.K=g.K+"-2i-"+t,ZC.CN.1t(o,Z,s);g.GS++}}if(g.W.1f>0&&g.G2.AL&&N>2&&!g.A.AJ["3d"]){if(g.G2.o.2C&&g.G2.o.2C.1f>0)1j(1b=1m I4(g),t=g.X;t<g.A1+(g.DJ?1:0);t++)if(g.K8=t,t%M==0)1j(C=t-g.X,g.GS=0,p=0;p<=g.GU;p++)h=g.GS%g.G2.o.2C.1f,1b.1C(g.G2.o.2C[h]),1b.K=g.K+"-2i-"+t+"-"+p,1b.Z=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-bl-0-c"),1b.1q(),A=g.AR?g.iX+g.I-g.A6-C*g.A9-(p+1)*N:g.iX+g.A6+C*g.A9+p*N,1b.iX=A,1b.iY=g.iY,1b.I=N,1b.F=g.F,1b.1t(),g.GS++;if(g.G2.AZ>0&&"2Z"!==g.C8)1j(t=g.X;t<g.A1+(g.DJ?1:0);t++)if(g.K8=t,t===g.X||t===g.A1||t%M==0)1j(C=t-g.X,g.GS=0,p=1;p<=g.GU;p++)s=[],(Z=1m CY(g)).1S(g.G2),Z.IY=le,Z.DB()&&Z.1q(),A="2Z"===g.C8?g.AX(g.W[t]+p*(g.W[t+1]-g.W[t])/(g.GU+1)):g.AR?g.iX+g.I-g.A6-C*g.A9-p*N:g.iX+g.A6+C*g.A9+p*N,ZC.DQ(A,g.iX,g.iX+g.I)&&(s.1h([A,g.iY],[A,g.iY+g.F]),Z.AL&&(Z.K=g.K+"-4U-2i-"+p,ZC.CN.1t(o,Z,s))),g.GS++}1a W,V,U;if(g.TN(o,B),g.W.1f>0&&g.IV.AL&&(!g.A.AJ["3d"]||!g.A.EX.7G)){1R(g.IV.o[ZC.1b[7]]){1i"5W":1p;1i"6Z":H+=X;1p;2q:H+=X/2}1j(g.GS=0,d=ZC.AT(g.W,0),t=g.X;t<=g.A1+(g.DJ?1:0);t++){g.K8=t;1a j=-1;if((t===g.X||t===g.A1||t%M==0||ZC.2t(g.o["4n-ci"])&&t===d)&&(s=[],C=t-g.X,(g.IV.E3.1f>0||t===g.X||"2Z"===g.C8)&&(Z=1m CY(g),"2Z"===g.C8?ZC.AO.e0(ZC.HE(g.W[t],g.EN))?Z.1S(g.IV):(Z.1S(g.IC),j=X,X=y):Z.1S(g.IV),"5q"===g.IV.o["1y-1r"]&&-1!==B&&(Z.B8=B),Z.IY=le,Z.DB()&&Z.1q()),A="2Z"===g.C8?g.AX(g.W[t]):g.AR?g.iX+g.I-g.A6-C*g.A9:g.iX+g.A6+C*g.A9,ZC.DQ(A,g.A.Q.iX,g.A.Q.iX+g.A.Q.I))){1R(Z.o[ZC.1b[7]]){1i"5W":s.1h([A,a-(D?X:-X)],[A,a]);1p;1i"6Z":s.1h([A,a],[A,a+(D?X:-X)]);1p;2q:s.1h([A,a+X/2],[A,a-X/2])}if(-1!==j&&(X=j,j=-1),Z.AL){1j(V=ZC.1k(Z.o["2b-x"]||"0"),U=ZC.1k(Z.o["2b-y"]||"0"),W=0;W<s.1f;W++)s[W][0]+=V,s[W][1]+=U;Z.K=g.K+"-43-"+t,ZC.CN.1t(l,Z,s)}g.GS++}}}if(g.W.1f>0&&g.IC.AL&&g.GU>0&&N>5&&!g.A.AJ["3d"]&&"2Z"!==g.C8)1j(t=g.X;t<g.A1+(g.DJ?1:0);t++)if(g.K8=t,t===g.X||t===g.A1||t%M==0)1j(C=t-g.X,g.GS=0,p=1;p<=g.GU;p++){if(s=[],(Z=1m CY(g)).1S(g.IC),"5q"===g.IC.o["1y-1r"]&&-1!==B&&(Z.B8=B),Z.IY=le,Z.DB()&&Z.1q(),A="2Z"===g.C8?g.AX(g.W[t]+p*(g.W[t+1]-g.W[t])/(g.GU+1)):g.AR?g.iX+g.I-g.A6-C*g.A9-p*N:g.iX+g.A6+C*g.A9+p*N,ZC.DQ(A,g.iX,g.iX+g.I)){1R(Z.o[ZC.1b[7]]){1i"5W":s.1h([A,a-(D?y:-y)],[A,a]);1p;2q:s.1h([A,a],[A,a+(D?y:-y)]);1p;1i"9x":s.1h([A,a+y/2],[A,a-y/2])}if(Z.AL){1j(V=ZC.1k(Z.o["2b-x"]||"0"),U=ZC.1k(Z.o["2b-y"]||"0"),W=0;W<s.1f;W++)s[W][0]+=V,s[W][1]+=U;Z.K=g.K+"-4U-43-"+t,ZC.CN.1t(l,Z,s)}}g.GS++}g.VP();1a q=1c,$=g.CF,ee=g.DT,te=1n(e){1a t;if(g.K8=e,C=e-g.X,(g.BR.E3.1f>0||e===g.X||!f||g.BR.I6)&&(f=1m DP(g)),f.1S(g.BR),f.GM=g.K+"-1P "+g.A.K+"-1z-1P zc-1z-1P",f.K=g.A.K+"-"+g.BE.1F(/\\-/g,"1b")+"-7E"+e,g.CF=$,g.DT=ee,g.W9(le),t=("5S"===g.A.AF||g.Q8)&&g.BW.1f?g.FQ(e+g.B4):g.FQ(e),g.BR.I6&&g.GK(g.BR,f,1c,{2Y:e,8g:C,1D:t},g.BR.N8),1c===ZC.1d(g.M3)||-1!==ZC.AT(g.M3,t)){1R(f.AP=t,f.Z=f.C6=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-ml-0-c"),f.IP=g.H.2P()?ZC.AK(g.H.K+"-46"):ZC.AK(g.H.K+"-1D"),f.1q(),"5q"!==g.BR.o["2s-1r"]&&"5q"!==g.BR.o.1r||-1===B||(f.C0=B),f.IY=le,f.E3=g.BR.E3,f.DB()&&f.1q(),f.o[ZC.1b[7]]){1i"5W":f.iY=D?a-f.KR-X:a+X;1p;2q:f.iY=D?a+X:a-f.KR-X}if("2Z"===g.C8?f.iX=g.AX(g.W[e])-f.I/2:g.AR?f.iX=g.iX+g.I-g.A6-C*g.A9-f.I/2-(g.DJ?g.A9/2:0):f.iX=g.iX+g.A6+C*g.A9-f.I/2+(g.DJ?g.A9/2:0),q=g.MB(f,q,"h"),g.BR.o["3i-3y"]&&g.BR.AA%180!=0){1a i=ZC.DQ(g.BR.AA,0,180)?D?1:-1:1===D?-1:1;f.iX+=i*f.I*ZC.EF(g.BR.AA)/2,f.iY+=i*(f.I*ZC.EL(g.BR.AA)/2-f.F*ZC.EL(g.BR.AA)/2)}if(ZC.DQ(f.iX+f.I/2,g.A.Q.iX,g.A.Q.iX+g.A.Q.I)){1a n=g.UL(f,e,{2C:0,ib:S,i7:w,b4:P,b8:G,i5:"h",4e:T});P=n.b4,G=n.b8,g.GS++}}};if(g.W.1f>0&&g.BR.AL)if("2Z"===g.C8){1a ie=[];1j(t=g.X;t<=g.A1;t++)ZC.AO.e0(ZC.HE(g.W[t],g.EN))&&(g.GS=t,te(t),ie.1h(t));1j(t=g.X;t<=g.A1;t++)-1===ZC.AT(ie,t)&&(g.GS=t,te(t))}1u 1j(g.GS=0,te(g.X),g.GS=g.A1-g.X,te(g.A1),-1!==(d=ZC.AT(g.W,0))&&ZC.2t(g.o["4n-ci"])&&(g.GS=d,te(d)),g.GS=1,t=g.X+1;t<g.A1;t++)t%w==0&&te(t)}if(g.M.AL&&g.M.AP&&""!==g.M.AP){(f=1m DP(g)).1S(g.M),f.K=g.A.K+"-"+g.BE.1F(/\\-/g,"1b")+"-jI",f.GM=g.K+"-1H "+g.A.K+"-1z-1H zc-1z-1H",f.AP=g.M.AP,f.Z=g.H.2P()?g.H.mc():ZC.AK(g.A.K+"-3z-ml-0-c"),f.IP=g.H.2P()?ZC.AK(g.H.K+"-46"):ZC.AK(g.H.K+"-1D"),f.1q(),"5q"!==g.M.o["2s-1r"]&&"5q"!==g.M.o.1r||-1===B||(f.C0=B);1a ae=g.iX+(g.AR?g.BV:g.A6),ne=g.I-g.A6-g.BV;1R("b1"===f.o["3G-gf"]&&(ae=g.A.iX,ne=g.A.I),f.OM){1i"1K":f.iX=ae;1p;1i"3G":f.iX=ae+ne/2-f.I/2;1p;1i"2z":f.iX=ae+ne-f.I}f.iY=D?a+H+G:a-G-f.F-H,g.M.iX=f.iX,g.M.iY=f.iY,f.AL&&(g.MB(f,1c,"h"),f.1t(),f.EB(),1c===ZC.1d(f.o.2H)&&f.KE||T.1h(ZC.AN.OB(g.A.K,f)))}T.1f>0&&ZC.AK(g.A.A.K+"-3f")&&(ZC.AK(g.A.A.K+"-3f").4o+=T.2M(""))}}}1n le(e){1l e=(e=(e=(e=(e=e.1F(/%1z-8e-2K/g,g.A1-g.X)).1F(/(%c)|(%1z-2K)/g,g.GS)).1F(/(%i)|(%1z-2Y)/g,g.K8)).1F(/(%v)|(%1z-1U)/g,1c!==ZC.1d(g.W[g.K8])?g.W[g.K8]:"")).1F(/(%l)|(%1z-1H)/g,1c!==ZC.1d(g.BW[g.K8])?g.BW[g.K8]:"")}}}1O YJ 2k hQ{2G(e){1E(e);1a t=1g;t.NN="",t.KS=1,t.GZ=1,t.GJ=0,t.GC=0,t.JQ=.6}1q(){1a e=1g;1E.1q(),e.iX+=e.DY,e.iY+=e.E2,e.I-=e.DY+e.E1,e.F-=e.E2+e.DM,e.YQ("3w","NN"),1c!==ZC.1d(e.o["2e-7f"])&&(e.JQ=ZC.1Y(ZC.8B(e.o["2e-7f"])))}H9(e){1a t=1g;1E.H9(e),0===t.W.1f&&(t.W=[""]);1a i=ZC.AO.ga(t.NN,t.W.1f,!1);t.KS=i[0],t.GZ=i[1],t.GJ=t.I/t.GZ,t.GC=t.F/t.KS}WU(){1a e=1g;1E.WU(),e.GJ=e.I/e.GZ,e.GC=e.F/e.KS}3k(){}5N(){1E.5N()}1t(){1a e,t,i,a,n,l=1g;if(l.AL){if(1E.1t(),e=ZC.P.E6(l.H.2P()?l.H.K+"-46-c":l.A.K+"-3z-ml-0-c",l.H.AB),t=ZC.P.E6(l.H.2P()?l.H.K+"-46-c":l.A.K+"-3z-bl-0-c",l.H.AB),(i=[]).1h([l.iX,l.iY],[l.iX+l.I,l.iY],[l.iX+l.I,l.iY+l.F],[l.iX,l.iY+l.F],[l.iX,l.iY]),ZC.CN.1t(e,l,i),l.D4.AL){if(l.D4.o.2C&&l.D4.o.2C.1f>0)1j(a=0,n=l.W.1f;a<n;a++){1a r=a%l.GZ,o=1A.4h(a/l.GZ),s=1m I4(l),C=a%l.D4.o.2C.1f;s.o=l.D4.o.2C[C],s.K=l.K+"-2i-"+a,s.Z=l.H.2P()?l.H.mc():ZC.AK(l.A.K+"-3z-bl-0-c"),s.1q(),s.iX=l.iX+r*l.GJ,s.iY=l.iY+o*l.GC,s.I=l.GJ,s.F=l.GC,s.1t()}if(l.D4.AZ>0){1j(i=[],a=0;a<=l.GZ;a++)i.1h([l.iX+a*l.GJ,l.iY],[l.iX+a*l.GJ,l.iY+l.F],1c);1j(a=0;a<=l.KS;a++)i.1h([l.iX,l.iY+a*l.GC],[l.iX+l.I,l.iY+a*l.GC],1c);ZC.CN.1t(t,l.D4,i)}}1a A,Z=[];if(l.BR.AL){1j(a=0,n=l.W.1f;a<n;a++)c(a);Z.1f>0&&ZC.AK(l.A.A.K+"-3f")&&(ZC.AK(l.A.A.K+"-3f").4o+=Z.2M(""))}}1n c(e){(l.BR.E3.1f>0||0===e)&&(A=1m DP(l)),A.1S(l.BR);1a t=e%l.GZ,i=1A.4h(e/l.GZ);A.GM=l.K+"-1P "+l.A.K+"-1z-1P zc-1z-1P",A.K=l.A.K+"-"+l.BE.1F(/\\-/g,"1b")+"-7E"+e;1a a=l.FQ(e);if((1c===ZC.1d(l.M3)||-1!==ZC.AT(l.M3,a))&&(A.AP=a,A.Z=l.H.2P()?l.H.mc():ZC.AK(l.A.K+"-3z-ml-0-c"),A.1q(),A.IY=1n(t){1l t=(t=(t=t.1F(/%i/g,e)).1F(/%v/g,1c!==ZC.1d(l.W[e])?l.W[e]:"")).1F(/%l/g,1c!==ZC.1d(l.BW[e])?l.BW[e]:"")},A.E3=l.BR.E3,A.DB()&&A.1q(),A.AL)){1a n="2c";1c!==ZC.1d(l.BR.o[ZC.1b[7]])&&(n=l.BR.o[ZC.1b[7]]);1a r=l.iX+t*l.GJ,o=l.iY+i*l.GC;1R(n){1i"1v-1K":A.iX=r,A.iY=o;1p;1i"1v-2z":A.iX=r+l.GJ-A.I,A.iY=o;1p;1i"2c-1K":A.iX=r,A.iY=o+l.GC-A.F;1p;1i"2c-2z":A.iX=r+l.GJ-A.I,A.iY=o+l.GC-A.F;1p;1i"1v":A.iX=r+l.GJ/2-A.I/2,A.iY=o;1p;1i"2z":A.iX=r+l.GJ-A.I,A.iY=o+l.GC/2-A.F/2;1p;1i"1K":A.iX=r,A.iY=o+l.GC/2-A.F/2;1p;2q:A.iX=r+l.GJ/2-A.I/2,A.iY=o+l.GC-A.F}A.1t(),A.EB(),1c===ZC.1d(l.o.2H)&&A.KE||Z.1h(ZC.AN.OB(l.A.K,A))}}}}1O rf 2k hQ{2G(e){1E(e);1g.DL=0,1g.EO=2m}1q(){1a e,t=1g;1E.1q(),1c!==ZC.1d(e=t.o["3Q-2f"])&&(t.DL=ZC.1k(e)%2m),1c!==ZC.1d(e=t.o.iC)&&(t.EO=ZC.1k(e)%2m,0===t.EO&&(t.EO=2m))}}1O Co 2k ZU{2G(e){1E(e)}1q(){1E.1q()}GV(){}H9(e){1E.H9(e),1g.GV()}3k(){1E.3k()}5N(){1E.5N()}1t(){1E.1t()}}1O Cn 2k Co{2G(e){1E(e);1a t=1g;t.DL=-90,t.EO=180,t.QO=1c,t.IZ=1c,t.CS="3A"}1q(){1a e,t=1g;1E.1q(),1c!==ZC.1d(e=t.o["3Q-2f"])&&(t.DL=ZC.1k(e)%2m),1c!==ZC.1d(e=t.o.iC)&&(t.EO=ZC.1k(e)),1c!==ZC.1d(e=t.o.3G)&&(t.QO=1m DS(t),t.QO.1C(e),t.QO.1q()),1c!==ZC.1d(e=t.o.9B)&&(t.IZ=1m DS(t),t.H.B9.2y(t.IZ.o,[t.A.AF+"."+t.BE+".9B"]),t.IZ.1C(e),t.IZ.1q())}H9(e){1E.H9(e)}3k(){}5N(){1E.5N()}AX(e){1a t=1g,i=t.A.BK("1z"),a=i.iX+i.I/2,n=i.iY+i.F/2,l=t.A.BK("1z-"+t.L);l||(l=t.A.BK("1z"));1a r=ZC.CV(l.GJ/2,l.GC/2)*l.JQ,o=t.BQ-t.B4,s=t.EO/o;1l ZC.AO.BM(a,n,r,t.DL-t.EO/2+s*(e-t.B4))}H1(e){1l 1g.AX(1g.W[e])}zi(e){1a t,i=1g;if(e.F9){1a a,n=i.A.BK("1z-"+i.L);if(n||(n=i.A.BK("1z")),e.AL){1a l=i.A.K+"-3z-"+("1v"===e.B7?"f":"b")+"l-0-c";e.Z=e.C6=ZC.AK(i.H.2P()?n.H.K+"-46-c":l),a=ZC.P.E6(e.Z,i.H.AB);1a r=ZC.CV(n.GJ/2,n.GC/2)*n.JQ,o=ZC.IL(e.o["2b-4c"]||"0");o>0&&o<1&&(o*=r);1a s=ZC.IL(e.o["2b-6i"]||"0");s>0&&s<1&&(s*=r),e.M&&(e.M.Z=i.H.2P()?i.H.mc():ZC.AK(i.A.K+"-3z-ml-0-c"),e.M.K=e.A.A.K+"-"+e.A.BE.1F(/\\-/g,"1b")+"-aI"+e.L,e.M.GM=e.A.K+"-1Q-1H "+e.A.A.K+"-1z-1Q-1H zc-1z-1Q-1H");1j(1a C=0;C<n.W.1f;C++){1a A,Z=C%n.GZ,c=1A.4h(C/n.GZ),p=n.iX+Z*n.GJ+n.GJ/2+n.BJ,u=n.iY+c*n.GC+n.GC/2+n.BC;1R(e.AF){1i"1y":if(e.F9.1f>0){1a h=i.DL-i.EO/2+i.EO*(e.F9[0]-i.B4)/(i.BQ-i.B4);A=h;1a 1b=[];1b.1h(ZC.AO.BM(p,u,o,h)),1b.1h(ZC.AO.BM(p,u,r-s,h)),2===1b.1f&&(ZC.CN.2I(a,e),ZC.CN.1t(a,e,1b))}1p;1i"1N":if(e.F9.1f>1){1a d=i.DL-i.EO/2+i.EO*(e.F9[0]-i.B4)/(i.BQ-i.B4),f=i.DL-i.EO/2+i.EO*(e.F9[1]-i.B4)/(i.BQ-i.B4);A=(d+f)/2;1a g=1m DS(e);g.Z=e.Z,g.1C(e.o),g.1C({2e:r-s,7p:o,1J:"3P","2f-4c":d,"2f-6i":f}),g.K=n.K+"-1Q-"+e.L,g.iX=p,g.iY=u,g.1q(),g.1t()}}if(e.M){1a B;1c!==ZC.1d(t=e.M.o["2b-r"])?B=ZC.1Y(ZC.8B(t)):B<1?B*=r-s-o:B=0;1a v=ZC.AO.BM(p,u,(r-s-o)/2+B,A);e.M.iX=v[0]-e.M.I/2,e.M.iY=v[1]-e.M.F/2,e.M.1t()}}}}}1t(){1a e,t,i,a,n,l,r,o,s,C=1g;if(C.AL&&0!==C.W.1f){C.AR&&C.W.9D(),e=ZC.P.E6(C.H.2P()?C.H.K+"-46-c":C.A.K+"-3z-bl-0-c",C.H.AB);1a A=ZC.1k(C.IV.o[ZC.1b[21]]||8),Z=ZC.1k(C.IC.o[ZC.1b[21]]||4),c=0,p=ZC.BO(1,1A.4j((C.A1-C.X)/(C.MA-1))),u=ZC.BO(1,1A.4j((C.A1-C.X)/(C.EE-1))),h=C.A.BK("1z-"+C.L);h||(h=C.A.BK("1z"));1j(1a 1b,d,f,g=ZC.CV(h.GJ/2,h.GC/2)*h.JQ,B=C.EO/(C.W.1f-1),v=0;v<h.W.1f;v++){1a E=v%h.GZ,b=1A.4h(v/h.GZ),m=h.iX+E*h.GJ+h.GJ/2+h.BJ,K=h.iY+b*h.GC+h.GC/2+h.BC,D=1m DS(C);if(D.Z=C.H.2P()?C.H.mc():ZC.AK(C.A.K+"-3z-bl-0-c"),D.1S(C),D.K=C.K+"-"+v,D.iX=m,D.iY=K,D.AI=g-.5,D.DN=2m===C.EO?"3A":"3P",D.B2=C.DL-C.EO/2+2m,D.BH=C.DL+C.EO/2+2m,D.CK=0,D.1q(),D.1t(),C.D4.AL){if(C.D4.o.2C&&C.D4.o.2C.1f>0)1j(t=0;t<C.W.1f-1;t++)D=1m DS(C),r=t%C.D4.o.2C.1f,D.1C(C.D4.o.2C[r]),D.Z=C.H.2P()?C.H.mc():ZC.AK(C.A.K+"-3z-bl-0-c"),D.iX=m,D.iY=K,D.K=C.K+"-3P-"+t,D.o.1J="3P",D.o[ZC.1b[21]]=g-C.BV,D.CK=C.A6,D.B2=C.DL-C.EO/2+t*B+2m,D.BH=C.DL-C.EO/2+(t+1)*B+2m,D.1q(),D.1t();if(C.D4.AZ>0)1j(t=0,i=C.W.1f;t<i;t++)(1b=1m CY(C)).1S(C.D4),1b.IY=Y,1b.E3=C.D4.E3,1b.DB()&&1b.1q(),(l=[]).1h(ZC.AO.BM(m,K,g-C.BV,C.DL-C.EO/2+t*B)),l.1h(ZC.AO.BM(m,K,C.A6,C.DL-C.EO/2+t*B)),ZC.CN.1t(e,1b,l)}if(C.G2.AL&&C.G2.AZ>0&&C.GU>0)1j(t=0,i=C.W.1f;t<i-1;t++)1j(o=C.DL-C.EO/2+t*B,d=B/(C.GU+1),f=1;f<=C.GU;f++)(1b=1m CY(C)).1S(C.G2),1b.IY=Y,1b.E3=C.G2.E3,1b.DB()&&1b.1q(),(l=[]).1h(ZC.AO.BM(m,K,g-C.BV,C.DL-C.EO/2+t*B+f*d)),l.1h(ZC.AO.BM(m,K,C.A6,C.DL-C.EO/2+t*B+f*d)),ZC.CN.1t(e,1b,l);if(C.VP(),C.H.XN(),C.IZ&&((n=1m DS(C)).1C(C.IZ.o),n.Z=C.H.2P()?C.H.mc():ZC.AK(C.A.K+"-3z-bl-0-c"),n.K=C.K+"-9B",n.iX=m,n.iY=K,2m!==C.EO?(n.o.1J="3P",a=ZC.1k(n.o[ZC.1b[21]]),a=ZC.BO(1,ZC.CV(a,g)),n.CK=g-a,n.o[ZC.1b[21]]=g,n.B2=C.DL-C.EO/2+2m,n.BH=C.DL+C.EO/2+2m):(n.o.1J="3A",a=ZC.1k(n.o[ZC.1b[21]]),a=ZC.BO(1,ZC.CV(a,g)),n.o[ZC.1b[21]]=g),n.1q(),n.AL&&a+n.AQ>0&&(n.1t(),2m===C.EO&&(n.K=C.K+"-9B-5W",n.o[ZC.1b[21]]=g-a,n.1q(),n.1t())),C.IZ.o.2C&&C.IZ.o.2C.1f>0||C.IZ.o.an))1j(t=0;t<C.W.1f-1;t++)(n=1m DS(C)).1C(C.IZ.o),C.IZ.o.2C&&(r=t%C.IZ.o.2C.1f,n.1C(C.IZ.o.2C[r])),n.Z=C.H.2P()?C.H.mc():ZC.AK(C.A.K+"-3z-bl-0-c"),n.K=C.K+"-9B-"+t,n.iX=m,n.iY=K,n.o.1J="3P",a=ZC.1k(n.o[ZC.1b[21]]),a=ZC.BO(0,ZC.CV(a,g)),n.CK=g-a,n.o[ZC.1b[21]]=g,n.B2=C.DL-C.EO/2+t*B+2m,n.BH=C.DL-C.EO/2+(t+1)*B+2m+.25,n.1q(),n.IY=Y,n.E3=C.IZ.E3,n.DB()&&n.1q(),n.AL&&a+n.AQ>0&&n.1t();if(C.IV.AL){1R(C.IV.o[ZC.1b[7]]){1i"6Z":c+=A;1p;2q:c+=A/2}1j(l=[],t=0,i=C.W.1f;t<i;t++)if(t===C.X||t===C.A1||t%p==0){1R(o=C.DL-C.EO/2+t*B,s=[0,0],C.IV.o[ZC.1b[7]]){1i"5W":s=[-A,0];1p;1i"6Z":s=[0,A];1p;2q:s=[-A/2,A/2]}l.1h(ZC.AO.BM(m,K,g+s[0],o),ZC.AO.BM(m,K,g+s[1],o),1c)}ZC.CN.1t(e,C.IV,l)}if(C.IC.AL&&C.GU>0){1j(l=[],t=0,i=C.W.1f;t<i-1;t++)1j(o=C.DL-C.EO/2+t*B,d=B/(C.GU+1),f=1;f<=C.GU;f++){1R(s=[0,0],C.IC.o[ZC.1b[7]]){1i"5W":s=[-Z,0];1p;1i"6Z":s=[0,Z];1p;2q:s=[-Z/2,Z/2]}l.1h(ZC.AO.BM(m,K,g+s[0],o+f*d),ZC.AO.BM(m,K,g+s[1],o+f*d),1c)}ZC.CN.1t(e,C.IC,l)}if(C.BR.AL){1a F=[];1j(t=0,i=C.W.1f;t<i;t++)if(t===C.X||t===C.A1||t%u==0){1a I=1m DP(C);I.1C(C.BR.o),I.GM=C.K+"-1P "+C.A.K+"-1z-1P zc-1z-1P",I.K=C.A.K+"-"+C.BE.1F(/\\-/g,"1b")+"-7E"+v+"1b"+t;1a x=C.FQ(t);if(I.AP=x,I.Z=I.C6=C.H.2P()?C.H.mc():ZC.AK(C.A.K+"-3z-ml-0-c"),I.1q(),"3i"===I.o.2f&&(I.AA=C.DL-C.EO/2+t*B+90),I.IY=Y,I.E3=C.BR.E3,I.DB()&&I.1q(),I.AL){I.F=I.KR;1a X,y=1.15*1A.5A(I.I*I.I/4+I.F*I.F/4);1R(C.BR.o[ZC.1b[7]]){1i"5W":X=ZC.AO.BM(m,K,g+C.BR.DR-y-5+c,C.DL-C.EO/2+t*B);1p;2q:X=ZC.AO.BM(m,K,g+C.BR.DR+y+c,C.DL-C.EO/2+t*B)}I.iX=X[0]-I.I/2,I.iY=X[1]-I.F/2,I.1t(),I.EB(),1c===ZC.1d(C.o.2H)&&I.KE||(1c!==ZC.1d(C.o.2H)&&(C.o.2H.1D=C.o.2H.1D||"%1z-1U"),F.1h(ZC.AN.OB(C.A.K,I)))}}F.1f>0&&ZC.AK(C.A.A.K+"-3f")&&(ZC.AK(C.A.A.K+"-3f").4o+=F.2M(""))}}}1n Y(e){1l e=(e=(e=(e=e.1F(/%i/g,t)).1F(/%k/g,t)).1F(/%v/g,1c!==ZC.1d(C.W[t])?C.W[t]:"")).1F(/%l/g,1c!==ZC.1d(C.BW[t])?C.BW[t]:"")}}6D(){1a e=1g,t=e.A.BK("1z-"+e.L);t||(t=e.A.BK("1z"));1j(1a i=0;i<t.W.1f;i++){1a a=i%t.GZ,n=1A.4h(i/t.GZ),l=t.iX+a*t.GJ+t.GJ/2+t.BJ,r=t.iY+n*t.GC+t.GC/2+t.BC;if(e.QO){1a o=1m DS(e);o.1C(e.QO.o),o.Z=o.C6=e.H.2P()?e.H.mc("1v"):ZC.AK(e.A.K+"-3z-ml-0-c"),o.K=e.K+"-"+i+"-3G",o.iX=l,o.iY=r,o.o.1J=o.o.1J||"3A",o.1q(),o.AL&&o.1t()}}}}1O Cz 2k rf{2G(e){1E(e);1a t=1g;t.DL=0,t.CS="CA",t.DJ=!1}1q(){1E.1q(),1g.4A([["7j","CS"],["3Q-2f","DL","i"],["Db","DJ","b"]])}T6(){1a e=1g,t=ZC.BO(e.W.1f,e.BW.1f);e.EE=ZC.CV(30,t)}H9(e){1E.H9(e)}3k(){}5N(){1E.5N()}jV(e,t){1a i=1g,a=i.A.BK("1z"),n=a.iX+a.I/2,l=a.iY+a.F/2,r=i.EO/(i.W.1f-(2m===i.EO||i.DJ?0:1)),o=i.A.BK(ZC.1b[52]);1l ZC.AO.BM(n,l,t+o.A6,i.DL+e*r)}H1(e){1a t=1g.A.BK("1z"),i=ZC.CV(t.I/2,t.F/2)*t.JQ;1l 1g.jV(e,i)}AX(e){1a t=1g,i=ZC.AT(t.W,e);-1===i&&(i=0);1a a=t.A.BK("1z"),n=ZC.CV(a.I/2,a.F/2)*a.JQ;1l t.jV(i,n)}1t(){1a e,t,i,a,n,l,r,o,s=1g;if(s.AL&&0!==s.W.1f){1E.1t();1a C=ZC.BO(1,1A.4h((s.A1-s.X)/(s.MA-1))),A=ZC.BO(1,1A.4h((s.A1-s.X)/(s.EE-1)));e=ZC.P.E6(s.H.2P()?s.H.K+"-46-c":s.A.K+"-3z-ml-0-c",s.H.AB),t=ZC.P.E6(s.H.2P()?s.H.K+"-46-c":s.A.K+"-3z-bl-0-c",s.H.AB);1a Z,c=ZC.1k(s.IV.o[ZC.1b[21]]||8),p=0,u=s.A.BK("1z"),h=ZC.CV(u.I/2,u.F/2)*u.JQ,1b=s.A.BK(ZC.1b[52]),d=u.iX+u.I/2,f=u.iY+u.F/2,g=s.EO/(s.W.1f-(2m===s.EO||s.DJ?0:1));if(s.D4.AL){if(s.D4.o.2C&&s.D4.o.2C.1f>0){1a B=0;1j(i=0,a=s.W.1f-(2m===s.EO||s.DJ?0:1);i<a;i+=C){if(o=s.DL+i*g,"3A"===s.CS){1a v=1m DS(s);n=B%s.D4.o.2C.1f,v.1C(s.D4.o.2C[n]),v.Z=s.H.2P()?s.H.mc():ZC.AK(s.A.K+"-3z-bl-0-c"),v.iX=d,v.iY=f,v.o.1J="3P",v.o[ZC.1b[21]]=h,v.CK=1b.A6,v.B2=o,v.BH=o+C*g,v.1q(),v.1t()}1u{1a E=1m DS(s);n=B%s.D4.o.2C.1f,E.o=s.D4.o.2C[n],E.Z=s.H.2P()?s.H.mc():ZC.AK(s.A.K+"-3z-bl-0-c"),E.AZ=0,E.AQ=0,E.EV=0,E.G9=0,(l=[]).1h(ZC.AO.BM(d,f,1b.A6,o),ZC.AO.BM(d,f,h,o),ZC.AO.BM(d,f,h,o+C*g),ZC.AO.BM(d,f,1b.A6,o+C*g)),E.D=l,E.1q();1a b=s.A.Q;E.CZ=[b.iX,b.iY,b.iX+b.I,b.iY+b.F],E.1t()}B++}}if(s.D4.AZ>0)1j(i=0,a=s.W.1f+(s.DJ?1:0);i<a;i+=C)o=s.DL+i*g,(r=1m CY(s)).1S(s.D4),r.K=s.K+"-2i-"+i,r.IY=x,r.E3=s.D4.E3,r.DB()&&r.1q(),(l=[]).1h(ZC.AO.BM(d,f,h,o),ZC.AO.BM(d,f,1b.A6,o)),ZC.CN.1t(t,r,l)}if(s.IV.AL){1R(s.IV.o[ZC.1b[7]]){1i"5W":1p;1i"6Z":p+=c;1p;2q:p+=c/2}1j(l=[],i=0,a=s.W.1f+(s.DJ?1:0);i<a;i+=C){1R(o=s.DL+i*g,(r=1m CY(s)).1S(s.IV),r.o[ZC.1b[7]]){1i"5W":l=[ZC.AO.BM(d,f,h-c,o),ZC.AO.BM(d,f,h,o)];1p;1i"6Z":l=[ZC.AO.BM(d,f,h,o),ZC.AO.BM(d,f,h+c,o)];1p;2q:l=[ZC.AO.BM(d,f,h-c/2,o),ZC.AO.BM(d,f,h+c/2,o)]}1j(1a m=ZC.1k(r.o["2b-x"]||"0"),K=ZC.1k(r.o["2b-y"]||"0"),D=0;D<l.1f;D++)l[D]&&(l[D][0]+=m,l[D][1]+=K);r.K=s.K+"-43-"+i,ZC.CN.1t(e,r,l)}}1a F,I=[];if(s.BR.AL){1j(i=0,a=s.W.1f;i<a;i+=A)X(i);I.1f>0&&ZC.AK(s.A.A.K+"-3f")&&(ZC.AK(s.A.A.K+"-3f").4o+=I.2M(""))}}1n x(e){1l e=(e=(e=e.1F(/(%i)|(%1z-2Y)/g,i)).1F(/(%v)|(%1z-1U)/g,1c!==ZC.1d(s.W[i])?s.W[i]:"")).1F(/(%l)|(%1z-1H)/g,1c!==ZC.1d(s.BW[i])?s.BW[i]:"")}1n X(e){(s.BR.E3.1f>0||0===e)&&(Z=1m DP(s)),Z.1S(s.BR),Z.GM=s.K+"-1P "+s.A.K+"-1z-1P zc-1z-1P",Z.K=s.A.K+"-"+s.BE.1F(/\\-/g,"1b")+"-7E"+e;1a t=s.FQ(e);if(1c===ZC.1d(s.M3)||-1!==ZC.AT(s.M3,t)){Z.AP=t,Z.Z=Z.C6=s.H.2P()?s.H.mc():ZC.AK(s.A.K+"-3z-ml-0-c"),Z.1q(),Z.IY=1n(t){1l t=(t=(t=t.1F(/(%i)|(%1z-2Y)/g,e)).1F(/(%v)|(%1z-1U)/g,1c!==ZC.1d(s.W[e])?s.W[e]:"")).1F(/(%l)|(%1z-1H)/g,1c!==ZC.1d(s.BW[e])?s.BW[e]:"")},Z.E3=s.BR.E3,Z.DB()&&Z.1q();1a i=ZC.IL(Z.DR,!0);if(i>-1&&i<1&&(i*=h),o=s.DL+e*g+(s.DJ?g/2:0),s.BR.o["3i-3y"]){1a a=1.25;1-ZC.2l(ZC.EF(o))>.7&&(a=2.5*(1-ZC.2l(ZC.EF(o))));1a n=(1-ZC.2l(ZC.EF(o)))*Z.DF*a;F=ZC.AO.BM(d,f,h+i+p+n,o),ZC.EF(o)>0?(Z.iX=F[0],Z.iY=F[1]-Z.F/2):(Z.iX=F[0]-Z.I,Z.iY=F[1]-Z.F/2)}1u s.BR.o["3i-gm"]?(F=ZC.AO.BM(d,f,h+i+p+Z.F/2,o),Z.iX=F[0]-Z.I/2,Z.iY=F[1]-Z.F/2,Z.AA=o+90):(F=ZC.AO.BM(d,f,h+i+p+ZC.2l(10*ZC.EL(o))+ZC.2l(Z.I/2*ZC.EF(o)),o),Z.iX=F[0]-Z.I/2,Z.iY=F[1]-Z.F/2);Z.AL&&(Z.1t(),Z.EB(),1c===ZC.1d(s.o.2H)&&Z.KE||(1c!==ZC.1d(s.o.2H)&&(s.o.2H.1D=s.o.2H.1D||"%1z-1U"),I.1h(ZC.AN.OB(s.A.K,Z))))}}}}1O Cr 2k ZU{2G(e){1E(e)}HZ(e){1E.1q()}GV(){1a e=1g,t=e.A.BK("1z"),i=ZC.CV(t.I/2,t.F/2)*t.JQ;e.A9=(i-e.A6-e.BV)/(e.A1-e.X)}H9(e){1E.H9(e),1g.GV()}T6(){1a e=1g,t=e.A.BK("1z"),i=ZC.CV(t.I/2,t.F/2)*t.JQ;e.EE=ZC.BO(2,ZC.1k((i-e.A6-e.BV)/20))}ST(e){1a t=1g,i=t.A.BK("1z"),a=ZC.CV(i.I/2,i.F/2)*i.JQ,n=t.BQ-t.B4,l=(a-t.A6-t.BV)/n;1l(e-t.B4)*l}AX(e){1a t=1g,i=t.ST(e),a=t.A.BK("1z-k"),n=t.A.BK("1z"),l=n.iX+n.I/2+n.BJ,r=n.iY+n.F/2+n.BC;1l ZC.AO.BM(l,r,i,a.DL)}3k(){}5N(){1E.5N()}1t(){1a e,t,i,a,n,l,r,o=1g;if(o.AL&&0!==o.W.1f){1E.1t(),e=ZC.P.E6(o.H.2P()?o.H.K+"-46-c":o.A.K+"-3z-ml-0-c",o.H.AB),t=ZC.P.E6(o.H.2P()?o.H.K+"-46-c":o.A.K+"-3z-bl-0-c",o.H.AB);1a s,C,A=o.A.BK("1z-k"),Z=ZC.1k(o.IV.o[ZC.1b[21]]||8),c=1A.4j((o.A1-o.X)/(o.EE-1)),p=1A.4j((o.A1-o.X)/(o.MA-1)),u=o.A.BK("1z"),h=ZC.CV(u.I/2,u.F/2)*u.JQ,1b=u.iX+u.I/2+u.BJ,d=u.iY+u.F/2+u.BC,f=A.EO/(A.W.1f-(2m===A.EO||A.DJ?0:1));if(o.D4.AL){if(o.D4.o.2C&&o.D4.o.2C.1f>0)1j(i=0,a=o.W.1f;i<a-1;i++){1a g=i%o.D4.o.2C.1f;if("3A"===A.CS){1a B=1m DS(o);B.Z=o.H.2P()?o.H.mc():ZC.AK(o.A.K+"-3z-bl-0-c"),B.1C(o.D4.o.2C[g]),B.o.1J="3P",B.o[ZC.1b[21]]=o.A6+(i+1)*o.A9,B.iX=1b,B.iY=d,B.CK=o.A6+i*o.A9,2m===A.EO?(B.B2=0,B.BH=2m):(B.B2=A.DL,B.BH=A.DL+A.EO),B.1q(),B.1t()}1u{1a v=1m DS(o);1j(v.1C(o.D4.o.2C[g]),v.Z=o.H.2P()?o.H.mc():ZC.AK(o.A.K+"-3z-bl-0-c"),r=[],n=0,l=A.W.1f;n<l;n++)r.1h(ZC.AO.BM(1b,d,o.A6+i*o.A9,A.DL+n*f));1j(2m===A.EO&&r.1h(ZC.AO.BM(1b,d,o.A6+i*o.A9,A.DL),ZC.AO.BM(1b,d,o.A6+(i+1)*o.A9,A.DL)),n=A.W.1f-1;n>=0;n--)r.1h(ZC.AO.BM(1b,d,o.A6+(i+1)*o.A9,A.DL+n*f));v.D=r,v.1q(),v.AZ=0,v.AQ=0,v.EV=0,v.G9=0;1a E=o.A.Q;v.CZ=[E.iX,E.iY,E.iX+E.I,E.iY+E.F],v.1t()}}if(o.D4.AZ>0)1j(i=0,a=o.W.1f;i<a;i++)if(i===o.X||i===o.A1||i%p==0)if("3A"===A.CS){1a b=1m DS(o);b.Z=o.H.2P()?o.H.mc():ZC.AK(o.A.K+"-3z-bl-0-c"),b.1C(o.D4.o);1a m=A.EO;2m===m&&(m=17A),b.1C({1J:"6w",2e:o.A6+i*o.A9,bR:A.DL-.25,9P:A.DL+m+.25}),b.K=o.K+"-2i-"+i,b.iX=1b,b.iY=d,b.1q(),b.IY=X,b.E3=o.D4.E3,b.DB()&&b.1q(),b.1t()}1u{1a K=1m CY(o);1j(K.1S(o.D4),K.K=o.K+"-2i-"+i,K.IY=X,K.E3=o.D4.E3,K.DB()&&K.1q(),r=[],n=0,l=A.W.1f-(2m===A.EO||A.DJ?0:1);n<l;n++)r.1h(ZC.AO.BM(1b,d,o.A6+i*o.A9,A.DL+n*f),ZC.AO.BM(1b,d,o.A6+i*o.A9,A.DL+(n+1)*f));ZC.CN.1t(t,K,r)}}if(o.PB.AL&&o.PB.AZ>0&&((r=[]).1h(ZC.AO.BM(1b,d,o.A6,A.DL),ZC.AO.BM(1b,d,h-o.BV,A.DL)),ZC.CN.1t(e,o.PB,r)),o.IV.AL){1R(o.IV.o[ZC.1b[7]]){1i"5W":1p;1i"6Z":Z;1p;2q:Z/2}1j(r=[],i=0,a=o.W.1f;i<a;i++)if(i===o.X||i===o.A1||i%p==0){1a D=ZC.AO.BM(1b,d,o.A6+i*o.A9,A.DL);1R(o.IV.o[ZC.1b[7]]){1i"5W":r.1h([D[0],D[1]]),A.DL%180==0?r.1h([D[0],D[1]-Z]):r.1h([D[0]-Z,D[1]]),r.1h(1c);1p;1i"6Z":r.1h([D[0],D[1]]),A.DL%180==0?r.1h([D[0],D[1]+Z]):r.1h([D[0]+Z,D[1]]),r.1h(1c);1p;2q:A.DL%180==0?r.1h([D[0],D[1]-Z/2],[D[0],D[1]+Z/2]):r.1h([D[0]-Z/2,D[1]],[D[0]+Z/2,D[1]]),r.1h(1c)}}1j(1a F=ZC.1k(o.IV.o["2b-x"]||"0"),I=ZC.1k(o.IV.o["2b-y"]||"0"),x=0;x<r.1f;x++)r[x]&&(r[x][0]+=F,r[x][1]+=I);ZC.CN.1t(e,o.IV,r)}if(C=[],o.W.1f>0&&o.BR.AL)1j(o.GS=0,Y(o.X),o.GS=o.A1-o.X,Y(o.A1),o.GS=1,i=o.X+1;i<o.A1;i++)i%c==0&&Y(i);C.1f>0&&ZC.AK(o.A.A.K+"-3f")&&(ZC.AK(o.A.A.K+"-3f").4o+=C.2M(""))}1n X(e){1l e=(e=(e=e.1F(/(%i)|(%1z-2Y)/g,i)).1F(/(%v)|(%1z-1U)/g,1c!==ZC.1d(o.W[i])?o.W[i]:"")).1F(/(%l)|(%1z-1H)/g,1c!==ZC.1d(o.BW[i])?o.BW[i]:"")}1n y(e){1l e=(e=(e=(e=e.1F(/(%c)|(%1z-2K)/g,o.GS)).1F(/(%i)|(%1z-2Y)/g,o.K8)).1F(/(%v)|(%1z-1U)/g,1c!==ZC.1d(o.W[o.K8])?o.W[o.K8]:"")).1F(/(%l)|(%1z-1H)/g,1c!==ZC.1d(o.BW[o.K8])?o.BW[o.K8]:"")}1n Y(e){o.K8=e,(s=1m DP(o)).1S(o.BR),s.K=o.A.K+"-"+o.BE.1F(/\\-/g,"1b")+"-7E"+e,s.GM=o.K+"-1P "+o.A.K+"-1z-1P zc-1z-1P";1a t=o.FQ(e);if(s.AP=t,1c===ZC.1d(o.M3)||-1!==ZC.AT(o.M3,t)){s.Z=s.C6=o.H.2P()?o.H.mc():ZC.AK(o.A.K+"-3z-fl-0-c"),s.1q(),s.IY=y,s.DB()&&s.1q();1a i=ZC.AO.BM(1b,d,o.A6+e*o.A9,A.DL);1R(s.F=s.KR,s.I=s.NU,A.DL%180==0?(s.iX=i[0]-s.I/2,s.iY=i[1]):(s.iX=i[0],s.iY=i[1]-s.F/2),o.IV.o[ZC.1b[7]]){1i"5W":1p;1i"6Z":A.DL%180==0?s.iY+=Z:s.iX+=Z;1p;2q:A.DL%180==0?s.iY+=Z/2:s.iX+=Z/2}s.AL&&(s.1t(),s.EB(),1c===ZC.1d(o.o.2H)&&s.KE||(1c!==ZC.1d(o.o.2H)&&(o.o.2H.1D=o.o.2H.1D||"%1z-1U"),C.1h(ZC.AN.OB(o.A.K,s))))}}}}1O Bs 2k DS{2G(e){1E(e);1a t=1g;t.C5=.95,t.L=0,t.AF=1c,t.M=1c,t.F9=1c,t.sP=!1,t.B7="2c",t.A6=0,t.BV=0,t.MQ="5h",t.OC="5h",t.PS=[5,5],t.lq=[0,0],t.ZD=""}1q(){1E.1q();1a e,t=1g;t.4A([["1J","AF"],["1U-5z","sP","b"],["2b-4c","A6","i"],["2b-6i","BV","i"],[ZC.1b[7],"B7"],["17e-1z","ZD"],["1H-6d","MQ"],["1H-ic","OC"],["5z","F9"]]),1c===ZC.1d(t.o.2n)&&(t.o.2n="1N"===t.AF?.25:.95),1c!==ZC.1d(e=t.o["1H-a1"])&&("4d"==1w e&&e.1f?(t.PS[0]=ZC.1k(e[0]||"5"),t.PS[1]=ZC.1k(e[1]||"5")):t.PS[0]=t.PS[1]=ZC.1k(e||"5")),t.4A([["2n","C5","f",0,1]]),1c===ZC.1d(e=t.o.1H)&&1c===ZC.1d(t.o.1D)||(t.M=1m DP(t),t.A.A.A.B9.2y(t.M.o,["("+t.A.AF+").4y.1Q.1H"]),1c!==ZC.1d(t.o.1D)&&t.M.1C({1D:t.o.1D}),t.M.1C(e),t.M.1q(),t.lq=[t.M.BJ,t.M.BC])}1t(){1a e,t,i,a,n,l,r,o=1g;if(o.F9)if(-1===o.A.BE.1L("1z-r")){if(o.AL){1a s,C,A,Z,c=o.A,p=o.A.A.Q.AQ,u=c.A.K+"-3z-"+("1v"===o.B7?"f":"b")+"l-0-c";o.Z=o.C6=ZC.AK(c.H.2P()?c.H.K+"-46-c":u),e=ZC.P.E6(o.Z,c.H.AB),n=[];1a h,1b,d=0,f=0;o.BJ>-1&&o.BJ<1&&(o.BJ=1A.4j(o.BJ*c.A9)),o.BC>-1&&o.BC<1&&(o.BC=1A.4j(o.BC*c.A9)),o.M&&(o.M.Z=c.H.2P()?c.H.mc():ZC.AK(c.A.K+"-3z-ml-0-c"),o.M.K=o.A.A.K+"-"+o.A.BE.1F(/\\-/g,"1b")+"-aI"+o.L,o.M.GM=o.A.K+"-1Q-1H "+o.A.A.K+"-1z-1Q-1H zc-1z-1Q-1H");1a g=1n(e,t){1a i;1l-1!==(t+"").1L("%")?(i=ZC.1Y(t.1F("%","")),i="k"===e.AF?ZC.1k(i*(e.EG-e.E7)/100):i*(e.HQ-e.GX)/100):i=t,o.sP||"v"===e.AF?e.AX(i):e.H1(i)};if("4B"===o.AF){1a B,v,E,b;1j(1b=o.A.A,"k"===c.AF?(B=c,v=""===o.ZD?1b.BT("v")[0]:1b.BK(o.ZD)||1b.BT("v")[0]):"v"===c.AF&&(v=c,B=""===o.ZD?1b.BT("k")[0]:1b.BK(o.ZD)||1b.BT("k")[0]),l=0,r=o.F9.1f;l<r;l++)E=g(B,o.F9[l][0]),b=v.AX(o.F9[l][1]),n.1h([E,b]),d+=E,f+=b;if(d/=n.1f,f/=n.1f,n.1f>=3){if(n[0].2M("/")!==n[n.1f-1].2M("/")&&n.1h([n[0][0],n[0][1]]),c.A.AJ["3d"])1j(c.A.NB(),t=0,i=n.1f;t<i;t++)a=1m CB(c.A,n[t][0]-ZC.AM.DZ,n[t][1]-ZC.AM.E0,ZC.AM.FS),n[t][0]=a.E9[0],n[t][1]=a.E9[1];(h=1m DS(o.A)).K=c.K+"-1Q-"+o.L,h.Z=h.C6=c.H.2P()?c.H.mc():ZC.AK(u),h.1S(o),h.AZ=0,h.AQ=0,h.EV=0,h.G9=0,h.D=n,h.1q(),h.1t()}}1u if("1y"===o.AF){if(-1!==c.BE.1L(ZC.1b[50])?1===o.F9.1f?s=C=g(c,o.F9[0]):2===o.F9.1f&&(s=g(c,o.F9[0]),C=g(c,o.F9[1])):-1!==c.BE.1L(ZC.1b[51])&&(1===o.F9.1f?s=C=g(c,o.F9[0]):2===o.F9.1f&&(s=g(c,o.F9[0]),C=g(c,o.F9[1]))),-1!==c.BE.1L(ZC.1b[50])&&c.D8||-1!==c.BE.1L(ZC.1b[51])&&!c.D8?(n.1h([c.iX+o.A6,s],[c.iX+c.I-o.BV,C]),o.M&&("5B"===o.MQ?o.M.iX=c.iX+c.I-o.M.I-o.BV:o.M.iX=c.iX+o.A6,"5B"===o.MQ?o.M.iY=C-(c.AR?0:o.M.F):o.M.iY=s-(c.AR?0:o.M.F))):(n.1h([s,c.iY+c.F-o.A6],[C,c.iY+o.BV]),o.M&&("5B"===o.MQ?o.M.iX=C-(c.AR?o.M.I:0):o.M.iX=s-(c.AR?o.M.I:0),"5B"===o.MQ?o.M.iY=c.iY+o.M.I-o.M.F+o.BV:o.M.iY=c.iY+c.F-o.M.F-o.A6)),c.A.AJ["3d"])1j(c.A.NB(),t=0,i=n.1f;t<i;t++)a=1m CB(c.A,n[t][0]-ZC.AM.DZ,n[t][1]-ZC.AM.E0,ZC.AM.FS),n[t][0]=a.E9[0],n[t][1]=a.E9[1];2===n.1f&&(ZC.CN.2I(e,o),ZC.CN.1t(e,o,n))}1u if("1N"===o.AF&&(-1!==c.BE.1L(ZC.1b[50])?2===o.F9.1f?(s=A=g(c,o.F9[0]),C=Z=g(c,o.F9[1])):4===o.F9.1f&&(s=g(c,o.F9[0]),C=g(c,o.F9[1]),A=g(c,o.F9[2]),Z=g(c,o.F9[3])):-1!==c.BE.1L(ZC.1b[51])&&(2===o.F9.1f?(s=A=c.AX(o.F9[0]),C=Z=c.AX(o.F9[1])):4===o.F9.1f&&(s=c.AX(o.F9[0]),C=c.AX(o.F9[1]),A=c.AX(o.F9[2]),Z=c.AX(o.F9[3]))),C=s===C?C+1:C,Z=A===Z?Z+1:Z,-1!==c.BE.1L(ZC.1b[50])&&c.D8||-1!==c.BE.1L(ZC.1b[51])&&!c.D8?(n.1h([c.iX+p,s],[c.iX+c.I-p,A],[c.iX+c.I-p,Z],[c.iX+p,C],[c.iX+p,s]),o.M&&("5B"===o.MQ?o.M.iX=c.iX+c.I-o.M.I-o.BV:o.M.iX=c.iX+o.A6,"5B"===o.MQ?o.M.iY=C-(c.AR?0:o.M.F):o.M.iY=s-(c.AR?0:o.M.F))):(n.1h([s,c.iY+c.F-p],[A,c.iY+p],[Z,c.iY+p],[C,c.iY+c.F-p],[s,c.iY+c.F-p]),o.M&&("5B"===o.MQ?o.M.iX=C-(c.AR?o.M.I:0):o.M.iX=s-(c.AR?o.M.I:0),"5B"===o.MQ?o.M.iY=c.iY+o.M.I-o.M.F+o.BV:o.M.iY=c.iY+c.F-o.M.F-o.A6)),n.1f>=4)){if(c.A.AJ["3d"])1j(c.A.NB(),t=0,i=n.1f;t<i;t++)a=1m CB(c.A,n[t][0]-ZC.AM.DZ,n[t][1]-ZC.AM.E0,ZC.AM.FS),n[t][0]=a.E9[0],n[t][1]=a.E9[1];(h=1m DS(o.A)).K=c.K+"-1Q-"+o.L,h.Z=h.C6=c.H.2P()?c.H.mc():ZC.AK(u),h.1S(o),h.AZ=0,h.AQ=0,h.EV=0,h.G9=0,h.D=n,h.1q(),h.BJ=o.BJ,h.BC=o.BC,h.1t()}1a m=!0,K=c.A.Q;2===n.1f&&(-1!==c.BE.1L(ZC.1b[50])&&c.D8||-1!==c.BE.1L(ZC.1b[51])&&!c.D8?ZC.DQ(n[0][1],K.iY-2,K.iY+K.F+2)&&ZC.DQ(n[1][1],K.iY-2,K.iY+K.F+2)||(m=!1):ZC.DQ(n[0][0],K.iX-2,K.iX+K.I+2)&&ZC.DQ(n[1][0],K.iX-2,K.iX+K.I+2)||(m=!1));1a D=o.OC;if(o.M&&m&&("4B"===o.AF?(o.M.iX=ZC.1k(d-o.M.I/2),o.M.iY=ZC.1k(f-o.M.F/2)):("3i"===o.OC&&(D=-1!==c.BE.1L(ZC.1b[50])&&!c.D8||-1!==c.BE.1L(ZC.1b[51])&&c.D8?s<c.iX+c.I/2?"5h":"5B":s>c.iY+c.F/2?"5h":"5B"),o.M.BJ=o.M.BC=0,(-1!==c.BE.1L(ZC.1b[50])&&!c.D8||-1!==c.BE.1L(ZC.1b[51])&&c.D8)&&1c===ZC.1d(o.M.o.2f)&&(o.M.AA=3U),-1!==c.BE.1L(ZC.1b[50])&&!c.D8||-1!==c.BE.1L(ZC.1b[51])&&c.D8?(o.M.AA%180==90&&(o.M.BJ-=(c.AR?-1:1)*(o.M.I/2-o.M.F/2),o.M.BC-=o.M.I/2-o.M.F/2,"5B"===o.MQ&&(o.M.BC=-o.M.I/2+o.M.F/2),"5B"===D&&(o.M.BJ-=o.M.F)),o.M.AA%180==0&&("5B"===o.MQ&&(o.M.BC=-o.M.I+o.M.F),"5B"===D&&(o.M.BJ-=o.M.I))):(o.M.AA%180==90&&(o.M.BJ-=o.M.I/2-o.M.F/2,o.M.BC-=(c.AR?-1:1)*(o.M.I/2-o.M.F/2),"5B"===o.MQ&&(o.M.BJ=o.M.I/2-o.M.F/2),"5B"===D&&(o.M.BC+=o.M.I)),o.M.AA%180==0&&"5B"===D&&(o.M.BC+=o.M.F)),o.M.BJ+=o.lq[0]+o.BJ,o.M.BC+=o.lq[1]+o.BC),c.A.AJ["3d"]&&(a=1m CB(c.A,o.M.iX-ZC.AM.DZ,o.M.iY-ZC.AM.E0,ZC.AM.FS),o.M.iX=a.E9[0],o.M.iY=a.E9[1]),ZC.DQ(o.M.iX+o.M.BJ+(o.M.AA%180==0?o.M.I/2:o.M.F/2),o.A.A.Q.iX-o.PS[0],o.A.A.Q.iX+o.A.A.Q.I+o.PS[0])&&ZC.DQ(o.M.iY+o.M.BC+(o.M.AA%180==0?o.M.F/2:o.M.I/2),o.A.A.Q.iY-o.PS[1],o.A.A.Q.iY+o.A.A.Q.F+o.PS[1])&&(o.M.1t(),o.M.EB(),!o.M.KE&&"5h"===1o.en&&(c.E["yM"+o.L]=o.M.AP,1b=o.A.A,ZC.AK(1b.A.K+"-3f"))))){1a F=ZC.AN.OB(1b.K,o.M);ZC.AK(1b.A.K+"-3f").4o=ZC.AK(1b.A.K+"-3f").4o+F}}}1u o.A.zi(o)}}1O o1 2k ao{2G(e){1E();1a t=1g;t.M7=1c,t.kK=0,t.P8=[],t.BE=e,t.lX=!0}2Q(e){1a t=1g;t.P8.1h(e),e.K5=t,e.M7=t.M7,e.BZ.UD=!0,e.XL=t.P8.1f-1,t.lX=!1}}1O E8 2k ao{2G(e,t,i,a,n,l){1E();1a r=1g;1j(1a o in r.M7=1c,r.BZ=e,r.AV=1c,r.fB=0,r.IO=1c,r.O=t||{},r.zk=i||lT,r.XP=a||-1,r.lM=1c,r.TG=1c,r.OJ=1c,1c!==ZC.1d(l)&&(r.TG=l),r.cM=E8.9r,1c!==ZC.1d(n)&&""!==n&&(r.cM=n),r.15t={},r.C3={},r.15E=[],r.RK=ZC.1k(r.zk/PO.UH),r.RK>100&&(r.RK=100),(ZC.3L||ZC.2L)&&(r.RK=ZC.1k(r.RK/4)),r.RK<5&&(r.RK=5),r.O)1c!==ZC.1d(E8.GO[o])?r.C3[o]=r.BZ[E8.GO[o]]:r.C3[o]=r.BZ[o];r.Y=0,r.K5=1c,r.XL=-1}6S(){1l 1g.Y+1>1g.RK?0:1}7h(){1a e,t,i,a,n,l,r=1g,o=1,s=r.M7.C.H.AB;if(r.Y++,r.Y>r.RK&&(r.Y===r.RK+1&&-1!==r.XL&&(r.K5.kK++,r.K5.kK===r.K5.P8.1f&&(r.K5.lX=!0)),o=0),o){1a C={};if(r.Y===r.RK)C=r.O,r.fB=1;1u 1j(1a A in r.fB=r.cM(r.Y,0,1,r.RK),r.O)1R(A){1i"2W":1a Z=[];1j(n=0,l=r.O[A].1f;n<l;n++)if(1c!==ZC.1d(r.C3[A][n])){Z[n]=[];1j(1a c=0,p=r.O[A][n].1f;c<p;c++)Z[n][c]=r.cM(r.Y,r.C3[A][n][c],r.O[A][n][c]-r.C3[A][n][c],r.RK)}C[A]=Z;1p;1i"iB":1i"gs":1i"gu":1i"gg":1a u=r.C3[A].1F("#",""),h=ZC.AN.G7(r.O[A]).1F("#",""),1b=ZC.QX(u.7p(0,2)),d=ZC.QX(u.7p(2,4)),f=ZC.QX(u.7p(4,6)),g=ZC.QX(h.7p(0,2)),B=ZC.QX(h.7p(2,4)),v=ZC.QX(h.7p(4,6)),E=ZC.P4(ZC.1k(r.cM(r.Y,1b,g-1b,r.RK)));1===E.1f&&(E="0"+E);1a b=ZC.P4(ZC.1k(r.cM(r.Y,d,B-d,r.RK)));1===b.1f&&(b="0"+b);1a m=ZC.P4(ZC.1k(r.cM(r.Y,f,v-f,r.RK)));1===m.1f&&(m="0"+m),C[A]="#"+E+b+m;1p;2q:C[A]=r.cM(r.Y,r.C3[A],r.O[A]-r.C3[A],r.RK)}if(r.BZ.1C(C),r.BZ.UD=!0,r.BZ.1q(),r.AV&&(1c!==ZC.1d(e=r.BZ.E["lO-1"])&&(r.BZ.CZ[1]=e),1c!==ZC.1d(e=r.BZ.E["lO-3"])&&(r.BZ.CZ[3]=e),"3L"===s&&1===r.Y&&(1w r.AV.A.HX!==ZC.1b[31]?r.BZ.E.dO=r.AV.A.HX:r.BZ.E.dO=r.AV.A.C5),r.AV.H&&(r.AV.H.E[r.AV.K+"-cS"]=[r.AV.iX,r.AV.iY,r.AV.iX+r.AV.I,r.AV.iY+r.AV.F])),r.lM)4O{r.lM(r.BZ,C)}4M(L){}if(r.AV){1a K={id:r.AV.H.K,4u:r.AV.C.K,3V:r.AV.A.L,5Q:r.AV.L,15i:r.fB,1U:r.AV.AE*r.fB};ZC.AN.C2("15q",r.AV.H,K)}}if(r.AV){if(1===r.Y||"3c"===s)-1!==ZC.AT(["2F","3L"],s)?0===ZC.A4("#"+r.BZ.K+"-2R").1f&&r.1t():r.1t();1u if(r.Y<=r.RK){1R(s){1i"2F":r.BZ.TO(!0);1p;1i"3L":r.BZ.TP(1c,!0)}r.BZ.U7&&r.BZ.U7(),"3L"===s&&/\\-cE\\-1B-\\d+\\-2r\\-\\d+\\-1N/.5O(r.BZ.K)&&(r.BZ.AZ=0),t=1c,1w r.BZ.DN!==ZC.1b[31]&&"3C"===r.BZ.DN&&(t=r.BZ.AZ,r.BZ.AZ=r.BZ.AQ);1a D=!1;if("2F"===s&&ZC.AK(r.BZ.K+"-2R")&&"5t"===ZC.AK(r.BZ.K+"-2R").8b&&(D=!0),D)i=[],a=[];1u if(i=ZC.P.lz(r.BZ.D,s,r.BZ,!1,!0),r.BZ.ME){1a F=ZC.P.nQ(r.BZ.D,r.BZ);a=ZC.P.lz(F,s,r.BZ,!1,!0)}1c!==ZC.1d(t)&&(r.BZ.AZ=t);1a I=r.BZ.C5,x=r.BZ.O0,X=r.BZ.TA,y=r.BZ.JX,Y=r.BZ.AI;1R(s){1i"2F":ZC.A4("#"+r.BZ.K+"-2R").3T("d",i.2M(" ")).3T("4a-3n",x).3T("3j-3n",I),r.BZ.ME&&ZC.A4("#"+r.BZ.K+"-sh-2R").3T("d",a.2M(" ")).3T("4a-3n",x*X).3T("3j-3n",I*X),D&&(ZC.A4("#"+r.BZ.K+"-2R").3T("x",r.BZ.iX).3T("y",r.BZ.iY).3T(ZC.1b[19],ZC.BO(0,r.BZ.I)).3T(ZC.1b[20],ZC.BO(0,r.BZ.F)),r.BZ.ME&&ZC.A4("#"+r.BZ.K+"-sh-2R").3T("x",r.BZ.iX+y*ZC.EF(r.BZ.OQ)).3T("y",r.BZ.iY+y*ZC.EL(r.BZ.OQ)).3T(ZC.1b[19],ZC.BO(0,r.BZ.I)).3T(ZC.1b[20],ZC.BO(0,r.BZ.F))),ZC.A4("#"+r.BZ.K+"-3A").3T("4a-3n",x).3T("cx",r.BZ.iX).3T("cy",r.BZ.iY).3T("r",Y).3T("3j-3n",I),r.BZ.ME&&ZC.A4("#"+r.BZ.K+"-sh-3A").3T("4a-3n",x*X).3T("cx",r.BZ.iX+y).3T("r",Y).3T("cy",r.BZ.iY+y).3T("3j-3n",I*X),""!==r.BZ.D7&&ZC.A4("#"+r.BZ.K+"-2R-5g").3T("4a-3n",x).3T("3j-3n",I),ZC.A4("#"+r.BZ.K+"-7v-2R").3q();1p;1i"3L":ZC.A4("#"+r.BZ.K+"-2R").9i().5f(1n(){1g.v=i.2M(" "),1g.3n=I}),r.BZ.ME&&ZC.A4("#"+r.BZ.K+"-sh-2R").9i().5f(1n(){1g.v=a.2M(" "),1g.3n=I*X}),ZC.A4("#"+r.BZ.K+"-3A").9i().5f(1n(){1g.3n=I}),ZC.A4("#"+r.BZ.K+"-3A").5f(1n(){1g.1I.1K=r.BZ.iX-Y+"px",1g.1I.1v=r.BZ.iY-Y+"px",1g.1I.1s=2*Y+"px",1g.1I.1M=2*Y+"px"}),r.BZ.ME&&(ZC.A4("#"+r.BZ.K+"-sh-3A").9i().5f(1n(){1g.3n=I*X}),ZC.A4("#"+r.BZ.K+"-sh-3A").5f(1n(){1g.1I.1K=r.BZ.iX-Y+y+"px",1g.1I.1v=r.BZ.iY-Y+y+"px",1g.1I.1s=2*Y+"px",1g.1I.1M=2*Y+"px"})),ZC.A4("#"+r.BZ.K+"-7v-2R").3q()}}}1u r.M7.C.QE=!0,r.M7.C.Y6(),r.M7.C.JS();1l r.Y===r.RK+1&&1c!==ZC.1d(r.TG)&&r.TG(),o}1t(){1a e=1g;if(1c!==ZC.1d(e.IO)?ZC.CN.1t(e.IO,e.BZ,e.BZ.D):e.BZ.1t(),e.OJ)4O{1===e.fB&&e.OJ()}4M(t){}}}E8.GO={bR:"B2",9P:"BH",7p:"CK",2e:"AI",x:"iX",y:"iY",1s:"I",1M:"F",2n:"C5",2f:"AA",yQ:"NI",2W:"D",cV:"AZ",iB:"B8",gq:"AQ",gs:"BU",gu:"A0",gg:"AC"},E8.9r=1n(e,t,i,a){1l i*e/a+t},E8.yZ=1n(e,t,i,a){1a n=(e/=a)*e;1l t+i*(4*(n*e)+-9*n+6*e)},E8.z2=1n(e,t,i,a){1a n=(e/=a)*e,l=n*e;1l t+i*(37.15K*l*n+-116.15s*n*n+134.166*l+-68.59*n+14.169*e)},E8.z3=1n(e,t,i,a){1l(e/=a)<1/2.75?i*(7.kY*e*e)+t:e<2/2.75?i*(7.kY*(e-=1.5/2.75)*e+.75)+t:e<2.5/2.75?i*(7.kY*(e-=2.25/2.75)*e+.16a)+t:i*(7.kY*(e-=2.16b/2.75)*e+.16c)+t},E8.z5=1n(e,t,i,a){1a n=(e/=a)*e;1l t+i*(n*e+-3*n+3*e)},E8.z4=1n(e,t,i,a){1a n=(e/=a)*e,l=n*e;1l t+i*(l*n+-5*n*n+10*l+-10*n+5*e)},E8.RR=[E8.9r,E8.yZ,E8.z2,E8.z3,E8.z4,E8.z5],ZC.aH={16d:16e,16f:5L,167:0,16g:1,16i:2,16j:3,16k:4,16l:5,16m:0,16n:1,16o:2,16h:3,165:1,15W:2,164:3,15O:4,15P:5,15Q:6,15R:7,15T:8,15U:9,15N:10,15V:11,15X:12,160:13,161:2,162:3,163:4,17I:5};1O PO 2k ao{2G(e){1E();1a t=1g;t.C=e,t.S0=!1,t.C4=1c,t.P8=[],t.PP={},t.lS=1c}pw(e,t){1a i=1g;1c===ZC.1d(i.PP[e.BE])&&(i.PP[e.BE]=e,e.M7=i,i.S0||(1c!==ZC.1d(t)&&t>0?2v.5I(1n(){i.4c()},t+1):i.4c()))}2Q(e){1a t=1g;e.M7=t,e.XP>0?(t.P8.1h(e),2v.5I(1n(){e.BZ.UD=!0,t.S0||t.4c()},e.XP+1)):(e.BZ.UD=!0,t.P8.1h(e),t.S0||t.4c())}4c(){1a e=1g;e.S0=!0,ZC.AN.C2("196",e.C.A,{id:e.C.A.K,4u:e.C.K});1a t=!0;!1n i(){t||e.7h(),t=!1,e.S0&&(e.C4=2v.ih(i))}()}7h(){1a e,t=1g,i=0;if(t.S0){1j(1a a=0,n=t.P8.1f;a<n;a++)i+=t.P8[a].6S();if("3c"===t.C.H.AB)if(t.C.H.KE)1c!==ZC.1d(e=ZC.AK(t.C.K+"-4l-bl-c"))&&e.9k("2d").pc(t.C.iX,t.C.iY,t.C.I,t.C.F);1u 1j(a=0,n=t.C.AY.A7.1f;a<n;a++)1j(1a l=0;l<t.C.AY.A7[a].T0;l++)1c!==ZC.1d(e=ZC.AK(t.C.K+"-1B-"+a+"-bl-"+l+"-c"))&&e.9k("2d").pc(t.C.iX,t.C.iY,t.C.I,t.C.F);1j(a=0,n=t.P8.1f;a<n;a++)0===t.P8[a].7h()&&(t.P8[a].BZ.UD=!1);1j(1a r in t.PP)1j(t.PP[r].lX||(i+=1),a=0,n=t.PP[r].P8.1f;a<n;a++)t.PP[r].P8[a].XL===t.PP[r].kK?0===t.PP[r].P8[a].7h()&&(t.PP[r].P8[a].BZ.UD=!1):"3c"===t.C.H.AB&&t.PP[r].P8[a].1t();0===i&&(t.PP={},t.P8=[],t.8M())}}8M(e){1c===ZC.1d(e)&&(e=!1);1a t,i=1g;if(e&&(i.18X=!0),2v.tp(i.C4),i.C.Y6(),i.C.QE=!1,ZC.AK(i.C.H.K)){i.C.JS(),2v.5I(1n(){(t=ZC.AK(i.C.A.K+"-3f"))&&i.C.AY.HV&&(-1===ZC.AT(["5i","9f","8k","81","7g"],i.C.AF)&&1!==1o.ny||i.C.AY.HV.3X(1n(e,t){1l ZC.AN.N5(e)>ZC.AN.N5(t)?1:-1}),t.4o+=i.C.AY.HV.2M(""))},33),i.C.oh(),i.S0=!1;1j(1a a=0,n=i.P8.1f;a<n;a++)i.P8[a].TG=1c;if(i.P8=[],i.PP={},e||ZC.AN.C2("183",i.C.A,{id:i.C.A.K,4u:i.C.K}),1c!==ZC.1d(i.lS))4O{i.lS()}4M(l){}}}}PO.UH=33,1n(){1j(1a e=["ms","Ds","7m","o"],t=0,i=e.1f;t<i&&!2v.ih;++t)2v.ih=2v.17P||2v[e[t]+"18u"],2v.18H=2v.18F||2v[e[t]+"18D"]||2v[e[t]+"18A"];2v.ih||(2v.ih=1n(e){1l 2v.5I(e,PO.UH)}),2v.tp||(2v.tp=1n(e){2v.ik(e)})}(),1o.3t(1c,"eW",1n(e,t){1j(1a i,a,n=0,l=t[ZC.1b[16]].1f;n<l;n++)if(t[ZC.1b[16]][n].1J&&-1!==ZC.AT(["3P","1y","bQ","1N","c2","2U","5x","6b","9c","8a","dP","6T","7o"],t[ZC.1b[16]][n].1J)&&t[ZC.1b[16]][n].FK){1a r=t[ZC.1b[16]][n];ZC.6z(r);1a o=r.FK||{};ZC.6z(o);1a s,C,A,Z=ZC.IL(o.j0||"10%"),c=o.18q||{1D:"18r"},p=o.cb||{},u=o[ZC.1b[8]]||"0.3",h=r[ZC.1b[11]]||[],1b=[];if("3P"===t[ZC.1b[16]][n].1J){1a d=0;1j(i=0;i<h.1f;i++)h[i][ZC.1b[5]]&&1c!==ZC.1d(h[i][ZC.1b[5]][0])&&(d+=h[i][ZC.1b[5]][0]);Z>0&&Z<1&&(Z*=d),s=[].4z(h);1a f=0,g="";1j(C=1,i=h.1f-1;i>=0;i--)h[i][ZC.1b[5]]&&1c!==ZC.1d(h[i][ZC.1b[5]][0])&&h[i][ZC.1b[5]][0]<Z&&(f+=h[i][ZC.1b[5]][0],g+=(h[i].1D||"Dy no."+C)+":"+h[i][ZC.1b[5]][0]+"<br>",h[i][ZC.1b[8]]=u,1b.1h(h[i]),h.6u(i,1),C++);f>0&&(C>2?(A={6n:[f],s6:!1,"1T-6h":[1],"2H-1D":g=g.2x(0,g.1f-4)},ZC.2E(c,A),h.1h(A),1o.3t(e.id,"Gd",1n(t){if(t.iq.6h){1a i=1o.7c(t.id);if(!i)1l;1a a=1o.qv(i,t.4u);1j(1a n in a.qF())"3P-f6-"===n.2x(0,8)&&a.4m(n,1c);1o.3p(e.id,"e1",{1T:1b}),2v.5I(1n(){1a t=1o.3p(e.id,"tR",{4d:"2r",3V:0,5Q:0}),i={id:"s7",x:t.x,y:t.y,1D:"< t6",bL:"c",4S:"iv"};ZC.2E(p,i),1o.3p(e.id,"o0",{1J:"1H",1T:i})},1)}}),1o.3t(e.id,"Fv",1n(t){if("s7"===t.1H.id){1a i=1o.7c(t.id);if(!i)1l;1a a=1o.qv(i,t.4u);1j(1a n in a.qF())"3P-f6-"===n.2x(0,8)&&a.4m(n,1c);1o.3p(e.id,"pO",{1J:"1H",id:"s7"}),1o.3p(e.id,"e1",{1T:h})}})):r[ZC.1b[11]]=[].4z(s))}1u{1a B=0,v=[];1j(i=0;i<h.1f;i++){if(v[i]=0,h[i][ZC.1b[5]]&&h[i][ZC.1b[5]].1f)1j(a=0;a<h[i][ZC.1b[5]].1f;a++)v[i]+=ZC.2l(h[i][ZC.1b[5]][a]);B=ZC.BO(B,v[i])}Z>0&&Z<1&&(Z*=B),s=[].4z(h);1a E=[],b=[];1j(C=1,i=h.1f-1;i>=0;i--)if(v[i]<Z){if(h[i][ZC.1b[5]]&&h[i][ZC.1b[5]].1f)1j(a=0;a<h[i][ZC.1b[5]].1f;a++)E[a]=ZC.1Y(E[a]||"0"),E[a]+=h[i][ZC.1b[5]][a],b[a]=b[a]||"",b[a]+=(h[i].1D||"Dy no."+C)+":"+h[i][ZC.1b[5]][a]+"<br>";1b.1h(h[i]),h.6u(i,1),C++}if(E.1f)if(C>2){1j(a=0;a<b.1f;a++)b[a]=b[a].2x(0,b[a].1f-4);A={6n:E,s6:!1,"1T-6h":[1],"1T-tt-1D":b,"2H-1D":"%1T-tt-1D"},ZC.2E(c,A),h.1h(A),1o.3t(e.id,"Gd",1n(t){if(t.iq.6h){if(!1o.7c(t.id))1l;1o.3p(e.id,"e1",{1T:1b}),2v.5I(1n(){1a t=1o.3p(e.id,"tR",{4d:"2u"}),i={id:"qn",x:t.x+t.1s/2,y:t.y,1D:"< t6",bL:"c",4S:"iv"};ZC.2E(p,i),1o.3p(e.id,"o0",{1J:"1H",1T:i})},1)}}),1o.3t(e.id,"Fv",1n(t){if("qn"===t.1H.id){if(!1o.7c(t.id))1l;1o.3p(e.id,"pO",{1J:"1H",id:"qn"}),1o.3p(e.id,"e1",{1T:h})}})}1u r[ZC.1b[11]]=[].4z(s)}}1l t});',62,4415,'||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||var|_|null|_n_||length|this|push|case|for|_i_|return|new|function|zingchart|break|parse|color|width|paint|else|top|typeof||line|scale|Math|plot|append|text|super|replace|border|label|style|type|left|indexOf|height|area|class|item|marker|switch|copy|data|value|legend|background|max|_f_|scroll|||||||||||none|offset|bottom||size|angle|document|visible|guide|min|extends|_a_|360|alpha|cls|split|default|node|font|_b_|plotarea|window|margin|substring|load|right|preview|menu|items||_cp_|svg|constructor|tooltip|setup|objects|position|mobile|join|hover|css|usc|add|path|shape|fff|bar|solid|points|target|index|log|||||||||||graph|appendChild|canvas||string|map|page|JSON|auto|fill|clear|abs|unbind|opacity|move|exec|remove|handle|body|bind|clip|MAX|layout|padding|align|scales|circle|MAPTX|box||div|instanceof|center|zoom|DEV|click|shadow|vml|display|Array|handler|pie|ref|url|update|attr|270|plotindex|255|sort|state|enabled||||tick|||main||||stroke|round|start|object|html|cache|live|floor|image|ceil|die|plots|setAttribute|show|innerHTML|xmax|all|bugreport|delete|xmin|graphid|000|_x_|call|SCALE|concat|assign_a|poly|toFixed|absolute|mode|SKIP|json|form|touchstart|error|mask|999|catch|dynamic|try|viewsource|Number|out|cursor|plotid|minor|enable|createElement|history|maps|spline|||||||||||src|stringify|gradient|pow|hide|each|imgfill|normal|bubble|GESTURE|gui|_l_|prototype|RegExp|row|front|inherit|ymin|ymax|rect|2px|depth|parseInt|vbar|substr|range|sqrt|opposite|date|title|toUpperCase|format|custom|callback|setTimeout|transform|getNodeData|1e3|short|build|test|String|nodeindex|fullscreen|piano|touchend|shapes|highlight|inner|img|GUIDES|header|||||||||||parseFloat|hbar|m_|placement|shared|pool|_e|group|end|total|context|touchmove|mouseup|values|from|decimals|parentNode|middle|table|order|splice|layer|arc|info|scatter|_todash_|bold|hbubble|about|paint_|print|callout|repeat|9999|browser|loader|mousedown|active|fontSize|distance|csv|palette|ie67|00|status|vbar3d|off|fontWeight|fontFamily|preventDefault|trend|outer|||||plotidx||mouseover|translate|221F1F|http|override|ddd|getLoader|childNodes|pie3d|factor|radar|step|weight|aspect|source|close|webkit|zcv|hbar3d|slice|hook|eachfn|touches|api|eval|goal|nodeidx|important|javascript|init|fixed|href|zoomx|aAutoFit|item_|mouseout|true3d|stack|oRE|span|sFontWeight|arrow|flat|zoomy|button|_c_|progress|D1D3D4|exit|subtitle|trigger|sum|mousemove|xls|stock|5px|1px|hbullet|className|negation|key||ccc||hasOwnProperty|isNaN|area3d|tagName|getPMap|location|last|getToggleAction|cnt|action|1e4|entry|vbullet|percent|void|send|CSV|fast|export|zidx|pointer|hscatter|plus|npv|nbsp|www|zoomTo|images|space|_p_|name|333|gauge|pattern|oPS|radial|01|diff|block|val|stop|static|separator|animation|navigator|after|initcb|light|arguments|blocker|kmin|float|nestedpie|58595B|||number|kmax|adjust||column|hidden|connector||quirks|eee|line3d|Object|oPPI|mixed|locate|vertical|children|square|getContext|apply|dragged|paintPreview|DAY|hideCM|family|linear|coords|ready|which|radius|rose|cross|matrix|crosshair|dblclick|ring|zc_legend_mousescroll|reverse|rgb|select|targetid|EVENT|png|overflow|side|toggle|method|change|ticks|angleEnd|getTooltipPosition|oMask|zIndex|pages|rgba|mid|pointsarea|clearInterval|EVENTS|footer|frame|tolerance|Date|FONTFAMILY|destroy|input|zindex|equal|setAttributeNS|ajax|vfunnel|filled|async|version||atan|mapPointsToPreview|10px|toString|behaviors|root|_tx_||rules|ZCClass|element|multiple|down|||hfunnel|mousewheel|COLORS|msie|styles|segmented|exponent|SEC|MIN|success|complete|getInstance|scrollTop|ANIMATION|marker_|removeChild|scrollLeft|selection|mixed3d|message|icon|gear|rel|rtl|graphset|pstack|params|_boxoverlap2_|dark|transparent|NODE_EV|A1J|toLowerCase|chart|skip|setdata|tdim|pyramid|pageX|flash|mdim|venn|render|wait||tools||iXVal||TOUCHEVENTS|direction|LN10|facet1||oblique|open|user|A0N|italic||com|safe|setNodeData|pageY||lineHeight||ctx|facet2|_fixed_|single|output|iYVal|facet3|feed|getTime|SKIPTRACKERS|256|objmove|anchor|ic_line|gshape|idx|getAttribute|vline|angleStart|ignore|IMAGES|datalength|togglePreviewMasks|resize|flatten|GET|decoration|Function|theme|varea|_INFO_|textarea|Resource|SEQ|textAlign|rule|setupcb|goforward|back|goback|uid||horizontal|axis|classic|zero|keys||viewimage||paddingTop|||xy_|Jan|BUILDCODE||fillStyle|drawImage|tween|||Image|clientX|Thu|setRequestHeader|CanvasCache|plotset|defaults|fontStyle|bYX|refresh|currency|zooming|tab|A5G|timezone|power|userAgent|getElementById|utc|bounds|666|dashstyle|lineWidth|reference|not|fire|000000|A1R|ie678|labels|nodes|V3D|intersect|random|A7A9AC|paddingLeft|continue|paddingBottom|textDecoration|MON||||clientY|collapsed|paddingRight|bidi|sTypeX|arrows|cccccc|day||SKIPMAPS|labelid|visibility|dx2||vector|dx1|A3P|||baseVal|updates|false|A1P|moveTo|sampling|FSID|A23|curtain|A3J|preserve|AB6|sMaster|hideprogresslogo|A1O|opacity2|bar3d|_pageX_|jpeg|unit|forw|1970|querySelector|bBS|3dxy|GMT|LEGEND|_int_|setseriesdata|addPMap|8C8C8C|raw|A53|414042|highlightItem|selected|force|interval|A1M|stepped|watermark||swipe|bandwidth|sep|AA5|beforeSend|md5|||OBJECTMODE|xmlns|4px|org|average|A3S||A8A||globalAlpha|series|Data|touch|cos|sin|getElementsByTagName|fromCharCode|A04|A68|xtype|generated|labelindex|onmouseout|onmouseover|A65|clearPreview|reload|charCodeAt|A66|segment|REFRESH_TICK|A5E|month|query|zcrandom|dataparse|headers|CACHECANVASTEXT|cone|intxy|isFinite|long|A0M|progression|bullet|sel|A0C|cwidth|A3U||setInterval|300|1800|||overscroll|DOMMouseScroll|download|wrapper|A0G||margins||A1X||jsonsource|A3L|||onreadystatechange|before||||count|aBandWidths|A4Z|modal|inactive|widgets|A3K|z3d|ratio|dashdot|dotted|A4Y|bIsBottom|encodeURIComponent|documentElement|3e6c7b|contextmenu|pdf|i18n|license|head|lat|dist|rectangle|application|submit|smart|readyState|originalsource|VERSION|found|getComputedStyle|styleSheets|zoomout|_end_|dashed|viewall|A2U|checked||A0F||point|backgroundColor2|getstyle||IMG404|DEFAULT|getElementsByClassName|rotate|parentElement|nodeType|lon|borderWidth|charAt|borderColor||backgroundColor1|zoomin|A06|A2T|first|05|legendminimize|nodata|_pageY_|restore|getdata|A1G|collapse|websockets|clearGuide|goals|colors|View|0px|A3W|A2S|Right|_ang_|Left|Top|onmousemove|NULL|A2R|titles|stroked|facet4|hmixed|underline|lineTo|A5A|setAnchor|A08|A09|A5V|keyvalue|CANVASTEXT|flags|A6A|totals|shapeindex|shapeid||1024|ll_|A9N|A9M|1e6|ctrlKey|facet5|timeout|A4E|xydistance|hasEvent|callEvent||A4G||A1I|A2M|save|A2O|ZCOUTPUT|NODE_EV_CHART|infotype|GUIDE_EV|bRTL|Close|gap|addColorStop|3dfacet|storage|true|A2L|_r_|nodekeyvalue|A43|html5|Bottom|cleanTouchEvents|A3Z|A0U|A1H|ZingChart|LICENSE|AEZ|A4H|A69|zc_loader_mousewheel|bNormalize|minute|events|b2D|A9O|URL|dim|A2I|lstep|FONTSIZE|A4C||lcoords|alignment||||XMLHttpRequest|requestAnimFrame||getBoundingClientRect|clearTimeout|A2N|CSS||AJAXEXPORT|data_|xdata|MAX_VALUE|||LOCALSVGEXPORT|hand|A1K|A0R|previewscale|insertBefore|CDCDCD|lineColor|aperture|onload|showguide|dataurl|overlap|fit|A7H|modules|A1F|post|A0V|normalize|A2D|multiplier|locale|sTypeE|exitfullscreen|protocol|setScrollingFlag|A0P|extendAPI||||threshold|setupPlotArea|A4J|A36|defs|Download|global|A1Y|fixPlacement|days|color2|929497|PATTERNS|PLOTSHLAYER||BLANK|025|palatte|A33|tap|A63|_image|A22|A31|exportdata|filter|A2Z|filename||zc_guide_touchend|595959|onerror|A47|AAO|wh_|_h_|A1V|cancel|applyJsRuleSvg|A14|ffffff|A2E|getSize|A0S|item_title|vboxid|A5K|parsecb|A8B|markerbg|relative|opera|A30|smooth|zcoutput|A3N|A10|A4K|A2A|alignPosition|A61|DOMFRAGMENTS|A7Q|getFormatValue|_hex2rgb_|blocked|cloneNode|borderRight|borderLeft|A19|65535|toDataURL|nulls|A5W|yall|_append_||A3D|A5C|A8U|contour|MAPSONBOTTOM|connect||offsetX|evalFn|offsetY|bars|col|base64|A9S||ruler||bPoly|A2F|A13|A4D|xall|A3C|parseLayout|A21|A29|acos|_nfind_|A7C|CACHESELECTION|A6V|A56|A7G|A0Z|lowlevel|A0Y|A4R|A41|ANIMATION_|objtype|A4P|A1N|FSSTATUS|PLOTSTATS|A1Z|5625|A55|A28|exec_flash|oMap|A0X|A25|plotdata|A5T|A71|reset|NODE_EV_TYPE|A5J|A67||A3X||A11|pull||oNode_|xlink|A12|foreignObject|Blob|xml|setLineDash|months|A0W||textprint||empty|transport|hasData|stream|disableanimation|A38|369|PARSE3D|_txp_|applyRGBA|marginTop|A1W|A01|marginLeft|showhide|sharedZScale|THEME|full|A0T|mini|bound|AAN|A2X|A5X|onStop|500|Series|TTLOCK|A9V|A3Y|year|disabled|AC5|tip|match|beginPath|strokeStyle|coord|A5H|ActiveXObject|AB8|A32|AAM|A45||iframe||A27|A5M|A34|A03|pinch|AAJ|||A7A|closePath||A89|currentStyle||Lucida|stopfeed|hour|bBind|lin|AA4|second|butt|A35|clientWidth|A4A|parser|TOUCHZOOM|attachEvent|A4F|A62|thousands|A1T|minimize|A3I|set|defaultView|calculate|BODY|36e5|A0O|addEventListener|A2G|clientLeft|250|clientTop|A4I|aMDXY|viewaspng|A00|A4Q|nowrap|isBold|A5O|undefined|A0Q|A87|EQUIV|A8E|trapeze|AB7|||hideguide|A58|LICENSEKEY|A8C|microsoft|A52|zc_legend_mouseout|urn|ABA||dummy|A0A|A17|A8I||reorder|Wait|srcElement|schemas|SORTTRACKERS|zc_legend_mouseover|_POOL_|office|setmode|ring3d|A9R|AEO|statusText|A37|A2Q|xObj|A54|A6S|zc_loader_touchstart_static|AAA|Loading|octet|_sh_|005|paintCANVASText|minvalue|A3T|Guide|setScalesInfo|ACA|maxvalue|A3O|addobject|A2P|customprogresslogo|A7Y|caption|sans|serif|sMetaType|logo|mso|A6P|ASYNC_TICK|legend_toggle_action|_blank|||Submit|A2C|modify|initObjectsLayers|A7M|Page|oPlot_||createDocumentFragment|A3V|textContent|A6T|toggling||cylinder|A20|400|A4X|A6D|zoomto|customprogresstext|Your|A7K|AAL|oP0|AB3|createPreviewMasks|A5Z|A5Y|hamburger|A7T|A4N|A18|fullscreenmode|A0K|MEDIARULES|speed|A1C|sAlign|A4M|A0L|A0E|A4T|clearGenerated|A5R|l_|A3R|A8Z|AAR|JavaScript|A4S|AB1|STACKINGLOGIC|ABV|asin|file|resource|ABM|clearRect|A59||run|scrollTo|A9W|pointserror|A51|A8J|ABI||Custom|stacked|exact|A6K|_iX|A4O||trackers||A5D||TIMEOUT|deselect|xdist|AAK|A2V|A4U|A5Q|ABW|clearLabelBoxes|A39|A0D|oldcursor|ABP|A1A|next|formats|removeobject|bKeyWidth|skipfs|msecond|EXPORTURL|2048|polypoints|mimeTypes|_oCtxNode|AEJ|iDragPos|_nice_number_|joined|ydist|200|xzoomed|yzoomed|CHECKDECIMALS|ABX|A9Q|AB2|AC1|media||A2W|pan||2e3|fillText|A0I|A16|A0J|s_|A15|SYNTAX|navxy_btnback|AAF|en_us|kv_|A1S|_t|A92|b3D|getGraph|stops|A5S|changedTouches|AAT|USERCSS|e1eaec|AAB|email|polar|getAttributes|backgroundColor|switchto2d|clear_|99999|14px|score|chkcapture|chkdata|appendToValueBox|switchto3d|chars|menuitemid|zcvml|A6Y|funnel|AG0|menuid|_window_onunload_|A2K|offsetHeight|offsetWidth|||EDITSOURCE|DEBOUNCESPEED|A6L|areanode|dash|setseriesvalues|A5L|load_||AGC|||A95|toggleMasks|A2B|dot|KEEPSOURCE|A9T||SMARTDATELABELS|A94|AC4|1e9|ABZ|cssFloat|CMZINDEX||viewasjpg||AA2|||null3d|A1U|A1B|switchtolin|A3M|A81|switchtolog|low|GUIDETIMEOUT|8px|A9X|A9J|WebSocket|RESOURCES|AA0|high|bgc2|AC9|A93|bgc1|globalCompositeOperation|A60|A6N|vrange|disablepagescroll|ABG|enablepagescroll|||bandspace|A24|465|17px|detach|navpie_btnback|ABS|dataType|A6W|A7L|A64|A3G||A3A|DownloadXLS||columns|dots|||A50|A96|extension|ZINDEX|over|hidedatatable|AG5||nextSibling||mapshape|A4V|_cpa_||get|minus|showZCAbout|AAD|onloadend|A6O|NOABOUT|A83|A7O|marginBottom|useMap|mathpoints|backgroundPosition|miter|A26|A6U|lbltype|loadModules|A6M|_oMarker|marginRight|COPYDATA|thickness|createObjectURL|A97|A90|A84|atan2|ACD|_width_|1999|_unbind_|Back|ABC|AB4|webstorage|passive||sync|||bNpv|hasPassive||GRAPHID|verticalAlign|charset||description|ABN||clearAnimFrame|A4L||||startfeed|exportimageurl|focusposition|||utf|SPREADTYPE|jpg|A2J|borderBottom|shader|676667|unicode|D1D2D3|getPropertyValue|dasharray|A6Q|viewdatatable|styleFloat|600|A6R|setupDynamicPlotArea|Sans|getobjectinfo|hideLayer_|FFF|A5I|paintHistory|A6X|C6C6C6|7CA82B|wrapped|A5F|positioninfo|02|HTMLMODE|exportdataurl|downloadFile|runtimeStyle|F0F1F1|A3E|A49|autoFit|Show|rotation|rLen||About|calloutPosition|ExportData|getshapeinfo|FullScreen|xmiabt|getlabelinfo|ipad|onopen|SKIPPROGRESS||Print|lineCap|coordorigin||downloadxls|onmessage|SwitchTo3D|iphone|LinScale|LogScale|ViewDataTable|downloadsvg|quadraticCurveTo|downloadcsv|BugReport|downloadpdf|ACU|Menu|blur|SwitchTo2D|ABE|A3B|DownloadCSV|responseType|SaveAsImageJPG|PATTERN_|csvParser|fromAPI|INPUT|alert|confirm|emailmandatory|guide_mousemove|clipPath|support|backgroundImage|||||createRadialGradient|AAY|_title|getPlacementInfo|globals|createLinearGradient|ABQ||zcgraph|borderTop||themesloaded|youremail|actions|ViewSource|source_hide|senddata||checkbox|sendcapture|yourcomment|jsondata|infoemail|FORM|Parsed||ASYNC||A9F|Original|comment|screen|A0H|AAV|layers|heatmap|A9H|pagination|AD4|legendmaximize|textBaseline|alphabetic|sTypeN|prev|skip_objects_tracking|f90|ABB|dominantBaseline|AAX|AAZ|A72|sorted|forced|localhost|detail|AC0|ABD|tspan|AB9|flexible|createPattern||tile|pos|A57|asc|FASTWIDTH|900||AA3|svg0html|ACI||whiteSpace|guide_mouseout||CHARTS|dataload|strong|innerText|minindex|maxindex|999999|endangle|A7N|clippath||LITE|A8W|limit|imggen|keyup|3dtx|msSaveBlob|Name|vmax|WorksheetOptions|ACF|ExcelWorksheet|parent|ExcelWorksheets|ExcelWorkbook|initial|AREA|AD3|vmin|_parent|size2|coordsize|msg|vb_|Reload|PageScroll|IGNORESUBUNIT|getFullYear|215|mapItem|SKIPCONTEXTMENU|rawsource|FSZINDEX|defaultsurl|||contextMenu|AAU|bbox|A2Y|sBId|pathname|_top|startangle|userSpaceOnUse|anonymous|hPos||addmenuitem|toggleabout|response||options|filetype|A5N|downloadCSV|crossOrigin|downloadXLS|A6G|excel|encoding|gradientradial|viewDataTable|sigma|oval|persistent|UTF||origin|FFFFFF|gear6|11px|meta|getxyinfo|fold|thead|dataexport|doubleclick|scope|preserveAspectRatio|elementFromPoint|tbody|getimagedata|pageYOffset|pageXOffset|_height_|ABU|2000|vPos|ADB|tilt|author|A7P|6px|A4W|A9L|||A74|A6J|white|child|ownerNode|behavior|A6F|VML|setupValueBoxWH|RESIZESPEED|onunload||Scroll|jumped|scaletext||Table|Zoom|12px|A6E|Switch|AC2|6B7075|A7U||265E96|A82|A05F18|candlestick|A14BC9||ABT|ACQ|IMG|A7R|EF8535|addRule|A7S|A6I|A6H|D31E1E|29A2CC|LOGO_ABOUT|2c4a59|1AB6E3|marker_text_|bXY|AD8|Email|fillAngle|Error|Bug|Send|ABF|bUrl|AAI|A9K|mozilla|backEaseOut||AC3|elasticEaseOut|bounceEaseOut|strongEaseOut|regularEaseOut|you|indicator|setModule|getModules|band|AD1||numeric||ABY|Hide|backgroundcolor|paintMarker|Scale|A5U|Full|Screen|toStaticHTML|AC8|AC7|2654435769|linecolor|ABR|prop|SORTTOKENS|MSIE|compatMode|ShockwaveFlash|AAC|shockwave||adj|May|AAG|compat|xdiff|shortcut|ACO|ABL|316224e5|26784e5|864e5|ABH|FF00FF|AD0|ACZ|0123456789abcdef|1023|responseText|mirrored|ACG|ACJ|standard|ACW|_rgb2hex_|AD7||||AD9|||||||0x|dateformat|POST|dyn||mon|week|001|createElementNS|overlaps|getOptimalDateInterval|sec|querySelectorAll||innerWidth|clientHeight|paintTransformDate|bKeep|||Opera|removeEventListener|event|trident|originalEventZC|6e4|||||||||||||||||||ownerDocument|||||||||||stopPropagation|||||||childof|uniform|ABJ|_rcolor_||96C245|1089B3|A70|SKIPOBJCOUNT|THEMES|365|SPREADFACTOR|LOOKUPCSSTRANSFORM|detached|MAXPOOLSIZE|connected|aaa|A78|A9I||A7I|Helvetica|Arial|ALIAS|MODULESDEP|MODULESDIR|||||||||||||||||||ACH||||||||||||||||||ACS|blank|b6c8cf|969696||plot2|facet|plot1|plot0|paired|A8O|e6e6e6|face|A8R|ABO|f0f0f0|f6f6f6|A8V|A75||oP3|oP2|oP1|A73|facets|A8X|star||||||||||||||||||||||||||||||||||||skv|ranged|sizing|AC6||removeplot|AA1|star5|A5B|A9D|A7V|A8D|A9C|A99|QUOTEDVALUES|hint|AAQ|AA6|moz|diamond|A98|AAS|A9B|graphidx|Item|scalename|||||||||||||||minValue||||||||||||||||||||||A9A|nodevalue|removenode|A9E||triangle|ZCVRangeGraph|A7Z|A79|cluster|animate|monotone|maxValue|minValue_|A85|A8K|330|xb0|AA8|maxValue_|quick|AA9|A8F|A9Z|effect|A8M|||||||||||||||||A8N||||||||||||||||||||Step|A9G|AAH|delay||AAE|errors|A80|scalevalue|clicknode|A6Z|shiftKey|A5P|AAW|A8Q|A8P|pop|gif|hooks|A7B|A76|label_click|A8L|bubblepie|A7F|A7D|||||||||||nav||||||||||||||||||||||||||showtooltip|setnodevalue|A86|plot_click||ACM|A7J|A8H|sortFaces|A7X|addnode|modifyplot|addplot|A7W||DELAYEDTRACKERS|AAP|State|A8G|A8T|A6C|A44|A8S|ZCVRangePlotSet|A77|222222|||||||||||||||||||||||alt||||xWR15D1fqTyEALRVtLBrU||||||||||36393D|F7F8F8|ZoomOut|ececec||small|69c|fcfcfc|222|0084AA|spark|stylesheet|444|xhtml|OFFSET|qJhDZWB8OmFDaG8J|Yrbjmm0HqGPfwMbPPVOYIkPRA9yAZmYwG8Boi6gtnfJ1koXBeXhD1XGagDCN53vuoeksvabYi|a0a0a0|9c9c9c|xhhvK|AYKc4hVyx04biDWGx1aqwPX|909090|negative||resources|125px||||||||||||57585B|||||||||312F30|||||||||||5a5a5a|||||link|ny5sogAHv4|6C6D70|a6a6a6|||acacac|QQYK91VtUbjbmq8u4NNX2Q6zvNCuind1hPtMMot31k4MwB5iv0CylvaRXz6O3tO5VMGBLjozKUrDyVmw8szzFZwnEo5X1VA|d6d6d6|e0e0e0|dcdcdc|vk3JIhGITEQsUCtkgtslo4K1wwMRxPoBbAIXJ|Q8b3mQmpqvevD3VGFhuVV95PaXnbXTkr6h5M7j0mP3UDxMNo6g3TgCkSe5tiKb2QU3ttxD8PRRN7pFxkFxB||414141|ViewAll|d0d0d0|b0b0b0|8qbrzh3uZb2RgAeNY85a8dobWVLe40u8TgsEXDhEZJrHYnq46rTuS4XhK0nrW7uQmYw1lTTL5R4jFE|c6c6c6|c0c0c0|c5UOj7E1Ts8BhC5zljv|bcbcbc|b6b6b6|ZlVA4tExPxYQAQubERqJBDtSu6hfYb2k0isoX2ztWoke06s6woRayLWJCQ5kkhIyBKR7FQIRCQEIpJjCPFn|b7vN6MKpZRISDhBlhwCCafwTLcO||||||Open||||||||QWiu3TW1Sqk65M5ukh9vPzAUV||||FF0000|RED||||||||||||||800080|PURPLE|||FFC0CB|PINK|DEBUG|R0lGODlhAQABAIAAAP||wAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw|iVBORw0KGgoAAAANSUhEUgAAAJEAAAA1CAYAAABBVQnbAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAABu1JREFUeNrsXLFy4zYQBW9UR7wfSHh1iqMn6S3NxLXlLp3lL5D1ARlLkw|gLMilDUMgAYigZUm7MzAliiDBxcPu2|execFn|FFA500|ORANGE|000080|NAVY|800000|MAROON|XS3nq9ZiQkdaTF|MAGENTA|00FF00|LIME|3iet|SILVER|vstream|vjr5wKFyz9|vwaterfall|floatbar|HTML|||||||||||||||||||||||||||||||||||||vfloatbar|contentDocument|hfloatbar|boxplot||vboxplot|hboxplot|contentWindow|waterfall|Progression|FFFF00|C0C0C0|YELLOW|WHITE|EE82EE|dimension|VIOLET|40E0D0|dataready|hwaterfall|populationpyramid|population|TURQUOISE|4B0082|INDIGO|High|setTime|||||||||||||||||||||getMinutes|||||getHours|||getUTCFullYear|||||||getUTCMonth|getUTCDate|getUTCDay|getUTCMilliseconds||getUTCSeconds|strict|getUTCMinutes|getUTCHours|0x4000000000000|getMilliseconds|1099511627776|1073741824|DCDCDC|toExponential|firstChild|Module|loaded|script|AGL|Low|WELTcgScyGV0BiDqCG6wCyBa0rRQdEZC7sxaxri1ckNggRYKcr6A|getSeconds|getDay|7dLKj0u4UboHamBpK54HEm2lgisTwgbH78ucBtDG|A52A2A||||008000||||||||||||||||||||LnFKxSTOo9DkvU2rLvBFpH2hcKgFpCI9d2JELujMQNsd5CRFdVWKRU2G|||tooltipText||||||||||GREEN|808080|GRAY|FFD700||GOLD|FUCHSIA|00FFFF|CYAN|BROWN|getDate|0000FF|BLUE|syv7|BLACK|zc_|_colorAlpha_|587|299|hQWw6ePX6Nd|ext|getMonth|1048576|Q9MX3bb2wCfKYByGWZhvt69T0pIeyF9|ZoomIn|dM8LpS7Z4I7AprPgKguBYXu2aA2LX7m8GlM1Nbp8FbLCKMyvrDe1wnjDqwgnUruDIzESuKHqLfGHWFU7qfp2SW8w0FVssOiETQKUzH2IviWO5wqfAoJA1cjCgtAHUsfaRrLcZ0QvWmQ9U4cadgB7DRvHtyc40JGgf2PG63RS7HplhPTZ0mTpiag0dNCcPCf8YVrowDijfYCZgY1Tkjuv4VdyIvc0P7TSIJNBKIDTKNl0jjRZaxQGZGmH1bNk87wkD0iop8dj4zWuY5HnHNxg54wlS45LyQfnjCwD3BzTBCKjggaCGCnURE10kz4jLEhMHywHTcJ4OqbsLbefqsrc8SNFyxXqh6G5||||||||||||||||||||||||||||La0dM88io1YD|||||||||mUs6KHNRO7LazssfcSfmU|DownloadSVG|wTEATmQruIHqrjYrMQX05bnZ7kWZUYd2Fikjw2p6RJOCmTFgUow|qVNQN7LC0R1f2qsTFecq||JoRMu03lkd|Ap13G5Pl60VY2tP23ebFtYgiNlhaxARkSaLYL51a4ixsAdxXPjBJ7RsSalmz60Khpy7UVCuj9tWhHxUY41VVkEK0U92kvZ2oddI5kTsGqJTF2nsDOx0A9KlKEXhWeC4cDh5LqMtRpUVxDFLH4WRJ7pV8R2LUrPCjXUn00gXG0zZ|a0kBGIVqW7w5p|DownloadPDF|LpR|KogIo6YW9puMNDROzGSFyOjaAiWlkQaEOfPrb6aEMWqLiSKwqYrEI8ioMAdpTENupKklsc8frtf1C|mDXZPwp3r|FHY4MQWwxllcdiZClai09I7uPapDMHQ1dwFx3FORIcy11FYlHWRWKol0Tiavz8A|SAvgCcGK8xwwI50SqLlQK6OSmTLrrKU||iJamYE8hWNRD8|eISInsEMhdnu61hMlkggN6|dqKYwJd|VkTCh|qIGWF4EW6s8yQjTBxox9eFBBGO1NxJJEzKhLAZYebk57lCGKDtnw7b7ZCKkHLUgU1CCHt6ZtigVWa4rgMwWSJhzUcfpDikDyayldG0pLWrmu9BRFOs6klob5ZW45EUUZQX6yB5pHyMBsrlJzRZbSkpafwHjpgSBqnCTeA3Q3t2qlpEDfssghz7uT7xrbnXCp2CyJSQLhe|fs20zVRLOz3bUd0w03sL4IbTwd|4XAMkpkRRnMq7BojiP4tPB82JYwmUk|ViewAsPNG|DGfGvEVBorFq3Wnhtx6Yqy9VxUZqqe0tfBMPEIF3FD|MaEpYHUNl1tWbF|ZRanRwIAeIoYKRkpGDIoV2G3ita8dB5x7Z9xlp1NMsJ4S5de|||||||||||||||||sHpv2CQbwcaz686qLg7mNWoOJJY||||||||||||||||||||Mac|appVersion|enabledPlugin|SwpRBHeB1YixfuVRG1TmnSxwWyN0IJS7c9S8PojwWgDREblQFpIiZPi||iz8B4ZeKmmw8MwBobcSg7iaSoz3|isOXJyUK|vml_flag1|BasicStructure|feature|SVG11|hasFeature|sFPIO77cUufurMOB4iEfoGsPNDGag0qacrn1t345|implementation|9b5FpaWogBlGlnahdp7f|adapter|hosted|AAC1LYqunMJ6bAAAAAElFTkSuQmCC|1Ej7LVT54f1LOOmMYlxWO50RTCw1Zk7YE7L6XckMizSxLVN7alzJNmWTuwyDO3ZlZIVekmadI4858O0S5CuoGEkWSRpJKSmkUgX|RaJXhS6LycpIqpftZkRJhMO572|IBG7ZbjiyQo9iuVCa1v99GggSadJXi70rlyWQBc5wRfXX4xbsoje3ZGThb9LcDL8Sj2UF4xYKOxvCXXdPaalnYh0J2x5Cl4qgc|WBJjiPWRH11|ZXwTNiuycKjVg6UAnU1DK2x3Wc9SQUwZijotArVk4Kk4qU5mRF3NHLUJ5HzPoAy417o6|kDDNP30|91MI7WR9j|QrFO8i|||||||||||||||||||||||||Z5lqa6GmMaJ3ovBAinRfPjKajajJvo5||||||||||||Jd3QAp9Q|HfEu|3bCP3jl|iVBORw0KGgoAAAANSUhEUgAAAI0AAAA8CAYAAABbyDl1AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAACGZJREFUeNrsXF9oFEccno2XRE1SI9ZQLcY0oIW21miQKoi5UPtiK7m||Oh5wrVCj0J88z3EvzDH9HlrWwe08awtzc2YcdEiTaSphVZu|1GKhuWDrg7Z4|QCaCakp9pTZyfMoNovPssYMjT3DNPI4|aOD4pDDnRmYlAXLhs4BOdIy0ki8zEjZ2hPSkVmEqZiXSyJri|7m5HGtU7wZOAJBD0jiSLTk0SmRZqSolWkkmyzlZ4kpKaZMsttpXFkapKWe1waR0JqGolMT09yGUHCMWkkJGR6kpCkkZCkkZCkkZCkkZCQpJGQpJGQpJF4yUnj|PNDI1Tbf0BMJcuX1C2LA5Wq|b9MOl61q6el5VUkbl5r2vXKt|LZxDvXM|pagescroll|2OGzTacUP7|uiGel5TWZcS4vAaRk1P7VGWotrU85wFi0nOwhLtmtQ4UtMkaJjEa20agaTGkZpGIlPS0|Tj7zU0|o2iVTBMSKhQr9|lILihGF6oueUH2w2pwFxT71gtonWy9SUJDEmKK0CvGikGtjg4mJ5p9xOt8mt5ndm93bTfaS3DkfLGxu525nZ779|hole|oRz1|YqcJkkaSwzGoqS3sUE9Lyj3yhmS6Uki4yNN7PFftH|5yasb|Vm9CqRWkzcP7bffRMbChpuznstfMvyCHBN2fqno2RjVY2Phsbl|2fH|5vv5VEjcQJ|||||||||||||||||||||||||||||||||||||1D7HmGKf99x|qO24SRzRMfZFbXj5bHUSrAAdVHa9l97qfWF6|m6yyJ|SaveAsImagePNG||stcWCMb|sFaLLx3XKTmuZ31RzkdyTnL0khU17vrf7Tm4iT5TJ0kTXHlc2iUEmBe3vSco1APRIVgiH9rX9XbSJxgQiIob4WUh3y0BNCEIEIhUFmlqACbOoTo0|DzfVs2U6u|cSJtJZJwX8O959NvAUQkZDUkf8FGADBt38P1SQKxwAAAABJRU5ErkJggg|fo5HjhzDhip7IB2j91evC|NP0t0TXQLRA8CQR3QPta0|mp7POvaHfv04TPly95g0ROHNJ1Ohr7lzTc|O3FaQ|3WsoVJfz1EIiG6|hdDFeefOUPthvBZqH6TR0X6hDUge7hiiIZZWu5jebXg8rAr0aB9|wHBB4N651NqL6UGinMV9l0tQsFtOXVkcGK4H0uBwucLPhigzT0vSLT|4YZrNHz1GonGOsYcTkEe8W9YT3wVaxSr|6FLlyk7dG3KlpaSYGCr2sa7bTe1e02977rVJPCpz7R|jIo2dCfd9c1BIrIoVy0ho7y7t|sJeiZdgFxezwleaBUzwvA5n6UkuvPugJaqoIWSfS|SaveAsImage|20p2HvtBeK16w|dA4L48Qhg5heiRpTG6|G49I2399oJuNwtCxx4OksJshWZCNDEQnYqIMymkgYZJFxgJs5gFkEBxDikrmKF91jVE1ZTFR6L9rQOkZKZCrdKVtNxOQl6aiF5GGMoTpnpBNgm9PUvYd19RNtMz2WpU6h6VPIG7|CSS1Compat|Mobile|808285||||||||||||||||||||||||||||||||||||gEVkGqUcFnmWmB876F18Vzb5KmaijbjDAAiZ8k|HideDataTable|563d02|UmnVcu533TixhgnyNRM0dgQgplGsPAkzYXwPzOzZnC7X81FBps0ln7DE4j7FFz7lhGSYWZ0CxLkF6pdEiin27WykHHILXKaLTuPRmQGAoidX8LoScOsD145xJQUVRD||da9b04|f9c332|2UJYM4scG7|Gly8ldqZxWOBc41UBB9q8UPEmcr54GRIXwBXn|b79007|cc3300|ZDnzAMIzyhNVVTYKAAorAHTVgHL5pHOS|jxVuWAXwZANAz5HirKR|ACY|ef4810|a62b02|0392bb|00b0e1|007fa3|mfBxXECbZeDYIpPe0riMsGKim8qBXMDEFy4hQv6tighD|89b92e|C0usUJLOMetQOYTOFYVPe0KRHcl7nAGK98k8k0dUIKCXNemIq0SK1RF4LK8iEXIbCMzAUCi37flOJ8UUWGCoLNRctAQiBLrHioLkbvAIswP0CoHtcFcF0Sg6FEFgNIGAeSSg8RbWhZ5ctuW|6D6E71|a7da47|84680a|6e4503|||||||||||||||||||||||||||||||||20398B||||D66C1C|RW9rdQ3KGBUxLYmGuHKG4nWk8aleqiz6XSFA5N|HuIgKZX6X7wuUGhlOxoME4FvoO1RGZ88uT6XPKAOuCgxm0aK6|BBBBBB||8txLDPrukmci|52575C|0D457D|874600|EtDO54vP7th1HL0CpYAaiGnGtSDVnEBONJ4Xozi|8832B0|XchRDsvhtTzeR|638F12|0b32a0|BA0505|P1EAsGUPZcSM03|keyCode|ACV|Hhx|05a0cd|00bbf1|edf3f5|1540a0|4d62b1|6a921f|ZZAmsQUXYwbyUHTR67kghQvnYMIk4k3OwKQS|||||||||||||BlackBerry|||||||||||||||||||||decodeURIComponent|||skip_segment_tracking|skip_context_menu|AEL|AEK||16777215|epSuudpRmrP2rclZFf1zG7cIMfzS6zh9SuAyLfJE|HEAD|2F8JpusDi3zMEzINF9Q|Powered|AED|_inj_|skip_marker_tracking|ACR||sessionStorage|iPhone|iPad|Android|siKWwCkzRAy|coWIi|Windows|PPC|Mini|Charts|Mr3cMfUhWN83PYpfQ6W||||||||||||||||||||||||||||||||||||00384A|Network|00AE4D|Edgdh2omT9RRXE1hZAfaQYvmbx|MbWyNGzvXcSgKYaAL21h6hpRb5JFSiEliszxIjHVE6l798cAShQAChBIt7N8klnbQ||FB301E|9B26AF|aCdvBK|E2D51A|hFUVqR7S1l8G8QQJznxCUvX|E80C60|00BAF2|preservezoom|iFDTf4|5005onWQnHXM18l0kq|Since|wWjRZKI7TbgLtHD|09A9DA|i5CcR1RvRAp3VpUL4qt9AJMyMDznvcPkoxEZZ5uZ5iw9AWPm41ihhTB1TWPJIvdeJP3KZbrBr9wVnn20IMTBrkDka|Modified|use_single_canvas|use_fast_markers|use_fast_mode|skip_interactivity|graphs|643717713|||||||||createEvent|||||||||||||||report||||getGraphInfo|||||||||rpoly4|clearLayer|Apply|rpoly5||nThank|sent|rpoly6|was|rpoly7|bug|initThemes|rpoly8|rpoly9|rpoly|gear3|gear4|Cancel|mandatory|address|your|reply|gear5|rpoly3|defineModule|via|||||hidemenu||||||||||||||||||||closemodal||||||||||||ic_area|ic_bars|disable|star3||getrender|beforedestroy|zcdestroy|star4|star6|showmenu|star9|history_forward|history_back|star7|fireEvent|formatNumber|formatDate|textbox|getObject|getPalette|star8|plugin|our|receive|mapdata|||||Apr|||||||getImageData|||putImageData||||||||||||||||||||||January|Dec|Nov|Oct||Sep|Aug|Jul|Jun|Mar|March|Feb|Saturday|Friday|Thursday|Wednesday|Tuesday|Monday|Sunday|Sat|Fri|Wed|February|April|want|bite||||||||||||||||||||||||||||||||||||gear7|Address|gear8|Comment|gear9||ellipse|Capture|Graph|Report|flow|Message|Occured|June|Has|Exporting|December|November|October|September|droplet|tan|August|July|both|openmodal|plothide|patternUnits||appendseriesdata||||||||||||||||||||||||||||||||||legend_maximize|legend_hide|legend_minimize|togglelegend||shadowAlpha||shadowColor|shadowBlur|ignoreduplicates|appendseriesvalues|getseriesvalues|ADF|legend_show|getseriesdata|node_remove|node_add|removescalevalue|addscalevalue||lineJoin|setscalevalues|node_set|plot_modify|plot_remove|plot_add||||||||||||||||||||||||||||shadowDistance|shadowAngle|addgraph|backgroundRepeat||getData|borderRadius|setData|getplotvalues|getnodevalue|gradientColors|gradientStops|getnodelength|getscales|getplotlength|getgraphlength|borderAlpha|getoriginaljson|backgroundFit|backgroundScale|fillType|fillOffsetX|fillOffsetY|toggledimension|legendscroll|lineStyle|lineSegmentSize|lineGapSize|bezierCurveTo|linecap|hideplot|showversion|getscaleinfo|getbubblesize|composite|clearscroll|unbinddocument|setpage|getpage|set3dview|get3dview|getversion|getcharttype|step_|toggleplot|togglebugreport|togglesource|showplot|plotshow|trapezoid|showhoverstate|unlocktooltip|locktooltip|hidetooltip|parallelogram|datetime|stepSize|setcharttype|objectId|linejoin|VMLv|miterlimit||endcap|joinstyle||scalenumvalue||scalepos|scaleidx|onviewport|stackType|ADC|maxIndex_|offsetStart|minIndex_|pieAngleStart|pieAngleEnd|pieSlice|maxIndex|offsetR|minIndex|lonlat2xy|refAngle|logBase|offsetEnd|Tue|Mon|TouchEvent|AB5|AD5|165796510|nStrlng4Cu|1236535329|tOmLlc9nc9|1502002290|40341101|1804603682|1990404162|42063|1958414417|373897302|1770035416|45705983|1473231341|1200080426|176418897|1044525330|606105819|389564586|680876936|271733878|1732584194|1069501632|701558691|HOSTNAME|2022574463|76029189|722521979|358537222|681279174|1094730640|155497632||1272893353||1530992060|35309556|||||1839030562|378558|38016083|1926607734|1735328473|51403784|1444681467|1163531501|187363961|1019803690|568446438|ADJ|405537848|660478335|271733879|hostname|421815835|MAP|Content|With|Requested|XMLHTTP|Microsoft|cancelBubble|returnValue|compatible|_list_|detachEvent|parentWindow|AG6|offsetLeft|offsetTop|pixelLeft|filters|innerHeight|STRONG|modulesready|unicodeBidi|polygon|originalEvent|ontouchstart|urlencoded|03rqqtR|1732584193|55296|Core|240|2097151|224|2047|zflags|65536|57343||fhx|56320|56319|||XKoJJLnmLPUYiWUuQKAOGnuAIWrSN_ZIj_LYvS|IvQ40ajd|jRkihLOSfysvRQTBtQOUUO|SdgZUHWKDVQ|xST_SWRLyFKogwOclSB|jsNorthNine|AppIdentity|09Vczmfsf|Q5G8dRWLio|7PVG0KjUnLRqnRSPOeqf6gu|hpxK6BeHRUtuasojuRTPFQYdzNGN57nxLviTf1hV4lwaFjtbv|tA1g0W0k7AKV1g1ouow1nG|EJLl0khmPDSKBJa8fkP70KLNtrxt5pE2yjx|640364487|530742520|objectBoundingBox|calloutExtension|bgcolor|borderRadiusBottomLeft|calloutType|cssText|createStyleSheet|namespaces|calloutHook|calloutWidth|calloutHeight|13px|30px|csvdata|inline|3px|rectShortcut|spacing|letter|27px|outset|20px|60px|80px|ACT|borderRadiusBottomRight|borderRadiusTopRight|pixmap|Source|radialGradient|linearGradient|Sun|gradientUnits|Forward|Exit|Log|viewBox|use|Linear|All|borderRadiusTopLeft||Out|Export|XLS|SVG|PDF||JPG|PNG|Chart|Disable|Enable|control|003C4F|khtml|995338651|30611744|clipart|ADH|343485551|718787259|fillcolor|1120210379|textpathok|145523070|1309151649|1560198380|1873313359|vml0|textpath|2054922799|1051523|1894986606|1700485571|svg0|writing|57434055|1416354905|1126891415|198630844|plugins|canvas0|container|userdef|insertRule|scrollHeight|docked|panning|ACX|ADE|AD6|ADG|setLabel|setlabel|render_flash|Ext|0html|Grande|bolder|Unicode|700|800|640|480|wrap|lock|9998|u2014|problem|ACC|HideGuide|psum|nodeinfo|plotinfo|kvts|pmi|settweenmode|pmv|pxv|pavg|stage|pper|legendmarker|legenditem|legendfooter|legendheader|drag|draggable|animation_step|2629743e3|2825|ADI|widths|zoomToV|csize|632448e6|markers|blended|master|refy|31556926e3|refx|ACP|base|used|view|snap|share|045|wheelDelta|scaling|SLIDE_TOP|EXPAND_BOTTOM|EXPAND_LEFT|EXPAND_RIGHT|EXPAND_HORIZONTAL|facet99|SLIDE_LEFT|SLIDE_RIGHT|SLIDE_BOTTOM|EXPAND_VERTICAL|UNFOLD_HORIZONTAL|stepsize|viewport|UNFOLD_VERTICAL|EXPAND|GROW|FLY_IN|EXPAND_TOP|FADE_IN|08|LINEAR||7475|9375|625|984375|SLOW|4e3|FAST|BACK_EASE_OUT|BY_PLOT_AND_NODE|ELASTIC_EASE_OUT|BOUNCE_EASE_OUT|STRONG_EASE_OUT|REGULAR_EASE_OUT|NO_SEQUENCE|BY_PLOT|BY_NODE|desc|2e4|ShowGuide|3dshape|rows|scale_|clearselection|shp_|lbl_|getselection|setselection|legend_mouseover|objectsready|legend_mouseout|gcomplete|gload|legend_|_click|imges|objectsinit|cols|feed_start|Metric|feed_step|softclear|feed_clear|getobjectsbyclass|repaintobjects|updateobject|4096|shape_|label_|feed_stop|sm_|si_title|si_|clearfeed|getinterval|setinterval|feed_interval_modify|366|LINK||3e4|guideh|extra|sequence|attributes|MIN_VALUE|plottext|plot_|pair|guidev|clustered|ff9900|histogram|dimensions|18e5|12e5|RefNode|6e5|selections|density|gparse|while|crosshairy|crosshairx|noData|hmixed3d|ACN|scrolly|scrollx|shift|359|always|keyval|separate|ACB|setguide|resetguide|ACE|UNFOLD|pxi|setobjectsmode|400px|FileReader|result|CDATA|requestAnimationFrame|readAsDataURL|exportimage|saveasimage|dataToCSV|vnd|downloadRAW|Build|enctype|calloutOffset|forEach||Built|source_show|animation_end|RECT|barWidth|210|320|510|about_show|PARSED|1500|edge|blob|https|535|Calibri|zoomtovalues|REC|html40|x3c|gte|DisplayGridlines|endif|getzoom|postzoom|others|Others|x3e|menu_item_click|RequestAnimationFrame|ProgId|content|Excel|Sheet|Category|CancelRequestAnimationFrame|webkitURL|Section|CancelAnimationFrame|section|cancelAnimationFrame|about_hide|cancelAnimFrame|nORIGINAL|2009|multipart|ADD|WIDTH|HEIGHT|RENDER|RESOLUTION|END|submitreportH5|php|node_|getZCPoint3D|hover_image|EMAIL|bDead|sticky|scaleval|graphindex|beforezoom||GoForward|GoBack|ExitFullScreen|animation_start|brightness|modifier|COMMENT|whisker|IMAGE|ohlc'.split('|'),0,{}))}
/* harmony default export */ __webpack_exports__["default"] = (zingchart);

/***/ })

}]);
//# sourceMappingURL=vendor-es2015.js.map